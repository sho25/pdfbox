begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|multipdf
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test merging different PDFs with AcroForms.  *   *   */
end_comment

begin_class
specifier|public
class|class
name|MergeAcroFormsTest
block|{
specifier|private
specifier|static
specifier|final
name|File
name|OUT_DIR
init|=
operator|new
name|File
argument_list|(
literal|"target/test-output/merge/"
argument_list|)
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|OUT_DIR
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
comment|/*      * PDFBOX-1031 Ensure that after merging the PDFs there is an Annots entry per page.      */
annotation|@
name|Test
specifier|public
name|void
name|testAnnotsEntry
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Merge the PDFs form PDFBOX-1031
name|PDFMergerUtility
name|merger
init|=
operator|new
name|PDFMergerUtility
argument_list|()
decl_stmt|;
name|URL
name|url1
init|=
operator|new
name|URL
argument_list|(
literal|"https://issues.apache.org/jira/secure/attachment/12481683/1.pdf"
argument_list|)
decl_stmt|;
name|InputStream
name|is1
init|=
name|url1
operator|.
name|openStream
argument_list|()
decl_stmt|;
name|URL
name|url2
init|=
operator|new
name|URL
argument_list|(
literal|"https://issues.apache.org/jira/secure/attachment/12481684/2.pdf"
argument_list|)
decl_stmt|;
name|InputStream
name|is2
init|=
name|url2
operator|.
name|openStream
argument_list|()
decl_stmt|;
name|File
name|pdfOutput
init|=
operator|new
name|File
argument_list|(
name|OUT_DIR
argument_list|,
literal|"PDFBOX-1031.pdf"
argument_list|)
decl_stmt|;
name|merger
operator|.
name|setDestinationFileName
argument_list|(
name|pdfOutput
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|merger
operator|.
name|addSource
argument_list|(
name|is1
argument_list|)
expr_stmt|;
name|merger
operator|.
name|addSource
argument_list|(
name|is2
argument_list|)
expr_stmt|;
name|merger
operator|.
name|mergeDocuments
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// Test merge result
name|PDDocument
name|mergedPDF
init|=
name|PDDocument
operator|.
name|load
argument_list|(
name|pdfOutput
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"There shall be 2 pages"
argument_list|,
literal|2
argument_list|,
name|mergedPDF
operator|.
name|getNumberOfPages
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"There shall be an /Annots entry for the first page"
argument_list|,
name|mergedPDF
operator|.
name|getPage
argument_list|(
literal|0
argument_list|)
operator|.
name|getCOSObject
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|ANNOTS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"There shall be 1 annotation for the first page"
argument_list|,
literal|1
argument_list|,
name|mergedPDF
operator|.
name|getPage
argument_list|(
literal|0
argument_list|)
operator|.
name|getAnnotations
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"There shall be an /Annots entry for the second page"
argument_list|,
name|mergedPDF
operator|.
name|getPage
argument_list|(
literal|1
argument_list|)
operator|.
name|getCOSObject
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|ANNOTS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"There shall be 1 annotation for the second page"
argument_list|,
literal|1
argument_list|,
name|mergedPDF
operator|.
name|getPage
argument_list|(
literal|0
argument_list|)
operator|.
name|getAnnotations
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|mergedPDF
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

