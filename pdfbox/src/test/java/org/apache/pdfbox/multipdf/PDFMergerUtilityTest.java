begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2014 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|multipdf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|BufferedImage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|TestCase
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|TestCase
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|io
operator|.
name|MemoryUsageSetting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocumentCatalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPageTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|COSObjectable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDNameTreeNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDNumberTreeNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|documentinterchange
operator|.
name|logicalstructure
operator|.
name|PDStructureElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|documentinterchange
operator|.
name|logicalstructure
operator|.
name|PDStructureTreeRoot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAnnotationWidget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|documentnavigation
operator|.
name|destination
operator|.
name|PDPageDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|documentnavigation
operator|.
name|destination
operator|.
name|PDPageFitDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|form
operator|.
name|PDAcroForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|form
operator|.
name|PDField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|rendering
operator|.
name|PDFRenderer
import|;
end_import

begin_comment
comment|/**  * Test suite for PDFMergerUtility.  *  * @author Maruan Sahyoun (PDF files)  * @author Tilman Hausherr (code)  */
end_comment

begin_class
specifier|public
class|class
name|PDFMergerUtilityTest
extends|extends
name|TestCase
block|{
specifier|final
name|String
name|SRCDIR
init|=
literal|"src/test/resources/input/merge/"
decl_stmt|;
specifier|final
name|String
name|TARGETTESTDIR
init|=
literal|"target/test-output/merge/"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|File
name|TARGETPDFDIR
init|=
operator|new
name|File
argument_list|(
literal|"target/pdfs"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|DPI
init|=
literal|96
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
operator|new
name|File
argument_list|(
name|TARGETTESTDIR
argument_list|)
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
operator|new
name|File
argument_list|(
name|TARGETTESTDIR
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"could not create output directory"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Tests whether the merge of two PDF files with identically named but      * different global resources works. The two PDF files have two fonts each      * named /TT1 and /TT0 that are Arial and Courier and vice versa in the      * second file. Revisions before 1613017 fail this test because global      * resources were merged which made trouble when resources of the same kind      * had the same name.      *      * @throws IOException if something goes wrong.      */
specifier|public
name|void
name|testPDFMergerUtility
parameter_list|()
throws|throws
name|IOException
block|{
name|checkMergeIdentical
argument_list|(
literal|"PDFBox.GlobalResourceMergeTest.Doc01.decoded.pdf"
argument_list|,
literal|"PDFBox.GlobalResourceMergeTest.Doc02.decoded.pdf"
argument_list|,
literal|"GlobalResourceMergeTestResult.pdf"
argument_list|,
name|MemoryUsageSetting
operator|.
name|setupMainMemoryOnly
argument_list|()
argument_list|)
expr_stmt|;
comment|// once again, with scratch file
name|checkMergeIdentical
argument_list|(
literal|"PDFBox.GlobalResourceMergeTest.Doc01.decoded.pdf"
argument_list|,
literal|"PDFBox.GlobalResourceMergeTest.Doc02.decoded.pdf"
argument_list|,
literal|"GlobalResourceMergeTestResult2.pdf"
argument_list|,
name|MemoryUsageSetting
operator|.
name|setupTempFileOnly
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests whether the merge of two PDF files with JPEG and CCITT works. A few revisions before      * 1704911 this test failed because the clone utility attempted to decode and re-encode the      * streams, see PDFBOX-2893 on 23.9.2015.      *      * @throws IOException if something goes wrong.      */
specifier|public
name|void
name|testJpegCcitt
parameter_list|()
throws|throws
name|IOException
block|{
name|checkMergeIdentical
argument_list|(
literal|"jpegrgb.pdf"
argument_list|,
literal|"multitiff.pdf"
argument_list|,
literal|"JpegMultiMergeTestResult.pdf"
argument_list|,
name|MemoryUsageSetting
operator|.
name|setupMainMemoryOnly
argument_list|()
argument_list|)
expr_stmt|;
comment|// once again, with scratch file
name|checkMergeIdentical
argument_list|(
literal|"jpegrgb.pdf"
argument_list|,
literal|"multitiff.pdf"
argument_list|,
literal|"JpegMultiMergeTestResult.pdf"
argument_list|,
name|MemoryUsageSetting
operator|.
name|setupTempFileOnly
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// see PDFBOX-2893
specifier|public
name|void
name|testPDFMergerUtility2
parameter_list|()
throws|throws
name|IOException
block|{
name|checkMergeIdentical
argument_list|(
literal|"PDFBox.GlobalResourceMergeTest.Doc01.pdf"
argument_list|,
literal|"PDFBox.GlobalResourceMergeTest.Doc02.pdf"
argument_list|,
literal|"GlobalResourceMergeTestResult.pdf"
argument_list|,
name|MemoryUsageSetting
operator|.
name|setupMainMemoryOnly
argument_list|()
argument_list|)
expr_stmt|;
comment|// once again, with scratch file
name|checkMergeIdentical
argument_list|(
literal|"PDFBox.GlobalResourceMergeTest.Doc01.pdf"
argument_list|,
literal|"PDFBox.GlobalResourceMergeTest.Doc02.pdf"
argument_list|,
literal|"GlobalResourceMergeTestResult2.pdf"
argument_list|,
name|MemoryUsageSetting
operator|.
name|setupTempFileOnly
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * PDFBOX-3972: Test that OpenAction page destination isn't lost after merge.      *       * @throws IOException       */
specifier|public
name|void
name|testPDFMergerOpenAction
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|PDDocument
name|doc1
init|=
operator|new
name|PDDocument
argument_list|()
init|)
block|{
name|doc1
operator|.
name|addPage
argument_list|(
operator|new
name|PDPage
argument_list|()
argument_list|)
expr_stmt|;
name|doc1
operator|.
name|addPage
argument_list|(
operator|new
name|PDPage
argument_list|()
argument_list|)
expr_stmt|;
name|doc1
operator|.
name|addPage
argument_list|(
operator|new
name|PDPage
argument_list|()
argument_list|)
expr_stmt|;
name|doc1
operator|.
name|save
argument_list|(
operator|new
name|File
argument_list|(
name|TARGETTESTDIR
argument_list|,
literal|"MergerOpenActionTest1.pdf"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|PDPageDestination
name|dest
decl_stmt|;
try|try
init|(
name|PDDocument
name|doc2
init|=
operator|new
name|PDDocument
argument_list|()
init|)
block|{
name|doc2
operator|.
name|addPage
argument_list|(
operator|new
name|PDPage
argument_list|()
argument_list|)
expr_stmt|;
name|doc2
operator|.
name|addPage
argument_list|(
operator|new
name|PDPage
argument_list|()
argument_list|)
expr_stmt|;
name|doc2
operator|.
name|addPage
argument_list|(
operator|new
name|PDPage
argument_list|()
argument_list|)
expr_stmt|;
name|dest
operator|=
operator|new
name|PDPageFitDestination
argument_list|()
expr_stmt|;
name|dest
operator|.
name|setPage
argument_list|(
name|doc2
operator|.
name|getPage
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|doc2
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|setOpenAction
argument_list|(
name|dest
argument_list|)
expr_stmt|;
name|doc2
operator|.
name|save
argument_list|(
operator|new
name|File
argument_list|(
name|TARGETTESTDIR
argument_list|,
literal|"MergerOpenActionTest2.pdf"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|PDFMergerUtility
name|pdfMergerUtility
init|=
operator|new
name|PDFMergerUtility
argument_list|()
decl_stmt|;
name|pdfMergerUtility
operator|.
name|addSource
argument_list|(
operator|new
name|File
argument_list|(
name|TARGETTESTDIR
argument_list|,
literal|"MergerOpenActionTest1.pdf"
argument_list|)
argument_list|)
expr_stmt|;
name|pdfMergerUtility
operator|.
name|addSource
argument_list|(
operator|new
name|File
argument_list|(
name|TARGETTESTDIR
argument_list|,
literal|"MergerOpenActionTest2.pdf"
argument_list|)
argument_list|)
expr_stmt|;
name|pdfMergerUtility
operator|.
name|setDestinationFileName
argument_list|(
name|TARGETTESTDIR
operator|+
literal|"MergerOpenActionTestResult.pdf"
argument_list|)
expr_stmt|;
name|pdfMergerUtility
operator|.
name|mergeDocuments
argument_list|(
name|MemoryUsageSetting
operator|.
name|setupMainMemoryOnly
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|PDDocument
name|mergedDoc
init|=
name|PDDocument
operator|.
name|load
argument_list|(
operator|new
name|File
argument_list|(
name|TARGETTESTDIR
argument_list|,
literal|"MergerOpenActionTestResult.pdf"
argument_list|)
argument_list|)
init|)
block|{
name|PDDocumentCatalog
name|documentCatalog
init|=
name|mergedDoc
operator|.
name|getDocumentCatalog
argument_list|()
decl_stmt|;
name|dest
operator|=
operator|(
name|PDPageDestination
operator|)
name|documentCatalog
operator|.
name|getOpenAction
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|documentCatalog
operator|.
name|getPages
argument_list|()
operator|.
name|indexOf
argument_list|(
name|dest
operator|.
name|getPage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * PDFBOX-3999: check that page entries in the structure tree only reference pages from the page      * tree, i.e. that no orphan pages exist.      *       * @throws IOException       */
specifier|public
name|void
name|testStructureTreeMerge
parameter_list|()
throws|throws
name|IOException
block|{
name|PDFMergerUtility
name|pdfMergerUtility
init|=
operator|new
name|PDFMergerUtility
argument_list|()
decl_stmt|;
name|PDDocument
name|src
init|=
name|PDDocument
operator|.
name|load
argument_list|(
operator|new
name|File
argument_list|(
name|TARGETPDFDIR
argument_list|,
literal|"PDFBOX-3999-GeneralForbearance.pdf"
argument_list|)
argument_list|)
decl_stmt|;
name|PDDocument
name|dst
init|=
name|PDDocument
operator|.
name|load
argument_list|(
operator|new
name|File
argument_list|(
name|TARGETPDFDIR
argument_list|,
literal|"PDFBOX-3999-GeneralForbearance.pdf"
argument_list|)
argument_list|)
decl_stmt|;
name|pdfMergerUtility
operator|.
name|appendDocument
argument_list|(
name|dst
argument_list|,
name|src
argument_list|)
expr_stmt|;
name|src
operator|.
name|close
argument_list|()
expr_stmt|;
name|dst
operator|.
name|save
argument_list|(
operator|new
name|File
argument_list|(
name|TARGETTESTDIR
argument_list|,
literal|"PDFBOX-3999-GeneralForbearance-merged.pdf"
argument_list|)
argument_list|)
expr_stmt|;
name|dst
operator|.
name|close
argument_list|()
expr_stmt|;
name|PDDocument
name|doc
init|=
name|PDDocument
operator|.
name|load
argument_list|(
operator|new
name|File
argument_list|(
name|TARGETTESTDIR
argument_list|,
literal|"PDFBOX-3999-GeneralForbearance-merged.pdf"
argument_list|)
argument_list|)
decl_stmt|;
name|checkForPageOrphans
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * PDFBOX-3999: check that no streams are kept from the source document by the destination      * document, despite orphan annotations remaining in the structure tree.      *      * @throws IOException      */
specifier|public
name|void
name|testStructureTreeMerge2
parameter_list|()
throws|throws
name|IOException
block|{
name|PDFMergerUtility
name|pdfMergerUtility
init|=
operator|new
name|PDFMergerUtility
argument_list|()
decl_stmt|;
name|PDDocument
name|doc
init|=
name|PDDocument
operator|.
name|load
argument_list|(
operator|new
name|File
argument_list|(
name|TARGETPDFDIR
argument_list|,
literal|"PDFBOX-3999-GeneralForbearance.pdf"
argument_list|)
argument_list|)
decl_stmt|;
name|doc
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|getAcroForm
argument_list|()
operator|.
name|flatten
argument_list|()
expr_stmt|;
name|doc
operator|.
name|save
argument_list|(
operator|new
name|File
argument_list|(
name|TARGETTESTDIR
argument_list|,
literal|"PDFBOX-3999-GeneralForbearance-flattened.pdf"
argument_list|)
argument_list|)
expr_stmt|;
name|ElementCounter
name|elementCounter
init|=
operator|new
name|ElementCounter
argument_list|()
decl_stmt|;
name|elementCounter
operator|.
name|walk
argument_list|(
name|doc
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|getStructureTreeRoot
argument_list|()
operator|.
name|getK
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|singleCnt
init|=
name|elementCounter
operator|.
name|cnt
decl_stmt|;
name|int
name|singleSetSize
init|=
name|elementCounter
operator|.
name|set
operator|.
name|size
argument_list|()
decl_stmt|;
name|doc
operator|.
name|close
argument_list|()
expr_stmt|;
name|PDDocument
name|src
init|=
name|PDDocument
operator|.
name|load
argument_list|(
operator|new
name|File
argument_list|(
name|TARGETTESTDIR
argument_list|,
literal|"PDFBOX-3999-GeneralForbearance-flattened.pdf"
argument_list|)
argument_list|)
decl_stmt|;
name|PDDocument
name|dst
init|=
name|PDDocument
operator|.
name|load
argument_list|(
operator|new
name|File
argument_list|(
name|TARGETTESTDIR
argument_list|,
literal|"PDFBOX-3999-GeneralForbearance-flattened.pdf"
argument_list|)
argument_list|)
decl_stmt|;
name|pdfMergerUtility
operator|.
name|appendDocument
argument_list|(
name|dst
argument_list|,
name|src
argument_list|)
expr_stmt|;
comment|// before solving PDFBOX-3999, the close() below brought
comment|// IOException: COSStream has been closed and cannot be read.
name|src
operator|.
name|close
argument_list|()
expr_stmt|;
name|dst
operator|.
name|save
argument_list|(
operator|new
name|File
argument_list|(
name|TARGETTESTDIR
argument_list|,
literal|"PDFBOX-3999-GeneralForbearance-flattened-merged.pdf"
argument_list|)
argument_list|)
expr_stmt|;
name|dst
operator|.
name|close
argument_list|()
expr_stmt|;
name|doc
operator|=
name|PDDocument
operator|.
name|load
argument_list|(
operator|new
name|File
argument_list|(
name|TARGETTESTDIR
argument_list|,
literal|"PDFBOX-3999-GeneralForbearance-flattened-merged.pdf"
argument_list|)
argument_list|)
expr_stmt|;
name|checkForPageOrphans
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// Assume that the merged tree has double element count
name|elementCounter
operator|=
operator|new
name|ElementCounter
argument_list|()
expr_stmt|;
name|elementCounter
operator|.
name|walk
argument_list|(
name|doc
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|getStructureTreeRoot
argument_list|()
operator|.
name|getK
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|singleCnt
operator|*
literal|2
argument_list|,
name|elementCounter
operator|.
name|cnt
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|singleSetSize
operator|*
literal|2
argument_list|,
name|elementCounter
operator|.
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * PDFBOX-4408: check that StructParent values are found in the ParentTree.      *      * @throws IOException      */
specifier|public
name|void
name|testStructureTreeMerge3
parameter_list|()
throws|throws
name|IOException
block|{
name|PDFMergerUtility
name|pdfMergerUtility
init|=
operator|new
name|PDFMergerUtility
argument_list|()
decl_stmt|;
name|PDDocument
name|src
init|=
name|PDDocument
operator|.
name|load
argument_list|(
operator|new
name|File
argument_list|(
name|TARGETPDFDIR
argument_list|,
literal|"PDFBOX-4408.pdf"
argument_list|)
argument_list|)
decl_stmt|;
name|PDDocument
name|dst
init|=
name|PDDocument
operator|.
name|load
argument_list|(
operator|new
name|File
argument_list|(
name|TARGETPDFDIR
argument_list|,
literal|"PDFBOX-4408.pdf"
argument_list|)
argument_list|)
decl_stmt|;
name|pdfMergerUtility
operator|.
name|appendDocument
argument_list|(
name|dst
argument_list|,
name|src
argument_list|)
expr_stmt|;
name|src
operator|.
name|close
argument_list|()
expr_stmt|;
name|dst
operator|.
name|save
argument_list|(
operator|new
name|File
argument_list|(
name|TARGETTESTDIR
argument_list|,
literal|"PDFBOX-4408-merged.pdf"
argument_list|)
argument_list|)
expr_stmt|;
name|checkWithNumberTree
argument_list|(
name|dst
argument_list|)
expr_stmt|;
name|checkForPageOrphans
argument_list|(
name|dst
argument_list|)
expr_stmt|;
name|dst
operator|.
name|close
argument_list|()
expr_stmt|;
name|checkStructTreeRootCount
argument_list|(
operator|new
name|File
argument_list|(
name|TARGETTESTDIR
argument_list|,
literal|"PDFBOX-4408-merged.pdf"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * PDFBOX-4417: Same as the previous tests, but this one failed when the previous tests      * succeeded because of more bugs with cloning.      *      * @throws IOException      */
specifier|public
name|void
name|testStructureTreeMerge4
parameter_list|()
throws|throws
name|IOException
block|{
name|PDFMergerUtility
name|pdfMergerUtility
init|=
operator|new
name|PDFMergerUtility
argument_list|()
decl_stmt|;
name|PDDocument
name|src
init|=
name|PDDocument
operator|.
name|load
argument_list|(
operator|new
name|File
argument_list|(
name|SRCDIR
argument_list|,
literal|"PDFBOX-4417-001031.pdf"
argument_list|)
argument_list|)
decl_stmt|;
name|PDDocument
name|dst
init|=
name|PDDocument
operator|.
name|load
argument_list|(
operator|new
name|File
argument_list|(
name|SRCDIR
argument_list|,
literal|"PDFBOX-4417-001031.pdf"
argument_list|)
argument_list|)
decl_stmt|;
name|pdfMergerUtility
operator|.
name|appendDocument
argument_list|(
name|dst
argument_list|,
name|src
argument_list|)
expr_stmt|;
name|src
operator|.
name|close
argument_list|()
expr_stmt|;
name|dst
operator|.
name|save
argument_list|(
operator|new
name|File
argument_list|(
name|TARGETTESTDIR
argument_list|,
literal|"PDFBOX-4417-001031-merged.pdf"
argument_list|)
argument_list|)
expr_stmt|;
name|dst
operator|.
name|close
argument_list|()
expr_stmt|;
name|dst
operator|=
name|PDDocument
operator|.
name|load
argument_list|(
operator|new
name|File
argument_list|(
name|TARGETTESTDIR
argument_list|,
literal|"PDFBOX-4417-001031-merged.pdf"
argument_list|)
argument_list|)
expr_stmt|;
name|checkWithNumberTree
argument_list|(
name|dst
argument_list|)
expr_stmt|;
name|checkForPageOrphans
argument_list|(
name|dst
argument_list|)
expr_stmt|;
name|dst
operator|.
name|close
argument_list|()
expr_stmt|;
name|checkStructTreeRootCount
argument_list|(
operator|new
name|File
argument_list|(
name|TARGETTESTDIR
argument_list|,
literal|"PDFBOX-4417-001031-merged.pdf"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * PDFBOX-4417: Same as the previous tests, but this one failed when the previous tests      * succeeded because the /K tree started with two dictionaries and not with an array.      *      * @throws IOException       */
specifier|public
name|void
name|testStructureTreeMerge5
parameter_list|()
throws|throws
name|IOException
block|{
name|PDFMergerUtility
name|pdfMergerUtility
init|=
operator|new
name|PDFMergerUtility
argument_list|()
decl_stmt|;
name|PDDocument
name|src
init|=
name|PDDocument
operator|.
name|load
argument_list|(
operator|new
name|File
argument_list|(
name|SRCDIR
argument_list|,
literal|"PDFBOX-4417-054080.pdf"
argument_list|)
argument_list|)
decl_stmt|;
name|ElementCounter
name|elementCounter
init|=
operator|new
name|ElementCounter
argument_list|()
decl_stmt|;
name|elementCounter
operator|.
name|walk
argument_list|(
name|src
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|getStructureTreeRoot
argument_list|()
operator|.
name|getK
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|singleCnt
init|=
name|elementCounter
operator|.
name|cnt
decl_stmt|;
name|int
name|singleSetSize
init|=
name|elementCounter
operator|.
name|set
operator|.
name|size
argument_list|()
decl_stmt|;
name|PDDocument
name|dst
init|=
name|PDDocument
operator|.
name|load
argument_list|(
operator|new
name|File
argument_list|(
name|SRCDIR
argument_list|,
literal|"PDFBOX-4417-054080.pdf"
argument_list|)
argument_list|)
decl_stmt|;
name|pdfMergerUtility
operator|.
name|appendDocument
argument_list|(
name|dst
argument_list|,
name|src
argument_list|)
expr_stmt|;
name|src
operator|.
name|close
argument_list|()
expr_stmt|;
name|dst
operator|.
name|save
argument_list|(
operator|new
name|File
argument_list|(
name|TARGETTESTDIR
argument_list|,
literal|"PDFBOX-4417-054080-merged.pdf"
argument_list|)
argument_list|)
expr_stmt|;
name|dst
operator|.
name|close
argument_list|()
expr_stmt|;
name|dst
operator|=
name|PDDocument
operator|.
name|load
argument_list|(
operator|new
name|File
argument_list|(
name|TARGETTESTDIR
argument_list|,
literal|"PDFBOX-4417-054080-merged.pdf"
argument_list|)
argument_list|)
expr_stmt|;
name|checkWithNumberTree
argument_list|(
name|dst
argument_list|)
expr_stmt|;
name|checkForPageOrphans
argument_list|(
name|dst
argument_list|)
expr_stmt|;
comment|// Assume that the merged tree has double element count
name|elementCounter
operator|=
operator|new
name|ElementCounter
argument_list|()
expr_stmt|;
name|elementCounter
operator|.
name|walk
argument_list|(
name|dst
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|getStructureTreeRoot
argument_list|()
operator|.
name|getK
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|singleCnt
operator|*
literal|2
argument_list|,
name|elementCounter
operator|.
name|cnt
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|singleSetSize
operator|*
literal|2
argument_list|,
name|elementCounter
operator|.
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|dst
operator|.
name|close
argument_list|()
expr_stmt|;
name|checkStructTreeRootCount
argument_list|(
operator|new
name|File
argument_list|(
name|TARGETTESTDIR
argument_list|,
literal|"PDFBOX-4417-054080-merged.pdf"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * PDFBOX-4418: test merging PDFs where ParentTree have a hierarchy.      *       * @throws IOException       */
specifier|public
name|void
name|testStructureTreeMerge6
parameter_list|()
throws|throws
name|IOException
block|{
name|PDFMergerUtility
name|pdfMergerUtility
init|=
operator|new
name|PDFMergerUtility
argument_list|()
decl_stmt|;
name|PDDocument
name|src
init|=
name|PDDocument
operator|.
name|load
argument_list|(
operator|new
name|File
argument_list|(
name|TARGETPDFDIR
argument_list|,
literal|"PDFBOX-4418-000671.pdf"
argument_list|)
argument_list|)
decl_stmt|;
name|PDStructureTreeRoot
name|structureTreeRoot
init|=
name|src
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|getStructureTreeRoot
argument_list|()
decl_stmt|;
name|PDNumberTreeNode
name|parentTree
init|=
name|structureTreeRoot
operator|.
name|getParentTree
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|COSObjectable
argument_list|>
name|numberTreeAsMap
init|=
name|PDFMergerUtility
operator|.
name|getNumberTreeAsMap
argument_list|(
name|parentTree
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|381
argument_list|,
name|numberTreeAsMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|743
argument_list|,
name|Collections
operator|.
name|max
argument_list|(
name|numberTreeAsMap
operator|.
name|keySet
argument_list|()
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
name|int
operator|)
name|Collections
operator|.
name|min
argument_list|(
name|numberTreeAsMap
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|743
argument_list|,
name|structureTreeRoot
operator|.
name|getParentTreeNextKey
argument_list|()
argument_list|)
expr_stmt|;
name|PDDocument
name|dst
init|=
name|PDDocument
operator|.
name|load
argument_list|(
operator|new
name|File
argument_list|(
name|TARGETPDFDIR
argument_list|,
literal|"PDFBOX-4418-000314.pdf"
argument_list|)
argument_list|)
decl_stmt|;
name|structureTreeRoot
operator|=
name|dst
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|getStructureTreeRoot
argument_list|()
expr_stmt|;
name|parentTree
operator|=
name|structureTreeRoot
operator|.
name|getParentTree
argument_list|()
expr_stmt|;
name|numberTreeAsMap
operator|=
name|PDFMergerUtility
operator|.
name|getNumberTreeAsMap
argument_list|(
name|parentTree
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|numberTreeAsMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|328
argument_list|,
name|Collections
operator|.
name|max
argument_list|(
name|numberTreeAsMap
operator|.
name|keySet
argument_list|()
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|321
argument_list|,
operator|(
name|int
operator|)
name|Collections
operator|.
name|min
argument_list|(
name|numberTreeAsMap
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// ParentTreeNextKey should be 321 but PDF has a higher value
name|assertEquals
argument_list|(
literal|408
argument_list|,
name|structureTreeRoot
operator|.
name|getParentTreeNextKey
argument_list|()
argument_list|)
expr_stmt|;
comment|//TODO if we delete ParentTreeNextKey and merge 000314.pdf with an empty file then
comment|// the new key should be 328
name|pdfMergerUtility
operator|.
name|appendDocument
argument_list|(
name|dst
argument_list|,
name|src
argument_list|)
expr_stmt|;
name|src
operator|.
name|close
argument_list|()
expr_stmt|;
name|dst
operator|.
name|save
argument_list|(
operator|new
name|File
argument_list|(
name|TARGETTESTDIR
argument_list|,
literal|"PDFBOX-4418-merged.pdf"
argument_list|)
argument_list|)
expr_stmt|;
name|dst
operator|.
name|close
argument_list|()
expr_stmt|;
name|dst
operator|=
name|PDDocument
operator|.
name|load
argument_list|(
operator|new
name|File
argument_list|(
name|TARGETTESTDIR
argument_list|,
literal|"PDFBOX-4418-merged.pdf"
argument_list|)
argument_list|)
expr_stmt|;
name|checkWithNumberTree
argument_list|(
name|dst
argument_list|)
expr_stmt|;
name|checkForPageOrphans
argument_list|(
name|dst
argument_list|)
expr_stmt|;
name|structureTreeRoot
operator|=
name|dst
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|getStructureTreeRoot
argument_list|()
expr_stmt|;
name|parentTree
operator|=
name|structureTreeRoot
operator|.
name|getParentTree
argument_list|()
expr_stmt|;
name|numberTreeAsMap
operator|=
name|PDFMergerUtility
operator|.
name|getNumberTreeAsMap
argument_list|(
name|parentTree
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|381
operator|+
literal|7
argument_list|,
name|numberTreeAsMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|408
operator|+
literal|743
argument_list|,
name|Collections
operator|.
name|max
argument_list|(
name|numberTreeAsMap
operator|.
name|keySet
argument_list|()
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|321
argument_list|,
operator|(
name|int
operator|)
name|Collections
operator|.
name|min
argument_list|(
name|numberTreeAsMap
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|408
operator|+
literal|743
argument_list|,
name|structureTreeRoot
operator|.
name|getParentTreeNextKey
argument_list|()
argument_list|)
expr_stmt|;
name|dst
operator|.
name|close
argument_list|()
expr_stmt|;
name|checkStructTreeRootCount
argument_list|(
operator|new
name|File
argument_list|(
name|TARGETTESTDIR
argument_list|,
literal|"PDFBOX-4418-merged.pdf"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * PDFBOX-4416: Test merging of /IDTree      *      * @throws IOException       */
specifier|public
name|void
name|testStructureTreeMergeIDTree
parameter_list|()
throws|throws
name|IOException
block|{
name|PDFMergerUtility
name|pdfMergerUtility
init|=
operator|new
name|PDFMergerUtility
argument_list|()
decl_stmt|;
name|PDDocument
name|src
init|=
name|PDDocument
operator|.
name|load
argument_list|(
operator|new
name|File
argument_list|(
name|SRCDIR
argument_list|,
literal|"PDFBOX-4417-001031.pdf"
argument_list|)
argument_list|)
decl_stmt|;
name|PDDocument
name|dst
init|=
name|PDDocument
operator|.
name|load
argument_list|(
operator|new
name|File
argument_list|(
name|SRCDIR
argument_list|,
literal|"PDFBOX-4417-054080.pdf"
argument_list|)
argument_list|)
decl_stmt|;
name|PDNameTreeNode
argument_list|<
name|PDStructureElement
argument_list|>
name|srcIDTree
init|=
name|src
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|getStructureTreeRoot
argument_list|()
operator|.
name|getIDTree
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PDStructureElement
argument_list|>
name|srcIDTreeMap
init|=
name|PDFMergerUtility
operator|.
name|getIDTreeAsMap
argument_list|(
name|srcIDTree
argument_list|)
decl_stmt|;
name|PDNameTreeNode
argument_list|<
name|PDStructureElement
argument_list|>
name|dstIDTree
init|=
name|dst
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|getStructureTreeRoot
argument_list|()
operator|.
name|getIDTree
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PDStructureElement
argument_list|>
name|dstIDTreeMap
init|=
name|PDFMergerUtility
operator|.
name|getIDTreeAsMap
argument_list|(
name|dstIDTree
argument_list|)
decl_stmt|;
name|int
name|expectedTotal
init|=
name|srcIDTreeMap
operator|.
name|size
argument_list|()
operator|+
name|dstIDTreeMap
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|192
argument_list|,
name|expectedTotal
argument_list|)
expr_stmt|;
name|pdfMergerUtility
operator|.
name|appendDocument
argument_list|(
name|dst
argument_list|,
name|src
argument_list|)
expr_stmt|;
name|src
operator|.
name|close
argument_list|()
expr_stmt|;
name|dst
operator|.
name|save
argument_list|(
operator|new
name|File
argument_list|(
name|TARGETTESTDIR
argument_list|,
literal|"PDFBOX-4416-IDTree-merged.pdf"
argument_list|)
argument_list|)
expr_stmt|;
name|dst
operator|.
name|close
argument_list|()
expr_stmt|;
name|dst
operator|=
name|PDDocument
operator|.
name|load
argument_list|(
operator|new
name|File
argument_list|(
name|TARGETTESTDIR
argument_list|,
literal|"PDFBOX-4416-IDTree-merged.pdf"
argument_list|)
argument_list|)
expr_stmt|;
name|checkWithNumberTree
argument_list|(
name|dst
argument_list|)
expr_stmt|;
name|checkForPageOrphans
argument_list|(
name|dst
argument_list|)
expr_stmt|;
name|dstIDTree
operator|=
name|dst
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|getStructureTreeRoot
argument_list|()
operator|.
name|getIDTree
argument_list|()
expr_stmt|;
name|dstIDTreeMap
operator|=
name|PDFMergerUtility
operator|.
name|getIDTreeAsMap
argument_list|(
name|dstIDTree
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedTotal
argument_list|,
name|dstIDTreeMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|dst
operator|.
name|close
argument_list|()
expr_stmt|;
name|checkStructTreeRootCount
argument_list|(
operator|new
name|File
argument_list|(
name|TARGETTESTDIR
argument_list|,
literal|"PDFBOX-4416-IDTree-merged.pdf"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test of the parent tree. Didn't work before PDFBOX-4003 because of incompatible class for      * PDNumberTreeNode.      *      * @throws IOException      */
specifier|public
name|void
name|testParentTree
parameter_list|()
throws|throws
name|IOException
block|{
name|PDDocument
name|doc
init|=
name|PDDocument
operator|.
name|load
argument_list|(
operator|new
name|File
argument_list|(
name|TARGETPDFDIR
argument_list|,
literal|"PDFBOX-3999-GeneralForbearance.pdf"
argument_list|)
argument_list|)
decl_stmt|;
name|PDStructureTreeRoot
name|structureTreeRoot
init|=
name|doc
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|getStructureTreeRoot
argument_list|()
decl_stmt|;
name|PDNumberTreeNode
name|parentTree
init|=
name|structureTreeRoot
operator|.
name|getParentTree
argument_list|()
decl_stmt|;
name|parentTree
operator|.
name|getValue
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|COSObjectable
argument_list|>
name|numberTreeAsMap
init|=
name|PDFMergerUtility
operator|.
name|getNumberTreeAsMap
argument_list|(
name|parentTree
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|31
argument_list|,
name|numberTreeAsMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|31
argument_list|,
name|Collections
operator|.
name|max
argument_list|(
name|numberTreeAsMap
operator|.
name|keySet
argument_list|()
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|31
argument_list|,
name|structureTreeRoot
operator|.
name|getParentTreeNextKey
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// PDFBOX-4417: check for multiple /StructTreeRoot entries that was due to
comment|// incorrect merging of /K entries
specifier|private
name|void
name|checkStructTreeRootCount
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|br
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|line
operator|.
name|equals
argument_list|(
literal|"/Type /StructTreeRoot"
argument_list|)
condition|)
block|{
operator|++
name|count
expr_stmt|;
block|}
block|}
name|br
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
comment|/**      * PDFBOX-4408: Check that StructParent values are found in the ParentTree      *      * @param document      */
name|void
name|checkWithNumberTree
parameter_list|(
name|PDDocument
name|document
parameter_list|)
block|{
name|PDDocumentCatalog
name|documentCatalog
init|=
name|document
operator|.
name|getDocumentCatalog
argument_list|()
decl_stmt|;
name|PDNumberTreeNode
name|parentTree
init|=
name|documentCatalog
operator|.
name|getStructureTreeRoot
argument_list|()
operator|.
name|getParentTree
argument_list|()
decl_stmt|;
name|COSDictionary
name|parentTreeDict
init|=
name|parentTree
operator|.
name|getCOSObject
argument_list|()
decl_stmt|;
name|COSArray
name|numArray
init|=
operator|(
name|COSArray
operator|)
name|parentTreeDict
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|NUMS
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|keySet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numArray
operator|.
name|size
argument_list|()
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|int
name|key
init|=
name|numArray
operator|.
name|getInt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|key
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|keySet
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
name|PDAcroForm
name|acroForm
init|=
name|documentCatalog
operator|.
name|getAcroForm
argument_list|()
decl_stmt|;
if|if
condition|(
name|acroForm
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|PDField
name|field
range|:
name|acroForm
operator|.
name|getFieldTree
argument_list|()
control|)
block|{
for|for
control|(
name|PDAnnotationWidget
name|widget
range|:
name|field
operator|.
name|getWidgets
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|keySet
operator|.
name|contains
argument_list|(
name|widget
operator|.
name|getStructParent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|PDPage
name|page
range|:
name|document
operator|.
name|getPages
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|keySet
operator|.
name|contains
argument_list|(
name|page
operator|.
name|getStructParents
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// might also test image and form dictionaries...
block|}
comment|/**      * PDFBOX-4383: Test that file can be deleted after merge.      *      * @throws IOException       */
specifier|public
name|void
name|testFileDeletion
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|outFile
init|=
operator|new
name|File
argument_list|(
name|TARGETTESTDIR
argument_list|,
literal|"PDFBOX-4383-result.pdf"
argument_list|)
decl_stmt|;
name|File
name|inFile1
init|=
operator|new
name|File
argument_list|(
name|TARGETTESTDIR
argument_list|,
literal|"PDFBOX-4383-src1.pdf"
argument_list|)
decl_stmt|;
name|File
name|inFile2
init|=
operator|new
name|File
argument_list|(
name|TARGETTESTDIR
argument_list|,
literal|"PDFBOX-4383-src2.pdf"
argument_list|)
decl_stmt|;
name|createSimpleFile
argument_list|(
name|inFile1
argument_list|)
expr_stmt|;
name|createSimpleFile
argument_list|(
name|inFile2
argument_list|)
expr_stmt|;
try|try
init|(
name|OutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
name|outFile
argument_list|)
init|)
block|{
name|PDFMergerUtility
name|merger
init|=
operator|new
name|PDFMergerUtility
argument_list|()
decl_stmt|;
name|merger
operator|.
name|setDestinationStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|merger
operator|.
name|addSource
argument_list|(
name|inFile1
argument_list|)
expr_stmt|;
name|merger
operator|.
name|addSource
argument_list|(
name|inFile2
argument_list|)
expr_stmt|;
name|merger
operator|.
name|mergeDocuments
argument_list|(
name|MemoryUsageSetting
operator|.
name|setupMainMemoryOnly
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Files
operator|.
name|delete
argument_list|(
name|inFile1
operator|.
name|toPath
argument_list|()
argument_list|)
expr_stmt|;
name|Files
operator|.
name|delete
argument_list|(
name|inFile2
operator|.
name|toPath
argument_list|()
argument_list|)
expr_stmt|;
name|Files
operator|.
name|delete
argument_list|(
name|outFile
operator|.
name|toPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkForPageOrphans
parameter_list|(
name|PDDocument
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
comment|// check for orphan pages in the StructTreeRoot/K, StructTreeRoot/ParentTree and
comment|// StructTreeRoot/IDTree trees.
name|PDPageTree
name|pageTree
init|=
name|doc
operator|.
name|getPages
argument_list|()
decl_stmt|;
name|PDStructureTreeRoot
name|structureTreeRoot
init|=
name|doc
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|getStructureTreeRoot
argument_list|()
decl_stmt|;
name|checkElement
argument_list|(
name|pageTree
argument_list|,
name|structureTreeRoot
operator|.
name|getParentTree
argument_list|()
operator|.
name|getCOSObject
argument_list|()
argument_list|)
expr_stmt|;
name|checkElement
argument_list|(
name|pageTree
argument_list|,
name|structureTreeRoot
operator|.
name|getK
argument_list|()
argument_list|)
expr_stmt|;
name|checkForIDTreeOrphans
argument_list|(
name|pageTree
argument_list|,
name|structureTreeRoot
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkForIDTreeOrphans
parameter_list|(
name|PDPageTree
name|pageTree
parameter_list|,
name|PDStructureTreeRoot
name|structureTreeRoot
parameter_list|)
throws|throws
name|IOException
block|{
name|PDNameTreeNode
argument_list|<
name|PDStructureElement
argument_list|>
name|idTree
init|=
name|structureTreeRoot
operator|.
name|getIDTree
argument_list|()
decl_stmt|;
if|if
condition|(
name|idTree
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|PDStructureElement
argument_list|>
name|map
init|=
name|PDFMergerUtility
operator|.
name|getIDTreeAsMap
argument_list|(
name|idTree
argument_list|)
decl_stmt|;
for|for
control|(
name|PDStructureElement
name|element
range|:
name|map
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|element
operator|.
name|getPage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|checkForPage
argument_list|(
name|pageTree
argument_list|,
name|element
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|element
operator|.
name|getKids
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|checkElement
argument_list|(
name|pageTree
argument_list|,
name|element
operator|.
name|getCOSObject
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|K
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|createSimpleFile
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|PDDocument
name|doc
init|=
operator|new
name|PDDocument
argument_list|()
init|)
block|{
name|doc
operator|.
name|addPage
argument_list|(
operator|new
name|PDPage
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|.
name|save
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|ElementCounter
block|{
name|int
name|cnt
init|=
literal|0
decl_stmt|;
name|Set
argument_list|<
name|COSBase
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|void
name|walk
parameter_list|(
name|COSBase
name|base
parameter_list|)
block|{
if|if
condition|(
name|base
operator|instanceof
name|COSArray
condition|)
block|{
for|for
control|(
name|COSBase
name|base2
range|:
operator|(
name|COSArray
operator|)
name|base
control|)
block|{
if|if
condition|(
name|base2
operator|instanceof
name|COSObject
condition|)
block|{
name|base2
operator|=
operator|(
operator|(
name|COSObject
operator|)
name|base2
operator|)
operator|.
name|getObject
argument_list|()
expr_stmt|;
block|}
name|walk
argument_list|(
name|base2
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|base
operator|instanceof
name|COSDictionary
condition|)
block|{
name|COSDictionary
name|kdict
init|=
operator|(
name|COSDictionary
operator|)
name|base
decl_stmt|;
if|if
condition|(
name|kdict
operator|.
name|containsKey
argument_list|(
name|COSName
operator|.
name|PG
argument_list|)
condition|)
block|{
operator|++
name|cnt
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|kdict
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|kdict
operator|.
name|containsKey
argument_list|(
name|COSName
operator|.
name|K
argument_list|)
condition|)
block|{
name|walk
argument_list|(
name|kdict
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|K
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// Each element can be an array, a dictionary or a number.
comment|// See PDF specification Table 37 - Entries in a number tree node dictionary
comment|// See PDF specification Table 322 - Entries in the structure tree root
comment|// See PDF specification Table 323 - Entries in a structure element dictionary
comment|// See PDF specification Table 325 – Entries in an object reference dictionary
comment|// example of file with /Kids: 000153.pdf 000208.pdf 000314.pdf 000359.pdf 000671.pdf
comment|// from digitalcorpora site
specifier|private
name|void
name|checkElement
parameter_list|(
name|PDPageTree
name|pageTree
parameter_list|,
name|COSBase
name|base
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|base
operator|instanceof
name|COSArray
condition|)
block|{
for|for
control|(
name|COSBase
name|base2
range|:
operator|(
name|COSArray
operator|)
name|base
control|)
block|{
if|if
condition|(
name|base2
operator|instanceof
name|COSObject
condition|)
block|{
name|base2
operator|=
operator|(
operator|(
name|COSObject
operator|)
name|base2
operator|)
operator|.
name|getObject
argument_list|()
expr_stmt|;
block|}
name|checkElement
argument_list|(
name|pageTree
argument_list|,
name|base2
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|base
operator|instanceof
name|COSDictionary
condition|)
block|{
name|COSDictionary
name|kdict
init|=
operator|(
name|COSDictionary
operator|)
name|base
decl_stmt|;
if|if
condition|(
name|kdict
operator|.
name|containsKey
argument_list|(
name|COSName
operator|.
name|PG
argument_list|)
condition|)
block|{
name|PDStructureElement
name|structureElement
init|=
operator|new
name|PDStructureElement
argument_list|(
name|kdict
argument_list|)
decl_stmt|;
name|checkForPage
argument_list|(
name|pageTree
argument_list|,
name|structureElement
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|kdict
operator|.
name|containsKey
argument_list|(
name|COSName
operator|.
name|K
argument_list|)
condition|)
block|{
name|checkElement
argument_list|(
name|pageTree
argument_list|,
name|kdict
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|K
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// if we're in a number tree, check /Nums and /Kids
if|if
condition|(
name|kdict
operator|.
name|containsKey
argument_list|(
name|COSName
operator|.
name|KIDS
argument_list|)
condition|)
block|{
name|checkElement
argument_list|(
name|pageTree
argument_list|,
name|kdict
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|KIDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|kdict
operator|.
name|containsKey
argument_list|(
name|COSName
operator|.
name|NUMS
argument_list|)
condition|)
block|{
name|checkElement
argument_list|(
name|pageTree
argument_list|,
name|kdict
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|NUMS
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// if we're an object reference dictionary (/OBJR), check the obj
if|if
condition|(
name|kdict
operator|.
name|containsKey
argument_list|(
name|COSName
operator|.
name|OBJ
argument_list|)
condition|)
block|{
name|COSDictionary
name|obj
init|=
operator|(
name|COSDictionary
operator|)
name|kdict
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|OBJ
argument_list|)
decl_stmt|;
name|COSBase
name|type
init|=
name|obj
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|COSName
operator|.
name|ANNOT
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|PDAnnotation
name|annotation
init|=
name|PDAnnotation
operator|.
name|createAnnotation
argument_list|(
name|obj
argument_list|)
decl_stmt|;
name|PDPage
name|page
init|=
name|annotation
operator|.
name|getPage
argument_list|()
decl_stmt|;
if|if
condition|(
name|page
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|pageTree
operator|.
name|indexOf
argument_list|(
name|page
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|COSBase
name|item
init|=
name|kdict
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|OBJ
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|instanceof
name|COSObject
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Annotation page is not in the page tree: "
operator|+
name|item
argument_list|,
name|pageTree
operator|.
name|indexOf
argument_list|(
name|page
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// don't display because of stack overflow
name|assertTrue
argument_list|(
literal|"Annotation page is not in the page tree"
argument_list|,
name|pageTree
operator|.
name|indexOf
argument_list|(
name|page
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
comment|//TODO needs to be investigated. Specification mentions
comment|// "such as an XObject or an annotation"
name|fail
argument_list|(
literal|"Other type: "
operator|+
name|type
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// checks that the result file of a merge has the same rendering as the two source files
specifier|private
name|void
name|checkMergeIdentical
parameter_list|(
name|String
name|filename1
parameter_list|,
name|String
name|filename2
parameter_list|,
name|String
name|mergeFilename
parameter_list|,
name|MemoryUsageSetting
name|memUsageSetting
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|src1PageCount
decl_stmt|;
name|BufferedImage
index|[]
name|src1ImageTab
decl_stmt|;
try|try
init|(
name|PDDocument
name|srcDoc1
init|=
name|PDDocument
operator|.
name|load
argument_list|(
operator|new
name|File
argument_list|(
name|SRCDIR
argument_list|,
name|filename1
argument_list|)
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
init|)
block|{
name|src1PageCount
operator|=
name|srcDoc1
operator|.
name|getNumberOfPages
argument_list|()
expr_stmt|;
name|PDFRenderer
name|src1PdfRenderer
init|=
operator|new
name|PDFRenderer
argument_list|(
name|srcDoc1
argument_list|)
decl_stmt|;
name|src1ImageTab
operator|=
operator|new
name|BufferedImage
index|[
name|src1PageCount
index|]
expr_stmt|;
for|for
control|(
name|int
name|page
init|=
literal|0
init|;
name|page
operator|<
name|src1PageCount
condition|;
operator|++
name|page
control|)
block|{
name|src1ImageTab
index|[
name|page
index|]
operator|=
name|src1PdfRenderer
operator|.
name|renderImageWithDPI
argument_list|(
name|page
argument_list|,
name|DPI
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|src2PageCount
decl_stmt|;
name|BufferedImage
index|[]
name|src2ImageTab
decl_stmt|;
try|try
init|(
name|PDDocument
name|srcDoc2
init|=
name|PDDocument
operator|.
name|load
argument_list|(
operator|new
name|File
argument_list|(
name|SRCDIR
argument_list|,
name|filename2
argument_list|)
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
init|)
block|{
name|src2PageCount
operator|=
name|srcDoc2
operator|.
name|getNumberOfPages
argument_list|()
expr_stmt|;
name|PDFRenderer
name|src2PdfRenderer
init|=
operator|new
name|PDFRenderer
argument_list|(
name|srcDoc2
argument_list|)
decl_stmt|;
name|src2ImageTab
operator|=
operator|new
name|BufferedImage
index|[
name|src2PageCount
index|]
expr_stmt|;
for|for
control|(
name|int
name|page
init|=
literal|0
init|;
name|page
operator|<
name|src2PageCount
condition|;
operator|++
name|page
control|)
block|{
name|src2ImageTab
index|[
name|page
index|]
operator|=
name|src2PdfRenderer
operator|.
name|renderImageWithDPI
argument_list|(
name|page
argument_list|,
name|DPI
argument_list|)
expr_stmt|;
block|}
block|}
name|PDFMergerUtility
name|pdfMergerUtility
init|=
operator|new
name|PDFMergerUtility
argument_list|()
decl_stmt|;
name|pdfMergerUtility
operator|.
name|addSource
argument_list|(
operator|new
name|File
argument_list|(
name|SRCDIR
argument_list|,
name|filename1
argument_list|)
argument_list|)
expr_stmt|;
name|pdfMergerUtility
operator|.
name|addSource
argument_list|(
operator|new
name|File
argument_list|(
name|SRCDIR
argument_list|,
name|filename2
argument_list|)
argument_list|)
expr_stmt|;
name|pdfMergerUtility
operator|.
name|setDestinationFileName
argument_list|(
name|TARGETTESTDIR
operator|+
name|mergeFilename
argument_list|)
expr_stmt|;
name|pdfMergerUtility
operator|.
name|mergeDocuments
argument_list|(
name|memUsageSetting
argument_list|)
expr_stmt|;
try|try
init|(
name|PDDocument
name|mergedDoc
init|=
name|PDDocument
operator|.
name|load
argument_list|(
operator|new
name|File
argument_list|(
name|TARGETTESTDIR
argument_list|,
name|mergeFilename
argument_list|)
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
init|)
block|{
name|PDFRenderer
name|mergePdfRenderer
init|=
operator|new
name|PDFRenderer
argument_list|(
name|mergedDoc
argument_list|)
decl_stmt|;
name|int
name|mergePageCount
init|=
name|mergedDoc
operator|.
name|getNumberOfPages
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|src1PageCount
operator|+
name|src2PageCount
argument_list|,
name|mergePageCount
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|page
init|=
literal|0
init|;
name|page
operator|<
name|src1PageCount
condition|;
operator|++
name|page
control|)
block|{
name|BufferedImage
name|bim
init|=
name|mergePdfRenderer
operator|.
name|renderImageWithDPI
argument_list|(
name|page
argument_list|,
name|DPI
argument_list|)
decl_stmt|;
name|checkImagesIdentical
argument_list|(
name|bim
argument_list|,
name|src1ImageTab
index|[
name|page
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|page
init|=
literal|0
init|;
name|page
operator|<
name|src2PageCount
condition|;
operator|++
name|page
control|)
block|{
name|int
name|mergePage
init|=
name|page
operator|+
name|src1PageCount
decl_stmt|;
name|BufferedImage
name|bim
init|=
name|mergePdfRenderer
operator|.
name|renderImageWithDPI
argument_list|(
name|mergePage
argument_list|,
name|DPI
argument_list|)
decl_stmt|;
name|checkImagesIdentical
argument_list|(
name|bim
argument_list|,
name|src2ImageTab
index|[
name|page
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|checkImagesIdentical
parameter_list|(
name|BufferedImage
name|bim1
parameter_list|,
name|BufferedImage
name|bim2
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|bim1
operator|.
name|getHeight
argument_list|()
argument_list|,
name|bim2
operator|.
name|getHeight
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bim1
operator|.
name|getWidth
argument_list|()
argument_list|,
name|bim2
operator|.
name|getWidth
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|w
init|=
name|bim1
operator|.
name|getWidth
argument_list|()
decl_stmt|;
name|int
name|h
init|=
name|bim1
operator|.
name|getHeight
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|w
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|h
condition|;
operator|++
name|j
control|)
block|{
name|assertEquals
argument_list|(
name|bim1
operator|.
name|getRGB
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
argument_list|,
name|bim2
operator|.
name|getRGB
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|checkForPage
parameter_list|(
name|PDPageTree
name|pageTree
parameter_list|,
name|PDStructureElement
name|structureElement
parameter_list|)
block|{
name|PDPage
name|page
init|=
name|structureElement
operator|.
name|getPage
argument_list|()
decl_stmt|;
if|if
condition|(
name|page
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Page is not in the page tree"
argument_list|,
name|pageTree
operator|.
name|indexOf
argument_list|(
name|page
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

