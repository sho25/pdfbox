begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|encryption
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|Cipher
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|TestCase
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|encryption
operator|.
name|AccessPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|encryption
operator|.
name|DecryptionMaterial
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|encryption
operator|.
name|StandardDecryptionMaterial
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|encryption
operator|.
name|StandardProtectionPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|PDFTextStripper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_comment
comment|/**  * Tests for public key encryption.  *  * @author Ralf Hauser  */
end_comment

begin_class
specifier|public
class|class
name|TestSymmetricKeyEncryption
extends|extends
name|TestCase
block|{
specifier|private
specifier|final
name|File
name|testResultsDir
init|=
operator|new
name|File
argument_list|(
literal|"target/test-output/crypto"
argument_list|)
decl_stmt|;
specifier|private
name|AccessPermission
name|permission1
decl_stmt|;
specifier|private
name|AccessPermission
name|permission2
decl_stmt|;
specifier|private
name|int
name|sizePriorToEncryption
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|int
name|sizePriorToEncryptionInnerSubfile
init|=
operator|-
literal|1
decl_stmt|;
specifier|static
specifier|final
name|String
name|PASSWORD
init|=
literal|"1234567890abcdefghijk1234567890abcdefghijk"
decl_stmt|;
specifier|static
name|byte
index|[]
name|inputFileAsByteArray
init|=
literal|null
decl_stmt|;
specifier|static
name|byte
index|[]
name|inputInner
init|=
literal|null
decl_stmt|;
specifier|static
name|String
name|textContent
init|=
literal|null
decl_stmt|;
specifier|static
name|int
name|page0size
init|=
operator|-
literal|1
decl_stmt|;
comment|/**      * Simple test document that gets encrypted by the test cases.      */
specifier|private
name|PDDocument
name|document
decl_stmt|;
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|testResultsDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
if|if
condition|(
name|Cipher
operator|.
name|getMaxAllowedKeyLength
argument_list|(
literal|"AES"
argument_list|)
operator|!=
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
comment|// we need strong encryption for these tests
name|fail
argument_list|(
literal|"JCE unlimited strength jurisdiction policy files are not installed"
argument_list|)
expr_stmt|;
block|}
name|permission1
operator|=
operator|new
name|AccessPermission
argument_list|()
expr_stmt|;
name|permission1
operator|.
name|setCanAssembleDocument
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|permission1
operator|.
name|setCanExtractContent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|permission1
operator|.
name|setCanExtractForAccessibility
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|permission1
operator|.
name|setCanFillInForm
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|permission1
operator|.
name|setCanModify
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|permission1
operator|.
name|setCanModifyAnnotations
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|permission1
operator|.
name|setCanPrint
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|permission1
operator|.
name|setCanPrintDegraded
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|permission1
operator|.
name|setReadOnly
argument_list|()
expr_stmt|;
name|permission2
operator|=
operator|new
name|AccessPermission
argument_list|()
expr_stmt|;
name|permission2
operator|.
name|setCanAssembleDocument
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|permission2
operator|.
name|setCanExtractContent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|permission2
operator|.
name|setCanExtractForAccessibility
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|permission2
operator|.
name|setCanFillInForm
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|permission2
operator|.
name|setCanModify
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|permission2
operator|.
name|setCanModifyAnnotations
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|permission2
operator|.
name|setCanPrint
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// it is true now !
name|permission2
operator|.
name|setCanPrintDegraded
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|String
name|testFileName
init|=
literal|"test.pdf"
decl_stmt|;
name|inputFileAsByteArray
operator|=
name|getFileAsByteArray
argument_list|(
name|testFileName
argument_list|)
expr_stmt|;
try|try
block|{
name|sizePriorToEncryption
operator|=
name|inputFileAsByteArray
operator|.
name|length
expr_stmt|;
name|document
operator|=
name|PDDocument
operator|.
name|load
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|inputFileAsByteArray
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|extractText
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|extractText
condition|)
block|{
name|PDFTextStripper
name|stripper
init|=
operator|new
name|PDFTextStripper
argument_list|()
decl_stmt|;
name|stripper
operator|.
name|setForceParsing
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// stripper.setSortByPosition( sort );
comment|// stripper.setShouldSeparateByBeads( separateBeads );
name|stripper
operator|.
name|setStartPage
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|stripper
operator|.
name|setEndPage
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|Writer
name|output
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|stripper
operator|.
name|writeText
argument_list|(
name|document
argument_list|,
name|output
argument_list|)
expr_stmt|;
name|textContent
operator|=
operator|new
name|String
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
comment|// content "" ;(
block|}
name|COSStream
name|contentStream
init|=
name|document
operator|.
name|getPage
argument_list|(
literal|0
argument_list|)
operator|.
name|getContentStream
argument_list|()
decl_stmt|;
name|page0size
operator|=
operator|(
name|int
operator|)
name|contentStream
operator|.
name|getFilteredLength
argument_list|()
expr_stmt|;
comment|// was 2
comment|// contentStream.size();
block|}
catch|catch
parameter_list|(
name|Exception
name|t
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|testFileName
operator|+
literal|" "
operator|+
name|t
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|t
throw|;
block|}
block|}
specifier|public
name|byte
index|[]
name|getFileAsByteArray
parameter_list|(
name|String
name|testFileName
parameter_list|)
throws|throws
name|Exception
throws|,
name|IOException
block|{
name|InputStream
name|is
init|=
name|TestSymmetricKeyEncryption
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|testFileName
argument_list|)
decl_stmt|;
try|try
block|{
try|try
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|c
init|=
name|is
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|==
operator|-
literal|1
condition|)
block|{
break|break;
block|}
name|baos
operator|.
name|write
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|baos
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|baos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
finally|finally
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|t
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|testFileName
operator|+
literal|" "
operator|+
name|t
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|t
throw|;
block|}
finally|finally
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|document
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * Protect a document with a public certificate and try to open it with the      * corresponding private certificate.      *      * @throws Exception If there is an unexpected error during the test.      */
specifier|public
name|void
name|testProtection
parameter_list|()
throws|throws
name|Exception
block|{
name|testSymmEncrForKeySize
argument_list|(
literal|40
argument_list|,
name|sizePriorToEncryption
argument_list|,
name|document
argument_list|,
name|PASSWORD
argument_list|,
name|permission1
argument_list|)
expr_stmt|;
name|document
operator|=
name|PDDocument
operator|.
name|load
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|inputFileAsByteArray
argument_list|)
argument_list|)
expr_stmt|;
name|testSymmEncrForKeySize
argument_list|(
literal|128
argument_list|,
name|sizePriorToEncryption
argument_list|,
name|document
argument_list|,
name|PASSWORD
argument_list|,
name|permission1
argument_list|)
expr_stmt|;
comment|//TODO
comment|// 1) check permissions
comment|// 2) 256 key length
comment|//document = PDDocument.load(new ByteArrayInputStream(inputFileAsByteArray));
comment|//testSymmEncrForKeySize(256, sizePriorToEncryption, document, PASSWORD);
block|}
specifier|public
name|void
name|testSymmEncrForKeySize
parameter_list|(
name|int
name|keyLength
parameter_list|,
name|int
name|sizePriorToEncr
parameter_list|,
name|PDDocument
name|doc
parameter_list|,
name|String
name|password
parameter_list|,
name|AccessPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
name|PDDocument
name|encryptedDoc
init|=
name|encrypt
argument_list|(
name|keyLength
argument_list|,
name|sizePriorToEncr
argument_list|,
name|doc
argument_list|,
literal|""
argument_list|,
name|permission
argument_list|)
decl_stmt|;
try|try
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|encryptedDoc
operator|.
name|isEncrypted
argument_list|()
argument_list|)
expr_stmt|;
name|DecryptionMaterial
name|decryptionMaterial
init|=
operator|new
name|StandardDecryptionMaterial
argument_list|(
name|PASSWORD
argument_list|)
decl_stmt|;
name|encryptedDoc
operator|.
name|openProtection
argument_list|(
name|decryptionMaterial
argument_list|)
expr_stmt|;
name|AccessPermission
name|newPermission
init|=
name|encryptedDoc
operator|.
name|getCurrentAccessPermission
argument_list|()
decl_stmt|;
name|File
name|pdfFile
init|=
operator|new
name|File
argument_list|(
name|testResultsDir
argument_list|,
name|keyLength
operator|+
literal|"-bit-decrypted.pdf"
argument_list|)
decl_stmt|;
name|encryptedDoc
operator|.
name|save
argument_list|(
name|pdfFile
argument_list|)
expr_stmt|;
name|long
name|sizeAfterDecr
init|=
name|pdfFile
operator|.
name|length
argument_list|()
decl_stmt|;
block|{
comment|// for some reason, they are not identical :( 12263 vs 12418
comment|// Assert.assertTrue(
comment|// keyLength
comment|// + "bit decrypted pdf should have same size as plain one",
comment|// sizeAfterDecr == sizePriorToEncr);
block|}
comment|// difference already at position 8
comment|// for (int i = 0; i< 500 // byteArray.length
comment|// ; i++) {
comment|// byte b = byteArrayDecr[i];
comment|// byte c = input[i];
comment|// Assert.assertTrue(keyLength
comment|// + "bit decrypted: character different in pos " +
comment|// i+" of "+sizeAfterDecr,
comment|// b == c);
comment|// }
name|COSStream
name|contentStreamDecr
init|=
name|encryptedDoc
operator|.
name|getPage
argument_list|(
literal|0
argument_list|)
operator|.
name|getContentStream
argument_list|()
decl_stmt|;
name|int
name|decrSizePage0
init|=
operator|(
name|int
operator|)
name|contentStreamDecr
operator|.
name|getFilteredLength
argument_list|()
decl_stmt|;
comment|// was
comment|// 2
comment|// contentStream.size();
name|Assert
operator|.
name|assertTrue
argument_list|(
name|keyLength
operator|+
literal|"bit decrypted pdf page 0 should have same size as plain one"
argument_list|,
name|page0size
operator|==
name|decrSizePage0
argument_list|)
expr_stmt|;
name|boolean
name|canAssembleDocument
init|=
name|newPermission
operator|.
name|canAssembleDocument
argument_list|()
decl_stmt|;
name|boolean
name|canExtractContent
init|=
name|newPermission
operator|.
name|canExtractContent
argument_list|()
decl_stmt|;
name|boolean
name|canExtractForAccessibility
init|=
name|newPermission
operator|.
name|canExtractForAccessibility
argument_list|()
decl_stmt|;
name|boolean
name|canFillInForm
init|=
name|newPermission
operator|.
name|canFillInForm
argument_list|()
decl_stmt|;
name|boolean
name|canModify
init|=
name|newPermission
operator|.
name|canModify
argument_list|()
decl_stmt|;
name|boolean
name|canModifyAnnotations
init|=
name|newPermission
operator|.
name|canModifyAnnotations
argument_list|()
decl_stmt|;
name|boolean
name|canPrint
init|=
name|newPermission
operator|.
name|canPrint
argument_list|()
decl_stmt|;
name|boolean
name|canPrintDegraded
init|=
name|newPermission
operator|.
name|canPrintDegraded
argument_list|()
decl_stmt|;
name|encryptedDoc
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//            Assert.assertFalse(canAssembleDocument);
comment|//            Assert.assertFalse(canExtractContent);
comment|//            Assert.assertTrue(canExtractForAccessibility);
comment|//            Assert.assertFalse(canFillInForm);
comment|//            Assert.assertFalse(canModify);
comment|//            Assert.assertFalse(canModifyAnnotations);
comment|//            Assert.assertFalse(canPrint);
comment|//            Assert.assertFalse(canPrintDegraded);
block|}
finally|finally
block|{
name|encryptedDoc
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|PDDocument
name|encrypt
parameter_list|(
name|int
name|keyLength
parameter_list|,
name|int
name|sizePriorToEncr
parameter_list|,
name|PDDocument
name|doc
parameter_list|,
name|String
name|spec
parameter_list|,
name|AccessPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
name|AccessPermission
name|ap
init|=
operator|new
name|AccessPermission
argument_list|()
decl_stmt|;
name|StandardProtectionPolicy
name|spp
init|=
operator|new
name|StandardProtectionPolicy
argument_list|(
name|PASSWORD
argument_list|,
name|PASSWORD
argument_list|,
name|ap
argument_list|)
decl_stmt|;
name|spp
operator|.
name|setEncryptionKeyLength
argument_list|(
name|keyLength
argument_list|)
expr_stmt|;
name|spp
operator|.
name|setPermissions
argument_list|(
name|permission
argument_list|)
expr_stmt|;
name|doc
operator|.
name|protect
argument_list|(
name|spp
argument_list|)
expr_stmt|;
name|File
name|pdfFile
init|=
operator|new
name|File
argument_list|(
name|testResultsDir
argument_list|,
name|keyLength
operator|+
literal|"-bit-encrypted.pdf"
argument_list|)
decl_stmt|;
name|doc
operator|.
name|save
argument_list|(
name|pdfFile
argument_list|)
expr_stmt|;
name|doc
operator|.
name|close
argument_list|()
expr_stmt|;
name|long
name|sizeEncrypted
init|=
name|pdfFile
operator|.
name|length
argument_list|()
decl_stmt|;
name|PDDocument
name|encryptedDoc
init|=
name|PDDocument
operator|.
name|load
argument_list|(
name|pdfFile
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|keyLength
operator|+
literal|"-bit encrypted pdf should not have same size as plain one"
argument_list|,
name|sizeEncrypted
operator|!=
name|sizePriorToEncr
argument_list|)
expr_stmt|;
comment|//        COSStream contentStream = encrypted.getPage(0).getContentStream();
comment|//        int encrPage0size = (int) contentStream.getFilteredLength();// was 2
comment|//                                                                    // contentStream.size();
return|return
name|encryptedDoc
return|;
block|}
block|}
end_class

end_unit

