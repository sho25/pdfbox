begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|rendering
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|ParallelParameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|ImageIO
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|AlphaComposite
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Graphics2D
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|color
operator|.
name|ColorSpace
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|BufferedImage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|ColorConvertOp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * todo: JavaDoc  *  * @author John Hewson  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|ParallelParameterized
operator|.
name|class
argument_list|)
comment|// todo: disable this test by default? (for now?)
comment|//@Ignore
specifier|public
class|class
name|TestRegressions
block|{
specifier|private
specifier|static
specifier|final
name|String
name|PDF_DIR
init|=
literal|"../../regression/pdf"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PNG_DIR
init|=
literal|"../../regression/png"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OUT_DIR
init|=
literal|"../../regression/out"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DIFF_DIR
init|=
literal|"../../regression/diff"
decl_stmt|;
annotation|@
name|Parameters
argument_list|(
name|name
operator|=
literal|"{0}"
argument_list|)
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
comment|// todo: sanity check for compatible JDK?
comment|// populate the input parameters
name|File
index|[]
name|files
init|=
operator|new
name|File
argument_list|(
name|PDF_DIR
argument_list|)
operator|.
name|listFiles
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
name|file
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".pdf"
argument_list|)
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|file
operator|.
name|getName
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|params
return|;
block|}
specifier|private
specifier|final
name|String
name|filename
decl_stmt|;
specifier|private
name|File
name|inDir
decl_stmt|,
name|outDir
decl_stmt|,
name|diffDir
decl_stmt|;
specifier|public
name|TestRegressions
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
name|this
operator|.
name|filename
operator|=
name|fileName
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|init
parameter_list|()
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|PDF_DIR
argument_list|,
name|filename
argument_list|)
decl_stmt|;
comment|// create output dir
name|String
name|dirName
init|=
name|file
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|file
operator|.
name|getName
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
decl_stmt|;
name|outDir
operator|=
operator|new
name|File
argument_list|(
name|OUT_DIR
argument_list|,
name|dirName
argument_list|)
expr_stmt|;
name|outDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
comment|// input png dirs
name|inDir
operator|=
operator|new
name|File
argument_list|(
name|PNG_DIR
argument_list|,
name|dirName
argument_list|)
expr_stmt|;
comment|// diff dir (if any)
name|diffDir
operator|=
operator|new
name|File
argument_list|(
name|DIFF_DIR
argument_list|,
name|dirName
argument_list|)
expr_stmt|;
if|if
condition|(
name|diffDir
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// clean the diff dir
for|for
control|(
name|File
name|png
range|:
name|diffDir
operator|.
name|listFiles
argument_list|()
control|)
block|{
name|png
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
name|diffDir
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
comment|// clean the output dir
for|for
control|(
name|File
name|png
range|:
name|outDir
operator|.
name|listFiles
argument_list|()
control|)
block|{
name|png
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|render
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|PDF_DIR
argument_list|,
name|filename
argument_list|)
decl_stmt|;
name|PDDocument
name|document
init|=
name|PDDocument
operator|.
name|load
argument_list|(
name|file
argument_list|)
decl_stmt|;
try|try
block|{
name|boolean
name|noPNG
init|=
literal|false
decl_stmt|;
name|boolean
name|isDifferent
init|=
literal|false
decl_stmt|;
name|PDFRenderer
name|renderer
init|=
operator|new
name|PDFRenderer
argument_list|(
name|document
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|size
init|=
name|document
operator|.
name|getNumberOfPages
argument_list|()
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|BufferedImage
name|imageTest
init|=
name|renderer
operator|.
name|renderImageWithDPI
argument_list|(
name|i
argument_list|,
literal|72
argument_list|)
decl_stmt|;
comment|// write to output file
name|File
name|outFile
init|=
operator|new
name|File
argument_list|(
name|outDir
argument_list|,
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|".png"
argument_list|)
decl_stmt|;
name|ImageIO
operator|.
name|write
argument_list|(
name|imageTest
argument_list|,
literal|"PNG"
argument_list|,
name|outFile
argument_list|)
expr_stmt|;
comment|// load expected png
name|File
name|inFile
init|=
operator|new
name|File
argument_list|(
name|inDir
argument_list|,
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|".png"
argument_list|)
decl_stmt|;
if|if
condition|(
name|inFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|BufferedImage
name|imageGood
init|=
name|ImageIO
operator|.
name|read
argument_list|(
name|inFile
argument_list|)
decl_stmt|;
comment|// compare
name|compare
label|:
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|imageGood
operator|.
name|getHeight
argument_list|()
condition|;
name|y
operator|++
control|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|imageGood
operator|.
name|getWidth
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
if|if
condition|(
name|imageGood
operator|.
name|getRGB
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|!=
name|imageTest
operator|.
name|getRGB
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
condition|)
block|{
comment|// save diff to file
name|BufferedImage
name|imageDiff
init|=
name|diff
argument_list|(
name|imageGood
argument_list|,
name|imageTest
argument_list|)
decl_stmt|;
name|diffDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|File
name|diffFile
init|=
operator|new
name|File
argument_list|(
name|diffDir
argument_list|,
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|".png"
argument_list|)
decl_stmt|;
name|ImageIO
operator|.
name|write
argument_list|(
name|imageDiff
argument_list|,
literal|"PNG"
argument_list|,
name|diffFile
argument_list|)
expr_stmt|;
comment|// keep rendering all pages
name|isDifferent
operator|=
literal|true
expr_stmt|;
break|break
name|compare
break|;
block|}
block|}
block|}
block|}
else|else
block|{
comment|// no expected png, probably the first time this file has been used, so we
comment|// continue to render all pages, but we'll fail the test at the end
name|noPNG
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|noPNG
condition|)
block|{
comment|// if this is the first time that this PDF file has been rendered then the test
comment|// will fail, but the "out" directory will contain the result. If it is good then
comment|// it can be manually added to the "png" directory and committed to SVN
name|Assert
operator|.
name|fail
argument_list|(
literal|"No PNG found for '"
operator|+
name|file
operator|.
name|getName
argument_list|()
operator|+
literal|"', perhaps this is a new file?"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isDifferent
condition|)
block|{
comment|// fail after all pages have been rendered
name|Assert
operator|.
name|fail
argument_list|(
literal|"Rendering differs in '"
operator|+
name|file
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|document
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|BufferedImage
name|diff
parameter_list|(
name|BufferedImage
name|imageGood
parameter_list|,
name|BufferedImage
name|imageTest
parameter_list|)
block|{
name|BufferedImage
name|diff
init|=
operator|new
name|BufferedImage
argument_list|(
name|imageGood
operator|.
name|getWidth
argument_list|()
argument_list|,
name|imageGood
operator|.
name|getHeight
argument_list|()
argument_list|,
name|BufferedImage
operator|.
name|TYPE_INT_RGB
argument_list|)
decl_stmt|;
comment|// convert good image to grayscale
name|ColorSpace
name|cs
init|=
name|ColorSpace
operator|.
name|getInstance
argument_list|(
name|ColorSpace
operator|.
name|CS_GRAY
argument_list|)
decl_stmt|;
name|ColorConvertOp
name|op
init|=
operator|new
name|ColorConvertOp
argument_list|(
name|cs
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|BufferedImage
name|imageGray
init|=
name|op
operator|.
name|filter
argument_list|(
name|imageGood
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// draw good image as grayscale background
name|Graphics2D
name|graphics
init|=
name|diff
operator|.
name|createGraphics
argument_list|()
decl_stmt|;
name|graphics
operator|.
name|setBackground
argument_list|(
name|Color
operator|.
name|WHITE
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|clearRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|imageGood
operator|.
name|getWidth
argument_list|()
argument_list|,
name|imageGood
operator|.
name|getHeight
argument_list|()
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|setComposite
argument_list|(
name|AlphaComposite
operator|.
name|getInstance
argument_list|(
name|AlphaComposite
operator|.
name|SRC_OVER
argument_list|,
literal|0.25f
argument_list|)
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|drawImage
argument_list|(
name|imageGray
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|dispose
argument_list|()
expr_stmt|;
comment|// draw differing pixels in red
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|imageGood
operator|.
name|getHeight
argument_list|()
condition|;
name|y
operator|++
control|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|imageGood
operator|.
name|getWidth
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
if|if
condition|(
name|imageGood
operator|.
name|getRGB
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|!=
name|imageTest
operator|.
name|getRGB
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
condition|)
block|{
name|int
name|rgb
init|=
operator|new
name|Color
argument_list|(
literal|255
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|getRGB
argument_list|()
decl_stmt|;
name|diff
operator|.
name|setRGB
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|rgb
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|diff
return|;
block|}
block|}
end_class

end_unit

