begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_comment
comment|/**  * Test the {@link Matrix} class.  * @author Neil McErlean  * @since 1.4.0  */
end_comment

begin_class
specifier|public
class|class
name|TestMatrix
extends|extends
name|TestCase
block|{
comment|/**      * Test class constructor.      *      * @param name The name of the test class.      *      * @throws IOException If there is an error creating the test.      */
specifier|public
name|TestMatrix
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testConstructionAndCopy
parameter_list|()
throws|throws
name|Exception
block|{
name|Matrix
name|m1
init|=
operator|new
name|Matrix
argument_list|()
decl_stmt|;
name|assertMatrixIsPristine
argument_list|(
name|m1
argument_list|)
expr_stmt|;
name|Matrix
name|m2
init|=
name|m1
operator|.
name|clone
argument_list|()
decl_stmt|;
name|assertNotSame
argument_list|(
name|m1
argument_list|,
name|m2
argument_list|)
expr_stmt|;
name|assertMatrixIsPristine
argument_list|(
name|m2
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMultiplication
parameter_list|()
throws|throws
name|Exception
block|{
comment|// This matrix will not change - we use it to drive the various multiplications.
specifier|final
name|Matrix
name|testMatrix
init|=
operator|new
name|Matrix
argument_list|()
decl_stmt|;
comment|// Create matrix with values
comment|// [ 0, 1, 2
comment|//   1, 2, 3
comment|//   2, 3, 4]
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
literal|3
condition|;
name|x
operator|++
control|)
block|{
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
literal|3
condition|;
name|y
operator|++
control|)
block|{
name|testMatrix
operator|.
name|setValue
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|x
operator|+
name|y
argument_list|)
expr_stmt|;
block|}
block|}
name|Matrix
name|m1
init|=
name|testMatrix
operator|.
name|clone
argument_list|()
decl_stmt|;
name|Matrix
name|m2
init|=
name|testMatrix
operator|.
name|clone
argument_list|()
decl_stmt|;
comment|// Multiply two matrices together producing a new result matrix.
name|Matrix
name|product
init|=
name|m1
operator|.
name|multiply
argument_list|(
name|m2
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|m1
argument_list|,
name|product
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|m2
argument_list|,
name|product
argument_list|)
expr_stmt|;
comment|// Operand 1 should not have changed
name|assertMatrixValuesEqualTo
argument_list|(
operator|new
name|float
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|}
argument_list|,
name|m1
argument_list|)
expr_stmt|;
comment|// Operand 2 should not have changed
name|assertMatrixValuesEqualTo
argument_list|(
operator|new
name|float
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|}
argument_list|,
name|m2
argument_list|)
expr_stmt|;
name|assertMatrixValuesEqualTo
argument_list|(
operator|new
name|float
index|[]
block|{
literal|5
block|,
literal|8
block|,
literal|11
block|,
literal|8
block|,
literal|14
block|,
literal|20
block|,
literal|11
block|,
literal|20
block|,
literal|29
block|}
argument_list|,
name|product
argument_list|)
expr_stmt|;
name|product
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertMatrixIsPristine
argument_list|(
name|product
argument_list|)
expr_stmt|;
comment|// Multiply two matrices together with the result being written to a third matrix
comment|// (Any existing values there will be overwritten).
name|Matrix
name|resultMatrix
init|=
operator|new
name|Matrix
argument_list|()
decl_stmt|;
name|Matrix
name|retVal
init|=
name|m1
operator|.
name|multiply
argument_list|(
name|m2
argument_list|,
name|resultMatrix
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|retVal
argument_list|,
name|resultMatrix
argument_list|)
expr_stmt|;
comment|// Operand 1 should not have changed
name|assertMatrixValuesEqualTo
argument_list|(
operator|new
name|float
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|}
argument_list|,
name|m1
argument_list|)
expr_stmt|;
comment|// Operand 2 should not have changed
name|assertMatrixValuesEqualTo
argument_list|(
operator|new
name|float
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|}
argument_list|,
name|m2
argument_list|)
expr_stmt|;
name|assertMatrixValuesEqualTo
argument_list|(
operator|new
name|float
index|[]
block|{
literal|5
block|,
literal|8
block|,
literal|11
block|,
literal|8
block|,
literal|14
block|,
literal|20
block|,
literal|11
block|,
literal|20
block|,
literal|29
block|}
argument_list|,
name|resultMatrix
argument_list|)
expr_stmt|;
comment|// Multiply two matrices together with the result being written into the other matrix
name|retVal
operator|=
name|m1
operator|.
name|multiply
argument_list|(
name|m2
argument_list|,
name|m2
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|retVal
argument_list|,
name|m2
argument_list|)
expr_stmt|;
comment|// Operand 1 should not have changed
name|assertMatrixValuesEqualTo
argument_list|(
operator|new
name|float
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|}
argument_list|,
name|m1
argument_list|)
expr_stmt|;
name|assertMatrixValuesEqualTo
argument_list|(
operator|new
name|float
index|[]
block|{
literal|5
block|,
literal|8
block|,
literal|11
block|,
literal|8
block|,
literal|14
block|,
literal|20
block|,
literal|11
block|,
literal|20
block|,
literal|29
block|}
argument_list|,
name|retVal
argument_list|)
expr_stmt|;
comment|// Multiply two matrices together with the result being written into 'this' matrix
name|m1
operator|=
name|testMatrix
operator|.
name|clone
argument_list|()
expr_stmt|;
name|m2
operator|=
name|testMatrix
operator|.
name|clone
argument_list|()
expr_stmt|;
name|retVal
operator|=
name|m1
operator|.
name|multiply
argument_list|(
name|m2
argument_list|,
name|m1
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|retVal
argument_list|,
name|m1
argument_list|)
expr_stmt|;
comment|// Operand 2 should not have changed
name|assertMatrixValuesEqualTo
argument_list|(
operator|new
name|float
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|}
argument_list|,
name|m2
argument_list|)
expr_stmt|;
name|assertMatrixValuesEqualTo
argument_list|(
operator|new
name|float
index|[]
block|{
literal|5
block|,
literal|8
block|,
literal|11
block|,
literal|8
block|,
literal|14
block|,
literal|20
block|,
literal|11
block|,
literal|20
block|,
literal|29
block|}
argument_list|,
name|retVal
argument_list|)
expr_stmt|;
comment|// Multiply the same matrix with itself with the result being written into 'this' matrix
name|m1
operator|=
name|testMatrix
operator|.
name|clone
argument_list|()
expr_stmt|;
name|retVal
operator|=
name|m1
operator|.
name|multiply
argument_list|(
name|m1
argument_list|,
name|m1
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|retVal
argument_list|,
name|m1
argument_list|)
expr_stmt|;
name|assertMatrixValuesEqualTo
argument_list|(
operator|new
name|float
index|[]
block|{
literal|5
block|,
literal|8
block|,
literal|11
block|,
literal|8
block|,
literal|14
block|,
literal|20
block|,
literal|11
block|,
literal|20
block|,
literal|29
block|}
argument_list|,
name|retVal
argument_list|)
expr_stmt|;
block|}
comment|/**      * This method asserts that the matrix values for the given {@link Matrix} object are equal      * to the pristine, or original, values.      * @param m the Matrix to test.      */
specifier|private
name|void
name|assertMatrixIsPristine
parameter_list|(
name|Matrix
name|m
parameter_list|)
block|{
name|assertMatrixValuesEqualTo
argument_list|(
operator|new
name|float
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|}
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
comment|/**      * This method asserts that the matrix values for the given {@link Matrix} object have      * the specified values.      * @param values the expected values      * @param m the matrix to test      */
specifier|private
name|void
name|assertMatrixValuesEqualTo
parameter_list|(
name|float
index|[]
name|values
parameter_list|,
name|Matrix
name|m
parameter_list|)
block|{
name|float
name|delta
init|=
literal|0.00001f
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// Need to convert a (row, column) co-ordinate into a straight index.
name|int
name|row
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|i
operator|/
literal|3
argument_list|)
decl_stmt|;
name|int
name|column
init|=
name|i
operator|%
literal|3
decl_stmt|;
name|StringBuilder
name|failureMsg
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|failureMsg
operator|.
name|append
argument_list|(
literal|"Incorrect value for matrix["
argument_list|)
operator|.
name|append
argument_list|(
name|row
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
operator|.
name|append
argument_list|(
name|column
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|failureMsg
operator|.
name|toString
argument_list|()
argument_list|,
name|values
index|[
name|i
index|]
argument_list|,
name|m
operator|.
name|getValue
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
argument_list|,
name|delta
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Set the tests in the suite for this test class.      *      * @return the Suite.      */
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
return|return
operator|new
name|TestSuite
argument_list|(
name|TestMatrix
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**      * Command line execution.      *      * @param args Command line arguments.      */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|String
index|[]
name|arg
init|=
block|{
name|TestMatrix
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
decl_stmt|;
name|junit
operator|.
name|textui
operator|.
name|TestRunner
operator|.
name|main
argument_list|(
name|arg
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

