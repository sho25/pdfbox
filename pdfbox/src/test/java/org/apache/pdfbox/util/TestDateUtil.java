begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParsePosition
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|GregorianCalendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SimpleTimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSString
import|;
end_import

begin_comment
comment|/**  * Test the date conversion utility.  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @author<a href="mailto:zweibieren@ahoo.com">Fred Hansen</a>  *   */
end_comment

begin_class
specifier|public
class|class
name|TestDateUtil
extends|extends
name|TestCase
block|{
specifier|private
specifier|static
specifier|final
name|int
name|MINS
init|=
literal|60
operator|*
literal|1000
decl_stmt|,
name|HRS
init|=
literal|60
operator|*
name|MINS
decl_stmt|;
comment|// expect parse fail
specifier|private
specifier|static
specifier|final
name|int
name|BAD
init|=
operator|-
literal|666
decl_stmt|;
comment|/**      * Test class constructor.      *      * @param name The name of the test class.      *      * @throws IOException If there is an error creating the test.      */
specifier|public
name|TestDateUtil
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|////////////////////////////////////////////////////
comment|// Test body follows
comment|/**      * Test common date formats.      *      * @throws Exception when there is an exception      */
specifier|public
name|void
name|testExtract
parameter_list|()
throws|throws
name|Exception
block|{
name|TimeZone
name|timezone
init|=
name|TimeZone
operator|.
name|getDefault
argument_list|()
decl_stmt|;
name|TimeZone
operator|.
name|setDefault
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|assertCalendarEquals
argument_list|(
operator|new
name|GregorianCalendar
argument_list|(
literal|2005
argument_list|,
literal|4
argument_list|,
literal|12
argument_list|)
argument_list|,
name|DateConverter
operator|.
name|toCalendar
argument_list|(
literal|"D:05/12/2005"
argument_list|)
argument_list|)
expr_stmt|;
name|assertCalendarEquals
argument_list|(
operator|new
name|GregorianCalendar
argument_list|(
literal|2005
argument_list|,
literal|4
argument_list|,
literal|12
argument_list|,
literal|15
argument_list|,
literal|57
argument_list|,
literal|16
argument_list|)
argument_list|,
name|DateConverter
operator|.
name|toCalendar
argument_list|(
literal|"5/12/2005 15:57:16"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|TimeZone
operator|.
name|setDefault
argument_list|(
name|timezone
argument_list|)
expr_stmt|;
block|}
comment|// check that new toCalendar gives NullPointer for a null arg
try|try
block|{
name|DateConverter
operator|.
name|toCalendar
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// failed to have expected exception
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|ex
parameter_list|)
block|{
comment|// expected outcome
block|}
block|}
comment|/**      * Calendar.equals test case.      *       * @param expect the expected calendar value      * @param was the calendar value to be checked      */
specifier|public
name|void
name|assertCalendarEquals
parameter_list|(
name|Calendar
name|expect
parameter_list|,
name|Calendar
name|was
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expect
operator|.
name|getTimeInMillis
argument_list|()
argument_list|,
name|was
operator|.
name|getTimeInMillis
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expect
operator|.
name|getTimeZone
argument_list|()
operator|.
name|getRawOffset
argument_list|()
argument_list|,
name|was
operator|.
name|getTimeZone
argument_list|()
operator|.
name|getRawOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test case for      *<a href="https://issues.apache.org/jira/browse/PDFBOX-598">PDFBOX-598</a>.      *       * @throws IOException if something went wrong.      */
specifier|public
name|void
name|testDateConversion
parameter_list|()
throws|throws
name|IOException
block|{
name|Calendar
name|c
init|=
name|DateConverter
operator|.
name|toCalendar
argument_list|(
literal|"D:20050526205258+01'00'"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2005
argument_list|,
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|05
operator|-
literal|1
argument_list|,
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|26
argument_list|,
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|52
argument_list|,
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|58
argument_list|,
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Check toCalendar.      * @param yr expected year value      *  If an IOException is the expected result, yr should be null      * @param mon expected month value      * @param day expected dayofmonth value      * @param hr expected hour value      * @param min expected minute value      * @param sec expected second value      * @param tz represents expected timezone offset       * @param orig  A date to be parsed.      * @throws Exception If an unexpected error occurs.      */
specifier|private
specifier|static
name|void
name|checkParse
parameter_list|(
name|int
name|yr
parameter_list|,
name|int
name|mon
parameter_list|,
name|int
name|day
parameter_list|,
name|int
name|hr
parameter_list|,
name|int
name|min
parameter_list|,
name|int
name|sec
parameter_list|,
name|int
name|offset
parameter_list|,
name|String
name|orig
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|pdfDate
init|=
name|String
operator|.
name|format
argument_list|(
literal|"D:%04d%02d%02d%02d%02d%02d%+03d'00'"
argument_list|,
name|yr
argument_list|,
name|mon
argument_list|,
name|day
argument_list|,
name|hr
argument_list|,
name|min
argument_list|,
name|sec
argument_list|,
name|offset
argument_list|)
decl_stmt|;
name|String
name|iso8601Date
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%04d-%02d-%02d"
operator|+
literal|"T%02d:%02d:%02d%+03d:00"
argument_list|,
name|yr
argument_list|,
name|mon
argument_list|,
name|day
argument_list|,
name|hr
argument_list|,
name|min
argument_list|,
name|sec
argument_list|,
name|offset
argument_list|)
decl_stmt|;
name|Calendar
name|cal
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cal
operator|=
name|DateConverter
operator|.
name|toCalendar
argument_list|(
name|orig
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|yr
argument_list|,
name|BAD
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cal
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|iso8601Date
argument_list|,
name|DateConverter
operator|.
name|toISO8601
argument_list|(
name|cal
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pdfDate
argument_list|,
name|DateConverter
operator|.
name|toString
argument_list|(
name|cal
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// new toCalendar()
name|cal
operator|=
name|DateConverter
operator|.
name|toCalendar
argument_list|(
name|orig
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|yr
operator|==
name|BAD
condition|)
block|{
name|assertEquals
argument_list|(
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
argument_list|,
name|DateConverter
operator|.
name|INVALID_YEAR
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|pdfDate
argument_list|,
name|DateConverter
operator|.
name|toString
argument_list|(
name|cal
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Test dates in various formats.      * Years differ to make it easier to find failures.      * @throws Exception none expected      */
specifier|public
name|void
name|testDateConverter
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|year
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
decl_stmt|;
name|checkParse
argument_list|(
literal|2010
argument_list|,
literal|4
argument_list|,
literal|23
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"D:20100423"
argument_list|)
expr_stmt|;
name|checkParse
argument_list|(
literal|2011
argument_list|,
literal|4
argument_list|,
literal|23
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"20110423"
argument_list|)
expr_stmt|;
name|checkParse
argument_list|(
literal|2012
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"D:2012"
argument_list|)
expr_stmt|;
name|checkParse
argument_list|(
literal|2013
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"2013"
argument_list|)
expr_stmt|;
comment|// PDFBOX-1219
name|checkParse
argument_list|(
literal|2001
argument_list|,
literal|1
argument_list|,
literal|31
argument_list|,
literal|10
argument_list|,
literal|33
argument_list|,
literal|0
argument_list|,
operator|+
literal|1
argument_list|,
literal|"2001-01-31T10:33+01:00  "
argument_list|)
expr_stmt|;
comment|// PDFBOX-465
name|checkParse
argument_list|(
literal|2002
argument_list|,
literal|5
argument_list|,
literal|12
argument_list|,
literal|9
argument_list|,
literal|47
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"9:47 5/12/2002"
argument_list|)
expr_stmt|;
comment|// PDFBOX-465
name|checkParse
argument_list|(
literal|2003
argument_list|,
literal|12
argument_list|,
literal|17
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|,
literal|"200312172:2:3"
argument_list|)
expr_stmt|;
comment|// PDFBOX-465
name|checkParse
argument_list|(
literal|2009
argument_list|,
literal|3
argument_list|,
literal|19
argument_list|,
literal|20
argument_list|,
literal|1
argument_list|,
literal|22
argument_list|,
literal|0
argument_list|,
literal|"  20090319 200122"
argument_list|)
expr_stmt|;
name|checkParse
argument_list|(
literal|2014
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|+
literal|2
argument_list|,
literal|"20140401+0200"
argument_list|)
expr_stmt|;
comment|// "EEEE, MMM dd, yy",
name|checkParse
argument_list|(
literal|2115
argument_list|,
literal|1
argument_list|,
literal|11
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"Friday, January 11, 2115"
argument_list|)
expr_stmt|;
comment|// "EEEE, MMM dd, yy",
name|checkParse
argument_list|(
literal|1915
argument_list|,
literal|1
argument_list|,
literal|11
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"Monday, Jan 11, 1915"
argument_list|)
expr_stmt|;
comment|// "EEEE, MMM dd, yy",
name|checkParse
argument_list|(
literal|2215
argument_list|,
literal|1
argument_list|,
literal|11
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"Wed, January 11, 2215"
argument_list|)
expr_stmt|;
comment|// "EEEE, MMM dd, yy",
name|checkParse
argument_list|(
literal|2015
argument_list|,
literal|1
argument_list|,
literal|11
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|" Sun, January 11, 2015 "
argument_list|)
expr_stmt|;
name|checkParse
argument_list|(
literal|2016
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|+
literal|4
argument_list|,
literal|"20160401+04'00'"
argument_list|)
expr_stmt|;
name|checkParse
argument_list|(
literal|2017
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|+
literal|9
argument_list|,
literal|"20170401+09'00'"
argument_list|)
expr_stmt|;
name|checkParse
argument_list|(
literal|2018
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|2
argument_list|,
literal|"20180401-02'00'"
argument_list|)
expr_stmt|;
name|checkParse
argument_list|(
literal|2019
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|,
literal|6
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
operator|-
literal|11
argument_list|,
literal|"20190401 6:1:1 -1100"
argument_list|)
expr_stmt|;
name|checkParse
argument_list|(
literal|2020
argument_list|,
literal|5
argument_list|,
literal|26
argument_list|,
literal|11
argument_list|,
literal|25
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|,
literal|"26 May 2020 11:25:10"
argument_list|)
expr_stmt|;
name|checkParse
argument_list|(
literal|2021
argument_list|,
literal|5
argument_list|,
literal|26
argument_list|,
literal|11
argument_list|,
literal|23
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"26 May 2021 11:23"
argument_list|)
expr_stmt|;
comment|// try dates invalid due to out of limit values
name|checkParse
argument_list|(
name|BAD
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"Tuesday, May 32 2000 11:27 UCT"
argument_list|)
expr_stmt|;
name|checkParse
argument_list|(
name|BAD
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"32 May 2000 11:25"
argument_list|)
expr_stmt|;
name|checkParse
argument_list|(
name|BAD
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"Tuesday, May 32 2000 11:25"
argument_list|)
expr_stmt|;
name|checkParse
argument_list|(
name|BAD
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"19921301 11:25"
argument_list|)
expr_stmt|;
name|checkParse
argument_list|(
name|BAD
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"19921232 11:25"
argument_list|)
expr_stmt|;
name|checkParse
argument_list|(
name|BAD
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"19921001 11:60"
argument_list|)
expr_stmt|;
name|checkParse
argument_list|(
name|BAD
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"19920401 24:25"
argument_list|)
expr_stmt|;
name|checkParse
argument_list|(
name|BAD
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"20070430193647+713'00' illegal tz hr"
argument_list|)
expr_stmt|;
comment|// PDFBOX-465
name|checkParse
argument_list|(
name|BAD
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"nodigits"
argument_list|)
expr_stmt|;
name|checkParse
argument_list|(
name|BAD
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"Unknown"
argument_list|)
expr_stmt|;
comment|// PDFBOX-465
name|checkParse
argument_list|(
name|BAD
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"333three digit year"
argument_list|)
expr_stmt|;
name|checkParse
argument_list|(
literal|2000
argument_list|,
literal|2
argument_list|,
literal|29
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"2000 Feb 29"
argument_list|)
expr_stmt|;
comment|// valid date
name|checkParse
argument_list|(
literal|2000
argument_list|,
literal|2
argument_list|,
literal|29
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|+
literal|11
argument_list|,
literal|" 2000 Feb 29 GMT + 11:00"
argument_list|)
expr_stmt|;
comment|// valid date
name|checkParse
argument_list|(
name|BAD
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"2100 Feb 29 GMT+11"
argument_list|)
expr_stmt|;
comment|// invalid date
name|checkParse
argument_list|(
literal|2012
argument_list|,
literal|2
argument_list|,
literal|29
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|+
literal|11
argument_list|,
literal|"2012 Feb 29 GMT+11"
argument_list|)
expr_stmt|;
comment|// valid date
name|checkParse
argument_list|(
name|BAD
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"2012 Feb 30 GMT+11"
argument_list|)
expr_stmt|;
comment|// invalid date
name|checkParse
argument_list|(
literal|1970
argument_list|,
literal|12
argument_list|,
literal|23
argument_list|,
literal|0
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"1970 12 23:08"
argument_list|)
expr_stmt|;
comment|// test ambiguous date
comment|// cannot have P for PM
comment|// cannot have Sat. instead of Sat
comment|// EST works, but EDT does not; EST is a special kludge in Java
comment|// test cases for all entries on old formats list
comment|//  "E, dd MMM yyyy hh:mm:ss a"
name|checkParse
argument_list|(
literal|1971
argument_list|,
literal|7
argument_list|,
literal|6
argument_list|,
literal|17
argument_list|,
literal|22
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|"Tuesday, 6 Jul 1971 5:22:1 PM"
argument_list|)
expr_stmt|;
comment|//  "EE, MMM dd, yyyy hh:mm:ss a"
name|checkParse
argument_list|(
literal|1972
argument_list|,
literal|7
argument_list|,
literal|6
argument_list|,
literal|17
argument_list|,
literal|22
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|"Thu, July 6, 1972 5:22:1 pm"
argument_list|)
expr_stmt|;
comment|//  "MM/dd/yyyy hh:mm:ss"
name|checkParse
argument_list|(
literal|1973
argument_list|,
literal|7
argument_list|,
literal|6
argument_list|,
literal|17
argument_list|,
literal|22
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|"7/6/1973 17:22:1"
argument_list|)
expr_stmt|;
comment|//  "MM/dd/yyyy"
name|checkParse
argument_list|(
literal|1974
argument_list|,
literal|7
argument_list|,
literal|6
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"7/6/1974"
argument_list|)
expr_stmt|;
comment|//  "yyyy-MM-dd'T'HH:mm:ss'Z'"
name|checkParse
argument_list|(
literal|1975
argument_list|,
literal|7
argument_list|,
literal|6
argument_list|,
literal|17
argument_list|,
literal|22
argument_list|,
literal|1
argument_list|,
operator|-
literal|10
argument_list|,
literal|"1975-7-6T17:22:1-1000"
argument_list|)
expr_stmt|;
comment|//  "yyyy-MM-dd'T'HH:mm:ssz"
name|checkParse
argument_list|(
literal|1976
argument_list|,
literal|7
argument_list|,
literal|6
argument_list|,
literal|17
argument_list|,
literal|22
argument_list|,
literal|1
argument_list|,
operator|-
literal|4
argument_list|,
literal|"1976-7-6T17:22:1GMT-4"
argument_list|)
expr_stmt|;
comment|//  "yyyy-MM-dd'T'HH:mm:ssz"
name|checkParse
argument_list|(
name|BAD
argument_list|,
literal|7
argument_list|,
literal|6
argument_list|,
literal|17
argument_list|,
literal|22
argument_list|,
literal|1
argument_list|,
operator|-
literal|4
argument_list|,
literal|"2076-7-6T17:22:1EDT"
argument_list|)
expr_stmt|;
comment|// "EDT" is not a known tz ID
comment|//  "yyyy-MM-dd'T'HH:mm:ssz"
name|checkParse
argument_list|(
literal|1960
argument_list|,
literal|7
argument_list|,
literal|6
argument_list|,
literal|17
argument_list|,
literal|22
argument_list|,
literal|1
argument_list|,
operator|-
literal|5
argument_list|,
literal|"1960-7-6T17:22:1EST"
argument_list|)
expr_stmt|;
comment|// "EST" does not have a DST rule
comment|//  "EEEE, MMM dd, yyyy"
name|checkParse
argument_list|(
literal|1977
argument_list|,
literal|7
argument_list|,
literal|6
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"Wednesday, Jul 6, 1977"
argument_list|)
expr_stmt|;
comment|//  "EEEE MMM dd, yyyy HH:mm:ss"
name|checkParse
argument_list|(
literal|1978
argument_list|,
literal|7
argument_list|,
literal|6
argument_list|,
literal|17
argument_list|,
literal|22
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|"Thu Jul 6, 1978 17:22:1"
argument_list|)
expr_stmt|;
comment|//  "EEEE MMM dd HH:mm:ss z yyyy"
name|checkParse
argument_list|(
literal|1979
argument_list|,
literal|7
argument_list|,
literal|6
argument_list|,
literal|17
argument_list|,
literal|22
argument_list|,
literal|1
argument_list|,
operator|+
literal|8
argument_list|,
literal|"Friday July 6 17:22:1 GMT+08:00 1979"
argument_list|)
expr_stmt|;
comment|//  "EEEE, MMM dd, yyyy 'at' hh:mma"
name|checkParse
argument_list|(
literal|1980
argument_list|,
literal|7
argument_list|,
literal|6
argument_list|,
literal|16
argument_list|,
literal|23
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"Sun, Jul 6, 1980 at 4:23pm"
argument_list|)
expr_stmt|;
comment|//  "EEEEEEEEEE, MMMMMMMMMMMM dd, yyyy"
name|checkParse
argument_list|(
literal|1981
argument_list|,
literal|7
argument_list|,
literal|6
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"Monday, July 6, 1981"
argument_list|)
expr_stmt|;
comment|//  "dd MMM yyyy hh:mm:ss"
name|checkParse
argument_list|(
literal|1982
argument_list|,
literal|7
argument_list|,
literal|6
argument_list|,
literal|17
argument_list|,
literal|22
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|"6 Jul 1982 17:22:1"
argument_list|)
expr_stmt|;
comment|//  "M/dd/yyyy hh:mm:ss"
name|checkParse
argument_list|(
literal|1983
argument_list|,
literal|7
argument_list|,
literal|6
argument_list|,
literal|17
argument_list|,
literal|22
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|"7/6/1983 17:22:1"
argument_list|)
expr_stmt|;
comment|//  "MM/d/yyyy hh:mm:ss"
name|checkParse
argument_list|(
literal|1984
argument_list|,
literal|7
argument_list|,
literal|6
argument_list|,
literal|17
argument_list|,
literal|22
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|"7/6/1984 17:22:01"
argument_list|)
expr_stmt|;
comment|//  "M/dd/yyyy"
name|checkParse
argument_list|(
literal|1985
argument_list|,
literal|7
argument_list|,
literal|6
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"7/6/1985"
argument_list|)
expr_stmt|;
comment|//  "MM/d/yyyy"
name|checkParse
argument_list|(
literal|1986
argument_list|,
literal|7
argument_list|,
literal|6
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"07/06/1986"
argument_list|)
expr_stmt|;
comment|//  "M/d/yyyy hh:mm:ss"
name|checkParse
argument_list|(
literal|1987
argument_list|,
literal|7
argument_list|,
literal|6
argument_list|,
literal|17
argument_list|,
literal|22
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|"7/6/1987 17:22:1"
argument_list|)
expr_stmt|;
comment|//  "M/d/yyyy"
name|checkParse
argument_list|(
literal|1988
argument_list|,
literal|7
argument_list|,
literal|6
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"7/6/1988"
argument_list|)
expr_stmt|;
comment|// test ends of range of two digit years
name|checkParse
argument_list|(
name|year
operator|-
literal|79
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"1/1/"
operator|+
operator|(
operator|(
name|year
operator|-
literal|79
operator|)
operator|%
literal|100
operator|)
operator|+
literal|" 00:00:00"
argument_list|)
expr_stmt|;
comment|//  "M/d/yy hh:mm:ss"
comment|//  "M/d/yy"
name|checkParse
argument_list|(
name|year
operator|+
literal|19
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"1/1/"
operator|+
operator|(
operator|(
name|year
operator|+
literal|19
operator|)
operator|%
literal|100
operator|)
argument_list|)
expr_stmt|;
comment|//  "yyyyMMdd hh:mm:ss Z"
name|checkParse
argument_list|(
literal|1991
argument_list|,
literal|7
argument_list|,
literal|6
argument_list|,
literal|17
argument_list|,
literal|7
argument_list|,
literal|1
argument_list|,
operator|+
literal|6
argument_list|,
literal|"19910706 17:7:1 Z+0600"
argument_list|)
expr_stmt|;
comment|//  "yyyyMMdd hh:mm:ss"
name|checkParse
argument_list|(
literal|1992
argument_list|,
literal|7
argument_list|,
literal|6
argument_list|,
literal|17
argument_list|,
literal|7
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|"19920706 17:07:01"
argument_list|)
expr_stmt|;
comment|//  "yyyyMMdd'+00''00'''"
name|checkParse
argument_list|(
literal|1993
argument_list|,
literal|7
argument_list|,
literal|6
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"19930706+00'00'"
argument_list|)
expr_stmt|;
comment|//  "yyyyMMdd'+01''00'''"
name|checkParse
argument_list|(
literal|1994
argument_list|,
literal|7
argument_list|,
literal|6
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|"19940706+01'00'"
argument_list|)
expr_stmt|;
comment|//  "yyyyMMdd'+02''00'''"
name|checkParse
argument_list|(
literal|1995
argument_list|,
literal|7
argument_list|,
literal|6
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|"19950706+02'00'"
argument_list|)
expr_stmt|;
comment|//  "yyyyMMdd'+03''00'''"
name|checkParse
argument_list|(
literal|1996
argument_list|,
literal|7
argument_list|,
literal|6
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|"19960706+03'00'"
argument_list|)
expr_stmt|;
comment|//   . . .
comment|// "yyyyMMdd'-10''00'''"
name|checkParse
argument_list|(
literal|1997
argument_list|,
literal|7
argument_list|,
literal|6
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|10
argument_list|,
literal|"19970706-10'00'"
argument_list|)
expr_stmt|;
comment|// "yyyyMMdd'-11''00'''"
name|checkParse
argument_list|(
literal|1998
argument_list|,
literal|7
argument_list|,
literal|6
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|11
argument_list|,
literal|"19980706-11'00'"
argument_list|)
expr_stmt|;
comment|//  "yyyyMMdd"
name|checkParse
argument_list|(
literal|1999
argument_list|,
literal|7
argument_list|,
literal|6
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"19990706"
argument_list|)
expr_stmt|;
comment|// ambiguous big-endian date
name|checkParse
argument_list|(
literal|2073
argument_list|,
literal|12
argument_list|,
literal|25
argument_list|,
literal|0
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"2073 12 25:08"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|checkToString
parameter_list|(
name|int
name|yr
parameter_list|,
name|int
name|mon
parameter_list|,
name|int
name|day
parameter_list|,
name|int
name|hr
parameter_list|,
name|int
name|min
parameter_list|,
name|int
name|sec
parameter_list|,
name|TimeZone
name|tz
parameter_list|,
name|int
name|off
parameter_list|)
throws|throws
name|Exception
block|{
comment|// construct a GregoreanCalendar from args
name|GregorianCalendar
name|cal
init|=
operator|new
name|GregorianCalendar
argument_list|(
name|tz
argument_list|,
name|Locale
operator|.
name|ENGLISH
argument_list|)
decl_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|yr
argument_list|,
name|mon
operator|-
literal|1
argument_list|,
name|day
argument_list|,
name|hr
argument_list|,
name|min
argument_list|,
name|sec
argument_list|)
expr_stmt|;
comment|// create expected strings
name|String
name|pdfDate
init|=
name|String
operator|.
name|format
argument_list|(
literal|"D:%04d%02d%02d%02d%02d%02d%+03d'00'"
argument_list|,
name|yr
argument_list|,
name|mon
argument_list|,
name|day
argument_list|,
name|hr
argument_list|,
name|min
argument_list|,
name|sec
argument_list|,
name|off
argument_list|)
decl_stmt|;
name|String
name|iso8601Date
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%04d-%02d-%02d"
operator|+
literal|"T%02d:%02d:%02d%+03d:00"
argument_list|,
name|yr
argument_list|,
name|mon
argument_list|,
name|day
argument_list|,
name|hr
argument_list|,
name|min
argument_list|,
name|sec
argument_list|,
name|off
argument_list|)
decl_stmt|;
comment|// compare outputs from toString and toISO8601 with expected values
name|assertEquals
argument_list|(
name|pdfDate
argument_list|,
name|DateConverter
operator|.
name|toString
argument_list|(
name|cal
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|iso8601Date
argument_list|,
name|DateConverter
operator|.
name|toISO8601
argument_list|(
name|cal
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**       * Test toString() and toISO8601() for various dates.      *       * @throws Exception if something went wrong.      */
specifier|public
name|void
name|testToString
parameter_list|()
throws|throws
name|Exception
block|{
comment|// std DST
name|TimeZone
name|tzPgh
init|=
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"America/New_York"
argument_list|)
decl_stmt|;
comment|// -5 -4
name|TimeZone
name|tzBerlin
init|=
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"Europe/Berlin"
argument_list|)
decl_stmt|;
comment|// +1 +2
name|TimeZone
name|tzMaputo
init|=
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"Africa/Maputo"
argument_list|)
decl_stmt|;
comment|// +2 +2
name|TimeZone
name|tzAruba
init|=
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"America/Aruba"
argument_list|)
decl_stmt|;
comment|// -4 -4
name|TimeZone
name|tzJamaica
init|=
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"America/Jamaica"
argument_list|)
decl_stmt|;
comment|// -5 -5
name|TimeZone
name|tzMcMurdo
init|=
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"Antartica/McMurdo"
argument_list|)
decl_stmt|;
comment|// +12 +13
name|assertNull
argument_list|(
name|DateConverter
operator|.
name|toCalendar
argument_list|(
operator|(
name|COSString
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|DateConverter
operator|.
name|toCalendar
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|checkToString
argument_list|(
literal|2013
argument_list|,
literal|8
argument_list|,
literal|28
argument_list|,
literal|3
argument_list|,
literal|14
argument_list|,
literal|15
argument_list|,
name|tzPgh
argument_list|,
operator|-
literal|4
argument_list|)
expr_stmt|;
name|checkToString
argument_list|(
literal|2014
argument_list|,
literal|2
argument_list|,
literal|28
argument_list|,
literal|3
argument_list|,
literal|14
argument_list|,
literal|15
argument_list|,
name|tzPgh
argument_list|,
operator|-
literal|5
argument_list|)
expr_stmt|;
name|checkToString
argument_list|(
literal|2015
argument_list|,
literal|8
argument_list|,
literal|28
argument_list|,
literal|3
argument_list|,
literal|14
argument_list|,
literal|15
argument_list|,
name|tzBerlin
argument_list|,
operator|+
literal|2
argument_list|)
expr_stmt|;
name|checkToString
argument_list|(
literal|2016
argument_list|,
literal|2
argument_list|,
literal|28
argument_list|,
literal|3
argument_list|,
literal|14
argument_list|,
literal|15
argument_list|,
name|tzBerlin
argument_list|,
operator|+
literal|1
argument_list|)
expr_stmt|;
name|checkToString
argument_list|(
literal|2017
argument_list|,
literal|8
argument_list|,
literal|28
argument_list|,
literal|3
argument_list|,
literal|14
argument_list|,
literal|15
argument_list|,
name|tzAruba
argument_list|,
operator|-
literal|4
argument_list|)
expr_stmt|;
name|checkToString
argument_list|(
literal|2018
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|14
argument_list|,
literal|15
argument_list|,
name|tzJamaica
argument_list|,
operator|-
literal|5
argument_list|)
expr_stmt|;
name|checkToString
argument_list|(
literal|2019
argument_list|,
literal|12
argument_list|,
literal|31
argument_list|,
literal|12
argument_list|,
literal|59
argument_list|,
literal|59
argument_list|,
name|tzJamaica
argument_list|,
operator|-
literal|5
argument_list|)
expr_stmt|;
name|checkToString
argument_list|(
literal|2020
argument_list|,
literal|2
argument_list|,
literal|29
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|tzMaputo
argument_list|,
operator|+
literal|2
argument_list|)
expr_stmt|;
comment|// McMurdo has a daylightsavings rule, but it seems never to apply
name|checkToString
argument_list|(
literal|1981
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|14
argument_list|,
literal|15
argument_list|,
name|tzMcMurdo
argument_list|,
operator|+
literal|0
argument_list|)
expr_stmt|;
name|checkToString
argument_list|(
literal|1982
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|14
argument_list|,
literal|15
argument_list|,
name|tzMcMurdo
argument_list|,
operator|+
literal|0
argument_list|)
expr_stmt|;
name|checkToString
argument_list|(
literal|1983
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|14
argument_list|,
literal|15
argument_list|,
name|tzMcMurdo
argument_list|,
operator|+
literal|0
argument_list|)
expr_stmt|;
name|checkToString
argument_list|(
literal|1984
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|14
argument_list|,
literal|15
argument_list|,
name|tzMcMurdo
argument_list|,
operator|+
literal|0
argument_list|)
expr_stmt|;
name|checkToString
argument_list|(
literal|1985
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|14
argument_list|,
literal|15
argument_list|,
name|tzMcMurdo
argument_list|,
operator|+
literal|0
argument_list|)
expr_stmt|;
name|checkToString
argument_list|(
literal|1986
argument_list|,
literal|6
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|14
argument_list|,
literal|15
argument_list|,
name|tzMcMurdo
argument_list|,
operator|+
literal|0
argument_list|)
expr_stmt|;
name|checkToString
argument_list|(
literal|1987
argument_list|,
literal|7
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|14
argument_list|,
literal|15
argument_list|,
name|tzMcMurdo
argument_list|,
operator|+
literal|0
argument_list|)
expr_stmt|;
name|checkToString
argument_list|(
literal|1988
argument_list|,
literal|8
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|14
argument_list|,
literal|15
argument_list|,
name|tzMcMurdo
argument_list|,
operator|+
literal|0
argument_list|)
expr_stmt|;
name|checkToString
argument_list|(
literal|1989
argument_list|,
literal|9
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|14
argument_list|,
literal|15
argument_list|,
name|tzMcMurdo
argument_list|,
operator|+
literal|0
argument_list|)
expr_stmt|;
name|checkToString
argument_list|(
literal|1990
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|14
argument_list|,
literal|15
argument_list|,
name|tzMcMurdo
argument_list|,
operator|+
literal|0
argument_list|)
expr_stmt|;
name|checkToString
argument_list|(
literal|1991
argument_list|,
literal|11
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|14
argument_list|,
literal|15
argument_list|,
name|tzMcMurdo
argument_list|,
operator|+
literal|0
argument_list|)
expr_stmt|;
name|checkToString
argument_list|(
literal|1992
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|14
argument_list|,
literal|15
argument_list|,
name|tzMcMurdo
argument_list|,
operator|+
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|checkParseTZ
parameter_list|(
name|int
name|expect
parameter_list|,
name|String
name|src
parameter_list|)
block|{
name|GregorianCalendar
name|dest
init|=
name|DateConverter
operator|.
name|newGreg
argument_list|()
decl_stmt|;
name|DateConverter
operator|.
name|parseTZoffset
argument_list|(
name|src
argument_list|,
name|dest
argument_list|,
operator|new
name|ParsePosition
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expect
argument_list|,
name|dest
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|ZONE_OFFSET
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Timezone testcase.      */
specifier|public
name|void
name|testParseTZ
parameter_list|()
block|{
name|checkParseTZ
argument_list|(
literal|0
operator|*
name|HRS
operator|+
literal|0
operator|*
name|MINS
argument_list|,
literal|"+00:00"
argument_list|)
expr_stmt|;
name|checkParseTZ
argument_list|(
literal|0
operator|*
name|HRS
operator|+
literal|0
operator|*
name|MINS
argument_list|,
literal|"-0000"
argument_list|)
expr_stmt|;
name|checkParseTZ
argument_list|(
literal|1
operator|*
name|HRS
operator|+
literal|0
operator|*
name|MINS
argument_list|,
literal|"+1:00"
argument_list|)
expr_stmt|;
name|checkParseTZ
argument_list|(
operator|-
operator|(
literal|1
operator|*
name|HRS
operator|+
literal|0
operator|*
name|MINS
operator|)
argument_list|,
literal|"-1:00"
argument_list|)
expr_stmt|;
name|checkParseTZ
argument_list|(
operator|-
operator|(
literal|1
operator|*
name|HRS
operator|+
literal|30
operator|*
name|MINS
operator|)
argument_list|,
literal|"-0130"
argument_list|)
expr_stmt|;
name|checkParseTZ
argument_list|(
literal|11
operator|*
name|HRS
operator|+
literal|59
operator|*
name|MINS
argument_list|,
literal|"1159"
argument_list|)
expr_stmt|;
name|checkParseTZ
argument_list|(
operator|-
operator|(
literal|11
operator|*
name|HRS
operator|+
literal|30
operator|*
name|MINS
operator|)
argument_list|,
literal|"1230"
argument_list|)
expr_stmt|;
name|checkParseTZ
argument_list|(
literal|11
operator|*
name|HRS
operator|+
literal|30
operator|*
name|MINS
argument_list|,
literal|"-12:30"
argument_list|)
expr_stmt|;
name|checkParseTZ
argument_list|(
literal|0
operator|*
name|HRS
operator|+
literal|0
operator|*
name|MINS
argument_list|,
literal|"Z"
argument_list|)
expr_stmt|;
name|checkParseTZ
argument_list|(
operator|-
operator|(
literal|8
operator|*
name|HRS
operator|+
literal|0
operator|*
name|MINS
operator|)
argument_list|,
literal|"PST"
argument_list|)
expr_stmt|;
name|checkParseTZ
argument_list|(
literal|0
operator|*
name|HRS
operator|+
literal|0
operator|*
name|MINS
argument_list|,
literal|"EDT"
argument_list|)
expr_stmt|;
comment|// EDT does not parse
name|checkParseTZ
argument_list|(
operator|-
operator|(
literal|3
operator|*
name|HRS
operator|+
literal|0
operator|*
name|MINS
operator|)
argument_list|,
literal|"GMT-0300"
argument_list|)
expr_stmt|;
name|checkParseTZ
argument_list|(
operator|+
operator|(
literal|11
operator|*
name|HRS
operator|+
literal|0
operator|*
name|MINS
operator|)
argument_list|,
literal|"GMT+11:00"
argument_list|)
expr_stmt|;
name|checkParseTZ
argument_list|(
operator|-
operator|(
literal|6
operator|*
name|HRS
operator|+
literal|0
operator|*
name|MINS
operator|)
argument_list|,
literal|"America/Chicago"
argument_list|)
expr_stmt|;
name|checkParseTZ
argument_list|(
operator|+
operator|(
literal|4
operator|*
name|HRS
operator|+
literal|0
operator|*
name|MINS
operator|)
argument_list|,
literal|"Europe/Moscow"
argument_list|)
expr_stmt|;
name|checkParseTZ
argument_list|(
operator|(
literal|5
operator|*
name|HRS
operator|+
literal|0
operator|*
name|MINS
operator|)
argument_list|,
literal|"0500"
argument_list|)
expr_stmt|;
name|checkParseTZ
argument_list|(
operator|(
literal|5
operator|*
name|HRS
operator|+
literal|0
operator|*
name|MINS
operator|)
argument_list|,
literal|"+0500"
argument_list|)
expr_stmt|;
name|checkParseTZ
argument_list|(
operator|(
literal|11
operator|*
name|HRS
operator|+
literal|0
operator|*
name|MINS
operator|)
argument_list|,
literal|"+11'00'"
argument_list|)
expr_stmt|;
name|checkParseTZ
argument_list|(
literal|0
argument_list|,
literal|"Z"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|checkFormatOffset
parameter_list|(
name|double
name|off
parameter_list|,
name|String
name|expect
parameter_list|)
block|{
name|TimeZone
name|tz
init|=
operator|new
name|SimpleTimeZone
argument_list|(
call|(
name|int
call|)
argument_list|(
name|off
operator|*
literal|60
operator|*
literal|60
operator|*
literal|1000
argument_list|)
argument_list|,
literal|"junkID"
argument_list|)
decl_stmt|;
name|String
name|got
init|=
name|DateConverter
operator|.
name|formatTZoffset
argument_list|(
name|tz
operator|.
name|getRawOffset
argument_list|()
argument_list|,
literal|":"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expect
argument_list|,
name|got
argument_list|)
expr_stmt|;
block|}
comment|/**      * Timezone offset testcase.      *       * @throws Exception      */
specifier|public
name|void
name|testFormatTZoffset
parameter_list|()
block|{
name|checkFormatOffset
argument_list|(
operator|-
literal|12.1
argument_list|,
literal|"+11:54"
argument_list|)
expr_stmt|;
name|checkFormatOffset
argument_list|(
literal|12.1
argument_list|,
literal|"-11:54"
argument_list|)
expr_stmt|;
name|checkFormatOffset
argument_list|(
literal|0
argument_list|,
literal|"+00:00"
argument_list|)
expr_stmt|;
name|checkFormatOffset
argument_list|(
operator|-
literal|1
argument_list|,
literal|"-01:00"
argument_list|)
expr_stmt|;
name|checkFormatOffset
argument_list|(
literal|.5
argument_list|,
literal|"+00:30"
argument_list|)
expr_stmt|;
name|checkFormatOffset
argument_list|(
operator|-
literal|0.5
argument_list|,
literal|"-00:30"
argument_list|)
expr_stmt|;
name|checkFormatOffset
argument_list|(
literal|.1
argument_list|,
literal|"+00:06"
argument_list|)
expr_stmt|;
name|checkFormatOffset
argument_list|(
operator|-
literal|0.1
argument_list|,
literal|"-00:06"
argument_list|)
expr_stmt|;
name|checkFormatOffset
argument_list|(
operator|-
literal|12
argument_list|,
literal|"+00:00"
argument_list|)
expr_stmt|;
name|checkFormatOffset
argument_list|(
literal|12
argument_list|,
literal|"+00:00"
argument_list|)
expr_stmt|;
name|checkFormatOffset
argument_list|(
operator|-
literal|11.5
argument_list|,
literal|"-11:30"
argument_list|)
expr_stmt|;
name|checkFormatOffset
argument_list|(
literal|11.5
argument_list|,
literal|"+11:30"
argument_list|)
expr_stmt|;
name|checkFormatOffset
argument_list|(
literal|11.9
argument_list|,
literal|"+11:54"
argument_list|)
expr_stmt|;
name|checkFormatOffset
argument_list|(
literal|11.1
argument_list|,
literal|"+11:06"
argument_list|)
expr_stmt|;
name|checkFormatOffset
argument_list|(
operator|-
literal|11.9
argument_list|,
literal|"-11:54"
argument_list|)
expr_stmt|;
name|checkFormatOffset
argument_list|(
operator|-
literal|11.1
argument_list|,
literal|"-11:06"
argument_list|)
expr_stmt|;
block|}
comment|// testbody precedes
comment|////////////////////////////////////////////////////
comment|/**      * Set the tests in the suite for this test class.      *      * @return the Suite.      */
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
return|return
operator|new
name|TestSuite
argument_list|(
name|TestDateUtil
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**      * Command line execution.      *      * @param args Command line arguments.      */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|String
index|[]
name|arg
init|=
block|{
name|TestDateUtil
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
decl_stmt|;
name|junit
operator|.
name|textui
operator|.
name|TestRunner
operator|.
name|main
argument_list|(
name|arg
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

