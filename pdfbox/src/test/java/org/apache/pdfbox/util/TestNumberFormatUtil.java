begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2016 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|MathContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|RoundingMode
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_comment
comment|/**  *  * @author Michael Doswald  */
end_comment

begin_class
specifier|public
class|class
name|TestNumberFormatUtil
extends|extends
name|TestCase
block|{
specifier|private
specifier|final
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|64
index|]
decl_stmt|;
specifier|public
name|void
name|testFormatOfIntegerValues
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|NumberFormatUtil
operator|.
name|formatFloatFast
argument_list|(
literal|51
argument_list|,
literal|5
argument_list|,
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|'5'
block|,
literal|'1'
block|}
argument_list|,
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|NumberFormatUtil
operator|.
name|formatFloatFast
argument_list|(
operator|-
literal|51
argument_list|,
literal|5
argument_list|,
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|'-'
block|,
literal|'5'
block|,
literal|'1'
block|}
argument_list|,
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|NumberFormatUtil
operator|.
name|formatFloatFast
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|,
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|'0'
block|}
argument_list|,
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|19
argument_list|,
name|NumberFormatUtil
operator|.
name|formatFloatFast
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|5
argument_list|,
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|'9'
block|,
literal|'2'
block|,
literal|'2'
block|,
literal|'3'
block|,
literal|'3'
block|,
literal|'7'
block|,
literal|'2'
block|,
literal|'0'
block|,
literal|'3'
block|,
literal|'6'
block|,
literal|'8'
block|,
literal|'5'
block|,
literal|'4'
block|,
literal|'7'
block|,
literal|'7'
block|,
literal|'5'
block|,
literal|'8'
block|,
literal|'0'
block|,
literal|'7'
block|}
argument_list|,
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
literal|19
argument_list|)
argument_list|)
expr_stmt|;
comment|//Note: Integer.MAX_VALUE would be 2147483647, but when converting to float, we have
comment|//      precision errors. NumberFormat.getIntegerInstance() does also print 2147483648 for
comment|//      such a float
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|NumberFormatUtil
operator|.
name|formatFloatFast
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|5
argument_list|,
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|'2'
block|,
literal|'1'
block|,
literal|'4'
block|,
literal|'7'
block|,
literal|'4'
block|,
literal|'8'
block|,
literal|'3'
block|,
literal|'6'
block|,
literal|'4'
block|,
literal|'8'
block|}
argument_list|,
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|NumberFormatUtil
operator|.
name|formatFloatFast
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|,
literal|5
argument_list|,
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|'-'
block|,
literal|'2'
block|,
literal|'1'
block|,
literal|'4'
block|,
literal|'7'
block|,
literal|'4'
block|,
literal|'8'
block|,
literal|'3'
block|,
literal|'6'
block|,
literal|'4'
block|,
literal|'8'
block|}
argument_list|,
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
literal|11
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testFormatOfRealValues
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|NumberFormatUtil
operator|.
name|formatFloatFast
argument_list|(
literal|0.7f
argument_list|,
literal|5
argument_list|,
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|'0'
block|,
literal|'.'
block|,
literal|'7'
block|}
argument_list|,
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|NumberFormatUtil
operator|.
name|formatFloatFast
argument_list|(
operator|-
literal|0.7f
argument_list|,
literal|5
argument_list|,
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|'-'
block|,
literal|'0'
block|,
literal|'.'
block|,
literal|'7'
block|}
argument_list|,
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|NumberFormatUtil
operator|.
name|formatFloatFast
argument_list|(
literal|0.003f
argument_list|,
literal|5
argument_list|,
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|'0'
block|,
literal|'.'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'3'
block|}
argument_list|,
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|NumberFormatUtil
operator|.
name|formatFloatFast
argument_list|(
operator|-
literal|0.003f
argument_list|,
literal|5
argument_list|,
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|'-'
block|,
literal|'0'
block|,
literal|'.'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'3'
block|}
argument_list|,
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testFormatOfRealValuesReturnsMinusOneIfItCannotBeFormatted
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"NaN should not be formattable"
argument_list|,
operator|-
literal|1
argument_list|,
name|NumberFormatUtil
operator|.
name|formatFloatFast
argument_list|(
name|Float
operator|.
name|NaN
argument_list|,
literal|5
argument_list|,
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"+Infinity should not be formattable"
argument_list|,
operator|-
literal|1
argument_list|,
name|NumberFormatUtil
operator|.
name|formatFloatFast
argument_list|(
name|Float
operator|.
name|POSITIVE_INFINITY
argument_list|,
literal|5
argument_list|,
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"-Infinity should not be formattable"
argument_list|,
operator|-
literal|1
argument_list|,
name|NumberFormatUtil
operator|.
name|formatFloatFast
argument_list|(
name|Float
operator|.
name|NEGATIVE_INFINITY
argument_list|,
literal|5
argument_list|,
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Too big number should not be formattable"
argument_list|,
operator|-
literal|1
argument_list|,
name|NumberFormatUtil
operator|.
name|formatFloatFast
argument_list|(
operator|(
operator|(
name|float
operator|)
name|Long
operator|.
name|MAX_VALUE
operator|)
operator|+
literal|1000000000000f
argument_list|,
literal|5
argument_list|,
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Too big negative number should not be formattable"
argument_list|,
operator|-
literal|1
argument_list|,
name|NumberFormatUtil
operator|.
name|formatFloatFast
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|,
literal|5
argument_list|,
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRoundingUp
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|NumberFormatUtil
operator|.
name|formatFloatFast
argument_list|(
literal|0.999999f
argument_list|,
literal|5
argument_list|,
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|'1'
block|}
argument_list|,
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|NumberFormatUtil
operator|.
name|formatFloatFast
argument_list|(
literal|0.125f
argument_list|,
literal|2
argument_list|,
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|'0'
block|,
literal|'.'
block|,
literal|'1'
block|,
literal|'3'
block|}
argument_list|,
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|NumberFormatUtil
operator|.
name|formatFloatFast
argument_list|(
operator|-
literal|0.999999f
argument_list|,
literal|5
argument_list|,
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|'-'
block|,
literal|'1'
block|}
argument_list|,
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRoundingDown
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|NumberFormatUtil
operator|.
name|formatFloatFast
argument_list|(
literal|0.994f
argument_list|,
literal|2
argument_list|,
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|'0'
block|,
literal|'.'
block|,
literal|'9'
block|,
literal|'9'
block|}
argument_list|,
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Formats all floats in a defined range, parses them back with the BigDecimal constructor and      * compares them to the expected result. The test only tests a small range for performance       * reasons. It works for ranges up to at least A0 size:      *       *<ul>      *<li>PDF uses 72 dpi resolution</li>      *<li>A0 size is 841mm x 1189mm, this equals to about 2472 x 3495 in dot resolution</li>      *</ul>      */
specifier|public
name|void
name|testFormattingInRange
parameter_list|()
block|{
comment|//Define a range to test
name|BigDecimal
name|minVal
init|=
operator|new
name|BigDecimal
argument_list|(
literal|"-10"
argument_list|)
decl_stmt|;
name|BigDecimal
name|maxVal
init|=
operator|new
name|BigDecimal
argument_list|(
literal|"10"
argument_list|)
decl_stmt|;
name|BigDecimal
name|maxDelta
init|=
name|BigDecimal
operator|.
name|ZERO
decl_stmt|;
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^\\-?\\d+(\\.\\d+)?$"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|formatBuffer
init|=
operator|new
name|byte
index|[
literal|32
index|]
decl_stmt|;
for|for
control|(
name|int
name|maxFractionDigits
init|=
literal|0
init|;
name|maxFractionDigits
operator|<=
literal|5
condition|;
name|maxFractionDigits
operator|++
control|)
block|{
name|BigDecimal
name|increment
init|=
operator|new
name|BigDecimal
argument_list|(
literal|10
argument_list|)
operator|.
name|pow
argument_list|(
operator|-
name|maxFractionDigits
argument_list|,
name|MathContext
operator|.
name|DECIMAL128
argument_list|)
decl_stmt|;
for|for
control|(
name|BigDecimal
name|value
init|=
name|minVal
init|;
name|value
operator|.
name|compareTo
argument_list|(
name|maxVal
argument_list|)
operator|<
literal|0
condition|;
name|value
operator|=
name|value
operator|.
name|add
argument_list|(
name|increment
argument_list|)
control|)
block|{
comment|//format with the formatFloatFast method and parse back
name|int
name|byteCount
init|=
name|NumberFormatUtil
operator|.
name|formatFloatFast
argument_list|(
name|value
operator|.
name|floatValue
argument_list|()
argument_list|,
name|maxFractionDigits
argument_list|,
name|formatBuffer
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|byteCount
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|String
name|newStringResult
init|=
operator|new
name|String
argument_list|(
name|formatBuffer
argument_list|,
literal|0
argument_list|,
name|byteCount
argument_list|,
name|Charsets
operator|.
name|US_ASCII
argument_list|)
decl_stmt|;
name|BigDecimal
name|formattedDecimal
init|=
operator|new
name|BigDecimal
argument_list|(
name|newStringResult
argument_list|)
decl_stmt|;
comment|//create new BigDecimal with float representation. This is needed because the float
comment|//may not represent the 'value' BigDecimal precisely, in which case the formatFloatFast
comment|//would get a different result.
name|BigDecimal
name|expectedDecimal
init|=
operator|new
name|BigDecimal
argument_list|(
name|value
operator|.
name|floatValue
argument_list|()
argument_list|)
decl_stmt|;
name|expectedDecimal
operator|=
name|expectedDecimal
operator|.
name|setScale
argument_list|(
name|maxFractionDigits
argument_list|,
name|RoundingMode
operator|.
name|HALF_UP
argument_list|)
expr_stmt|;
name|BigDecimal
name|diff
init|=
name|formattedDecimal
operator|.
name|subtract
argument_list|(
name|expectedDecimal
argument_list|)
operator|.
name|abs
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|pattern
operator|.
name|matcher
argument_list|(
name|newStringResult
argument_list|)
operator|.
name|matches
argument_list|()
argument_list|)
expr_stmt|;
comment|//Fail if diff is greater than maxDelta.
if|if
condition|(
name|diff
operator|.
name|compareTo
argument_list|(
name|maxDelta
argument_list|)
operator|>
literal|0
condition|)
block|{
name|fail
argument_list|(
literal|"Expected: "
operator|+
name|expectedDecimal
operator|+
literal|", actual: "
operator|+
name|newStringResult
operator|+
literal|", diff: "
operator|+
name|diff
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|assertArrayEquals
parameter_list|(
name|byte
index|[]
name|expected
parameter_list|,
name|byte
index|[]
name|actual
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Length of byte array not equal"
argument_list|,
name|expected
operator|.
name|length
argument_list|,
name|actual
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|expected
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|expected
index|[
name|idx
index|]
operator|!=
name|actual
index|[
name|idx
index|]
condition|)
block|{
name|fail
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Byte at index %d not equal. Expected '%02X' but got '%02X'"
argument_list|,
name|idx
argument_list|,
name|expected
index|[
name|idx
index|]
argument_list|,
name|actual
index|[
name|idx
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Set the tests in the suite for this test class.      *      * @return the Suite.      */
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
return|return
operator|new
name|TestSuite
argument_list|(
name|TestNumberFormatUtil
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**      * Command line execution.      *      * @param args Command line arguments.      */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|String
index|[]
name|arg
init|=
block|{
name|TestNumberFormatUtil
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
decl_stmt|;
name|junit
operator|.
name|textui
operator|.
name|TestRunner
operator|.
name|main
argument_list|(
name|arg
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

