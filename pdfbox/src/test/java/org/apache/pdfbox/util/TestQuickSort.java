begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  *  * @author Uwe Pachler  */
end_comment

begin_class
specifier|public
class|class
name|TestQuickSort
extends|extends
name|TestCase
block|{
parameter_list|<
name|T
extends|extends
name|Comparable
argument_list|<
name|T
argument_list|>
parameter_list|>
name|void
name|doTest
parameter_list|(
name|T
index|[]
name|input
parameter_list|,
name|T
index|[]
name|expected
parameter_list|)
block|{
name|List
argument_list|<
name|T
argument_list|>
name|list
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|QuickSort
operator|.
name|sort
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|boolean
name|equal
init|=
name|Arrays
operator|.
name|equals
argument_list|(
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|Object
index|[
name|input
operator|.
name|length
index|]
argument_list|)
argument_list|,
name|expected
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|equal
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test for different cases.      */
specifier|public
name|void
name|testSort
parameter_list|()
block|{
block|{
name|Integer
index|[]
name|input
init|=
operator|new
name|Integer
index|[]
block|{
literal|9
block|,
literal|8
block|,
literal|7
block|,
literal|6
block|,
literal|5
block|,
literal|4
block|,
literal|3
block|,
literal|2
block|,
literal|1
block|}
decl_stmt|;
name|Integer
index|[]
name|expected
init|=
operator|new
name|Integer
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|8
block|,
literal|9
block|}
decl_stmt|;
name|doTest
argument_list|(
name|input
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
block|{
name|Integer
index|[]
name|input
init|=
operator|new
name|Integer
index|[]
block|{
literal|4
block|,
literal|3
block|,
literal|2
block|,
literal|1
block|,
literal|9
block|,
literal|8
block|,
literal|7
block|,
literal|6
block|,
literal|5
block|}
decl_stmt|;
name|Integer
index|[]
name|expected
init|=
operator|new
name|Integer
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|8
block|,
literal|9
block|}
decl_stmt|;
name|doTest
argument_list|(
name|input
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
block|{
name|Integer
index|[]
name|input
init|=
operator|new
name|Integer
index|[]
block|{}
decl_stmt|;
name|Integer
index|[]
name|expected
init|=
operator|new
name|Integer
index|[]
block|{}
decl_stmt|;
name|doTest
argument_list|(
name|input
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
block|{
name|Integer
index|[]
name|input
init|=
operator|new
name|Integer
index|[]
block|{
literal|5
block|}
decl_stmt|;
name|Integer
index|[]
name|expected
init|=
operator|new
name|Integer
index|[]
block|{
literal|5
block|}
decl_stmt|;
name|doTest
argument_list|(
name|input
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
block|{
name|Integer
index|[]
name|input
init|=
operator|new
name|Integer
index|[]
block|{
literal|5
block|,
literal|6
block|}
decl_stmt|;
name|Integer
index|[]
name|expected
init|=
operator|new
name|Integer
index|[]
block|{
literal|5
block|,
literal|6
block|}
decl_stmt|;
name|doTest
argument_list|(
name|input
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
block|{
name|Integer
index|[]
name|input
init|=
operator|new
name|Integer
index|[]
block|{
literal|6
block|,
literal|5
block|}
decl_stmt|;
name|Integer
index|[]
name|expected
init|=
operator|new
name|Integer
index|[]
block|{
literal|5
block|,
literal|6
block|}
decl_stmt|;
name|doTest
argument_list|(
name|input
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
name|Random
name|rnd
init|=
operator|new
name|Random
argument_list|(
literal|12345
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|cnt
init|=
literal|0
init|;
name|cnt
operator|<
literal|100
condition|;
operator|++
name|cnt
control|)
block|{
name|int
name|len
init|=
name|rnd
operator|.
name|nextInt
argument_list|(
literal|20000
argument_list|)
operator|+
literal|2
decl_stmt|;
name|Integer
index|[]
name|input
init|=
operator|new
name|Integer
index|[
name|len
index|]
decl_stmt|;
name|Integer
index|[]
name|expected
init|=
operator|new
name|Integer
index|[
name|len
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
comment|// choose values so that there are some duplicates
name|expected
index|[
name|i
index|]
operator|=
name|input
index|[
name|i
index|]
operator|=
name|rnd
operator|.
name|nextInt
argument_list|(
name|rnd
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|doTest
argument_list|(
name|input
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

