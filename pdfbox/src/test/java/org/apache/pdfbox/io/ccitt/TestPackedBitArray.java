begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/* $Id$ */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|io
operator|.
name|ccitt
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * This is a unit test for {@link PackedBitArray}.  * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|TestPackedBitArray
extends|extends
name|TestCase
block|{
comment|/**      * Tests the {@link PackedBitArray} class.      */
specifier|public
name|void
name|testPackedBitArray
parameter_list|()
block|{
name|PackedBitArray
name|bits
init|=
operator|new
name|PackedBitArray
argument_list|(
literal|19
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|19
argument_list|,
name|bits
operator|.
name|getBitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|bits
operator|.
name|getByteCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0000000000000000000"
argument_list|,
name|bits
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|bits
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0100000000000000000"
argument_list|,
name|bits
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|bits
operator|.
name|clear
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0000000000000000000"
argument_list|,
name|bits
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|bits
operator|.
name|setBits
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0000111100000000000"
argument_list|,
name|bits
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|bits
operator|.
name|setBits
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0010111100000000000"
argument_list|,
name|bits
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|bits
operator|.
name|setBits
argument_list|(
literal|9
argument_list|,
literal|9
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0010111101111111110"
argument_list|,
name|bits
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|bits
operator|.
name|clearBits
argument_list|(
literal|15
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0010111101111110010"
argument_list|,
name|bits
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|bits
operator|.
name|setBits
argument_list|(
literal|9
argument_list|,
literal|9
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0010111100000000000"
argument_list|,
name|bits
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|bits
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0000000000000000000"
argument_list|,
name|bits
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|bits
operator|.
name|setBits
argument_list|(
literal|1
argument_list|,
literal|18
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0111111111111111111"
argument_list|,
name|bits
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|bits
operator|.
name|clearBits
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0110111111111111111"
argument_list|,
name|bits
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|bits
operator|.
name|setBits
argument_list|(
literal|1
argument_list|,
literal|19
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expecting IndexOutOfBoundsException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|e
parameter_list|)
block|{
comment|//good
block|}
block|}
block|}
end_class

end_unit

