begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|Buffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * This is a unit test for {@link RandomAccessBuffer}.  *   */
end_comment

begin_class
specifier|public
class|class
name|TestRandomAccessBuffer
extends|extends
name|TestCase
block|{
specifier|private
specifier|static
specifier|final
name|int
name|CHUNK_SIZE
init|=
literal|1024
decl_stmt|;
comment|/**      * This test checks two corner cases where the last read ends      * exactly at the end of a chunck (remainingBytes == 0)      * @throws IOException      */
specifier|public
name|void
name|testRemainingByteZero
parameter_list|()
throws|throws
name|IOException
block|{
name|RandomAccessBuffer
name|buffer
init|=
operator|new
name|RandomAccessBuffer
argument_list|()
decl_stmt|;
name|byte
index|[]
name|byteArray
init|=
operator|new
name|byte
index|[
name|CHUNK_SIZE
operator|+
literal|2
index|]
decl_stmt|;
comment|// fill the second chunk with "1"
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|byteArray
index|[
name|CHUNK_SIZE
operator|+
name|i
index|]
operator|=
literal|1
expr_stmt|;
block|}
name|buffer
operator|.
name|write
argument_list|(
name|byteArray
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|seek
argument_list|(
name|CHUNK_SIZE
operator|-
literal|2
argument_list|)
expr_stmt|;
comment|// read the last bytes of the first chunk
name|buffer
operator|.
name|read
argument_list|(
name|byteArray
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// read the last 2 bytes of the buffer/the first bytes of the second chunk
name|buffer
operator|.
name|read
argument_list|(
name|byteArray
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// check the values read from the second chunk
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|byteArray
index|[
literal|0
index|]
operator|+
name|byteArray
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|close
argument_list|()
expr_stmt|;
name|buffer
operator|=
operator|new
name|RandomAccessBuffer
argument_list|()
expr_stmt|;
name|byteArray
operator|=
operator|new
name|byte
index|[
literal|2
operator|*
name|CHUNK_SIZE
operator|+
literal|2
index|]
expr_stmt|;
comment|// fill the second chunk with "1"
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CHUNK_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|byteArray
index|[
name|CHUNK_SIZE
operator|+
name|i
index|]
operator|=
literal|1
expr_stmt|;
block|}
comment|// fill the third chunk with "2"
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|byteArray
index|[
literal|2
operator|*
name|CHUNK_SIZE
operator|+
name|i
index|]
operator|=
literal|2
expr_stmt|;
block|}
name|buffer
operator|.
name|write
argument_list|(
name|byteArray
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|seek
argument_list|(
literal|700
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytesRead
init|=
operator|new
name|byte
index|[
literal|1348
index|]
decl_stmt|;
name|buffer
operator|.
name|read
argument_list|(
name|bytesRead
argument_list|,
literal|0
argument_list|,
name|bytesRead
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|buffer
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * Test the {@link RandomAccessBuffer#read()}       * and {@link RandomAccessBuffer#write(int)} method.      *       * @throws IOException is thrown if something went wrong.      */
specifier|public
name|void
name|testSimpleReadWrite
parameter_list|()
throws|throws
name|IOException
block|{
comment|// create a buffer filled with 10 figures from 0 to 9
name|RandomAccessBuffer
name|buffer
init|=
operator|new
name|RandomAccessBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|buffer
operator|.
name|write
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
comment|// jump back to the beginning of the buffer
name|buffer
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// sum up all figures, the result should be 45
name|int
name|result
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|+=
name|buffer
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|45
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * Test the {@link RandomAccessBuffer#read(byte[], int, int)}       * and {@link RandomAccessBuffer#write(byte[])} method.      *       * @throws IOException is thrown if something went wrong.      */
specifier|public
name|void
name|testSimpleArrayReadWrite
parameter_list|()
throws|throws
name|IOException
block|{
comment|// create an array filled with 10 figures from 0 to 9
name|byte
index|[]
name|byteArray
init|=
operator|new
name|byte
index|[
literal|10
index|]
decl_stmt|;
for|for
control|(
name|byte
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|byteArray
index|[
name|i
index|]
operator|=
name|i
expr_stmt|;
block|}
comment|// create an empty buffer and write the array to it
name|RandomAccessBuffer
name|buffer
init|=
operator|new
name|RandomAccessBuffer
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|write
argument_list|(
name|byteArray
argument_list|)
expr_stmt|;
comment|// jump back to the beginning of the buffer
name|buffer
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// read the buffer byte after byte and sum up all figures,
comment|// the result should be 45
name|int
name|result
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|+=
name|buffer
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|45
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|// jump back to the beginning of the buffer
name|buffer
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// read the buffer to an array and sum up all figures,
comment|// the result should be 45
name|buffer
operator|.
name|read
argument_list|(
name|byteArray
argument_list|,
literal|0
argument_list|,
name|byteArray
operator|.
name|length
argument_list|)
expr_stmt|;
name|result
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|+=
name|byteArray
index|[
name|i
index|]
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|45
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * Test the {@link RandomAccessBuffer#read(byte[], int, int)}       * and {@link RandomAccessBuffer#write(byte[])} method using      * a couple of data to create more than one chunk.      *       * @throws IOException is thrown if something went wrong.      */
specifier|public
name|void
name|testArrayReadWrite
parameter_list|()
throws|throws
name|IOException
block|{
comment|// create an array filled with 1024 * "0", 1024 * "1" and 100 * "2"
name|byte
index|[]
name|byteArray
init|=
operator|new
name|byte
index|[
literal|2
operator|*
name|CHUNK_SIZE
operator|+
literal|100
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|CHUNK_SIZE
init|;
name|i
operator|<
literal|2
operator|*
name|CHUNK_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|byteArray
index|[
name|i
index|]
operator|=
literal|1
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|2
operator|*
name|CHUNK_SIZE
init|;
name|i
operator|<
literal|2
operator|*
name|CHUNK_SIZE
operator|+
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|byteArray
index|[
name|i
index|]
operator|=
literal|2
expr_stmt|;
block|}
comment|// write the array to a buffer
name|RandomAccessBuffer
name|buffer
init|=
operator|new
name|RandomAccessBuffer
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|write
argument_list|(
name|byteArray
argument_list|)
expr_stmt|;
comment|// jump to the beginning
name|buffer
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// the first byte should be "0"
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|buffer
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
comment|// jump to the last byte of the first chunk, it should be "0"
name|buffer
operator|.
name|seek
argument_list|(
name|CHUNK_SIZE
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|buffer
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
comment|// jump to the first byte of the second chunk, it should be "1"
name|buffer
operator|.
name|seek
argument_list|(
name|CHUNK_SIZE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|buffer
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
comment|// jump to the end-5 of the first chunk
name|buffer
operator|.
name|seek
argument_list|(
name|CHUNK_SIZE
operator|-
literal|5
argument_list|)
expr_stmt|;
comment|// read the last 5 bytes from the first and the first 5 bytes
comment|// from the second chunk and sum them up. The result should be "5"
name|byteArray
operator|=
operator|new
name|byte
index|[
literal|10
index|]
expr_stmt|;
name|buffer
operator|.
name|read
argument_list|(
name|byteArray
argument_list|,
literal|0
argument_list|,
name|byteArray
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|result
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|+=
name|byteArray
index|[
name|i
index|]
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|// jump to the end-5 of the second chunk
name|buffer
operator|.
name|seek
argument_list|(
literal|2
operator|*
name|CHUNK_SIZE
operator|-
literal|5
argument_list|)
expr_stmt|;
comment|// read the last 5 bytes from the second and the first 5 bytes
comment|// from the third chunk and sum them up. The result should be "15"
name|byteArray
operator|=
operator|new
name|byte
index|[
literal|10
index|]
expr_stmt|;
name|buffer
operator|.
name|read
argument_list|(
name|byteArray
argument_list|)
expr_stmt|;
name|result
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|+=
name|byteArray
index|[
name|i
index|]
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * Test if overwriting works.      *       * @throws IOException is thrown if something went wrong.      */
specifier|public
name|void
name|testOverwrite
parameter_list|()
throws|throws
name|IOException
block|{
comment|// create a buffer filled with 1024 * "0" and 100 * "1"
name|byte
index|[]
name|byteArray
init|=
operator|new
name|byte
index|[
name|CHUNK_SIZE
operator|+
literal|100
index|]
decl_stmt|;
name|RandomAccessBuffer
name|buffer
init|=
operator|new
name|RandomAccessBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|CHUNK_SIZE
init|;
name|i
operator|<
name|CHUNK_SIZE
operator|+
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|byteArray
index|[
name|i
index|]
operator|=
literal|1
expr_stmt|;
block|}
name|buffer
operator|.
name|write
argument_list|(
name|byteArray
argument_list|)
expr_stmt|;
comment|// jump to the end-5 of the first chunk
name|buffer
operator|.
name|seek
argument_list|(
name|CHUNK_SIZE
operator|-
literal|5
argument_list|)
expr_stmt|;
comment|// read the last 5 bytes from the first and the first 5 bytes
comment|// from the second chunk and sum them up. The result should be "5"
name|byteArray
operator|=
operator|new
name|byte
index|[
literal|10
index|]
expr_stmt|;
name|buffer
operator|.
name|read
argument_list|(
name|byteArray
argument_list|,
literal|0
argument_list|,
name|byteArray
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|result
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|+=
name|byteArray
index|[
name|i
index|]
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|// jump to the end-5 of the first chunk
name|buffer
operator|.
name|seek
argument_list|(
name|CHUNK_SIZE
operator|-
literal|5
argument_list|)
expr_stmt|;
comment|// write 5 "2" and 5 "3" to the buffer
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|buffer
operator|.
name|write
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|buffer
operator|.
name|write
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
comment|// jump to the end-5 of the first chunk
name|buffer
operator|.
name|seek
argument_list|(
name|CHUNK_SIZE
operator|-
literal|5
argument_list|)
expr_stmt|;
comment|// read the last 5 bytes from the first and the first 5 bytes
comment|// from the second chunk and sum them up. The result should be "25"
name|byteArray
operator|=
operator|new
name|byte
index|[
literal|10
index|]
expr_stmt|;
name|buffer
operator|.
name|read
argument_list|(
name|byteArray
argument_list|,
literal|0
argument_list|,
name|byteArray
operator|.
name|length
argument_list|)
expr_stmt|;
name|result
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|+=
name|byteArray
index|[
name|i
index|]
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|25
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * Test if seeking beyond EOF works.      *       * @throws IOException is thrown if something went wrong.      */
specifier|public
name|void
name|testSeekBeyondEOF
parameter_list|()
throws|throws
name|IOException
block|{
comment|// create a buffer filled with 10 figures from 0 to 9
name|RandomAccessBuffer
name|buffer
init|=
operator|new
name|RandomAccessBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|buffer
operator|.
name|write
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
comment|// jump back to the beginning of the buffer
name|buffer
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// jump beyond EOF
name|buffer
operator|.
name|seek
argument_list|(
literal|20
argument_list|)
expr_stmt|;
comment|// try to read
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|buffer
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
comment|// check EOF
name|assertTrue
argument_list|(
name|buffer
operator|.
name|isEOF
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testPDFBOX1490
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create a buffer filled with 1024 * "0"
name|byte
index|[]
name|byteArray
init|=
operator|new
name|byte
index|[
name|CHUNK_SIZE
operator|-
literal|1
index|]
decl_stmt|;
name|RandomAccessBuffer
name|buffer
init|=
operator|new
name|RandomAccessBuffer
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|write
argument_list|(
name|byteArray
argument_list|)
expr_stmt|;
comment|// fill the first buffer until the end
name|buffer
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// seek the current == last position in the first buffer chunk
name|buffer
operator|.
name|seek
argument_list|(
name|buffer
operator|.
name|getPosition
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testPDFBOX2969
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create buffer with non-default chunk size
comment|// by providing an array with unusual size
comment|// (larger than RandomAccessBuffer.DEFAULT_CHUNK_SIZE)
name|int
name|chunkSize
init|=
operator|(
name|CHUNK_SIZE
operator|<<
literal|4
operator|)
operator|+
literal|3
decl_stmt|;
name|byte
index|[]
name|byteArray
init|=
operator|new
name|byte
index|[
name|chunkSize
index|]
decl_stmt|;
name|RandomAccessBuffer
name|buffer
init|=
operator|new
name|RandomAccessBuffer
argument_list|(
name|byteArray
argument_list|)
decl_stmt|;
comment|// fill completely
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|chunkSize
condition|;
name|i
operator|++
control|)
block|{
name|buffer
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// create clone
name|RandomAccessBuffer
name|bufferClone
init|=
name|buffer
operator|.
name|clone
argument_list|()
decl_stmt|;
comment|// read all from both
name|buffer
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|int
name|bufRead
init|=
name|buffer
operator|.
name|read
argument_list|(
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|buffer
operator|.
name|length
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|bufferClone
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|int
name|bufCloneRead
init|=
name|bufferClone
operator|.
name|read
argument_list|(
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|bufferClone
operator|.
name|length
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|bufRead
argument_list|,
name|bufCloneRead
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|close
argument_list|()
expr_stmt|;
name|bufferClone
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

