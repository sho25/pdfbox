begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|filter
operator|.
name|FilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_class
specifier|public
class|class
name|TestCOSStream
extends|extends
name|TestCase
block|{
comment|/**      * Tests encoding of a stream without any filter applied.      *      * @throws IOException      */
specifier|public
name|void
name|testUncompressedStreamEncode
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|testString
init|=
literal|"This is a test string to be used as input for TestCOSStream"
operator|.
name|getBytes
argument_list|(
literal|"ASCII"
argument_list|)
decl_stmt|;
name|COSStream
name|stream
init|=
name|createStream
argument_list|(
name|testString
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|validateEncoded
argument_list|(
name|stream
argument_list|,
name|testString
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests decoding of a stream without any filter applied.      *      * @throws IOException      */
specifier|public
name|void
name|testUncompressedStreamDecode
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|testString
init|=
literal|"This is a test string to be used as input for TestCOSStream"
operator|.
name|getBytes
argument_list|(
literal|"ASCII"
argument_list|)
decl_stmt|;
name|COSStream
name|stream
init|=
name|createStream
argument_list|(
name|testString
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|validateDecoded
argument_list|(
name|stream
argument_list|,
name|testString
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests encoding of a stream with one filter applied.      *      * @throws IOException      */
specifier|public
name|void
name|testCompressedStream1Encode
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|testString
init|=
literal|"This is a test string to be used as input for TestCOSStream"
operator|.
name|getBytes
argument_list|(
literal|"ASCII"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|testStringEncoded
init|=
name|encodeData
argument_list|(
name|testString
argument_list|,
name|COSName
operator|.
name|FLATE_DECODE
argument_list|)
decl_stmt|;
name|COSStream
name|stream
init|=
name|createStream
argument_list|(
name|testString
argument_list|,
name|COSName
operator|.
name|FLATE_DECODE
argument_list|)
decl_stmt|;
name|validateEncoded
argument_list|(
name|stream
argument_list|,
name|testStringEncoded
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests decoding of a stream with one filter applied.      *      * @throws IOException      */
specifier|public
name|void
name|testCompressedStream1Decode
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|testString
init|=
literal|"This is a test string to be used as input for TestCOSStream"
operator|.
name|getBytes
argument_list|(
literal|"ASCII"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|testStringEncoded
init|=
name|encodeData
argument_list|(
name|testString
argument_list|,
name|COSName
operator|.
name|FLATE_DECODE
argument_list|)
decl_stmt|;
name|COSStream
name|stream
init|=
operator|new
name|COSStream
argument_list|()
decl_stmt|;
try|try
init|(
name|OutputStream
name|output
init|=
name|stream
operator|.
name|createRawOutputStream
argument_list|()
init|)
block|{
name|output
operator|.
name|write
argument_list|(
name|testStringEncoded
argument_list|)
expr_stmt|;
block|}
name|stream
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|FILTER
argument_list|,
name|COSName
operator|.
name|FLATE_DECODE
argument_list|)
expr_stmt|;
name|validateDecoded
argument_list|(
name|stream
argument_list|,
name|testString
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests encoding of a stream with 2 filters applied.      *      * @throws IOException      */
specifier|public
name|void
name|testCompressedStream2Encode
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|testString
init|=
literal|"This is a test string to be used as input for TestCOSStream"
operator|.
name|getBytes
argument_list|(
literal|"ASCII"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|testStringEncoded
init|=
name|encodeData
argument_list|(
name|testString
argument_list|,
name|COSName
operator|.
name|FLATE_DECODE
argument_list|)
decl_stmt|;
name|testStringEncoded
operator|=
name|encodeData
argument_list|(
name|testStringEncoded
argument_list|,
name|COSName
operator|.
name|ASCII85_DECODE
argument_list|)
expr_stmt|;
name|COSArray
name|filters
init|=
operator|new
name|COSArray
argument_list|()
decl_stmt|;
name|filters
operator|.
name|add
argument_list|(
name|COSName
operator|.
name|ASCII85_DECODE
argument_list|)
expr_stmt|;
name|filters
operator|.
name|add
argument_list|(
name|COSName
operator|.
name|FLATE_DECODE
argument_list|)
expr_stmt|;
name|COSStream
name|stream
init|=
name|createStream
argument_list|(
name|testString
argument_list|,
name|filters
argument_list|)
decl_stmt|;
name|validateEncoded
argument_list|(
name|stream
argument_list|,
name|testStringEncoded
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests decoding of a stream with 2 filters applied.      *      * @throws IOException      */
specifier|public
name|void
name|testCompressedStream2Decode
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|testString
init|=
literal|"This is a test string to be used as input for TestCOSStream"
operator|.
name|getBytes
argument_list|(
literal|"ASCII"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|testStringEncoded
init|=
name|encodeData
argument_list|(
name|testString
argument_list|,
name|COSName
operator|.
name|FLATE_DECODE
argument_list|)
decl_stmt|;
name|testStringEncoded
operator|=
name|encodeData
argument_list|(
name|testStringEncoded
argument_list|,
name|COSName
operator|.
name|ASCII85_DECODE
argument_list|)
expr_stmt|;
name|COSStream
name|stream
init|=
operator|new
name|COSStream
argument_list|()
decl_stmt|;
name|COSArray
name|filters
init|=
operator|new
name|COSArray
argument_list|()
decl_stmt|;
name|filters
operator|.
name|add
argument_list|(
name|COSName
operator|.
name|ASCII85_DECODE
argument_list|)
expr_stmt|;
name|filters
operator|.
name|add
argument_list|(
name|COSName
operator|.
name|FLATE_DECODE
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|FILTER
argument_list|,
name|filters
argument_list|)
expr_stmt|;
try|try
init|(
name|OutputStream
name|output
init|=
name|stream
operator|.
name|createRawOutputStream
argument_list|()
init|)
block|{
name|output
operator|.
name|write
argument_list|(
name|testStringEncoded
argument_list|)
expr_stmt|;
block|}
name|validateDecoded
argument_list|(
name|stream
argument_list|,
name|testString
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests tests that encoding is done correctly even if the the stream is closed twice.      * Closeable.close() allows streams to be closed multiple times. The second and subsequent      * close() calls should have no effect.      *      * @throws IOException      */
specifier|public
name|void
name|testCompressedStreamDoubleClose
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|testString
init|=
literal|"This is a test string to be used as input for TestCOSStream"
operator|.
name|getBytes
argument_list|(
literal|"ASCII"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|testStringEncoded
init|=
name|encodeData
argument_list|(
name|testString
argument_list|,
name|COSName
operator|.
name|FLATE_DECODE
argument_list|)
decl_stmt|;
name|COSStream
name|stream
init|=
operator|new
name|COSStream
argument_list|()
decl_stmt|;
name|OutputStream
name|output
init|=
name|stream
operator|.
name|createOutputStream
argument_list|(
name|COSName
operator|.
name|FLATE_DECODE
argument_list|)
decl_stmt|;
name|output
operator|.
name|write
argument_list|(
name|testString
argument_list|)
expr_stmt|;
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
name|validateEncoded
argument_list|(
name|stream
argument_list|,
name|testStringEncoded
argument_list|)
expr_stmt|;
block|}
specifier|private
name|byte
index|[]
name|encodeData
parameter_list|(
name|byte
index|[]
name|original
parameter_list|,
name|COSName
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
name|Filter
name|encodingFilter
init|=
name|FilterFactory
operator|.
name|INSTANCE
operator|.
name|getFilter
argument_list|(
name|filter
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|encoded
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|encodingFilter
operator|.
name|encode
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|original
argument_list|)
argument_list|,
name|encoded
argument_list|,
operator|new
name|COSDictionary
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|encoded
operator|.
name|toByteArray
argument_list|()
return|;
block|}
specifier|private
name|COSStream
name|createStream
parameter_list|(
name|byte
index|[]
name|testString
parameter_list|,
name|COSBase
name|filters
parameter_list|)
throws|throws
name|IOException
block|{
name|COSStream
name|stream
init|=
operator|new
name|COSStream
argument_list|()
decl_stmt|;
try|try
init|(
name|OutputStream
name|output
init|=
name|stream
operator|.
name|createOutputStream
argument_list|(
name|filters
argument_list|)
init|)
block|{
name|output
operator|.
name|write
argument_list|(
name|testString
argument_list|)
expr_stmt|;
block|}
return|return
name|stream
return|;
block|}
specifier|private
name|void
name|validateEncoded
parameter_list|(
name|COSStream
name|stream
parameter_list|,
name|byte
index|[]
name|expected
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|decoded
init|=
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|stream
operator|.
name|createRawInputStream
argument_list|()
argument_list|)
decl_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Encoded data doesn't match input"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|expected
argument_list|,
name|decoded
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|validateDecoded
parameter_list|(
name|COSStream
name|stream
parameter_list|,
name|byte
index|[]
name|expected
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|encoded
init|=
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|stream
operator|.
name|createInputStream
argument_list|()
argument_list|)
decl_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Decoded data doesn't match input"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|expected
argument_list|,
name|encoded
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

