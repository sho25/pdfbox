begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2014 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdfparser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocumentCatalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocumentNameDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDEmbeddedFilesNameTreeNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|filespecification
operator|.
name|PDComplexFileSpecification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|filespecification
operator|.
name|PDEmbeddedFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  *  * @author Tilman Hausherr  */
end_comment

begin_class
specifier|public
class|class
name|EndstreamOutputStreamTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testEndstreamOutputStream
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|EndstreamOutputStream
name|feos
init|=
operator|new
name|EndstreamOutputStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|byte
index|[]
name|tab1
init|=
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|}
decl_stmt|;
name|byte
index|[]
name|tab2
init|=
block|{
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|'\r'
block|,
literal|'\n'
block|}
decl_stmt|;
name|byte
index|[]
name|tab3
init|=
block|{
literal|8
block|,
literal|9
block|,
literal|'\r'
block|,
literal|'\n'
block|}
decl_stmt|;
name|feos
operator|.
name|write
argument_list|(
name|tab1
argument_list|,
literal|0
argument_list|,
name|tab1
operator|.
name|length
argument_list|)
expr_stmt|;
name|feos
operator|.
name|write
argument_list|(
name|tab2
argument_list|,
literal|0
argument_list|,
name|tab2
operator|.
name|length
argument_list|)
expr_stmt|;
name|feos
operator|.
name|write
argument_list|(
name|tab3
argument_list|,
literal|0
argument_list|,
name|tab3
operator|.
name|length
argument_list|)
expr_stmt|;
name|feos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|byte
index|[]
name|expectedResult1
init|=
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|'\r'
block|,
literal|'\n'
block|,
literal|8
block|,
literal|9
block|}
decl_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|expectedResult1
argument_list|,
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|baos
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|feos
operator|=
operator|new
name|EndstreamOutputStream
argument_list|(
name|baos
argument_list|)
expr_stmt|;
name|byte
index|[]
name|tab4
init|=
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|}
decl_stmt|;
name|byte
index|[]
name|tab5
init|=
block|{
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|'\r'
block|}
decl_stmt|;
name|byte
index|[]
name|tab6
init|=
block|{
literal|8
block|,
literal|9
block|,
literal|'\n'
block|}
decl_stmt|;
name|feos
operator|.
name|write
argument_list|(
name|tab4
argument_list|,
literal|0
argument_list|,
name|tab4
operator|.
name|length
argument_list|)
expr_stmt|;
name|feos
operator|.
name|write
argument_list|(
name|tab5
argument_list|,
literal|0
argument_list|,
name|tab5
operator|.
name|length
argument_list|)
expr_stmt|;
name|feos
operator|.
name|write
argument_list|(
name|tab6
argument_list|,
literal|0
argument_list|,
name|tab6
operator|.
name|length
argument_list|)
expr_stmt|;
name|feos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|byte
index|[]
name|expectedResult2
init|=
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|'\r'
block|,
literal|8
block|,
literal|9
block|}
decl_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|expectedResult2
argument_list|,
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|baos
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|feos
operator|=
operator|new
name|EndstreamOutputStream
argument_list|(
name|baos
argument_list|)
expr_stmt|;
name|byte
index|[]
name|tab7
init|=
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|'\r'
block|}
decl_stmt|;
name|byte
index|[]
name|tab8
init|=
block|{
literal|'\n'
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|'\n'
block|}
decl_stmt|;
name|byte
index|[]
name|tab9
init|=
block|{
literal|8
block|,
literal|9
block|,
literal|'\r'
block|}
decl_stmt|;
comment|// final CR is not to be discarded
name|feos
operator|.
name|write
argument_list|(
name|tab7
argument_list|,
literal|0
argument_list|,
name|tab7
operator|.
name|length
argument_list|)
expr_stmt|;
name|feos
operator|.
name|write
argument_list|(
name|tab8
argument_list|,
literal|0
argument_list|,
name|tab8
operator|.
name|length
argument_list|)
expr_stmt|;
name|feos
operator|.
name|write
argument_list|(
name|tab9
argument_list|,
literal|0
argument_list|,
name|tab9
operator|.
name|length
argument_list|)
expr_stmt|;
name|feos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|byte
index|[]
name|expectedResult3
init|=
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|'\r'
block|,
literal|'\n'
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|'\n'
block|,
literal|8
block|,
literal|9
block|,
literal|'\r'
block|}
decl_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|expectedResult3
argument_list|,
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|baos
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|feos
operator|=
operator|new
name|EndstreamOutputStream
argument_list|(
name|baos
argument_list|)
expr_stmt|;
name|byte
index|[]
name|tab10
init|=
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|'\r'
block|}
decl_stmt|;
name|byte
index|[]
name|tab11
init|=
block|{
literal|'\n'
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|'\r'
block|}
decl_stmt|;
name|byte
index|[]
name|tab12
init|=
block|{
literal|8
block|,
literal|9
block|,
literal|'\r'
block|}
decl_stmt|;
name|byte
index|[]
name|tab13
init|=
block|{
literal|'\n'
block|}
decl_stmt|;
comment|// final CR LF across buffers
name|feos
operator|.
name|write
argument_list|(
name|tab10
argument_list|,
literal|0
argument_list|,
name|tab10
operator|.
name|length
argument_list|)
expr_stmt|;
name|feos
operator|.
name|write
argument_list|(
name|tab11
argument_list|,
literal|0
argument_list|,
name|tab11
operator|.
name|length
argument_list|)
expr_stmt|;
name|feos
operator|.
name|write
argument_list|(
name|tab12
argument_list|,
literal|0
argument_list|,
name|tab12
operator|.
name|length
argument_list|)
expr_stmt|;
name|feos
operator|.
name|write
argument_list|(
name|tab13
argument_list|,
literal|0
argument_list|,
name|tab13
operator|.
name|length
argument_list|)
expr_stmt|;
name|feos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|byte
index|[]
name|expectedResult4
init|=
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|'\r'
block|,
literal|'\n'
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|'\r'
block|,
literal|8
block|,
literal|9
block|}
decl_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|expectedResult4
argument_list|,
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|baos
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|feos
operator|=
operator|new
name|EndstreamOutputStream
argument_list|(
name|baos
argument_list|)
expr_stmt|;
name|byte
index|[]
name|tab14
init|=
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|'\r'
block|}
decl_stmt|;
name|byte
index|[]
name|tab15
init|=
block|{
literal|'\n'
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|'\r'
block|}
decl_stmt|;
name|byte
index|[]
name|tab16
init|=
block|{
literal|8
block|,
literal|9
block|,
literal|'\n'
block|}
decl_stmt|;
name|byte
index|[]
name|tab17
init|=
block|{
literal|'\r'
block|}
decl_stmt|;
comment|// final CR is not to be discarded
name|feos
operator|.
name|write
argument_list|(
name|tab14
argument_list|,
literal|0
argument_list|,
name|tab14
operator|.
name|length
argument_list|)
expr_stmt|;
name|feos
operator|.
name|write
argument_list|(
name|tab15
argument_list|,
literal|0
argument_list|,
name|tab15
operator|.
name|length
argument_list|)
expr_stmt|;
name|feos
operator|.
name|write
argument_list|(
name|tab16
argument_list|,
literal|0
argument_list|,
name|tab16
operator|.
name|length
argument_list|)
expr_stmt|;
name|feos
operator|.
name|write
argument_list|(
name|tab17
argument_list|,
literal|0
argument_list|,
name|tab17
operator|.
name|length
argument_list|)
expr_stmt|;
name|feos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|byte
index|[]
name|expectedResult5
init|=
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|'\r'
block|,
literal|'\n'
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|'\r'
block|,
literal|8
block|,
literal|9
block|,
literal|'\n'
block|,
literal|'\r'
block|}
decl_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|expectedResult5
argument_list|,
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPDFBox2079EmbeddedFile
parameter_list|()
throws|throws
name|IOException
block|{
comment|// there should be 17660 bytes in the zip file.
comment|// in PDFBox 1.8.5, windows newline is appended to the byte stream
comment|// yielding 17662 bytes, which causes a problem for ZipFile in Java 1.6
comment|// Modification of embedded_zip.pdf for 2.0:
comment|// /Length entry removed to force usage of EndstreamOutputStream
try|try
init|(
name|PDDocument
name|doc
init|=
name|PDFParser
operator|.
name|load
argument_list|(
operator|new
name|File
argument_list|(
literal|"src/test/resources/org/apache/pdfbox/pdfparser"
argument_list|,
literal|"embedded_zip.pdf"
argument_list|)
argument_list|)
init|)
block|{
name|PDDocumentCatalog
name|catalog
init|=
name|doc
operator|.
name|getDocumentCatalog
argument_list|()
decl_stmt|;
name|PDDocumentNameDictionary
name|names
init|=
name|catalog
operator|.
name|getNames
argument_list|()
decl_stmt|;
name|PDEmbeddedFilesNameTreeNode
name|node
init|=
name|names
operator|.
name|getEmbeddedFiles
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PDComplexFileSpecification
argument_list|>
name|map
init|=
name|node
operator|.
name|getNames
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|PDComplexFileSpecification
name|spec
init|=
name|map
operator|.
name|get
argument_list|(
literal|"My first attachment"
argument_list|)
decl_stmt|;
name|PDEmbeddedFile
name|file
init|=
name|spec
operator|.
name|getEmbeddedFile
argument_list|()
decl_stmt|;
name|InputStream
name|input
init|=
name|file
operator|.
name|createInputStream
argument_list|()
decl_stmt|;
name|File
name|d
init|=
operator|new
name|File
argument_list|(
literal|"target/test-output"
argument_list|)
decl_stmt|;
name|d
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|d
argument_list|,
name|spec
operator|.
name|getFile
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|OutputStream
name|os
init|=
operator|new
name|FileOutputStream
argument_list|(
name|f
argument_list|)
init|)
block|{
name|IOUtils
operator|.
name|copy
argument_list|(
name|input
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|17660
argument_list|,
name|f
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

