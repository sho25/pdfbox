begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2014 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdfparser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|contentstream
operator|.
name|operator
operator|.
name|Operator
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_comment
comment|/**  * Tests for PDFStreamParser.  *  * @author Tilman Hausherr  */
end_comment

begin_class
specifier|public
class|class
name|PDFStreamParserTest
extends|extends
name|TestCase
block|{
comment|/**      * Tests for inline images, whether the EI is correctly identified as      * ending. To test hasNoFollowingBinData(), the amount of data after EI nust      * be at least PDFStreamParser.MAX_BIN_CHAR_TEST_LENGTH      *      * @throws IOException      */
specifier|public
name|void
name|testInlineImages
parameter_list|()
throws|throws
name|IOException
block|{
name|testInlineImage2ops
argument_list|(
literal|"ID\n12345EI Q"
argument_list|,
literal|"12345"
argument_list|,
literal|"Q"
argument_list|)
expr_stmt|;
name|testInlineImage2ops
argument_list|(
literal|"ID\n12345EI EMC"
argument_list|,
literal|"12345"
argument_list|,
literal|"EMC"
argument_list|)
expr_stmt|;
name|testInlineImage2ops
argument_list|(
literal|"ID\n12345EI Q "
argument_list|,
literal|"12345"
argument_list|,
literal|"Q"
argument_list|)
expr_stmt|;
name|testInlineImage2ops
argument_list|(
literal|"ID\n12345EI EMC "
argument_list|,
literal|"12345"
argument_list|,
literal|"EMC"
argument_list|)
expr_stmt|;
name|testInlineImage2ops
argument_list|(
literal|"ID\n12345EI  Q"
argument_list|,
literal|"12345"
argument_list|,
literal|"Q"
argument_list|)
expr_stmt|;
name|testInlineImage2ops
argument_list|(
literal|"ID\n12345EI  EMC"
argument_list|,
literal|"12345"
argument_list|,
literal|"EMC"
argument_list|)
expr_stmt|;
name|testInlineImage2ops
argument_list|(
literal|"ID\n12345EI  Q "
argument_list|,
literal|"12345"
argument_list|,
literal|"Q"
argument_list|)
expr_stmt|;
name|testInlineImage2ops
argument_list|(
literal|"ID\n12345EI  EMC "
argument_list|,
literal|"12345"
argument_list|,
literal|"EMC"
argument_list|)
expr_stmt|;
name|testInlineImage2ops
argument_list|(
literal|"ID\n12345EI \000Q"
argument_list|,
literal|"12345"
argument_list|,
literal|"Q"
argument_list|)
expr_stmt|;
name|testInlineImage2ops
argument_list|(
literal|"ID\n12345EI Q                             "
argument_list|,
literal|"12345"
argument_list|,
literal|"Q"
argument_list|)
expr_stmt|;
name|testInlineImage2ops
argument_list|(
literal|"ID\n12345EI EMC                           "
argument_list|,
literal|"12345"
argument_list|,
literal|"EMC"
argument_list|)
expr_stmt|;
name|testInlineImage1op
argument_list|(
literal|"ID\n12345EI"
argument_list|,
literal|"12345"
argument_list|)
expr_stmt|;
name|testInlineImage1op
argument_list|(
literal|"ID\n12345EI                               "
argument_list|,
literal|"12345"
argument_list|)
expr_stmt|;
name|testInlineImage2ops
argument_list|(
literal|"ID\n12345EI                               Q "
argument_list|,
literal|"12345"
argument_list|,
literal|"Q"
argument_list|)
expr_stmt|;
name|testInlineImage2ops
argument_list|(
literal|"ID\n12345EI                               EMC "
argument_list|,
literal|"12345"
argument_list|,
literal|"EMC"
argument_list|)
expr_stmt|;
name|testInlineImage2ops
argument_list|(
literal|"ID\n12345EI                               Q"
argument_list|,
literal|"12345"
argument_list|,
literal|"Q"
argument_list|)
expr_stmt|;
name|testInlineImage2ops
argument_list|(
literal|"ID\n12345EI                               EMC"
argument_list|,
literal|"12345"
argument_list|,
literal|"EMC"
argument_list|)
expr_stmt|;
name|testInlineImage1op
argument_list|(
literal|"ID\n12EI5EI"
argument_list|,
literal|"12EI5"
argument_list|)
expr_stmt|;
name|testInlineImage1op
argument_list|(
literal|"ID\n12EI5EI "
argument_list|,
literal|"12EI5"
argument_list|)
expr_stmt|;
name|testInlineImage1op
argument_list|(
literal|"ID\n12EI5EIQEI"
argument_list|,
literal|"12EI5EIQ"
argument_list|)
expr_stmt|;
name|testInlineImage2ops
argument_list|(
literal|"ID\n12EI5EIQEI Q"
argument_list|,
literal|"12EI5EIQ"
argument_list|,
literal|"Q"
argument_list|)
expr_stmt|;
name|testInlineImage2ops
argument_list|(
literal|"ID\n12EI5EI Q"
argument_list|,
literal|"12EI5"
argument_list|,
literal|"Q"
argument_list|)
expr_stmt|;
name|testInlineImage2ops
argument_list|(
literal|"ID\n12EI5EI Q "
argument_list|,
literal|"12EI5"
argument_list|,
literal|"Q"
argument_list|)
expr_stmt|;
name|testInlineImage2ops
argument_list|(
literal|"ID\n12EI5EI EMC"
argument_list|,
literal|"12EI5"
argument_list|,
literal|"EMC"
argument_list|)
expr_stmt|;
name|testInlineImage2ops
argument_list|(
literal|"ID\n12EI5EI EMC "
argument_list|,
literal|"12EI5"
argument_list|,
literal|"EMC"
argument_list|)
expr_stmt|;
name|testInlineImage2ops
argument_list|(
literal|"ID\n12EI5EI                                Q"
argument_list|,
literal|"12EI5"
argument_list|,
literal|"Q"
argument_list|)
expr_stmt|;
name|testInlineImage2ops
argument_list|(
literal|"ID\n12EI5EI                                Q "
argument_list|,
literal|"12EI5"
argument_list|,
literal|"Q"
argument_list|)
expr_stmt|;
name|testInlineImage2ops
argument_list|(
literal|"ID\n12EI5EI                                EMC"
argument_list|,
literal|"12EI5"
argument_list|,
literal|"EMC"
argument_list|)
expr_stmt|;
name|testInlineImage2ops
argument_list|(
literal|"ID\n12EI5EI                                EMC "
argument_list|,
literal|"12EI5"
argument_list|,
literal|"EMC"
argument_list|)
expr_stmt|;
comment|// MAX_BIN_CHAR_TEST_LENGTH is currently 10, test boundaries
comment|//                              1234567890
name|testInlineImage2ops
argument_list|(
literal|"ID\n12EI5EI       EMC "
argument_list|,
literal|"12EI5"
argument_list|,
literal|"EMC"
argument_list|)
expr_stmt|;
name|testInlineImage2ops
argument_list|(
literal|"ID\n12EI5EI        EMC "
argument_list|,
literal|"12EI5"
argument_list|,
literal|"EMC"
argument_list|)
expr_stmt|;
name|testInlineImage2ops
argument_list|(
literal|"ID\n12EI5EI         EMC "
argument_list|,
literal|"12EI5"
argument_list|,
literal|"EMC"
argument_list|)
expr_stmt|;
name|testInlineImage2ops
argument_list|(
literal|"ID\n12EI5EI          EMC "
argument_list|,
literal|"12EI5"
argument_list|,
literal|"EMC"
argument_list|)
expr_stmt|;
name|testInlineImage2ops
argument_list|(
literal|"ID\n12EI5EI       Q   "
argument_list|,
literal|"12EI5"
argument_list|,
literal|"Q"
argument_list|)
expr_stmt|;
name|testInlineImage2ops
argument_list|(
literal|"ID\n12EI5EI        Q   "
argument_list|,
literal|"12EI5"
argument_list|,
literal|"Q"
argument_list|)
expr_stmt|;
name|testInlineImage2ops
argument_list|(
literal|"ID\n12EI5EI         Q   "
argument_list|,
literal|"12EI5"
argument_list|,
literal|"Q"
argument_list|)
expr_stmt|;
name|testInlineImage2ops
argument_list|(
literal|"ID\n12EI5EI          Q   "
argument_list|,
literal|"12EI5"
argument_list|,
literal|"Q"
argument_list|)
expr_stmt|;
block|}
comment|// checks whether there are two operators, one inline image and the named operator
specifier|private
name|void
name|testInlineImage2ops
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|imageDataString
parameter_list|,
name|String
name|opName
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|tokens
init|=
name|parseTokenString
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|tokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ID"
argument_list|,
operator|(
operator|(
name|Operator
operator|)
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|imageDataString
operator|.
name|length
argument_list|()
argument_list|,
operator|(
operator|(
name|Operator
operator|)
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getImageData
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|imageDataString
operator|.
name|getBytes
argument_list|()
argument_list|,
operator|(
operator|(
name|Operator
operator|)
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getImageData
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|opName
argument_list|,
operator|(
operator|(
name|Operator
operator|)
name|tokens
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// checks whether there is one operator, one inline image
specifier|private
name|void
name|testInlineImage1op
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|imageDataString
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|tokens
init|=
name|parseTokenString
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ID"
argument_list|,
operator|(
operator|(
name|Operator
operator|)
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|imageDataString
operator|.
name|length
argument_list|()
argument_list|,
operator|(
operator|(
name|Operator
operator|)
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getImageData
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|imageDataString
operator|.
name|getBytes
argument_list|()
argument_list|,
operator|(
operator|(
name|Operator
operator|)
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getImageData
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// parse string and return list of tokens
specifier|private
name|List
argument_list|<
name|Object
argument_list|>
name|parseTokenString
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|IOException
block|{
name|PDFStreamParser
name|pdfStreamParser
init|=
operator|new
name|PDFStreamParser
argument_list|(
name|s
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|pdfStreamParser
operator|.
name|parse
argument_list|()
expr_stmt|;
return|return
name|pdfStreamParser
operator|.
name|getTokens
argument_list|()
return|;
block|}
block|}
end_class

end_unit

