begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/* $Id$ */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|filter
operator|.
name|ccitt
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Abstract base class for testing CCITT fax encoding.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractCCITTFaxTestCase
extends|extends
name|TestCase
block|{
comment|/**      * Visualizes a packed bitmap and dumps it on System.out.      * @param data the bitmap      * @param columns the number of columns      */
specifier|protected
name|void
name|dumpBitmap
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|columns
parameter_list|)
block|{
name|int
name|lineBytes
init|=
name|columns
operator|/
literal|8
decl_stmt|;
if|if
condition|(
name|columns
operator|%
literal|8
operator|!=
literal|0
condition|)
block|{
name|lineBytes
operator|++
expr_stmt|;
block|}
name|int
name|lines
init|=
name|data
operator|.
name|length
operator|/
name|lineBytes
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|lines
condition|;
name|y
operator|++
control|)
block|{
name|int
name|start
init|=
name|y
operator|*
name|lineBytes
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|columns
condition|;
name|x
operator|++
control|)
block|{
name|int
name|index
init|=
name|start
operator|+
operator|(
name|x
operator|/
literal|8
operator|)
decl_stmt|;
name|int
name|mask
init|=
literal|1
operator|<<
operator|(
literal|7
operator|-
operator|(
name|x
operator|%
literal|8
operator|)
operator|)
decl_stmt|;
name|int
name|value
init|=
name|data
index|[
name|index
index|]
operator|&
name|mask
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|value
operator|!=
literal|0
condition|?
literal|'X'
else|:
literal|'_'
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Converts a series of bytes to a "binary" String of 0s and 1s.      * @param data the data      * @return the binary string      */
specifier|protected
name|String
name|toBitString
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
return|return
name|PackedBitArray
operator|.
name|toBitString
argument_list|(
name|data
argument_list|)
return|;
block|}
block|}
end_class

end_unit

