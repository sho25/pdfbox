begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/* $Id$ */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|filter
operator|.
name|ccitt
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_comment
comment|/**  * Tests the CCITT Fax G3 1D decoder.  * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|TestCCITTFaxG31DDecodeInputStream
extends|extends
name|AbstractCCITTFaxTestCase
block|{
specifier|private
specifier|static
specifier|final
name|boolean
name|DEBUG
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EOL
init|=
literal|"000000000001"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|RTC
init|=
name|EOL
operator|+
name|EOL
operator|+
name|EOL
operator|+
name|EOL
operator|+
name|EOL
operator|+
name|EOL
decl_stmt|;
comment|/**      * Tests the decoder with naked bits (no EOL, no alignment, nothing).      * @throws IOException if an I/O error occurs      */
specifier|public
name|void
name|testDecoderNaked
parameter_list|()
throws|throws
name|IOException
block|{
comment|//Test data: 24x3 pixels encoded
name|byte
index|[]
name|data
init|=
name|fromBinary
argument_list|(
literal|"10011"
operator|+
literal|"000101"
operator|+
literal|"10011"
operator|+
literal|"00110101"
operator|+
literal|"011"
operator|+
literal|"10011"
operator|+
literal|"0000111"
operator|+
literal|"00110101"
operator|+
literal|"010"
operator|+
literal|"000111"
operator|+
literal|"010"
operator|+
literal|"0010111"
operator|+
literal|"000000"
argument_list|)
decl_stmt|;
name|assertStandardDecodingResult
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests the decoder with EOLs.      * @throws IOException if an I/O error occurs      */
specifier|public
name|void
name|testDecoderWithEOL
parameter_list|()
throws|throws
name|IOException
block|{
comment|//Test data: 24x3 pixels encoded
name|byte
index|[]
name|data
init|=
name|fromBinary
argument_list|(
literal|"10011"
operator|+
literal|"000101"
operator|+
literal|"10011"
operator|+
name|EOL
operator|+
literal|"00110101"
operator|+
literal|"011"
operator|+
literal|"10011"
operator|+
literal|"0000111"
operator|+
name|EOL
operator|+
literal|"00110101"
operator|+
literal|"010"
operator|+
literal|"000111"
operator|+
literal|"010"
operator|+
literal|"0010111"
operator|+
literal|"000000"
operator|+
name|EOL
argument_list|)
decl_stmt|;
name|assertStandardDecodingResult
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests the decoder with RTC and byte alignment.      * @throws IOException if an I/O error occurs      */
specifier|public
name|void
name|testDecoderAlignedWithRTC
parameter_list|()
throws|throws
name|IOException
block|{
comment|//Test data: 24x3 pixels encoded
name|byte
index|[]
name|data
init|=
name|fromBinary
argument_list|(
literal|"1001100010110011"
operator|+
name|EOL
operator|+
literal|"00110101011100110000111"
operator|+
literal|"0"
operator|+
name|EOL
operator|+
literal|"001101010100001110100010111000000"
operator|+
literal|"00000"
operator|+
name|RTC
argument_list|)
decl_stmt|;
name|assertStandardDecodingResult
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests the decoder with an initial EOL.      * @throws IOException if an I/O error occurs      */
specifier|public
name|void
name|testDecoderInitialEOL
parameter_list|()
throws|throws
name|IOException
block|{
comment|//Test data: 24x3 pixels encoded
name|byte
index|[]
name|data
init|=
name|fromBinary
argument_list|(
literal|"000"
operator|+
name|EOL
operator|+
literal|"1001100010110011"
operator|+
name|EOL
operator|+
literal|"00110101011100110000111"
operator|+
name|EOL
operator|+
literal|"001101010100001110100010111000000"
argument_list|)
decl_stmt|;
name|assertStandardDecodingResult
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertStandardDecodingResult
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|columns
init|=
literal|24
decl_stmt|;
name|byte
index|[]
name|decoded
init|=
name|decode
argument_list|(
name|data
argument_list|,
name|columns
argument_list|)
decl_stmt|;
if|if
condition|(
name|DEBUG
condition|)
block|{
name|dumpBitmap
argument_list|(
name|decoded
argument_list|,
name|columns
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|PackedBitArray
operator|.
name|toBitString
argument_list|(
name|decoded
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|decoded
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"000000001111111100000000"
operator|+
literal|"111100000000111111111111"
operator|+
literal|"101000000000000000000000"
argument_list|,
name|toBitString
argument_list|(
name|decoded
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests the decoder with a restriction in the number of rows.      * @throws IOException if an I/O error occurs      */
specifier|public
name|void
name|testDecoderRowsRestriction
parameter_list|()
throws|throws
name|IOException
block|{
comment|//Test data: 24x3 pixels encoded
name|byte
index|[]
name|data
init|=
name|fromBinary
argument_list|(
literal|"10011"
operator|+
literal|"000101"
operator|+
literal|"10011"
operator|+
literal|"00110101"
operator|+
literal|"011"
operator|+
literal|"10011"
operator|+
literal|"0000111"
operator|+
literal|"00110101"
operator|+
literal|"010"
operator|+
literal|"000111"
operator|+
literal|"010"
operator|+
literal|"0010111"
operator|+
literal|"000000"
argument_list|)
decl_stmt|;
name|int
name|columns
init|=
literal|24
decl_stmt|;
name|int
name|rows
init|=
literal|2
decl_stmt|;
comment|//We actually have data for three rows. Just checking the restriction.
name|CCITTFaxG31DDecodeInputStream
name|decoder
init|=
operator|new
name|CCITTFaxG31DDecodeInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|,
name|columns
argument_list|,
name|rows
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|byte
index|[]
name|decoded
init|=
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|decoder
argument_list|)
decl_stmt|;
name|decoder
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|DEBUG
condition|)
block|{
name|dumpBitmap
argument_list|(
name|decoded
argument_list|,
name|columns
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|PackedBitArray
operator|.
name|toBitString
argument_list|(
name|decoded
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|decoded
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"000000001111111100000000"
operator|+
literal|"111100000000111111111111"
argument_list|,
name|toBitString
argument_list|(
name|decoded
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests the decoder with white lines.      * @throws IOException if an I/O error occurs      */
specifier|public
name|void
name|testDecoderWhiteLines
parameter_list|()
throws|throws
name|IOException
block|{
comment|//Test data: 1728x3 pixels encoded (all white)
name|byte
index|[]
name|data
init|=
name|fromBinary
argument_list|(
name|EOL
operator|+
literal|"010011011"
operator|+
literal|"00110101"
comment|//EOL + w1728 (make-up) + w0
operator|+
name|EOL
operator|+
literal|"010011011"
operator|+
literal|"00110101"
operator|+
name|EOL
operator|+
literal|"010011011"
operator|+
literal|"00110101"
operator|+
name|RTC
argument_list|)
decl_stmt|;
name|int
name|columns
init|=
literal|1728
decl_stmt|;
name|byte
index|[]
name|decoded
init|=
name|decode
argument_list|(
name|data
argument_list|,
name|columns
argument_list|)
decl_stmt|;
if|if
condition|(
name|DEBUG
condition|)
block|{
name|dumpBitmap
argument_list|(
name|decoded
argument_list|,
name|columns
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|columns
operator|*
literal|3
operator|/
literal|8
argument_list|,
name|decoded
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**      * Decodes a byte buffer.      * @param data the data      * @param columns the number of columns      * @return the decoded bits/pixels      * @throws IOException if an I/O error occurs      */
specifier|public
specifier|static
name|byte
index|[]
name|decode
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|columns
parameter_list|)
throws|throws
name|IOException
block|{
name|CCITTFaxG31DDecodeInputStream
name|decoder
init|=
operator|new
name|CCITTFaxG31DDecodeInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|,
name|columns
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|byte
index|[]
name|decoded
init|=
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|decoder
argument_list|)
decl_stmt|;
name|decoder
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|decoded
return|;
block|}
specifier|private
name|byte
index|[]
name|fromBinary
parameter_list|(
name|String
name|binary
parameter_list|)
block|{
name|ByteArrayOutputStream
name|baout
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|pos
operator|<
name|binary
operator|.
name|length
argument_list|()
operator|-
literal|8
condition|)
block|{
name|int
name|v
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|binary
operator|.
name|substring
argument_list|(
name|pos
argument_list|,
name|pos
operator|+
literal|8
argument_list|)
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|baout
operator|.
name|write
argument_list|(
name|v
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
name|pos
operator|+=
literal|8
expr_stmt|;
block|}
name|int
name|rest
init|=
name|binary
operator|.
name|length
argument_list|()
operator|-
name|pos
decl_stmt|;
if|if
condition|(
name|rest
operator|>
literal|0
condition|)
block|{
name|String
name|f
init|=
name|binary
operator|.
name|substring
argument_list|(
name|pos
argument_list|)
operator|+
literal|"00000000"
operator|.
name|substring
argument_list|(
name|rest
argument_list|)
decl_stmt|;
name|baout
operator|.
name|write
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|f
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|baout
operator|.
name|toByteArray
argument_list|()
return|;
block|}
block|}
end_class

end_unit

