begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_comment
comment|/**  * This will test all of the filters in the PDFBox system.  */
end_comment

begin_class
specifier|public
class|class
name|TestFilters
extends|extends
name|TestCase
block|{
comment|/**      * This will test all of the filters in the system. There will be COUNT      * of deterministic tests and COUNT of non-deterministic tests, see also      * the discussion in PDFBOX-1977.      *      * @throws IOException If there is an exception while encoding.      */
specifier|public
name|void
name|testFilters
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|COUNT
init|=
literal|10
decl_stmt|;
name|Random
name|rd
init|=
operator|new
name|Random
argument_list|(
literal|123456
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|COUNT
operator|*
literal|2
condition|;
name|iter
operator|++
control|)
block|{
name|long
name|seed
decl_stmt|;
if|if
condition|(
name|iter
operator|<
name|COUNT
condition|)
block|{
comment|// deterministic seed
name|seed
operator|=
name|rd
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// non-deterministic seed
name|seed
operator|=
operator|new
name|Random
argument_list|()
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
specifier|final
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numBytes
init|=
literal|10000
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|20000
argument_list|)
decl_stmt|;
name|byte
index|[]
name|original
init|=
operator|new
name|byte
index|[
name|numBytes
index|]
decl_stmt|;
name|int
name|upto
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|upto
operator|<
name|numBytes
condition|)
block|{
specifier|final
name|int
name|left
init|=
name|numBytes
operator|-
name|upto
decl_stmt|;
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
operator|||
name|left
operator|<
literal|2
condition|)
block|{
comment|// Fill w/ pseudo-random bytes:
specifier|final
name|int
name|end
init|=
name|upto
operator|+
name|Math
operator|.
name|min
argument_list|(
name|left
argument_list|,
literal|10
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
name|upto
operator|<
name|end
condition|)
block|{
name|original
index|[
name|upto
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
name|random
operator|.
name|nextInt
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Fill w/ very predictable bytes:
specifier|final
name|int
name|end
init|=
name|upto
operator|+
name|Math
operator|.
name|min
argument_list|(
name|left
argument_list|,
literal|2
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|byte
name|value
init|=
operator|(
name|byte
operator|)
name|random
operator|.
name|nextInt
argument_list|(
literal|4
argument_list|)
decl_stmt|;
while|while
condition|(
name|upto
operator|<
name|end
condition|)
block|{
name|original
index|[
name|upto
operator|++
index|]
operator|=
name|value
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Filter
name|filter
range|:
name|FilterFactory
operator|.
name|INSTANCE
operator|.
name|getAllFilters
argument_list|()
control|)
block|{
comment|// Skip filters that don't currently support roundtripping
if|if
condition|(
name|filter
operator|instanceof
name|DCTFilter
operator|||
name|filter
operator|instanceof
name|CCITTFaxFilter
operator|||
name|filter
operator|instanceof
name|JPXFilter
operator|||
name|filter
operator|instanceof
name|JBIG2Filter
operator|||
name|filter
operator|instanceof
name|RunLengthDecodeFilter
condition|)
block|{
continue|continue;
block|}
name|checkEncodeDecode
argument_list|(
name|filter
argument_list|,
name|original
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"NOTE: test failed with seed="
operator|+
name|seed
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * This will test the LZW filter with the sequence that failed in PDFBOX-1777.      * To check that the test itself is legit, revert LZWFilter.java to rev 1571801,      * which should fail this test.      *       * @throws IOException       */
specifier|public
name|void
name|testPDFBOX1777
parameter_list|()
throws|throws
name|IOException
block|{
name|Filter
name|lzwFilter
init|=
name|FilterFactory
operator|.
name|INSTANCE
operator|.
name|getFilter
argument_list|(
name|COSName
operator|.
name|LZW_DECODE
argument_list|)
decl_stmt|;
name|byte
index|[]
name|byteArray
init|=
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"PDFBOX-1777.bin"
argument_list|)
argument_list|)
decl_stmt|;
name|checkEncodeDecode
argument_list|(
name|lzwFilter
argument_list|,
name|byteArray
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkEncodeDecode
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|byte
index|[]
name|original
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|encoded
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|filter
operator|.
name|encode
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|original
argument_list|)
argument_list|,
name|encoded
argument_list|,
operator|new
name|COSDictionary
argument_list|()
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|decoded
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|filter
operator|.
name|decode
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|encoded
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|,
name|decoded
argument_list|,
operator|new
name|COSDictionary
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Data that is encoded and then decoded through "
operator|+
name|filter
operator|.
name|getClass
argument_list|()
operator|+
literal|" does not match the original data"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|original
argument_list|,
name|decoded
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

