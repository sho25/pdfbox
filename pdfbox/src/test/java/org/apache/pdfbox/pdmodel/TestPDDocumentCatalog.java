begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_class
specifier|public
class|class
name|TestPDDocumentCatalog
extends|extends
name|TestCase
block|{
comment|/**      * Test case for      *<a href="https://issues.apache.org/jira/browse/PDFBOX-90"      *>PDFBOX-90</a> - Support explicit retrieval of page labels.      */
specifier|public
name|void
name|testPageLabels
parameter_list|()
throws|throws
name|Exception
block|{
name|PDDocument
name|doc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|doc
operator|=
name|PDDocument
operator|.
name|load
argument_list|(
name|TestPDDocumentCatalog
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"test_pagelabels.pdf"
argument_list|)
argument_list|)
expr_stmt|;
name|PDDocumentCatalog
name|cat
init|=
name|doc
operator|.
name|getDocumentCatalog
argument_list|()
decl_stmt|;
name|String
index|[]
name|labels
init|=
name|cat
operator|.
name|getPageLabels
argument_list|()
operator|.
name|getLabelsByPageIndices
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|labels
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"A1"
argument_list|,
name|labels
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"A2"
argument_list|,
name|labels
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"A3"
argument_list|,
name|labels
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"i"
argument_list|,
name|labels
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ii"
argument_list|,
name|labels
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"iii"
argument_list|,
name|labels
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"iv"
argument_list|,
name|labels
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"v"
argument_list|,
name|labels
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"vi"
argument_list|,
name|labels
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"vii"
argument_list|,
name|labels
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Appendix I"
argument_list|,
name|labels
index|[
literal|10
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Appendix II"
argument_list|,
name|labels
index|[
literal|11
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
name|doc
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Test case for      *<a href="https://issues.apache.org/jira/browse/PDFBOX-900"      *>PDFBOX-900</a> - Handle malformed PDFs      */
specifier|public
name|void
name|testLabelsOnMalformedPdf
parameter_list|()
throws|throws
name|Exception
block|{
name|PDDocument
name|doc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|doc
operator|=
name|PDDocument
operator|.
name|load
argument_list|(
name|TestPDDocumentCatalog
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"badpagelabels.pdf"
argument_list|)
argument_list|)
expr_stmt|;
name|PDDocumentCatalog
name|cat
init|=
name|doc
operator|.
name|getDocumentCatalog
argument_list|()
decl_stmt|;
comment|// getLabelsByPageIndices() should not throw an exception
name|cat
operator|.
name|getPageLabels
argument_list|()
operator|.
name|getLabelsByPageIndices
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Threw exception!"
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
name|doc
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Test case for      *<a href="https://issues.apache.org/jira/browse/PDFBOX-911"      *>PDFBOX-911</a> - Method PDDocument.getNumberOfPages() returns wrong      * number of pages      */
specifier|public
name|void
name|testGetNumberOfPages
parameter_list|()
throws|throws
name|Exception
block|{
name|PDDocument
name|doc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|doc
operator|=
name|PDDocument
operator|.
name|load
argument_list|(
name|TestPDDocumentCatalog
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"test.unc.pdf"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|doc
operator|.
name|getNumberOfPages
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
name|doc
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

