begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|documentnavigation
operator|.
name|outline
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * @author Andrea Vacondio  *  */
end_comment

begin_class
specifier|public
class|class
name|PDOutlineNodeTest
block|{
specifier|private
name|PDOutlineItem
name|root
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|root
operator|=
operator|new
name|PDOutlineItem
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getParent
parameter_list|()
block|{
name|PDOutlineItem
name|child
init|=
operator|new
name|PDOutlineItem
argument_list|()
decl_stmt|;
name|root
operator|.
name|addLast
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|PDDocumentOutline
name|outline
init|=
operator|new
name|PDDocumentOutline
argument_list|()
decl_stmt|;
name|outline
operator|.
name|addLast
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|outline
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|outline
argument_list|,
name|root
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|root
argument_list|,
name|child
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nullLastChild
parameter_list|()
block|{
name|assertNull
argument_list|(
name|root
operator|.
name|getLastChild
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nullFirstChild
parameter_list|()
block|{
name|assertNull
argument_list|(
name|root
operator|.
name|getFirstChild
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|openAlreadyOpenedRootNode
parameter_list|()
block|{
name|PDOutlineItem
name|child
init|=
operator|new
name|PDOutlineItem
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|root
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addLast
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|root
operator|.
name|openNode
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|root
operator|.
name|isNodeOpen
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|root
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|openNode
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|root
operator|.
name|isNodeOpen
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|root
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|closeAlreadyClosedRootNode
parameter_list|()
block|{
name|PDOutlineItem
name|child
init|=
operator|new
name|PDOutlineItem
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|root
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addLast
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|root
operator|.
name|openNode
argument_list|()
expr_stmt|;
name|root
operator|.
name|closeNode
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|root
operator|.
name|isNodeOpen
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|root
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|closeNode
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|root
operator|.
name|isNodeOpen
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|root
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|openLeaf
parameter_list|()
block|{
name|PDOutlineItem
name|child
init|=
operator|new
name|PDOutlineItem
argument_list|()
decl_stmt|;
name|root
operator|.
name|addLast
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|child
operator|.
name|openNode
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|child
operator|.
name|isNodeOpen
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nodeClosedByDefault
parameter_list|()
block|{
name|PDOutlineItem
name|child
init|=
operator|new
name|PDOutlineItem
argument_list|()
decl_stmt|;
name|root
operator|.
name|addLast
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|root
operator|.
name|isNodeOpen
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|root
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|closeNodeWithOpendParent
parameter_list|()
block|{
name|PDOutlineItem
name|child
init|=
operator|new
name|PDOutlineItem
argument_list|()
decl_stmt|;
name|child
operator|.
name|addLast
argument_list|(
operator|new
name|PDOutlineItem
argument_list|()
argument_list|)
expr_stmt|;
name|child
operator|.
name|addLast
argument_list|(
operator|new
name|PDOutlineItem
argument_list|()
argument_list|)
expr_stmt|;
name|child
operator|.
name|openNode
argument_list|()
expr_stmt|;
name|root
operator|.
name|addLast
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|root
operator|.
name|openNode
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|root
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|child
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
name|child
operator|.
name|closeNode
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|root
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|2
argument_list|,
name|child
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|closeNodeWithClosedParent
parameter_list|()
block|{
name|PDOutlineItem
name|child
init|=
operator|new
name|PDOutlineItem
argument_list|()
decl_stmt|;
name|child
operator|.
name|addLast
argument_list|(
operator|new
name|PDOutlineItem
argument_list|()
argument_list|)
expr_stmt|;
name|child
operator|.
name|addLast
argument_list|(
operator|new
name|PDOutlineItem
argument_list|()
argument_list|)
expr_stmt|;
name|child
operator|.
name|openNode
argument_list|()
expr_stmt|;
name|root
operator|.
name|addLast
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|3
argument_list|,
name|root
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|child
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
name|child
operator|.
name|closeNode
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|root
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|2
argument_list|,
name|child
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|openNodeWithOpendParent
parameter_list|()
block|{
name|PDOutlineItem
name|child
init|=
operator|new
name|PDOutlineItem
argument_list|()
decl_stmt|;
name|child
operator|.
name|addLast
argument_list|(
operator|new
name|PDOutlineItem
argument_list|()
argument_list|)
expr_stmt|;
name|child
operator|.
name|addLast
argument_list|(
operator|new
name|PDOutlineItem
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addLast
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|root
operator|.
name|openNode
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|root
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|2
argument_list|,
name|child
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
name|child
operator|.
name|openNode
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|root
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|child
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|openNodeWithClosedParent
parameter_list|()
block|{
name|PDOutlineItem
name|child
init|=
operator|new
name|PDOutlineItem
argument_list|()
decl_stmt|;
name|child
operator|.
name|addLast
argument_list|(
operator|new
name|PDOutlineItem
argument_list|()
argument_list|)
expr_stmt|;
name|child
operator|.
name|addLast
argument_list|(
operator|new
name|PDOutlineItem
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addLast
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|root
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|2
argument_list|,
name|child
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
name|child
operator|.
name|openNode
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|3
argument_list|,
name|root
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|child
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addLastSingleChild
parameter_list|()
block|{
name|PDOutlineItem
name|child
init|=
operator|new
name|PDOutlineItem
argument_list|()
decl_stmt|;
name|root
operator|.
name|addLast
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|child
argument_list|,
name|root
operator|.
name|getFirstChild
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|child
argument_list|,
name|root
operator|.
name|getLastChild
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addFirstSingleChild
parameter_list|()
block|{
name|PDOutlineItem
name|child
init|=
operator|new
name|PDOutlineItem
argument_list|()
decl_stmt|;
name|root
operator|.
name|addFirst
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|child
argument_list|,
name|root
operator|.
name|getFirstChild
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|child
argument_list|,
name|root
operator|.
name|getLastChild
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addLastOpenChildToOpenParent
parameter_list|()
block|{
name|PDOutlineItem
name|child
init|=
operator|new
name|PDOutlineItem
argument_list|()
decl_stmt|;
name|child
operator|.
name|addLast
argument_list|(
operator|new
name|PDOutlineItem
argument_list|()
argument_list|)
expr_stmt|;
name|child
operator|.
name|addLast
argument_list|(
operator|new
name|PDOutlineItem
argument_list|()
argument_list|)
expr_stmt|;
name|child
operator|.
name|openNode
argument_list|()
expr_stmt|;
name|root
operator|.
name|addLast
argument_list|(
operator|new
name|PDOutlineItem
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|openNode
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|root
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|child
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addLast
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|child
argument_list|,
name|root
operator|.
name|getFirstChild
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|child
argument_list|,
name|root
operator|.
name|getLastChild
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|root
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addFirstOpenChildToOpenParent
parameter_list|()
block|{
name|PDOutlineItem
name|child
init|=
operator|new
name|PDOutlineItem
argument_list|()
decl_stmt|;
name|child
operator|.
name|addFirst
argument_list|(
operator|new
name|PDOutlineItem
argument_list|()
argument_list|)
expr_stmt|;
name|child
operator|.
name|addFirst
argument_list|(
operator|new
name|PDOutlineItem
argument_list|()
argument_list|)
expr_stmt|;
name|child
operator|.
name|openNode
argument_list|()
expr_stmt|;
name|root
operator|.
name|addFirst
argument_list|(
operator|new
name|PDOutlineItem
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|openNode
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|root
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|child
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addFirst
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|child
argument_list|,
name|root
operator|.
name|getLastChild
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|child
argument_list|,
name|root
operator|.
name|getFirstChild
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|root
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addLastOpenChildToClosedParent
parameter_list|()
block|{
name|PDOutlineItem
name|child
init|=
operator|new
name|PDOutlineItem
argument_list|()
decl_stmt|;
name|child
operator|.
name|addLast
argument_list|(
operator|new
name|PDOutlineItem
argument_list|()
argument_list|)
expr_stmt|;
name|child
operator|.
name|addLast
argument_list|(
operator|new
name|PDOutlineItem
argument_list|()
argument_list|)
expr_stmt|;
name|child
operator|.
name|openNode
argument_list|()
expr_stmt|;
name|root
operator|.
name|addLast
argument_list|(
operator|new
name|PDOutlineItem
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|root
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|child
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addLast
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|child
argument_list|,
name|root
operator|.
name|getFirstChild
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|child
argument_list|,
name|root
operator|.
name|getLastChild
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|4
argument_list|,
name|root
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addFirstOpenChildToClosedParent
parameter_list|()
block|{
name|PDOutlineItem
name|child
init|=
operator|new
name|PDOutlineItem
argument_list|()
decl_stmt|;
name|child
operator|.
name|addFirst
argument_list|(
operator|new
name|PDOutlineItem
argument_list|()
argument_list|)
expr_stmt|;
name|child
operator|.
name|addFirst
argument_list|(
operator|new
name|PDOutlineItem
argument_list|()
argument_list|)
expr_stmt|;
name|child
operator|.
name|openNode
argument_list|()
expr_stmt|;
name|root
operator|.
name|addFirst
argument_list|(
operator|new
name|PDOutlineItem
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|root
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|child
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addFirst
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|child
argument_list|,
name|root
operator|.
name|getLastChild
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|child
argument_list|,
name|root
operator|.
name|getFirstChild
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|4
argument_list|,
name|root
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addLastClosedChildToOpenParent
parameter_list|()
block|{
name|PDOutlineItem
name|child
init|=
operator|new
name|PDOutlineItem
argument_list|()
decl_stmt|;
name|child
operator|.
name|addLast
argument_list|(
operator|new
name|PDOutlineItem
argument_list|()
argument_list|)
expr_stmt|;
name|child
operator|.
name|addLast
argument_list|(
operator|new
name|PDOutlineItem
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addLast
argument_list|(
operator|new
name|PDOutlineItem
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|openNode
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|root
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|2
argument_list|,
name|child
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addLast
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|child
argument_list|,
name|root
operator|.
name|getFirstChild
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|child
argument_list|,
name|root
operator|.
name|getLastChild
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|root
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addFirstClosedChildToOpenParent
parameter_list|()
block|{
name|PDOutlineItem
name|child
init|=
operator|new
name|PDOutlineItem
argument_list|()
decl_stmt|;
name|child
operator|.
name|addFirst
argument_list|(
operator|new
name|PDOutlineItem
argument_list|()
argument_list|)
expr_stmt|;
name|child
operator|.
name|addFirst
argument_list|(
operator|new
name|PDOutlineItem
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addFirst
argument_list|(
operator|new
name|PDOutlineItem
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|openNode
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|root
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|2
argument_list|,
name|child
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addFirst
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|child
argument_list|,
name|root
operator|.
name|getLastChild
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|child
argument_list|,
name|root
operator|.
name|getFirstChild
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|root
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addLastClosedChildToClosedParent
parameter_list|()
block|{
name|PDOutlineItem
name|child
init|=
operator|new
name|PDOutlineItem
argument_list|()
decl_stmt|;
name|child
operator|.
name|addLast
argument_list|(
operator|new
name|PDOutlineItem
argument_list|()
argument_list|)
expr_stmt|;
name|child
operator|.
name|addLast
argument_list|(
operator|new
name|PDOutlineItem
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addLast
argument_list|(
operator|new
name|PDOutlineItem
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|root
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|2
argument_list|,
name|child
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addLast
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|child
argument_list|,
name|root
operator|.
name|getFirstChild
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|child
argument_list|,
name|root
operator|.
name|getLastChild
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|2
argument_list|,
name|root
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addFirstClosedChildToClosedParent
parameter_list|()
block|{
name|PDOutlineItem
name|child
init|=
operator|new
name|PDOutlineItem
argument_list|()
decl_stmt|;
name|child
operator|.
name|addFirst
argument_list|(
operator|new
name|PDOutlineItem
argument_list|()
argument_list|)
expr_stmt|;
name|child
operator|.
name|addFirst
argument_list|(
operator|new
name|PDOutlineItem
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addFirst
argument_list|(
operator|new
name|PDOutlineItem
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|root
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|2
argument_list|,
name|child
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addFirst
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|child
argument_list|,
name|root
operator|.
name|getLastChild
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|child
argument_list|,
name|root
operator|.
name|getFirstChild
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|2
argument_list|,
name|root
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|cannotAddLastAList
parameter_list|()
block|{
name|PDOutlineItem
name|child
init|=
operator|new
name|PDOutlineItem
argument_list|()
decl_stmt|;
name|child
operator|.
name|insertSiblingAfter
argument_list|(
operator|new
name|PDOutlineItem
argument_list|()
argument_list|)
expr_stmt|;
name|child
operator|.
name|insertSiblingAfter
argument_list|(
operator|new
name|PDOutlineItem
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addLast
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|cannotAddFirstAList
parameter_list|()
block|{
name|PDOutlineItem
name|child
init|=
operator|new
name|PDOutlineItem
argument_list|()
decl_stmt|;
name|child
operator|.
name|insertSiblingAfter
argument_list|(
operator|new
name|PDOutlineItem
argument_list|()
argument_list|)
expr_stmt|;
name|child
operator|.
name|insertSiblingAfter
argument_list|(
operator|new
name|PDOutlineItem
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addFirst
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|equalsNode
parameter_list|()
block|{
name|root
operator|.
name|addFirst
argument_list|(
operator|new
name|PDOutlineItem
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|root
operator|.
name|getFirstChild
argument_list|()
argument_list|,
name|root
operator|.
name|getLastChild
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|iterator
parameter_list|()
block|{
name|PDOutlineItem
name|first
init|=
operator|new
name|PDOutlineItem
argument_list|()
decl_stmt|;
name|root
operator|.
name|addFirst
argument_list|(
name|first
argument_list|)
expr_stmt|;
name|root
operator|.
name|addLast
argument_list|(
operator|new
name|PDOutlineItem
argument_list|()
argument_list|)
expr_stmt|;
name|PDOutlineItem
name|second
init|=
operator|new
name|PDOutlineItem
argument_list|()
decl_stmt|;
name|first
operator|.
name|insertSiblingAfter
argument_list|(
name|second
argument_list|)
expr_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
for|for
control|(
name|PDOutlineItem
name|current
range|:
name|root
operator|.
name|children
argument_list|()
control|)
block|{
name|counter
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|counter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|iteratorNoChildre
parameter_list|()
block|{
name|int
name|counter
init|=
literal|0
decl_stmt|;
for|for
control|(
name|PDOutlineItem
name|current
range|:
operator|new
name|PDOutlineItem
argument_list|()
operator|.
name|children
argument_list|()
control|)
block|{
name|counter
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|counter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|openNodeAndAppend
parameter_list|()
block|{
comment|// TODO
block|}
block|}
end_class

end_unit

