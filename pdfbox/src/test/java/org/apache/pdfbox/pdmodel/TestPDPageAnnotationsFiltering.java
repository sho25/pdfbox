begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAnnotationLink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAnnotationRubberStamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAnnotationSquare
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * This unit test validates the correct working behavior of PDPage annotations  * filtering  *   * @author<a href="mailto:maxime.veron.pro@gmail.com">Maxime Veron</a>  *  */
end_comment

begin_class
specifier|public
class|class
name|TestPDPageAnnotationsFiltering
block|{
comment|// test mock page for annotations filtering
specifier|private
name|PDPage
name|page
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|initMock
parameter_list|()
block|{
name|COSDictionary
name|mockedPageWithAnnotations
init|=
operator|new
name|COSDictionary
argument_list|()
decl_stmt|;
name|COSArray
name|annotsDictionnary
init|=
operator|new
name|COSArray
argument_list|()
decl_stmt|;
name|annotsDictionnary
operator|.
name|add
argument_list|(
operator|new
name|PDAnnotationRubberStamp
argument_list|()
operator|.
name|getCOSObject
argument_list|()
argument_list|)
expr_stmt|;
name|annotsDictionnary
operator|.
name|add
argument_list|(
operator|new
name|PDAnnotationSquare
argument_list|()
operator|.
name|getCOSObject
argument_list|()
argument_list|)
expr_stmt|;
name|annotsDictionnary
operator|.
name|add
argument_list|(
operator|new
name|PDAnnotationLink
argument_list|()
operator|.
name|getCOSObject
argument_list|()
argument_list|)
expr_stmt|;
name|mockedPageWithAnnotations
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|ANNOTS
argument_list|,
name|annotsDictionnary
argument_list|)
expr_stmt|;
name|page
operator|=
operator|new
name|PDPage
argument_list|(
name|mockedPageWithAnnotations
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|validateNoFiltering
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|PDAnnotation
argument_list|>
name|annotations
init|=
name|page
operator|.
name|getAnnotations
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|annotations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|annotations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|PDAnnotationRubberStamp
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|annotations
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|PDAnnotationSquare
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|annotations
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|instanceof
name|PDAnnotationLink
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|validateAllFiltered
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|PDAnnotation
argument_list|>
name|annotations
init|=
name|page
operator|.
name|getAnnotations
argument_list|(
name|annotation
lambda|->
literal|false
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|annotations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|validateSelectedFew
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|PDAnnotation
argument_list|>
name|annotations
init|=
name|page
operator|.
name|getAnnotations
argument_list|(
name|annotation
lambda|->
operator|(
name|annotation
operator|instanceof
name|PDAnnotationLink
operator|||
name|annotation
operator|instanceof
name|PDAnnotationSquare
operator|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|annotations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|annotations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|PDAnnotationSquare
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|annotations
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|PDAnnotationLink
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

