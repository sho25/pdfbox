begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|fdf
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|COSArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/*  * Test some characteristics of FDFFields  */
end_comment

begin_class
specifier|public
class|class
name|FDFFieldTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testCOSStringValue
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|testString
init|=
literal|"Test value"
decl_stmt|;
name|COSString
name|testCOSString
init|=
operator|new
name|COSString
argument_list|(
name|testString
argument_list|)
decl_stmt|;
name|FDFField
name|field
init|=
operator|new
name|FDFField
argument_list|()
decl_stmt|;
name|field
operator|.
name|setValue
argument_list|(
name|testCOSString
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testCOSString
argument_list|,
operator|(
name|COSString
operator|)
name|field
operator|.
name|getCOSValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testString
argument_list|,
name|field
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTextAsCOSStreamValue
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|testString
init|=
literal|"Test value"
decl_stmt|;
name|byte
index|[]
name|testBytes
init|=
name|testString
operator|.
name|getBytes
argument_list|(
literal|"ASCII"
argument_list|)
decl_stmt|;
name|COSStream
name|stream
init|=
name|createStream
argument_list|(
name|testBytes
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|FDFField
name|field
init|=
operator|new
name|FDFField
argument_list|()
decl_stmt|;
name|field
operator|.
name|setValue
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testString
argument_list|,
name|field
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCOSNameValue
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|testString
init|=
literal|"Yes"
decl_stmt|;
name|COSName
name|testCOSSName
init|=
name|COSName
operator|.
name|getPDFName
argument_list|(
name|testString
argument_list|)
decl_stmt|;
name|FDFField
name|field
init|=
operator|new
name|FDFField
argument_list|()
decl_stmt|;
name|field
operator|.
name|setValue
argument_list|(
name|testCOSSName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testCOSSName
argument_list|,
operator|(
name|COSName
operator|)
name|field
operator|.
name|getCOSValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testString
argument_list|,
name|field
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCOSArrayValue
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|testList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|testList
operator|.
name|add
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|testList
operator|.
name|add
argument_list|(
literal|"B"
argument_list|)
expr_stmt|;
name|COSArray
name|testCOSArray
init|=
name|COSArrayList
operator|.
name|convertStringListToCOSStringCOSArray
argument_list|(
name|testList
argument_list|)
decl_stmt|;
name|FDFField
name|field
init|=
operator|new
name|FDFField
argument_list|()
decl_stmt|;
name|field
operator|.
name|setValue
argument_list|(
name|testCOSArray
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testCOSArray
argument_list|,
operator|(
name|COSArray
operator|)
name|field
operator|.
name|getCOSValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testList
argument_list|,
name|field
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|COSStream
name|createStream
parameter_list|(
name|byte
index|[]
name|testString
parameter_list|,
name|COSBase
name|filters
parameter_list|)
throws|throws
name|IOException
block|{
name|COSStream
name|stream
init|=
operator|new
name|COSStream
argument_list|()
decl_stmt|;
name|OutputStream
name|output
init|=
name|stream
operator|.
name|createOutputStream
argument_list|(
name|filters
argument_list|)
decl_stmt|;
name|output
operator|.
name|write
argument_list|(
name|testString
argument_list|)
expr_stmt|;
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|stream
return|;
block|}
block|}
end_class

end_unit

