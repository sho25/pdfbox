begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDRectangle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPageContentStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|text
operator|.
name|PDFTextStripper
import|;
end_import

begin_comment
comment|/**  * Tests font embedding.  *  * @author John Hewson  */
end_comment

begin_class
specifier|public
class|class
name|TestFontEmbedding
extends|extends
name|TestCase
block|{
specifier|private
specifier|static
specifier|final
name|File
name|OUT_DIR
init|=
operator|new
name|File
argument_list|(
literal|"target/test-output"
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|OUT_DIR
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
comment|/**      * Embed a TTF as CIDFontType2.      */
specifier|public
name|void
name|testCIDFontType2
parameter_list|()
throws|throws
name|Exception
block|{
name|validateCIDFontType2
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Embed a TTF as CIDFontType2 with subsetting.      */
specifier|public
name|void
name|testCIDFontType2Subset
parameter_list|()
throws|throws
name|Exception
block|{
name|validateCIDFontType2
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|validateCIDFontType2
parameter_list|(
name|boolean
name|useSubset
parameter_list|)
throws|throws
name|Exception
block|{
name|PDDocument
name|document
init|=
operator|new
name|PDDocument
argument_list|()
decl_stmt|;
name|PDPage
name|page
init|=
operator|new
name|PDPage
argument_list|(
name|PDRectangle
operator|.
name|A4
argument_list|)
decl_stmt|;
name|document
operator|.
name|addPage
argument_list|(
name|page
argument_list|)
expr_stmt|;
name|InputStream
name|input
init|=
name|TestFontEmbedding
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"org/apache/pdfbox/ttf/LiberationSans-Regular.ttf"
argument_list|)
decl_stmt|;
name|PDType0Font
name|font
init|=
name|PDType0Font
operator|.
name|load
argument_list|(
name|document
argument_list|,
name|input
argument_list|,
name|useSubset
argument_list|)
decl_stmt|;
name|PDPageContentStream
name|stream
init|=
operator|new
name|PDPageContentStream
argument_list|(
name|document
argument_list|,
name|page
argument_list|)
decl_stmt|;
name|stream
operator|.
name|beginText
argument_list|()
expr_stmt|;
name|stream
operator|.
name|setFont
argument_list|(
name|font
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|String
name|text
init|=
literal|"Unicode русский язык Tiếng Việt"
decl_stmt|;
name|stream
operator|.
name|newLineAtOffset
argument_list|(
literal|50
argument_list|,
literal|600
argument_list|)
expr_stmt|;
name|stream
operator|.
name|showText
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|stream
operator|.
name|endText
argument_list|()
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|OUT_DIR
argument_list|,
literal|"CIDFontType2.pdf"
argument_list|)
decl_stmt|;
name|document
operator|.
name|save
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|document
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// check that the extracted text matches what we wrote
name|String
name|extracted
init|=
name|getUnicodeText
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|text
argument_list|,
name|extracted
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getUnicodeText
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|PDDocument
name|document
init|=
name|PDDocument
operator|.
name|load
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|PDFTextStripper
name|stripper
init|=
operator|new
name|PDFTextStripper
argument_list|()
decl_stmt|;
return|return
name|stripper
operator|.
name|getText
argument_list|(
name|document
argument_list|)
return|;
block|}
block|}
end_class

end_unit

