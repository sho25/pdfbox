begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2014 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|image
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|BufferedImage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|ImageIO
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|ImageWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|spi
operator|.
name|ImageWriterSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdfparser
operator|.
name|PDFParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPageContentStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|rendering
operator|.
name|PDFRenderer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPageContentStream
operator|.
name|AppendMode
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|TestCase
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|TestCase
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|TestCase
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Helper class to do some validations for PDImageXObject.  *  * @author Tilman Hausherr  */
end_comment

begin_class
specifier|public
class|class
name|ValidateXImage
block|{
specifier|public
specifier|static
name|void
name|validate
parameter_list|(
name|PDImageXObject
name|ximage
parameter_list|,
name|int
name|bpc
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
name|String
name|format
parameter_list|,
name|String
name|colorSpaceName
parameter_list|)
throws|throws
name|IOException
block|{
comment|// check the dictionary
name|assertNotNull
argument_list|(
name|ximage
argument_list|)
expr_stmt|;
name|COSStream
name|cosStream
init|=
name|ximage
operator|.
name|getCOSObject
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|cosStream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|COSName
operator|.
name|XOBJECT
argument_list|,
name|cosStream
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|COSName
operator|.
name|IMAGE
argument_list|,
name|cosStream
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ximage
operator|.
name|getCOSObject
argument_list|()
operator|.
name|getLength
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bpc
argument_list|,
name|ximage
operator|.
name|getBitsPerComponent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|width
argument_list|,
name|ximage
operator|.
name|getWidth
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|height
argument_list|,
name|ximage
operator|.
name|getHeight
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|format
argument_list|,
name|ximage
operator|.
name|getSuffix
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|colorSpaceName
argument_list|,
name|ximage
operator|.
name|getColorSpace
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// check the image
name|assertNotNull
argument_list|(
name|ximage
operator|.
name|getImage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ximage
operator|.
name|getWidth
argument_list|()
argument_list|,
name|ximage
operator|.
name|getImage
argument_list|()
operator|.
name|getWidth
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ximage
operator|.
name|getHeight
argument_list|()
argument_list|,
name|ximage
operator|.
name|getImage
argument_list|()
operator|.
name|getHeight
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|canEncode
init|=
literal|true
decl_stmt|;
name|boolean
name|writeOk
decl_stmt|;
comment|// jdk11+ no longer encodes ARGB jpg
comment|// https://bugs.openjdk.java.net/browse/JDK-8211748
if|if
condition|(
literal|"jpg"
operator|.
name|equals
argument_list|(
name|format
argument_list|)
operator|&&
name|ximage
operator|.
name|getImage
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|BufferedImage
operator|.
name|TYPE_INT_ARGB
condition|)
block|{
name|ImageWriter
name|writer
init|=
name|ImageIO
operator|.
name|getImageWritersBySuffix
argument_list|(
name|format
argument_list|)
operator|.
name|next
argument_list|()
decl_stmt|;
name|ImageWriterSpi
name|originatingProvider
init|=
name|writer
operator|.
name|getOriginatingProvider
argument_list|()
decl_stmt|;
name|canEncode
operator|=
name|originatingProvider
operator|.
name|canEncodeImage
argument_list|(
name|ximage
operator|.
name|getImage
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|canEncode
condition|)
block|{
name|writeOk
operator|=
name|ImageIO
operator|.
name|write
argument_list|(
name|ximage
operator|.
name|getImage
argument_list|()
argument_list|,
name|format
argument_list|,
operator|new
name|NullOutputStream
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|writeOk
argument_list|)
expr_stmt|;
block|}
name|writeOk
operator|=
name|ImageIO
operator|.
name|write
argument_list|(
name|ximage
operator|.
name|getOpaqueImage
argument_list|()
argument_list|,
name|format
argument_list|,
operator|new
name|NullOutputStream
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|writeOk
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|NullOutputStream
extends|extends
name|OutputStream
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{         }
block|}
specifier|static
name|int
name|colorCount
parameter_list|(
name|BufferedImage
name|bim
parameter_list|)
block|{
name|Set
argument_list|<
name|Integer
argument_list|>
name|colors
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|w
init|=
name|bim
operator|.
name|getWidth
argument_list|()
decl_stmt|;
name|int
name|h
init|=
name|bim
operator|.
name|getHeight
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|h
condition|;
name|y
operator|++
control|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|w
condition|;
name|x
operator|++
control|)
block|{
name|colors
operator|.
name|add
argument_list|(
name|bim
operator|.
name|getRGB
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|colors
operator|.
name|size
argument_list|()
return|;
block|}
comment|// write image twice (overlapped) in document, close document and re-read PDF
specifier|static
name|void
name|doWritePDF
parameter_list|(
name|PDDocument
name|document
parameter_list|,
name|PDImageXObject
name|ximage
parameter_list|,
name|File
name|testResultsDir
parameter_list|,
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|pdfFile
init|=
operator|new
name|File
argument_list|(
name|testResultsDir
argument_list|,
name|filename
argument_list|)
decl_stmt|;
comment|// This part isn't really needed because this test doesn't break
comment|// if the mask has the wrong colorspace (PDFBOX-2057), but it is still useful
comment|// if something goes wrong in the future and we want to have a PDF to open.
name|PDPage
name|page
init|=
operator|new
name|PDPage
argument_list|()
decl_stmt|;
name|document
operator|.
name|addPage
argument_list|(
name|page
argument_list|)
expr_stmt|;
try|try
init|(
name|PDPageContentStream
name|contentStream
init|=
operator|new
name|PDPageContentStream
argument_list|(
name|document
argument_list|,
name|page
argument_list|,
name|AppendMode
operator|.
name|APPEND
argument_list|,
literal|false
argument_list|)
init|)
block|{
name|contentStream
operator|.
name|drawImage
argument_list|(
name|ximage
argument_list|,
literal|150
argument_list|,
literal|300
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|drawImage
argument_list|(
name|ximage
argument_list|,
literal|200
argument_list|,
literal|350
argument_list|)
expr_stmt|;
block|}
comment|// check that the resource map is up-to-date
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|(
name|document
operator|.
name|getPage
argument_list|(
literal|0
argument_list|)
operator|.
name|getResources
argument_list|()
operator|.
name|getXObjectNames
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|document
operator|.
name|save
argument_list|(
name|pdfFile
argument_list|)
expr_stmt|;
name|document
operator|.
name|close
argument_list|()
expr_stmt|;
name|document
operator|=
name|PDFParser
operator|.
name|load
argument_list|(
name|pdfFile
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|(
name|document
operator|.
name|getPage
argument_list|(
literal|0
argument_list|)
operator|.
name|getResources
argument_list|()
operator|.
name|getXObjectNames
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
operator|new
name|PDFRenderer
argument_list|(
name|document
argument_list|)
operator|.
name|renderImage
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|document
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|int
name|count
parameter_list|(
name|Iterable
argument_list|<
name|COSName
argument_list|>
name|iterable
parameter_list|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|COSName
name|name
range|:
name|iterable
control|)
block|{
name|count
operator|++
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
comment|/**      * Check whether the images are identical.      *      * @param expectedImage      * @param actualImage      */
specifier|public
specifier|static
name|void
name|checkIdent
parameter_list|(
name|BufferedImage
name|expectedImage
parameter_list|,
name|BufferedImage
name|actualImage
parameter_list|)
block|{
name|String
name|errMsg
init|=
literal|""
decl_stmt|;
name|int
name|w
init|=
name|expectedImage
operator|.
name|getWidth
argument_list|()
decl_stmt|;
name|int
name|h
init|=
name|expectedImage
operator|.
name|getHeight
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|w
argument_list|,
name|actualImage
operator|.
name|getWidth
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|h
argument_list|,
name|actualImage
operator|.
name|getHeight
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|h
condition|;
operator|++
name|y
control|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|w
condition|;
operator|++
name|x
control|)
block|{
if|if
condition|(
name|expectedImage
operator|.
name|getRGB
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|!=
name|actualImage
operator|.
name|getRGB
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
condition|)
block|{
name|errMsg
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"(%d,%d) expected:<%08X> but was:<%08X>; "
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|expectedImage
operator|.
name|getRGB
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|,
name|actualImage
operator|.
name|getRGB
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|errMsg
argument_list|,
name|expectedImage
operator|.
name|getRGB
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|,
name|actualImage
operator|.
name|getRGB
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

