begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|function
operator|.
name|type4
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_comment
comment|/**  * Testing helper class for testing type 4 functions from the PDF specification.  *  * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|Type4Tester
block|{
specifier|private
specifier|final
name|ExecutionContext
name|context
decl_stmt|;
specifier|private
name|Type4Tester
parameter_list|(
name|ExecutionContext
name|ctxt
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|ctxt
expr_stmt|;
block|}
comment|/**      * Creates a new instance for the given type 4 function.      * @param text the text of the type 4 function      * @return the tester instance      */
specifier|public
specifier|static
name|Type4Tester
name|create
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|InstructionSequence
name|instructions
init|=
name|InstructionSequenceBuilder
operator|.
name|parse
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|ExecutionContext
name|context
init|=
operator|new
name|ExecutionContext
argument_list|(
operator|new
name|Operators
argument_list|()
argument_list|)
decl_stmt|;
name|instructions
operator|.
name|execute
argument_list|(
name|context
argument_list|)
expr_stmt|;
return|return
operator|new
name|Type4Tester
argument_list|(
name|context
argument_list|)
return|;
block|}
comment|/**      * Pops a bool value from the stack and checks it against the expected result.      * @param expected the expected bool value      * @return this instance      */
specifier|public
name|Type4Tester
name|pop
parameter_list|(
name|boolean
name|expected
parameter_list|)
block|{
name|boolean
name|value
init|=
operator|(
name|Boolean
operator|)
name|context
operator|.
name|getStack
argument_list|()
operator|.
name|pop
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Pops a real value from the stack and checks it against the expected result.      * @param expected the expected real value      * @return this instance      */
specifier|public
name|Type4Tester
name|popReal
parameter_list|(
name|float
name|expected
parameter_list|)
block|{
return|return
name|popReal
argument_list|(
name|expected
argument_list|,
literal|0.0000001
argument_list|)
return|;
block|}
comment|/**      * Pops a real value from the stack and checks it against the expected result.      * @param expected the expected real value      * @param delta the allowed deviation of the value from the expected result      * @return this instance      */
specifier|public
name|Type4Tester
name|popReal
parameter_list|(
name|float
name|expected
parameter_list|,
name|double
name|delta
parameter_list|)
block|{
name|Float
name|value
init|=
operator|(
name|Float
operator|)
name|context
operator|.
name|getStack
argument_list|()
operator|.
name|pop
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|value
operator|.
name|floatValue
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Pops an int value from the stack and checks it against the expected result.      * @param expected the expected int value      * @return this instance      */
specifier|public
name|Type4Tester
name|pop
parameter_list|(
name|int
name|expected
parameter_list|)
block|{
name|int
name|value
init|=
name|context
operator|.
name|popInt
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Pops a numeric value from the stack and checks it against the expected result.      * @param expected the expected numeric value      * @return this instance      */
specifier|public
name|Type4Tester
name|pop
parameter_list|(
name|float
name|expected
parameter_list|)
block|{
return|return
name|pop
argument_list|(
name|expected
argument_list|,
literal|0.0000001
argument_list|)
return|;
block|}
comment|/**      * Pops a numeric value from the stack and checks it against the expected result.      * @param expected the expected numeric value      * @param delta the allowed deviation of the value from the expected result      * @return this instance      */
specifier|public
name|Type4Tester
name|pop
parameter_list|(
name|float
name|expected
parameter_list|,
name|double
name|delta
parameter_list|)
block|{
name|Number
name|value
init|=
name|context
operator|.
name|popNumber
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|value
operator|.
name|doubleValue
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Checks that the stack is empty at this point.      * @return this instance      */
specifier|public
name|Type4Tester
name|isEmpty
parameter_list|()
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|context
operator|.
name|getStack
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Returns the execution context so some custom checks can be performed.      * @return the associated execution context      */
specifier|public
name|ExecutionContext
name|toExecutionContext
parameter_list|()
block|{
return|return
name|this
operator|.
name|context
return|;
block|}
block|}
end_class

end_unit

