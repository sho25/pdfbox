begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|ttf
operator|.
name|CMAPEncodingEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|ttf
operator|.
name|CMAPTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|ttf
operator|.
name|NameRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|ttf
operator|.
name|PostScriptTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|ttf
operator|.
name|TTFParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|ttf
operator|.
name|TrueTypeFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|encoding
operator|.
name|Encoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|encoding
operator|.
name|WinAnsiEncoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * A test for correctly parsing TTF files.  */
end_comment

begin_class
specifier|public
class|class
name|TestTTFParser
block|{
comment|/**      * Test the post table parser.      * @throws IOException if an error occurs.      */
annotation|@
name|Test
specifier|public
name|void
name|testPostTable
parameter_list|()
throws|throws
name|IOException
block|{
name|InputStream
name|arialIs
init|=
name|TestTTFParser
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"org/apache/pdfbox/resources/ttf/ArialMT.ttf"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|arialIs
argument_list|)
expr_stmt|;
name|TTFParser
name|parser
init|=
operator|new
name|TTFParser
argument_list|()
decl_stmt|;
name|TrueTypeFont
name|arial
init|=
name|parser
operator|.
name|parseTTF
argument_list|(
name|arialIs
argument_list|)
decl_stmt|;
name|CMAPTable
name|cmap
init|=
name|arial
operator|.
name|getCMAP
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|cmap
argument_list|)
expr_stmt|;
name|CMAPEncodingEntry
index|[]
name|cmaps
init|=
name|cmap
operator|.
name|getCmaps
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|cmaps
argument_list|)
expr_stmt|;
name|CMAPEncodingEntry
name|uc
init|=
literal|null
decl_stmt|;
for|for
control|(
name|CMAPEncodingEntry
name|e
range|:
name|cmaps
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getPlatformId
argument_list|()
operator|==
name|NameRecord
operator|.
name|PLATFORM_WINDOWS
operator|&&
name|e
operator|.
name|getPlatformEncodingId
argument_list|()
operator|==
name|NameRecord
operator|.
name|PLATFORM_ENCODING_WINDOWS_UNICODE
condition|)
block|{
name|uc
operator|=
name|e
expr_stmt|;
break|break;
block|}
block|}
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|uc
argument_list|)
expr_stmt|;
name|PostScriptTable
name|post
init|=
name|arial
operator|.
name|getPostScript
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|post
argument_list|)
expr_stmt|;
name|String
index|[]
name|glyphNames
init|=
name|arial
operator|.
name|getPostScript
argument_list|()
operator|.
name|getGlyphNames
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|glyphNames
argument_list|)
expr_stmt|;
name|Encoding
name|enc
init|=
operator|new
name|WinAnsiEncoding
argument_list|()
decl_stmt|;
name|int
index|[]
name|charCodes
init|=
name|uc
operator|.
name|getGlyphIdToCharacterCode
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|charCodes
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|gid
init|=
literal|0
init|;
name|gid
operator|<
name|charCodes
operator|.
name|length
condition|;
operator|++
name|gid
control|)
block|{
name|int
name|charCode
init|=
name|charCodes
index|[
name|gid
index|]
decl_stmt|;
name|String
name|name
init|=
name|glyphNames
index|[
name|gid
index|]
decl_stmt|;
if|if
condition|(
name|charCode
operator|<
literal|0x8000
operator|&&
name|charCode
operator|>=
literal|32
condition|)
block|{
if|if
condition|(
literal|"space"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"slash"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"bracketleft"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"bracketright"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"braceleft"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"braceright"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"product"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"integral"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"Omega"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"radical"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"tilde"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|enc
operator|.
name|getNameFromCharacter
argument_list|(
operator|(
name|char
operator|)
name|charCode
argument_list|)
operator|.
name|startsWith
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"bar"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|enc
operator|.
name|getNameFromCharacter
argument_list|(
operator|(
name|char
operator|)
name|charCode
argument_list|)
operator|.
name|endsWith
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"germandbls"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"xff"
argument_list|,
name|enc
operator|.
name|getNameFromCharacter
argument_list|(
operator|(
name|char
operator|)
name|charCode
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"sfthyphen"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"softhyphen"
argument_list|,
name|enc
operator|.
name|getNameFromCharacter
argument_list|(
operator|(
name|char
operator|)
name|charCode
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"periodcentered"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|&&
operator|!
name|enc
operator|.
name|getNameFromCharacter
argument_list|(
operator|(
name|char
operator|)
name|charCode
argument_list|)
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bulletoperator"
argument_list|,
name|enc
operator|.
name|getNameFromCharacter
argument_list|(
operator|(
name|char
operator|)
name|charCode
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"fraction"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"divisionslash"
argument_list|,
name|enc
operator|.
name|getNameFromCharacter
argument_list|(
operator|(
name|char
operator|)
name|charCode
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"mu"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"mu1"
argument_list|,
name|enc
operator|.
name|getNameFromCharacter
argument_list|(
operator|(
name|char
operator|)
name|charCode
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"pi"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0x03c0
argument_list|,
name|charCode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|enc
operator|.
name|getNameFromCharacter
argument_list|(
operator|(
name|char
operator|)
name|charCode
argument_list|)
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

