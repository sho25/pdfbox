begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|function
operator|.
name|type4
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Tests the type 4 function parser.  *  * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|TestParser
extends|extends
name|TestCase
block|{
comment|/**      * Test the very basics.      * @throws Exception if an error occurs      */
specifier|public
name|void
name|testParserBasics
parameter_list|()
throws|throws
name|Exception
block|{
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"3 4 add 2 sub"
argument_list|)
operator|.
name|pop
argument_list|(
literal|5
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
comment|/**      * Test nested blocks.      * @throws Exception if an error occurs      */
specifier|public
name|void
name|testNested
parameter_list|()
throws|throws
name|Exception
block|{
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"true { 2 1 add } { 2 1 sub } ifelse"
argument_list|)
operator|.
name|pop
argument_list|(
literal|3
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"{ true }"
argument_list|)
operator|.
name|pop
argument_list|(
literal|true
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
comment|/**      * Tests parsing of real values.      * @throws Exception if an error occurs      */
specifier|public
name|void
name|testParseFloat
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|InstructionSequenceBuilder
operator|.
name|parseReal
argument_list|(
literal|"0"
argument_list|)
argument_list|,
literal|0.00001f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|InstructionSequenceBuilder
operator|.
name|parseReal
argument_list|(
literal|"1"
argument_list|)
argument_list|,
literal|0.00001f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|InstructionSequenceBuilder
operator|.
name|parseReal
argument_list|(
literal|"+1"
argument_list|)
argument_list|,
literal|0.00001f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|InstructionSequenceBuilder
operator|.
name|parseReal
argument_list|(
literal|"-1"
argument_list|)
argument_list|,
literal|0.00001f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3.14157
argument_list|,
name|InstructionSequenceBuilder
operator|.
name|parseReal
argument_list|(
literal|"3.14157"
argument_list|)
argument_list|,
literal|0.00001f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1.2
argument_list|,
name|InstructionSequenceBuilder
operator|.
name|parseReal
argument_list|(
literal|"-1.2"
argument_list|)
argument_list|,
literal|0.00001f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0E
operator|-
literal|5
argument_list|,
name|InstructionSequenceBuilder
operator|.
name|parseReal
argument_list|(
literal|"1.0E-5"
argument_list|)
argument_list|,
literal|0.00001f
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests problematic functions from PDFBOX-804.      * @throws Exception if an error occurs      */
specifier|public
name|void
name|testJira804
parameter_list|()
throws|throws
name|Exception
block|{
comment|//This is an example of a tint to CMYK function
comment|//Problems here were:
comment|//1. no whitespace between "mul" and "}" (token was detected as "mul}")
comment|//2. line breaks cause endless loops
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"1 {dup dup .72 mul exch 0 exch .38 mul}\n"
argument_list|)
operator|.
name|pop
argument_list|(
literal|0.38f
argument_list|)
operator|.
name|pop
argument_list|(
literal|0f
argument_list|)
operator|.
name|pop
argument_list|(
literal|0.72f
argument_list|)
operator|.
name|pop
argument_list|(
literal|1.0f
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

