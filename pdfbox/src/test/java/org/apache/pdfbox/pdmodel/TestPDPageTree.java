begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|Loader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|documentnavigation
operator|.
name|outline
operator|.
name|PDDocumentOutline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|documentnavigation
operator|.
name|outline
operator|.
name|PDOutlineItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * @author Andrea Vacondio  *  */
end_comment

begin_class
specifier|public
class|class
name|TestPDPageTree
block|{
specifier|private
name|PDDocument
name|doc
decl_stmt|;
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
block|{
name|doc
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|indexOfPageFromOutlineDestination
parameter_list|()
throws|throws
name|IOException
block|{
name|doc
operator|=
name|Loader
operator|.
name|loadPDF
argument_list|(
name|TestPDPageTree
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"with_outline.pdf"
argument_list|)
argument_list|)
expr_stmt|;
name|PDDocumentOutline
name|outline
init|=
name|doc
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|getDocumentOutline
argument_list|()
decl_stmt|;
for|for
control|(
name|PDOutlineItem
name|current
range|:
name|outline
operator|.
name|children
argument_list|()
control|)
block|{
if|if
condition|(
name|current
operator|.
name|getTitle
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Second"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|doc
operator|.
name|getPages
argument_list|()
operator|.
name|indexOf
argument_list|(
name|current
operator|.
name|findDestinationPage
argument_list|(
name|doc
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|positiveSingleLevel
parameter_list|()
throws|throws
name|IOException
block|{
name|doc
operator|=
name|Loader
operator|.
name|loadPDF
argument_list|(
name|TestPDPageTree
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"with_outline.pdf"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|doc
operator|.
name|getNumberOfPages
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|i
argument_list|,
name|doc
operator|.
name|getPages
argument_list|()
operator|.
name|indexOf
argument_list|(
name|doc
operator|.
name|getPage
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|positiveMultipleLevel
parameter_list|()
throws|throws
name|IOException
block|{
name|doc
operator|=
name|Loader
operator|.
name|loadPDF
argument_list|(
name|TestPDPageTree
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"page_tree_multiple_levels.pdf"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|doc
operator|.
name|getNumberOfPages
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|i
argument_list|,
name|doc
operator|.
name|getPages
argument_list|()
operator|.
name|indexOf
argument_list|(
name|doc
operator|.
name|getPage
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|negative
parameter_list|()
throws|throws
name|IOException
block|{
name|doc
operator|=
name|Loader
operator|.
name|loadPDF
argument_list|(
name|TestPDPageTree
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"with_outline.pdf"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|doc
operator|.
name|getPages
argument_list|()
operator|.
name|indexOf
argument_list|(
operator|new
name|PDPage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInsertBeforeBlankPage
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|PDDocument
name|document
init|=
operator|new
name|PDDocument
argument_list|()
init|)
block|{
name|PDPage
name|pageOne
init|=
operator|new
name|PDPage
argument_list|()
decl_stmt|;
name|PDPage
name|pageTwo
init|=
operator|new
name|PDPage
argument_list|()
decl_stmt|;
name|PDPage
name|pageThree
init|=
operator|new
name|PDPage
argument_list|()
decl_stmt|;
name|document
operator|.
name|addPage
argument_list|(
name|pageOne
argument_list|)
expr_stmt|;
name|document
operator|.
name|addPage
argument_list|(
name|pageTwo
argument_list|)
expr_stmt|;
name|document
operator|.
name|getPages
argument_list|()
operator|.
name|insertBefore
argument_list|(
name|pageThree
argument_list|,
name|pageTwo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Page one should be placed at index 0."
argument_list|,
literal|0
argument_list|,
operator|(
name|document
operator|.
name|getPages
argument_list|()
operator|.
name|indexOf
argument_list|(
name|pageOne
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Page two should be placed at index 2."
argument_list|,
literal|2
argument_list|,
operator|(
name|document
operator|.
name|getPages
argument_list|()
operator|.
name|indexOf
argument_list|(
name|pageTwo
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Page three should be placed at index 1."
argument_list|,
literal|1
argument_list|,
operator|(
name|document
operator|.
name|getPages
argument_list|()
operator|.
name|indexOf
argument_list|(
name|pageThree
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInsertAfterBlankPage
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|PDDocument
name|document
init|=
operator|new
name|PDDocument
argument_list|()
init|)
block|{
name|PDPage
name|pageOne
init|=
operator|new
name|PDPage
argument_list|()
decl_stmt|;
name|PDPage
name|pageTwo
init|=
operator|new
name|PDPage
argument_list|()
decl_stmt|;
name|PDPage
name|pageThree
init|=
operator|new
name|PDPage
argument_list|()
decl_stmt|;
name|document
operator|.
name|addPage
argument_list|(
name|pageOne
argument_list|)
expr_stmt|;
name|document
operator|.
name|addPage
argument_list|(
name|pageTwo
argument_list|)
expr_stmt|;
name|document
operator|.
name|getPages
argument_list|()
operator|.
name|insertAfter
argument_list|(
name|pageThree
argument_list|,
name|pageTwo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Page one should be placed at index 0."
argument_list|,
literal|0
argument_list|,
operator|(
name|document
operator|.
name|getPages
argument_list|()
operator|.
name|indexOf
argument_list|(
name|pageOne
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Page two should be placed at index 1."
argument_list|,
literal|1
argument_list|,
operator|(
name|document
operator|.
name|getPages
argument_list|()
operator|.
name|indexOf
argument_list|(
name|pageTwo
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Page three should be placed at index 2."
argument_list|,
literal|2
argument_list|,
operator|(
name|document
operator|.
name|getPages
argument_list|()
operator|.
name|indexOf
argument_list|(
name|pageThree
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

