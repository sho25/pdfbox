begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|form
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test if a sequence of linebreak/paragraph characters produces the same  * number of paragraphs as Adobe Acrobat produces when setting the value  * via JavaScript.  *   */
end_comment

begin_class
specifier|public
class|class
name|PlainTextTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|characterCR
parameter_list|()
block|{
name|PlainText
name|text
init|=
operator|new
name|PlainText
argument_list|(
literal|"CR\rCR"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|text
operator|.
name|getParagraphs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|characterLF
parameter_list|()
block|{
name|PlainText
name|text
init|=
operator|new
name|PlainText
argument_list|(
literal|"LF\nLF"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|text
operator|.
name|getParagraphs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|characterCRLF
parameter_list|()
block|{
name|PlainText
name|text
init|=
operator|new
name|PlainText
argument_list|(
literal|"CRLF\r\nCRLF"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|text
operator|.
name|getParagraphs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|characterLFCR
parameter_list|()
block|{
name|PlainText
name|text
init|=
operator|new
name|PlainText
argument_list|(
literal|"LFCR\n\rLFCR"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|text
operator|.
name|getParagraphs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|characterUnicodeLinebreak
parameter_list|()
block|{
name|PlainText
name|text
init|=
operator|new
name|PlainText
argument_list|(
literal|"linebreak\u2028linebreak"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|text
operator|.
name|getParagraphs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|characterUnicodeParagraphbreak
parameter_list|()
block|{
name|PlainText
name|text
init|=
operator|new
name|PlainText
argument_list|(
literal|"paragraphbreak\u2029paragraphbreak"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|text
operator|.
name|getParagraphs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

