begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|form
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocumentCatalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDRectangle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDType1Font
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAnnotationWidget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|rendering
operator|.
name|TestPDFToImage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test for the PDButton class.  *  */
end_comment

begin_class
specifier|public
class|class
name|PDAcroFormTest
block|{
specifier|private
name|PDDocument
name|document
decl_stmt|;
specifier|private
name|PDAcroForm
name|acroForm
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|File
name|OUT_DIR
init|=
operator|new
name|File
argument_list|(
literal|"target/test-output"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|File
name|IN_DIR
init|=
operator|new
name|File
argument_list|(
literal|"src/test/resources/org/apache/pdfbox/pdmodel/interactive/form"
argument_list|)
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|document
operator|=
operator|new
name|PDDocument
argument_list|()
expr_stmt|;
name|acroForm
operator|=
operator|new
name|PDAcroForm
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|document
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|setAcroForm
argument_list|(
name|acroForm
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFieldsEntry
parameter_list|()
block|{
comment|// the /Fields entry has been created with the AcroForm
comment|// as this is a required entry
name|assertNotNull
argument_list|(
name|acroForm
operator|.
name|getFields
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|acroForm
operator|.
name|getFields
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// there shouldn't be an exception if there is no such field
name|assertNull
argument_list|(
name|acroForm
operator|.
name|getField
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
comment|// remove the required entry which is the case for some
comment|// PDFs (see PDFBOX-2965)
name|acroForm
operator|.
name|getCOSObject
argument_list|()
operator|.
name|removeItem
argument_list|(
name|COSName
operator|.
name|FIELDS
argument_list|)
expr_stmt|;
comment|// ensure there is always an empty collection returned
name|assertNotNull
argument_list|(
name|acroForm
operator|.
name|getFields
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|acroForm
operator|.
name|getFields
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// there shouldn't be an exception if there is no such field
name|assertNull
argument_list|(
name|acroForm
operator|.
name|getField
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAcroFormProperties
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|acroForm
operator|.
name|getDefaultAppearance
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|acroForm
operator|.
name|setDefaultAppearance
argument_list|(
literal|"/Helv 0 Tf 0 g"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|acroForm
operator|.
name|getDefaultAppearance
argument_list|()
argument_list|,
literal|"/Helv 0 Tf 0 g"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFlatten
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|OUT_DIR
argument_list|,
literal|"AlignmentTests-flattened.pdf"
argument_list|)
decl_stmt|;
try|try
init|(
name|PDDocument
name|testPdf
init|=
name|PDDocument
operator|.
name|load
argument_list|(
operator|new
name|File
argument_list|(
name|IN_DIR
argument_list|,
literal|"AlignmentTests.pdf"
argument_list|)
argument_list|)
init|)
block|{
name|testPdf
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|getAcroForm
argument_list|()
operator|.
name|flatten
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|testPdf
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|getAcroForm
argument_list|()
operator|.
name|getFields
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|testPdf
operator|.
name|save
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
comment|// compare rendering
name|TestPDFToImage
name|testPDFToImage
init|=
operator|new
name|TestPDFToImage
argument_list|(
name|TestPDFToImage
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|testPDFToImage
operator|.
name|doTestFile
argument_list|(
name|file
argument_list|,
name|IN_DIR
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|OUT_DIR
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
condition|)
block|{
comment|// don't fail, rendering is different on different systems, result must be viewed manually
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Rendering of "
operator|+
name|file
operator|+
literal|" failed or is not identical to expected rendering in "
operator|+
name|IN_DIR
operator|+
literal|" directory"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*      * Same as above but remove the page reference from the widget annotation      * before doing the flatten() to ensure that the widgets page reference is properly looked up      * (PDFBOX-3301)      */
annotation|@
name|Test
specifier|public
name|void
name|testFlattenWidgetNoRef
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|OUT_DIR
argument_list|,
literal|"AlignmentTests-flattened-noRef.pdf"
argument_list|)
decl_stmt|;
try|try
init|(
name|PDDocument
name|testPdf
init|=
name|PDDocument
operator|.
name|load
argument_list|(
operator|new
name|File
argument_list|(
name|IN_DIR
argument_list|,
literal|"AlignmentTests.pdf"
argument_list|)
argument_list|)
init|)
block|{
name|PDAcroForm
name|acroFormToTest
init|=
name|testPdf
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|getAcroForm
argument_list|()
decl_stmt|;
for|for
control|(
name|PDField
name|field
range|:
name|acroFormToTest
operator|.
name|getFieldTree
argument_list|()
control|)
block|{
for|for
control|(
name|PDAnnotationWidget
name|widget
range|:
name|field
operator|.
name|getWidgets
argument_list|()
control|)
block|{
name|widget
operator|.
name|getCOSObject
argument_list|()
operator|.
name|removeItem
argument_list|(
name|COSName
operator|.
name|P
argument_list|)
expr_stmt|;
block|}
block|}
name|acroFormToTest
operator|.
name|flatten
argument_list|()
expr_stmt|;
comment|// 36 non widget annotations shall not be flattened
name|assertEquals
argument_list|(
literal|36
argument_list|,
name|testPdf
operator|.
name|getPage
argument_list|(
literal|0
argument_list|)
operator|.
name|getAnnotations
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acroFormToTest
operator|.
name|getFields
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|testPdf
operator|.
name|save
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
comment|// compare rendering
name|TestPDFToImage
name|testPDFToImage
init|=
operator|new
name|TestPDFToImage
argument_list|(
name|TestPDFToImage
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|testPDFToImage
operator|.
name|doTestFile
argument_list|(
name|file
argument_list|,
name|IN_DIR
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|OUT_DIR
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
condition|)
block|{
comment|// don't fail, rendering is different on different systems, result must be viewed manually
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Rendering of "
operator|+
name|file
operator|+
literal|" failed or is not identical to expected rendering in "
operator|+
name|IN_DIR
operator|+
literal|" directory"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFlattenSpecificFieldsOnly
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|OUT_DIR
argument_list|,
literal|"AlignmentTests-flattened-specificFields.pdf"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PDField
argument_list|>
name|fieldsToFlatten
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|PDDocument
name|testPdf
init|=
name|PDDocument
operator|.
name|load
argument_list|(
operator|new
name|File
argument_list|(
name|IN_DIR
argument_list|,
literal|"AlignmentTests.pdf"
argument_list|)
argument_list|)
init|)
block|{
name|PDAcroForm
name|acroFormToFlatten
init|=
name|testPdf
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|getAcroForm
argument_list|()
decl_stmt|;
name|int
name|numFieldsBeforeFlatten
init|=
name|acroFormToFlatten
operator|.
name|getFields
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|numWidgetsBeforeFlatten
init|=
name|countWidgets
argument_list|(
name|testPdf
argument_list|)
decl_stmt|;
name|fieldsToFlatten
operator|.
name|add
argument_list|(
name|acroFormToFlatten
operator|.
name|getField
argument_list|(
literal|"AlignLeft-Border_Small-Filled"
argument_list|)
argument_list|)
expr_stmt|;
name|fieldsToFlatten
operator|.
name|add
argument_list|(
name|acroFormToFlatten
operator|.
name|getField
argument_list|(
literal|"AlignLeft-Border_Medium-Filled"
argument_list|)
argument_list|)
expr_stmt|;
name|fieldsToFlatten
operator|.
name|add
argument_list|(
name|acroFormToFlatten
operator|.
name|getField
argument_list|(
literal|"AlignLeft-Border_Wide-Filled"
argument_list|)
argument_list|)
expr_stmt|;
name|fieldsToFlatten
operator|.
name|add
argument_list|(
name|acroFormToFlatten
operator|.
name|getField
argument_list|(
literal|"AlignLeft-Border_Wide_Clipped-Filled"
argument_list|)
argument_list|)
expr_stmt|;
name|acroFormToFlatten
operator|.
name|flatten
argument_list|(
name|fieldsToFlatten
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|int
name|numFieldsAfterFlatten
init|=
name|acroFormToFlatten
operator|.
name|getFields
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|numWidgetsAfterFlatten
init|=
name|countWidgets
argument_list|(
name|testPdf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|numFieldsBeforeFlatten
argument_list|,
name|numFieldsAfterFlatten
operator|+
name|fieldsToFlatten
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numWidgetsBeforeFlatten
argument_list|,
name|numWidgetsAfterFlatten
operator|+
name|fieldsToFlatten
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|testPdf
operator|.
name|save
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*      * Test that we do not modify an AcroForm with missing resource information      * when loading the document only.      * (PDFBOX-3752)      */
annotation|@
name|Test
specifier|public
name|void
name|testDontAddMissingInformationOnDocumentLoad
parameter_list|()
block|{
try|try
block|{
name|byte
index|[]
name|pdfBytes
init|=
name|createAcroFormWithMissingResourceInformation
argument_list|()
decl_stmt|;
try|try
init|(
name|PDDocument
name|pdfDocument
init|=
name|PDDocument
operator|.
name|load
argument_list|(
name|pdfBytes
argument_list|)
init|)
block|{
comment|// do a low level access to the AcroForm to avoid the generation of missing entries
name|PDDocumentCatalog
name|documentCatalog
init|=
name|pdfDocument
operator|.
name|getDocumentCatalog
argument_list|()
decl_stmt|;
name|COSDictionary
name|catalogDictionary
init|=
name|documentCatalog
operator|.
name|getCOSObject
argument_list|()
decl_stmt|;
name|COSDictionary
name|acroFormDictionary
init|=
operator|(
name|COSDictionary
operator|)
name|catalogDictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|ACRO_FORM
argument_list|)
decl_stmt|;
comment|// ensure that the missing information has not been generated
name|assertNull
argument_list|(
name|acroFormDictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|DA
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|acroFormDictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|RESOURCES
argument_list|)
argument_list|)
expr_stmt|;
name|pdfDocument
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Couldn't create test document, test skipped"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|/*      * Test that we add missing ressouce information to an AcroForm       * when accessing the AcroForm on the PD level      * (PDFBOX-3752)      */
annotation|@
name|Test
specifier|public
name|void
name|testAddMissingInformationOnAcroFormAccess
parameter_list|()
block|{
try|try
block|{
name|byte
index|[]
name|pdfBytes
init|=
name|createAcroFormWithMissingResourceInformation
argument_list|()
decl_stmt|;
try|try
init|(
name|PDDocument
name|pdfDocument
init|=
name|PDDocument
operator|.
name|load
argument_list|(
name|pdfBytes
argument_list|)
init|)
block|{
name|PDDocumentCatalog
name|documentCatalog
init|=
name|pdfDocument
operator|.
name|getDocumentCatalog
argument_list|()
decl_stmt|;
comment|// this call shall trigger the generation of missing information
name|PDAcroForm
name|theAcroForm
init|=
name|documentCatalog
operator|.
name|getAcroForm
argument_list|()
decl_stmt|;
comment|// ensure that the missing information has been generated
comment|// DA entry
name|assertEquals
argument_list|(
literal|"/Helv 0 Tf 0 g "
argument_list|,
name|theAcroForm
operator|.
name|getDefaultAppearance
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|theAcroForm
operator|.
name|getDefaultResources
argument_list|()
argument_list|)
expr_stmt|;
comment|// DR entry
name|PDResources
name|acroFormResources
init|=
name|theAcroForm
operator|.
name|getDefaultResources
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|acroFormResources
operator|.
name|getFont
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"Helv"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Helvetica"
argument_list|,
name|acroFormResources
operator|.
name|getFont
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"Helv"
argument_list|)
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|acroFormResources
operator|.
name|getFont
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"ZaDb"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ZapfDingbats"
argument_list|,
name|acroFormResources
operator|.
name|getFont
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"ZaDb"
argument_list|)
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Couldn't create test document, test skipped"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|/**      * PDFBOX-4235: a bad /DA string should not result in an NPE.      *       * @throws IOException       */
annotation|@
name|Test
specifier|public
name|void
name|testBadDA
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|PDDocument
name|doc
init|=
operator|new
name|PDDocument
argument_list|()
init|)
block|{
name|PDPage
name|page
init|=
operator|new
name|PDPage
argument_list|()
decl_stmt|;
name|doc
operator|.
name|addPage
argument_list|(
name|page
argument_list|)
expr_stmt|;
name|PDAcroForm
name|acroForm
init|=
operator|new
name|PDAcroForm
argument_list|(
name|document
argument_list|)
decl_stmt|;
name|doc
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|setAcroForm
argument_list|(
name|acroForm
argument_list|)
expr_stmt|;
name|acroForm
operator|.
name|setDefaultResources
argument_list|(
operator|new
name|PDResources
argument_list|()
argument_list|)
expr_stmt|;
name|PDTextField
name|textBox
init|=
operator|new
name|PDTextField
argument_list|(
name|acroForm
argument_list|)
decl_stmt|;
name|textBox
operator|.
name|setPartialName
argument_list|(
literal|"SampleField"
argument_list|)
expr_stmt|;
comment|// https://stackoverflow.com/questions/50609478/
comment|// "tf" is a typo, should have been "Tf" and this results that no font is chosen
name|textBox
operator|.
name|setDefaultAppearance
argument_list|(
literal|"/Helv 0 tf 0 g"
argument_list|)
expr_stmt|;
name|acroForm
operator|.
name|getFields
argument_list|()
operator|.
name|add
argument_list|(
name|textBox
argument_list|)
expr_stmt|;
name|PDAnnotationWidget
name|widget
init|=
name|textBox
operator|.
name|getWidgets
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|PDRectangle
name|rect
init|=
operator|new
name|PDRectangle
argument_list|(
literal|50
argument_list|,
literal|750
argument_list|,
literal|200
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|widget
operator|.
name|setRectangle
argument_list|(
name|rect
argument_list|)
expr_stmt|;
name|widget
operator|.
name|setPage
argument_list|(
name|page
argument_list|)
expr_stmt|;
name|page
operator|.
name|getAnnotations
argument_list|()
operator|.
name|add
argument_list|(
name|widget
argument_list|)
expr_stmt|;
try|try
block|{
name|textBox
operator|.
name|setValue
argument_list|(
literal|"huhu"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
return|return;
block|}
name|fail
argument_list|(
literal|"IllegalArgumentException should have been thrown"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * PDFBOX-3732, PDFBOX-4303, PDFBOX-4393: Test whether /Helv and /ZaDb get added, but only if      * they don't exist.      */
annotation|@
name|Test
specifier|public
name|void
name|testAcroFormDefaultFonts
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
init|(
name|PDDocument
name|doc
init|=
operator|new
name|PDDocument
argument_list|()
init|)
block|{
name|PDPage
name|page
init|=
operator|new
name|PDPage
argument_list|(
name|PDRectangle
operator|.
name|A4
argument_list|)
decl_stmt|;
name|doc
operator|.
name|addPage
argument_list|(
name|page
argument_list|)
expr_stmt|;
name|PDAcroForm
name|acroForm2
init|=
operator|new
name|PDAcroForm
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|doc
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|setAcroForm
argument_list|(
name|acroForm2
argument_list|)
expr_stmt|;
name|PDResources
name|defaultResources
init|=
name|acroForm2
operator|.
name|getDefaultResources
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|defaultResources
argument_list|)
expr_stmt|;
name|defaultResources
operator|=
operator|new
name|PDResources
argument_list|()
expr_stmt|;
name|acroForm2
operator|.
name|setDefaultResources
argument_list|(
name|defaultResources
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|defaultResources
operator|.
name|getFont
argument_list|(
name|COSName
operator|.
name|HELV
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|defaultResources
operator|.
name|getFont
argument_list|(
name|COSName
operator|.
name|ZA_DB
argument_list|)
argument_list|)
expr_stmt|;
comment|// getting AcroForm sets the two fonts
name|acroForm2
operator|=
name|doc
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|getAcroForm
argument_list|()
expr_stmt|;
name|defaultResources
operator|=
name|acroForm2
operator|.
name|getDefaultResources
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|defaultResources
operator|.
name|getFont
argument_list|(
name|COSName
operator|.
name|HELV
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|defaultResources
operator|.
name|getFont
argument_list|(
name|COSName
operator|.
name|ZA_DB
argument_list|)
argument_list|)
expr_stmt|;
comment|// repeat with a new AcroForm (to delete AcroForm cache) and thus missing /DR
name|doc
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|setAcroForm
argument_list|(
operator|new
name|PDAcroForm
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|acroForm2
operator|=
name|doc
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|getAcroForm
argument_list|()
expr_stmt|;
name|defaultResources
operator|=
name|acroForm2
operator|.
name|getDefaultResources
argument_list|()
expr_stmt|;
name|PDFont
name|helv
init|=
name|defaultResources
operator|.
name|getFont
argument_list|(
name|COSName
operator|.
name|HELV
argument_list|)
decl_stmt|;
name|PDFont
name|zadb
init|=
name|defaultResources
operator|.
name|getFont
argument_list|(
name|COSName
operator|.
name|ZA_DB
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|helv
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|zadb
argument_list|)
expr_stmt|;
name|doc
operator|.
name|save
argument_list|(
name|baos
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|PDDocument
name|doc
init|=
name|PDDocument
operator|.
name|load
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
init|)
block|{
name|PDAcroForm
name|acroForm2
init|=
name|doc
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|getAcroForm
argument_list|()
decl_stmt|;
name|PDResources
name|defaultResources
init|=
name|acroForm2
operator|.
name|getDefaultResources
argument_list|()
decl_stmt|;
name|PDFont
name|helv
init|=
name|defaultResources
operator|.
name|getFont
argument_list|(
name|COSName
operator|.
name|HELV
argument_list|)
decl_stmt|;
name|PDFont
name|zadb
init|=
name|defaultResources
operator|.
name|getFont
argument_list|(
name|COSName
operator|.
name|ZA_DB
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|helv
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|zadb
argument_list|)
expr_stmt|;
comment|// make sure that font wasn't overwritten
name|assertNotEquals
argument_list|(
name|PDType1Font
operator|.
name|HELVETICA
argument_list|,
name|helv
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|PDType1Font
operator|.
name|ZAPF_DINGBATS
argument_list|,
name|zadb
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
name|document
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|byte
index|[]
name|createAcroFormWithMissingResourceInformation
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|PDDocument
name|tmpDocument
init|=
operator|new
name|PDDocument
argument_list|()
init|;
name|ByteArrayOutputStream
name|baos
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
init|)
block|{
name|PDPage
name|page
init|=
operator|new
name|PDPage
argument_list|()
decl_stmt|;
name|tmpDocument
operator|.
name|addPage
argument_list|(
name|page
argument_list|)
expr_stmt|;
name|PDAcroForm
name|newAcroForm
init|=
operator|new
name|PDAcroForm
argument_list|(
name|document
argument_list|)
decl_stmt|;
name|tmpDocument
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|setAcroForm
argument_list|(
name|newAcroForm
argument_list|)
expr_stmt|;
name|PDTextField
name|textBox
init|=
operator|new
name|PDTextField
argument_list|(
name|newAcroForm
argument_list|)
decl_stmt|;
name|textBox
operator|.
name|setPartialName
argument_list|(
literal|"SampleField"
argument_list|)
expr_stmt|;
name|newAcroForm
operator|.
name|getFields
argument_list|()
operator|.
name|add
argument_list|(
name|textBox
argument_list|)
expr_stmt|;
name|PDAnnotationWidget
name|widget
init|=
name|textBox
operator|.
name|getWidgets
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|PDRectangle
name|rect
init|=
operator|new
name|PDRectangle
argument_list|(
literal|50
argument_list|,
literal|750
argument_list|,
literal|200
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|widget
operator|.
name|setRectangle
argument_list|(
name|rect
argument_list|)
expr_stmt|;
name|widget
operator|.
name|setPage
argument_list|(
name|page
argument_list|)
expr_stmt|;
name|page
operator|.
name|getAnnotations
argument_list|()
operator|.
name|add
argument_list|(
name|widget
argument_list|)
expr_stmt|;
comment|// acroForm.setNeedAppearances(true);
comment|// acroForm.getField("SampleField").getCOSObject().setString(COSName.V, "content");
name|tmpDocument
operator|.
name|save
argument_list|(
name|baos
argument_list|)
expr_stmt|;
comment|// this is a working PDF
name|tmpDocument
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|baos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
block|}
specifier|private
name|int
name|countWidgets
parameter_list|(
name|PDDocument
name|documentToTest
parameter_list|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|PDPage
name|page
range|:
name|documentToTest
operator|.
name|getPages
argument_list|()
control|)
block|{
try|try
block|{
for|for
control|(
name|PDAnnotation
name|annotation
range|:
name|page
operator|.
name|getAnnotations
argument_list|()
control|)
block|{
if|if
condition|(
name|annotation
operator|instanceof
name|PDAnnotationWidget
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignoring
block|}
block|}
return|return
name|count
return|;
block|}
block|}
end_class

end_unit

