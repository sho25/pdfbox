begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * This class tests the extraction of document-level metadata.  * @author Neil McErlean  * @since 1.3.0  */
end_comment

begin_class
specifier|public
class|class
name|TestPDDocumentInformation
extends|extends
name|TestCase
block|{
specifier|public
name|void
name|testMetadataExtraction
parameter_list|()
throws|throws
name|Exception
block|{
name|PDDocument
name|doc
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// This document has been selected for this test as it contains custom metadata.
name|doc
operator|=
name|PDDocument
operator|.
name|load
argument_list|(
operator|new
name|File
argument_list|(
literal|"src/test/resources/input/hello3.pdf"
argument_list|)
argument_list|)
expr_stmt|;
name|PDDocumentInformation
name|info
init|=
name|doc
operator|.
name|getDocumentInformation
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong author"
argument_list|,
literal|"Brian Carrier"
argument_list|,
name|info
operator|.
name|getAuthor
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Wrong creationDate"
argument_list|,
name|info
operator|.
name|getCreationDate
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong creator"
argument_list|,
literal|"Acrobat PDFMaker 8.1 for Word"
argument_list|,
name|info
operator|.
name|getCreator
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Wrong keywords"
argument_list|,
name|info
operator|.
name|getKeywords
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Wrong modificationDate"
argument_list|,
name|info
operator|.
name|getModificationDate
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong producer"
argument_list|,
literal|"Acrobat Distiller 8.1.0 (Windows)"
argument_list|,
name|info
operator|.
name|getProducer
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Wrong subject"
argument_list|,
name|info
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Wrong trapped"
argument_list|,
name|info
operator|.
name|getTrapped
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expectedMetadataKeys
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"CreationDate"
argument_list|,
literal|"Author"
argument_list|,
literal|"Creator"
argument_list|,
literal|"Producer"
argument_list|,
literal|"ModDate"
argument_list|,
literal|"Company"
argument_list|,
literal|"SourceModified"
argument_list|,
literal|"Title"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong metadata key count"
argument_list|,
name|expectedMetadataKeys
operator|.
name|size
argument_list|()
argument_list|,
name|info
operator|.
name|getMetadataKeys
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|expectedMetadataKeys
control|)
block|{
name|assertTrue
argument_list|(
literal|"Missing metadata key:"
operator|+
name|key
argument_list|,
name|info
operator|.
name|getMetadataKeys
argument_list|()
operator|.
name|contains
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Custom metadata fields.
name|assertEquals
argument_list|(
literal|"Wrong company"
argument_list|,
literal|"Basis Technology Corp."
argument_list|,
name|info
operator|.
name|getCustomMetadataValue
argument_list|(
literal|"Company"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong sourceModified"
argument_list|,
literal|"D:20080819181502"
argument_list|,
name|info
operator|.
name|getCustomMetadataValue
argument_list|(
literal|"SourceModified"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
block|{
name|doc
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * PDFBOX-3068: test that indirect /Title element of /Info entry can be found.      *       * @throws Exception       */
specifier|public
name|void
name|testPDFBox3068
parameter_list|()
throws|throws
name|Exception
block|{
name|PDDocument
name|doc
init|=
name|PDDocument
operator|.
name|load
argument_list|(
name|TestPDDocumentInformation
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"PDFBOX-3068.pdf"
argument_list|)
argument_list|)
decl_stmt|;
name|PDDocumentInformation
name|documentInformation
init|=
name|doc
operator|.
name|getDocumentInformation
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Title"
argument_list|,
name|documentInformation
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

