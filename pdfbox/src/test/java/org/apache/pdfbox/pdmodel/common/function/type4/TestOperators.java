begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|function
operator|.
name|type4
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Tests all implemented PostScript operators.  *  */
end_comment

begin_class
specifier|public
class|class
name|TestOperators
extends|extends
name|TestCase
block|{
comment|/**      * Tests the "add" operator.      * @throws Exception if an error occurs      */
specifier|public
name|void
name|testAdd
parameter_list|()
throws|throws
name|Exception
block|{
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"5 6 add"
argument_list|)
operator|.
name|pop
argument_list|(
literal|11
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"5 0.23 add"
argument_list|)
operator|.
name|pop
argument_list|(
literal|5.23f
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|int
name|bigValue
init|=
name|Integer
operator|.
name|MAX_VALUE
operator|-
literal|2
decl_stmt|;
name|ExecutionContext
name|context
init|=
name|Type4Tester
operator|.
name|create
argument_list|(
name|bigValue
operator|+
literal|" "
operator|+
name|bigValue
operator|+
literal|" add"
argument_list|)
operator|.
name|toExecutionContext
argument_list|()
decl_stmt|;
name|float
name|floatResult
init|=
operator|(
name|Float
operator|)
name|context
operator|.
name|getStack
argument_list|()
operator|.
name|pop
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
operator|(
name|long
operator|)
name|Integer
operator|.
name|MAX_VALUE
operator|-
literal|4
argument_list|,
name|floatResult
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|context
operator|.
name|getStack
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests the "abs" operator.      * @throws Exception if an error occurs      */
specifier|public
name|void
name|testAbs
parameter_list|()
throws|throws
name|Exception
block|{
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"-3 abs 2.1 abs -2.1 abs -7.5 abs"
argument_list|)
operator|.
name|pop
argument_list|(
literal|7.5f
argument_list|)
operator|.
name|pop
argument_list|(
literal|2.1f
argument_list|)
operator|.
name|pop
argument_list|(
literal|2.1f
argument_list|)
operator|.
name|pop
argument_list|(
literal|3
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
comment|/**      * Tests the "and" operator.      * @throws Exception if an error occurs      */
specifier|public
name|void
name|testAnd
parameter_list|()
throws|throws
name|Exception
block|{
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"true true and true false and"
argument_list|)
operator|.
name|pop
argument_list|(
literal|false
argument_list|)
operator|.
name|pop
argument_list|(
literal|true
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"99 1 and 52 7 and"
argument_list|)
operator|.
name|pop
argument_list|(
literal|4
argument_list|)
operator|.
name|pop
argument_list|(
literal|1
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
comment|/**      * Tests the "atan" operator.      * @throws Exception if an error occurs      */
specifier|public
name|void
name|testAtan
parameter_list|()
throws|throws
name|Exception
block|{
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"0 1 atan"
argument_list|)
operator|.
name|pop
argument_list|(
literal|0f
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"1 0 atan"
argument_list|)
operator|.
name|pop
argument_list|(
literal|90f
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"-100 0 atan"
argument_list|)
operator|.
name|pop
argument_list|(
literal|270f
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"4 4 atan"
argument_list|)
operator|.
name|pop
argument_list|(
literal|45f
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
comment|/**      * Tests the "ceiling" operator.      * @throws Exception if an error occurs      */
specifier|public
name|void
name|testCeiling
parameter_list|()
throws|throws
name|Exception
block|{
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"3.2 ceiling -4.8 ceiling 99 ceiling"
argument_list|)
operator|.
name|pop
argument_list|(
literal|99
argument_list|)
operator|.
name|pop
argument_list|(
operator|-
literal|4f
argument_list|)
operator|.
name|pop
argument_list|(
literal|4f
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
comment|/**      * Tests the "cos" operator.      * @throws Exception if an error occurs      */
specifier|public
name|void
name|testCos
parameter_list|()
throws|throws
name|Exception
block|{
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"0 cos"
argument_list|)
operator|.
name|popReal
argument_list|(
literal|1f
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"90 cos"
argument_list|)
operator|.
name|popReal
argument_list|(
literal|0f
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
comment|/**      * Tests the "cvi" operator.      * @throws Exception if an error occurs      */
specifier|public
name|void
name|testCvi
parameter_list|()
throws|throws
name|Exception
block|{
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"-47.8 cvi"
argument_list|)
operator|.
name|pop
argument_list|(
operator|-
literal|47
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"520.9 cvi"
argument_list|)
operator|.
name|pop
argument_list|(
literal|520
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
comment|/**      * Tests the "cvr" operator.      * @throws Exception if an error occurs      */
specifier|public
name|void
name|testCvr
parameter_list|()
throws|throws
name|Exception
block|{
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"-47.8 cvr"
argument_list|)
operator|.
name|popReal
argument_list|(
operator|-
literal|47.8f
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"520.9 cvr"
argument_list|)
operator|.
name|popReal
argument_list|(
literal|520.9f
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"77 cvr"
argument_list|)
operator|.
name|popReal
argument_list|(
literal|77f
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
comment|//Check that the data types are really right
name|ExecutionContext
name|context
init|=
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"77 77 cvr"
argument_list|)
operator|.
name|toExecutionContext
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected a real as the result of 'cvr'"
argument_list|,
name|context
operator|.
name|getStack
argument_list|()
operator|.
name|pop
argument_list|()
operator|instanceof
name|Float
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected an int from an integer literal"
argument_list|,
name|context
operator|.
name|getStack
argument_list|()
operator|.
name|pop
argument_list|()
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests the "div" operator.      * @throws Exception if an error occurs      */
specifier|public
name|void
name|testDiv
parameter_list|()
throws|throws
name|Exception
block|{
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"3 2 div"
argument_list|)
operator|.
name|popReal
argument_list|(
literal|1.5f
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"4 2 div"
argument_list|)
operator|.
name|popReal
argument_list|(
literal|2.0f
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
comment|/**      * Tests the "exp" operator.      * @throws Exception if an error occurs      */
specifier|public
name|void
name|testExp
parameter_list|()
throws|throws
name|Exception
block|{
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"9 0.5 exp"
argument_list|)
operator|.
name|popReal
argument_list|(
literal|3.0f
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"-9 -1 exp"
argument_list|)
operator|.
name|popReal
argument_list|(
operator|-
literal|0.111111f
argument_list|,
literal|0.000001
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
comment|/**      * Tests the "floor" operator.      * @throws Exception if an error occurs      */
specifier|public
name|void
name|testFloor
parameter_list|()
throws|throws
name|Exception
block|{
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"3.2 floor -4.8 floor 99 floor"
argument_list|)
operator|.
name|pop
argument_list|(
literal|99
argument_list|)
operator|.
name|pop
argument_list|(
operator|-
literal|5f
argument_list|)
operator|.
name|pop
argument_list|(
literal|3f
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
comment|/**      * Tests the "div" operator.      * @throws Exception if an error occurs      */
specifier|public
name|void
name|testIDiv
parameter_list|()
throws|throws
name|Exception
block|{
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"3 2 idiv"
argument_list|)
operator|.
name|pop
argument_list|(
literal|1
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"4 2 idiv"
argument_list|)
operator|.
name|pop
argument_list|(
literal|2
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"-5 2 idiv"
argument_list|)
operator|.
name|pop
argument_list|(
operator|-
literal|2
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
try|try
block|{
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"4.4 2 idiv"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected typecheck"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|cce
parameter_list|)
block|{
comment|//expected
block|}
block|}
comment|/**      * Tests the "ln" operator.      * @throws Exception if an error occurs      */
specifier|public
name|void
name|testLn
parameter_list|()
throws|throws
name|Exception
block|{
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"10 ln"
argument_list|)
operator|.
name|popReal
argument_list|(
literal|2.30259f
argument_list|,
literal|0.00001f
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"100 ln"
argument_list|)
operator|.
name|popReal
argument_list|(
literal|4.60517f
argument_list|,
literal|0.00001f
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
comment|/**      * Tests the "log" operator.      * @throws Exception if an error occurs      */
specifier|public
name|void
name|testLog
parameter_list|()
throws|throws
name|Exception
block|{
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"10 log"
argument_list|)
operator|.
name|popReal
argument_list|(
literal|1.0f
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"100 log"
argument_list|)
operator|.
name|popReal
argument_list|(
literal|2.0f
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
comment|/**      * Tests the "mod" operator.      * @throws Exception if an error occurs      */
specifier|public
name|void
name|testMod
parameter_list|()
throws|throws
name|Exception
block|{
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"5 3 mod"
argument_list|)
operator|.
name|pop
argument_list|(
literal|2
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"5 2 mod"
argument_list|)
operator|.
name|pop
argument_list|(
literal|1
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"-5 3 mod"
argument_list|)
operator|.
name|pop
argument_list|(
operator|-
literal|2
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
try|try
block|{
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"4.4 2 mod"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected typecheck"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|cce
parameter_list|)
block|{
comment|//expected
block|}
block|}
comment|/**      * Tests the "mul" operator.      * @throws Exception if an error occurs      */
specifier|public
name|void
name|testMul
parameter_list|()
throws|throws
name|Exception
block|{
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"1 2 mul"
argument_list|)
operator|.
name|pop
argument_list|(
literal|2
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"1.5 2 mul"
argument_list|)
operator|.
name|popReal
argument_list|(
literal|3.0f
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"1.5 2.1 mul"
argument_list|)
operator|.
name|popReal
argument_list|(
literal|3.15f
argument_list|,
literal|0.001
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|Type4Tester
operator|.
name|create
argument_list|(
operator|(
name|Integer
operator|.
name|MAX_VALUE
operator|-
literal|3
operator|)
operator|+
literal|" 2 mul"
argument_list|)
comment|//integer overflow -> real
operator|.
name|popReal
argument_list|(
literal|2L
operator|*
operator|(
name|Integer
operator|.
name|MAX_VALUE
operator|-
literal|3
operator|)
argument_list|,
literal|0.001
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
comment|/**      * Tests the "neg" operator.      * @throws Exception if an error occurs      */
specifier|public
name|void
name|testNeg
parameter_list|()
throws|throws
name|Exception
block|{
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"4.5 neg"
argument_list|)
operator|.
name|popReal
argument_list|(
operator|-
literal|4.5f
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"-3 neg"
argument_list|)
operator|.
name|pop
argument_list|(
literal|3
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
comment|//Border cases
name|Type4Tester
operator|.
name|create
argument_list|(
operator|(
name|Integer
operator|.
name|MIN_VALUE
operator|+
literal|1
operator|)
operator|+
literal|" neg"
argument_list|)
operator|.
name|pop
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|Type4Tester
operator|.
name|create
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
operator|+
literal|" neg"
argument_list|)
operator|.
name|popReal
argument_list|(
operator|-
operator|(
name|float
operator|)
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
comment|/**      * Tests the "round" operator.      * @throws Exception if an error occurs      */
specifier|public
name|void
name|testRound
parameter_list|()
throws|throws
name|Exception
block|{
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"3.2 round"
argument_list|)
operator|.
name|popReal
argument_list|(
literal|3.0f
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"6.5 round"
argument_list|)
operator|.
name|popReal
argument_list|(
literal|7.0f
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"-4.8 round"
argument_list|)
operator|.
name|popReal
argument_list|(
operator|-
literal|5.0f
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"-6.5 round"
argument_list|)
operator|.
name|popReal
argument_list|(
operator|-
literal|6.0f
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"99 round"
argument_list|)
operator|.
name|pop
argument_list|(
literal|99
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
comment|/**      * Tests the "sin" operator.      * @throws Exception if an error occurs      */
specifier|public
name|void
name|testSin
parameter_list|()
throws|throws
name|Exception
block|{
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"0 sin"
argument_list|)
operator|.
name|popReal
argument_list|(
literal|0f
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"90 sin"
argument_list|)
operator|.
name|popReal
argument_list|(
literal|1f
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"-90.0 sin"
argument_list|)
operator|.
name|popReal
argument_list|(
operator|-
literal|1f
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
comment|/**      * Tests the "sqrt" operator.      * @throws Exception if an error occurs      */
specifier|public
name|void
name|testSqrt
parameter_list|()
throws|throws
name|Exception
block|{
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"0 sqrt"
argument_list|)
operator|.
name|popReal
argument_list|(
literal|0f
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"1 sqrt"
argument_list|)
operator|.
name|popReal
argument_list|(
literal|1f
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"4 sqrt"
argument_list|)
operator|.
name|popReal
argument_list|(
literal|2f
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"4.4 sqrt"
argument_list|)
operator|.
name|popReal
argument_list|(
literal|2.097617f
argument_list|,
literal|0.000001
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
try|try
block|{
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"-4.1 sqrt"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected rangecheck"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
comment|//expected
block|}
block|}
comment|/**      * Tests the "sub" operator.      * @throws Exception if an error occurs      */
specifier|public
name|void
name|testSub
parameter_list|()
throws|throws
name|Exception
block|{
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"5 2 sub -7.5 1 sub"
argument_list|)
operator|.
name|pop
argument_list|(
operator|-
literal|8.5f
argument_list|)
operator|.
name|pop
argument_list|(
literal|3
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
comment|/**      * Tests the "truncate" operator.      * @throws Exception if an error occurs      */
specifier|public
name|void
name|testTruncate
parameter_list|()
throws|throws
name|Exception
block|{
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"3.2 truncate"
argument_list|)
operator|.
name|popReal
argument_list|(
literal|3.0f
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"-4.8 truncate"
argument_list|)
operator|.
name|popReal
argument_list|(
operator|-
literal|4.0f
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"99 truncate"
argument_list|)
operator|.
name|pop
argument_list|(
literal|99
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
comment|/**      * Tests the "bitshift" operator.      * @throws Exception if an error occurs      */
specifier|public
name|void
name|testBitshift
parameter_list|()
throws|throws
name|Exception
block|{
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"7 3 bitshift 142 -3 bitshift"
argument_list|)
operator|.
name|pop
argument_list|(
literal|17
argument_list|)
operator|.
name|pop
argument_list|(
literal|56
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
comment|/**      * Tests the "eq" operator.      * @throws Exception if an error occurs      */
specifier|public
name|void
name|testEq
parameter_list|()
throws|throws
name|Exception
block|{
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"7 7 eq 7 6 eq 7 -7 eq true true eq false true eq 7.7 7.7 eq"
argument_list|)
operator|.
name|pop
argument_list|(
literal|true
argument_list|)
operator|.
name|pop
argument_list|(
literal|false
argument_list|)
operator|.
name|pop
argument_list|(
literal|true
argument_list|)
operator|.
name|pop
argument_list|(
literal|false
argument_list|)
operator|.
name|pop
argument_list|(
literal|false
argument_list|)
operator|.
name|pop
argument_list|(
literal|true
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
comment|/**      * Tests the "ge" operator.      * @throws Exception if an error occurs      */
specifier|public
name|void
name|testGe
parameter_list|()
throws|throws
name|Exception
block|{
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"5 7 ge 7 5 ge 7 7 ge -1 2 ge"
argument_list|)
operator|.
name|pop
argument_list|(
literal|false
argument_list|)
operator|.
name|pop
argument_list|(
literal|true
argument_list|)
operator|.
name|pop
argument_list|(
literal|true
argument_list|)
operator|.
name|pop
argument_list|(
literal|false
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
comment|/**      * Tests the "gt" operator.      * @throws Exception if an error occurs      */
specifier|public
name|void
name|testGt
parameter_list|()
throws|throws
name|Exception
block|{
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"5 7 gt 7 5 gt 7 7 gt -1 2 gt"
argument_list|)
operator|.
name|pop
argument_list|(
literal|false
argument_list|)
operator|.
name|pop
argument_list|(
literal|false
argument_list|)
operator|.
name|pop
argument_list|(
literal|true
argument_list|)
operator|.
name|pop
argument_list|(
literal|false
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
comment|/**      * Tests the "le" operator.      * @throws Exception if an error occurs      */
specifier|public
name|void
name|testLe
parameter_list|()
throws|throws
name|Exception
block|{
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"5 7 le 7 5 le 7 7 le -1 2 le"
argument_list|)
operator|.
name|pop
argument_list|(
literal|true
argument_list|)
operator|.
name|pop
argument_list|(
literal|true
argument_list|)
operator|.
name|pop
argument_list|(
literal|false
argument_list|)
operator|.
name|pop
argument_list|(
literal|true
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
comment|/**      * Tests the "lt" operator.      * @throws Exception if an error occurs      */
specifier|public
name|void
name|testLt
parameter_list|()
throws|throws
name|Exception
block|{
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"5 7 lt 7 5 lt 7 7 lt -1 2 lt"
argument_list|)
operator|.
name|pop
argument_list|(
literal|true
argument_list|)
operator|.
name|pop
argument_list|(
literal|false
argument_list|)
operator|.
name|pop
argument_list|(
literal|false
argument_list|)
operator|.
name|pop
argument_list|(
literal|true
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
comment|/**      * Tests the "ne" operator.      * @throws Exception if an error occurs      */
specifier|public
name|void
name|testNe
parameter_list|()
throws|throws
name|Exception
block|{
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"7 7 ne 7 6 ne 7 -7 ne true true ne false true ne 7.7 7.7 ne"
argument_list|)
operator|.
name|pop
argument_list|(
literal|false
argument_list|)
operator|.
name|pop
argument_list|(
literal|true
argument_list|)
operator|.
name|pop
argument_list|(
literal|false
argument_list|)
operator|.
name|pop
argument_list|(
literal|true
argument_list|)
operator|.
name|pop
argument_list|(
literal|true
argument_list|)
operator|.
name|pop
argument_list|(
literal|false
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
comment|/**      * Tests the "not" operator.      * @throws Exception if an error occurs      */
specifier|public
name|void
name|testNot
parameter_list|()
throws|throws
name|Exception
block|{
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"true not false not"
argument_list|)
operator|.
name|pop
argument_list|(
literal|true
argument_list|)
operator|.
name|pop
argument_list|(
literal|false
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"52 not -37 not"
argument_list|)
operator|.
name|pop
argument_list|(
literal|37
argument_list|)
operator|.
name|pop
argument_list|(
operator|-
literal|52
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
comment|/**      * Tests the "or" operator.      * @throws Exception if an error occurs      */
specifier|public
name|void
name|testOr
parameter_list|()
throws|throws
name|Exception
block|{
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"true true or true false or false false or"
argument_list|)
operator|.
name|pop
argument_list|(
literal|false
argument_list|)
operator|.
name|pop
argument_list|(
literal|true
argument_list|)
operator|.
name|pop
argument_list|(
literal|true
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"17 5 or 1 1 or"
argument_list|)
operator|.
name|pop
argument_list|(
literal|1
argument_list|)
operator|.
name|pop
argument_list|(
literal|21
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
comment|/**      * Tests the "cor" operator.      * @throws Exception if an error occurs      */
specifier|public
name|void
name|testXor
parameter_list|()
throws|throws
name|Exception
block|{
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"true true xor true false xor false false xor"
argument_list|)
operator|.
name|pop
argument_list|(
literal|false
argument_list|)
operator|.
name|pop
argument_list|(
literal|true
argument_list|)
operator|.
name|pop
argument_list|(
literal|false
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"7 3 xor 12 3 or"
argument_list|)
operator|.
name|pop
argument_list|(
literal|15
argument_list|)
operator|.
name|pop
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests the "if" operator.      * @throws Exception if an error occurs      */
specifier|public
name|void
name|testIf
parameter_list|()
throws|throws
name|Exception
block|{
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"true { 2 1 add } if"
argument_list|)
operator|.
name|pop
argument_list|(
literal|3
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"false { 2 1 add } if"
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
try|try
block|{
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"0 { 2 1 add } if"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Need typecheck error for the '0'"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|cce
parameter_list|)
block|{
comment|//expected
block|}
block|}
comment|/**      * Tests the "ifelse" operator.      * @throws Exception if an error occurs      */
specifier|public
name|void
name|testIfElse
parameter_list|()
throws|throws
name|Exception
block|{
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"true { 2 1 add } { 2 1 sub } ifelse"
argument_list|)
operator|.
name|pop
argument_list|(
literal|3
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"false { 2 1 add } { 2 1 sub } ifelse"
argument_list|)
operator|.
name|pop
argument_list|(
literal|1
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
comment|/**      * Tests the "copy" operator.      * @throws Exception if an error occurs      */
specifier|public
name|void
name|testCopy
parameter_list|()
throws|throws
name|Exception
block|{
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"true 1 2 3 3 copy"
argument_list|)
operator|.
name|pop
argument_list|(
literal|3
argument_list|)
operator|.
name|pop
argument_list|(
literal|2
argument_list|)
operator|.
name|pop
argument_list|(
literal|1
argument_list|)
operator|.
name|pop
argument_list|(
literal|3
argument_list|)
operator|.
name|pop
argument_list|(
literal|2
argument_list|)
operator|.
name|pop
argument_list|(
literal|1
argument_list|)
operator|.
name|pop
argument_list|(
literal|true
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
comment|/**      * Tests the "dup" operator.      * @throws Exception if an error occurs      */
specifier|public
name|void
name|testDup
parameter_list|()
throws|throws
name|Exception
block|{
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"true 1 2 dup"
argument_list|)
operator|.
name|pop
argument_list|(
literal|2
argument_list|)
operator|.
name|pop
argument_list|(
literal|2
argument_list|)
operator|.
name|pop
argument_list|(
literal|1
argument_list|)
operator|.
name|pop
argument_list|(
literal|true
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"true dup"
argument_list|)
operator|.
name|pop
argument_list|(
literal|true
argument_list|)
operator|.
name|pop
argument_list|(
literal|true
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
comment|/**      * Tests the "exch" operator.      * @throws Exception if an error occurs      */
specifier|public
name|void
name|testExch
parameter_list|()
throws|throws
name|Exception
block|{
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"true 1 exch"
argument_list|)
operator|.
name|pop
argument_list|(
literal|true
argument_list|)
operator|.
name|pop
argument_list|(
literal|1
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"1 2.5 exch"
argument_list|)
operator|.
name|pop
argument_list|(
literal|1
argument_list|)
operator|.
name|pop
argument_list|(
literal|2.5f
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
comment|/**      * Tests the "index" operator.      * @throws Exception if an error occurs      */
specifier|public
name|void
name|testIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"1 2 3 4 0 index"
argument_list|)
operator|.
name|pop
argument_list|(
literal|4
argument_list|)
operator|.
name|pop
argument_list|(
literal|4
argument_list|)
operator|.
name|pop
argument_list|(
literal|3
argument_list|)
operator|.
name|pop
argument_list|(
literal|2
argument_list|)
operator|.
name|pop
argument_list|(
literal|1
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"1 2 3 4 3 index"
argument_list|)
operator|.
name|pop
argument_list|(
literal|1
argument_list|)
operator|.
name|pop
argument_list|(
literal|4
argument_list|)
operator|.
name|pop
argument_list|(
literal|3
argument_list|)
operator|.
name|pop
argument_list|(
literal|2
argument_list|)
operator|.
name|pop
argument_list|(
literal|1
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
comment|/**      * Tests the "pop" operator.      * @throws Exception if an error occurs      */
specifier|public
name|void
name|testPop
parameter_list|()
throws|throws
name|Exception
block|{
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"1 pop 7 2 pop"
argument_list|)
operator|.
name|pop
argument_list|(
literal|7
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"1 2 3 pop pop"
argument_list|)
operator|.
name|pop
argument_list|(
literal|1
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
comment|/**      * Tests the "roll" operator.      * @throws Exception if an error occurs      */
specifier|public
name|void
name|testRoll
parameter_list|()
throws|throws
name|Exception
block|{
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"1 2 3 4 5 5 -2 roll"
argument_list|)
operator|.
name|pop
argument_list|(
literal|2
argument_list|)
operator|.
name|pop
argument_list|(
literal|1
argument_list|)
operator|.
name|pop
argument_list|(
literal|5
argument_list|)
operator|.
name|pop
argument_list|(
literal|4
argument_list|)
operator|.
name|pop
argument_list|(
literal|3
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"1 2 3 4 5 5 2 roll"
argument_list|)
operator|.
name|pop
argument_list|(
literal|3
argument_list|)
operator|.
name|pop
argument_list|(
literal|2
argument_list|)
operator|.
name|pop
argument_list|(
literal|1
argument_list|)
operator|.
name|pop
argument_list|(
literal|5
argument_list|)
operator|.
name|pop
argument_list|(
literal|4
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|Type4Tester
operator|.
name|create
argument_list|(
literal|"1 2 3 3 0 roll"
argument_list|)
operator|.
name|pop
argument_list|(
literal|3
argument_list|)
operator|.
name|pop
argument_list|(
literal|2
argument_list|)
operator|.
name|pop
argument_list|(
literal|1
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

