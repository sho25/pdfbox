begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2014 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|image
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Graphics
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|BufferedImage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|ImageIO
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDDeviceGray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDDeviceRGB
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|image
operator|.
name|ValidateXImage
operator|.
name|validate
import|;
end_import

begin_comment
comment|/**  * Unit tests for JPEGFactory  *  * @author Tilman Hausherr  */
end_comment

begin_class
specifier|public
class|class
name|JPEGFactoryTest
extends|extends
name|TestCase
block|{
comment|/**      * Tests JPEGFactory#createFromStream(PDDocument document, InputStream      * stream) with color JPEG file      */
specifier|public
name|void
name|testCreateFromStream
parameter_list|()
throws|throws
name|IOException
block|{
name|PDDocument
name|document
init|=
operator|new
name|PDDocument
argument_list|()
decl_stmt|;
name|InputStream
name|stream
init|=
name|JPEGFactoryTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"jpeg.jpg"
argument_list|)
decl_stmt|;
name|PDImageXObject
name|ximage
init|=
name|JPEGFactory
operator|.
name|createFromStream
argument_list|(
name|document
argument_list|,
name|stream
argument_list|)
decl_stmt|;
name|validate
argument_list|(
name|ximage
argument_list|,
literal|8
argument_list|,
literal|344
argument_list|,
literal|287
argument_list|,
literal|"jpg"
argument_list|,
name|PDDeviceRGB
operator|.
name|INSTANCE
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PDDeviceRGB
operator|.
name|INSTANCE
argument_list|,
name|ximage
operator|.
name|getColorSpace
argument_list|()
argument_list|)
expr_stmt|;
name|document
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * Tests JPEGFactory#createFromStream(PDDocument document, InputStream      * stream) with gray JPEG file      */
specifier|public
name|void
name|testCreateFromStream256
parameter_list|()
throws|throws
name|IOException
block|{
name|PDDocument
name|document
init|=
operator|new
name|PDDocument
argument_list|()
decl_stmt|;
name|InputStream
name|stream
init|=
name|JPEGFactoryTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"jpeg256.jpg"
argument_list|)
decl_stmt|;
name|PDImageXObject
name|ximage
init|=
name|JPEGFactory
operator|.
name|createFromStream
argument_list|(
name|document
argument_list|,
name|stream
argument_list|)
decl_stmt|;
name|validate
argument_list|(
name|ximage
argument_list|,
literal|8
argument_list|,
literal|344
argument_list|,
literal|287
argument_list|,
literal|"jpg"
argument_list|,
name|PDDeviceGray
operator|.
name|INSTANCE
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PDDeviceGray
operator|.
name|INSTANCE
argument_list|,
name|ximage
operator|.
name|getColorSpace
argument_list|()
argument_list|)
expr_stmt|;
name|document
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * Tests RGB JPEGFactory#createFromImage(PDDocument document, BufferedImage      * image) with color JPEG image      */
specifier|public
name|void
name|testCreateFromImageRGB
parameter_list|()
throws|throws
name|IOException
block|{
name|PDDocument
name|document
init|=
operator|new
name|PDDocument
argument_list|()
decl_stmt|;
name|BufferedImage
name|image
init|=
name|ImageIO
operator|.
name|read
argument_list|(
name|JPEGFactoryTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"jpeg.jpg"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|image
operator|.
name|getColorModel
argument_list|()
operator|.
name|getNumComponents
argument_list|()
argument_list|)
expr_stmt|;
name|PDImageXObject
name|ximage
init|=
name|JPEGFactory
operator|.
name|createFromImage
argument_list|(
name|document
argument_list|,
name|image
argument_list|)
decl_stmt|;
name|validate
argument_list|(
name|ximage
argument_list|,
literal|8
argument_list|,
literal|344
argument_list|,
literal|287
argument_list|,
literal|"jpg"
argument_list|,
name|PDDeviceRGB
operator|.
name|INSTANCE
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PDDeviceRGB
operator|.
name|INSTANCE
argument_list|,
name|ximage
operator|.
name|getColorSpace
argument_list|()
argument_list|)
expr_stmt|;
name|document
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * Tests RGB JPEGFactory#createFromImage(PDDocument document, BufferedImage      * image) with gray JPEG image      */
specifier|public
name|void
name|testCreateFromImage256
parameter_list|()
throws|throws
name|IOException
block|{
name|PDDocument
name|document
init|=
operator|new
name|PDDocument
argument_list|()
decl_stmt|;
name|BufferedImage
name|image
init|=
name|ImageIO
operator|.
name|read
argument_list|(
name|JPEGFactoryTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"jpeg256.jpg"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|image
operator|.
name|getColorModel
argument_list|()
operator|.
name|getNumComponents
argument_list|()
argument_list|)
expr_stmt|;
name|PDImageXObject
name|ximage
init|=
name|JPEGFactory
operator|.
name|createFromImage
argument_list|(
name|document
argument_list|,
name|image
argument_list|)
decl_stmt|;
name|validate
argument_list|(
name|ximage
argument_list|,
literal|8
argument_list|,
literal|344
argument_list|,
literal|287
argument_list|,
literal|"jpg"
argument_list|,
name|PDDeviceGray
operator|.
name|INSTANCE
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PDDeviceGray
operator|.
name|INSTANCE
argument_list|,
name|ximage
operator|.
name|getColorSpace
argument_list|()
argument_list|)
expr_stmt|;
name|document
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * Tests ARGB JPEGFactory#createFromImage(PDDocument document, BufferedImage      * image)      */
specifier|public
name|void
name|testCreateFromImageARGB
parameter_list|()
throws|throws
name|IOException
block|{
name|PDDocument
name|document
init|=
operator|new
name|PDDocument
argument_list|()
decl_stmt|;
name|BufferedImage
name|image
init|=
name|ImageIO
operator|.
name|read
argument_list|(
name|JPEGFactoryTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"jpeg.jpg"
argument_list|)
argument_list|)
decl_stmt|;
comment|// create an ARGB image
name|int
name|w
init|=
name|image
operator|.
name|getWidth
argument_list|()
decl_stmt|;
name|int
name|h
init|=
name|image
operator|.
name|getHeight
argument_list|()
decl_stmt|;
name|BufferedImage
name|argbImage
init|=
operator|new
name|BufferedImage
argument_list|(
name|w
argument_list|,
name|h
argument_list|,
name|BufferedImage
operator|.
name|TYPE_INT_ARGB
argument_list|)
decl_stmt|;
name|Graphics
name|ag
init|=
name|argbImage
operator|.
name|getGraphics
argument_list|()
decl_stmt|;
name|ag
operator|.
name|drawImage
argument_list|(
name|image
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ag
operator|.
name|dispose
argument_list|()
expr_stmt|;
comment|// create a weird transparency triangle
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|h
condition|;
operator|++
name|y
control|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|Math
operator|.
name|min
argument_list|(
name|y
argument_list|,
name|w
argument_list|)
condition|;
operator|++
name|x
control|)
block|{
name|argbImage
operator|.
name|setRGB
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|image
operator|.
name|getRGB
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|&
literal|0xFFFFFF
operator||
operator|(
operator|(
name|x
operator|*
literal|255
operator|/
name|w
operator|)
operator|<<
literal|24
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//TODO uncomment if ImageFactory.getAlphaImage() ever works
comment|//        PDImageXObject ximage = JPEGFactory.createFromImage(document, argbImage);
comment|//        validate(ximage, 8, 344, 287, "jpg");
comment|//        assertNotNull(ximage.getSoftMask());
comment|//        validate(ximage.getSoftMask(), 8, 344, 287, "jpg");
name|document
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

