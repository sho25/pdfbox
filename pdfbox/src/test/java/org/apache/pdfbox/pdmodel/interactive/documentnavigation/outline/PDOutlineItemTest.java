begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|documentnavigation
operator|.
name|outline
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * @author Andrea Vacondio  *  */
end_comment

begin_class
specifier|public
class|class
name|PDOutlineItemTest
block|{
specifier|private
name|PDOutlineItem
name|root
decl_stmt|;
specifier|private
name|PDOutlineItem
name|first
decl_stmt|;
specifier|private
name|PDOutlineItem
name|second
decl_stmt|;
specifier|private
name|PDOutlineItem
name|newSibling
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|root
operator|=
operator|new
name|PDOutlineItem
argument_list|()
expr_stmt|;
name|first
operator|=
operator|new
name|PDOutlineItem
argument_list|()
expr_stmt|;
name|second
operator|=
operator|new
name|PDOutlineItem
argument_list|()
expr_stmt|;
name|root
operator|.
name|addLast
argument_list|(
name|first
argument_list|)
expr_stmt|;
name|root
operator|.
name|addLast
argument_list|(
name|second
argument_list|)
expr_stmt|;
name|newSibling
operator|=
operator|new
name|PDOutlineItem
argument_list|()
expr_stmt|;
name|newSibling
operator|.
name|addLast
argument_list|(
operator|new
name|PDOutlineItem
argument_list|()
argument_list|)
expr_stmt|;
name|newSibling
operator|.
name|addLast
argument_list|(
operator|new
name|PDOutlineItem
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|insertSiblingAfter_OpenChildToOpenParent
parameter_list|()
block|{
name|newSibling
operator|.
name|openNode
argument_list|()
expr_stmt|;
name|root
operator|.
name|openNode
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|root
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
name|first
operator|.
name|insertSiblingAfter
argument_list|(
name|newSibling
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|first
operator|.
name|getNextSibling
argument_list|()
argument_list|,
name|newSibling
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|second
operator|.
name|getPreviousSibling
argument_list|()
argument_list|,
name|newSibling
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|root
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|insertSiblingBefore_OpenChildToOpenParent
parameter_list|()
block|{
name|newSibling
operator|.
name|openNode
argument_list|()
expr_stmt|;
name|root
operator|.
name|openNode
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|root
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
name|second
operator|.
name|insertSiblingBefore
argument_list|(
name|newSibling
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|first
operator|.
name|getNextSibling
argument_list|()
argument_list|,
name|newSibling
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|second
operator|.
name|getPreviousSibling
argument_list|()
argument_list|,
name|newSibling
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|root
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|insertSiblingAfter_OpenChildToClosedParent
parameter_list|()
block|{
name|newSibling
operator|.
name|openNode
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|2
argument_list|,
name|root
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
name|first
operator|.
name|insertSiblingAfter
argument_list|(
name|newSibling
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|first
operator|.
name|getNextSibling
argument_list|()
argument_list|,
name|newSibling
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|second
operator|.
name|getPreviousSibling
argument_list|()
argument_list|,
name|newSibling
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|5
argument_list|,
name|root
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|insertSiblingBefore_OpenChildToClosedParent
parameter_list|()
block|{
name|newSibling
operator|.
name|openNode
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|2
argument_list|,
name|root
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
name|second
operator|.
name|insertSiblingBefore
argument_list|(
name|newSibling
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|first
operator|.
name|getNextSibling
argument_list|()
argument_list|,
name|newSibling
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|second
operator|.
name|getPreviousSibling
argument_list|()
argument_list|,
name|newSibling
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|5
argument_list|,
name|root
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|insertSiblingAfter_ClosedChildToOpenParent
parameter_list|()
block|{
name|root
operator|.
name|openNode
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|root
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
name|first
operator|.
name|insertSiblingAfter
argument_list|(
name|newSibling
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|first
operator|.
name|getNextSibling
argument_list|()
argument_list|,
name|newSibling
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|second
operator|.
name|getPreviousSibling
argument_list|()
argument_list|,
name|newSibling
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|root
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|insertSiblingBefore_ClosedChildToOpenParent
parameter_list|()
block|{
name|root
operator|.
name|openNode
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|root
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
name|second
operator|.
name|insertSiblingBefore
argument_list|(
name|newSibling
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|first
operator|.
name|getNextSibling
argument_list|()
argument_list|,
name|newSibling
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|second
operator|.
name|getPreviousSibling
argument_list|()
argument_list|,
name|newSibling
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|root
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|insertSiblingAfter_ClosedChildToClosedParent
parameter_list|()
block|{
name|assertEquals
argument_list|(
operator|-
literal|2
argument_list|,
name|root
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
name|first
operator|.
name|insertSiblingAfter
argument_list|(
name|newSibling
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|first
operator|.
name|getNextSibling
argument_list|()
argument_list|,
name|newSibling
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|second
operator|.
name|getPreviousSibling
argument_list|()
argument_list|,
name|newSibling
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|3
argument_list|,
name|root
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|insertSiblingBefore_ClosedChildToClosedParent
parameter_list|()
block|{
name|assertEquals
argument_list|(
operator|-
literal|2
argument_list|,
name|root
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
name|second
operator|.
name|insertSiblingBefore
argument_list|(
name|newSibling
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|first
operator|.
name|getNextSibling
argument_list|()
argument_list|,
name|newSibling
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|second
operator|.
name|getPreviousSibling
argument_list|()
argument_list|,
name|newSibling
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|3
argument_list|,
name|root
operator|.
name|getOpenCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|insertSiblingTop
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|root
operator|.
name|getFirstChild
argument_list|()
argument_list|,
name|first
argument_list|)
expr_stmt|;
name|PDOutlineItem
name|newSibling
init|=
operator|new
name|PDOutlineItem
argument_list|()
decl_stmt|;
name|first
operator|.
name|insertSiblingBefore
argument_list|(
name|newSibling
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|first
operator|.
name|getPreviousSibling
argument_list|()
argument_list|,
name|newSibling
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|root
operator|.
name|getFirstChild
argument_list|()
argument_list|,
name|newSibling
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|insertSiblingTopNoParent
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|root
operator|.
name|getFirstChild
argument_list|()
argument_list|,
name|first
argument_list|)
expr_stmt|;
name|PDOutlineItem
name|newSibling
init|=
operator|new
name|PDOutlineItem
argument_list|()
decl_stmt|;
name|root
operator|.
name|insertSiblingBefore
argument_list|(
name|newSibling
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|root
operator|.
name|getPreviousSibling
argument_list|()
argument_list|,
name|newSibling
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|insertSiblingBottom
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|root
operator|.
name|getLastChild
argument_list|()
argument_list|,
name|second
argument_list|)
expr_stmt|;
name|PDOutlineItem
name|newSibling
init|=
operator|new
name|PDOutlineItem
argument_list|()
decl_stmt|;
name|second
operator|.
name|insertSiblingAfter
argument_list|(
name|newSibling
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|second
operator|.
name|getNextSibling
argument_list|()
argument_list|,
name|newSibling
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|root
operator|.
name|getLastChild
argument_list|()
argument_list|,
name|newSibling
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|insertSiblingBottomNoParent
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|root
operator|.
name|getLastChild
argument_list|()
argument_list|,
name|second
argument_list|)
expr_stmt|;
name|PDOutlineItem
name|newSibling
init|=
operator|new
name|PDOutlineItem
argument_list|()
decl_stmt|;
name|root
operator|.
name|insertSiblingAfter
argument_list|(
name|newSibling
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|root
operator|.
name|getNextSibling
argument_list|()
argument_list|,
name|newSibling
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|cannotInsertSiblingBeforeAList
parameter_list|()
block|{
name|PDOutlineItem
name|child
init|=
operator|new
name|PDOutlineItem
argument_list|()
decl_stmt|;
name|child
operator|.
name|insertSiblingAfter
argument_list|(
operator|new
name|PDOutlineItem
argument_list|()
argument_list|)
expr_stmt|;
name|child
operator|.
name|insertSiblingAfter
argument_list|(
operator|new
name|PDOutlineItem
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|insertSiblingBefore
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|cannotInsertSiblingAfterAList
parameter_list|()
block|{
name|PDOutlineItem
name|child
init|=
operator|new
name|PDOutlineItem
argument_list|()
decl_stmt|;
name|child
operator|.
name|insertSiblingAfter
argument_list|(
operator|new
name|PDOutlineItem
argument_list|()
argument_list|)
expr_stmt|;
name|child
operator|.
name|insertSiblingAfter
argument_list|(
operator|new
name|PDOutlineItem
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|insertSiblingAfter
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

