begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|contentstream
operator|.
name|operator
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSFloat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdfparser
operator|.
name|PDFParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdfparser
operator|.
name|PDFStreamParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDRectangle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDColor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDDeviceRGB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|Matrix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Test for the PDAnnotation classes.  *  */
end_comment

begin_class
specifier|public
class|class
name|PDSquareAnnotationTest
block|{
comment|// delta for comparing equality of float values
specifier|private
specifier|static
specifier|final
name|double
name|DELTA
init|=
literal|1e-4
decl_stmt|;
comment|// the location of the annotation
specifier|static
name|PDRectangle
name|rectangle
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|File
name|IN_DIR
init|=
operator|new
name|File
argument_list|(
literal|"src/test/resources/org/apache/pdfbox/pdmodel/interactive/annotation"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NAME_OF_PDF
init|=
literal|"PDSquareAnnotationTest.pdf"
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|rectangle
operator|=
operator|new
name|PDRectangle
argument_list|()
expr_stmt|;
name|rectangle
operator|.
name|setLowerLeftX
argument_list|(
literal|91.5958f
argument_list|)
expr_stmt|;
name|rectangle
operator|.
name|setLowerLeftY
argument_list|(
literal|741.91f
argument_list|)
expr_stmt|;
name|rectangle
operator|.
name|setUpperRightX
argument_list|(
literal|113.849f
argument_list|)
expr_stmt|;
name|rectangle
operator|.
name|setUpperRightY
argument_list|(
literal|757.078f
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createDefaultSquareAnnotation
parameter_list|()
block|{
name|PDAnnotation
name|annotation
init|=
operator|new
name|PDAnnotationSquare
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|COSName
operator|.
name|ANNOT
argument_list|,
name|annotation
operator|.
name|getCOSObject
argument_list|()
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PDAnnotationSquare
operator|.
name|SUB_TYPE
argument_list|,
name|annotation
operator|.
name|getCOSObject
argument_list|()
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createWithAppearance
parameter_list|()
throws|throws
name|IOException
block|{
comment|// the width of the<nnotations border
specifier|final
name|int
name|borderWidth
init|=
literal|1
decl_stmt|;
try|try
init|(
name|PDDocument
name|document
init|=
operator|new
name|PDDocument
argument_list|()
init|)
block|{
name|PDPage
name|page
init|=
operator|new
name|PDPage
argument_list|()
decl_stmt|;
name|document
operator|.
name|addPage
argument_list|(
name|page
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PDAnnotation
argument_list|>
name|annotations
init|=
name|page
operator|.
name|getAnnotations
argument_list|()
decl_stmt|;
name|PDAnnotationSquareCircle
name|annotation
init|=
operator|new
name|PDAnnotationSquare
argument_list|()
decl_stmt|;
name|PDBorderStyleDictionary
name|borderThin
init|=
operator|new
name|PDBorderStyleDictionary
argument_list|()
decl_stmt|;
name|borderThin
operator|.
name|setWidth
argument_list|(
name|borderWidth
argument_list|)
expr_stmt|;
name|PDColor
name|red
init|=
operator|new
name|PDColor
argument_list|(
operator|new
name|float
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|0
block|}
argument_list|,
name|PDDeviceRGB
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
name|annotation
operator|.
name|setContents
argument_list|(
literal|"Square Annotation"
argument_list|)
expr_stmt|;
name|annotation
operator|.
name|setColor
argument_list|(
name|red
argument_list|)
expr_stmt|;
name|annotation
operator|.
name|setBorderStyle
argument_list|(
name|borderThin
argument_list|)
expr_stmt|;
name|annotation
operator|.
name|setRectangle
argument_list|(
name|rectangle
argument_list|)
expr_stmt|;
name|annotation
operator|.
name|constructAppearances
argument_list|()
expr_stmt|;
name|annotations
operator|.
name|add
argument_list|(
name|annotation
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|validateAppearance
parameter_list|()
throws|throws
name|IOException
block|{
comment|// the width of the<nnotations border
specifier|final
name|int
name|borderWidth
init|=
literal|1
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|IN_DIR
argument_list|,
name|NAME_OF_PDF
argument_list|)
decl_stmt|;
try|try
init|(
name|PDDocument
name|document
init|=
name|PDFParser
operator|.
name|load
argument_list|(
name|file
argument_list|)
init|)
block|{
name|PDPage
name|page
init|=
name|document
operator|.
name|getPage
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PDAnnotation
argument_list|>
name|annotations
init|=
name|page
operator|.
name|getAnnotations
argument_list|()
decl_stmt|;
name|PDAnnotationSquareCircle
name|annotation
init|=
operator|(
name|PDAnnotationSquareCircle
operator|)
name|annotations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// test the correct setting of the appearance stream
name|assertNotNull
argument_list|(
literal|"Appearance dictionary shall not be null"
argument_list|,
name|annotation
operator|.
name|getAppearance
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Normal appearance shall not be null"
argument_list|,
name|annotation
operator|.
name|getAppearance
argument_list|()
operator|.
name|getNormalAppearance
argument_list|()
argument_list|)
expr_stmt|;
name|PDAppearanceStream
name|appearanceStream
init|=
name|annotation
operator|.
name|getAppearance
argument_list|()
operator|.
name|getNormalAppearance
argument_list|()
operator|.
name|getAppearanceStream
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Appearance stream shall not be null"
argument_list|,
name|appearanceStream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rectangle
operator|.
name|getLowerLeftX
argument_list|()
argument_list|,
name|appearanceStream
operator|.
name|getBBox
argument_list|()
operator|.
name|getLowerLeftX
argument_list|()
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rectangle
operator|.
name|getLowerLeftY
argument_list|()
argument_list|,
name|appearanceStream
operator|.
name|getBBox
argument_list|()
operator|.
name|getLowerLeftY
argument_list|()
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rectangle
operator|.
name|getWidth
argument_list|()
argument_list|,
name|appearanceStream
operator|.
name|getBBox
argument_list|()
operator|.
name|getWidth
argument_list|()
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rectangle
operator|.
name|getHeight
argument_list|()
argument_list|,
name|appearanceStream
operator|.
name|getBBox
argument_list|()
operator|.
name|getHeight
argument_list|()
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
name|Matrix
name|matrix
init|=
name|appearanceStream
operator|.
name|getMatrix
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Matrix shall not be null"
argument_list|,
name|matrix
argument_list|)
expr_stmt|;
comment|// should have been translated to a 0 origin
name|assertEquals
argument_list|(
operator|-
name|rectangle
operator|.
name|getLowerLeftX
argument_list|()
argument_list|,
name|matrix
operator|.
name|getTranslateX
argument_list|()
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
name|rectangle
operator|.
name|getLowerLeftY
argument_list|()
argument_list|,
name|matrix
operator|.
name|getTranslateY
argument_list|()
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
comment|// test the content of the appearance stream
name|PDStream
name|contentStream
init|=
name|appearanceStream
operator|.
name|getContentStream
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Content stream shall not be null"
argument_list|,
name|contentStream
argument_list|)
expr_stmt|;
name|PDFStreamParser
name|parser
init|=
operator|new
name|PDFStreamParser
argument_list|(
name|appearanceStream
operator|.
name|getContents
argument_list|()
argument_list|)
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|tokens
init|=
name|parser
operator|.
name|getTokens
argument_list|()
decl_stmt|;
comment|// the samples content stream should contain 10 tokens
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|tokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// setting of the stroking color
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|COSInteger
operator|)
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|COSInteger
operator|)
name|tokens
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|COSInteger
operator|)
name|tokens
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RG"
argument_list|,
operator|(
operator|(
name|Operator
operator|)
name|tokens
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// setting of the rectangle for the border
comment|// it shall be inset by the border width
name|assertEquals
argument_list|(
name|rectangle
operator|.
name|getLowerLeftX
argument_list|()
operator|+
name|borderWidth
argument_list|,
operator|(
operator|(
name|COSFloat
operator|)
name|tokens
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|)
operator|.
name|floatValue
argument_list|()
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rectangle
operator|.
name|getLowerLeftY
argument_list|()
operator|+
name|borderWidth
argument_list|,
operator|(
operator|(
name|COSFloat
operator|)
name|tokens
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|)
operator|.
name|floatValue
argument_list|()
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rectangle
operator|.
name|getWidth
argument_list|()
operator|-
literal|2
operator|*
name|borderWidth
argument_list|,
operator|(
operator|(
name|COSFloat
operator|)
name|tokens
operator|.
name|get
argument_list|(
literal|6
argument_list|)
operator|)
operator|.
name|floatValue
argument_list|()
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rectangle
operator|.
name|getHeight
argument_list|()
operator|-
literal|2
operator|*
name|borderWidth
argument_list|,
operator|(
operator|(
name|COSFloat
operator|)
name|tokens
operator|.
name|get
argument_list|(
literal|7
argument_list|)
operator|)
operator|.
name|floatValue
argument_list|()
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"re"
argument_list|,
operator|(
operator|(
name|Operator
operator|)
name|tokens
operator|.
name|get
argument_list|(
literal|8
argument_list|)
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"S"
argument_list|,
operator|(
operator|(
name|Operator
operator|)
name|tokens
operator|.
name|get
argument_list|(
literal|9
argument_list|)
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

