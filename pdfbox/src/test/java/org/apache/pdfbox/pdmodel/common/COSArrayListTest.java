begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2015 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThrows
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|AnnotationFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAnnotationCircle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAnnotationHighlight
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAnnotationLink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAnnotationSquare
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|COSArrayListTest
block|{
comment|// next two entries are to be used for comparison with
comment|// COSArrayList behaviour in order to ensure that the
comment|// intented object is now at the correct position.
comment|// Will also be used for Collection/Array based setting
comment|// and comparison
specifier|static
name|List
argument_list|<
name|PDAnnotation
argument_list|>
name|tbcAnnotationsList
decl_stmt|;
specifier|static
name|COSBase
index|[]
name|tbcAnnotationsArray
decl_stmt|;
comment|// next entries are to be used within COSArrayList
specifier|static
name|List
argument_list|<
name|PDAnnotation
argument_list|>
name|annotationsList
decl_stmt|;
specifier|static
name|COSArray
name|annotationsArray
decl_stmt|;
comment|// to be used when testing retrieving filtered items as can be done with
comment|// {@link PDPage.getAnnotations(AnnotationFilter annotationFilter)}
specifier|static
name|PDPage
name|pdPage
decl_stmt|;
comment|/*      * Create thre new different annotations an add them to the Java List/Array as      * well as PDFBox List/Array implementations.      */
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|annotationsList
operator|=
operator|new
name|ArrayList
argument_list|<
name|PDAnnotation
argument_list|>
argument_list|()
expr_stmt|;
name|PDAnnotationHighlight
name|txtMark
init|=
operator|new
name|PDAnnotationHighlight
argument_list|()
decl_stmt|;
name|PDAnnotationLink
name|txtLink
init|=
operator|new
name|PDAnnotationLink
argument_list|()
decl_stmt|;
name|PDAnnotationCircle
name|aCircle
init|=
operator|new
name|PDAnnotationCircle
argument_list|()
decl_stmt|;
name|annotationsList
operator|.
name|add
argument_list|(
name|txtMark
argument_list|)
expr_stmt|;
name|annotationsList
operator|.
name|add
argument_list|(
name|txtLink
argument_list|)
expr_stmt|;
name|annotationsList
operator|.
name|add
argument_list|(
name|aCircle
argument_list|)
expr_stmt|;
name|annotationsList
operator|.
name|add
argument_list|(
name|txtLink
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|annotationsList
operator|.
name|size
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|tbcAnnotationsList
operator|=
operator|new
name|ArrayList
argument_list|<
name|PDAnnotation
argument_list|>
argument_list|()
expr_stmt|;
name|tbcAnnotationsList
operator|.
name|add
argument_list|(
name|txtMark
argument_list|)
expr_stmt|;
name|tbcAnnotationsList
operator|.
name|add
argument_list|(
name|txtLink
argument_list|)
expr_stmt|;
name|tbcAnnotationsList
operator|.
name|add
argument_list|(
name|aCircle
argument_list|)
expr_stmt|;
name|tbcAnnotationsList
operator|.
name|add
argument_list|(
name|txtLink
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tbcAnnotationsList
operator|.
name|size
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|annotationsArray
operator|=
operator|new
name|COSArray
argument_list|()
expr_stmt|;
name|annotationsArray
operator|.
name|add
argument_list|(
name|txtMark
argument_list|)
expr_stmt|;
name|annotationsArray
operator|.
name|add
argument_list|(
name|txtLink
argument_list|)
expr_stmt|;
name|annotationsArray
operator|.
name|add
argument_list|(
name|aCircle
argument_list|)
expr_stmt|;
name|annotationsArray
operator|.
name|add
argument_list|(
name|txtLink
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|annotationsArray
operator|.
name|size
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|tbcAnnotationsArray
operator|=
operator|new
name|COSBase
index|[
literal|4
index|]
expr_stmt|;
name|tbcAnnotationsArray
index|[
literal|0
index|]
operator|=
name|txtMark
operator|.
name|getCOSObject
argument_list|()
expr_stmt|;
name|tbcAnnotationsArray
index|[
literal|1
index|]
operator|=
name|txtLink
operator|.
name|getCOSObject
argument_list|()
expr_stmt|;
name|tbcAnnotationsArray
index|[
literal|2
index|]
operator|=
name|aCircle
operator|.
name|getCOSObject
argument_list|()
expr_stmt|;
name|tbcAnnotationsArray
index|[
literal|3
index|]
operator|=
name|txtLink
operator|.
name|getCOSObject
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|tbcAnnotationsArray
operator|.
name|length
operator|==
literal|4
argument_list|)
expr_stmt|;
comment|// add the annotations to the page
name|pdPage
operator|=
operator|new
name|PDPage
argument_list|()
expr_stmt|;
name|pdPage
operator|.
name|setAnnotations
argument_list|(
name|annotationsList
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test getting a PDModel element is in sync with underlying COSArray      */
annotation|@
name|Test
specifier|public
name|void
name|getFromList
parameter_list|()
throws|throws
name|Exception
block|{
name|COSArrayList
argument_list|<
name|PDAnnotation
argument_list|>
name|cosArrayList
init|=
operator|new
name|COSArrayList
argument_list|<
name|PDAnnotation
argument_list|>
argument_list|(
name|annotationsList
argument_list|,
name|annotationsArray
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cosArrayList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|PDAnnotation
name|annot
init|=
operator|(
name|PDAnnotation
operator|)
name|cosArrayList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"PDAnnotations cosObject at "
operator|+
name|i
operator|+
literal|" shall be equal to index "
operator|+
name|i
operator|+
literal|" of COSArray"
argument_list|,
name|annotationsArray
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|annot
operator|.
name|getCOSObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// compare with Java List/Array
name|assertTrue
argument_list|(
literal|"PDAnnotations at "
operator|+
name|i
operator|+
literal|" shall be at index "
operator|+
name|i
operator|+
literal|" of List"
argument_list|,
name|tbcAnnotationsList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
operator|(
name|annot
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"PDAnnotations cosObject at "
operator|+
name|i
operator|+
literal|" shall be at position "
operator|+
name|i
operator|+
literal|" of Array"
argument_list|,
name|tbcAnnotationsArray
index|[
name|i
index|]
argument_list|,
name|annot
operator|.
name|getCOSObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Test adding a PDModel element is in sync with underlying COSArray      */
annotation|@
name|Test
specifier|public
name|void
name|addToList
parameter_list|()
throws|throws
name|Exception
block|{
name|COSArrayList
argument_list|<
name|PDAnnotation
argument_list|>
name|cosArrayList
init|=
operator|new
name|COSArrayList
argument_list|<
name|PDAnnotation
argument_list|>
argument_list|(
name|annotationsList
argument_list|,
name|annotationsArray
argument_list|)
decl_stmt|;
comment|// add new annotation
name|PDAnnotationSquare
name|aSquare
init|=
operator|new
name|PDAnnotationSquare
argument_list|()
decl_stmt|;
name|cosArrayList
operator|.
name|add
argument_list|(
name|aSquare
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"List size shall be 5"
argument_list|,
name|annotationsList
operator|.
name|size
argument_list|()
operator|==
literal|5
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"COSArray size shall be 5"
argument_list|,
name|annotationsArray
operator|.
name|size
argument_list|()
operator|==
literal|5
argument_list|)
expr_stmt|;
name|PDAnnotation
name|annot
init|=
operator|(
name|PDAnnotation
operator|)
name|annotationsList
operator|.
name|get
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Added annotation shall be 4th entry in COSArray"
argument_list|,
name|annotationsArray
operator|.
name|indexOf
argument_list|(
name|annot
operator|.
name|getCOSObject
argument_list|()
argument_list|)
operator|==
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Provided COSArray and underlying COSArray shall be equal"
argument_list|,
name|annotationsArray
argument_list|,
name|cosArrayList
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test removing a PDModel element by index is in sync with underlying COSArray      */
annotation|@
name|Test
specifier|public
name|void
name|removeFromListByIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|COSArrayList
argument_list|<
name|PDAnnotation
argument_list|>
name|cosArrayList
init|=
operator|new
name|COSArrayList
argument_list|<
name|PDAnnotation
argument_list|>
argument_list|(
name|annotationsList
argument_list|,
name|annotationsArray
argument_list|)
decl_stmt|;
name|int
name|positionToRemove
init|=
literal|2
decl_stmt|;
name|PDAnnotation
name|toBeRemoved
init|=
name|cosArrayList
operator|.
name|get
argument_list|(
name|positionToRemove
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Remove operation shall return the removed object"
argument_list|,
name|toBeRemoved
argument_list|,
name|cosArrayList
operator|.
name|remove
argument_list|(
name|positionToRemove
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"List size shall be 3"
argument_list|,
name|cosArrayList
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"COSArray size shall be 3"
argument_list|,
name|annotationsArray
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"PDAnnotation shall no longer exist in List"
argument_list|,
name|cosArrayList
operator|.
name|indexOf
argument_list|(
name|tbcAnnotationsList
operator|.
name|get
argument_list|(
name|positionToRemove
argument_list|)
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"COSObject shall no longer exist in COSArray"
argument_list|,
name|annotationsArray
operator|.
name|indexOf
argument_list|(
name|tbcAnnotationsArray
index|[
name|positionToRemove
index|]
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test removing a unique PDModel element by index is in sync with underlying COSArray      */
annotation|@
name|Test
specifier|public
name|void
name|removeUniqueFromListByObject
parameter_list|()
throws|throws
name|Exception
block|{
name|COSArrayList
argument_list|<
name|PDAnnotation
argument_list|>
name|cosArrayList
init|=
operator|new
name|COSArrayList
argument_list|<
name|PDAnnotation
argument_list|>
argument_list|(
name|annotationsList
argument_list|,
name|annotationsArray
argument_list|)
decl_stmt|;
name|int
name|positionToRemove
init|=
literal|2
decl_stmt|;
name|PDAnnotation
name|toBeRemoved
init|=
name|annotationsList
operator|.
name|get
argument_list|(
name|positionToRemove
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Remove operation shall return true"
argument_list|,
name|cosArrayList
operator|.
name|remove
argument_list|(
name|toBeRemoved
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"List size shall be 3"
argument_list|,
name|cosArrayList
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"COSArray size shall be 3"
argument_list|,
name|annotationsArray
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
comment|// compare with Java List/Array to ensure correct object at position
name|assertTrue
argument_list|(
literal|"List object at 3 is at position 2 in COSArrayList now"
argument_list|,
name|cosArrayList
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|equals
argument_list|(
name|tbcAnnotationsList
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"COSObject of List object at 3 is at position 2 in COSArray now"
argument_list|,
name|annotationsArray
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|equals
argument_list|(
name|tbcAnnotationsList
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getCOSObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Array object at 3 is at position 2 in underlying COSArray now"
argument_list|,
name|annotationsArray
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|equals
argument_list|(
name|tbcAnnotationsArray
index|[
literal|3
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"PDAnnotation shall no longer exist in List"
argument_list|,
name|cosArrayList
operator|.
name|indexOf
argument_list|(
name|tbcAnnotationsList
operator|.
name|get
argument_list|(
name|positionToRemove
argument_list|)
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"COSObject shall no longer exist in COSArray"
argument_list|,
name|annotationsArray
operator|.
name|indexOf
argument_list|(
name|tbcAnnotationsArray
index|[
name|positionToRemove
index|]
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Remove shall not remove any object"
argument_list|,
name|cosArrayList
operator|.
name|remove
argument_list|(
name|toBeRemoved
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test removing a unique PDModel element by index is in sync with underlying COSArray      */
annotation|@
name|Test
specifier|public
name|void
name|removeAllUniqueFromListByObject
parameter_list|()
throws|throws
name|Exception
block|{
name|COSArrayList
argument_list|<
name|PDAnnotation
argument_list|>
name|cosArrayList
init|=
operator|new
name|COSArrayList
argument_list|<
name|PDAnnotation
argument_list|>
argument_list|(
name|annotationsList
argument_list|,
name|annotationsArray
argument_list|)
decl_stmt|;
name|int
name|positionToRemove
init|=
literal|2
decl_stmt|;
name|PDAnnotation
name|toBeRemoved
init|=
name|annotationsList
operator|.
name|get
argument_list|(
name|positionToRemove
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PDAnnotation
argument_list|>
name|toBeRemovedInstances
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|toBeRemoved
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Remove operation shall return true"
argument_list|,
name|cosArrayList
operator|.
name|removeAll
argument_list|(
name|toBeRemovedInstances
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"List size shall be 3"
argument_list|,
name|cosArrayList
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"COSArray size shall be 3"
argument_list|,
name|annotationsArray
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Remove shall not remove any object"
argument_list|,
name|cosArrayList
operator|.
name|removeAll
argument_list|(
name|toBeRemovedInstances
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test removing a multiple appearing PDModel element by index is in sync with underlying COSArray      */
annotation|@
name|Test
specifier|public
name|void
name|removeMultipleFromListByObject
parameter_list|()
throws|throws
name|Exception
block|{
name|COSArrayList
argument_list|<
name|PDAnnotation
argument_list|>
name|cosArrayList
init|=
operator|new
name|COSArrayList
argument_list|<
name|PDAnnotation
argument_list|>
argument_list|(
name|annotationsList
argument_list|,
name|annotationsArray
argument_list|)
decl_stmt|;
name|int
name|positionToRemove
init|=
literal|1
decl_stmt|;
name|PDAnnotation
name|toBeRemoved
init|=
name|tbcAnnotationsList
operator|.
name|get
argument_list|(
name|positionToRemove
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Remove operation shall return true"
argument_list|,
name|cosArrayList
operator|.
name|remove
argument_list|(
name|toBeRemoved
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"List size shall be 3"
argument_list|,
name|cosArrayList
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"COSArray size shall be 3"
argument_list|,
name|annotationsArray
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Remove operation shall return true"
argument_list|,
name|cosArrayList
operator|.
name|remove
argument_list|(
name|toBeRemoved
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"List size shall be 2"
argument_list|,
name|cosArrayList
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"COSArray size shall be 2"
argument_list|,
name|annotationsArray
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test removing a unique PDModel element by index is in sync with underlying COSArray      */
annotation|@
name|Test
specifier|public
name|void
name|removeAllMultipleFromListByObject
parameter_list|()
throws|throws
name|Exception
block|{
name|COSArrayList
argument_list|<
name|PDAnnotation
argument_list|>
name|cosArrayList
init|=
operator|new
name|COSArrayList
argument_list|<
name|PDAnnotation
argument_list|>
argument_list|(
name|annotationsList
argument_list|,
name|annotationsArray
argument_list|)
decl_stmt|;
name|int
name|positionToRemove
init|=
literal|1
decl_stmt|;
name|PDAnnotation
name|toBeRemoved
init|=
name|annotationsList
operator|.
name|get
argument_list|(
name|positionToRemove
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PDAnnotation
argument_list|>
name|toBeRemovedInstances
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|toBeRemoved
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Remove operation shall return true"
argument_list|,
name|cosArrayList
operator|.
name|removeAll
argument_list|(
name|toBeRemovedInstances
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"List size shall be 2"
argument_list|,
name|cosArrayList
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"COSArray size shall be 2"
argument_list|,
name|annotationsArray
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Remove shall not remove any object"
argument_list|,
name|cosArrayList
operator|.
name|removeAll
argument_list|(
name|toBeRemovedInstances
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|removeFromFilteredListByIndex
parameter_list|()
throws|throws
name|Exception
block|{
comment|// retrieve all annotations from page but the link annotation
comment|// which is 2nd in list - see above setup
name|AnnotationFilter
name|annotsFilter
init|=
operator|new
name|AnnotationFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|PDAnnotation
name|annotation
parameter_list|)
block|{
return|return
operator|!
operator|(
name|annotation
operator|instanceof
name|PDAnnotationLink
operator|)
return|;
block|}
block|}
decl_stmt|;
name|COSArrayList
argument_list|<
name|PDAnnotation
argument_list|>
name|cosArrayList
init|=
operator|(
name|COSArrayList
argument_list|<
name|PDAnnotation
argument_list|>
operator|)
name|pdPage
operator|.
name|getAnnotations
argument_list|(
name|annotsFilter
argument_list|)
decl_stmt|;
comment|// this call should fail
name|assertThrows
argument_list|(
name|UnsupportedOperationException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|cosArrayList
operator|.
name|remove
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|removeFromFilteredListByObject
parameter_list|()
throws|throws
name|Exception
block|{
comment|// retrieve all annotations from page but the link annotation
comment|// which is 2nd in list - see above setup
name|AnnotationFilter
name|annotsFilter
init|=
operator|new
name|AnnotationFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|PDAnnotation
name|annotation
parameter_list|)
block|{
return|return
operator|!
operator|(
name|annotation
operator|instanceof
name|PDAnnotationLink
operator|)
return|;
block|}
block|}
decl_stmt|;
name|COSArrayList
argument_list|<
name|PDAnnotation
argument_list|>
name|cosArrayList
init|=
operator|(
name|COSArrayList
argument_list|<
name|PDAnnotation
argument_list|>
operator|)
name|pdPage
operator|.
name|getAnnotations
argument_list|(
name|annotsFilter
argument_list|)
decl_stmt|;
comment|// remove object
name|int
name|positionToRemove
init|=
literal|1
decl_stmt|;
name|PDAnnotation
name|toBeRemoved
init|=
name|cosArrayList
operator|.
name|get
argument_list|(
name|positionToRemove
argument_list|)
decl_stmt|;
comment|// this call should fail
name|assertThrows
argument_list|(
name|UnsupportedOperationException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|cosArrayList
operator|.
name|remove
argument_list|(
name|toBeRemoved
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

