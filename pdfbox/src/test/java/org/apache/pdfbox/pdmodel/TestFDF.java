begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|Loader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdfparser
operator|.
name|PDFParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|fdf
operator|.
name|FDFDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|fdf
operator|.
name|FDFField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|form
operator|.
name|PDAcroForm
import|;
end_import

begin_comment
comment|/**  * This will test the FDF algorithms in PDFBox.  *  * @author Ben Litchfield  * @author Tilman Hausherr  *   */
end_comment

begin_class
specifier|public
class|class
name|TestFDF
extends|extends
name|TestCase
block|{
comment|/**      * Test load two simple fdf files with two fields. One of the files does not have a      * /Type/Catalog entry, which isn't required anyway (PDFBOX-3639).      *      * @throws URISyntaxException      * @throws IOException      */
specifier|public
name|void
name|testLoad2
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|IOException
block|{
name|checkFields
argument_list|(
literal|"/org/apache/pdfbox/pdfparser/withcatalog.fdf"
argument_list|)
expr_stmt|;
name|checkFields
argument_list|(
literal|"/org/apache/pdfbox/pdfparser/nocatalog.fdf"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkFields
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
try|try
init|(
name|FDFDocument
name|fdf
init|=
name|Loader
operator|.
name|loadFDF
argument_list|(
operator|new
name|File
argument_list|(
name|TestFDF
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|name
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
name|fdf
operator|.
name|saveXFDF
argument_list|(
operator|new
name|PrintWriter
argument_list|(
operator|new
name|ByteArrayOutputStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FDFField
argument_list|>
name|fields
init|=
name|fdf
operator|.
name|getCatalog
argument_list|()
operator|.
name|getFDF
argument_list|()
operator|.
name|getFields
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|fields
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Field1"
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPartialFieldName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Field2"
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getPartialFieldName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Test1"
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Test2"
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|PDDocument
name|pdf
init|=
name|PDFParser
operator|.
name|load
argument_list|(
operator|new
name|File
argument_list|(
name|TestFDF
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"/org/apache/pdfbox/pdfparser/SimpleForm2Fields.pdf"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
name|PDAcroForm
name|acroForm
init|=
name|pdf
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|getAcroForm
argument_list|()
decl_stmt|;
name|acroForm
operator|.
name|importFDF
argument_list|(
name|fdf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Test1"
argument_list|,
name|acroForm
operator|.
name|getField
argument_list|(
literal|"Field1"
argument_list|)
operator|.
name|getValueAsString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Test2"
argument_list|,
name|acroForm
operator|.
name|getField
argument_list|(
literal|"Field2"
argument_list|)
operator|.
name|getValueAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

