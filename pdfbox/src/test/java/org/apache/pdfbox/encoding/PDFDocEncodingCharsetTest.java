begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|encoding
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|CharBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * This class tests {@link PDFDocEncodingCharset} and indirectly {@link SingleByteCharset}.  * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|PDFDocEncodingCharsetTest
extends|extends
name|TestCase
block|{
comment|/**      * Tests {@link PDFDocEncodingCharset} and indirectly {@link SingleByteCharset}.      * @throws UnsupportedEncodingException if an encoding cannot be found      */
specifier|public
name|void
name|testEncoding
parameter_list|()
throws|throws
name|UnsupportedEncodingException
block|{
comment|//Check basic round-trip
name|String
name|text
init|=
literal|"Test \u20AC$£ ;-) Gr\u00FCezi\u2026"
decl_stmt|;
name|byte
index|[]
name|encoded
init|=
name|text
operator|.
name|getBytes
argument_list|(
name|PDFDocEncodingCharset
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
name|int
index|[]
name|expected
init|=
operator|new
name|int
index|[]
block|{
literal|0x54
block|,
literal|0x65
block|,
literal|0x73
block|,
literal|0x74
block|,
literal|0x20
block|,
comment|//Test
literal|0xA0
block|,
literal|0x24
block|,
literal|0xA3
block|,
literal|0x20
block|,
comment|//Currency
literal|0x3B
block|,
literal|0x2D
block|,
literal|0x29
block|,
literal|0x20
block|,
comment|//Smiley
literal|0x47
block|,
literal|0x72
block|,
literal|0xFC
block|,
literal|0x65
block|,
literal|0x7A
block|,
literal|0x69
block|,
comment|//Hello in de_CH
literal|0x83
comment|//ellipsis
block|}
decl_stmt|;
name|compareEncoded
argument_list|(
name|encoded
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|String
name|decoded
init|=
operator|new
name|String
argument_list|(
name|encoded
argument_list|,
name|PDFDocEncodingCharset
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|text
argument_list|,
name|decoded
argument_list|)
expr_stmt|;
name|text
operator|=
literal|"Bad\u03C0\u2023char"
expr_stmt|;
name|expected
operator|=
operator|new
name|int
index|[]
block|{
literal|0x42
block|,
literal|0x61
block|,
literal|0x64
block|,
literal|0x3F
block|,
literal|0x3F
block|,
literal|0x63
block|,
literal|0x68
block|,
literal|0x61
block|,
literal|0x72
comment|//unencodable characters as '?'
block|}
expr_stmt|;
name|encoded
operator|=
name|text
operator|.
name|getBytes
argument_list|(
name|PDFDocEncodingCharset
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|compareEncoded
argument_list|(
name|encoded
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|decoded
operator|=
operator|new
name|String
argument_list|(
name|encoded
argument_list|,
name|PDFDocEncodingCharset
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Bad??char"
argument_list|,
name|decoded
argument_list|)
expr_stmt|;
block|}
comment|/**      * Checking for behaviour with undefined character at the end of the buffer.      * This used to cause an IllegalArgumentException.      */
specifier|public
name|void
name|testUnencodedAtEnd
parameter_list|()
block|{
name|byte
index|[]
name|encoded
init|=
operator|new
name|byte
index|[]
block|{
literal|0x00
block|,
literal|0x01
block|,
literal|0x02
block|,
literal|0x7F
block|}
decl_stmt|;
comment|//0x7F is undefined
name|String
name|decoded
init|=
name|toString
argument_list|(
name|encoded
argument_list|,
literal|0
argument_list|,
name|encoded
operator|.
name|length
argument_list|,
name|PDFDocEncodingCharset
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"\u0000\u0001\u0002\uFFFD"
argument_list|,
name|decoded
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|toString
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|,
name|Charset
name|charset
parameter_list|)
block|{
name|CharBuffer
name|charBuffer
init|=
name|charset
operator|.
name|decode
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|data
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|charBuffer
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|void
name|compareEncoded
parameter_list|(
name|byte
index|[]
name|encoded
parameter_list|,
name|int
index|[]
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|length
argument_list|,
name|encoded
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"Bad character at pos "
operator|+
name|i
argument_list|,
call|(
name|byte
call|)
argument_list|(
name|expected
index|[
name|i
index|]
operator|&
literal|0xFF
argument_list|)
argument_list|,
name|encoded
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

