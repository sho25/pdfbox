begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdfwriter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|BufferedImage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|ImageIO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdfparser
operator|.
name|PDFParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdfparser
operator|.
name|PDFStreamParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|rendering
operator|.
name|PDFRenderer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|rendering
operator|.
name|TestPDFToImage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  *  * @author Tilman Hausherr  */
end_comment

begin_class
specifier|public
class|class
name|ContentStreamWriterTest
block|{
specifier|private
specifier|final
name|File
name|testDirIn
init|=
operator|new
name|File
argument_list|(
literal|"target/test-output/contentstream/in"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|File
name|testDirOut
init|=
operator|new
name|File
argument_list|(
literal|"target/test-output/contentstream/out"
argument_list|)
decl_stmt|;
specifier|public
name|ContentStreamWriterTest
parameter_list|()
block|{
name|testDirIn
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|testDirOut
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpClass
parameter_list|()
block|{     }
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownClass
parameter_list|()
block|{     }
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{     }
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{     }
comment|/**      * Test parse content stream, write back tokens and compare rendering.      *      * @throws java.io.IOException      */
annotation|@
name|Test
specifier|public
name|void
name|testPDFBox4750
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|filename
init|=
literal|"PDFBOX-4750.pdf"
decl_stmt|;
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"https://issues.apache.org/jira/secure/attachment/12991732/01%20-%20K17%20-%20Was%20dahinter%20steckt%20-%20dsb.pdf"
argument_list|)
decl_stmt|;
try|try
init|(
name|PDDocument
name|doc
init|=
name|PDFParser
operator|.
name|load
argument_list|(
name|url
operator|.
name|openStream
argument_list|()
argument_list|)
init|)
block|{
name|PDFRenderer
name|r
init|=
operator|new
name|PDFRenderer
argument_list|(
name|doc
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|doc
operator|.
name|getNumberOfPages
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|BufferedImage
name|bim1
init|=
name|r
operator|.
name|renderImageWithDPI
argument_list|(
name|i
argument_list|,
literal|96
argument_list|)
decl_stmt|;
name|ImageIO
operator|.
name|write
argument_list|(
name|bim1
argument_list|,
literal|"png"
argument_list|,
operator|new
name|File
argument_list|(
name|testDirIn
argument_list|,
name|filename
operator|+
literal|"-"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|".png"
argument_list|)
argument_list|)
expr_stmt|;
name|PDPage
name|page
init|=
name|doc
operator|.
name|getPage
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|PDStream
name|newContent
init|=
operator|new
name|PDStream
argument_list|(
name|doc
argument_list|)
decl_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
name|page
operator|.
name|getContents
argument_list|()
init|;
name|OutputStream
name|os
operator|=
name|newContent
operator|.
name|createOutputStream
argument_list|(
name|COSName
operator|.
name|FLATE_DECODE
argument_list|)
init|)
block|{
name|PDFStreamParser
name|parser
init|=
operator|new
name|PDFStreamParser
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|()
expr_stmt|;
name|ContentStreamWriter
name|tokenWriter
init|=
operator|new
name|ContentStreamWriter
argument_list|(
name|os
argument_list|)
decl_stmt|;
name|tokenWriter
operator|.
name|writeTokens
argument_list|(
name|parser
operator|.
name|getTokens
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|page
operator|.
name|setContents
argument_list|(
name|newContent
argument_list|)
expr_stmt|;
block|}
name|doc
operator|.
name|save
argument_list|(
operator|new
name|File
argument_list|(
name|testDirIn
argument_list|,
name|filename
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|TestPDFToImage
name|testPDFToImage
init|=
operator|new
name|TestPDFToImage
argument_list|(
name|TestPDFToImage
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|testPDFToImage
operator|.
name|doTestFile
argument_list|(
operator|new
name|File
argument_list|(
name|testDirIn
argument_list|,
name|filename
argument_list|)
argument_list|,
name|testDirIn
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|testDirOut
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Rendering failed or is not identical, see in "
operator|+
name|testDirOut
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

