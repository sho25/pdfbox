begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|text
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test for the PDButton class.  *  */
end_comment

begin_class
specifier|public
class|class
name|BidiTest
block|{
specifier|private
specifier|static
specifier|final
name|File
name|IN_DIR
init|=
operator|new
name|File
argument_list|(
literal|"src/test/resources/org/apache/pdfbox/text/"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NAME_OF_PDF
init|=
literal|"BidiSample.pdf"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NAME_OF_TXT
init|=
literal|"BidiSample.pdf.txt"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NAME_OF_TXT_SORTED
init|=
literal|"BidiSample.pdf-sorted.txt"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ENCODING
init|=
literal|"UTF-8"
decl_stmt|;
specifier|private
name|PDDocument
name|document
decl_stmt|;
specifier|private
name|PDFTextStripper
name|stripper
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|document
operator|=
name|PDDocument
operator|.
name|load
argument_list|(
operator|new
name|File
argument_list|(
name|IN_DIR
argument_list|,
name|NAME_OF_PDF
argument_list|)
argument_list|)
expr_stmt|;
name|stripper
operator|=
operator|new
name|PDFTextStripper
argument_list|()
expr_stmt|;
name|stripper
operator|.
name|setLineSeparator
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSorted
parameter_list|()
throws|throws
name|IOException
block|{
name|stripper
operator|.
name|setSortByPosition
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|String
name|extractedText
init|=
name|stripper
operator|.
name|getText
argument_list|(
name|document
argument_list|)
decl_stmt|;
name|Reader
name|compareTextReader
init|=
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|FileInputStream
argument_list|(
operator|new
name|File
argument_list|(
name|IN_DIR
argument_list|,
name|NAME_OF_TXT_SORTED
argument_list|)
argument_list|)
argument_list|,
name|ENCODING
argument_list|)
decl_stmt|;
empty_stmt|;
name|BufferedReader
name|bufferedCompareTextReader
init|=
operator|new
name|BufferedReader
argument_list|(
name|compareTextReader
argument_list|)
decl_stmt|;
name|StringBuilder
name|compareTextBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|line
init|=
name|bufferedCompareTextReader
operator|.
name|readLine
argument_list|()
decl_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
name|compareTextBuilder
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|compareTextBuilder
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|line
operator|=
name|bufferedCompareTextReader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
name|bufferedCompareTextReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|extractedText
argument_list|,
name|compareTextBuilder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNotSorted
parameter_list|()
throws|throws
name|IOException
block|{
name|stripper
operator|.
name|setSortByPosition
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|String
name|extractedText
init|=
name|stripper
operator|.
name|getText
argument_list|(
name|document
argument_list|)
decl_stmt|;
name|Reader
name|compareTextReader
init|=
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|FileInputStream
argument_list|(
operator|new
name|File
argument_list|(
name|IN_DIR
argument_list|,
name|NAME_OF_TXT
argument_list|)
argument_list|)
argument_list|,
name|ENCODING
argument_list|)
decl_stmt|;
empty_stmt|;
name|BufferedReader
name|bufferedCompareTextReader
init|=
operator|new
name|BufferedReader
argument_list|(
name|compareTextReader
argument_list|)
decl_stmt|;
name|StringBuilder
name|compareTextBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|line
init|=
name|bufferedCompareTextReader
operator|.
name|readLine
argument_list|()
decl_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
name|compareTextBuilder
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|compareTextBuilder
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|line
operator|=
name|bufferedCompareTextReader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
name|bufferedCompareTextReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|extractedText
argument_list|,
name|compareTextBuilder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
name|document
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

