begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2014 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdfparser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_comment
comment|/**  * This class is only for the readUntilEndStream methods, to prevent a  * final CR LF or LF (but not a final CR!) from being written to the output.  * Because of that, only the 3-param write() method is implemented. This solves  * PDFBOX-2079 and avoids making readUntilEndStream() even more complex than it  * already is.  *  * @author Tilman Hausherr  */
end_comment

begin_class
class|class
name|EndstreamOutputStream
extends|extends
name|BufferedOutputStream
block|{
comment|//TODO: replace this class with a PullBackOutputStream class if there ever is one
specifier|private
name|boolean
name|hasCR
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|hasLF
init|=
literal|false
decl_stmt|;
specifier|public
name|EndstreamOutputStream
parameter_list|(
name|OutputStream
name|out
parameter_list|)
block|{
name|super
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
comment|/**      * Write CR and/or LF that were kept, then writes len bytes from the       * specified byte array starting at offset off to this output stream,      * except trailing CR, CR LF, or LF.      * @param b byte array.      * @param off offset.      * @param len length of segment to write.      * @throws IOException       */
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
comment|// first write what we kept last time
if|if
condition|(
name|hasCR
condition|)
block|{
if|if
condition|(
operator|!
name|hasLF
operator|&&
name|len
operator|==
literal|1
operator|&&
name|b
index|[
name|off
index|]
operator|==
literal|'\n'
condition|)
block|{
comment|// previous buffer ended with CR
comment|// actual buffer contains only LF so it will be the last one
comment|// => we're done
name|hasCR
operator|=
literal|false
expr_stmt|;
comment|// to avoid this getting written in the flush
return|return;
block|}
name|super
operator|.
name|write
argument_list|(
literal|'\r'
argument_list|)
expr_stmt|;
name|hasCR
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|hasLF
condition|)
block|{
name|super
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|hasLF
operator|=
literal|false
expr_stmt|;
block|}
comment|// don't write CR, LF, or CR LF if at the end of the buffer
if|if
condition|(
name|len
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|b
index|[
name|off
operator|+
name|len
operator|-
literal|1
index|]
operator|==
literal|'\r'
condition|)
block|{
name|hasCR
operator|=
literal|true
expr_stmt|;
operator|--
name|len
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|b
index|[
name|off
operator|+
name|len
operator|-
literal|1
index|]
operator|==
literal|'\n'
condition|)
block|{
name|hasLF
operator|=
literal|true
expr_stmt|;
operator|--
name|len
expr_stmt|;
if|if
condition|(
name|len
operator|>
literal|0
operator|&&
name|b
index|[
name|off
operator|+
name|len
operator|-
literal|1
index|]
operator|==
literal|'\r'
condition|)
block|{
name|hasCR
operator|=
literal|true
expr_stmt|;
operator|--
name|len
expr_stmt|;
block|}
block|}
block|}
name|super
operator|.
name|write
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
comment|/**      * write out a single CR if one was kept. Don't write kept CR LF or LF,       * and then call the base method to flush.      *       * @throws IOException       */
annotation|@
name|Override
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
comment|// if there is only a CR and no LF, write it
if|if
condition|(
name|hasCR
operator|&&
operator|!
name|hasLF
condition|)
block|{
name|super
operator|.
name|write
argument_list|(
literal|'\r'
argument_list|)
expr_stmt|;
block|}
name|hasCR
operator|=
literal|false
expr_stmt|;
name|hasLF
operator|=
literal|false
expr_stmt|;
name|super
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

