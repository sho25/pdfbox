begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdfparser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|exceptions
operator|.
name|WrappedIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|io
operator|.
name|RandomAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|fdf
operator|.
name|FDFDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|persistence
operator|.
name|util
operator|.
name|COSObjectKey
import|;
end_import

begin_comment
comment|/**  * This class will handle the parsing of the PDF document.  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.53 $  */
end_comment

begin_class
specifier|public
class|class
name|PDFParser
extends|extends
name|BaseParser
block|{
comment|/**      * Log instance.      */
specifier|private
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|PDFParser
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|SPACE_BYTE
init|=
literal|32
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PDF_HEADER
init|=
literal|"%PDF-"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FDF_HEADER
init|=
literal|"%FDF-"
decl_stmt|;
comment|/**      * A list of duplicate objects found when Parsing the PDF      * File.       */
specifier|private
name|List
name|conflictList
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
comment|/**      * Temp file directory.      */
specifier|private
name|File
name|tempDirectory
init|=
literal|null
decl_stmt|;
specifier|private
name|RandomAccess
name|raf
init|=
literal|null
decl_stmt|;
comment|/**      * Constructor.      *      * @param input The input stream that contains the PDF document.      *      * @throws IOException If there is an error initializing the stream.      */
specifier|public
name|PDFParser
parameter_list|(
name|InputStream
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|input
argument_list|,
literal|null
argument_list|,
name|FORCE_PARSING
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor to allow control over RandomAccessFile.      * @param input The input stream that contains the PDF document.      * @param rafi The RandomAccessFile to be used in internal COSDocument      *      * @throws IOException If there is an error initializing the stream.      */
specifier|public
name|PDFParser
parameter_list|(
name|InputStream
name|input
parameter_list|,
name|RandomAccess
name|rafi
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|input
argument_list|,
name|rafi
argument_list|,
name|FORCE_PARSING
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor to allow control over RandomAccessFile.      * Also enables parser to skip corrupt objects to try and force parsing      * @param input The input stream that contains the PDF document.      * @param rafi The RandomAccessFile to be used in internal COSDocument      * @param force When true, the parser will skip corrupt pdf objects and       * will continue parsing at the next object in the file      *      * @throws IOException If there is an error initializing the stream.      */
specifier|public
name|PDFParser
parameter_list|(
name|InputStream
name|input
parameter_list|,
name|RandomAccess
name|rafi
parameter_list|,
name|boolean
name|force
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|input
argument_list|,
name|force
argument_list|)
expr_stmt|;
name|this
operator|.
name|raf
operator|=
name|rafi
expr_stmt|;
block|}
comment|/**      * This is the directory where pdfbox will create a temporary file      * for storing pdf document stream in.  By default this directory will      * be the value of the system property java.io.tmpdir.      *      * @param tmpDir The directory to create scratch files needed to store      *        pdf document streams.      */
specifier|public
name|void
name|setTempDirectory
parameter_list|(
name|File
name|tmpDir
parameter_list|)
block|{
name|tempDirectory
operator|=
name|tmpDir
expr_stmt|;
block|}
comment|/**      * Returns true if parsing should be continued. By default, forceParsing is returned.       * This can be overridden to add application specific handling (for example to stop       * parsing when the number of exceptions thrown exceed a certain number).      *       * @param e The exception if vailable. Can be null if there is no exception available      */
specifier|protected
name|boolean
name|isContinueOnError
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
name|forceParsing
return|;
block|}
comment|/**      * This will parse the stream and populate the COSDocument object.  This will close      * the stream when it is done parsing.      *      * @throws IOException If there is an error reading from the stream or corrupt data      * is found.      */
specifier|public
name|void
name|parse
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
name|raf
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|tempDirectory
operator|!=
literal|null
condition|)
block|{
name|document
operator|=
operator|new
name|COSDocument
argument_list|(
name|tempDirectory
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|document
operator|=
operator|new
name|COSDocument
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|document
operator|=
operator|new
name|COSDocument
argument_list|(
name|raf
argument_list|)
expr_stmt|;
block|}
name|setDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|parseHeader
argument_list|()
expr_stmt|;
comment|//Some PDF files have garbage between the header and the
comment|//first object
name|skipToNextObj
argument_list|()
expr_stmt|;
name|boolean
name|wasLastParsedObjectEOF
init|=
literal|false
decl_stmt|;
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|pdfSource
operator|.
name|isEOF
argument_list|()
condition|)
block|{
break|break;
block|}
try|try
block|{
name|wasLastParsedObjectEOF
operator|=
name|parseObject
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|isContinueOnError
argument_list|(
name|e
argument_list|)
condition|)
block|{
comment|/*                              * Warning is sent to the PDFBox.log and to the Console that                              * we skipped over an object                              */
name|log
operator|.
name|warn
argument_list|(
literal|"Parsing Error, Skipping Object"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|skipToNextObj
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
name|skipSpaces
argument_list|()
expr_stmt|;
block|}
comment|//Test if we saw a trailer section. If not, look for an XRef Stream (Cross-Reference Stream)
comment|//to populate the trailer and xref information. For PDF 1.5 and above
if|if
condition|(
name|document
operator|.
name|getTrailer
argument_list|()
operator|==
literal|null
condition|)
block|{
name|document
operator|.
name|parseXrefStreams
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|document
operator|.
name|isEncrypted
argument_list|()
condition|)
block|{
name|document
operator|.
name|dereferenceObjectStreams
argument_list|()
expr_stmt|;
block|}
name|ConflictObj
operator|.
name|resolveConflicts
argument_list|(
name|document
argument_list|,
name|conflictList
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|/*                  * PDF files may have random data after the EOF marker. Ignore errors if                  * last object processed is EOF.                   */
if|if
condition|(
operator|!
name|wasLastParsedObjectEOF
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|//so if the PDF is corrupt then close the document and clear
comment|//all resources to it
if|if
condition|(
name|document
operator|!=
literal|null
condition|)
block|{
name|document
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|t
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|t
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|WrappedIOException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|pdfSource
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Skip to the start of the next object.  This is used to recover      * from a corrupt object. This should handle all cases that parseObject      * supports. This assumes that the next object will      * start on its own line.      *       * @throws IOException       */
specifier|private
name|void
name|skipToNextObj
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
literal|16
index|]
decl_stmt|;
name|Pattern
name|p
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\d+\\s+\\d+\\s+obj.*"
argument_list|,
name|Pattern
operator|.
name|DOTALL
argument_list|)
decl_stmt|;
comment|/* Read a buffer of data each time to see if it starts with a          * known keyword. This is not the most efficient design, but we should          * rarely be needing this function. We could update this to use the           * circular buffer, like in readUntilEndStream().          */
while|while
condition|(
operator|!
name|pdfSource
operator|.
name|isEOF
argument_list|()
condition|)
block|{
name|int
name|l
init|=
name|pdfSource
operator|.
name|read
argument_list|(
name|b
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|<
literal|1
condition|)
block|{
break|break;
block|}
name|String
name|s
init|=
operator|new
name|String
argument_list|(
name|b
argument_list|,
literal|"US-ASCII"
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|startsWith
argument_list|(
literal|"trailer"
argument_list|)
operator|||
name|s
operator|.
name|startsWith
argument_list|(
literal|"xref"
argument_list|)
operator|||
name|s
operator|.
name|startsWith
argument_list|(
literal|"startxref"
argument_list|)
operator|||
name|s
operator|.
name|startsWith
argument_list|(
literal|"stream"
argument_list|)
operator|||
name|p
operator|.
name|matcher
argument_list|(
name|s
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
name|pdfSource
operator|.
name|unread
argument_list|(
name|b
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
name|pdfSource
operator|.
name|unread
argument_list|(
name|b
argument_list|,
literal|1
argument_list|,
name|l
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|parseHeader
parameter_list|()
throws|throws
name|IOException
block|{
comment|// read first line
name|String
name|header
init|=
name|readLine
argument_list|()
decl_stmt|;
comment|// some pdf-documents are broken and the pdf-version is in one of the following lines
if|if
condition|(
operator|(
name|header
operator|.
name|indexOf
argument_list|(
name|PDF_HEADER
argument_list|)
operator|==
operator|-
literal|1
operator|)
operator|&&
operator|(
name|header
operator|.
name|indexOf
argument_list|(
name|FDF_HEADER
argument_list|)
operator|==
operator|-
literal|1
operator|)
condition|)
block|{
name|header
operator|=
name|readLine
argument_list|()
expr_stmt|;
while|while
condition|(
operator|(
name|header
operator|.
name|indexOf
argument_list|(
name|PDF_HEADER
argument_list|)
operator|==
operator|-
literal|1
operator|)
operator|&&
operator|(
name|header
operator|.
name|indexOf
argument_list|(
name|FDF_HEADER
argument_list|)
operator|==
operator|-
literal|1
operator|)
condition|)
block|{
comment|// if a line starts with a digit, it has to be the first one with data in it
if|if
condition|(
operator|(
name|header
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
operator|&&
operator|(
name|Character
operator|.
name|isDigit
argument_list|(
name|header
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|)
condition|)
block|{
break|break;
block|}
name|header
operator|=
name|readLine
argument_list|()
expr_stmt|;
block|}
block|}
comment|// nothing found
if|if
condition|(
operator|(
name|header
operator|.
name|indexOf
argument_list|(
name|PDF_HEADER
argument_list|)
operator|==
operator|-
literal|1
operator|)
operator|&&
operator|(
name|header
operator|.
name|indexOf
argument_list|(
name|FDF_HEADER
argument_list|)
operator|==
operator|-
literal|1
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error: Header doesn't contain versioninfo"
argument_list|)
throw|;
block|}
comment|//sometimes there are some garbage bytes in the header before the header
comment|//actually starts, so lets try to find the header first.
name|int
name|headerStart
init|=
name|header
operator|.
name|indexOf
argument_list|(
name|PDF_HEADER
argument_list|)
decl_stmt|;
if|if
condition|(
name|headerStart
operator|==
operator|-
literal|1
condition|)
block|{
name|headerStart
operator|=
name|header
operator|.
name|indexOf
argument_list|(
name|FDF_HEADER
argument_list|)
expr_stmt|;
block|}
comment|//greater than zero because if it is zero then
comment|//there is no point of trimming
if|if
condition|(
name|headerStart
operator|>
literal|0
condition|)
block|{
comment|//trim off any leading characters
name|header
operator|=
name|header
operator|.
name|substring
argument_list|(
name|headerStart
argument_list|,
name|header
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*          * This is used if there is garbage after the header on the same line          */
if|if
condition|(
name|header
operator|.
name|startsWith
argument_list|(
name|PDF_HEADER
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|header
operator|.
name|matches
argument_list|(
name|PDF_HEADER
operator|+
literal|"\\d.\\d"
argument_list|)
condition|)
block|{
name|String
name|headerGarbage
init|=
name|header
operator|.
name|substring
argument_list|(
name|PDF_HEADER
operator|.
name|length
argument_list|()
operator|+
literal|3
argument_list|,
name|header
operator|.
name|length
argument_list|()
argument_list|)
operator|+
literal|"\n"
decl_stmt|;
name|header
operator|=
name|header
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|PDF_HEADER
operator|.
name|length
argument_list|()
operator|+
literal|3
argument_list|)
expr_stmt|;
name|pdfSource
operator|.
name|unread
argument_list|(
name|headerGarbage
operator|.
name|getBytes
argument_list|(
literal|"ISO-8859-1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|header
operator|.
name|matches
argument_list|(
name|FDF_HEADER
operator|+
literal|"\\d.\\d"
argument_list|)
condition|)
block|{
name|String
name|headerGarbage
init|=
name|header
operator|.
name|substring
argument_list|(
name|FDF_HEADER
operator|.
name|length
argument_list|()
operator|+
literal|3
argument_list|,
name|header
operator|.
name|length
argument_list|()
argument_list|)
operator|+
literal|"\n"
decl_stmt|;
name|header
operator|=
name|header
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|FDF_HEADER
operator|.
name|length
argument_list|()
operator|+
literal|3
argument_list|)
expr_stmt|;
name|pdfSource
operator|.
name|unread
argument_list|(
name|headerGarbage
operator|.
name|getBytes
argument_list|(
literal|"ISO-8859-1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|document
operator|.
name|setHeaderString
argument_list|(
name|header
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|header
operator|.
name|startsWith
argument_list|(
name|PDF_HEADER
argument_list|)
condition|)
block|{
name|float
name|pdfVersion
init|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|header
operator|.
name|substring
argument_list|(
name|PDF_HEADER
operator|.
name|length
argument_list|()
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|header
operator|.
name|length
argument_list|()
argument_list|,
name|PDF_HEADER
operator|.
name|length
argument_list|()
operator|+
literal|3
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|document
operator|.
name|setVersion
argument_list|(
name|pdfVersion
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|float
name|pdfVersion
init|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|header
operator|.
name|substring
argument_list|(
name|FDF_HEADER
operator|.
name|length
argument_list|()
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|header
operator|.
name|length
argument_list|()
argument_list|,
name|FDF_HEADER
operator|.
name|length
argument_list|()
operator|+
literal|3
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|document
operator|.
name|setVersion
argument_list|(
name|pdfVersion
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error getting pdf version:"
operator|+
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * This will get the document that was parsed.  parse() must be called before this is called.      * When you are done with this document you must call close() on it to release      * resources.      *      * @return The document that was parsed.      *      * @throws IOException If there is an error getting the document.      */
specifier|public
name|COSDocument
name|getDocument
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|document
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"You must call parse() before calling getDocument()"
argument_list|)
throw|;
block|}
return|return
name|document
return|;
block|}
comment|/**      * This will get the PD document that was parsed.  When you are done with      * this document you must call close() on it to release resources.      *      * @return The document at the PD layer.      *      * @throws IOException If there is an error getting the document.      */
specifier|public
name|PDDocument
name|getPDDocument
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|PDDocument
argument_list|(
name|getDocument
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * This will get the FDF document that was parsed.  When you are done with      * this document you must call close() on it to release resources.      *      * @return The document at the PD layer.      *      * @throws IOException If there is an error getting the document.      */
specifier|public
name|FDFDocument
name|getFDFDocument
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|FDFDocument
argument_list|(
name|getDocument
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * This will parse the next object from the stream and add it to       * the local state.       *      * @return Returns true if the processed object had an endOfFile marker      *      * @throws IOException If an IO error occurs.      */
specifier|private
name|boolean
name|parseObject
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|currentObjByteOffset
init|=
name|pdfSource
operator|.
name|getOffset
argument_list|()
decl_stmt|;
name|boolean
name|isEndOfFile
init|=
literal|false
decl_stmt|;
name|skipSpaces
argument_list|()
expr_stmt|;
comment|//peek at the next character to determine the type of object we are parsing
name|char
name|peekedChar
init|=
operator|(
name|char
operator|)
name|pdfSource
operator|.
name|peek
argument_list|()
decl_stmt|;
comment|//ignore endobj and endstream sections.
while|while
condition|(
name|peekedChar
operator|==
literal|'e'
condition|)
block|{
comment|//there are times when there are multiple endobj, so lets
comment|//just read them and move on.
name|readString
argument_list|()
expr_stmt|;
name|skipSpaces
argument_list|()
expr_stmt|;
name|peekedChar
operator|=
operator|(
name|char
operator|)
name|pdfSource
operator|.
name|peek
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|pdfSource
operator|.
name|isEOF
argument_list|()
condition|)
block|{
comment|//"Skipping because of EOF" );
comment|//end of file we will return a false and call it a day.
block|}
comment|//xref table. Note: The contents of the Xref table are currently ignored
elseif|else
if|if
condition|(
name|peekedChar
operator|==
literal|'x'
condition|)
block|{
name|parseXrefTable
argument_list|()
expr_stmt|;
block|}
comment|// Note: startxref can occur in either a trailer section or by itself
elseif|else
if|if
condition|(
name|peekedChar
operator|==
literal|'t'
operator|||
name|peekedChar
operator|==
literal|'s'
condition|)
block|{
if|if
condition|(
name|peekedChar
operator|==
literal|'t'
condition|)
block|{
name|parseTrailer
argument_list|()
expr_stmt|;
name|peekedChar
operator|=
operator|(
name|char
operator|)
name|pdfSource
operator|.
name|peek
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|peekedChar
operator|==
literal|'s'
condition|)
block|{
name|parseStartXref
argument_list|()
expr_stmt|;
comment|// readString() calls skipSpaces() will skip comments... that's
comment|// bad for us b/c the %%EOF flag is a comment
while|while
condition|(
name|isWhitespace
argument_list|(
name|pdfSource
operator|.
name|peek
argument_list|()
argument_list|)
operator|&&
operator|!
name|pdfSource
operator|.
name|isEOF
argument_list|()
condition|)
name|pdfSource
operator|.
name|read
argument_list|()
expr_stmt|;
comment|// read (get rid of) all the whitespace
name|String
name|eof
init|=
literal|""
decl_stmt|;
if|if
condition|(
operator|!
name|pdfSource
operator|.
name|isEOF
argument_list|()
condition|)
name|eof
operator|=
name|readLine
argument_list|()
expr_stmt|;
comment|// if there's more data to read, get the EOF flag
comment|// verify that EOF exists (see PDFBOX-979 for documentation on special cases)
if|if
condition|(
operator|!
literal|"%%EOF"
operator|.
name|equals
argument_list|(
name|eof
argument_list|)
condition|)
block|{
if|if
condition|(
name|eof
operator|.
name|startsWith
argument_list|(
literal|"%%EOF"
argument_list|)
condition|)
block|{
comment|// content after marker -> unread with first space byte for read newline
name|pdfSource
operator|.
name|unread
argument_list|(
name|SPACE_BYTE
argument_list|)
expr_stmt|;
comment|// we read a whole line; add space as newline replacement
name|pdfSource
operator|.
name|unread
argument_list|(
name|eof
operator|.
name|substring
argument_list|(
literal|5
argument_list|)
operator|.
name|getBytes
argument_list|(
literal|"ISO-8859-1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// PDF does not conform to spec, we should warn someone
name|log
operator|.
name|warn
argument_list|(
literal|"expected='%%EOF' actual='"
operator|+
name|eof
operator|+
literal|"'"
argument_list|)
expr_stmt|;
comment|// if we're not at the end of a file, just put it back and move on
if|if
condition|(
operator|!
name|pdfSource
operator|.
name|isEOF
argument_list|()
condition|)
block|{
name|pdfSource
operator|.
name|unread
argument_list|(
name|SPACE_BYTE
argument_list|)
expr_stmt|;
comment|// we read a whole line; add space as newline replacement
name|pdfSource
operator|.
name|unread
argument_list|(
name|eof
operator|.
name|getBytes
argument_list|(
literal|"ISO-8859-1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|isEndOfFile
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|//we are going to parse an normal object
else|else
block|{
name|int
name|number
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|genNum
init|=
operator|-
literal|1
decl_stmt|;
name|String
name|objectKey
init|=
literal|null
decl_stmt|;
name|boolean
name|missingObjectNumber
init|=
literal|false
decl_stmt|;
try|try
block|{
name|char
name|peeked
init|=
operator|(
name|char
operator|)
name|pdfSource
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|peeked
operator|==
literal|'<'
condition|)
block|{
name|missingObjectNumber
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|number
operator|=
name|readInt
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//ok for some reason "GNU Ghostscript 5.10" puts two endobj
comment|//statements after an object, of course this is nonsense
comment|//but because we want to support as many PDFs as possible
comment|//we will simply try again
name|number
operator|=
name|readInt
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|missingObjectNumber
condition|)
block|{
name|skipSpaces
argument_list|()
expr_stmt|;
name|genNum
operator|=
name|readInt
argument_list|()
expr_stmt|;
name|objectKey
operator|=
name|readString
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|//System.out.println( "parseObject() num=" + number +
comment|//" genNumber=" + genNum + " key='" + objectKey + "'" );
if|if
condition|(
operator|!
name|objectKey
operator|.
name|equals
argument_list|(
literal|"obj"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|isContinueOnError
argument_list|(
literal|null
argument_list|)
operator|||
operator|!
name|objectKey
operator|.
name|equals
argument_list|(
literal|"o"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"expected='obj' actual='"
operator|+
name|objectKey
operator|+
literal|"' "
operator|+
name|pdfSource
argument_list|)
throw|;
block|}
comment|//assume that "o" was meant to be "obj" (this is a workaround for
comment|// PDFBOX-773 attached PDF Andersens_Fairy_Tales.pdf).
block|}
block|}
else|else
block|{
name|number
operator|=
operator|-
literal|1
expr_stmt|;
name|genNum
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|skipSpaces
argument_list|()
expr_stmt|;
name|COSBase
name|pb
init|=
name|parseDirObject
argument_list|()
decl_stmt|;
name|String
name|endObjectKey
init|=
name|readString
argument_list|()
decl_stmt|;
if|if
condition|(
name|endObjectKey
operator|.
name|equals
argument_list|(
literal|"stream"
argument_list|)
condition|)
block|{
name|pdfSource
operator|.
name|unread
argument_list|(
name|endObjectKey
operator|.
name|getBytes
argument_list|(
literal|"ISO-8859-1"
argument_list|)
argument_list|)
expr_stmt|;
name|pdfSource
operator|.
name|unread
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
if|if
condition|(
name|pb
operator|instanceof
name|COSDictionary
condition|)
block|{
name|pb
operator|=
name|parseCOSStream
argument_list|(
operator|(
name|COSDictionary
operator|)
name|pb
argument_list|,
name|getDocument
argument_list|()
operator|.
name|getScratchFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// this is not legal
comment|// the combination of a dict and the stream/endstream forms a complete stream object
throw|throw
operator|new
name|IOException
argument_list|(
literal|"stream not preceded by dictionary"
argument_list|)
throw|;
block|}
name|skipSpaces
argument_list|()
expr_stmt|;
name|endObjectKey
operator|=
name|readLine
argument_list|()
expr_stmt|;
block|}
name|COSObjectKey
name|key
init|=
operator|new
name|COSObjectKey
argument_list|(
name|number
argument_list|,
name|genNum
argument_list|)
decl_stmt|;
name|COSObject
name|pdfObject
init|=
name|document
operator|.
name|getObjectFromPool
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|pdfObject
operator|.
name|getObject
argument_list|()
operator|==
literal|null
condition|)
block|{
name|pdfObject
operator|.
name|setObject
argument_list|(
name|pb
argument_list|)
expr_stmt|;
block|}
comment|/*              * If the object we returned already has a baseobject, then we have a conflict              * which we will resolve using information after we parse the xref table.              */
else|else
block|{
name|addObjectToConflicts
argument_list|(
name|currentObjByteOffset
argument_list|,
name|key
argument_list|,
name|pb
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|endObjectKey
operator|.
name|equals
argument_list|(
literal|"endobj"
argument_list|)
condition|)
block|{
if|if
condition|(
name|endObjectKey
operator|.
name|startsWith
argument_list|(
literal|"endobj"
argument_list|)
condition|)
block|{
comment|/*                      * Some PDF files don't contain a new line after endobj so we                       * need to make sure that the next object number is getting read separately                      * and not part of the endobj keyword. Ex. Some files would have "endobj28"                      * instead of "endobj"                      */
name|pdfSource
operator|.
name|unread
argument_list|(
name|endObjectKey
operator|.
name|substring
argument_list|(
literal|6
argument_list|)
operator|.
name|getBytes
argument_list|(
literal|"ISO-8859-1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|endObjectKey
operator|.
name|trim
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"endobj"
argument_list|)
condition|)
block|{
comment|/*                      * Some PDF files contain junk (like ">> ", in the case of a PDF                      * I found which was created by Exstream Dialogue Version 5.0.039)                      * in which case we ignore the data before endobj and just move on                      */
name|log
operator|.
name|warn
argument_list|(
literal|"expected='endobj' actual='"
operator|+
name|endObjectKey
operator|+
literal|"' "
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|pdfSource
operator|.
name|isEOF
argument_list|()
condition|)
block|{
comment|//It is possible that the endobj is missing, there
comment|//are several PDFs out there that do that so. Unread
comment|//and assume that endobj was missing
name|pdfSource
operator|.
name|unread
argument_list|(
name|SPACE_BYTE
argument_list|)
expr_stmt|;
comment|// add a space first in place of the newline consumed by readline()
name|pdfSource
operator|.
name|unread
argument_list|(
name|endObjectKey
operator|.
name|getBytes
argument_list|(
literal|"ISO-8859-1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|skipSpaces
argument_list|()
expr_stmt|;
block|}
return|return
name|isEndOfFile
return|;
block|}
comment|/**     * Adds a new ConflictObj to the conflictList.     * @param offset the offset of the ConflictObj     * @param key The COSObjectKey of this object     * @param pb The COSBase of this conflictObj     * @throws IOException     */
specifier|private
name|void
name|addObjectToConflicts
parameter_list|(
name|int
name|offset
parameter_list|,
name|COSObjectKey
name|key
parameter_list|,
name|COSBase
name|pb
parameter_list|)
throws|throws
name|IOException
block|{
name|COSObject
name|obj
init|=
operator|new
name|COSObject
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|obj
operator|.
name|setObjectNumber
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|key
operator|.
name|getNumber
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setGenerationNumber
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|key
operator|.
name|getGeneration
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setObject
argument_list|(
name|pb
argument_list|)
expr_stmt|;
name|ConflictObj
name|conflictObj
init|=
operator|new
name|ConflictObj
argument_list|(
name|offset
argument_list|,
name|key
argument_list|,
name|obj
argument_list|)
decl_stmt|;
name|conflictList
operator|.
name|add
argument_list|(
name|conflictObj
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will parse the startxref section from the stream.      * The startxref value is ignored.      *                  * @return false on parsing error       * @throws IOException If an IO error occurs.      */
specifier|private
name|boolean
name|parseStartXref
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|pdfSource
operator|.
name|peek
argument_list|()
operator|!=
literal|'s'
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|startXRef
init|=
name|readString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|startXRef
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|"startxref"
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|skipSpaces
argument_list|()
expr_stmt|;
comment|/* This integer is the byte offset of the first object referenced by the xref or xref stream          * Not needed for PDFbox          */
name|readInt
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**      * This will parse the xref table from the stream and add it to the state      * The XrefTable contents are ignored.      *                  * @return false on parsing error       * @throws IOException If an IO error occurs.      */
specifier|private
name|boolean
name|parseXrefTable
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|pdfSource
operator|.
name|peek
argument_list|()
operator|!=
literal|'x'
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|xref
init|=
name|readString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|xref
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|"xref"
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|/*          * Xref tables can have multiple sections.           * Each starts with a starting object id and a count.          */
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|currObjID
init|=
name|readInt
argument_list|()
decl_stmt|;
comment|// first obj id
name|int
name|count
init|=
name|readInt
argument_list|()
decl_stmt|;
comment|// the number of objects in the xref table
name|skipSpaces
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|pdfSource
operator|.
name|isEOF
argument_list|()
operator|||
name|isEndOfName
argument_list|(
operator|(
name|char
operator|)
name|pdfSource
operator|.
name|peek
argument_list|()
argument_list|)
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|pdfSource
operator|.
name|peek
argument_list|()
operator|==
literal|'t'
condition|)
block|{
break|break;
block|}
comment|//Ignore table contents
name|String
name|currentLine
init|=
name|readLine
argument_list|()
decl_stmt|;
name|String
index|[]
name|splitString
init|=
name|currentLine
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
if|if
condition|(
name|splitString
operator|.
name|length
operator|<
literal|3
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"invalid xref line: "
operator|+
name|currentLine
argument_list|)
expr_stmt|;
break|break;
block|}
comment|/* This supports the corrupt table as reported in                   * PDFBOX-474 (XXXX XXX XX n) */
if|if
condition|(
name|splitString
index|[
name|splitString
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|equals
argument_list|(
literal|"n"
argument_list|)
condition|)
block|{
try|try
block|{
name|int
name|currOffset
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|splitString
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|int
name|currGenID
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|splitString
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|COSObjectKey
name|objKey
init|=
operator|new
name|COSObjectKey
argument_list|(
name|currObjID
argument_list|,
name|currGenID
argument_list|)
decl_stmt|;
name|document
operator|.
name|setXRef
argument_list|(
name|objKey
argument_list|,
name|currOffset
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|splitString
index|[
literal|2
index|]
operator|.
name|equals
argument_list|(
literal|"f"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Corrupt XRefTable Entry - ObjID:"
operator|+
name|currObjID
argument_list|)
throw|;
block|}
name|currObjID
operator|++
expr_stmt|;
name|skipSpaces
argument_list|()
expr_stmt|;
block|}
name|skipSpaces
argument_list|()
expr_stmt|;
name|char
name|c
init|=
operator|(
name|char
operator|)
name|pdfSource
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
argument_list|<
literal|'0'
operator|||
name|c
argument_list|>
literal|'9'
condition|)
block|{
break|break;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * This will parse the trailer from the stream and add it to the state.      *                  * @return false on parsing error      * @throws IOException If an IO error occurs.      */
specifier|private
name|boolean
name|parseTrailer
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|pdfSource
operator|.
name|peek
argument_list|()
operator|!=
literal|'t'
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|//read "trailer"
name|String
name|nextLine
init|=
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|nextLine
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|"trailer"
argument_list|)
condition|)
block|{
comment|// in some cases the EOL is missing and the trailer immediately
comment|// continues with "<<" or with a blank character
comment|// even if this does not comply with PDF reference we want to support as many PDFs as possible
comment|// Acrobat reader can also deal with this.
if|if
condition|(
name|nextLine
operator|.
name|startsWith
argument_list|(
literal|"trailer"
argument_list|)
condition|)
block|{
name|byte
index|[]
name|b
init|=
name|nextLine
operator|.
name|getBytes
argument_list|(
literal|"ISO-8859-1"
argument_list|)
decl_stmt|;
name|int
name|len
init|=
literal|"trailer"
operator|.
name|length
argument_list|()
decl_stmt|;
name|pdfSource
operator|.
name|unread
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|pdfSource
operator|.
name|unread
argument_list|(
name|b
argument_list|,
name|len
argument_list|,
name|b
operator|.
name|length
operator|-
name|len
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
comment|// in some cases the EOL is missing and the trailer continues with "<<"
comment|// even if this does not comply with PDF reference we want to support as many PDFs as possible
comment|// Acrobat reader can also deal with this.
name|skipSpaces
argument_list|()
expr_stmt|;
name|COSDictionary
name|parsedTrailer
init|=
name|parseCOSDictionary
argument_list|()
decl_stmt|;
name|COSDictionary
name|docTrailer
init|=
name|document
operator|.
name|getTrailer
argument_list|()
decl_stmt|;
if|if
condition|(
name|docTrailer
operator|==
literal|null
condition|)
block|{
name|document
operator|.
name|setTrailer
argument_list|(
name|parsedTrailer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|docTrailer
operator|.
name|addAll
argument_list|(
name|parsedTrailer
argument_list|)
expr_stmt|;
block|}
name|skipSpaces
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**      * Used to resolve conflicts when a PDF Document has multiple objects with      * the same id number. Ideally, we could use the Xref table when parsing      * the document to be able to determine which of the objects with the same ID      * is correct, but we do not have access to the Xref Table during parsing.      * Instead, we queue up the conflicts and resolve them after the Xref has      * been parsed. The Objects listed in the Xref Table are kept and the       * others are ignored.       */
specifier|private
specifier|static
class|class
name|ConflictObj
block|{
specifier|private
name|int
name|offset
decl_stmt|;
specifier|private
name|COSObjectKey
name|objectKey
decl_stmt|;
specifier|private
name|COSObject
name|object
decl_stmt|;
specifier|public
name|ConflictObj
parameter_list|(
name|int
name|offsetValue
parameter_list|,
name|COSObjectKey
name|key
parameter_list|,
name|COSObject
name|pdfObject
parameter_list|)
block|{
name|this
operator|.
name|offset
operator|=
name|offsetValue
expr_stmt|;
name|this
operator|.
name|objectKey
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|object
operator|=
name|pdfObject
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Object("
operator|+
name|offset
operator|+
literal|", "
operator|+
name|objectKey
operator|+
literal|")"
return|;
block|}
comment|/**          * Sometimes pdf files have objects with the same ID number yet are          * not referenced by the Xref table and therefore should be excluded.                       * This method goes through the conflicts list and replaces the object stored          * in the objects array with this one if it is referenced by the xref          * table.           * @throws IOException          */
specifier|private
specifier|static
name|void
name|resolveConflicts
parameter_list|(
name|COSDocument
name|document
parameter_list|,
name|List
name|conflictList
parameter_list|)
throws|throws
name|IOException
block|{
name|Iterator
name|conflicts
init|=
name|conflictList
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|conflicts
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ConflictObj
name|o
init|=
operator|(
name|ConflictObj
operator|)
name|conflicts
operator|.
name|next
argument_list|()
decl_stmt|;
name|Integer
name|offset
init|=
operator|new
name|Integer
argument_list|(
name|o
operator|.
name|offset
argument_list|)
decl_stmt|;
if|if
condition|(
name|document
operator|.
name|getXrefTable
argument_list|()
operator|.
name|containsValue
argument_list|(
name|offset
argument_list|)
condition|)
block|{
name|COSObject
name|pdfObject
init|=
name|document
operator|.
name|getObjectFromPool
argument_list|(
name|o
operator|.
name|objectKey
argument_list|)
decl_stmt|;
name|pdfObject
operator|.
name|setObject
argument_list|(
name|o
operator|.
name|object
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

