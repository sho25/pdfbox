begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdfparser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdfparser
operator|.
name|XrefTrailerResolver
operator|.
name|XRefType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|fdf
operator|.
name|FDFDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|persistence
operator|.
name|util
operator|.
name|COSObjectKey
import|;
end_import

begin_comment
comment|/**  * This class will handle the parsing of the PDF document.  *  * @author Ben Litchfield  */
end_comment

begin_class
specifier|public
class|class
name|PDFParser
extends|extends
name|BaseParser
block|{
comment|/**      * Log instance.      */
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|PDFParser
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PDF_HEADER
init|=
literal|"%PDF-"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FDF_HEADER
init|=
literal|"%FDF-"
decl_stmt|;
specifier|protected
name|boolean
name|isFDFDocment
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PDF_DEFAULT_VERSION
init|=
literal|"1.4"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FDF_DEFAULT_VERSION
init|=
literal|"1.0"
decl_stmt|;
comment|/**       * Collects all Xref/trailer objects and resolves them into single      * object using startxref reference.       */
specifier|protected
name|XrefTrailerResolver
name|xrefTrailerResolver
init|=
operator|new
name|XrefTrailerResolver
argument_list|()
decl_stmt|;
comment|/**      * Constructor.      *      * @param input The input stream that contains the PDF document.      *      * @throws IOException If there is an error initializing the stream.      */
specifier|public
name|PDFParser
parameter_list|(
name|InputStream
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|parseHeader
parameter_list|()
throws|throws
name|IOException
block|{
comment|// read first line
name|String
name|header
init|=
name|readLine
argument_list|()
decl_stmt|;
comment|// some pdf-documents are broken and the pdf-version is in one of the following lines
if|if
condition|(
operator|!
name|header
operator|.
name|contains
argument_list|(
name|PDF_HEADER
argument_list|)
operator|&&
operator|!
name|header
operator|.
name|contains
argument_list|(
name|FDF_HEADER
argument_list|)
condition|)
block|{
name|header
operator|=
name|readLine
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|header
operator|.
name|contains
argument_list|(
name|PDF_HEADER
argument_list|)
operator|&&
operator|!
name|header
operator|.
name|contains
argument_list|(
name|FDF_HEADER
argument_list|)
condition|)
block|{
comment|// if a line starts with a digit, it has to be the first one with data in it
if|if
condition|(
operator|(
name|header
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
operator|&&
operator|(
name|Character
operator|.
name|isDigit
argument_list|(
name|header
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|)
condition|)
block|{
break|break;
block|}
name|header
operator|=
name|readLine
argument_list|()
expr_stmt|;
block|}
block|}
comment|// nothing found
if|if
condition|(
operator|!
name|header
operator|.
name|contains
argument_list|(
name|PDF_HEADER
argument_list|)
operator|&&
operator|!
name|header
operator|.
name|contains
argument_list|(
name|FDF_HEADER
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error: Header doesn't contain versioninfo"
argument_list|)
throw|;
block|}
comment|//sometimes there is some garbage in the header before the header
comment|//actually starts, so lets try to find the header first.
name|int
name|headerStart
init|=
name|header
operator|.
name|indexOf
argument_list|(
name|PDF_HEADER
argument_list|)
decl_stmt|;
if|if
condition|(
name|headerStart
operator|==
operator|-
literal|1
condition|)
block|{
name|headerStart
operator|=
name|header
operator|.
name|indexOf
argument_list|(
name|FDF_HEADER
argument_list|)
expr_stmt|;
block|}
comment|//greater than zero because if it is zero then
comment|//there is no point of trimming
if|if
condition|(
name|headerStart
operator|>
literal|0
condition|)
block|{
comment|//trim off any leading characters
name|header
operator|=
name|header
operator|.
name|substring
argument_list|(
name|headerStart
argument_list|,
name|header
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*          * This is used if there is garbage after the header on the same line          */
if|if
condition|(
name|header
operator|.
name|startsWith
argument_list|(
name|PDF_HEADER
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|header
operator|.
name|matches
argument_list|(
name|PDF_HEADER
operator|+
literal|"\\d.\\d"
argument_list|)
condition|)
block|{
if|if
condition|(
name|header
operator|.
name|length
argument_list|()
operator|<
name|PDF_HEADER
operator|.
name|length
argument_list|()
operator|+
literal|3
condition|)
block|{
comment|// No version number at all, set to 1.4 as default
name|header
operator|=
name|PDF_HEADER
operator|+
name|PDF_DEFAULT_VERSION
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"No pdf version found, set to "
operator|+
name|PDF_DEFAULT_VERSION
operator|+
literal|" as default."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|headerGarbage
init|=
name|header
operator|.
name|substring
argument_list|(
name|PDF_HEADER
operator|.
name|length
argument_list|()
operator|+
literal|3
argument_list|,
name|header
operator|.
name|length
argument_list|()
argument_list|)
operator|+
literal|"\n"
decl_stmt|;
name|header
operator|=
name|header
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|PDF_HEADER
operator|.
name|length
argument_list|()
operator|+
literal|3
argument_list|)
expr_stmt|;
name|pdfSource
operator|.
name|unread
argument_list|(
name|headerGarbage
operator|.
name|getBytes
argument_list|(
name|ISO_8859_1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|isFDFDocment
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|header
operator|.
name|matches
argument_list|(
name|FDF_HEADER
operator|+
literal|"\\d.\\d"
argument_list|)
condition|)
block|{
if|if
condition|(
name|header
operator|.
name|length
argument_list|()
operator|<
name|FDF_HEADER
operator|.
name|length
argument_list|()
operator|+
literal|3
condition|)
block|{
comment|// No version number at all, set to 1.0 as default
name|header
operator|=
name|FDF_HEADER
operator|+
name|FDF_DEFAULT_VERSION
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"No fdf version found, set to "
operator|+
name|FDF_DEFAULT_VERSION
operator|+
literal|" as default."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|headerGarbage
init|=
name|header
operator|.
name|substring
argument_list|(
name|FDF_HEADER
operator|.
name|length
argument_list|()
operator|+
literal|3
argument_list|,
name|header
operator|.
name|length
argument_list|()
argument_list|)
operator|+
literal|"\n"
decl_stmt|;
name|header
operator|=
name|header
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|FDF_HEADER
operator|.
name|length
argument_list|()
operator|+
literal|3
argument_list|)
expr_stmt|;
name|pdfSource
operator|.
name|unread
argument_list|(
name|headerGarbage
operator|.
name|getBytes
argument_list|(
name|ISO_8859_1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|document
operator|.
name|setHeaderString
argument_list|(
name|header
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|header
operator|.
name|startsWith
argument_list|(
name|PDF_HEADER
argument_list|)
condition|)
block|{
name|float
name|pdfVersion
init|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|header
operator|.
name|substring
argument_list|(
name|PDF_HEADER
operator|.
name|length
argument_list|()
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|header
operator|.
name|length
argument_list|()
argument_list|,
name|PDF_HEADER
operator|.
name|length
argument_list|()
operator|+
literal|3
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|document
operator|.
name|setVersion
argument_list|(
name|pdfVersion
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|float
name|pdfVersion
init|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|header
operator|.
name|substring
argument_list|(
name|FDF_HEADER
operator|.
name|length
argument_list|()
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|header
operator|.
name|length
argument_list|()
argument_list|,
name|FDF_HEADER
operator|.
name|length
argument_list|()
operator|+
literal|3
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|document
operator|.
name|setVersion
argument_list|(
name|pdfVersion
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error getting pdf version: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * This will get the document that was parsed.  parse() must be called before this is called.      * When you are done with this document you must call close() on it to release      * resources.      *      * @return The document that was parsed.      *      * @throws IOException If there is an error getting the document.      */
specifier|public
name|COSDocument
name|getDocument
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|document
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"You must call parse() before calling getDocument()"
argument_list|)
throw|;
block|}
return|return
name|document
return|;
block|}
comment|/**      * This will get the PD document that was parsed.  When you are done with      * this document you must call close() on it to release resources.      *      * @return The document at the PD layer.      *      * @throws IOException If there is an error getting the document.      */
specifier|public
name|PDDocument
name|getPDDocument
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|PDDocument
argument_list|(
name|getDocument
argument_list|()
argument_list|,
name|this
argument_list|)
return|;
block|}
comment|/**      * This will get the FDF document that was parsed.  When you are done with      * this document you must call close() on it to release resources.      *      * @return The document at the PD layer.      *      * @throws IOException If there is an error getting the document.      */
specifier|public
name|FDFDocument
name|getFDFDocument
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|FDFDocument
argument_list|(
name|getDocument
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * This will parse the startxref section from the stream.      * The startxref value is ignored.      *      * @return false on parsing error      * @throws IOException If an IO error occurs.      */
specifier|protected
name|boolean
name|parseStartXref
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|pdfSource
operator|.
name|peek
argument_list|()
operator|!=
literal|'s'
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|startXRef
init|=
name|readString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|startXRef
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|"startxref"
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|skipSpaces
argument_list|()
expr_stmt|;
comment|/* This integer is the byte offset of the first object referenced by the xref or xref stream          * Needed for the incremental update (PREV)          */
name|getDocument
argument_list|()
operator|.
name|setStartXref
argument_list|(
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**      * This will parse the xref table from the stream and add it to the state      * The XrefTable contents are ignored.      * @param startByteOffset the offset to start at      * @return false on parsing error      * @throws IOException If an IO error occurs.      */
specifier|protected
name|boolean
name|parseXrefTable
parameter_list|(
name|long
name|startByteOffset
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|pdfSource
operator|.
name|peek
argument_list|()
operator|!=
literal|'x'
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|xref
init|=
name|readString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|xref
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|"xref"
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// check for trailer after xref
name|String
name|str
init|=
name|readString
argument_list|()
decl_stmt|;
name|byte
index|[]
name|b
init|=
name|str
operator|.
name|getBytes
argument_list|(
name|ISO_8859_1
argument_list|)
decl_stmt|;
name|pdfSource
operator|.
name|unread
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// signal start of new XRef
name|xrefTrailerResolver
operator|.
name|nextXrefObj
argument_list|(
name|startByteOffset
argument_list|,
name|XRefType
operator|.
name|TABLE
argument_list|)
expr_stmt|;
if|if
condition|(
name|str
operator|.
name|startsWith
argument_list|(
literal|"trailer"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"skipping empty xref table"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|/*          * Xref tables can have multiple sections.          * Each starts with a starting object id and a count.          */
while|while
condition|(
literal|true
condition|)
block|{
name|long
name|currObjID
init|=
name|readObjectNumber
argument_list|()
decl_stmt|;
comment|// first obj id
name|long
name|count
init|=
name|readLong
argument_list|()
decl_stmt|;
comment|// the number of objects in the xref table
name|skipSpaces
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|pdfSource
operator|.
name|isEOF
argument_list|()
operator|||
name|isEndOfName
argument_list|(
operator|(
name|char
operator|)
name|pdfSource
operator|.
name|peek
argument_list|()
argument_list|)
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|pdfSource
operator|.
name|peek
argument_list|()
operator|==
literal|'t'
condition|)
block|{
break|break;
block|}
comment|//Ignore table contents
name|String
name|currentLine
init|=
name|readLine
argument_list|()
decl_stmt|;
name|String
index|[]
name|splitString
init|=
name|currentLine
operator|.
name|split
argument_list|(
literal|"\\s"
argument_list|)
decl_stmt|;
if|if
condition|(
name|splitString
operator|.
name|length
operator|<
literal|3
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"invalid xref line: "
operator|+
name|currentLine
argument_list|)
expr_stmt|;
break|break;
block|}
comment|/* This supports the corrupt table as reported in                  * PDFBOX-474 (XXXX XXX XX n) */
if|if
condition|(
name|splitString
index|[
name|splitString
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|equals
argument_list|(
literal|"n"
argument_list|)
condition|)
block|{
try|try
block|{
name|long
name|currOffset
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|splitString
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|int
name|currGenID
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|splitString
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|COSObjectKey
name|objKey
init|=
operator|new
name|COSObjectKey
argument_list|(
name|currObjID
argument_list|,
name|currGenID
argument_list|)
decl_stmt|;
name|xrefTrailerResolver
operator|.
name|setXRef
argument_list|(
name|objKey
argument_list|,
name|currOffset
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|splitString
index|[
literal|2
index|]
operator|.
name|equals
argument_list|(
literal|"f"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Corrupt XRefTable Entry - ObjID:"
operator|+
name|currObjID
argument_list|)
throw|;
block|}
name|currObjID
operator|++
expr_stmt|;
name|skipSpaces
argument_list|()
expr_stmt|;
block|}
name|skipSpaces
argument_list|()
expr_stmt|;
name|char
name|c
init|=
operator|(
name|char
operator|)
name|pdfSource
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
argument_list|<
literal|'0'
operator|||
name|c
argument_list|>
literal|'9'
condition|)
block|{
break|break;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * This will parse the trailer from the stream and add it to the state.      *      * @return false on parsing error      * @throws IOException If an IO error occurs.      */
specifier|protected
name|boolean
name|parseTrailer
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|pdfSource
operator|.
name|peek
argument_list|()
operator|!=
literal|'t'
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|//read "trailer"
name|String
name|nextLine
init|=
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|nextLine
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|"trailer"
argument_list|)
condition|)
block|{
comment|// in some cases the EOL is missing and the trailer immediately
comment|// continues with "<<" or with a blank character
comment|// even if this does not comply with PDF reference we want to support as many PDFs as possible
comment|// Acrobat reader can also deal with this.
if|if
condition|(
name|nextLine
operator|.
name|startsWith
argument_list|(
literal|"trailer"
argument_list|)
condition|)
block|{
name|byte
index|[]
name|b
init|=
name|nextLine
operator|.
name|getBytes
argument_list|(
name|ISO_8859_1
argument_list|)
decl_stmt|;
name|int
name|len
init|=
literal|"trailer"
operator|.
name|length
argument_list|()
decl_stmt|;
name|pdfSource
operator|.
name|unread
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|pdfSource
operator|.
name|unread
argument_list|(
name|b
argument_list|,
name|len
argument_list|,
name|b
operator|.
name|length
operator|-
name|len
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
comment|// in some cases the EOL is missing and the trailer continues with "<<"
comment|// even if this does not comply with PDF reference we want to support as many PDFs as possible
comment|// Acrobat reader can also deal with this.
name|skipSpaces
argument_list|()
expr_stmt|;
name|COSDictionary
name|parsedTrailer
init|=
name|parseCOSDictionary
argument_list|()
decl_stmt|;
name|xrefTrailerResolver
operator|.
name|setTrailer
argument_list|(
name|parsedTrailer
argument_list|)
expr_stmt|;
comment|// The version can also be specified within the document /Catalog
name|readVersionInTrailer
argument_list|(
name|parsedTrailer
argument_list|)
expr_stmt|;
name|skipSpaces
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**      * The document catalog can also have a /Version parameter which overrides the version specified      * in the header if, and only if it is greater.      *      * @param parsedTrailer the parsed catalog in the trailer      */
specifier|protected
name|void
name|readVersionInTrailer
parameter_list|(
name|COSDictionary
name|parsedTrailer
parameter_list|)
block|{
name|COSObject
name|root
init|=
operator|(
name|COSObject
operator|)
name|parsedTrailer
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|ROOT
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|!=
literal|null
condition|)
block|{
name|COSBase
name|item
init|=
name|root
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|VERSION
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|instanceof
name|COSName
condition|)
block|{
name|COSName
name|version
init|=
operator|(
name|COSName
operator|)
name|item
decl_stmt|;
name|float
name|trailerVersion
init|=
name|Float
operator|.
name|valueOf
argument_list|(
name|version
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|trailerVersion
operator|>
name|document
operator|.
name|getVersion
argument_list|()
condition|)
block|{
name|document
operator|.
name|setVersion
argument_list|(
name|trailerVersion
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|item
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Incorrect /Version entry is ignored: "
operator|+
name|item
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Fills XRefTrailerResolver with data of given stream.      * Stream must be of type XRef.      * @param stream the stream to be read      * @param objByteOffset the offset to start at      * @param isStandalone should be set to true if the stream is not part of a hybrid xref table      * @throws IOException if there is an error parsing the stream      */
specifier|public
name|void
name|parseXrefStream
parameter_list|(
name|COSStream
name|stream
parameter_list|,
name|long
name|objByteOffset
parameter_list|,
name|boolean
name|isStandalone
parameter_list|)
throws|throws
name|IOException
block|{
comment|// the cross reference stream of a hybrid xref table will be added to the existing one
comment|// and we must not override the offset and the trailer
if|if
condition|(
name|isStandalone
condition|)
block|{
name|xrefTrailerResolver
operator|.
name|nextXrefObj
argument_list|(
name|objByteOffset
argument_list|,
name|XRefType
operator|.
name|STREAM
argument_list|)
expr_stmt|;
name|xrefTrailerResolver
operator|.
name|setTrailer
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
name|PDFXrefStreamParser
name|parser
init|=
operator|new
name|PDFXrefStreamParser
argument_list|(
name|stream
argument_list|,
name|document
argument_list|,
name|xrefTrailerResolver
argument_list|)
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

