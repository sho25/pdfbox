begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdfparser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PushbackInputStream
import|;
end_import

begin_comment
comment|/**  * A SequentialSource backed by an InputStream.  */
end_comment

begin_class
specifier|final
class|class
name|InputStreamSource
implements|implements
name|SequentialSource
block|{
specifier|private
specifier|final
name|PushbackInputStream
name|input
decl_stmt|;
specifier|private
name|int
name|position
decl_stmt|;
comment|/**      * Constructor.      *       * @param input The input stream to wrap.      */
name|InputStreamSource
parameter_list|(
name|InputStream
name|input
parameter_list|)
block|{
name|this
operator|.
name|input
operator|=
operator|new
name|PushbackInputStream
argument_list|(
name|input
argument_list|,
literal|32767
argument_list|)
expr_stmt|;
comment|// maximum length of a PDF string
name|this
operator|.
name|position
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|b
init|=
name|input
operator|.
name|read
argument_list|()
decl_stmt|;
name|position
operator|++
expr_stmt|;
return|return
name|b
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|n
init|=
name|input
operator|.
name|read
argument_list|(
name|b
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|>
literal|0
condition|)
block|{
name|position
operator|+=
name|n
expr_stmt|;
return|return
name|n
return|;
block|}
else|else
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|n
init|=
name|input
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|>
literal|0
condition|)
block|{
name|position
operator|+=
name|n
expr_stmt|;
return|return
name|n
return|;
block|}
else|else
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|getPosition
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|position
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|peek
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|b
init|=
name|input
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|b
operator|!=
operator|-
literal|1
condition|)
block|{
name|input
operator|.
name|unread
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
return|return
name|b
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unread
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|input
operator|.
name|unread
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|position
operator|--
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unread
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
name|input
operator|.
name|unread
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|position
operator|-=
name|bytes
operator|.
name|length
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unread
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|input
operator|.
name|unread
argument_list|(
name|bytes
argument_list|,
name|start
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|position
operator|-=
name|len
operator|-
name|start
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readFully
parameter_list|(
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|int
name|off
init|=
literal|0
decl_stmt|;
name|int
name|len
init|=
name|length
decl_stmt|;
while|while
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|int
name|n
init|=
name|this
operator|.
name|read
argument_list|(
name|bytes
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|>
literal|0
condition|)
block|{
name|off
operator|+=
name|n
expr_stmt|;
name|len
operator|-=
name|n
expr_stmt|;
name|position
operator|+=
name|n
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
return|return
name|bytes
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEOF
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|peek
argument_list|()
operator|==
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|input
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

