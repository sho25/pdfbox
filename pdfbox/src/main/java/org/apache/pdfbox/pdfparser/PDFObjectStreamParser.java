begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdfparser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSStream
import|;
end_import

begin_comment
comment|/**  * This will parse a PDF 1.5 object stream and extract the object with given object number from the stream.  *  * @author Ben Litchfield  *   */
end_comment

begin_class
specifier|public
class|class
name|PDFObjectStreamParser
extends|extends
name|BaseParser
block|{
specifier|private
specifier|final
name|int
name|numberOfObjects
decl_stmt|;
specifier|private
specifier|final
name|int
name|firstObject
decl_stmt|;
comment|/**      * Constructor.      *      * @param stream The stream to parse.      * @param document The document for the current parsing.      * @throws IOException If there is an error initializing the stream.      */
specifier|public
name|PDFObjectStreamParser
parameter_list|(
name|COSStream
name|stream
parameter_list|,
name|COSDocument
name|document
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
operator|new
name|InputStreamSource
argument_list|(
name|stream
operator|.
name|createInputStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|document
operator|=
name|document
expr_stmt|;
comment|// get mandatory number of objects
name|numberOfObjects
operator|=
name|stream
operator|.
name|getInt
argument_list|(
name|COSName
operator|.
name|N
argument_list|)
expr_stmt|;
if|if
condition|(
name|numberOfObjects
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"/N entry missing in object stream"
argument_list|)
throw|;
block|}
comment|// get mandatory stream offset of the first object
name|firstObject
operator|=
name|stream
operator|.
name|getInt
argument_list|(
name|COSName
operator|.
name|FIRST
argument_list|)
expr_stmt|;
if|if
condition|(
name|firstObject
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"/First entry missing in object stream"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Search for/parse the object with the given object number. This will close the stream when it is finished parsing.      * The stream is closed after parsing the object with the given number.      *       * @param objectNumber the number of the object to b e parsed      * @return the parsed object or null if the object with the given number can't be found      * @throws IOException if there is an error while parsing the stream      */
specifier|public
name|COSBase
name|parseObject
parameter_list|(
name|long
name|objectNumber
parameter_list|)
throws|throws
name|IOException
block|{
name|COSBase
name|streamObject
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Integer
name|objectOffset
init|=
name|readObjectNumbers
argument_list|()
operator|.
name|get
argument_list|(
name|objectNumber
argument_list|)
decl_stmt|;
if|if
condition|(
name|objectOffset
operator|!=
literal|null
condition|)
block|{
comment|// jump to the offset of the first object
name|long
name|currentPosition
init|=
name|seqSource
operator|.
name|getPosition
argument_list|()
decl_stmt|;
if|if
condition|(
name|firstObject
operator|>
literal|0
operator|&&
name|currentPosition
operator|<
name|firstObject
condition|)
block|{
name|seqSource
operator|.
name|readFully
argument_list|(
name|firstObject
operator|-
operator|(
name|int
operator|)
name|currentPosition
argument_list|)
expr_stmt|;
block|}
comment|// jump to the offset of the object to be parsed
name|seqSource
operator|.
name|readFully
argument_list|(
name|objectOffset
argument_list|)
expr_stmt|;
name|streamObject
operator|=
name|parseDirObject
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|seqSource
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|streamObject
return|;
block|}
comment|/**      * Read all object numbers from the compressed object stream. The stream is not closed after reading the object      * numbers.      *       * @return a map off all object numbers and the corresponding offset within the object stream.      * @throws IOException if there is an error while parsing the stream      */
specifier|public
name|Map
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|readObjectNumbers
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|objectNumbers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|numberOfObjects
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfObjects
condition|;
name|i
operator|++
control|)
block|{
name|long
name|objectNumber
init|=
name|readObjectNumber
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
operator|(
name|int
operator|)
name|readLong
argument_list|()
decl_stmt|;
name|objectNumbers
operator|.
name|put
argument_list|(
name|objectNumber
argument_list|,
name|offset
argument_list|)
expr_stmt|;
block|}
return|return
name|objectNumbers
return|;
block|}
block|}
end_class

end_unit

