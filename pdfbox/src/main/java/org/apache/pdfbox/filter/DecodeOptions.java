begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Rectangle
import|;
end_import

begin_comment
comment|/**  * Options that may be passed to a Filter to request special handling when decoding the stream.  * Filters may not honor some or all of the specified options, and so callers should check the  * honored flag if further processing relies on the options being used.  */
end_comment

begin_class
specifier|public
class|class
name|DecodeOptions
block|{
comment|/**      * Default decode options. The honored flag for this instance is always true, as it represents      * the default behavior.      */
specifier|public
specifier|static
specifier|final
name|DecodeOptions
name|DEFAULT
init|=
operator|new
name|FinalDecodeOptions
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|private
name|Rectangle
name|sourceRegion
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|subsamplingX
init|=
literal|1
decl_stmt|;
specifier|private
name|int
name|subsamplingY
init|=
literal|1
decl_stmt|;
specifier|private
name|int
name|subsamplingOffsetX
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|subsamplingOffsetY
init|=
literal|0
decl_stmt|;
specifier|private
name|boolean
name|filterSubsampled
init|=
literal|false
decl_stmt|;
comment|/**      * Constructs an empty DecodeOptions instance      */
specifier|public
name|DecodeOptions
parameter_list|()
block|{     }
comment|/**      * Constructs an instance specifying the region of the image that should be decoded. The actual      * region will be clipped to the dimensions of the image.      *      * @param sourceRegion Region of the source image that should be decoded      */
specifier|public
name|DecodeOptions
parameter_list|(
name|Rectangle
name|sourceRegion
parameter_list|)
block|{
name|this
operator|.
name|sourceRegion
operator|=
name|sourceRegion
expr_stmt|;
block|}
comment|/**      * Constructs an instance specifying the region of the image that should be decoded. The actual      * region will be clipped to the dimensions of the image.      *      * @param x x-coordinate of the top-left corner of the region to be decoded      * @param y y-coordinate of the top-left corner of the region to be decoded      * @param width Width of the region to be decoded      * @param height Height of the region to be decoded      */
specifier|public
name|DecodeOptions
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|Rectangle
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs an instance specifying the image should be decoded using subsampling. The      * subsampling will be the same for the X and Y axes.      *      * @param subsampling The number of rows and columns to advance in the source for each pixel in      * the decoded image.      */
specifier|public
name|DecodeOptions
parameter_list|(
name|int
name|subsampling
parameter_list|)
block|{
name|subsamplingX
operator|=
name|subsampling
expr_stmt|;
name|subsamplingY
operator|=
name|subsampling
expr_stmt|;
block|}
comment|/**      * When decoding an image, the part of the image that should be decoded, or null if the entire      * image is needed.      *      * @return The source region to decode, or null if the entire image should be decoded      */
specifier|public
name|Rectangle
name|getSourceRegion
parameter_list|()
block|{
return|return
name|sourceRegion
return|;
block|}
comment|/**      * Sets the region of the source image that should be decoded. The region will be clipped to the      * dimensions of the source image. Setting this value to null will result in the entire image      * being decoded.      *      * @param sourceRegion The source region to decode, or null if the entire image should be      * decoded.      */
specifier|public
name|void
name|setSourceRegion
parameter_list|(
name|Rectangle
name|sourceRegion
parameter_list|)
block|{
name|this
operator|.
name|sourceRegion
operator|=
name|sourceRegion
expr_stmt|;
block|}
comment|/**      * When decoding an image, the number of columns to advance in the source for every pixel      * decoded.      *      * @return The x-axis subsampling value      */
specifier|public
name|int
name|getSubsamplingX
parameter_list|()
block|{
return|return
name|subsamplingX
return|;
block|}
comment|/**      * Sets the number of columns to advance in the source for every pixel decoded      *      * @param ssX The x-axis subsampling value      */
specifier|public
name|void
name|setSubsamplingX
parameter_list|(
name|int
name|ssX
parameter_list|)
block|{
name|this
operator|.
name|subsamplingX
operator|=
name|ssX
expr_stmt|;
block|}
comment|/**      * When decoding an image, the number of rows to advance in the source for every pixel decoded.      *      * @return The y-axis subsampling value      */
specifier|public
name|int
name|getSubsamplingY
parameter_list|()
block|{
return|return
name|subsamplingY
return|;
block|}
comment|/**      * Sets the number of rows to advance in the source for every pixel decoded      *      * @param ssY The y-axis subsampling value      */
specifier|public
name|void
name|setSubsamplingY
parameter_list|(
name|int
name|ssY
parameter_list|)
block|{
name|this
operator|.
name|subsamplingY
operator|=
name|ssY
expr_stmt|;
block|}
comment|/**      * When decoding an image, the horizontal offset for subsampling      *      * @return The x-axis subsampling offset      */
specifier|public
name|int
name|getSubsamplingOffsetX
parameter_list|()
block|{
return|return
name|subsamplingOffsetX
return|;
block|}
comment|/**      * Sets the horizontal subsampling offset for decoding images      *      * @param ssOffsetX The x-axis subsampling offset      */
specifier|public
name|void
name|setSubsamplingOffsetX
parameter_list|(
name|int
name|ssOffsetX
parameter_list|)
block|{
name|this
operator|.
name|subsamplingOffsetX
operator|=
name|ssOffsetX
expr_stmt|;
block|}
comment|/**      * When decoding an image, the vertical offset for subsampling      *      * @return The y-axis subsampling offset      */
specifier|public
name|int
name|getSubsamplingOffsetY
parameter_list|()
block|{
return|return
name|subsamplingOffsetY
return|;
block|}
comment|/**      * Sets the vertical subsampling offset for decoding images      *      * @param ssOffsetY The y-axis subsampling offset      */
specifier|public
name|void
name|setSubsamplingOffsetY
parameter_list|(
name|int
name|ssOffsetY
parameter_list|)
block|{
name|this
operator|.
name|subsamplingOffsetY
operator|=
name|ssOffsetY
expr_stmt|;
block|}
comment|/**      * Flag used by the filter to specify if it performed subsampling.      *      * Some filters may be unable or unwilling to apply subsampling, and so the caller must check      * this flag after decoding.      *      * @return True if the filter applied the options specified by this instance, false otherwise.      */
specifier|public
name|boolean
name|isFilterSubsampled
parameter_list|()
block|{
return|return
name|filterSubsampled
return|;
block|}
comment|/**      * Used internally by filters to signal they have applied subsampling as requested by this      * options instance.      *      * @param filterSubsampled Value specifying if the filter could meet the requested options.      * Usually a filter will only call this with the value<code>true</code>, as the default value      * for the flag is<code>false</code>.      */
name|void
name|setFilterSubsampled
parameter_list|(
name|boolean
name|filterSubsampled
parameter_list|)
block|{
name|this
operator|.
name|filterSubsampled
operator|=
name|filterSubsampled
expr_stmt|;
block|}
comment|/**      * Helper class for reusable instances which may not be modified.      */
specifier|private
specifier|static
class|class
name|FinalDecodeOptions
extends|extends
name|DecodeOptions
block|{
name|FinalDecodeOptions
parameter_list|(
name|boolean
name|filterSubsampled
parameter_list|)
block|{
name|super
operator|.
name|setFilterSubsampled
argument_list|(
name|filterSubsampled
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setSourceRegion
parameter_list|(
name|Rectangle
name|sourceRegion
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This instance may not be modified."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setSubsamplingX
parameter_list|(
name|int
name|ssX
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This instance may not be modified."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setSubsamplingY
parameter_list|(
name|int
name|ssY
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This instance may not be modified."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setSubsamplingOffsetX
parameter_list|(
name|int
name|ssOffsetX
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This instance may not be modified."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setSubsamplingOffsetY
parameter_list|(
name|int
name|ssOffsetY
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This instance may not be modified."
argument_list|)
throw|;
block|}
annotation|@
name|Override
name|void
name|setFilterSubsampled
parameter_list|(
name|boolean
name|filterSubsampled
parameter_list|)
block|{
comment|// Silently ignore the request.
block|}
block|}
block|}
end_class

end_unit

