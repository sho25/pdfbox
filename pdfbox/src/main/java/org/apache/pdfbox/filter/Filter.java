begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|Deflater
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|ImageIO
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|ImageReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_comment
comment|/**  * A filter for stream data.  *  * @author Ben Litchfield  * @author John Hewson  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|Filter
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Filter
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Compression Level System Property. Set this to a value from 0 to 9 to change the zlib deflate      * compression level used to compress /Flate streams. The default value is -1 which is      * {@link Deflater#DEFAULT_COMPRESSION}. To set maximum compression, use      * {@code System.setProperty(Filter.SYSPROP_DEFLATELEVEL, "9");}      */
specifier|public
specifier|static
specifier|final
name|String
name|SYSPROP_DEFLATELEVEL
init|=
literal|"org.apache.pdfbox.filter.deflatelevel"
decl_stmt|;
comment|/**      * Constructor.      */
specifier|protected
name|Filter
parameter_list|()
block|{     }
comment|/**      * Decodes data, producing the original non-encoded data.      * @param encoded the encoded byte stream      * @param decoded the stream where decoded data will be written      * @param parameters the parameters used for decoding      * @param index the index to the filter being decoded      * @return repaired parameters dictionary, or the original parameters dictionary      * @throws IOException if the stream cannot be decoded      */
specifier|public
specifier|abstract
name|DecodeResult
name|decode
parameter_list|(
name|InputStream
name|encoded
parameter_list|,
name|OutputStream
name|decoded
parameter_list|,
name|COSDictionary
name|parameters
parameter_list|,
name|int
name|index
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Decodes data, with optional DecodeOptions. Not all filters support all options, and so      * callers should check the options'<code>honored</code> flag to test if they were applied.      *      * @param encoded the encoded byte stream      * @param decoded the stream where decoded data will be written      * @param parameters the parameters used for decoding      * @param index the index to the filter being decoded      * @param options additional options for decoding      * @return repaired parameters dictionary, or the original parameters dictionary      * @throws IOException if the stream cannot be decoded      */
specifier|public
name|DecodeResult
name|decode
parameter_list|(
name|InputStream
name|encoded
parameter_list|,
name|OutputStream
name|decoded
parameter_list|,
name|COSDictionary
name|parameters
parameter_list|,
name|int
name|index
parameter_list|,
name|DecodeOptions
name|options
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|decode
argument_list|(
name|encoded
argument_list|,
name|decoded
argument_list|,
name|parameters
argument_list|,
name|index
argument_list|)
return|;
block|}
comment|/**      * Encodes data.      * @param input the byte stream to encode      * @param encoded the stream where encoded data will be written      * @param parameters the parameters used for encoding      * @param index the index to the filter being encoded      * @throws IOException if the stream cannot be encoded      */
specifier|public
specifier|final
name|void
name|encode
parameter_list|(
name|InputStream
name|input
parameter_list|,
name|OutputStream
name|encoded
parameter_list|,
name|COSDictionary
name|parameters
parameter_list|,
name|int
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|encode
argument_list|(
name|input
argument_list|,
name|encoded
argument_list|,
name|parameters
operator|.
name|asUnmodifiableDictionary
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// implemented in subclasses
specifier|protected
specifier|abstract
name|void
name|encode
parameter_list|(
name|InputStream
name|input
parameter_list|,
name|OutputStream
name|encoded
parameter_list|,
name|COSDictionary
name|parameters
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|// gets the decode params for a specific filter index, this is used to
comment|// normalise the DecodeParams entry so that it is always a dictionary
specifier|protected
name|COSDictionary
name|getDecodeParams
parameter_list|(
name|COSDictionary
name|dictionary
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|COSBase
name|filter
init|=
name|dictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|FILTER
argument_list|,
name|COSName
operator|.
name|F
argument_list|)
decl_stmt|;
name|COSBase
name|obj
init|=
name|dictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|DECODE_PARMS
argument_list|,
name|COSName
operator|.
name|DP
argument_list|)
decl_stmt|;
if|if
condition|(
name|filter
operator|instanceof
name|COSName
operator|&&
name|obj
operator|instanceof
name|COSDictionary
condition|)
block|{
comment|// PDFBOX-3932: The PDF specification requires "If there is only one filter and that
comment|// filter has parameters, DecodeParms shall be set to the filterâ€™s parameter dictionary"
comment|// but tests show that Adobe means "one filter name object".
return|return
operator|(
name|COSDictionary
operator|)
name|obj
return|;
block|}
elseif|else
if|if
condition|(
name|filter
operator|instanceof
name|COSArray
operator|&&
name|obj
operator|instanceof
name|COSArray
condition|)
block|{
name|COSArray
name|array
init|=
operator|(
name|COSArray
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|index
operator|<
name|array
operator|.
name|size
argument_list|()
condition|)
block|{
name|COSBase
name|objAtIndex
init|=
name|array
operator|.
name|getObject
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|objAtIndex
operator|instanceof
name|COSDictionary
condition|)
block|{
return|return
operator|(
name|COSDictionary
operator|)
name|array
operator|.
name|getObject
argument_list|(
name|index
argument_list|)
return|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|obj
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|filter
operator|instanceof
name|COSArray
operator|||
name|obj
operator|instanceof
name|COSArray
operator|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Expected DecodeParams to be an Array or Dictionary but found "
operator|+
name|obj
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|COSDictionary
argument_list|()
return|;
block|}
comment|/**      * Finds a suitable image reader for a format.      *      * @param formatName The format to search for.      * @param errorCause The probably cause if something goes wrong.      * @return The image reader for the format.      * @throws MissingImageReaderException if no image reader is found.      */
specifier|protected
specifier|static
name|ImageReader
name|findImageReader
parameter_list|(
name|String
name|formatName
parameter_list|,
name|String
name|errorCause
parameter_list|)
throws|throws
name|MissingImageReaderException
block|{
name|Iterator
argument_list|<
name|ImageReader
argument_list|>
name|readers
init|=
name|ImageIO
operator|.
name|getImageReadersByFormatName
argument_list|(
name|formatName
argument_list|)
decl_stmt|;
name|ImageReader
name|reader
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|readers
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|reader
operator|=
name|readers
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|reader
operator|!=
literal|null
operator|&&
name|reader
operator|.
name|canReadRaster
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|reader
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MissingImageReaderException
argument_list|(
literal|"Cannot read "
operator|+
name|formatName
operator|+
literal|" image: "
operator|+
name|errorCause
argument_list|)
throw|;
block|}
return|return
name|reader
return|;
block|}
comment|/**      * @return the ZIP compression level configured for PDFBox      */
specifier|public
specifier|static
name|int
name|getCompressionLevel
parameter_list|()
block|{
name|int
name|compressionLevel
init|=
name|Deflater
operator|.
name|DEFAULT_COMPRESSION
decl_stmt|;
try|try
block|{
name|compressionLevel
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
name|Filter
operator|.
name|SYSPROP_DEFLATELEVEL
argument_list|,
literal|"-1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|Math
operator|.
name|max
argument_list|(
operator|-
literal|1
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|Deflater
operator|.
name|BEST_COMPRESSION
argument_list|,
name|compressionLevel
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

