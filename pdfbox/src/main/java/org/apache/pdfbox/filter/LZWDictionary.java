begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * This is the used for the LZWDecode filter.  This represents the dictionary mappings  * between codes and their values.  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.4 $  */
end_comment

begin_class
specifier|final
class|class
name|LZWDictionary
block|{
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
name|codeToData
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|LZWNode
name|root
init|=
operator|new
name|LZWNode
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|8
index|]
decl_stmt|;
specifier|private
name|int
name|bufferNextWrite
init|=
literal|0
decl_stmt|;
specifier|private
name|long
name|nextCode
init|=
literal|258
decl_stmt|;
specifier|private
name|int
name|codeSize
init|=
literal|9
decl_stmt|;
specifier|private
name|LZWNode
name|previous
init|=
literal|null
decl_stmt|;
specifier|private
name|LZWNode
name|current
init|=
name|root
decl_stmt|;
comment|/**      * This will get the value for the code.  It will return null if the code is not      * defined.      *      * @param code The key to the data.      *      * @return The data that is mapped to the code.      */
specifier|public
name|byte
index|[]
name|getData
parameter_list|(
name|long
name|code
parameter_list|)
block|{
name|byte
index|[]
name|result
init|=
name|codeToData
operator|.
name|get
argument_list|(
name|code
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
operator|&&
name|code
operator|<
literal|256
condition|)
block|{
name|addRootNode
argument_list|(
operator|(
name|byte
operator|)
name|code
argument_list|)
expr_stmt|;
name|result
operator|=
name|codeToData
operator|.
name|get
argument_list|(
name|code
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * This will take a visit from a byte[].  This will create new code entries as      * necessary.      *      * @param data The byte to get a visit from.      *      * @throws IOException If there is an error visiting this data.      */
specifier|public
name|void
name|visit
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|visit
argument_list|(
name|data
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This will take a visit from a byte.  This will create new code entries as      * necessary.      *      * @param data The byte to get a visit from.      *      * @throws IOException If there is an error visiting this data.      */
specifier|public
name|void
name|visit
parameter_list|(
name|byte
name|data
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|buffer
operator|.
name|length
operator|==
name|bufferNextWrite
condition|)
block|{
specifier|final
name|byte
index|[]
name|nextBuffer
init|=
operator|new
name|byte
index|[
literal|2
operator|*
name|buffer
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|nextBuffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
expr_stmt|;
name|buffer
operator|=
name|nextBuffer
expr_stmt|;
block|}
name|buffer
index|[
name|bufferNextWrite
operator|++
index|]
operator|=
name|data
expr_stmt|;
name|previous
operator|=
name|current
expr_stmt|;
name|current
operator|=
name|current
operator|.
name|getNode
argument_list|(
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
name|current
operator|==
literal|null
condition|)
block|{
specifier|final
name|long
name|code
decl_stmt|;
if|if
condition|(
name|previous
operator|==
name|root
condition|)
block|{
name|code
operator|=
name|data
operator|&
literal|0xFF
expr_stmt|;
block|}
else|else
block|{
name|code
operator|=
name|nextCode
operator|++
expr_stmt|;
block|}
name|current
operator|=
operator|new
name|LZWNode
argument_list|(
name|code
argument_list|)
expr_stmt|;
name|previous
operator|.
name|setNode
argument_list|(
name|data
argument_list|,
name|current
argument_list|)
expr_stmt|;
name|byte
index|[]
name|sav
init|=
operator|new
name|byte
index|[
name|bufferNextWrite
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|sav
argument_list|,
literal|0
argument_list|,
name|bufferNextWrite
argument_list|)
expr_stmt|;
name|codeToData
operator|.
name|put
argument_list|(
name|code
argument_list|,
name|sav
argument_list|)
expr_stmt|;
comment|/**             System.out.print( "Adding " + code + "='" );             for( int i=0; i<bufferNextWrite; i++ )             {                 String hex = Integer.toHexString( ((buffer[i]&0xFF );                 if( hex.length()<=1 )                 {                     hex = "0" + hex;                 }                 if( i != bufferNextWrite -1 )                 {                     hex += " ";                 }                 System.out.print( hex.toUpperCase() );             }             System.out.println( "'" );             **/
name|bufferNextWrite
operator|=
literal|0
expr_stmt|;
name|current
operator|=
name|root
expr_stmt|;
name|visit
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|resetCodeSize
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * This will get the next code that will be created.      *      * @return The next code to be created.      */
specifier|public
name|long
name|getNextCode
parameter_list|()
block|{
return|return
name|nextCode
return|;
block|}
comment|/**      * This will get the size of the code in bits, 9, 10, or 11.      *      * @return The size of the code in bits.      */
specifier|public
name|int
name|getCodeSize
parameter_list|()
block|{
return|return
name|codeSize
return|;
block|}
comment|/**      * This will determine the code size.      */
specifier|private
name|void
name|resetCodeSize
parameter_list|()
block|{
if|if
condition|(
name|nextCode
operator|<
literal|512
condition|)
block|{
name|codeSize
operator|=
literal|9
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nextCode
operator|<
literal|1024
condition|)
block|{
name|codeSize
operator|=
literal|10
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nextCode
operator|<
literal|2048
condition|)
block|{
name|codeSize
operator|=
literal|11
expr_stmt|;
block|}
else|else
block|{
name|codeSize
operator|=
literal|12
expr_stmt|;
block|}
block|}
comment|/**      * This will clear the internal buffer that the dictionary uses.      */
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|bufferNextWrite
operator|=
literal|0
expr_stmt|;
name|current
operator|=
name|root
expr_stmt|;
name|previous
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * This will folow the path to the data node.      *      * @param data The path to the node.      *      * @return The node that resides at that path.      */
specifier|public
name|LZWNode
name|getNode
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
name|LZWNode
name|result
init|=
name|root
operator|.
name|getNode
argument_list|(
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
operator|&&
name|data
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|result
operator|=
name|addRootNode
argument_list|(
name|data
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|LZWNode
name|addRootNode
parameter_list|(
name|byte
name|b
parameter_list|)
block|{
name|long
name|code
init|=
name|b
operator|&
literal|0xFF
decl_stmt|;
name|LZWNode
name|result
init|=
operator|new
name|LZWNode
argument_list|(
name|code
argument_list|)
decl_stmt|;
name|root
operator|.
name|setNode
argument_list|(
name|b
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|codeToData
operator|.
name|put
argument_list|(
name|code
argument_list|,
operator|new
name|byte
index|[]
block|{
name|b
block|}
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

