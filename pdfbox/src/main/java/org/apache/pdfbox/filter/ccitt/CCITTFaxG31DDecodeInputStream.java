begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/* $Id$ */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|filter
operator|.
name|ccitt
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_comment
comment|/**  * This is a CCITT Group 3 1D decoder (ITU T.4).  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|CCITTFaxG31DDecodeInputStream
extends|extends
name|InputStream
block|{
specifier|private
specifier|static
specifier|final
name|int
name|CODE_WORD
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|SIGNAL_EOD
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|SIGNAL_EOL
init|=
operator|-
literal|2
decl_stmt|;
specifier|private
name|InputStream
name|source
decl_stmt|;
specifier|private
name|int
name|columns
decl_stmt|;
specifier|private
name|int
name|rows
decl_stmt|;
specifier|private
name|boolean
name|encodedByteAlign
decl_stmt|;
comment|//for reading compressed bits
specifier|private
name|int
name|bits
decl_stmt|;
specifier|private
name|int
name|bitPos
init|=
literal|8
decl_stmt|;
comment|//a single decoded line (one line decoded at a time, then read byte by byte)
specifier|private
name|PackedBitArray
name|decodedLine
decl_stmt|;
specifier|private
name|int
name|decodedWritePos
decl_stmt|;
comment|//write position in bits (used by the decoder algorithm)
specifier|private
name|int
name|decodedReadPos
decl_stmt|;
comment|//read position in bytes (used by the actual InputStream reading)
comment|//state
specifier|private
name|int
name|y
init|=
operator|-
literal|1
decl_stmt|;
comment|//Current row/line
specifier|private
name|int
name|accumulatedRunLength
decl_stmt|;
comment|//Used for make-up codes
specifier|private
specifier|static
specifier|final
name|NonLeafLookupTreeNode
name|WHITE_LOOKUP_TREE_ROOT
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|NonLeafLookupTreeNode
name|BLACK_LOOKUP_TREE_ROOT
decl_stmt|;
static|static
block|{
name|WHITE_LOOKUP_TREE_ROOT
operator|=
operator|new
name|NonLeafLookupTreeNode
argument_list|()
expr_stmt|;
name|BLACK_LOOKUP_TREE_ROOT
operator|=
operator|new
name|NonLeafLookupTreeNode
argument_list|()
expr_stmt|;
name|buildLookupTree
argument_list|()
expr_stmt|;
block|}
comment|/**      * Creates a new decoder.      *       * @param source the input stream containing the compressed data.      * @param columns the number of columns      * @param rows the number of rows (0 if undefined)      * @param encodedByteAlign true if each encoded scan line is filled       * to a byte boundary, false if not      */
specifier|public
name|CCITTFaxG31DDecodeInputStream
parameter_list|(
name|InputStream
name|source
parameter_list|,
name|int
name|columns
parameter_list|,
name|int
name|rows
parameter_list|,
name|boolean
name|encodedByteAlign
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
name|this
operator|.
name|rows
operator|=
name|rows
expr_stmt|;
name|this
operator|.
name|decodedLine
operator|=
operator|new
name|PackedBitArray
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|this
operator|.
name|decodedReadPos
operator|=
name|this
operator|.
name|decodedLine
operator|.
name|getByteCount
argument_list|()
expr_stmt|;
name|this
operator|.
name|encodedByteAlign
operator|=
name|encodedByteAlign
expr_stmt|;
block|}
comment|/**      * Creates a new decoder.      *       * @param source the input stream containing the compressed data.      * @param columns the number of columns      * @param encodedByteAlign true if each encoded scan line is filled       * to a byte boundary, false if not      */
specifier|public
name|CCITTFaxG31DDecodeInputStream
parameter_list|(
name|InputStream
name|source
parameter_list|,
name|int
name|columns
parameter_list|,
name|boolean
name|encodedByteAlign
parameter_list|)
block|{
name|this
argument_list|(
name|source
argument_list|,
name|columns
argument_list|,
literal|0
argument_list|,
name|encodedByteAlign
argument_list|)
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|boolean
name|markSupported
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|decodedReadPos
operator|>=
name|this
operator|.
name|decodedLine
operator|.
name|getByteCount
argument_list|()
condition|)
block|{
name|boolean
name|hasLine
init|=
name|decodeLine
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|hasLine
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
name|byte
name|data
init|=
name|this
operator|.
name|decodedLine
operator|.
name|getData
argument_list|()
index|[
name|this
operator|.
name|decodedReadPos
operator|++
index|]
decl_stmt|;
comment|//System.out.println("Returning " + PackedBitArray.visualizeByte(data));
return|return
name|data
operator|&
literal|0xFF
return|;
block|}
comment|//TODO Implement the other two read methods
specifier|private
name|boolean
name|decodeLine
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|encodedByteAlign
operator|&&
name|this
operator|.
name|bitPos
operator|!=
literal|0
condition|)
block|{
name|readByte
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|bits
operator|<
literal|0
condition|)
block|{
return|return
literal|false
return|;
comment|//Shortcut after EOD
block|}
name|this
operator|.
name|y
operator|++
expr_stmt|;
comment|//System.out.println("decodeLine " + this.y);
name|int
name|x
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|rows
operator|>
literal|0
operator|&&
name|this
operator|.
name|y
operator|>=
name|this
operator|.
name|rows
condition|)
block|{
return|return
literal|false
return|;
comment|//All rows decoded, ignore further bits
block|}
name|this
operator|.
name|decodedLine
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|decodedWritePos
operator|=
literal|0
expr_stmt|;
name|int
name|expectRTC
init|=
literal|6
decl_stmt|;
name|boolean
name|white
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|x
argument_list|<
name|this
operator|.
name|columns
operator|||
name|this
operator|.
name|accumulatedRunLength
argument_list|>
literal|0
condition|)
block|{
name|CodeWord
name|code
decl_stmt|;
name|LookupTreeNode
name|root
init|=
name|white
condition|?
name|WHITE_LOOKUP_TREE_ROOT
else|:
name|BLACK_LOOKUP_TREE_ROOT
decl_stmt|;
name|code
operator|=
name|root
operator|.
name|getNextCodeWord
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|code
operator|==
literal|null
condition|)
block|{
comment|//no more code words (EOD)
if|if
condition|(
name|x
operator|>
literal|0
condition|)
block|{
comment|//Have last line
name|this
operator|.
name|decodedReadPos
operator|=
literal|0
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|code
operator|.
name|getType
argument_list|()
operator|==
name|SIGNAL_EOL
condition|)
block|{
name|expectRTC
operator|--
expr_stmt|;
if|if
condition|(
name|expectRTC
operator|==
literal|0
condition|)
block|{
comment|//System.out.println("Return to Control");
return|return
literal|false
return|;
comment|//Return to Control = End Of Data
block|}
if|if
condition|(
name|x
operator|==
literal|0
condition|)
block|{
comment|//System.out.println("Ignoring leading EOL");
continue|continue;
comment|//Ignore leading EOL
block|}
block|}
else|else
block|{
name|expectRTC
operator|=
operator|-
literal|1
expr_stmt|;
name|x
operator|+=
name|code
operator|.
name|execute
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|accumulatedRunLength
operator|==
literal|0
condition|)
block|{
comment|//Only switch if not using make-up codes
name|white
operator|=
operator|!
name|white
expr_stmt|;
block|}
block|}
block|}
name|this
operator|.
name|decodedReadPos
operator|=
literal|0
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|writeRun
parameter_list|(
name|int
name|bit
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|this
operator|.
name|accumulatedRunLength
operator|+=
name|length
expr_stmt|;
comment|//System.out.println(" Run " + bit + " for " + this.accumulatedRunLength + " at " + decodedWritePos);
if|if
condition|(
name|bit
operator|!=
literal|0
condition|)
block|{
name|this
operator|.
name|decodedLine
operator|.
name|setBits
argument_list|(
name|this
operator|.
name|decodedWritePos
argument_list|,
name|this
operator|.
name|accumulatedRunLength
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|decodedWritePos
operator|+=
name|this
operator|.
name|accumulatedRunLength
expr_stmt|;
name|this
operator|.
name|accumulatedRunLength
operator|=
literal|0
expr_stmt|;
block|}
specifier|private
name|void
name|writeNonTerminating
parameter_list|(
name|int
name|length
parameter_list|)
block|{
comment|//System.out.println(" Make up code for " + length + " bits");
name|this
operator|.
name|accumulatedRunLength
operator|+=
name|length
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|BIT_POS_MASKS
init|=
operator|new
name|int
index|[]
block|{
literal|0x80
block|,
literal|0x40
block|,
literal|0x20
block|,
literal|0x10
block|,
literal|0x08
block|,
literal|0x04
block|,
literal|0x02
block|,
literal|0x01
block|}
decl_stmt|;
specifier|private
name|int
name|readBit
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|bitPos
operator|>=
literal|8
condition|)
block|{
name|readByte
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|bits
operator|<
literal|0
condition|)
block|{
return|return
name|SIGNAL_EOD
return|;
block|}
block|}
specifier|final
name|int
name|bit
init|=
operator|(
name|this
operator|.
name|bits
operator|&
name|BIT_POS_MASKS
index|[
name|this
operator|.
name|bitPos
operator|++
index|]
operator|)
operator|==
literal|0
condition|?
literal|0
else|:
literal|1
decl_stmt|;
comment|//System.out.print(bit);
return|return
name|bit
return|;
block|}
specifier|private
name|void
name|readByte
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|bits
operator|=
name|this
operator|.
name|source
operator|.
name|read
argument_list|()
expr_stmt|;
name|this
operator|.
name|bitPos
operator|=
literal|0
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|short
name|EOL_STARTER
init|=
literal|0x0B00
decl_stmt|;
specifier|private
specifier|static
name|void
name|buildLookupTree
parameter_list|()
block|{
name|buildUpTerminating
argument_list|(
name|CCITTFaxConstants
operator|.
name|WHITE_TERMINATING
argument_list|,
name|WHITE_LOOKUP_TREE_ROOT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|buildUpTerminating
argument_list|(
name|CCITTFaxConstants
operator|.
name|BLACK_TERMINATING
argument_list|,
name|BLACK_LOOKUP_TREE_ROOT
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|buildUpMakeUp
argument_list|(
name|CCITTFaxConstants
operator|.
name|WHITE_MAKE_UP
argument_list|,
name|WHITE_LOOKUP_TREE_ROOT
argument_list|)
expr_stmt|;
name|buildUpMakeUp
argument_list|(
name|CCITTFaxConstants
operator|.
name|BLACK_MAKE_UP
argument_list|,
name|BLACK_LOOKUP_TREE_ROOT
argument_list|)
expr_stmt|;
name|buildUpMakeUpLong
argument_list|(
name|CCITTFaxConstants
operator|.
name|LONG_MAKE_UP
argument_list|,
name|WHITE_LOOKUP_TREE_ROOT
argument_list|)
expr_stmt|;
name|buildUpMakeUpLong
argument_list|(
name|CCITTFaxConstants
operator|.
name|LONG_MAKE_UP
argument_list|,
name|BLACK_LOOKUP_TREE_ROOT
argument_list|)
expr_stmt|;
name|LookupTreeNode
name|eolNode
init|=
operator|new
name|EndOfLineTreeNode
argument_list|()
decl_stmt|;
name|addLookupTreeNode
argument_list|(
name|EOL_STARTER
argument_list|,
name|WHITE_LOOKUP_TREE_ROOT
argument_list|,
name|eolNode
argument_list|)
expr_stmt|;
name|addLookupTreeNode
argument_list|(
name|EOL_STARTER
argument_list|,
name|BLACK_LOOKUP_TREE_ROOT
argument_list|,
name|eolNode
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|buildUpTerminating
parameter_list|(
name|short
index|[]
name|codes
parameter_list|,
name|NonLeafLookupTreeNode
name|root
parameter_list|,
name|boolean
name|white
parameter_list|)
block|{
for|for
control|(
name|int
name|len
init|=
literal|0
init|,
name|c
init|=
name|codes
operator|.
name|length
init|;
name|len
operator|<
name|c
condition|;
name|len
operator|++
control|)
block|{
name|LookupTreeNode
name|leaf
init|=
operator|new
name|RunLengthTreeNode
argument_list|(
name|white
condition|?
literal|0
else|:
literal|1
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|addLookupTreeNode
argument_list|(
name|codes
index|[
name|len
index|]
argument_list|,
name|root
argument_list|,
name|leaf
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|buildUpMakeUp
parameter_list|(
name|short
index|[]
name|codes
parameter_list|,
name|NonLeafLookupTreeNode
name|root
parameter_list|)
block|{
for|for
control|(
name|int
name|len
init|=
literal|0
init|,
name|c
init|=
name|codes
operator|.
name|length
init|;
name|len
operator|<
name|c
condition|;
name|len
operator|++
control|)
block|{
name|LookupTreeNode
name|leaf
init|=
operator|new
name|MakeUpTreeNode
argument_list|(
operator|(
name|len
operator|+
literal|1
operator|)
operator|*
literal|64
argument_list|)
decl_stmt|;
name|addLookupTreeNode
argument_list|(
name|codes
index|[
name|len
index|]
argument_list|,
name|root
argument_list|,
name|leaf
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|buildUpMakeUpLong
parameter_list|(
name|short
index|[]
name|codes
parameter_list|,
name|NonLeafLookupTreeNode
name|root
parameter_list|)
block|{
for|for
control|(
name|int
name|len
init|=
literal|0
init|,
name|c
init|=
name|codes
operator|.
name|length
init|;
name|len
operator|<
name|c
condition|;
name|len
operator|++
control|)
block|{
name|LookupTreeNode
name|leaf
init|=
operator|new
name|MakeUpTreeNode
argument_list|(
operator|(
name|len
operator|+
literal|28
operator|)
operator|*
literal|64
argument_list|)
decl_stmt|;
name|addLookupTreeNode
argument_list|(
name|codes
index|[
name|len
index|]
argument_list|,
name|root
argument_list|,
name|leaf
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|addLookupTreeNode
parameter_list|(
name|short
name|code
parameter_list|,
name|NonLeafLookupTreeNode
name|root
parameter_list|,
name|LookupTreeNode
name|leaf
parameter_list|)
block|{
name|int
name|codeLength
init|=
name|code
operator|>>
literal|8
decl_stmt|;
name|int
name|pattern
init|=
name|code
operator|&
literal|0xFF
decl_stmt|;
name|NonLeafLookupTreeNode
name|node
init|=
name|root
decl_stmt|;
for|for
control|(
name|int
name|p
init|=
name|codeLength
operator|-
literal|1
init|;
name|p
operator|>
literal|0
condition|;
name|p
operator|--
control|)
block|{
name|int
name|bit
init|=
operator|(
name|pattern
operator|>>
name|p
operator|)
operator|&
literal|0x01
decl_stmt|;
name|LookupTreeNode
name|child
init|=
name|node
operator|.
name|get
argument_list|(
name|bit
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|==
literal|null
condition|)
block|{
name|child
operator|=
operator|new
name|NonLeafLookupTreeNode
argument_list|()
expr_stmt|;
name|node
operator|.
name|set
argument_list|(
name|bit
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|child
operator|instanceof
name|NonLeafLookupTreeNode
condition|)
block|{
name|node
operator|=
operator|(
name|NonLeafLookupTreeNode
operator|)
name|child
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"NonLeafLookupTreeNode expected, was "
operator|+
name|child
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|int
name|bit
init|=
name|pattern
operator|&
literal|0x01
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|get
argument_list|(
name|bit
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Two codes conflicting in lookup tree"
argument_list|)
throw|;
block|}
name|node
operator|.
name|set
argument_list|(
name|bit
argument_list|,
name|leaf
argument_list|)
expr_stmt|;
block|}
comment|/** Base class for all nodes in the lookup tree for code words. */
specifier|private
specifier|abstract
specifier|static
class|class
name|LookupTreeNode
block|{
specifier|public
specifier|abstract
name|CodeWord
name|getNextCodeWord
parameter_list|(
name|CCITTFaxG31DDecodeInputStream
name|decoder
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
comment|/** Interface for code words. */
specifier|private
interface|interface
name|CodeWord
block|{
name|int
name|getType
parameter_list|()
function_decl|;
name|int
name|execute
parameter_list|(
name|CCITTFaxG31DDecodeInputStream
name|decoder
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
comment|/** Non-leaf nodes that hold a child node for both the 0 and 1 cases for the lookup tree. */
specifier|private
specifier|static
class|class
name|NonLeafLookupTreeNode
extends|extends
name|LookupTreeNode
block|{
specifier|private
name|LookupTreeNode
name|zero
decl_stmt|;
specifier|private
name|LookupTreeNode
name|one
decl_stmt|;
specifier|public
name|void
name|set
parameter_list|(
name|int
name|bit
parameter_list|,
name|LookupTreeNode
name|node
parameter_list|)
block|{
if|if
condition|(
name|bit
operator|==
literal|0
condition|)
block|{
name|this
operator|.
name|zero
operator|=
name|node
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|one
operator|=
name|node
expr_stmt|;
block|}
block|}
specifier|public
name|LookupTreeNode
name|get
parameter_list|(
name|int
name|bit
parameter_list|)
block|{
return|return
operator|(
name|bit
operator|==
literal|0
operator|)
condition|?
name|this
operator|.
name|zero
else|:
name|this
operator|.
name|one
return|;
block|}
specifier|public
name|CodeWord
name|getNextCodeWord
parameter_list|(
name|CCITTFaxG31DDecodeInputStream
name|decoder
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|bit
init|=
name|decoder
operator|.
name|readBit
argument_list|()
decl_stmt|;
if|if
condition|(
name|bit
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|LookupTreeNode
name|node
init|=
name|get
argument_list|(
name|bit
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
return|return
name|node
operator|.
name|getNextCodeWord
argument_list|(
name|decoder
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid code word encountered"
argument_list|)
throw|;
block|}
block|}
comment|/** This node represents a run length of either 0 or 1. */
specifier|private
specifier|static
class|class
name|RunLengthTreeNode
extends|extends
name|LookupTreeNode
implements|implements
name|CodeWord
block|{
specifier|private
specifier|final
name|int
name|bit
decl_stmt|;
specifier|private
specifier|final
name|int
name|length
decl_stmt|;
name|RunLengthTreeNode
parameter_list|(
name|int
name|bit
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|this
operator|.
name|bit
operator|=
name|bit
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
block|}
specifier|public
name|CodeWord
name|getNextCodeWord
parameter_list|(
name|CCITTFaxG31DDecodeInputStream
name|decoder
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|this
return|;
block|}
specifier|public
name|int
name|execute
parameter_list|(
name|CCITTFaxG31DDecodeInputStream
name|decoder
parameter_list|)
block|{
name|decoder
operator|.
name|writeRun
argument_list|(
name|this
operator|.
name|bit
argument_list|,
name|this
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|length
return|;
block|}
specifier|public
name|int
name|getType
parameter_list|()
block|{
return|return
name|CODE_WORD
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Run Length for "
operator|+
name|length
operator|+
literal|" bits of "
operator|+
operator|(
name|bit
operator|==
literal|0
condition|?
literal|"white"
else|:
literal|"black"
operator|)
return|;
block|}
block|}
comment|/** Represents a make-up code word. */
specifier|private
specifier|static
class|class
name|MakeUpTreeNode
extends|extends
name|LookupTreeNode
implements|implements
name|CodeWord
block|{
specifier|private
specifier|final
name|int
name|length
decl_stmt|;
name|MakeUpTreeNode
parameter_list|(
name|int
name|length
parameter_list|)
block|{
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
block|}
specifier|public
name|CodeWord
name|getNextCodeWord
parameter_list|(
name|CCITTFaxG31DDecodeInputStream
name|decoder
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|this
return|;
block|}
specifier|public
name|int
name|execute
parameter_list|(
name|CCITTFaxG31DDecodeInputStream
name|decoder
parameter_list|)
throws|throws
name|IOException
block|{
name|decoder
operator|.
name|writeNonTerminating
argument_list|(
name|length
argument_list|)
expr_stmt|;
return|return
name|length
return|;
block|}
specifier|public
name|int
name|getType
parameter_list|()
block|{
return|return
name|CODE_WORD
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Make up code for length "
operator|+
name|length
return|;
block|}
block|}
comment|/** Represents an EOL code word. */
specifier|private
specifier|static
class|class
name|EndOfLineTreeNode
extends|extends
name|LookupTreeNode
implements|implements
name|CodeWord
block|{
specifier|public
name|CodeWord
name|getNextCodeWord
parameter_list|(
name|CCITTFaxG31DDecodeInputStream
name|decoder
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|bit
decl_stmt|;
do|do
block|{
name|bit
operator|=
name|decoder
operator|.
name|readBit
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|bit
operator|==
literal|0
condition|)
do|;
comment|//bit 1 finishes the EOL, any number of bit 0 allowed as fillers
if|if
condition|(
name|bit
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|this
return|;
block|}
specifier|public
name|int
name|execute
parameter_list|(
name|CCITTFaxG31DDecodeInputStream
name|decoder
parameter_list|)
throws|throws
name|IOException
block|{
comment|//nop
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|getType
parameter_list|()
block|{
return|return
name|SIGNAL_EOL
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"EOL"
return|;
block|}
block|}
block|}
end_class

end_unit

