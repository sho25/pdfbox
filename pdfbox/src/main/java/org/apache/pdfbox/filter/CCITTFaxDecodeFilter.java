begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|io
operator|.
name|ccitt
operator|.
name|CCITTFaxG31DDecodeInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|io
operator|.
name|ccitt
operator|.
name|FillOrderChangeInputStream
import|;
end_import

begin_comment
comment|/**  * This is a filter for the CCITTFax Decoder.  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @author Marcel Kammer  * @author Paul King  * @version $Revision: 1.13 $  */
end_comment

begin_class
specifier|public
class|class
name|CCITTFaxDecodeFilter
implements|implements
name|Filter
block|{
comment|/**      * Log instance.      */
specifier|private
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CCITTFaxDecodeFilter
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Constructor.      */
specifier|public
name|CCITTFaxDecodeFilter
parameter_list|()
block|{     }
comment|/**      * {@inheritDoc}      */
specifier|public
name|void
name|decode
parameter_list|(
name|InputStream
name|compressedData
parameter_list|,
name|OutputStream
name|result
parameter_list|,
name|COSDictionary
name|options
parameter_list|,
name|int
name|filterIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|COSBase
name|decodeP
init|=
name|options
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|DECODE_PARMS
argument_list|,
name|COSName
operator|.
name|DP
argument_list|)
decl_stmt|;
name|COSDictionary
name|decodeParms
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|decodeP
operator|instanceof
name|COSDictionary
condition|)
block|{
name|decodeParms
operator|=
operator|(
name|COSDictionary
operator|)
name|decodeP
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|decodeP
operator|instanceof
name|COSArray
condition|)
block|{
name|decodeParms
operator|=
call|(
name|COSDictionary
call|)
argument_list|(
operator|(
name|COSArray
operator|)
name|decodeP
argument_list|)
operator|.
name|get
argument_list|(
name|filterIndex
argument_list|)
expr_stmt|;
block|}
name|int
name|length
init|=
name|options
operator|.
name|getInt
argument_list|(
name|COSName
operator|.
name|LENGTH
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|byte
index|[]
name|compressed
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|length
operator|!=
operator|-
literal|1
condition|)
block|{
name|compressed
operator|=
operator|new
name|byte
index|[
name|length
index|]
expr_stmt|;
name|long
name|written
init|=
name|IOUtils
operator|.
name|populateBuffer
argument_list|(
name|compressedData
argument_list|,
name|compressed
argument_list|)
decl_stmt|;
if|if
condition|(
name|written
operator|!=
name|compressed
operator|.
name|length
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Buffer for compressed data did not match the length"
operator|+
literal|" of the actual compressed data"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// inline images don't provide the length of the stream so that
comment|// we have to read until the end of the stream to find out the length
comment|// the streams inline images are stored in are mostly small ones
name|compressed
operator|=
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|compressedData
argument_list|)
expr_stmt|;
block|}
name|int
name|cols
init|=
name|decodeParms
operator|.
name|getInt
argument_list|(
name|COSName
operator|.
name|COLUMNS
argument_list|,
literal|1728
argument_list|)
decl_stmt|;
name|int
name|rows
init|=
name|decodeParms
operator|.
name|getInt
argument_list|(
name|COSName
operator|.
name|ROWS
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|height
init|=
name|options
operator|.
name|getInt
argument_list|(
name|COSName
operator|.
name|HEIGHT
argument_list|,
name|COSName
operator|.
name|H
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|rows
operator|>
literal|0
operator|&&
name|height
operator|>
literal|0
condition|)
block|{
comment|// ensure that rows doesn't contain implausible data, see PDFBOX-771
name|rows
operator|=
name|Math
operator|.
name|min
argument_list|(
name|rows
argument_list|,
name|height
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// at least one of the values has to have a valid value
name|rows
operator|=
name|Math
operator|.
name|max
argument_list|(
name|rows
argument_list|,
name|height
argument_list|)
expr_stmt|;
block|}
name|int
name|k
init|=
name|decodeParms
operator|.
name|getInt
argument_list|(
name|COSName
operator|.
name|K
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|arraySize
init|=
operator|(
name|cols
operator|+
literal|7
operator|)
operator|/
literal|8
operator|*
name|rows
decl_stmt|;
name|TIFFFaxDecoder
name|faxDecoder
init|=
operator|new
name|TIFFFaxDecoder
argument_list|(
literal|1
argument_list|,
name|cols
argument_list|,
name|rows
argument_list|)
decl_stmt|;
comment|// TODO possible options??
name|long
name|tiffOptions
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|k
operator|==
literal|0
condition|)
block|{
name|InputStream
name|in
init|=
operator|new
name|CCITTFaxG31DDecodeInputStream
argument_list|(
operator|new
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
argument_list|(
name|compressed
argument_list|)
argument_list|,
name|cols
argument_list|)
decl_stmt|;
name|in
operator|=
operator|new
name|FillOrderChangeInputStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
comment|//Decorate to change fill order
name|IOUtils
operator|.
name|copy
argument_list|(
name|in
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|k
operator|>
literal|0
condition|)
block|{
name|byte
index|[]
name|decompressed
init|=
operator|new
name|byte
index|[
name|arraySize
index|]
decl_stmt|;
name|faxDecoder
operator|.
name|decode2D
argument_list|(
name|decompressed
argument_list|,
name|compressed
argument_list|,
literal|0
argument_list|,
name|rows
argument_list|,
name|tiffOptions
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|decompressed
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|k
operator|<
literal|0
condition|)
block|{
name|byte
index|[]
name|decompressed
init|=
operator|new
name|byte
index|[
name|arraySize
index|]
decl_stmt|;
name|faxDecoder
operator|.
name|decodeT6
argument_list|(
name|decompressed
argument_list|,
name|compressed
argument_list|,
literal|0
argument_list|,
name|rows
argument_list|,
name|tiffOptions
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|decompressed
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|void
name|encode
parameter_list|(
name|InputStream
name|rawData
parameter_list|,
name|OutputStream
name|result
parameter_list|,
name|COSDictionary
name|options
parameter_list|,
name|int
name|filterIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"CCITTFaxDecode.encode is not implemented yet, skipping this stream."
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

