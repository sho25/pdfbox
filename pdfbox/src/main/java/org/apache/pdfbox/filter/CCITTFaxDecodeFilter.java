begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_comment
comment|/**  * This is a filter for the CCITTFax Decoder.  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @author Marcel Kammer  * @author Paul King  * @version $Revision: 1.13 $  */
end_comment

begin_class
specifier|public
class|class
name|CCITTFaxDecodeFilter
implements|implements
name|Filter
block|{
comment|/**      * Log instance.      */
specifier|private
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CCITTFaxDecodeFilter
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Filter will write 15 TAG's
comment|// If you add or remove TAG's you will have to modify this value
specifier|private
specifier|static
specifier|final
name|int
name|TAG_COUNT
init|=
literal|15
decl_stmt|;
comment|// HEADERLENGTH(fix 8 Bytes) plus ImageLength(variable)
specifier|private
name|int
name|offset
init|=
literal|8
decl_stmt|;
comment|// Bytecounter for Bytes that will be written after the TAG-DICTIONARY
specifier|private
name|int
name|tailingBytesCount
init|=
literal|0
decl_stmt|;
comment|// Bytes to write after TAG-DICTIONARY
specifier|private
specifier|final
name|ByteArrayOutputStream
name|tailer
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
comment|/**      * Constructor.      */
specifier|public
name|CCITTFaxDecodeFilter
parameter_list|()
block|{     }
comment|/**      * {@inheritDoc}      */
specifier|public
name|void
name|decode
parameter_list|(
name|InputStream
name|compressedData
parameter_list|,
name|OutputStream
name|result
parameter_list|,
name|COSDictionary
name|options
parameter_list|,
name|int
name|filterIndex
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Get ImageParams from PDF
name|COSBase
name|baseObj
init|=
name|options
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|DECODE_PARMS
argument_list|,
name|COSName
operator|.
name|DP
argument_list|)
decl_stmt|;
name|COSDictionary
name|dict
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|baseObj
operator|instanceof
name|COSDictionary
condition|)
block|{
name|dict
operator|=
operator|(
name|COSDictionary
operator|)
name|baseObj
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|baseObj
operator|instanceof
name|COSArray
condition|)
block|{
name|COSArray
name|paramArray
init|=
operator|(
name|COSArray
operator|)
name|baseObj
decl_stmt|;
if|if
condition|(
name|filterIndex
operator|<
name|paramArray
operator|.
name|size
argument_list|()
condition|)
block|{
name|dict
operator|=
operator|(
name|COSDictionary
operator|)
name|paramArray
operator|.
name|getObject
argument_list|(
name|filterIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error: DecodeParms cannot be null for CCITTFaxDecode"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|baseObj
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error: DecodeParms cannot be null for CCITTFaxDecode"
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error: Expected COSArray or COSDictionary and not "
operator|+
name|baseObj
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|int
name|width
init|=
name|options
operator|.
name|getInt
argument_list|(
name|COSName
operator|.
name|WIDTH
argument_list|,
name|COSName
operator|.
name|W
argument_list|)
decl_stmt|;
name|int
name|height
init|=
name|options
operator|.
name|getInt
argument_list|(
name|COSName
operator|.
name|HEIGHT
argument_list|,
name|COSName
operator|.
name|H
argument_list|)
decl_stmt|;
name|int
name|length
init|=
name|options
operator|.
name|getInt
argument_list|(
name|COSName
operator|.
name|LENGTH
argument_list|)
decl_stmt|;
comment|// if the length isn't given within the dictionary,
comment|// the length of the inputstream is used
if|if
condition|(
name|length
operator|==
operator|-
literal|1
condition|)
block|{
name|length
operator|=
name|compressedData
operator|.
name|available
argument_list|()
expr_stmt|;
block|}
name|int
name|compressionType
init|=
name|dict
operator|.
name|getInt
argument_list|(
name|COSName
operator|.
name|K
argument_list|)
decl_stmt|;
name|boolean
name|blackIs1
init|=
name|dict
operator|.
name|getBoolean
argument_list|(
name|COSName
operator|.
name|BLACK_IS_1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// HEADER-INFO and starting point of TAG-DICTIONARY
name|writeTagHeader
argument_list|(
name|result
argument_list|,
name|length
argument_list|)
expr_stmt|;
comment|// IMAGE-DATA
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|//int sum = 0;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|32768
index|]
decl_stmt|;
name|int
name|lentoread
init|=
name|length
decl_stmt|;
while|while
condition|(
operator|(
name|lentoread
operator|>
literal|0
operator|)
operator|&&
operator|(
operator|(
name|i
operator|=
name|compressedData
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|lentoread
argument_list|,
literal|32768
argument_list|)
argument_list|)
operator|)
operator|!=
operator|-
literal|1
operator|)
condition|)
block|{
comment|//sum += i;
name|result
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|lentoread
operator|=
name|lentoread
operator|-
name|i
expr_stmt|;
block|}
comment|// If lentoread is> 0 then we need to write out some padding to equal the header
comment|// We'll use what we have in the buffer it's just padding after all
while|while
condition|(
name|lentoread
operator|>
literal|0
condition|)
block|{
name|result
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|lentoread
argument_list|,
literal|32768
argument_list|)
argument_list|)
expr_stmt|;
name|lentoread
operator|=
name|lentoread
operator|-
name|Math
operator|.
name|min
argument_list|(
name|lentoread
argument_list|,
literal|32738
argument_list|)
expr_stmt|;
block|}
comment|// TAG-COUNT
name|writeTagCount
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// WIDTH 0x0100
name|writeTagWidth
argument_list|(
name|result
argument_list|,
name|width
argument_list|)
expr_stmt|;
comment|// HEIGHT 0x0101
name|writeTagHeight
argument_list|(
name|result
argument_list|,
name|height
argument_list|)
expr_stmt|;
comment|// BITSPERSAMPLE 0x0102
comment|// Always 1 for CCITTFax
name|writeTagBitsPerSample
argument_list|(
name|result
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// COMPRESSION 0x0103
name|writeTagCompression
argument_list|(
name|result
argument_list|,
name|compressionType
argument_list|)
expr_stmt|;
comment|// PHOTOMETRIC 0x0106
name|writeTagPhotometric
argument_list|(
name|result
argument_list|,
name|blackIs1
argument_list|)
expr_stmt|;
comment|// STRIPOFFSET 0x0111
comment|// HERE ALWAYS 8, because ImageData comes before TAG-DICTIONARY
name|writeTagStripOffset
argument_list|(
name|result
argument_list|,
literal|8
argument_list|)
expr_stmt|;
comment|// ORIENTATION 0x0112
name|writeTagOrientation
argument_list|(
name|result
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// SamplesPerPixel 0x0115
name|writeTagSamplesPerPixel
argument_list|(
name|result
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// RowsPerStrip 0x0116
name|writeTagRowsPerStrip
argument_list|(
name|result
argument_list|,
name|height
argument_list|)
expr_stmt|;
comment|// Stripcount 0x0117
name|writeTagStripByteCount
argument_list|(
name|result
argument_list|,
name|length
argument_list|)
expr_stmt|;
comment|// XRESOLUTION 0x011A
comment|// HERE: 200 DPI
name|writeTagXRes
argument_list|(
name|result
argument_list|,
literal|200
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// YRESOLITION 0x011B
comment|// HERE: 200 DPI
name|writeTagYRes
argument_list|(
name|result
argument_list|,
literal|200
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// ResolutionUnit 0x0128
comment|// HERE: DPI
name|writeTagResolutionUnit
argument_list|(
name|result
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// SOFTWARE 0x0131
comment|// minimum 4 chars
name|writeTagSoftware
argument_list|(
name|result
argument_list|,
literal|"pdfbox"
operator|.
name|getBytes
argument_list|(
literal|"ISO-8859-1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// DATE AND TIME 0x0132
name|writeTagDateTime
argument_list|(
name|result
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
comment|// END OF TAG-DICT
name|writeTagTailer
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeTagHeader
parameter_list|(
name|OutputStream
name|result
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|header
init|=
block|{
literal|'M'
block|,
literal|'M'
block|,
literal|0
block|,
literal|'*'
block|}
decl_stmt|;
comment|// Big-endian
name|result
operator|.
name|write
argument_list|(
name|header
argument_list|)
expr_stmt|;
comment|// Add imagelength to offset
name|offset
operator|+=
name|length
expr_stmt|;
comment|// OFFSET TAG-DICTIONARY
name|int
name|i1
init|=
name|offset
operator|/
literal|16777216
decl_stmt|;
comment|//=value/(256*256*256)
name|int
name|i2
init|=
operator|(
name|offset
operator|-
name|i1
operator|*
literal|16777216
operator|)
operator|/
literal|65536
decl_stmt|;
name|int
name|i3
init|=
operator|(
name|offset
operator|-
name|i1
operator|*
literal|16777216
operator|-
name|i2
operator|*
literal|65536
operator|)
operator|/
literal|256
decl_stmt|;
name|int
name|i4
init|=
name|offset
operator|%
literal|256
decl_stmt|;
name|result
operator|.
name|write
argument_list|(
name|i1
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|i2
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|i3
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|i4
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeTagCount
parameter_list|(
name|OutputStream
name|result
parameter_list|)
throws|throws
name|IOException
block|{
name|result
operator|.
name|write
argument_list|(
name|TAG_COUNT
operator|/
literal|256
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|TAG_COUNT
operator|%
literal|256
argument_list|)
expr_stmt|;
comment|// tagCount
block|}
specifier|private
name|void
name|writeTagWidth
parameter_list|(
name|OutputStream
name|result
parameter_list|,
name|int
name|width
parameter_list|)
throws|throws
name|IOException
block|{
comment|// @todo width berechnen
comment|// TAG-ID 100
name|result
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// TAG-TYPE SHORT=3
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// TAG-LENGTH = 1
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// TAG-VALUE = width
name|result
operator|.
name|write
argument_list|(
name|width
operator|/
literal|256
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|width
operator|%
literal|256
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// SHORT=0
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// SHORT=0
block|}
specifier|private
name|void
name|writeTagHeight
parameter_list|(
name|OutputStream
name|result
parameter_list|,
name|int
name|height
parameter_list|)
throws|throws
name|IOException
block|{
comment|//@todo height berechnen
comment|// TAG-ID 101
name|result
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// TAG-TYPE SHORT=3
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// TAG-LENGTH = 1
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// TAG-VALUE
name|result
operator|.
name|write
argument_list|(
name|height
operator|/
literal|256
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|height
operator|%
literal|256
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// SHORT=0
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// SHORT=0
block|}
specifier|private
name|void
name|writeTagBitsPerSample
parameter_list|(
name|OutputStream
name|result
parameter_list|,
name|int
name|value
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TAG-ID 102
name|result
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// TAG-TYPE SHORT=3
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// TAG-LENGTH = 1
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// TAG-VALUE
name|result
operator|.
name|write
argument_list|(
name|value
operator|/
literal|256
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|value
operator|%
literal|256
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|//SHORT=0
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|//SHORT=0
block|}
comment|/**      * Write the tag compression.      *      * @param result The stream to write to.      * @param type The type to write.      * @throws IOException If there is an error writing to the stream.      */
specifier|public
name|void
name|writeTagCompression
parameter_list|(
name|OutputStream
name|result
parameter_list|,
name|int
name|type
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TAG-ID 103
name|result
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// TAG-TYPE SHORT=3
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// TAG-LEGNTH = 1
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// TAG-VALUE
comment|//@todo typ eintragen; hier immer 4
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|<
literal|0
condition|)
block|{
name|result
operator|.
name|write
argument_list|(
literal|4
argument_list|)
expr_stmt|;
comment|// G4
block|}
elseif|else
if|if
condition|(
name|type
operator|==
literal|0
condition|)
block|{
name|result
operator|.
name|write
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// G3-1D
block|}
else|else
block|{
name|result
operator|.
name|write
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// G3-2D
block|}
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeTagPhotometric
parameter_list|(
name|OutputStream
name|result
parameter_list|,
name|boolean
name|blackIs1
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TAG-ID 106
name|result
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|6
argument_list|)
expr_stmt|;
comment|// TAG-TYPE SHORT
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// TAG-LENGTH = 1
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// TAG-VALUE
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|blackIs1
condition|)
block|{
name|result
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// SHORT=0
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// SHORT=0
block|}
specifier|private
name|void
name|writeTagStripOffset
parameter_list|(
name|OutputStream
name|result
parameter_list|,
name|int
name|value
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TAG-ID 111
name|result
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|17
argument_list|)
expr_stmt|;
comment|// TAG-TYPE LONG=4
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|4
argument_list|)
expr_stmt|;
comment|// TAG-LENGTH=1
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// TAG-VALUE = 8 //VOR TAG-DICTIONARY
name|int
name|i1
init|=
name|value
operator|/
literal|16777216
decl_stmt|;
comment|//=value/(256*256*256)
name|int
name|i2
init|=
operator|(
name|value
operator|-
name|i1
operator|*
literal|16777216
operator|)
operator|/
literal|65536
decl_stmt|;
name|int
name|i3
init|=
operator|(
name|value
operator|-
name|i1
operator|*
literal|16777216
operator|-
name|i2
operator|*
literal|65536
operator|)
operator|/
literal|256
decl_stmt|;
name|int
name|i4
init|=
name|value
operator|%
literal|256
decl_stmt|;
name|result
operator|.
name|write
argument_list|(
name|i1
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|i2
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|i3
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|i4
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeTagSamplesPerPixel
parameter_list|(
name|OutputStream
name|result
parameter_list|,
name|int
name|value
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TAG-ID 115
name|result
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|21
argument_list|)
expr_stmt|;
comment|// TAG-TYPE SHORT=3
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// TAG-LENGTH=1
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// TAG-VALUE
name|result
operator|.
name|write
argument_list|(
name|value
operator|/
literal|256
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|value
operator|%
literal|256
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// SHORT=0
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// SHORT=0
block|}
specifier|private
name|void
name|writeTagRowsPerStrip
parameter_list|(
name|OutputStream
name|result
parameter_list|,
name|int
name|value
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TAG-ID 116
name|result
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|22
argument_list|)
expr_stmt|;
comment|// TAG-TYPE SHORT=3
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// TAG-LENGTH=1
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// TAG-VALUE
name|result
operator|.
name|write
argument_list|(
name|value
operator|/
literal|256
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|value
operator|%
literal|256
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// SHORT=0
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// SHORT=0
block|}
specifier|private
name|void
name|writeTagStripByteCount
parameter_list|(
name|OutputStream
name|result
parameter_list|,
name|int
name|value
parameter_list|)
throws|throws
name|IOException
block|{
comment|//@todo value auswerten
comment|// TAG-ID 117
name|result
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|23
argument_list|)
expr_stmt|;
comment|// TAG-TYPE LONG=4
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|4
argument_list|)
expr_stmt|;
comment|// TAG-LENGTH = 1
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// TAG-VALUE
name|int
name|i1
init|=
name|value
operator|/
literal|16777216
decl_stmt|;
comment|//=value/(256*256*256)
name|int
name|i2
init|=
operator|(
name|value
operator|-
name|i1
operator|*
literal|16777216
operator|)
operator|/
literal|65536
decl_stmt|;
name|int
name|i3
init|=
operator|(
name|value
operator|-
name|i1
operator|*
literal|16777216
operator|-
name|i2
operator|*
literal|65536
operator|)
operator|/
literal|256
decl_stmt|;
name|int
name|i4
init|=
name|value
operator|%
literal|256
decl_stmt|;
name|result
operator|.
name|write
argument_list|(
name|i1
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|i2
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|i3
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|i4
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeTagXRes
parameter_list|(
name|OutputStream
name|result
parameter_list|,
name|int
name|value1
parameter_list|,
name|int
name|value2
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TAG-ID 11A
name|result
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|26
argument_list|)
expr_stmt|;
comment|// TAG-TYPE RATIONAL=5
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|5
argument_list|)
expr_stmt|;
comment|// TAG-LENGTH=1
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// TAG-VALUE=OFFSET TO RATIONAL
name|int
name|valueOffset
init|=
name|offset
operator|+
literal|6
operator|+
literal|12
operator|*
name|TAG_COUNT
operator|+
name|tailer
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|i1
init|=
name|valueOffset
operator|/
literal|16777216
decl_stmt|;
comment|//=value/(256*256*256)
name|int
name|i2
init|=
operator|(
name|valueOffset
operator|-
name|i1
operator|*
literal|16777216
operator|)
operator|/
literal|65536
decl_stmt|;
name|int
name|i3
init|=
operator|(
name|valueOffset
operator|-
name|i1
operator|*
literal|16777216
operator|-
name|i2
operator|*
literal|65536
operator|)
operator|/
literal|256
decl_stmt|;
name|int
name|i4
init|=
name|valueOffset
operator|%
literal|256
decl_stmt|;
name|result
operator|.
name|write
argument_list|(
name|i1
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|i2
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|i3
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|i4
argument_list|)
expr_stmt|;
name|i1
operator|=
name|value1
operator|/
literal|16777216
expr_stmt|;
name|i2
operator|=
operator|(
name|value1
operator|-
name|i1
operator|*
literal|16777216
operator|)
operator|/
literal|65536
expr_stmt|;
name|i3
operator|=
operator|(
name|value1
operator|-
name|i1
operator|*
literal|16777216
operator|-
name|i2
operator|*
literal|65536
operator|)
operator|/
literal|256
expr_stmt|;
name|i4
operator|=
name|value1
operator|%
literal|256
expr_stmt|;
name|tailer
operator|.
name|write
argument_list|(
name|i1
argument_list|)
expr_stmt|;
name|tailer
operator|.
name|write
argument_list|(
name|i2
argument_list|)
expr_stmt|;
name|tailer
operator|.
name|write
argument_list|(
name|i3
argument_list|)
expr_stmt|;
name|tailer
operator|.
name|write
argument_list|(
name|i4
argument_list|)
expr_stmt|;
name|i1
operator|=
name|value2
operator|/
literal|16777216
expr_stmt|;
name|i2
operator|=
operator|(
name|value2
operator|-
name|i1
operator|*
literal|16777216
operator|)
operator|/
literal|65536
expr_stmt|;
name|i3
operator|=
operator|(
name|value2
operator|-
name|i1
operator|*
literal|16777216
operator|-
name|i2
operator|*
literal|65536
operator|)
operator|/
literal|256
expr_stmt|;
name|i4
operator|=
name|value2
operator|%
literal|256
expr_stmt|;
name|tailer
operator|.
name|write
argument_list|(
name|i1
argument_list|)
expr_stmt|;
name|tailer
operator|.
name|write
argument_list|(
name|i2
argument_list|)
expr_stmt|;
name|tailer
operator|.
name|write
argument_list|(
name|i3
argument_list|)
expr_stmt|;
name|tailer
operator|.
name|write
argument_list|(
name|i4
argument_list|)
expr_stmt|;
name|tailingBytesCount
operator|+=
literal|8
expr_stmt|;
block|}
specifier|private
name|void
name|writeTagYRes
parameter_list|(
name|OutputStream
name|result
parameter_list|,
name|int
name|value1
parameter_list|,
name|int
name|value2
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TAG-ID 11B
name|result
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|27
argument_list|)
expr_stmt|;
comment|// TAG-TYPE RATIONAL=5
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|5
argument_list|)
expr_stmt|;
comment|// TAG-LENGTH=1
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// TAG-VALUE=OFFSET TO RATIONAL
name|int
name|valueOffset
init|=
name|offset
operator|+
literal|6
operator|+
literal|12
operator|*
name|TAG_COUNT
operator|+
name|tailer
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|i1
init|=
name|valueOffset
operator|/
literal|16777216
decl_stmt|;
comment|//=value/(256*256*256)
name|int
name|i2
init|=
operator|(
name|valueOffset
operator|-
name|i1
operator|*
literal|16777216
operator|)
operator|/
literal|65536
decl_stmt|;
name|int
name|i3
init|=
operator|(
name|valueOffset
operator|-
name|i1
operator|*
literal|16777216
operator|-
name|i2
operator|*
literal|65536
operator|)
operator|/
literal|256
decl_stmt|;
name|int
name|i4
init|=
name|valueOffset
operator|%
literal|256
decl_stmt|;
name|result
operator|.
name|write
argument_list|(
name|i1
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|i2
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|i3
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|i4
argument_list|)
expr_stmt|;
name|i1
operator|=
name|value1
operator|/
literal|16777216
expr_stmt|;
name|i2
operator|=
operator|(
name|value1
operator|-
name|i1
operator|*
literal|16777216
operator|)
operator|/
literal|65536
expr_stmt|;
name|i3
operator|=
operator|(
name|value1
operator|-
name|i1
operator|*
literal|16777216
operator|-
name|i2
operator|*
literal|65536
operator|)
operator|/
literal|256
expr_stmt|;
name|i4
operator|=
name|value1
operator|%
literal|256
expr_stmt|;
name|tailer
operator|.
name|write
argument_list|(
name|i1
argument_list|)
expr_stmt|;
name|tailer
operator|.
name|write
argument_list|(
name|i2
argument_list|)
expr_stmt|;
name|tailer
operator|.
name|write
argument_list|(
name|i3
argument_list|)
expr_stmt|;
name|tailer
operator|.
name|write
argument_list|(
name|i4
argument_list|)
expr_stmt|;
name|i1
operator|=
name|value2
operator|/
literal|16777216
expr_stmt|;
name|i2
operator|=
operator|(
name|value2
operator|-
name|i1
operator|*
literal|16777216
operator|)
operator|/
literal|65536
expr_stmt|;
name|i3
operator|=
operator|(
name|value2
operator|-
name|i1
operator|*
literal|16777216
operator|-
name|i2
operator|*
literal|65536
operator|)
operator|/
literal|256
expr_stmt|;
name|i4
operator|=
name|value2
operator|%
literal|256
expr_stmt|;
name|tailer
operator|.
name|write
argument_list|(
name|i1
argument_list|)
expr_stmt|;
name|tailer
operator|.
name|write
argument_list|(
name|i2
argument_list|)
expr_stmt|;
name|tailer
operator|.
name|write
argument_list|(
name|i3
argument_list|)
expr_stmt|;
name|tailer
operator|.
name|write
argument_list|(
name|i4
argument_list|)
expr_stmt|;
name|tailingBytesCount
operator|+=
literal|8
expr_stmt|;
block|}
specifier|private
name|void
name|writeTagResolutionUnit
parameter_list|(
name|OutputStream
name|result
parameter_list|,
name|int
name|value
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TAG-ID 128
name|result
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|40
argument_list|)
expr_stmt|;
comment|// TAG-TYPE SHORT=3
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// TAG-LENGTH = 1
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// TAG-VALUE
name|result
operator|.
name|write
argument_list|(
name|value
operator|/
literal|256
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|value
operator|%
literal|256
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// SHORT=0
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// SHORT=0
block|}
specifier|private
name|void
name|writeTagOrientation
parameter_list|(
name|OutputStream
name|result
parameter_list|,
name|int
name|value
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TAG-ID 112
name|result
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|18
argument_list|)
expr_stmt|;
comment|// TAG-TYPE SHORT = 3
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// TAG-LENGTH=1
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// TAG-VALUE
name|result
operator|.
name|write
argument_list|(
name|value
operator|/
literal|256
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|value
operator|%
literal|256
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// SHORT=0
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// SHORT=0
block|}
specifier|private
name|void
name|writeTagTailer
parameter_list|(
name|OutputStream
name|result
parameter_list|)
throws|throws
name|IOException
block|{
comment|// END OF TAG-DICTIONARY
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// TAILER WITH VALUES OF RATIONALFIELD's
name|result
operator|.
name|write
argument_list|(
name|tailer
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeTagSoftware
parameter_list|(
name|OutputStream
name|result
parameter_list|,
name|byte
index|[]
name|text
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TAG-ID 131
name|result
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|49
argument_list|)
expr_stmt|;
comment|// TAG-TYPE ASCII=2
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// TAG-LENGTH=id.length+1
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
operator|(
name|text
operator|.
name|length
operator|+
literal|1
operator|)
operator|/
literal|256
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
operator|(
name|text
operator|.
name|length
operator|+
literal|1
operator|)
operator|%
literal|256
argument_list|)
expr_stmt|;
comment|// TAG-VALUE
name|int
name|valueOffset
init|=
name|offset
operator|+
literal|6
operator|+
literal|12
operator|*
name|TAG_COUNT
operator|+
name|tailer
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|i1
init|=
name|valueOffset
operator|/
literal|16777216
decl_stmt|;
comment|//=value/(256*256*256)
name|int
name|i2
init|=
operator|(
name|valueOffset
operator|-
name|i1
operator|*
literal|16777216
operator|)
operator|/
literal|65536
decl_stmt|;
name|int
name|i3
init|=
operator|(
name|valueOffset
operator|-
name|i1
operator|*
literal|16777216
operator|-
name|i2
operator|*
literal|65536
operator|)
operator|/
literal|256
decl_stmt|;
name|int
name|i4
init|=
name|valueOffset
operator|%
literal|256
decl_stmt|;
name|result
operator|.
name|write
argument_list|(
name|i1
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|i2
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|i3
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|i4
argument_list|)
expr_stmt|;
name|tailer
operator|.
name|write
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|tailer
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|tailingBytesCount
operator|+=
name|text
operator|.
name|length
operator|+
literal|1
expr_stmt|;
block|}
specifier|private
name|void
name|writeTagDateTime
parameter_list|(
name|OutputStream
name|result
parameter_list|,
name|Date
name|date
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TAG-ID 132
name|result
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|50
argument_list|)
expr_stmt|;
comment|// TAG-TYPE ASCII=2
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// TAG-LENGTH=20
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
literal|20
argument_list|)
expr_stmt|;
comment|// TAG-VALUE
name|int
name|valueOffset
init|=
name|offset
operator|+
literal|6
operator|+
literal|12
operator|*
name|TAG_COUNT
operator|+
name|tailer
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|i1
init|=
name|valueOffset
operator|/
literal|16777216
decl_stmt|;
comment|//=value/(256*256*256)
name|int
name|i2
init|=
operator|(
name|valueOffset
operator|-
name|i1
operator|*
literal|16777216
operator|)
operator|/
literal|65536
decl_stmt|;
name|int
name|i3
init|=
operator|(
name|valueOffset
operator|-
name|i1
operator|*
literal|16777216
operator|-
name|i2
operator|*
literal|65536
operator|)
operator|/
literal|256
decl_stmt|;
name|int
name|i4
init|=
name|valueOffset
operator|%
literal|256
decl_stmt|;
name|result
operator|.
name|write
argument_list|(
name|i1
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|i2
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|i3
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|i4
argument_list|)
expr_stmt|;
name|SimpleDateFormat
name|sdf
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy:MM:dd HH:mm:ss"
argument_list|)
decl_stmt|;
name|String
name|datetime
init|=
name|sdf
operator|.
name|format
argument_list|(
name|date
argument_list|)
decl_stmt|;
name|tailer
operator|.
name|write
argument_list|(
name|datetime
operator|.
name|getBytes
argument_list|(
literal|"ISO-8859-1"
argument_list|)
argument_list|)
expr_stmt|;
name|tailer
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|tailingBytesCount
operator|+=
literal|20
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|void
name|encode
parameter_list|(
name|InputStream
name|rawData
parameter_list|,
name|OutputStream
name|result
parameter_list|,
name|COSDictionary
name|options
parameter_list|,
name|int
name|filterIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"CCITTFaxDecode.encode is not implemented yet, skipping this stream."
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

