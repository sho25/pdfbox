begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2013, Harald Kuhr  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are met:  *     * Redistributions of source code must retain the above copyright  *       notice, this list of conditions and the following disclaimer.  *     * Redistributions in binary form must reproduce the above copyright  *       notice, this list of conditions and the following disclaimer in the  *       documentation and/or other materials provided with the distribution.  *     * Neither the name "TwelveMonkeys" nor the  *       names of its contributors may be used to endorse or promote products  *       derived from this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR  * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,  * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,  * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR  * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING  * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_comment
comment|/**  * CCITT Modified Group 4 (T6) fax compression.  *  * @author<a href="mailto:mail@schmidor.de">Oliver Schmidtmer</a>  *  * Taken from commit 047884e3d9e1b30516c79b147ead763303dc9bcb of 21.4.2016 from  * twelvemonkeys/imageio/plugins/tiff/CCITTFaxEncoderStream.java  *  * Initial changes for PDFBox:  * - removed Validate  * - G4 compression only  * - removed options  */
end_comment

begin_class
specifier|final
class|class
name|CCITTFaxEncoderStream
extends|extends
name|OutputStream
block|{
specifier|private
name|int
name|currentBufferLength
init|=
literal|0
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|inputBuffer
decl_stmt|;
specifier|private
specifier|final
name|int
name|inputBufferLength
decl_stmt|;
specifier|private
specifier|final
name|int
name|columns
decl_stmt|;
specifier|private
specifier|final
name|int
name|rows
decl_stmt|;
specifier|private
name|int
index|[]
name|changesCurrentRow
decl_stmt|;
specifier|private
name|int
index|[]
name|changesReferenceRow
decl_stmt|;
specifier|private
name|int
name|currentRow
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|changesCurrentRowLength
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|changesReferenceRowLength
init|=
literal|0
decl_stmt|;
specifier|private
name|byte
name|outputBuffer
init|=
literal|0
decl_stmt|;
specifier|private
name|byte
name|outputBufferBitLength
init|=
literal|0
decl_stmt|;
specifier|private
specifier|final
name|int
name|fillOrder
decl_stmt|;
specifier|private
specifier|final
name|OutputStream
name|stream
decl_stmt|;
name|CCITTFaxEncoderStream
parameter_list|(
specifier|final
name|OutputStream
name|stream
parameter_list|,
specifier|final
name|int
name|columns
parameter_list|,
specifier|final
name|int
name|rows
parameter_list|,
specifier|final
name|int
name|fillOrder
parameter_list|)
block|{
name|this
operator|.
name|stream
operator|=
name|stream
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
name|this
operator|.
name|rows
operator|=
name|rows
expr_stmt|;
name|this
operator|.
name|fillOrder
operator|=
name|fillOrder
expr_stmt|;
name|this
operator|.
name|changesReferenceRow
operator|=
operator|new
name|int
index|[
name|columns
index|]
expr_stmt|;
name|this
operator|.
name|changesCurrentRow
operator|=
operator|new
name|int
index|[
name|columns
index|]
expr_stmt|;
name|inputBufferLength
operator|=
operator|(
name|columns
operator|+
literal|7
operator|)
operator|/
literal|8
expr_stmt|;
name|inputBuffer
operator|=
operator|new
name|byte
index|[
name|inputBufferLength
index|]
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|inputBuffer
index|[
name|currentBufferLength
index|]
operator|=
operator|(
name|byte
operator|)
name|b
expr_stmt|;
name|currentBufferLength
operator|++
expr_stmt|;
if|if
condition|(
name|currentBufferLength
operator|==
name|inputBufferLength
condition|)
block|{
name|encodeRow
argument_list|()
expr_stmt|;
name|currentBufferLength
operator|=
literal|0
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|stream
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|encodeRow
parameter_list|()
throws|throws
name|IOException
block|{
name|currentRow
operator|++
expr_stmt|;
name|int
index|[]
name|tmp
init|=
name|changesReferenceRow
decl_stmt|;
name|changesReferenceRow
operator|=
name|changesCurrentRow
expr_stmt|;
name|changesCurrentRow
operator|=
name|tmp
expr_stmt|;
name|changesReferenceRowLength
operator|=
name|changesCurrentRowLength
expr_stmt|;
name|changesCurrentRowLength
operator|=
literal|0
expr_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
name|boolean
name|white
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|index
operator|<
name|columns
condition|)
block|{
name|int
name|byteIndex
init|=
name|index
operator|/
literal|8
decl_stmt|;
name|int
name|bit
init|=
name|index
operator|%
literal|8
decl_stmt|;
if|if
condition|(
operator|(
operator|(
operator|(
name|inputBuffer
index|[
name|byteIndex
index|]
operator|>>
operator|(
literal|7
operator|-
name|bit
operator|)
operator|)
operator|&
literal|1
operator|)
operator|==
literal|1
operator|)
operator|==
operator|(
name|white
operator|)
condition|)
block|{
name|changesCurrentRow
index|[
name|changesCurrentRowLength
index|]
operator|=
name|index
expr_stmt|;
name|changesCurrentRowLength
operator|++
expr_stmt|;
name|white
operator|=
operator|!
name|white
expr_stmt|;
block|}
name|index
operator|++
expr_stmt|;
block|}
name|encodeRowType6
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentRow
operator|==
name|rows
condition|)
block|{
name|writeEOL
argument_list|()
expr_stmt|;
name|writeEOL
argument_list|()
expr_stmt|;
name|fill
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|encodeRowType6
parameter_list|()
throws|throws
name|IOException
block|{
name|encode2D
argument_list|()
expr_stmt|;
block|}
specifier|private
name|int
index|[]
name|getNextChanges
parameter_list|(
name|int
name|pos
parameter_list|,
name|boolean
name|white
parameter_list|)
block|{
name|int
index|[]
name|result
init|=
operator|new
name|int
index|[]
block|{
name|columns
block|,
name|columns
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|changesCurrentRowLength
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|pos
operator|<
name|changesCurrentRow
index|[
name|i
index|]
operator|||
operator|(
name|pos
operator|==
literal|0
operator|&&
name|white
operator|)
condition|)
block|{
name|result
index|[
literal|0
index|]
operator|=
name|changesCurrentRow
index|[
name|i
index|]
expr_stmt|;
if|if
condition|(
operator|(
name|i
operator|+
literal|1
operator|)
operator|<
name|changesCurrentRowLength
condition|)
block|{
name|result
index|[
literal|1
index|]
operator|=
name|changesCurrentRow
index|[
name|i
operator|+
literal|1
index|]
expr_stmt|;
block|}
break|break;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
name|void
name|writeRun
parameter_list|(
name|int
name|runLength
parameter_list|,
name|boolean
name|white
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|nonterm
init|=
name|runLength
operator|/
literal|64
decl_stmt|;
name|Code
index|[]
name|codes
init|=
name|white
condition|?
name|WHITE_NONTERMINATING_CODES
else|:
name|BLACK_NONTERMINATING_CODES
decl_stmt|;
while|while
condition|(
name|nonterm
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|nonterm
operator|>=
name|codes
operator|.
name|length
condition|)
block|{
name|write
argument_list|(
name|codes
index|[
name|codes
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|code
argument_list|,
name|codes
index|[
name|codes
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|length
argument_list|)
expr_stmt|;
name|nonterm
operator|-=
name|codes
operator|.
name|length
expr_stmt|;
block|}
else|else
block|{
name|write
argument_list|(
name|codes
index|[
name|nonterm
operator|-
literal|1
index|]
operator|.
name|code
argument_list|,
name|codes
index|[
name|nonterm
operator|-
literal|1
index|]
operator|.
name|length
argument_list|)
expr_stmt|;
name|nonterm
operator|=
literal|0
expr_stmt|;
block|}
block|}
name|Code
name|c
init|=
name|white
condition|?
name|WHITE_TERMINATING_CODES
index|[
name|runLength
operator|%
literal|64
index|]
else|:
name|BLACK_TERMINATING_CODES
index|[
name|runLength
operator|%
literal|64
index|]
decl_stmt|;
name|write
argument_list|(
name|c
operator|.
name|code
argument_list|,
name|c
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|encode2D
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|white
init|=
literal|true
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
comment|// a0
while|while
condition|(
name|index
operator|<
name|columns
condition|)
block|{
name|int
index|[]
name|nextChanges
init|=
name|getNextChanges
argument_list|(
name|index
argument_list|,
name|white
argument_list|)
decl_stmt|;
comment|// a1, a2
name|int
index|[]
name|nextRefs
init|=
name|getNextRefChanges
argument_list|(
name|index
argument_list|,
name|white
argument_list|)
decl_stmt|;
comment|// b1, b2
name|int
name|difference
init|=
name|nextChanges
index|[
literal|0
index|]
operator|-
name|nextRefs
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|nextChanges
index|[
literal|0
index|]
operator|>
name|nextRefs
index|[
literal|1
index|]
condition|)
block|{
comment|// PMODE
name|write
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|index
operator|=
name|nextRefs
index|[
literal|1
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|difference
operator|>
literal|3
operator|||
name|difference
operator|<
operator|-
literal|3
condition|)
block|{
comment|// HMODE
name|write
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|writeRun
argument_list|(
name|nextChanges
index|[
literal|0
index|]
operator|-
name|index
argument_list|,
name|white
argument_list|)
expr_stmt|;
name|writeRun
argument_list|(
name|nextChanges
index|[
literal|1
index|]
operator|-
name|nextChanges
index|[
literal|0
index|]
argument_list|,
operator|!
name|white
argument_list|)
expr_stmt|;
name|index
operator|=
name|nextChanges
index|[
literal|1
index|]
expr_stmt|;
block|}
else|else
block|{
comment|// VMODE
switch|switch
condition|(
name|difference
condition|)
block|{
case|case
literal|0
case|:
name|write
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|write
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|write
argument_list|(
literal|3
argument_list|,
literal|6
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|write
argument_list|(
literal|3
argument_list|,
literal|7
argument_list|)
expr_stmt|;
break|break;
case|case
operator|-
literal|1
case|:
name|write
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
break|break;
case|case
operator|-
literal|2
case|:
name|write
argument_list|(
literal|2
argument_list|,
literal|6
argument_list|)
expr_stmt|;
break|break;
case|case
operator|-
literal|3
case|:
name|write
argument_list|(
literal|2
argument_list|,
literal|7
argument_list|)
expr_stmt|;
break|break;
block|}
name|white
operator|=
operator|!
name|white
expr_stmt|;
name|index
operator|=
name|nextRefs
index|[
literal|0
index|]
operator|+
name|difference
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|int
index|[]
name|getNextRefChanges
parameter_list|(
name|int
name|a0
parameter_list|,
name|boolean
name|white
parameter_list|)
block|{
name|int
index|[]
name|result
init|=
operator|new
name|int
index|[]
block|{
name|columns
block|,
name|columns
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
operator|(
name|white
condition|?
literal|0
else|:
literal|1
operator|)
init|;
name|i
operator|<
name|changesReferenceRowLength
condition|;
name|i
operator|+=
literal|2
control|)
block|{
if|if
condition|(
name|changesReferenceRow
index|[
name|i
index|]
operator|>
name|a0
operator|||
operator|(
name|a0
operator|==
literal|0
operator|&&
name|i
operator|==
literal|0
operator|)
condition|)
block|{
name|result
index|[
literal|0
index|]
operator|=
name|changesReferenceRow
index|[
name|i
index|]
expr_stmt|;
if|if
condition|(
operator|(
name|i
operator|+
literal|1
operator|)
operator|<
name|changesReferenceRowLength
condition|)
block|{
name|result
index|[
literal|1
index|]
operator|=
name|changesReferenceRow
index|[
name|i
operator|+
literal|1
index|]
expr_stmt|;
block|}
break|break;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
name|void
name|write
parameter_list|(
name|int
name|code
parameter_list|,
name|int
name|codeLength
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|codeLength
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|codeBit
init|=
operator|(
operator|(
name|code
operator|>>
operator|(
name|codeLength
operator|-
name|i
operator|-
literal|1
operator|)
operator|)
operator|&
literal|1
operator|)
operator|==
literal|1
decl_stmt|;
if|if
condition|(
name|fillOrder
operator|==
name|TIFFExtension
operator|.
name|FILL_LEFT_TO_RIGHT
condition|)
block|{
name|outputBuffer
operator||=
operator|(
name|codeBit
condition|?
literal|1
operator|<<
operator|(
literal|7
operator|-
operator|(
operator|(
name|outputBufferBitLength
operator|)
operator|%
literal|8
operator|)
operator|)
else|:
literal|0
operator|)
expr_stmt|;
block|}
else|else
block|{
name|outputBuffer
operator||=
operator|(
name|codeBit
condition|?
literal|1
operator|<<
operator|(
operator|(
operator|(
name|outputBufferBitLength
operator|)
operator|%
literal|8
operator|)
operator|)
else|:
literal|0
operator|)
expr_stmt|;
block|}
name|outputBufferBitLength
operator|++
expr_stmt|;
if|if
condition|(
name|outputBufferBitLength
operator|==
literal|8
condition|)
block|{
name|stream
operator|.
name|write
argument_list|(
name|outputBuffer
argument_list|)
expr_stmt|;
name|clearOutputBuffer
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|writeEOL
parameter_list|()
throws|throws
name|IOException
block|{
name|write
argument_list|(
literal|1
argument_list|,
literal|12
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|fill
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|outputBufferBitLength
operator|!=
literal|0
condition|)
block|{
name|stream
operator|.
name|write
argument_list|(
name|outputBuffer
argument_list|)
expr_stmt|;
block|}
name|clearOutputBuffer
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|clearOutputBuffer
parameter_list|()
block|{
name|outputBuffer
operator|=
literal|0
expr_stmt|;
name|outputBufferBitLength
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|Code
block|{
specifier|private
name|Code
parameter_list|(
name|int
name|code
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|this
operator|.
name|code
operator|=
name|code
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
block|}
specifier|final
name|int
name|code
decl_stmt|;
specifier|final
name|int
name|length
decl_stmt|;
block|}
specifier|public
specifier|static
specifier|final
name|Code
index|[]
name|WHITE_TERMINATING_CODES
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Code
index|[]
name|WHITE_NONTERMINATING_CODES
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Code
index|[]
name|BLACK_TERMINATING_CODES
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Code
index|[]
name|BLACK_NONTERMINATING_CODES
decl_stmt|;
static|static
block|{
comment|// Setup HUFFMAN Codes
name|WHITE_TERMINATING_CODES
operator|=
operator|new
name|Code
index|[
literal|64
index|]
expr_stmt|;
name|WHITE_NONTERMINATING_CODES
operator|=
operator|new
name|Code
index|[
literal|40
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CCITTFaxDecoderStream
operator|.
name|WHITE_CODES
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|bitLength
init|=
name|i
operator|+
literal|4
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|CCITTFaxDecoderStream
operator|.
name|WHITE_CODES
index|[
name|i
index|]
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|int
name|value
init|=
name|CCITTFaxDecoderStream
operator|.
name|WHITE_RUN_LENGTHS
index|[
name|i
index|]
index|[
name|j
index|]
decl_stmt|;
name|int
name|code
init|=
name|CCITTFaxDecoderStream
operator|.
name|WHITE_CODES
index|[
name|i
index|]
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
name|value
operator|<
literal|64
condition|)
block|{
name|WHITE_TERMINATING_CODES
index|[
name|value
index|]
operator|=
operator|new
name|Code
argument_list|(
name|code
argument_list|,
name|bitLength
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|WHITE_NONTERMINATING_CODES
index|[
operator|(
name|value
operator|/
literal|64
operator|)
operator|-
literal|1
index|]
operator|=
operator|new
name|Code
argument_list|(
name|code
argument_list|,
name|bitLength
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|BLACK_TERMINATING_CODES
operator|=
operator|new
name|Code
index|[
literal|64
index|]
expr_stmt|;
name|BLACK_NONTERMINATING_CODES
operator|=
operator|new
name|Code
index|[
literal|40
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CCITTFaxDecoderStream
operator|.
name|BLACK_CODES
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|bitLength
init|=
name|i
operator|+
literal|2
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|CCITTFaxDecoderStream
operator|.
name|BLACK_CODES
index|[
name|i
index|]
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|int
name|value
init|=
name|CCITTFaxDecoderStream
operator|.
name|BLACK_RUN_LENGTHS
index|[
name|i
index|]
index|[
name|j
index|]
decl_stmt|;
name|int
name|code
init|=
name|CCITTFaxDecoderStream
operator|.
name|BLACK_CODES
index|[
name|i
index|]
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
name|value
operator|<
literal|64
condition|)
block|{
name|BLACK_TERMINATING_CODES
index|[
name|value
index|]
operator|=
operator|new
name|Code
argument_list|(
name|code
argument_list|,
name|bitLength
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|BLACK_NONTERMINATING_CODES
index|[
operator|(
name|value
operator|/
literal|64
operator|)
operator|-
literal|1
index|]
operator|=
operator|new
name|Code
argument_list|(
name|code
argument_list|,
name|bitLength
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

