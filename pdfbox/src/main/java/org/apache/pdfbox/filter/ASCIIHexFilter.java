begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|Hex
import|;
end_import

begin_comment
comment|/**  * Decodes data encoded in an ASCII hexadecimal form, reproducing the original binary data.  *  * @author Ben Litchfield  */
end_comment

begin_class
specifier|final
class|class
name|ASCIIHexFilter
extends|extends
name|Filter
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ASCIIHexFilter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|REVERSE_HEX
init|=
block|{
comment|/*   0 */
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
comment|/*  10 */
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
comment|/*  20 */
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
comment|/*  30 */
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
comment|/*  40 */
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
literal|0
block|,
literal|1
block|,
comment|/*  50 */
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|8
block|,
literal|9
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
comment|/*  60 */
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
literal|10
block|,
literal|11
block|,
literal|12
block|,
literal|13
block|,
literal|14
block|,
comment|/*  70 */
literal|15
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
comment|/*  80 */
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
comment|/*  90 */
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
literal|10
block|,
literal|11
block|,
literal|12
block|,
comment|/* 100 */
literal|13
block|,
literal|14
block|,
literal|15
block|}
decl_stmt|;
annotation|@
name|Override
specifier|public
specifier|final
name|DecodeResult
name|decode
parameter_list|(
name|InputStream
name|encoded
parameter_list|,
name|OutputStream
name|decoded
parameter_list|,
name|COSDictionary
name|parameters
parameter_list|,
name|int
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|value
decl_stmt|,
name|firstByte
decl_stmt|,
name|secondByte
decl_stmt|;
while|while
condition|(
operator|(
name|firstByte
operator|=
name|encoded
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// always after first char
while|while
condition|(
name|isWhitespace
argument_list|(
name|firstByte
argument_list|)
condition|)
block|{
name|firstByte
operator|=
name|encoded
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|firstByte
operator|==
operator|-
literal|1
operator|||
name|isEOD
argument_list|(
name|firstByte
argument_list|)
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|REVERSE_HEX
index|[
name|firstByte
index|]
operator|==
operator|-
literal|1
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Invalid hex, int: "
operator|+
name|firstByte
operator|+
literal|" char: "
operator|+
operator|(
name|char
operator|)
name|firstByte
argument_list|)
expr_stmt|;
block|}
name|value
operator|=
name|REVERSE_HEX
index|[
name|firstByte
index|]
operator|*
literal|16
expr_stmt|;
name|secondByte
operator|=
name|encoded
operator|.
name|read
argument_list|()
expr_stmt|;
if|if
condition|(
name|secondByte
operator|==
operator|-
literal|1
operator|||
name|isEOD
argument_list|(
name|secondByte
argument_list|)
condition|)
block|{
comment|// second value behaves like 0 in case of EOD
name|decoded
operator|.
name|write
argument_list|(
name|value
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|secondByte
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|REVERSE_HEX
index|[
name|secondByte
index|]
operator|==
operator|-
literal|1
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Invalid hex, int: "
operator|+
name|secondByte
operator|+
literal|" char: "
operator|+
operator|(
name|char
operator|)
name|secondByte
argument_list|)
expr_stmt|;
block|}
name|value
operator|+=
name|REVERSE_HEX
index|[
name|secondByte
index|]
expr_stmt|;
block|}
name|decoded
operator|.
name|write
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|decoded
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
operator|new
name|DecodeResult
argument_list|(
name|parameters
argument_list|)
return|;
block|}
comment|// whitespace
comment|//   0  0x00  Null (NUL)
comment|//   9  0x09  Tab (HT)
comment|//  10  0x0A  Line feed (LF)
comment|//  12  0x0C  Form feed (FF)
comment|//  13  0x0D  Carriage return (CR)
comment|//  32  0x20  Space (SP)
specifier|private
name|boolean
name|isWhitespace
parameter_list|(
name|int
name|c
parameter_list|)
block|{
return|return
name|c
operator|==
literal|0
operator|||
name|c
operator|==
literal|9
operator|||
name|c
operator|==
literal|10
operator|||
name|c
operator|==
literal|12
operator|||
name|c
operator|==
literal|13
operator|||
name|c
operator|==
literal|32
return|;
block|}
specifier|private
name|boolean
name|isEOD
parameter_list|(
name|int
name|c
parameter_list|)
block|{
return|return
name|c
operator|==
literal|'>'
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|encode
parameter_list|(
name|InputStream
name|input
parameter_list|,
name|OutputStream
name|encoded
parameter_list|,
name|COSDictionary
name|parameters
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|byteRead
decl_stmt|;
while|while
condition|(
operator|(
name|byteRead
operator|=
name|input
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|encoded
operator|.
name|write
argument_list|(
name|Hex
operator|.
name|getBytes
argument_list|(
operator|(
name|byte
operator|)
name|byteRead
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|encoded
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

