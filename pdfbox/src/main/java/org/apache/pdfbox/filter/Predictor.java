begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2014 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_comment
comment|/**  * Helper class to contain predictor decoding used by Flate and LZW filter.   * To see the history, look at the FlateFilter class.  */
end_comment

begin_class
specifier|public
class|class
name|Predictor
block|{
specifier|static
name|void
name|decodePredictor
parameter_list|(
name|int
name|predictor
parameter_list|,
name|int
name|colors
parameter_list|,
name|int
name|bitsPerComponent
parameter_list|,
name|int
name|columns
parameter_list|,
name|InputStream
name|in
parameter_list|,
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|predictor
operator|==
literal|1
condition|)
block|{
comment|// no prediction
name|IOUtils
operator|.
name|copy
argument_list|(
name|in
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// calculate sizes
specifier|final
name|int
name|bitsPerPixel
init|=
name|colors
operator|*
name|bitsPerComponent
decl_stmt|;
specifier|final
name|int
name|bytesPerPixel
init|=
operator|(
name|bitsPerPixel
operator|+
literal|7
operator|)
operator|/
literal|8
decl_stmt|;
specifier|final
name|int
name|rowlength
init|=
operator|(
name|columns
operator|*
name|bitsPerPixel
operator|+
literal|7
operator|)
operator|/
literal|8
decl_stmt|;
name|byte
index|[]
name|actline
init|=
operator|new
name|byte
index|[
name|rowlength
index|]
decl_stmt|;
name|byte
index|[]
name|lastline
init|=
operator|new
name|byte
index|[
name|rowlength
index|]
decl_stmt|;
name|int
name|linepredictor
init|=
name|predictor
decl_stmt|;
while|while
condition|(
name|in
operator|.
name|available
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// test for PNG predictor; each value>= 10 (not only 15) indicates usage of PNG predictor
if|if
condition|(
name|predictor
operator|>=
literal|10
condition|)
block|{
comment|// PNG predictor; each row starts with predictor type (0, 1, 2, 3, 4)
name|linepredictor
operator|=
name|in
operator|.
name|read
argument_list|()
expr_stmt|;
comment|// read per line predictor
if|if
condition|(
name|linepredictor
operator|==
operator|-
literal|1
condition|)
block|{
return|return;
block|}
else|else
block|{
name|linepredictor
operator|+=
literal|10
expr_stmt|;
comment|// add 10 to tread value 0 as 10, 1 as 11, ...
block|}
block|}
comment|// read line
name|int
name|i
decl_stmt|,
name|offset
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|offset
operator|<
name|rowlength
operator|&&
operator|(
operator|(
name|i
operator|=
name|in
operator|.
name|read
argument_list|(
name|actline
argument_list|,
name|offset
argument_list|,
name|rowlength
operator|-
name|offset
argument_list|)
operator|)
operator|!=
operator|-
literal|1
operator|)
condition|)
block|{
name|offset
operator|+=
name|i
expr_stmt|;
block|}
comment|// do prediction as specified in PNG-Specification 1.2
switch|switch
condition|(
name|linepredictor
condition|)
block|{
case|case
literal|2
case|:
comment|// PRED TIFF SUB
comment|// TODO decode tiff with bitsPerComponent< 8;
comment|// e.g. for 4 bpc each nibble must be subtracted separately
if|if
condition|(
name|bitsPerComponent
operator|==
literal|16
condition|)
block|{
for|for
control|(
name|int
name|p
init|=
literal|0
init|;
name|p
operator|<
name|rowlength
condition|;
name|p
operator|+=
literal|2
control|)
block|{
name|int
name|sub
init|=
operator|(
operator|(
name|actline
index|[
name|p
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
operator|+
operator|(
name|actline
index|[
name|p
operator|+
literal|1
index|]
operator|&
literal|0xff
operator|)
decl_stmt|;
name|int
name|left
init|=
name|p
operator|-
name|bytesPerPixel
operator|>=
literal|0
condition|?
operator|(
operator|(
operator|(
name|actline
index|[
name|p
operator|-
name|bytesPerPixel
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
operator|+
operator|(
name|actline
index|[
name|p
operator|-
name|bytesPerPixel
operator|+
literal|1
index|]
operator|&
literal|0xff
operator|)
operator|)
else|:
literal|0
decl_stmt|;
name|actline
index|[
name|p
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
operator|(
name|sub
operator|+
name|left
operator|)
operator|>>
literal|8
operator|)
operator|&
literal|0xff
argument_list|)
expr_stmt|;
name|actline
index|[
name|p
operator|+
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|sub
operator|+
name|left
operator|)
operator|&
literal|0xff
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
if|if
condition|(
name|bitsPerComponent
operator|!=
literal|8
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"TIFF-Predictor with "
operator|+
name|bitsPerComponent
operator|+
literal|" bits per component not supported"
argument_list|)
throw|;
block|}
comment|// for 8 bits per component it is the same algorithm as PRED SUB of PNG format
for|for
control|(
name|int
name|p
init|=
literal|0
init|;
name|p
operator|<
name|rowlength
condition|;
name|p
operator|++
control|)
block|{
name|int
name|sub
init|=
name|actline
index|[
name|p
index|]
operator|&
literal|0xff
decl_stmt|;
name|int
name|left
init|=
name|p
operator|-
name|bytesPerPixel
operator|>=
literal|0
condition|?
name|actline
index|[
name|p
operator|-
name|bytesPerPixel
index|]
operator|&
literal|0xff
else|:
literal|0
decl_stmt|;
name|actline
index|[
name|p
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|sub
operator|+
name|left
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|10
case|:
comment|// PRED NONE
comment|// do nothing
break|break;
case|case
literal|11
case|:
comment|// PRED SUB
for|for
control|(
name|int
name|p
init|=
literal|0
init|;
name|p
operator|<
name|rowlength
condition|;
name|p
operator|++
control|)
block|{
name|int
name|sub
init|=
name|actline
index|[
name|p
index|]
decl_stmt|;
name|int
name|left
init|=
name|p
operator|-
name|bytesPerPixel
operator|>=
literal|0
condition|?
name|actline
index|[
name|p
operator|-
name|bytesPerPixel
index|]
else|:
literal|0
decl_stmt|;
name|actline
index|[
name|p
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|sub
operator|+
name|left
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|12
case|:
comment|// PRED UP
for|for
control|(
name|int
name|p
init|=
literal|0
init|;
name|p
operator|<
name|rowlength
condition|;
name|p
operator|++
control|)
block|{
name|int
name|up
init|=
name|actline
index|[
name|p
index|]
operator|&
literal|0xff
decl_stmt|;
name|int
name|prior
init|=
name|lastline
index|[
name|p
index|]
operator|&
literal|0xff
decl_stmt|;
name|actline
index|[
name|p
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|up
operator|+
name|prior
operator|)
operator|&
literal|0xff
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|13
case|:
comment|// PRED AVG
for|for
control|(
name|int
name|p
init|=
literal|0
init|;
name|p
operator|<
name|rowlength
condition|;
name|p
operator|++
control|)
block|{
name|int
name|avg
init|=
name|actline
index|[
name|p
index|]
operator|&
literal|0xff
decl_stmt|;
name|int
name|left
init|=
name|p
operator|-
name|bytesPerPixel
operator|>=
literal|0
condition|?
name|actline
index|[
name|p
operator|-
name|bytesPerPixel
index|]
operator|&
literal|0xff
else|:
literal|0
decl_stmt|;
name|int
name|up
init|=
name|lastline
index|[
name|p
index|]
operator|&
literal|0xff
decl_stmt|;
name|actline
index|[
name|p
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|avg
operator|+
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
operator|(
name|left
operator|+
name|up
operator|)
operator|/
literal|2
argument_list|)
operator|)
operator|&
literal|0xff
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|14
case|:
comment|// PRED PAETH
for|for
control|(
name|int
name|p
init|=
literal|0
init|;
name|p
operator|<
name|rowlength
condition|;
name|p
operator|++
control|)
block|{
name|int
name|paeth
init|=
name|actline
index|[
name|p
index|]
operator|&
literal|0xff
decl_stmt|;
name|int
name|a
init|=
name|p
operator|-
name|bytesPerPixel
operator|>=
literal|0
condition|?
name|actline
index|[
name|p
operator|-
name|bytesPerPixel
index|]
operator|&
literal|0xff
else|:
literal|0
decl_stmt|;
comment|// left
name|int
name|b
init|=
name|lastline
index|[
name|p
index|]
operator|&
literal|0xff
decl_stmt|;
comment|// upper
name|int
name|c
init|=
name|p
operator|-
name|bytesPerPixel
operator|>=
literal|0
condition|?
name|lastline
index|[
name|p
operator|-
name|bytesPerPixel
index|]
operator|&
literal|0xff
else|:
literal|0
decl_stmt|;
comment|// upperleft
name|int
name|value
init|=
name|a
operator|+
name|b
operator|-
name|c
decl_stmt|;
name|int
name|absa
init|=
name|Math
operator|.
name|abs
argument_list|(
name|value
operator|-
name|a
argument_list|)
decl_stmt|;
name|int
name|absb
init|=
name|Math
operator|.
name|abs
argument_list|(
name|value
operator|-
name|b
argument_list|)
decl_stmt|;
name|int
name|absc
init|=
name|Math
operator|.
name|abs
argument_list|(
name|value
operator|-
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|absa
operator|<=
name|absb
operator|&&
name|absa
operator|<=
name|absc
condition|)
block|{
name|actline
index|[
name|p
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|paeth
operator|+
name|a
operator|)
operator|&
literal|0xff
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|absb
operator|<=
name|absc
condition|)
block|{
name|actline
index|[
name|p
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|paeth
operator|+
name|b
operator|)
operator|&
literal|0xff
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|actline
index|[
name|p
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|paeth
operator|+
name|c
operator|)
operator|&
literal|0xff
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
default|default:
break|break;
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|actline
argument_list|,
literal|0
argument_list|,
name|lastline
argument_list|,
literal|0
argument_list|,
name|rowlength
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|actline
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

