begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2014 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilterOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_comment
comment|/**  * Helper class to contain predictor decoding used by Flate and LZW filter.   * To see the history, look at the FlateFilter class.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|Predictor
block|{
specifier|private
name|Predictor
parameter_list|()
block|{     }
comment|/**      * Decodes a single line of data in-place.      * @param predictor Predictor value for the current line      * @param colors Number of color components, from decode parameters.      * @param bitsPerComponent Number of bits per components, from decode parameters.      * @param columns Number samples in a row, from decode parameters.      * @param actline Current (active) line to decode. Data will be decoded in-place,      *                i.e. - the contents of this buffer will be modified.      * @param lastline The previous decoded line. When decoding the first line, this      *                 parameter should be an empty byte array of the same length as      *<code>actline</code>.      */
specifier|static
name|void
name|decodePredictorRow
parameter_list|(
name|int
name|predictor
parameter_list|,
name|int
name|colors
parameter_list|,
name|int
name|bitsPerComponent
parameter_list|,
name|int
name|columns
parameter_list|,
name|byte
index|[]
name|actline
parameter_list|,
name|byte
index|[]
name|lastline
parameter_list|)
block|{
if|if
condition|(
name|predictor
operator|==
literal|1
condition|)
block|{
comment|// no prediction
return|return;
block|}
specifier|final
name|int
name|bitsPerPixel
init|=
name|colors
operator|*
name|bitsPerComponent
decl_stmt|;
specifier|final
name|int
name|bytesPerPixel
init|=
operator|(
name|bitsPerPixel
operator|+
literal|7
operator|)
operator|/
literal|8
decl_stmt|;
specifier|final
name|int
name|rowlength
init|=
name|actline
operator|.
name|length
decl_stmt|;
switch|switch
condition|(
name|predictor
condition|)
block|{
case|case
literal|2
case|:
comment|// PRED TIFF SUB
if|if
condition|(
name|bitsPerComponent
operator|==
literal|8
condition|)
block|{
comment|// for 8 bits per component it is the same algorithm as PRED SUB of PNG format
for|for
control|(
name|int
name|p
init|=
name|bytesPerPixel
init|;
name|p
operator|<
name|rowlength
condition|;
name|p
operator|++
control|)
block|{
name|int
name|sub
init|=
name|actline
index|[
name|p
index|]
operator|&
literal|0xff
decl_stmt|;
name|int
name|left
init|=
name|actline
index|[
name|p
operator|-
name|bytesPerPixel
index|]
operator|&
literal|0xff
decl_stmt|;
name|actline
index|[
name|p
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|sub
operator|+
name|left
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
if|if
condition|(
name|bitsPerComponent
operator|==
literal|16
condition|)
block|{
for|for
control|(
name|int
name|p
init|=
name|bytesPerPixel
init|;
name|p
operator|<
name|rowlength
condition|;
name|p
operator|+=
literal|2
control|)
block|{
name|int
name|sub
init|=
operator|(
operator|(
name|actline
index|[
name|p
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
operator|+
operator|(
name|actline
index|[
name|p
operator|+
literal|1
index|]
operator|&
literal|0xff
operator|)
decl_stmt|;
name|int
name|left
init|=
operator|(
operator|(
operator|(
name|actline
index|[
name|p
operator|-
name|bytesPerPixel
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
operator|+
operator|(
name|actline
index|[
name|p
operator|-
name|bytesPerPixel
operator|+
literal|1
index|]
operator|&
literal|0xff
operator|)
operator|)
decl_stmt|;
name|actline
index|[
name|p
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
operator|(
name|sub
operator|+
name|left
operator|)
operator|>>
literal|8
operator|)
operator|&
literal|0xff
argument_list|)
expr_stmt|;
name|actline
index|[
name|p
operator|+
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|sub
operator|+
name|left
operator|)
operator|&
literal|0xff
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
if|if
condition|(
name|bitsPerComponent
operator|==
literal|1
operator|&&
name|colors
operator|==
literal|1
condition|)
block|{
comment|// bytesPerPixel cannot be used:
comment|// "A row shall occupy a whole number of bytes, rounded up if necessary.
comment|// Samples and their components shall be packed into bytes
comment|// from high-order to low-order bits."
for|for
control|(
name|int
name|p
init|=
literal|0
init|;
name|p
operator|<
name|rowlength
condition|;
name|p
operator|++
control|)
block|{
for|for
control|(
name|int
name|bit
init|=
literal|7
init|;
name|bit
operator|>=
literal|0
condition|;
operator|--
name|bit
control|)
block|{
name|int
name|sub
init|=
operator|(
name|actline
index|[
name|p
index|]
operator|>>
name|bit
operator|)
operator|&
literal|1
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|0
operator|&&
name|bit
operator|==
literal|7
condition|)
block|{
continue|continue;
block|}
name|int
name|left
decl_stmt|;
if|if
condition|(
name|bit
operator|==
literal|7
condition|)
block|{
comment|// use bit #0 from previous byte
name|left
operator|=
name|actline
index|[
name|p
operator|-
literal|1
index|]
operator|&
literal|1
expr_stmt|;
block|}
else|else
block|{
comment|// use "previous" bit
name|left
operator|=
operator|(
name|actline
index|[
name|p
index|]
operator|>>
operator|(
name|bit
operator|+
literal|1
operator|)
operator|)
operator|&
literal|1
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|sub
operator|+
name|left
operator|)
operator|&
literal|1
operator|)
operator|==
literal|0
condition|)
block|{
comment|// reset bit
name|actline
index|[
name|p
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|actline
index|[
name|p
index|]
operator|&
operator|~
operator|(
literal|1
operator|<<
name|bit
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// set bit
name|actline
index|[
name|p
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|actline
index|[
name|p
index|]
operator||
operator|(
literal|1
operator|<<
name|bit
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
block|}
comment|// everything else, i.e. bpc 2 and 4, but has been tested for bpc 1 and 8 too
name|int
name|elements
init|=
name|columns
operator|*
name|colors
decl_stmt|;
for|for
control|(
name|int
name|p
init|=
name|colors
init|;
name|p
operator|<
name|elements
condition|;
operator|++
name|p
control|)
block|{
name|int
name|bytePosSub
init|=
name|p
operator|*
name|bitsPerComponent
operator|/
literal|8
decl_stmt|;
name|int
name|bitPosSub
init|=
literal|8
operator|-
name|p
operator|*
name|bitsPerComponent
operator|%
literal|8
operator|-
name|bitsPerComponent
decl_stmt|;
name|int
name|bytePosLeft
init|=
operator|(
name|p
operator|-
name|colors
operator|)
operator|*
name|bitsPerComponent
operator|/
literal|8
decl_stmt|;
name|int
name|bitPosLeft
init|=
literal|8
operator|-
operator|(
name|p
operator|-
name|colors
operator|)
operator|*
name|bitsPerComponent
operator|%
literal|8
operator|-
name|bitsPerComponent
decl_stmt|;
name|int
name|sub
init|=
name|getBitSeq
argument_list|(
name|actline
index|[
name|bytePosSub
index|]
argument_list|,
name|bitPosSub
argument_list|,
name|bitsPerComponent
argument_list|)
decl_stmt|;
name|int
name|left
init|=
name|getBitSeq
argument_list|(
name|actline
index|[
name|bytePosLeft
index|]
argument_list|,
name|bitPosLeft
argument_list|,
name|bitsPerComponent
argument_list|)
decl_stmt|;
name|actline
index|[
name|bytePosSub
index|]
operator|=
operator|(
name|byte
operator|)
name|calcSetBitSeq
argument_list|(
name|actline
index|[
name|bytePosSub
index|]
argument_list|,
name|bitPosSub
argument_list|,
name|bitsPerComponent
argument_list|,
name|sub
operator|+
name|left
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|10
case|:
comment|// PRED NONE
comment|// do nothing
break|break;
case|case
literal|11
case|:
comment|// PRED SUB
for|for
control|(
name|int
name|p
init|=
name|bytesPerPixel
init|;
name|p
operator|<
name|rowlength
condition|;
name|p
operator|++
control|)
block|{
name|int
name|sub
init|=
name|actline
index|[
name|p
index|]
decl_stmt|;
name|int
name|left
init|=
name|actline
index|[
name|p
operator|-
name|bytesPerPixel
index|]
decl_stmt|;
name|actline
index|[
name|p
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|sub
operator|+
name|left
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|12
case|:
comment|// PRED UP
for|for
control|(
name|int
name|p
init|=
literal|0
init|;
name|p
operator|<
name|rowlength
condition|;
name|p
operator|++
control|)
block|{
name|int
name|up
init|=
name|actline
index|[
name|p
index|]
operator|&
literal|0xff
decl_stmt|;
name|int
name|prior
init|=
name|lastline
index|[
name|p
index|]
operator|&
literal|0xff
decl_stmt|;
name|actline
index|[
name|p
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|up
operator|+
name|prior
operator|)
operator|&
literal|0xff
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|13
case|:
comment|// PRED AVG
for|for
control|(
name|int
name|p
init|=
literal|0
init|;
name|p
operator|<
name|rowlength
condition|;
name|p
operator|++
control|)
block|{
name|int
name|avg
init|=
name|actline
index|[
name|p
index|]
operator|&
literal|0xff
decl_stmt|;
name|int
name|left
init|=
name|p
operator|-
name|bytesPerPixel
operator|>=
literal|0
condition|?
name|actline
index|[
name|p
operator|-
name|bytesPerPixel
index|]
operator|&
literal|0xff
else|:
literal|0
decl_stmt|;
name|int
name|up
init|=
name|lastline
index|[
name|p
index|]
operator|&
literal|0xff
decl_stmt|;
name|actline
index|[
name|p
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|avg
operator|+
operator|(
name|left
operator|+
name|up
operator|)
operator|/
literal|2
operator|)
operator|&
literal|0xff
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|14
case|:
comment|// PRED PAETH
for|for
control|(
name|int
name|p
init|=
literal|0
init|;
name|p
operator|<
name|rowlength
condition|;
name|p
operator|++
control|)
block|{
name|int
name|paeth
init|=
name|actline
index|[
name|p
index|]
operator|&
literal|0xff
decl_stmt|;
name|int
name|a
init|=
name|p
operator|-
name|bytesPerPixel
operator|>=
literal|0
condition|?
name|actline
index|[
name|p
operator|-
name|bytesPerPixel
index|]
operator|&
literal|0xff
else|:
literal|0
decl_stmt|;
comment|// left
name|int
name|b
init|=
name|lastline
index|[
name|p
index|]
operator|&
literal|0xff
decl_stmt|;
comment|// upper
name|int
name|c
init|=
name|p
operator|-
name|bytesPerPixel
operator|>=
literal|0
condition|?
name|lastline
index|[
name|p
operator|-
name|bytesPerPixel
index|]
operator|&
literal|0xff
else|:
literal|0
decl_stmt|;
comment|// upperleft
name|int
name|value
init|=
name|a
operator|+
name|b
operator|-
name|c
decl_stmt|;
name|int
name|absa
init|=
name|Math
operator|.
name|abs
argument_list|(
name|value
operator|-
name|a
argument_list|)
decl_stmt|;
name|int
name|absb
init|=
name|Math
operator|.
name|abs
argument_list|(
name|value
operator|-
name|b
argument_list|)
decl_stmt|;
name|int
name|absc
init|=
name|Math
operator|.
name|abs
argument_list|(
name|value
operator|-
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|absa
operator|<=
name|absb
operator|&&
name|absa
operator|<=
name|absc
condition|)
block|{
name|actline
index|[
name|p
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|paeth
operator|+
name|a
operator|)
operator|&
literal|0xff
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|absb
operator|<=
name|absc
condition|)
block|{
name|actline
index|[
name|p
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|paeth
operator|+
name|b
operator|)
operator|&
literal|0xff
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|actline
index|[
name|p
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|paeth
operator|+
name|c
operator|)
operator|&
literal|0xff
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
default|default:
break|break;
block|}
block|}
specifier|static
name|void
name|decodePredictor
parameter_list|(
name|int
name|predictor
parameter_list|,
name|int
name|colors
parameter_list|,
name|int
name|bitsPerComponent
parameter_list|,
name|int
name|columns
parameter_list|,
name|InputStream
name|in
parameter_list|,
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|predictor
operator|==
literal|1
condition|)
block|{
comment|// no prediction
name|IOUtils
operator|.
name|copy
argument_list|(
name|in
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// calculate sizes
specifier|final
name|int
name|rowlength
init|=
name|calculateRowLength
argument_list|(
name|colors
argument_list|,
name|bitsPerComponent
argument_list|,
name|columns
argument_list|)
decl_stmt|;
name|byte
index|[]
name|actline
init|=
operator|new
name|byte
index|[
name|rowlength
index|]
decl_stmt|;
name|byte
index|[]
name|lastline
init|=
operator|new
name|byte
index|[
name|rowlength
index|]
decl_stmt|;
name|int
name|linepredictor
init|=
name|predictor
decl_stmt|;
while|while
condition|(
name|in
operator|.
name|available
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// test for PNG predictor; each value>= 10 (not only 15) indicates usage of PNG predictor
if|if
condition|(
name|predictor
operator|>=
literal|10
condition|)
block|{
comment|// PNG predictor; each row starts with predictor type (0, 1, 2, 3, 4)
comment|// read per line predictor
name|linepredictor
operator|=
name|in
operator|.
name|read
argument_list|()
expr_stmt|;
if|if
condition|(
name|linepredictor
operator|==
operator|-
literal|1
condition|)
block|{
return|return;
block|}
comment|// add 10 to tread value 0 as 10, 1 as 11, ...
name|linepredictor
operator|+=
literal|10
expr_stmt|;
block|}
comment|// read line
name|int
name|i
decl_stmt|,
name|offset
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|offset
operator|<
name|rowlength
operator|&&
operator|(
operator|(
name|i
operator|=
name|in
operator|.
name|read
argument_list|(
name|actline
argument_list|,
name|offset
argument_list|,
name|rowlength
operator|-
name|offset
argument_list|)
operator|)
operator|!=
operator|-
literal|1
operator|)
condition|)
block|{
name|offset
operator|+=
name|i
expr_stmt|;
block|}
name|decodePredictorRow
argument_list|(
name|linepredictor
argument_list|,
name|colors
argument_list|,
name|bitsPerComponent
argument_list|,
name|columns
argument_list|,
name|actline
argument_list|,
name|lastline
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|actline
argument_list|,
literal|0
argument_list|,
name|lastline
argument_list|,
literal|0
argument_list|,
name|rowlength
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|actline
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|static
name|int
name|calculateRowLength
parameter_list|(
name|int
name|colors
parameter_list|,
name|int
name|bitsPerComponent
parameter_list|,
name|int
name|columns
parameter_list|)
block|{
specifier|final
name|int
name|bitsPerPixel
init|=
name|colors
operator|*
name|bitsPerComponent
decl_stmt|;
return|return
operator|(
name|columns
operator|*
name|bitsPerPixel
operator|+
literal|7
operator|)
operator|/
literal|8
return|;
block|}
comment|// get value from bit interval from a byte
specifier|static
name|int
name|getBitSeq
parameter_list|(
name|int
name|by
parameter_list|,
name|int
name|startBit
parameter_list|,
name|int
name|bitSize
parameter_list|)
block|{
name|int
name|mask
init|=
operator|(
operator|(
literal|1
operator|<<
name|bitSize
operator|)
operator|-
literal|1
operator|)
decl_stmt|;
return|return
operator|(
name|by
operator|>>>
name|startBit
operator|)
operator|&
name|mask
return|;
block|}
comment|// set value in a bit interval and return that value
specifier|static
name|int
name|calcSetBitSeq
parameter_list|(
name|int
name|by
parameter_list|,
name|int
name|startBit
parameter_list|,
name|int
name|bitSize
parameter_list|,
name|int
name|val
parameter_list|)
block|{
name|int
name|mask
init|=
operator|(
operator|(
literal|1
operator|<<
name|bitSize
operator|)
operator|-
literal|1
operator|)
decl_stmt|;
name|int
name|truncatedVal
init|=
name|val
operator|&
name|mask
decl_stmt|;
name|mask
operator|=
operator|~
operator|(
name|mask
operator|<<
name|startBit
operator|)
expr_stmt|;
return|return
operator|(
name|by
operator|&
name|mask
operator|)
operator||
operator|(
name|truncatedVal
operator|<<
name|startBit
operator|)
return|;
block|}
comment|/**      * Wraps and<code>OutputStream</code> in a predictor decoding stream as necessary.      * If no predictor is specified by the parameters, the original stream is returned as is.      *      * @param out The stream to which decoded data should be written      * @param decodeParams Decode parameters for the stream      * @return An<code>OutputStream</code> is returned, which will write decoded data      * into the given stream. If no predictor is specified, the original stream is returned.      */
specifier|static
name|OutputStream
name|wrapPredictor
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|COSDictionary
name|decodeParams
parameter_list|)
block|{
name|int
name|predictor
init|=
name|decodeParams
operator|.
name|getInt
argument_list|(
name|COSName
operator|.
name|PREDICTOR
argument_list|)
decl_stmt|;
if|if
condition|(
name|predictor
operator|>
literal|1
condition|)
block|{
name|int
name|colors
init|=
name|Math
operator|.
name|min
argument_list|(
name|decodeParams
operator|.
name|getInt
argument_list|(
name|COSName
operator|.
name|COLORS
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|32
argument_list|)
decl_stmt|;
name|int
name|bitsPerPixel
init|=
name|decodeParams
operator|.
name|getInt
argument_list|(
name|COSName
operator|.
name|BITS_PER_COMPONENT
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|int
name|columns
init|=
name|decodeParams
operator|.
name|getInt
argument_list|(
name|COSName
operator|.
name|COLUMNS
argument_list|,
literal|1
argument_list|)
decl_stmt|;
return|return
operator|new
name|PredictorOutputStream
argument_list|(
name|out
argument_list|,
name|predictor
argument_list|,
name|colors
argument_list|,
name|bitsPerPixel
argument_list|,
name|columns
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|out
return|;
block|}
block|}
comment|/**      * Output stream that implements predictor decoding. Data is buffered until a complete      * row is available, which is then decoded and written to the underlying stream.      * The previous row is retained for decoding the next row.      */
specifier|private
specifier|static
specifier|final
class|class
name|PredictorOutputStream
extends|extends
name|FilterOutputStream
block|{
comment|// current predictor type
specifier|private
name|int
name|predictor
decl_stmt|;
comment|// image decode parameters
specifier|private
specifier|final
name|int
name|colors
decl_stmt|;
specifier|private
specifier|final
name|int
name|bitsPerComponent
decl_stmt|;
specifier|private
specifier|final
name|int
name|columns
decl_stmt|;
specifier|private
specifier|final
name|int
name|rowLength
decl_stmt|;
comment|// PNG predictor (predictor>=10) means every row has a (potentially different)
comment|// predictor value
specifier|private
specifier|final
name|boolean
name|predictorPerRow
decl_stmt|;
comment|// data buffers
specifier|private
name|byte
index|[]
name|currentRow
decl_stmt|,
name|lastRow
decl_stmt|;
comment|// amount of data in the current row
specifier|private
name|int
name|currentRowData
init|=
literal|0
decl_stmt|;
comment|// was the per-row predictor value read for the current row being processed
specifier|private
name|boolean
name|predictorRead
init|=
literal|false
decl_stmt|;
name|PredictorOutputStream
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|int
name|predictor
parameter_list|,
name|int
name|colors
parameter_list|,
name|int
name|bitsPerComponent
parameter_list|,
name|int
name|columns
parameter_list|)
block|{
name|super
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|this
operator|.
name|predictor
operator|=
name|predictor
expr_stmt|;
name|this
operator|.
name|colors
operator|=
name|colors
expr_stmt|;
name|this
operator|.
name|bitsPerComponent
operator|=
name|bitsPerComponent
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
name|this
operator|.
name|rowLength
operator|=
name|calculateRowLength
argument_list|(
name|colors
argument_list|,
name|bitsPerComponent
argument_list|,
name|columns
argument_list|)
expr_stmt|;
name|this
operator|.
name|predictorPerRow
operator|=
name|predictor
operator|>=
literal|10
expr_stmt|;
name|currentRow
operator|=
operator|new
name|byte
index|[
name|rowLength
index|]
expr_stmt|;
name|lastRow
operator|=
operator|new
name|byte
index|[
name|rowLength
index|]
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
name|write
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|currentOffset
init|=
name|off
decl_stmt|;
name|int
name|maxOffset
init|=
name|currentOffset
operator|+
name|len
decl_stmt|;
while|while
condition|(
name|currentOffset
operator|<
name|maxOffset
condition|)
block|{
if|if
condition|(
name|predictorPerRow
operator|&&
name|currentRowData
operator|==
literal|0
operator|&&
operator|!
name|predictorRead
condition|)
block|{
comment|// PNG predictor; each row starts with predictor type (0, 1, 2, 3, 4)
comment|// read per line predictor, add 10 to tread value 0 as 10, 1 as 11, ...
name|predictor
operator|=
name|bytes
index|[
name|currentOffset
index|]
operator|+
literal|10
expr_stmt|;
name|currentOffset
operator|++
expr_stmt|;
name|predictorRead
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|int
name|toRead
init|=
name|Math
operator|.
name|min
argument_list|(
name|rowLength
operator|-
name|currentRowData
argument_list|,
name|maxOffset
operator|-
name|currentOffset
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|bytes
argument_list|,
name|currentOffset
argument_list|,
name|currentRow
argument_list|,
name|currentRowData
argument_list|,
name|toRead
argument_list|)
expr_stmt|;
name|currentRowData
operator|+=
name|toRead
expr_stmt|;
name|currentOffset
operator|+=
name|toRead
expr_stmt|;
comment|// current row is filled, decode it, write it to underlying stream,
comment|// and reset the state.
if|if
condition|(
name|currentRowData
operator|==
name|currentRow
operator|.
name|length
condition|)
block|{
name|decodeAndWriteRow
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|decodeAndWriteRow
parameter_list|()
throws|throws
name|IOException
block|{
name|decodePredictorRow
argument_list|(
name|predictor
argument_list|,
name|colors
argument_list|,
name|bitsPerComponent
argument_list|,
name|columns
argument_list|,
name|currentRow
argument_list|,
name|lastRow
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|currentRow
argument_list|)
expr_stmt|;
name|flipRows
argument_list|()
expr_stmt|;
block|}
comment|/**          * Flips the row buffers (to avoid copying), and resets the current-row index          * and predictorRead flag          */
specifier|private
name|void
name|flipRows
parameter_list|()
block|{
name|byte
index|[]
name|temp
init|=
name|lastRow
decl_stmt|;
name|lastRow
operator|=
name|currentRow
expr_stmt|;
name|currentRow
operator|=
name|temp
expr_stmt|;
name|currentRowData
operator|=
literal|0
expr_stmt|;
name|predictorRead
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
comment|// The last row is allowed to be incomplete, and should be completed with zeros.
if|if
condition|(
name|currentRowData
operator|>
literal|0
condition|)
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|currentRow
argument_list|,
name|currentRowData
argument_list|,
name|rowLength
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
name|decodeAndWriteRow
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

