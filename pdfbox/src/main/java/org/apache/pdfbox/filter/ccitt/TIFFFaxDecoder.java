begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/* $Id$ */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|filter
operator|.
name|ccitt
package|;
end_package

begin_comment
comment|/**  * CCITT Fax decoder  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|TIFFFaxDecoder
block|{
specifier|private
name|int
name|bitPointer
decl_stmt|,
name|bytePointer
decl_stmt|;
specifier|private
name|byte
index|[]
name|data
decl_stmt|;
specifier|private
name|int
name|w
decl_stmt|,
name|h
decl_stmt|;
specifier|private
name|int
name|fillOrder
decl_stmt|;
comment|// Data structures needed to store changing elements for the previous
comment|// and the current scanline
specifier|private
name|int
name|changingElemSize
init|=
literal|0
decl_stmt|;
specifier|private
name|int
index|[]
name|prevChangingElems
decl_stmt|;
specifier|private
name|int
index|[]
name|currChangingElems
decl_stmt|;
comment|// Element at which to start search in getNextChangingElement
specifier|private
name|int
name|lastChangingElement
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|compression
init|=
literal|2
decl_stmt|;
comment|// Variables set by T4Options
specifier|private
name|int
name|uncompressedMode
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|fillBits
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|oneD
decl_stmt|;
specifier|static
name|int
index|[]
name|table1
init|=
block|{
literal|0x00
block|,
comment|// 0 bits are left in first byte - SHOULD NOT HAPPEN
literal|0x01
block|,
comment|// 1 bits are left in first byte
literal|0x03
block|,
comment|// 2 bits are left in first byte
literal|0x07
block|,
comment|// 3 bits are left in first byte
literal|0x0f
block|,
comment|// 4 bits are left in first byte
literal|0x1f
block|,
comment|// 5 bits are left in first byte
literal|0x3f
block|,
comment|// 6 bits are left in first byte
literal|0x7f
block|,
comment|// 7 bits are left in first byte
literal|0xff
comment|// 8 bits are left in first byte
block|}
decl_stmt|;
specifier|static
name|int
index|[]
name|table2
init|=
block|{
literal|0x00
block|,
comment|// 0
literal|0x80
block|,
comment|// 1
literal|0xc0
block|,
comment|// 2
literal|0xe0
block|,
comment|// 3
literal|0xf0
block|,
comment|// 4
literal|0xf8
block|,
comment|// 5
literal|0xfc
block|,
comment|// 6
literal|0xfe
block|,
comment|// 7
literal|0xff
comment|// 8
block|}
decl_stmt|;
comment|// Table to be used when fillOrder = 2, for flipping bytes.
specifier|static
name|byte
index|[]
name|flipTable
init|=
block|{
literal|0
block|,
operator|-
literal|128
block|,
literal|64
block|,
operator|-
literal|64
block|,
literal|32
block|,
operator|-
literal|96
block|,
literal|96
block|,
operator|-
literal|32
block|,
literal|16
block|,
operator|-
literal|112
block|,
literal|80
block|,
operator|-
literal|48
block|,
literal|48
block|,
operator|-
literal|80
block|,
literal|112
block|,
operator|-
literal|16
block|,
literal|8
block|,
operator|-
literal|120
block|,
literal|72
block|,
operator|-
literal|56
block|,
literal|40
block|,
operator|-
literal|88
block|,
literal|104
block|,
operator|-
literal|24
block|,
literal|24
block|,
operator|-
literal|104
block|,
literal|88
block|,
operator|-
literal|40
block|,
literal|56
block|,
operator|-
literal|72
block|,
literal|120
block|,
operator|-
literal|8
block|,
literal|4
block|,
operator|-
literal|124
block|,
literal|68
block|,
operator|-
literal|60
block|,
literal|36
block|,
operator|-
literal|92
block|,
literal|100
block|,
operator|-
literal|28
block|,
literal|20
block|,
operator|-
literal|108
block|,
literal|84
block|,
operator|-
literal|44
block|,
literal|52
block|,
operator|-
literal|76
block|,
literal|116
block|,
operator|-
literal|12
block|,
literal|12
block|,
operator|-
literal|116
block|,
literal|76
block|,
operator|-
literal|52
block|,
literal|44
block|,
operator|-
literal|84
block|,
literal|108
block|,
operator|-
literal|20
block|,
literal|28
block|,
operator|-
literal|100
block|,
literal|92
block|,
operator|-
literal|36
block|,
literal|60
block|,
operator|-
literal|68
block|,
literal|124
block|,
operator|-
literal|4
block|,
literal|2
block|,
operator|-
literal|126
block|,
literal|66
block|,
operator|-
literal|62
block|,
literal|34
block|,
operator|-
literal|94
block|,
literal|98
block|,
operator|-
literal|30
block|,
literal|18
block|,
operator|-
literal|110
block|,
literal|82
block|,
operator|-
literal|46
block|,
literal|50
block|,
operator|-
literal|78
block|,
literal|114
block|,
operator|-
literal|14
block|,
literal|10
block|,
operator|-
literal|118
block|,
literal|74
block|,
operator|-
literal|54
block|,
literal|42
block|,
operator|-
literal|86
block|,
literal|106
block|,
operator|-
literal|22
block|,
literal|26
block|,
operator|-
literal|102
block|,
literal|90
block|,
operator|-
literal|38
block|,
literal|58
block|,
operator|-
literal|70
block|,
literal|122
block|,
operator|-
literal|6
block|,
literal|6
block|,
operator|-
literal|122
block|,
literal|70
block|,
operator|-
literal|58
block|,
literal|38
block|,
operator|-
literal|90
block|,
literal|102
block|,
operator|-
literal|26
block|,
literal|22
block|,
operator|-
literal|106
block|,
literal|86
block|,
operator|-
literal|42
block|,
literal|54
block|,
operator|-
literal|74
block|,
literal|118
block|,
operator|-
literal|10
block|,
literal|14
block|,
operator|-
literal|114
block|,
literal|78
block|,
operator|-
literal|50
block|,
literal|46
block|,
operator|-
literal|82
block|,
literal|110
block|,
operator|-
literal|18
block|,
literal|30
block|,
operator|-
literal|98
block|,
literal|94
block|,
operator|-
literal|34
block|,
literal|62
block|,
operator|-
literal|66
block|,
literal|126
block|,
operator|-
literal|2
block|,
literal|1
block|,
operator|-
literal|127
block|,
literal|65
block|,
operator|-
literal|63
block|,
literal|33
block|,
operator|-
literal|95
block|,
literal|97
block|,
operator|-
literal|31
block|,
literal|17
block|,
operator|-
literal|111
block|,
literal|81
block|,
operator|-
literal|47
block|,
literal|49
block|,
operator|-
literal|79
block|,
literal|113
block|,
operator|-
literal|15
block|,
literal|9
block|,
operator|-
literal|119
block|,
literal|73
block|,
operator|-
literal|55
block|,
literal|41
block|,
operator|-
literal|87
block|,
literal|105
block|,
operator|-
literal|23
block|,
literal|25
block|,
operator|-
literal|103
block|,
literal|89
block|,
operator|-
literal|39
block|,
literal|57
block|,
operator|-
literal|71
block|,
literal|121
block|,
operator|-
literal|7
block|,
literal|5
block|,
operator|-
literal|123
block|,
literal|69
block|,
operator|-
literal|59
block|,
literal|37
block|,
operator|-
literal|91
block|,
literal|101
block|,
operator|-
literal|27
block|,
literal|21
block|,
operator|-
literal|107
block|,
literal|85
block|,
operator|-
literal|43
block|,
literal|53
block|,
operator|-
literal|75
block|,
literal|117
block|,
operator|-
literal|11
block|,
literal|13
block|,
operator|-
literal|115
block|,
literal|77
block|,
operator|-
literal|51
block|,
literal|45
block|,
operator|-
literal|83
block|,
literal|109
block|,
operator|-
literal|19
block|,
literal|29
block|,
operator|-
literal|99
block|,
literal|93
block|,
operator|-
literal|35
block|,
literal|61
block|,
operator|-
literal|67
block|,
literal|125
block|,
operator|-
literal|3
block|,
literal|3
block|,
operator|-
literal|125
block|,
literal|67
block|,
operator|-
literal|61
block|,
literal|35
block|,
operator|-
literal|93
block|,
literal|99
block|,
operator|-
literal|29
block|,
literal|19
block|,
operator|-
literal|109
block|,
literal|83
block|,
operator|-
literal|45
block|,
literal|51
block|,
operator|-
literal|77
block|,
literal|115
block|,
operator|-
literal|13
block|,
literal|11
block|,
operator|-
literal|117
block|,
literal|75
block|,
operator|-
literal|53
block|,
literal|43
block|,
operator|-
literal|85
block|,
literal|107
block|,
operator|-
literal|21
block|,
literal|27
block|,
operator|-
literal|101
block|,
literal|91
block|,
operator|-
literal|37
block|,
literal|59
block|,
operator|-
literal|69
block|,
literal|123
block|,
operator|-
literal|5
block|,
literal|7
block|,
operator|-
literal|121
block|,
literal|71
block|,
operator|-
literal|57
block|,
literal|39
block|,
operator|-
literal|89
block|,
literal|103
block|,
operator|-
literal|25
block|,
literal|23
block|,
operator|-
literal|105
block|,
literal|87
block|,
operator|-
literal|41
block|,
literal|55
block|,
operator|-
literal|73
block|,
literal|119
block|,
operator|-
literal|9
block|,
literal|15
block|,
operator|-
literal|113
block|,
literal|79
block|,
operator|-
literal|49
block|,
literal|47
block|,
operator|-
literal|81
block|,
literal|111
block|,
operator|-
literal|17
block|,
literal|31
block|,
operator|-
literal|97
block|,
literal|95
block|,
operator|-
literal|33
block|,
literal|63
block|,
operator|-
literal|65
block|,
literal|127
block|,
operator|-
literal|1
block|,     }
decl_stmt|;
comment|// The main 10 bit white runs lookup table
specifier|static
name|short
index|[]
name|white
init|=
block|{
comment|// 0 - 7
literal|6430
block|,
literal|6400
block|,
literal|6400
block|,
literal|6400
block|,
literal|3225
block|,
literal|3225
block|,
literal|3225
block|,
literal|3225
block|,
comment|// 8 - 15
literal|944
block|,
literal|944
block|,
literal|944
block|,
literal|944
block|,
literal|976
block|,
literal|976
block|,
literal|976
block|,
literal|976
block|,
comment|// 16 - 23
literal|1456
block|,
literal|1456
block|,
literal|1456
block|,
literal|1456
block|,
literal|1488
block|,
literal|1488
block|,
literal|1488
block|,
literal|1488
block|,
comment|// 24 - 31
literal|718
block|,
literal|718
block|,
literal|718
block|,
literal|718
block|,
literal|718
block|,
literal|718
block|,
literal|718
block|,
literal|718
block|,
comment|// 32 - 39
literal|750
block|,
literal|750
block|,
literal|750
block|,
literal|750
block|,
literal|750
block|,
literal|750
block|,
literal|750
block|,
literal|750
block|,
comment|// 40 - 47
literal|1520
block|,
literal|1520
block|,
literal|1520
block|,
literal|1520
block|,
literal|1552
block|,
literal|1552
block|,
literal|1552
block|,
literal|1552
block|,
comment|// 48 - 55
literal|428
block|,
literal|428
block|,
literal|428
block|,
literal|428
block|,
literal|428
block|,
literal|428
block|,
literal|428
block|,
literal|428
block|,
comment|// 56 - 63
literal|428
block|,
literal|428
block|,
literal|428
block|,
literal|428
block|,
literal|428
block|,
literal|428
block|,
literal|428
block|,
literal|428
block|,
comment|// 64 - 71
literal|654
block|,
literal|654
block|,
literal|654
block|,
literal|654
block|,
literal|654
block|,
literal|654
block|,
literal|654
block|,
literal|654
block|,
comment|// 72 - 79
literal|1072
block|,
literal|1072
block|,
literal|1072
block|,
literal|1072
block|,
literal|1104
block|,
literal|1104
block|,
literal|1104
block|,
literal|1104
block|,
comment|// 80 - 87
literal|1136
block|,
literal|1136
block|,
literal|1136
block|,
literal|1136
block|,
literal|1168
block|,
literal|1168
block|,
literal|1168
block|,
literal|1168
block|,
comment|// 88 - 95
literal|1200
block|,
literal|1200
block|,
literal|1200
block|,
literal|1200
block|,
literal|1232
block|,
literal|1232
block|,
literal|1232
block|,
literal|1232
block|,
comment|// 96 - 103
literal|622
block|,
literal|622
block|,
literal|622
block|,
literal|622
block|,
literal|622
block|,
literal|622
block|,
literal|622
block|,
literal|622
block|,
comment|// 104 - 111
literal|1008
block|,
literal|1008
block|,
literal|1008
block|,
literal|1008
block|,
literal|1040
block|,
literal|1040
block|,
literal|1040
block|,
literal|1040
block|,
comment|// 112 - 119
literal|44
block|,
literal|44
block|,
literal|44
block|,
literal|44
block|,
literal|44
block|,
literal|44
block|,
literal|44
block|,
literal|44
block|,
comment|// 120 - 127
literal|44
block|,
literal|44
block|,
literal|44
block|,
literal|44
block|,
literal|44
block|,
literal|44
block|,
literal|44
block|,
literal|44
block|,
comment|// 128 - 135
literal|396
block|,
literal|396
block|,
literal|396
block|,
literal|396
block|,
literal|396
block|,
literal|396
block|,
literal|396
block|,
literal|396
block|,
comment|// 136 - 143
literal|396
block|,
literal|396
block|,
literal|396
block|,
literal|396
block|,
literal|396
block|,
literal|396
block|,
literal|396
block|,
literal|396
block|,
comment|// 144 - 151
literal|1712
block|,
literal|1712
block|,
literal|1712
block|,
literal|1712
block|,
literal|1744
block|,
literal|1744
block|,
literal|1744
block|,
literal|1744
block|,
comment|// 152 - 159
literal|846
block|,
literal|846
block|,
literal|846
block|,
literal|846
block|,
literal|846
block|,
literal|846
block|,
literal|846
block|,
literal|846
block|,
comment|// 160 - 167
literal|1264
block|,
literal|1264
block|,
literal|1264
block|,
literal|1264
block|,
literal|1296
block|,
literal|1296
block|,
literal|1296
block|,
literal|1296
block|,
comment|// 168 - 175
literal|1328
block|,
literal|1328
block|,
literal|1328
block|,
literal|1328
block|,
literal|1360
block|,
literal|1360
block|,
literal|1360
block|,
literal|1360
block|,
comment|// 176 - 183
literal|1392
block|,
literal|1392
block|,
literal|1392
block|,
literal|1392
block|,
literal|1424
block|,
literal|1424
block|,
literal|1424
block|,
literal|1424
block|,
comment|// 184 - 191
literal|686
block|,
literal|686
block|,
literal|686
block|,
literal|686
block|,
literal|686
block|,
literal|686
block|,
literal|686
block|,
literal|686
block|,
comment|// 192 - 199
literal|910
block|,
literal|910
block|,
literal|910
block|,
literal|910
block|,
literal|910
block|,
literal|910
block|,
literal|910
block|,
literal|910
block|,
comment|// 200 - 207
literal|1968
block|,
literal|1968
block|,
literal|1968
block|,
literal|1968
block|,
literal|2000
block|,
literal|2000
block|,
literal|2000
block|,
literal|2000
block|,
comment|// 208 - 215
literal|2032
block|,
literal|2032
block|,
literal|2032
block|,
literal|2032
block|,
literal|16
block|,
literal|16
block|,
literal|16
block|,
literal|16
block|,
comment|// 216 - 223
literal|10257
block|,
literal|10257
block|,
literal|10257
block|,
literal|10257
block|,
literal|12305
block|,
literal|12305
block|,
literal|12305
block|,
literal|12305
block|,
comment|// 224 - 231
literal|330
block|,
literal|330
block|,
literal|330
block|,
literal|330
block|,
literal|330
block|,
literal|330
block|,
literal|330
block|,
literal|330
block|,
comment|// 232 - 239
literal|330
block|,
literal|330
block|,
literal|330
block|,
literal|330
block|,
literal|330
block|,
literal|330
block|,
literal|330
block|,
literal|330
block|,
comment|// 240 - 247
literal|330
block|,
literal|330
block|,
literal|330
block|,
literal|330
block|,
literal|330
block|,
literal|330
block|,
literal|330
block|,
literal|330
block|,
comment|// 248 - 255
literal|330
block|,
literal|330
block|,
literal|330
block|,
literal|330
block|,
literal|330
block|,
literal|330
block|,
literal|330
block|,
literal|330
block|,
comment|// 256 - 263
literal|362
block|,
literal|362
block|,
literal|362
block|,
literal|362
block|,
literal|362
block|,
literal|362
block|,
literal|362
block|,
literal|362
block|,
comment|// 264 - 271
literal|362
block|,
literal|362
block|,
literal|362
block|,
literal|362
block|,
literal|362
block|,
literal|362
block|,
literal|362
block|,
literal|362
block|,
comment|// 272 - 279
literal|362
block|,
literal|362
block|,
literal|362
block|,
literal|362
block|,
literal|362
block|,
literal|362
block|,
literal|362
block|,
literal|362
block|,
comment|// 280 - 287
literal|362
block|,
literal|362
block|,
literal|362
block|,
literal|362
block|,
literal|362
block|,
literal|362
block|,
literal|362
block|,
literal|362
block|,
comment|// 288 - 295
literal|878
block|,
literal|878
block|,
literal|878
block|,
literal|878
block|,
literal|878
block|,
literal|878
block|,
literal|878
block|,
literal|878
block|,
comment|// 296 - 303
literal|1904
block|,
literal|1904
block|,
literal|1904
block|,
literal|1904
block|,
literal|1936
block|,
literal|1936
block|,
literal|1936
block|,
literal|1936
block|,
comment|// 304 - 311
operator|-
literal|18413
block|,
operator|-
literal|18413
block|,
operator|-
literal|16365
block|,
operator|-
literal|16365
block|,
operator|-
literal|14317
block|,
operator|-
literal|14317
block|,
operator|-
literal|10221
block|,
operator|-
literal|10221
block|,
comment|// 312 - 319
literal|590
block|,
literal|590
block|,
literal|590
block|,
literal|590
block|,
literal|590
block|,
literal|590
block|,
literal|590
block|,
literal|590
block|,
comment|// 320 - 327
literal|782
block|,
literal|782
block|,
literal|782
block|,
literal|782
block|,
literal|782
block|,
literal|782
block|,
literal|782
block|,
literal|782
block|,
comment|// 328 - 335
literal|1584
block|,
literal|1584
block|,
literal|1584
block|,
literal|1584
block|,
literal|1616
block|,
literal|1616
block|,
literal|1616
block|,
literal|1616
block|,
comment|// 336 - 343
literal|1648
block|,
literal|1648
block|,
literal|1648
block|,
literal|1648
block|,
literal|1680
block|,
literal|1680
block|,
literal|1680
block|,
literal|1680
block|,
comment|// 344 - 351
literal|814
block|,
literal|814
block|,
literal|814
block|,
literal|814
block|,
literal|814
block|,
literal|814
block|,
literal|814
block|,
literal|814
block|,
comment|// 352 - 359
literal|1776
block|,
literal|1776
block|,
literal|1776
block|,
literal|1776
block|,
literal|1808
block|,
literal|1808
block|,
literal|1808
block|,
literal|1808
block|,
comment|// 360 - 367
literal|1840
block|,
literal|1840
block|,
literal|1840
block|,
literal|1840
block|,
literal|1872
block|,
literal|1872
block|,
literal|1872
block|,
literal|1872
block|,
comment|// 368 - 375
literal|6157
block|,
literal|6157
block|,
literal|6157
block|,
literal|6157
block|,
literal|6157
block|,
literal|6157
block|,
literal|6157
block|,
literal|6157
block|,
comment|// 376 - 383
literal|6157
block|,
literal|6157
block|,
literal|6157
block|,
literal|6157
block|,
literal|6157
block|,
literal|6157
block|,
literal|6157
block|,
literal|6157
block|,
comment|// 384 - 391
operator|-
literal|12275
block|,
operator|-
literal|12275
block|,
operator|-
literal|12275
block|,
operator|-
literal|12275
block|,
operator|-
literal|12275
block|,
operator|-
literal|12275
block|,
operator|-
literal|12275
block|,
operator|-
literal|12275
block|,
comment|// 392 - 399
operator|-
literal|12275
block|,
operator|-
literal|12275
block|,
operator|-
literal|12275
block|,
operator|-
literal|12275
block|,
operator|-
literal|12275
block|,
operator|-
literal|12275
block|,
operator|-
literal|12275
block|,
operator|-
literal|12275
block|,
comment|// 400 - 407
literal|14353
block|,
literal|14353
block|,
literal|14353
block|,
literal|14353
block|,
literal|16401
block|,
literal|16401
block|,
literal|16401
block|,
literal|16401
block|,
comment|// 408 - 415
literal|22547
block|,
literal|22547
block|,
literal|24595
block|,
literal|24595
block|,
literal|20497
block|,
literal|20497
block|,
literal|20497
block|,
literal|20497
block|,
comment|// 416 - 423
literal|18449
block|,
literal|18449
block|,
literal|18449
block|,
literal|18449
block|,
literal|26643
block|,
literal|26643
block|,
literal|28691
block|,
literal|28691
block|,
comment|// 424 - 431
literal|30739
block|,
literal|30739
block|,
operator|-
literal|32749
block|,
operator|-
literal|32749
block|,
operator|-
literal|30701
block|,
operator|-
literal|30701
block|,
operator|-
literal|28653
block|,
operator|-
literal|28653
block|,
comment|// 432 - 439
operator|-
literal|26605
block|,
operator|-
literal|26605
block|,
operator|-
literal|24557
block|,
operator|-
literal|24557
block|,
operator|-
literal|22509
block|,
operator|-
literal|22509
block|,
operator|-
literal|20461
block|,
operator|-
literal|20461
block|,
comment|// 440 - 447
literal|8207
block|,
literal|8207
block|,
literal|8207
block|,
literal|8207
block|,
literal|8207
block|,
literal|8207
block|,
literal|8207
block|,
literal|8207
block|,
comment|// 448 - 455
literal|72
block|,
literal|72
block|,
literal|72
block|,
literal|72
block|,
literal|72
block|,
literal|72
block|,
literal|72
block|,
literal|72
block|,
comment|// 456 - 463
literal|72
block|,
literal|72
block|,
literal|72
block|,
literal|72
block|,
literal|72
block|,
literal|72
block|,
literal|72
block|,
literal|72
block|,
comment|// 464 - 471
literal|72
block|,
literal|72
block|,
literal|72
block|,
literal|72
block|,
literal|72
block|,
literal|72
block|,
literal|72
block|,
literal|72
block|,
comment|// 472 - 479
literal|72
block|,
literal|72
block|,
literal|72
block|,
literal|72
block|,
literal|72
block|,
literal|72
block|,
literal|72
block|,
literal|72
block|,
comment|// 480 - 487
literal|72
block|,
literal|72
block|,
literal|72
block|,
literal|72
block|,
literal|72
block|,
literal|72
block|,
literal|72
block|,
literal|72
block|,
comment|// 488 - 495
literal|72
block|,
literal|72
block|,
literal|72
block|,
literal|72
block|,
literal|72
block|,
literal|72
block|,
literal|72
block|,
literal|72
block|,
comment|// 496 - 503
literal|72
block|,
literal|72
block|,
literal|72
block|,
literal|72
block|,
literal|72
block|,
literal|72
block|,
literal|72
block|,
literal|72
block|,
comment|// 504 - 511
literal|72
block|,
literal|72
block|,
literal|72
block|,
literal|72
block|,
literal|72
block|,
literal|72
block|,
literal|72
block|,
literal|72
block|,
comment|// 512 - 519
literal|104
block|,
literal|104
block|,
literal|104
block|,
literal|104
block|,
literal|104
block|,
literal|104
block|,
literal|104
block|,
literal|104
block|,
comment|// 520 - 527
literal|104
block|,
literal|104
block|,
literal|104
block|,
literal|104
block|,
literal|104
block|,
literal|104
block|,
literal|104
block|,
literal|104
block|,
comment|// 528 - 535
literal|104
block|,
literal|104
block|,
literal|104
block|,
literal|104
block|,
literal|104
block|,
literal|104
block|,
literal|104
block|,
literal|104
block|,
comment|// 536 - 543
literal|104
block|,
literal|104
block|,
literal|104
block|,
literal|104
block|,
literal|104
block|,
literal|104
block|,
literal|104
block|,
literal|104
block|,
comment|// 544 - 551
literal|104
block|,
literal|104
block|,
literal|104
block|,
literal|104
block|,
literal|104
block|,
literal|104
block|,
literal|104
block|,
literal|104
block|,
comment|// 552 - 559
literal|104
block|,
literal|104
block|,
literal|104
block|,
literal|104
block|,
literal|104
block|,
literal|104
block|,
literal|104
block|,
literal|104
block|,
comment|// 560 - 567
literal|104
block|,
literal|104
block|,
literal|104
block|,
literal|104
block|,
literal|104
block|,
literal|104
block|,
literal|104
block|,
literal|104
block|,
comment|// 568 - 575
literal|104
block|,
literal|104
block|,
literal|104
block|,
literal|104
block|,
literal|104
block|,
literal|104
block|,
literal|104
block|,
literal|104
block|,
comment|// 576 - 583
literal|4107
block|,
literal|4107
block|,
literal|4107
block|,
literal|4107
block|,
literal|4107
block|,
literal|4107
block|,
literal|4107
block|,
literal|4107
block|,
comment|// 584 - 591
literal|4107
block|,
literal|4107
block|,
literal|4107
block|,
literal|4107
block|,
literal|4107
block|,
literal|4107
block|,
literal|4107
block|,
literal|4107
block|,
comment|// 592 - 599
literal|4107
block|,
literal|4107
block|,
literal|4107
block|,
literal|4107
block|,
literal|4107
block|,
literal|4107
block|,
literal|4107
block|,
literal|4107
block|,
comment|// 600 - 607
literal|4107
block|,
literal|4107
block|,
literal|4107
block|,
literal|4107
block|,
literal|4107
block|,
literal|4107
block|,
literal|4107
block|,
literal|4107
block|,
comment|// 608 - 615
literal|266
block|,
literal|266
block|,
literal|266
block|,
literal|266
block|,
literal|266
block|,
literal|266
block|,
literal|266
block|,
literal|266
block|,
comment|// 616 - 623
literal|266
block|,
literal|266
block|,
literal|266
block|,
literal|266
block|,
literal|266
block|,
literal|266
block|,
literal|266
block|,
literal|266
block|,
comment|// 624 - 631
literal|266
block|,
literal|266
block|,
literal|266
block|,
literal|266
block|,
literal|266
block|,
literal|266
block|,
literal|266
block|,
literal|266
block|,
comment|// 632 - 639
literal|266
block|,
literal|266
block|,
literal|266
block|,
literal|266
block|,
literal|266
block|,
literal|266
block|,
literal|266
block|,
literal|266
block|,
comment|// 640 - 647
literal|298
block|,
literal|298
block|,
literal|298
block|,
literal|298
block|,
literal|298
block|,
literal|298
block|,
literal|298
block|,
literal|298
block|,
comment|// 648 - 655
literal|298
block|,
literal|298
block|,
literal|298
block|,
literal|298
block|,
literal|298
block|,
literal|298
block|,
literal|298
block|,
literal|298
block|,
comment|// 656 - 663
literal|298
block|,
literal|298
block|,
literal|298
block|,
literal|298
block|,
literal|298
block|,
literal|298
block|,
literal|298
block|,
literal|298
block|,
comment|// 664 - 671
literal|298
block|,
literal|298
block|,
literal|298
block|,
literal|298
block|,
literal|298
block|,
literal|298
block|,
literal|298
block|,
literal|298
block|,
comment|// 672 - 679
literal|524
block|,
literal|524
block|,
literal|524
block|,
literal|524
block|,
literal|524
block|,
literal|524
block|,
literal|524
block|,
literal|524
block|,
comment|// 680 - 687
literal|524
block|,
literal|524
block|,
literal|524
block|,
literal|524
block|,
literal|524
block|,
literal|524
block|,
literal|524
block|,
literal|524
block|,
comment|// 688 - 695
literal|556
block|,
literal|556
block|,
literal|556
block|,
literal|556
block|,
literal|556
block|,
literal|556
block|,
literal|556
block|,
literal|556
block|,
comment|// 696 - 703
literal|556
block|,
literal|556
block|,
literal|556
block|,
literal|556
block|,
literal|556
block|,
literal|556
block|,
literal|556
block|,
literal|556
block|,
comment|// 704 - 711
literal|136
block|,
literal|136
block|,
literal|136
block|,
literal|136
block|,
literal|136
block|,
literal|136
block|,
literal|136
block|,
literal|136
block|,
comment|// 712 - 719
literal|136
block|,
literal|136
block|,
literal|136
block|,
literal|136
block|,
literal|136
block|,
literal|136
block|,
literal|136
block|,
literal|136
block|,
comment|// 720 - 727
literal|136
block|,
literal|136
block|,
literal|136
block|,
literal|136
block|,
literal|136
block|,
literal|136
block|,
literal|136
block|,
literal|136
block|,
comment|// 728 - 735
literal|136
block|,
literal|136
block|,
literal|136
block|,
literal|136
block|,
literal|136
block|,
literal|136
block|,
literal|136
block|,
literal|136
block|,
comment|// 736 - 743
literal|136
block|,
literal|136
block|,
literal|136
block|,
literal|136
block|,
literal|136
block|,
literal|136
block|,
literal|136
block|,
literal|136
block|,
comment|// 744 - 751
literal|136
block|,
literal|136
block|,
literal|136
block|,
literal|136
block|,
literal|136
block|,
literal|136
block|,
literal|136
block|,
literal|136
block|,
comment|// 752 - 759
literal|136
block|,
literal|136
block|,
literal|136
block|,
literal|136
block|,
literal|136
block|,
literal|136
block|,
literal|136
block|,
literal|136
block|,
comment|// 760 - 767
literal|136
block|,
literal|136
block|,
literal|136
block|,
literal|136
block|,
literal|136
block|,
literal|136
block|,
literal|136
block|,
literal|136
block|,
comment|// 768 - 775
literal|168
block|,
literal|168
block|,
literal|168
block|,
literal|168
block|,
literal|168
block|,
literal|168
block|,
literal|168
block|,
literal|168
block|,
comment|// 776 - 783
literal|168
block|,
literal|168
block|,
literal|168
block|,
literal|168
block|,
literal|168
block|,
literal|168
block|,
literal|168
block|,
literal|168
block|,
comment|// 784 - 791
literal|168
block|,
literal|168
block|,
literal|168
block|,
literal|168
block|,
literal|168
block|,
literal|168
block|,
literal|168
block|,
literal|168
block|,
comment|// 792 - 799
literal|168
block|,
literal|168
block|,
literal|168
block|,
literal|168
block|,
literal|168
block|,
literal|168
block|,
literal|168
block|,
literal|168
block|,
comment|// 800 - 807
literal|168
block|,
literal|168
block|,
literal|168
block|,
literal|168
block|,
literal|168
block|,
literal|168
block|,
literal|168
block|,
literal|168
block|,
comment|// 808 - 815
literal|168
block|,
literal|168
block|,
literal|168
block|,
literal|168
block|,
literal|168
block|,
literal|168
block|,
literal|168
block|,
literal|168
block|,
comment|// 816 - 823
literal|168
block|,
literal|168
block|,
literal|168
block|,
literal|168
block|,
literal|168
block|,
literal|168
block|,
literal|168
block|,
literal|168
block|,
comment|// 824 - 831
literal|168
block|,
literal|168
block|,
literal|168
block|,
literal|168
block|,
literal|168
block|,
literal|168
block|,
literal|168
block|,
literal|168
block|,
comment|// 832 - 839
literal|460
block|,
literal|460
block|,
literal|460
block|,
literal|460
block|,
literal|460
block|,
literal|460
block|,
literal|460
block|,
literal|460
block|,
comment|// 840 - 847
literal|460
block|,
literal|460
block|,
literal|460
block|,
literal|460
block|,
literal|460
block|,
literal|460
block|,
literal|460
block|,
literal|460
block|,
comment|// 848 - 855
literal|492
block|,
literal|492
block|,
literal|492
block|,
literal|492
block|,
literal|492
block|,
literal|492
block|,
literal|492
block|,
literal|492
block|,
comment|// 856 - 863
literal|492
block|,
literal|492
block|,
literal|492
block|,
literal|492
block|,
literal|492
block|,
literal|492
block|,
literal|492
block|,
literal|492
block|,
comment|// 864 - 871
literal|2059
block|,
literal|2059
block|,
literal|2059
block|,
literal|2059
block|,
literal|2059
block|,
literal|2059
block|,
literal|2059
block|,
literal|2059
block|,
comment|// 872 - 879
literal|2059
block|,
literal|2059
block|,
literal|2059
block|,
literal|2059
block|,
literal|2059
block|,
literal|2059
block|,
literal|2059
block|,
literal|2059
block|,
comment|// 880 - 887
literal|2059
block|,
literal|2059
block|,
literal|2059
block|,
literal|2059
block|,
literal|2059
block|,
literal|2059
block|,
literal|2059
block|,
literal|2059
block|,
comment|// 888 - 895
literal|2059
block|,
literal|2059
block|,
literal|2059
block|,
literal|2059
block|,
literal|2059
block|,
literal|2059
block|,
literal|2059
block|,
literal|2059
block|,
comment|// 896 - 903
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|200
block|,
comment|// 904 - 911
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|200
block|,
comment|// 912 - 919
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|200
block|,
comment|// 920 - 927
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|200
block|,
comment|// 928 - 935
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|200
block|,
comment|// 936 - 943
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|200
block|,
comment|// 944 - 951
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|200
block|,
comment|// 952 - 959
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|200
block|,
comment|// 960 - 967
literal|232
block|,
literal|232
block|,
literal|232
block|,
literal|232
block|,
literal|232
block|,
literal|232
block|,
literal|232
block|,
literal|232
block|,
comment|// 968 - 975
literal|232
block|,
literal|232
block|,
literal|232
block|,
literal|232
block|,
literal|232
block|,
literal|232
block|,
literal|232
block|,
literal|232
block|,
comment|// 976 - 983
literal|232
block|,
literal|232
block|,
literal|232
block|,
literal|232
block|,
literal|232
block|,
literal|232
block|,
literal|232
block|,
literal|232
block|,
comment|// 984 - 991
literal|232
block|,
literal|232
block|,
literal|232
block|,
literal|232
block|,
literal|232
block|,
literal|232
block|,
literal|232
block|,
literal|232
block|,
comment|// 992 - 999
literal|232
block|,
literal|232
block|,
literal|232
block|,
literal|232
block|,
literal|232
block|,
literal|232
block|,
literal|232
block|,
literal|232
block|,
comment|// 1000 - 1007
literal|232
block|,
literal|232
block|,
literal|232
block|,
literal|232
block|,
literal|232
block|,
literal|232
block|,
literal|232
block|,
literal|232
block|,
comment|// 1008 - 1015
literal|232
block|,
literal|232
block|,
literal|232
block|,
literal|232
block|,
literal|232
block|,
literal|232
block|,
literal|232
block|,
literal|232
block|,
comment|// 1016 - 1023
literal|232
block|,
literal|232
block|,
literal|232
block|,
literal|232
block|,
literal|232
block|,
literal|232
block|,
literal|232
block|,
literal|232
block|,     }
decl_stmt|;
comment|// Additional make up codes for both White and Black runs
specifier|static
name|short
index|[]
name|additionalMakeup
init|=
block|{
literal|28679
block|,
literal|28679
block|,
literal|31752
block|,
operator|(
name|short
operator|)
literal|32777
block|,
operator|(
name|short
operator|)
literal|33801
block|,
operator|(
name|short
operator|)
literal|34825
block|,
operator|(
name|short
operator|)
literal|35849
block|,
operator|(
name|short
operator|)
literal|36873
block|,
operator|(
name|short
operator|)
literal|29703
block|,
operator|(
name|short
operator|)
literal|29703
block|,
operator|(
name|short
operator|)
literal|30727
block|,
operator|(
name|short
operator|)
literal|30727
block|,
operator|(
name|short
operator|)
literal|37897
block|,
operator|(
name|short
operator|)
literal|38921
block|,
operator|(
name|short
operator|)
literal|39945
block|,
operator|(
name|short
operator|)
literal|40969
block|}
decl_stmt|;
comment|// Initial black run look up table, uses the first 4 bits of a code
specifier|static
name|short
index|[]
name|initBlack
init|=
block|{
comment|// 0 - 7
literal|3226
block|,
literal|6412
block|,
literal|200
block|,
literal|168
block|,
literal|38
block|,
literal|38
block|,
literal|134
block|,
literal|134
block|,
comment|// 8 - 15
literal|100
block|,
literal|100
block|,
literal|100
block|,
literal|100
block|,
literal|68
block|,
literal|68
block|,
literal|68
block|,
literal|68
block|}
decl_stmt|;
comment|//
specifier|static
name|short
index|[]
name|twoBitBlack
init|=
block|{
literal|292
block|,
literal|260
block|,
literal|226
block|,
literal|226
block|}
decl_stmt|;
comment|// 0 - 3
comment|// Main black run table, using the last 9 bits of possible 13 bit code
specifier|static
name|short
index|[]
name|black
init|=
block|{
comment|// 0 - 7
literal|62
block|,
literal|62
block|,
literal|30
block|,
literal|30
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
comment|// 8 - 15
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
comment|// 16 - 23
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
comment|// 24 - 31
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
comment|// 32 - 39
literal|3225
block|,
literal|3225
block|,
literal|3225
block|,
literal|3225
block|,
literal|3225
block|,
literal|3225
block|,
literal|3225
block|,
literal|3225
block|,
comment|// 40 - 47
literal|3225
block|,
literal|3225
block|,
literal|3225
block|,
literal|3225
block|,
literal|3225
block|,
literal|3225
block|,
literal|3225
block|,
literal|3225
block|,
comment|// 48 - 55
literal|3225
block|,
literal|3225
block|,
literal|3225
block|,
literal|3225
block|,
literal|3225
block|,
literal|3225
block|,
literal|3225
block|,
literal|3225
block|,
comment|// 56 - 63
literal|3225
block|,
literal|3225
block|,
literal|3225
block|,
literal|3225
block|,
literal|3225
block|,
literal|3225
block|,
literal|3225
block|,
literal|3225
block|,
comment|// 64 - 71
literal|588
block|,
literal|588
block|,
literal|588
block|,
literal|588
block|,
literal|588
block|,
literal|588
block|,
literal|588
block|,
literal|588
block|,
comment|// 72 - 79
literal|1680
block|,
literal|1680
block|,
literal|20499
block|,
literal|22547
block|,
literal|24595
block|,
literal|26643
block|,
literal|1776
block|,
literal|1776
block|,
comment|// 80 - 87
literal|1808
block|,
literal|1808
block|,
operator|-
literal|24557
block|,
operator|-
literal|22509
block|,
operator|-
literal|20461
block|,
operator|-
literal|18413
block|,
literal|1904
block|,
literal|1904
block|,
comment|// 88 - 95
literal|1936
block|,
literal|1936
block|,
operator|-
literal|16365
block|,
operator|-
literal|14317
block|,
literal|782
block|,
literal|782
block|,
literal|782
block|,
literal|782
block|,
comment|// 96 - 103
literal|814
block|,
literal|814
block|,
literal|814
block|,
literal|814
block|,
operator|-
literal|12269
block|,
operator|-
literal|10221
block|,
literal|10257
block|,
literal|10257
block|,
comment|// 104 - 111
literal|12305
block|,
literal|12305
block|,
literal|14353
block|,
literal|14353
block|,
literal|16403
block|,
literal|18451
block|,
literal|1712
block|,
literal|1712
block|,
comment|// 112 - 119
literal|1744
block|,
literal|1744
block|,
literal|28691
block|,
literal|30739
block|,
operator|-
literal|32749
block|,
operator|-
literal|30701
block|,
operator|-
literal|28653
block|,
operator|-
literal|26605
block|,
comment|// 120 - 127
literal|2061
block|,
literal|2061
block|,
literal|2061
block|,
literal|2061
block|,
literal|2061
block|,
literal|2061
block|,
literal|2061
block|,
literal|2061
block|,
comment|// 128 - 135
literal|424
block|,
literal|424
block|,
literal|424
block|,
literal|424
block|,
literal|424
block|,
literal|424
block|,
literal|424
block|,
literal|424
block|,
comment|// 136 - 143
literal|424
block|,
literal|424
block|,
literal|424
block|,
literal|424
block|,
literal|424
block|,
literal|424
block|,
literal|424
block|,
literal|424
block|,
comment|// 144 - 151
literal|424
block|,
literal|424
block|,
literal|424
block|,
literal|424
block|,
literal|424
block|,
literal|424
block|,
literal|424
block|,
literal|424
block|,
comment|// 152 - 159
literal|424
block|,
literal|424
block|,
literal|424
block|,
literal|424
block|,
literal|424
block|,
literal|424
block|,
literal|424
block|,
literal|424
block|,
comment|// 160 - 167
literal|750
block|,
literal|750
block|,
literal|750
block|,
literal|750
block|,
literal|1616
block|,
literal|1616
block|,
literal|1648
block|,
literal|1648
block|,
comment|// 168 - 175
literal|1424
block|,
literal|1424
block|,
literal|1456
block|,
literal|1456
block|,
literal|1488
block|,
literal|1488
block|,
literal|1520
block|,
literal|1520
block|,
comment|// 176 - 183
literal|1840
block|,
literal|1840
block|,
literal|1872
block|,
literal|1872
block|,
literal|1968
block|,
literal|1968
block|,
literal|8209
block|,
literal|8209
block|,
comment|// 184 - 191
literal|524
block|,
literal|524
block|,
literal|524
block|,
literal|524
block|,
literal|524
block|,
literal|524
block|,
literal|524
block|,
literal|524
block|,
comment|// 192 - 199
literal|556
block|,
literal|556
block|,
literal|556
block|,
literal|556
block|,
literal|556
block|,
literal|556
block|,
literal|556
block|,
literal|556
block|,
comment|// 200 - 207
literal|1552
block|,
literal|1552
block|,
literal|1584
block|,
literal|1584
block|,
literal|2000
block|,
literal|2000
block|,
literal|2032
block|,
literal|2032
block|,
comment|// 208 - 215
literal|976
block|,
literal|976
block|,
literal|1008
block|,
literal|1008
block|,
literal|1040
block|,
literal|1040
block|,
literal|1072
block|,
literal|1072
block|,
comment|// 216 - 223
literal|1296
block|,
literal|1296
block|,
literal|1328
block|,
literal|1328
block|,
literal|718
block|,
literal|718
block|,
literal|718
block|,
literal|718
block|,
comment|// 224 - 231
literal|456
block|,
literal|456
block|,
literal|456
block|,
literal|456
block|,
literal|456
block|,
literal|456
block|,
literal|456
block|,
literal|456
block|,
comment|// 232 - 239
literal|456
block|,
literal|456
block|,
literal|456
block|,
literal|456
block|,
literal|456
block|,
literal|456
block|,
literal|456
block|,
literal|456
block|,
comment|// 240 - 247
literal|456
block|,
literal|456
block|,
literal|456
block|,
literal|456
block|,
literal|456
block|,
literal|456
block|,
literal|456
block|,
literal|456
block|,
comment|// 248 - 255
literal|456
block|,
literal|456
block|,
literal|456
block|,
literal|456
block|,
literal|456
block|,
literal|456
block|,
literal|456
block|,
literal|456
block|,
comment|// 256 - 263
literal|326
block|,
literal|326
block|,
literal|326
block|,
literal|326
block|,
literal|326
block|,
literal|326
block|,
literal|326
block|,
literal|326
block|,
comment|// 264 - 271
literal|326
block|,
literal|326
block|,
literal|326
block|,
literal|326
block|,
literal|326
block|,
literal|326
block|,
literal|326
block|,
literal|326
block|,
comment|// 272 - 279
literal|326
block|,
literal|326
block|,
literal|326
block|,
literal|326
block|,
literal|326
block|,
literal|326
block|,
literal|326
block|,
literal|326
block|,
comment|// 280 - 287
literal|326
block|,
literal|326
block|,
literal|326
block|,
literal|326
block|,
literal|326
block|,
literal|326
block|,
literal|326
block|,
literal|326
block|,
comment|// 288 - 295
literal|326
block|,
literal|326
block|,
literal|326
block|,
literal|326
block|,
literal|326
block|,
literal|326
block|,
literal|326
block|,
literal|326
block|,
comment|// 296 - 303
literal|326
block|,
literal|326
block|,
literal|326
block|,
literal|326
block|,
literal|326
block|,
literal|326
block|,
literal|326
block|,
literal|326
block|,
comment|// 304 - 311
literal|326
block|,
literal|326
block|,
literal|326
block|,
literal|326
block|,
literal|326
block|,
literal|326
block|,
literal|326
block|,
literal|326
block|,
comment|// 312 - 319
literal|326
block|,
literal|326
block|,
literal|326
block|,
literal|326
block|,
literal|326
block|,
literal|326
block|,
literal|326
block|,
literal|326
block|,
comment|// 320 - 327
literal|358
block|,
literal|358
block|,
literal|358
block|,
literal|358
block|,
literal|358
block|,
literal|358
block|,
literal|358
block|,
literal|358
block|,
comment|// 328 - 335
literal|358
block|,
literal|358
block|,
literal|358
block|,
literal|358
block|,
literal|358
block|,
literal|358
block|,
literal|358
block|,
literal|358
block|,
comment|// 336 - 343
literal|358
block|,
literal|358
block|,
literal|358
block|,
literal|358
block|,
literal|358
block|,
literal|358
block|,
literal|358
block|,
literal|358
block|,
comment|// 344 - 351
literal|358
block|,
literal|358
block|,
literal|358
block|,
literal|358
block|,
literal|358
block|,
literal|358
block|,
literal|358
block|,
literal|358
block|,
comment|// 352 - 359
literal|358
block|,
literal|358
block|,
literal|358
block|,
literal|358
block|,
literal|358
block|,
literal|358
block|,
literal|358
block|,
literal|358
block|,
comment|// 360 - 367
literal|358
block|,
literal|358
block|,
literal|358
block|,
literal|358
block|,
literal|358
block|,
literal|358
block|,
literal|358
block|,
literal|358
block|,
comment|// 368 - 375
literal|358
block|,
literal|358
block|,
literal|358
block|,
literal|358
block|,
literal|358
block|,
literal|358
block|,
literal|358
block|,
literal|358
block|,
comment|// 376 - 383
literal|358
block|,
literal|358
block|,
literal|358
block|,
literal|358
block|,
literal|358
block|,
literal|358
block|,
literal|358
block|,
literal|358
block|,
comment|// 384 - 391
literal|490
block|,
literal|490
block|,
literal|490
block|,
literal|490
block|,
literal|490
block|,
literal|490
block|,
literal|490
block|,
literal|490
block|,
comment|// 392 - 399
literal|490
block|,
literal|490
block|,
literal|490
block|,
literal|490
block|,
literal|490
block|,
literal|490
block|,
literal|490
block|,
literal|490
block|,
comment|// 400 - 407
literal|4113
block|,
literal|4113
block|,
literal|6161
block|,
literal|6161
block|,
literal|848
block|,
literal|848
block|,
literal|880
block|,
literal|880
block|,
comment|// 408 - 415
literal|912
block|,
literal|912
block|,
literal|944
block|,
literal|944
block|,
literal|622
block|,
literal|622
block|,
literal|622
block|,
literal|622
block|,
comment|// 416 - 423
literal|654
block|,
literal|654
block|,
literal|654
block|,
literal|654
block|,
literal|1104
block|,
literal|1104
block|,
literal|1136
block|,
literal|1136
block|,
comment|// 424 - 431
literal|1168
block|,
literal|1168
block|,
literal|1200
block|,
literal|1200
block|,
literal|1232
block|,
literal|1232
block|,
literal|1264
block|,
literal|1264
block|,
comment|// 432 - 439
literal|686
block|,
literal|686
block|,
literal|686
block|,
literal|686
block|,
literal|1360
block|,
literal|1360
block|,
literal|1392
block|,
literal|1392
block|,
comment|// 440 - 447
literal|12
block|,
literal|12
block|,
literal|12
block|,
literal|12
block|,
literal|12
block|,
literal|12
block|,
literal|12
block|,
literal|12
block|,
comment|// 448 - 455
literal|390
block|,
literal|390
block|,
literal|390
block|,
literal|390
block|,
literal|390
block|,
literal|390
block|,
literal|390
block|,
literal|390
block|,
comment|// 456 - 463
literal|390
block|,
literal|390
block|,
literal|390
block|,
literal|390
block|,
literal|390
block|,
literal|390
block|,
literal|390
block|,
literal|390
block|,
comment|// 464 - 471
literal|390
block|,
literal|390
block|,
literal|390
block|,
literal|390
block|,
literal|390
block|,
literal|390
block|,
literal|390
block|,
literal|390
block|,
comment|// 472 - 479
literal|390
block|,
literal|390
block|,
literal|390
block|,
literal|390
block|,
literal|390
block|,
literal|390
block|,
literal|390
block|,
literal|390
block|,
comment|// 480 - 487
literal|390
block|,
literal|390
block|,
literal|390
block|,
literal|390
block|,
literal|390
block|,
literal|390
block|,
literal|390
block|,
literal|390
block|,
comment|// 488 - 495
literal|390
block|,
literal|390
block|,
literal|390
block|,
literal|390
block|,
literal|390
block|,
literal|390
block|,
literal|390
block|,
literal|390
block|,
comment|// 496 - 503
literal|390
block|,
literal|390
block|,
literal|390
block|,
literal|390
block|,
literal|390
block|,
literal|390
block|,
literal|390
block|,
literal|390
block|,
comment|// 504 - 511
literal|390
block|,
literal|390
block|,
literal|390
block|,
literal|390
block|,
literal|390
block|,
literal|390
block|,
literal|390
block|,
literal|390
block|,     }
decl_stmt|;
specifier|static
name|byte
index|[]
name|twoDCodes
init|=
block|{
comment|// 0 - 7
literal|80
block|,
literal|88
block|,
literal|23
block|,
literal|71
block|,
literal|30
block|,
literal|30
block|,
literal|62
block|,
literal|62
block|,
comment|// 8 - 15
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
comment|// 16 - 23
literal|11
block|,
literal|11
block|,
literal|11
block|,
literal|11
block|,
literal|11
block|,
literal|11
block|,
literal|11
block|,
literal|11
block|,
comment|// 24 - 31
literal|11
block|,
literal|11
block|,
literal|11
block|,
literal|11
block|,
literal|11
block|,
literal|11
block|,
literal|11
block|,
literal|11
block|,
comment|// 32 - 39
literal|35
block|,
literal|35
block|,
literal|35
block|,
literal|35
block|,
literal|35
block|,
literal|35
block|,
literal|35
block|,
literal|35
block|,
comment|// 40 - 47
literal|35
block|,
literal|35
block|,
literal|35
block|,
literal|35
block|,
literal|35
block|,
literal|35
block|,
literal|35
block|,
literal|35
block|,
comment|// 48 - 55
literal|51
block|,
literal|51
block|,
literal|51
block|,
literal|51
block|,
literal|51
block|,
literal|51
block|,
literal|51
block|,
literal|51
block|,
comment|// 56 - 63
literal|51
block|,
literal|51
block|,
literal|51
block|,
literal|51
block|,
literal|51
block|,
literal|51
block|,
literal|51
block|,
literal|51
block|,
comment|// 64 - 71
literal|41
block|,
literal|41
block|,
literal|41
block|,
literal|41
block|,
literal|41
block|,
literal|41
block|,
literal|41
block|,
literal|41
block|,
comment|// 72 - 79
literal|41
block|,
literal|41
block|,
literal|41
block|,
literal|41
block|,
literal|41
block|,
literal|41
block|,
literal|41
block|,
literal|41
block|,
comment|// 80 - 87
literal|41
block|,
literal|41
block|,
literal|41
block|,
literal|41
block|,
literal|41
block|,
literal|41
block|,
literal|41
block|,
literal|41
block|,
comment|// 88 - 95
literal|41
block|,
literal|41
block|,
literal|41
block|,
literal|41
block|,
literal|41
block|,
literal|41
block|,
literal|41
block|,
literal|41
block|,
comment|// 96 - 103
literal|41
block|,
literal|41
block|,
literal|41
block|,
literal|41
block|,
literal|41
block|,
literal|41
block|,
literal|41
block|,
literal|41
block|,
comment|// 104 - 111
literal|41
block|,
literal|41
block|,
literal|41
block|,
literal|41
block|,
literal|41
block|,
literal|41
block|,
literal|41
block|,
literal|41
block|,
comment|// 112 - 119
literal|41
block|,
literal|41
block|,
literal|41
block|,
literal|41
block|,
literal|41
block|,
literal|41
block|,
literal|41
block|,
literal|41
block|,
comment|// 120 - 127
literal|41
block|,
literal|41
block|,
literal|41
block|,
literal|41
block|,
literal|41
block|,
literal|41
block|,
literal|41
block|,
literal|41
block|,     }
decl_stmt|;
comment|/**      * @param fillOrder   The fill order of the compressed data bytes.      * @param w The width of the image in pixels      * @param h The height of the image in pixels      */
specifier|public
name|TIFFFaxDecoder
parameter_list|(
name|int
name|fillOrder
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|)
block|{
name|this
operator|.
name|fillOrder
operator|=
name|fillOrder
expr_stmt|;
name|this
operator|.
name|w
operator|=
name|w
expr_stmt|;
name|this
operator|.
name|h
operator|=
name|h
expr_stmt|;
name|this
operator|.
name|bitPointer
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|bytePointer
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|prevChangingElems
operator|=
operator|new
name|int
index|[
name|w
operator|+
literal|1
index|]
expr_stmt|;
name|this
operator|.
name|currChangingElems
operator|=
operator|new
name|int
index|[
name|w
operator|+
literal|1
index|]
expr_stmt|;
block|}
comment|// One-dimensional decoding methods
specifier|public
name|void
name|decode1D
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|,
name|byte
index|[]
name|compData
parameter_list|,
name|int
name|startX
parameter_list|,
name|int
name|height
parameter_list|)
block|{
name|this
operator|.
name|data
operator|=
name|compData
expr_stmt|;
name|int
name|lineOffset
init|=
literal|0
decl_stmt|;
name|int
name|scanlineStride
init|=
operator|(
name|w
operator|+
literal|7
operator|)
operator|/
literal|8
decl_stmt|;
name|bitPointer
operator|=
literal|0
expr_stmt|;
name|bytePointer
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|height
condition|;
name|i
operator|++
control|)
block|{
name|decodeNextScanline
argument_list|(
name|buffer
argument_list|,
name|lineOffset
argument_list|,
name|startX
argument_list|)
expr_stmt|;
name|lineOffset
operator|+=
name|scanlineStride
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|decodeNextScanline
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|lineOffset
parameter_list|,
name|int
name|bitOffset
parameter_list|)
block|{
name|int
name|bits
init|=
literal|0
decl_stmt|,
name|code
init|=
literal|0
decl_stmt|,
name|isT
init|=
literal|0
decl_stmt|;
name|int
name|current
decl_stmt|,
name|entry
decl_stmt|,
name|twoBits
decl_stmt|;
name|boolean
name|isWhite
init|=
literal|true
decl_stmt|;
comment|// Initialize starting of the changing elements array
name|changingElemSize
operator|=
literal|0
expr_stmt|;
comment|// While scanline not complete
while|while
condition|(
name|bitOffset
operator|<
name|w
condition|)
block|{
while|while
condition|(
name|isWhite
condition|)
block|{
comment|// White run
name|current
operator|=
name|nextNBits
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|entry
operator|=
name|white
index|[
name|current
index|]
expr_stmt|;
comment|// Get the 3 fields from the entry
name|isT
operator|=
name|entry
operator|&
literal|0x0001
expr_stmt|;
name|bits
operator|=
operator|(
name|entry
operator|>>>
literal|1
operator|)
operator|&
literal|0x0f
expr_stmt|;
if|if
condition|(
name|bits
operator|==
literal|12
condition|)
block|{
comment|// Additional Make up code
comment|// Get the next 2 bits
name|twoBits
operator|=
name|nextLesserThan8Bits
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// Consolidate the 2 new bits and last 2 bits into 4 bits
name|current
operator|=
operator|(
operator|(
name|current
operator|<<
literal|2
operator|)
operator|&
literal|0x000c
operator|)
operator||
name|twoBits
expr_stmt|;
name|entry
operator|=
name|additionalMakeup
index|[
name|current
index|]
expr_stmt|;
name|bits
operator|=
operator|(
name|entry
operator|>>>
literal|1
operator|)
operator|&
literal|0x07
expr_stmt|;
comment|// 3 bits 0000 0111
name|code
operator|=
operator|(
name|entry
operator|>>>
literal|4
operator|)
operator|&
literal|0x0fff
expr_stmt|;
comment|// 12 bits
name|bitOffset
operator|+=
name|code
expr_stmt|;
comment|// Skip white run
name|updatePointer
argument_list|(
literal|4
operator|-
name|bits
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bits
operator|==
literal|0
condition|)
block|{
comment|// ERROR
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid code encountered."
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|bits
operator|==
literal|15
condition|)
block|{
comment|// EOL
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"EOL encountered in white run."
argument_list|)
throw|;
block|}
else|else
block|{
comment|// 11 bits - 0000 0111 1111 1111 = 0x07ff
name|code
operator|=
operator|(
name|entry
operator|>>>
literal|5
operator|)
operator|&
literal|0x07ff
expr_stmt|;
name|bitOffset
operator|+=
name|code
expr_stmt|;
name|updatePointer
argument_list|(
literal|10
operator|-
name|bits
argument_list|)
expr_stmt|;
if|if
condition|(
name|isT
operator|==
literal|0
condition|)
block|{
name|isWhite
operator|=
literal|false
expr_stmt|;
name|currChangingElems
index|[
name|changingElemSize
operator|++
index|]
operator|=
name|bitOffset
expr_stmt|;
block|}
block|}
block|}
comment|// Check whether this run completed one width, if so
comment|// advance to next byte boundary for compression = 2.
if|if
condition|(
name|bitOffset
operator|==
name|w
condition|)
block|{
if|if
condition|(
name|compression
operator|==
literal|2
condition|)
block|{
name|advancePointer
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
while|while
condition|(
operator|!
name|isWhite
condition|)
block|{
comment|// Black run
name|current
operator|=
name|nextLesserThan8Bits
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|entry
operator|=
name|initBlack
index|[
name|current
index|]
expr_stmt|;
comment|// Get the 3 fields from the entry
name|isT
operator|=
name|entry
operator|&
literal|0x0001
expr_stmt|;
name|bits
operator|=
operator|(
name|entry
operator|>>>
literal|1
operator|)
operator|&
literal|0x000f
expr_stmt|;
name|code
operator|=
operator|(
name|entry
operator|>>>
literal|5
operator|)
operator|&
literal|0x07ff
expr_stmt|;
if|if
condition|(
name|code
operator|==
literal|100
condition|)
block|{
name|current
operator|=
name|nextNBits
argument_list|(
literal|9
argument_list|)
expr_stmt|;
name|entry
operator|=
name|black
index|[
name|current
index|]
expr_stmt|;
comment|// Get the 3 fields from the entry
name|isT
operator|=
name|entry
operator|&
literal|0x0001
expr_stmt|;
name|bits
operator|=
operator|(
name|entry
operator|>>>
literal|1
operator|)
operator|&
literal|0x000f
expr_stmt|;
name|code
operator|=
operator|(
name|entry
operator|>>>
literal|5
operator|)
operator|&
literal|0x07ff
expr_stmt|;
if|if
condition|(
name|bits
operator|==
literal|12
condition|)
block|{
comment|// Additional makeup codes
name|updatePointer
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|current
operator|=
name|nextLesserThan8Bits
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|entry
operator|=
name|additionalMakeup
index|[
name|current
index|]
expr_stmt|;
name|bits
operator|=
operator|(
name|entry
operator|>>>
literal|1
operator|)
operator|&
literal|0x07
expr_stmt|;
comment|// 3 bits 0000 0111
name|code
operator|=
operator|(
name|entry
operator|>>>
literal|4
operator|)
operator|&
literal|0x0fff
expr_stmt|;
comment|// 12 bits
name|setToBlack
argument_list|(
name|buffer
argument_list|,
name|lineOffset
argument_list|,
name|bitOffset
argument_list|,
name|code
argument_list|)
expr_stmt|;
name|bitOffset
operator|+=
name|code
expr_stmt|;
name|updatePointer
argument_list|(
literal|4
operator|-
name|bits
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bits
operator|==
literal|15
condition|)
block|{
comment|// EOL code
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"EOL encountered in black run."
argument_list|)
throw|;
block|}
else|else
block|{
name|setToBlack
argument_list|(
name|buffer
argument_list|,
name|lineOffset
argument_list|,
name|bitOffset
argument_list|,
name|code
argument_list|)
expr_stmt|;
name|bitOffset
operator|+=
name|code
expr_stmt|;
name|updatePointer
argument_list|(
literal|9
operator|-
name|bits
argument_list|)
expr_stmt|;
if|if
condition|(
name|isT
operator|==
literal|0
condition|)
block|{
name|isWhite
operator|=
literal|true
expr_stmt|;
name|currChangingElems
index|[
name|changingElemSize
operator|++
index|]
operator|=
name|bitOffset
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|code
operator|==
literal|200
condition|)
block|{
comment|// Is a Terminating code
name|current
operator|=
name|nextLesserThan8Bits
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|entry
operator|=
name|twoBitBlack
index|[
name|current
index|]
expr_stmt|;
name|code
operator|=
operator|(
name|entry
operator|>>>
literal|5
operator|)
operator|&
literal|0x07ff
expr_stmt|;
name|bits
operator|=
operator|(
name|entry
operator|>>>
literal|1
operator|)
operator|&
literal|0x0f
expr_stmt|;
name|setToBlack
argument_list|(
name|buffer
argument_list|,
name|lineOffset
argument_list|,
name|bitOffset
argument_list|,
name|code
argument_list|)
expr_stmt|;
name|bitOffset
operator|+=
name|code
expr_stmt|;
name|updatePointer
argument_list|(
literal|2
operator|-
name|bits
argument_list|)
expr_stmt|;
name|isWhite
operator|=
literal|true
expr_stmt|;
name|currChangingElems
index|[
name|changingElemSize
operator|++
index|]
operator|=
name|bitOffset
expr_stmt|;
block|}
else|else
block|{
comment|// Is a Terminating code
name|setToBlack
argument_list|(
name|buffer
argument_list|,
name|lineOffset
argument_list|,
name|bitOffset
argument_list|,
name|code
argument_list|)
expr_stmt|;
name|bitOffset
operator|+=
name|code
expr_stmt|;
name|updatePointer
argument_list|(
literal|4
operator|-
name|bits
argument_list|)
expr_stmt|;
name|isWhite
operator|=
literal|true
expr_stmt|;
name|currChangingElems
index|[
name|changingElemSize
operator|++
index|]
operator|=
name|bitOffset
expr_stmt|;
block|}
block|}
comment|// Check whether this run completed one width
if|if
condition|(
name|bitOffset
operator|==
name|w
condition|)
block|{
if|if
condition|(
name|compression
operator|==
literal|2
condition|)
block|{
name|advancePointer
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
name|currChangingElems
index|[
name|changingElemSize
operator|++
index|]
operator|=
name|bitOffset
expr_stmt|;
block|}
comment|// Two-dimensional decoding methods
specifier|public
name|void
name|decode2D
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|,
name|byte
index|[]
name|compData
parameter_list|,
name|int
name|startX
parameter_list|,
name|int
name|height
parameter_list|,
name|long
name|tiffT4Options
parameter_list|)
block|{
name|this
operator|.
name|data
operator|=
name|compData
expr_stmt|;
name|compression
operator|=
literal|3
expr_stmt|;
name|bitPointer
operator|=
literal|0
expr_stmt|;
name|bytePointer
operator|=
literal|0
expr_stmt|;
name|int
name|scanlineStride
init|=
operator|(
name|w
operator|+
literal|7
operator|)
operator|/
literal|8
decl_stmt|;
name|int
name|a0
decl_stmt|,
name|a1
decl_stmt|,
name|b1
decl_stmt|,
name|b2
decl_stmt|;
name|int
index|[]
name|b
init|=
operator|new
name|int
index|[
literal|2
index|]
decl_stmt|;
name|int
name|entry
decl_stmt|,
name|code
decl_stmt|,
name|bits
decl_stmt|;
name|boolean
name|isWhite
decl_stmt|;
name|int
name|currIndex
init|=
literal|0
decl_stmt|;
name|int
index|[]
name|temp
decl_stmt|;
comment|// fillBits - dealt with this in readEOL
comment|// 1D/2D encoding - dealt with this in readEOL
comment|// uncompressedMode - haven't dealt with this yet.
name|oneD
operator|=
call|(
name|int
call|)
argument_list|(
name|tiffT4Options
operator|&
literal|0x01
argument_list|)
expr_stmt|;
name|uncompressedMode
operator|=
call|(
name|int
call|)
argument_list|(
operator|(
name|tiffT4Options
operator|&
literal|0x02
operator|)
operator|>>
literal|1
argument_list|)
expr_stmt|;
name|fillBits
operator|=
call|(
name|int
call|)
argument_list|(
operator|(
name|tiffT4Options
operator|&
literal|0x04
operator|)
operator|>>
literal|2
argument_list|)
expr_stmt|;
comment|// The data must start with an EOL code
if|if
condition|(
name|readEOL
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"First scanline must be 1D encoded."
argument_list|)
throw|;
block|}
name|int
name|lineOffset
init|=
literal|0
decl_stmt|;
name|int
name|bitOffset
decl_stmt|;
comment|// Then the 1D encoded scanline data will occur, changing elements
comment|// array gets set.
name|decodeNextScanline
argument_list|(
name|buffer
argument_list|,
name|lineOffset
argument_list|,
name|startX
argument_list|)
expr_stmt|;
name|lineOffset
operator|+=
name|scanlineStride
expr_stmt|;
for|for
control|(
name|int
name|lines
init|=
literal|1
init|;
name|lines
operator|<
name|height
condition|;
name|lines
operator|++
control|)
block|{
comment|// Every line must begin with an EOL followed by a bit which
comment|// indicates whether the following scanline is 1D or 2D encoded.
if|if
condition|(
name|readEOL
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// 2D encoded scanline follows
comment|// Initialize previous scanlines changing elements, and
comment|// initialize current scanline's changing elements array
name|temp
operator|=
name|prevChangingElems
expr_stmt|;
name|prevChangingElems
operator|=
name|currChangingElems
expr_stmt|;
name|currChangingElems
operator|=
name|temp
expr_stmt|;
name|currIndex
operator|=
literal|0
expr_stmt|;
comment|// a0 has to be set just before the start of this scanline.
name|a0
operator|=
operator|-
literal|1
expr_stmt|;
name|isWhite
operator|=
literal|true
expr_stmt|;
name|bitOffset
operator|=
name|startX
expr_stmt|;
name|lastChangingElement
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|bitOffset
operator|<
name|w
condition|)
block|{
comment|// Get the next changing element
name|getNextChangingElement
argument_list|(
name|a0
argument_list|,
name|isWhite
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|b1
operator|=
name|b
index|[
literal|0
index|]
expr_stmt|;
name|b2
operator|=
name|b
index|[
literal|1
index|]
expr_stmt|;
comment|// Get the next seven bits
name|entry
operator|=
name|nextLesserThan8Bits
argument_list|(
literal|7
argument_list|)
expr_stmt|;
comment|// Run these through the 2DCodes table
name|entry
operator|=
operator|(
name|twoDCodes
index|[
name|entry
index|]
operator|&
literal|0xff
operator|)
expr_stmt|;
comment|// Get the code and the number of bits used up
name|code
operator|=
operator|(
name|entry
operator|&
literal|0x78
operator|)
operator|>>>
literal|3
expr_stmt|;
name|bits
operator|=
name|entry
operator|&
literal|0x07
expr_stmt|;
if|if
condition|(
name|code
operator|==
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|isWhite
condition|)
block|{
name|setToBlack
argument_list|(
name|buffer
argument_list|,
name|lineOffset
argument_list|,
name|bitOffset
argument_list|,
name|b2
operator|-
name|bitOffset
argument_list|)
expr_stmt|;
block|}
name|bitOffset
operator|=
name|a0
operator|=
name|b2
expr_stmt|;
comment|// Set pointer to consume the correct number of bits.
name|updatePointer
argument_list|(
literal|7
operator|-
name|bits
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|code
operator|==
literal|1
condition|)
block|{
comment|// Horizontal
name|updatePointer
argument_list|(
literal|7
operator|-
name|bits
argument_list|)
expr_stmt|;
comment|// identify the next 2 codes.
name|int
name|number
decl_stmt|;
if|if
condition|(
name|isWhite
condition|)
block|{
name|number
operator|=
name|decodeWhiteCodeWord
argument_list|()
expr_stmt|;
name|bitOffset
operator|+=
name|number
expr_stmt|;
name|currChangingElems
index|[
name|currIndex
operator|++
index|]
operator|=
name|bitOffset
expr_stmt|;
name|number
operator|=
name|decodeBlackCodeWord
argument_list|()
expr_stmt|;
name|setToBlack
argument_list|(
name|buffer
argument_list|,
name|lineOffset
argument_list|,
name|bitOffset
argument_list|,
name|number
argument_list|)
expr_stmt|;
name|bitOffset
operator|+=
name|number
expr_stmt|;
name|currChangingElems
index|[
name|currIndex
operator|++
index|]
operator|=
name|bitOffset
expr_stmt|;
block|}
else|else
block|{
name|number
operator|=
name|decodeBlackCodeWord
argument_list|()
expr_stmt|;
name|setToBlack
argument_list|(
name|buffer
argument_list|,
name|lineOffset
argument_list|,
name|bitOffset
argument_list|,
name|number
argument_list|)
expr_stmt|;
name|bitOffset
operator|+=
name|number
expr_stmt|;
name|currChangingElems
index|[
name|currIndex
operator|++
index|]
operator|=
name|bitOffset
expr_stmt|;
name|number
operator|=
name|decodeWhiteCodeWord
argument_list|()
expr_stmt|;
name|bitOffset
operator|+=
name|number
expr_stmt|;
name|currChangingElems
index|[
name|currIndex
operator|++
index|]
operator|=
name|bitOffset
expr_stmt|;
block|}
name|a0
operator|=
name|bitOffset
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|code
operator|<=
literal|8
condition|)
block|{
comment|// Vertical
name|a1
operator|=
name|b1
operator|+
operator|(
name|code
operator|-
literal|5
operator|)
expr_stmt|;
name|currChangingElems
index|[
name|currIndex
operator|++
index|]
operator|=
name|a1
expr_stmt|;
comment|// We write the current color till a1 - 1 pos,
comment|// since a1 is where the next color starts
if|if
condition|(
operator|!
name|isWhite
condition|)
block|{
name|setToBlack
argument_list|(
name|buffer
argument_list|,
name|lineOffset
argument_list|,
name|bitOffset
argument_list|,
name|a1
operator|-
name|bitOffset
argument_list|)
expr_stmt|;
block|}
name|bitOffset
operator|=
name|a0
operator|=
name|a1
expr_stmt|;
name|isWhite
operator|=
operator|!
name|isWhite
expr_stmt|;
name|updatePointer
argument_list|(
literal|7
operator|-
name|bits
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid code encountered while decoding 2D group 3 compressed data."
argument_list|)
throw|;
block|}
block|}
comment|// Add the changing element beyond the current scanline for the
comment|// other color too
name|currChangingElems
index|[
name|currIndex
operator|++
index|]
operator|=
name|bitOffset
expr_stmt|;
name|changingElemSize
operator|=
name|currIndex
expr_stmt|;
block|}
else|else
block|{
comment|// 1D encoded scanline follows
name|decodeNextScanline
argument_list|(
name|buffer
argument_list|,
name|lineOffset
argument_list|,
name|startX
argument_list|)
expr_stmt|;
block|}
name|lineOffset
operator|+=
name|scanlineStride
expr_stmt|;
block|}
block|}
specifier|public
specifier|synchronized
name|void
name|decodeT6
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|,
name|byte
index|[]
name|compData
parameter_list|,
name|int
name|startX
parameter_list|,
name|int
name|height
parameter_list|,
name|long
name|tiffT6Options
parameter_list|,
name|boolean
name|encodedByteAlign
parameter_list|)
block|{
name|this
operator|.
name|data
operator|=
name|compData
expr_stmt|;
name|compression
operator|=
literal|4
expr_stmt|;
name|bitPointer
operator|=
literal|0
expr_stmt|;
name|bytePointer
operator|=
literal|0
expr_stmt|;
name|int
name|scanlineStride
init|=
operator|(
name|w
operator|+
literal|7
operator|)
operator|/
literal|8
decl_stmt|;
name|int
name|a0
decl_stmt|,
name|a1
decl_stmt|,
name|b1
decl_stmt|,
name|b2
decl_stmt|;
name|int
name|entry
decl_stmt|,
name|code
decl_stmt|,
name|bits
decl_stmt|;
name|boolean
name|isWhite
decl_stmt|;
name|int
name|currIndex
decl_stmt|;
name|int
index|[]
name|temp
decl_stmt|;
comment|// Return values from getNextChangingElement
name|int
index|[]
name|b
init|=
operator|new
name|int
index|[
literal|2
index|]
decl_stmt|;
comment|// uncompressedMode - have written some code for this, but this
comment|// has not been tested due to lack of test images using this optional
name|uncompressedMode
operator|=
call|(
name|int
call|)
argument_list|(
operator|(
name|tiffT6Options
operator|&
literal|0x02
operator|)
operator|>>
literal|1
argument_list|)
expr_stmt|;
comment|// Local cached reference
name|int
index|[]
name|cce
init|=
name|currChangingElems
decl_stmt|;
comment|// Assume invisible preceding row of all white pixels and insert
comment|// both black and white changing elements beyond the end of this
comment|// imaginary scanline.
name|changingElemSize
operator|=
literal|0
expr_stmt|;
name|cce
index|[
name|changingElemSize
operator|++
index|]
operator|=
name|w
expr_stmt|;
name|cce
index|[
name|changingElemSize
operator|++
index|]
operator|=
name|w
expr_stmt|;
name|int
name|lineOffset
init|=
literal|0
decl_stmt|;
name|int
name|bitOffset
decl_stmt|;
for|for
control|(
name|int
name|lines
init|=
literal|0
init|;
name|lines
operator|<
name|height
condition|;
name|lines
operator|++
control|)
block|{
if|if
condition|(
name|encodedByteAlign
operator|&&
name|bitPointer
operator|!=
literal|0
condition|)
block|{
name|bitPointer
operator|=
literal|0
expr_stmt|;
name|bytePointer
operator|++
expr_stmt|;
block|}
comment|// a0 has to be set just before the start of the scanline.
name|a0
operator|=
operator|-
literal|1
expr_stmt|;
name|isWhite
operator|=
literal|true
expr_stmt|;
comment|// Assign the changing elements of the previous scanline to
comment|// prevChangingElems and start putting this new scanline's
comment|// changing elements into the currChangingElems.
name|temp
operator|=
name|prevChangingElems
expr_stmt|;
name|prevChangingElems
operator|=
name|currChangingElems
expr_stmt|;
name|cce
operator|=
name|currChangingElems
operator|=
name|temp
expr_stmt|;
name|currIndex
operator|=
literal|0
expr_stmt|;
comment|// Start decoding the scanline at startX in the raster
name|bitOffset
operator|=
name|startX
expr_stmt|;
comment|// Reset search start position for getNextChangingElement
name|lastChangingElement
operator|=
literal|0
expr_stmt|;
comment|// Till one whole scanline is decoded
while|while
condition|(
name|bitOffset
operator|<
name|w
condition|)
block|{
comment|// Get the next changing element
name|getNextChangingElement
argument_list|(
name|a0
argument_list|,
name|isWhite
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|b1
operator|=
name|b
index|[
literal|0
index|]
expr_stmt|;
name|b2
operator|=
name|b
index|[
literal|1
index|]
expr_stmt|;
comment|// Get the next seven bits
name|entry
operator|=
name|nextLesserThan8Bits
argument_list|(
literal|7
argument_list|)
expr_stmt|;
comment|// Run these through the 2DCodes table
name|entry
operator|=
operator|(
name|twoDCodes
index|[
name|entry
index|]
operator|&
literal|0xff
operator|)
expr_stmt|;
comment|// Get the code and the number of bits used up
name|code
operator|=
operator|(
name|entry
operator|&
literal|0x78
operator|)
operator|>>>
literal|3
expr_stmt|;
name|bits
operator|=
name|entry
operator|&
literal|0x07
expr_stmt|;
if|if
condition|(
name|code
operator|==
literal|0
condition|)
block|{
comment|// Pass
comment|// We always assume WhiteIsZero format for fax.
if|if
condition|(
operator|!
name|isWhite
condition|)
block|{
name|setToBlack
argument_list|(
name|buffer
argument_list|,
name|lineOffset
argument_list|,
name|bitOffset
argument_list|,
name|b2
operator|-
name|bitOffset
argument_list|)
expr_stmt|;
block|}
name|bitOffset
operator|=
name|a0
operator|=
name|b2
expr_stmt|;
comment|// Set pointer to only consume the correct number of bits.
name|updatePointer
argument_list|(
literal|7
operator|-
name|bits
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|code
operator|==
literal|1
condition|)
block|{
comment|// Horizontal
comment|// Set pointer to only consume the correct number of bits.
name|updatePointer
argument_list|(
literal|7
operator|-
name|bits
argument_list|)
expr_stmt|;
comment|// identify the next 2 alternating color codes.
name|int
name|number
decl_stmt|;
if|if
condition|(
name|isWhite
condition|)
block|{
comment|// Following are white and black runs
name|number
operator|=
name|decodeWhiteCodeWord
argument_list|()
expr_stmt|;
name|bitOffset
operator|+=
name|number
expr_stmt|;
name|cce
index|[
name|currIndex
operator|++
index|]
operator|=
name|bitOffset
expr_stmt|;
name|number
operator|=
name|decodeBlackCodeWord
argument_list|()
expr_stmt|;
name|setToBlack
argument_list|(
name|buffer
argument_list|,
name|lineOffset
argument_list|,
name|bitOffset
argument_list|,
name|number
argument_list|)
expr_stmt|;
name|bitOffset
operator|+=
name|number
expr_stmt|;
name|cce
index|[
name|currIndex
operator|++
index|]
operator|=
name|bitOffset
expr_stmt|;
block|}
else|else
block|{
comment|// First a black run and then a white run follows
name|number
operator|=
name|decodeBlackCodeWord
argument_list|()
expr_stmt|;
name|setToBlack
argument_list|(
name|buffer
argument_list|,
name|lineOffset
argument_list|,
name|bitOffset
argument_list|,
name|number
argument_list|)
expr_stmt|;
name|bitOffset
operator|+=
name|number
expr_stmt|;
name|cce
index|[
name|currIndex
operator|++
index|]
operator|=
name|bitOffset
expr_stmt|;
name|number
operator|=
name|decodeWhiteCodeWord
argument_list|()
expr_stmt|;
name|bitOffset
operator|+=
name|number
expr_stmt|;
name|cce
index|[
name|currIndex
operator|++
index|]
operator|=
name|bitOffset
expr_stmt|;
block|}
name|a0
operator|=
name|bitOffset
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|code
operator|<=
literal|8
condition|)
block|{
comment|// Vertical
name|a1
operator|=
name|b1
operator|+
operator|(
name|code
operator|-
literal|5
operator|)
expr_stmt|;
name|cce
index|[
name|currIndex
operator|++
index|]
operator|=
name|a1
expr_stmt|;
comment|// We write the current color till a1 - 1 pos,
comment|// since a1 is where the next color starts
if|if
condition|(
operator|!
name|isWhite
condition|)
block|{
name|setToBlack
argument_list|(
name|buffer
argument_list|,
name|lineOffset
argument_list|,
name|bitOffset
argument_list|,
name|a1
operator|-
name|bitOffset
argument_list|)
expr_stmt|;
block|}
name|bitOffset
operator|=
name|a0
operator|=
name|a1
expr_stmt|;
name|isWhite
operator|=
operator|!
name|isWhite
expr_stmt|;
name|updatePointer
argument_list|(
literal|7
operator|-
name|bits
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|code
operator|==
literal|11
condition|)
block|{
if|if
condition|(
name|nextLesserThan8Bits
argument_list|(
literal|3
argument_list|)
operator|!=
literal|7
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid code encountered while decoding 2D group 4 compressed data."
argument_list|)
throw|;
block|}
name|int
name|zeros
init|=
literal|0
decl_stmt|;
name|boolean
name|exit
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|exit
condition|)
block|{
while|while
condition|(
name|nextLesserThan8Bits
argument_list|(
literal|1
argument_list|)
operator|!=
literal|1
condition|)
block|{
name|zeros
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|zeros
operator|>
literal|5
condition|)
block|{
comment|// Exit code
comment|// Zeros before exit code
name|zeros
operator|=
name|zeros
operator|-
literal|6
expr_stmt|;
if|if
condition|(
operator|!
name|isWhite
operator|&&
operator|(
name|zeros
operator|>
literal|0
operator|)
condition|)
block|{
name|cce
index|[
name|currIndex
operator|++
index|]
operator|=
name|bitOffset
expr_stmt|;
block|}
comment|// Zeros before the exit code
name|bitOffset
operator|+=
name|zeros
expr_stmt|;
if|if
condition|(
name|zeros
operator|>
literal|0
condition|)
block|{
comment|// Some zeros have been written
name|isWhite
operator|=
literal|true
expr_stmt|;
block|}
comment|// Read in the bit which specifies the color of
comment|// the following run
if|if
condition|(
name|nextLesserThan8Bits
argument_list|(
literal|1
argument_list|)
operator|==
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|isWhite
condition|)
block|{
name|cce
index|[
name|currIndex
operator|++
index|]
operator|=
name|bitOffset
expr_stmt|;
block|}
name|isWhite
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|isWhite
condition|)
block|{
name|cce
index|[
name|currIndex
operator|++
index|]
operator|=
name|bitOffset
expr_stmt|;
block|}
name|isWhite
operator|=
literal|false
expr_stmt|;
block|}
name|exit
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|zeros
operator|==
literal|5
condition|)
block|{
if|if
condition|(
operator|!
name|isWhite
condition|)
block|{
name|cce
index|[
name|currIndex
operator|++
index|]
operator|=
name|bitOffset
expr_stmt|;
block|}
name|bitOffset
operator|+=
name|zeros
expr_stmt|;
comment|// Last thing written was white
name|isWhite
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|bitOffset
operator|+=
name|zeros
expr_stmt|;
name|cce
index|[
name|currIndex
operator|++
index|]
operator|=
name|bitOffset
expr_stmt|;
name|setToBlack
argument_list|(
name|buffer
argument_list|,
name|lineOffset
argument_list|,
name|bitOffset
argument_list|,
literal|1
argument_list|)
expr_stmt|;
operator|++
name|bitOffset
expr_stmt|;
comment|// Last thing written was black
name|isWhite
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid code encountered while decoding 2D group 4 compressed data."
argument_list|)
throw|;
block|}
block|}
comment|// workaround for PDFBOX-1916, it is not clear whether the
comment|// code in the class is to blame or if the PDF is corrupt
if|if
condition|(
name|cce
operator|.
name|length
operator|==
name|currIndex
condition|)
block|{
break|break;
block|}
comment|// Add the changing element beyond the current scanline for the
comment|// other color too
name|cce
index|[
name|currIndex
operator|++
index|]
operator|=
name|bitOffset
expr_stmt|;
comment|// Number of changing elements in this scanline.
name|changingElemSize
operator|=
name|currIndex
expr_stmt|;
name|lineOffset
operator|+=
name|scanlineStride
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|setToBlack
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|lineOffset
parameter_list|,
name|int
name|bitOffset
parameter_list|,
name|int
name|numBits
parameter_list|)
block|{
name|int
name|bitNum
init|=
literal|8
operator|*
name|lineOffset
operator|+
name|bitOffset
decl_stmt|;
name|int
name|lastBit
init|=
name|bitNum
operator|+
name|numBits
decl_stmt|;
name|int
name|byteNum
init|=
name|bitNum
operator|>>
literal|3
decl_stmt|;
comment|// Handle bits in first byte
name|int
name|shift
init|=
name|bitNum
operator|&
literal|0x7
decl_stmt|;
if|if
condition|(
name|shift
operator|>
literal|0
condition|)
block|{
name|int
name|maskVal
init|=
literal|1
operator|<<
operator|(
literal|7
operator|-
name|shift
operator|)
decl_stmt|;
name|byte
name|val
init|=
name|buffer
index|[
name|byteNum
index|]
decl_stmt|;
while|while
condition|(
name|maskVal
operator|>
literal|0
operator|&&
name|bitNum
operator|<
name|lastBit
condition|)
block|{
name|val
operator||=
name|maskVal
expr_stmt|;
name|maskVal
operator|>>=
literal|1
expr_stmt|;
operator|++
name|bitNum
expr_stmt|;
block|}
name|buffer
index|[
name|byteNum
index|]
operator|=
name|val
expr_stmt|;
block|}
comment|// Fill in 8 bits at a time
name|byteNum
operator|=
name|bitNum
operator|>>
literal|3
expr_stmt|;
while|while
condition|(
name|bitNum
operator|<
name|lastBit
operator|-
literal|7
condition|)
block|{
name|buffer
index|[
name|byteNum
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
literal|255
expr_stmt|;
name|bitNum
operator|+=
literal|8
expr_stmt|;
block|}
comment|// Fill in remaining bits
while|while
condition|(
name|bitNum
operator|<
name|lastBit
condition|)
block|{
name|byteNum
operator|=
name|bitNum
operator|>>
literal|3
expr_stmt|;
name|buffer
index|[
name|byteNum
index|]
operator||=
literal|1
operator|<<
operator|(
literal|7
operator|-
operator|(
name|bitNum
operator|&
literal|0x7
operator|)
operator|)
expr_stmt|;
operator|++
name|bitNum
expr_stmt|;
block|}
block|}
comment|// Returns run length
specifier|private
name|int
name|decodeWhiteCodeWord
parameter_list|()
block|{
name|int
name|current
decl_stmt|,
name|entry
decl_stmt|,
name|bits
decl_stmt|,
name|isT
decl_stmt|,
name|twoBits
decl_stmt|,
name|code
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|runLength
init|=
literal|0
decl_stmt|;
name|boolean
name|isWhite
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|isWhite
condition|)
block|{
name|current
operator|=
name|nextNBits
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|entry
operator|=
name|white
index|[
name|current
index|]
expr_stmt|;
comment|// Get the 3 fields from the entry
name|isT
operator|=
name|entry
operator|&
literal|0x0001
expr_stmt|;
name|bits
operator|=
operator|(
name|entry
operator|>>>
literal|1
operator|)
operator|&
literal|0x0f
expr_stmt|;
if|if
condition|(
name|bits
operator|==
literal|12
condition|)
block|{
comment|// Additional Make up code
comment|// Get the next 2 bits
name|twoBits
operator|=
name|nextLesserThan8Bits
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// Consolidate the 2 new bits and last 2 bits into 4 bits
name|current
operator|=
operator|(
operator|(
name|current
operator|<<
literal|2
operator|)
operator|&
literal|0x000c
operator|)
operator||
name|twoBits
expr_stmt|;
name|entry
operator|=
name|additionalMakeup
index|[
name|current
index|]
expr_stmt|;
name|bits
operator|=
operator|(
name|entry
operator|>>>
literal|1
operator|)
operator|&
literal|0x07
expr_stmt|;
comment|// 3 bits 0000 0111
name|code
operator|=
operator|(
name|entry
operator|>>>
literal|4
operator|)
operator|&
literal|0x0fff
expr_stmt|;
comment|// 12 bits
name|runLength
operator|+=
name|code
expr_stmt|;
name|updatePointer
argument_list|(
literal|4
operator|-
name|bits
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bits
operator|==
literal|0
condition|)
block|{
comment|// ERROR
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid code encountered."
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|bits
operator|==
literal|15
condition|)
block|{
comment|// EOL
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"EOL encountered in white run."
argument_list|)
throw|;
block|}
else|else
block|{
comment|// 11 bits - 0000 0111 1111 1111 = 0x07ff
name|code
operator|=
operator|(
name|entry
operator|>>>
literal|5
operator|)
operator|&
literal|0x07ff
expr_stmt|;
name|runLength
operator|+=
name|code
expr_stmt|;
name|updatePointer
argument_list|(
literal|10
operator|-
name|bits
argument_list|)
expr_stmt|;
if|if
condition|(
name|isT
operator|==
literal|0
condition|)
block|{
name|isWhite
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
return|return
name|runLength
return|;
block|}
comment|// Returns run length
specifier|private
name|int
name|decodeBlackCodeWord
parameter_list|()
block|{
name|int
name|current
decl_stmt|,
name|entry
decl_stmt|,
name|bits
decl_stmt|,
name|isT
decl_stmt|,
name|code
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|runLength
init|=
literal|0
decl_stmt|;
name|boolean
name|isWhite
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|isWhite
condition|)
block|{
name|current
operator|=
name|nextLesserThan8Bits
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|entry
operator|=
name|initBlack
index|[
name|current
index|]
expr_stmt|;
comment|// Get the 3 fields from the entry
name|isT
operator|=
name|entry
operator|&
literal|0x0001
expr_stmt|;
name|bits
operator|=
operator|(
name|entry
operator|>>>
literal|1
operator|)
operator|&
literal|0x000f
expr_stmt|;
name|code
operator|=
operator|(
name|entry
operator|>>>
literal|5
operator|)
operator|&
literal|0x07ff
expr_stmt|;
if|if
condition|(
name|code
operator|==
literal|100
condition|)
block|{
name|current
operator|=
name|nextNBits
argument_list|(
literal|9
argument_list|)
expr_stmt|;
name|entry
operator|=
name|black
index|[
name|current
index|]
expr_stmt|;
comment|// Get the 3 fields from the entry
name|isT
operator|=
name|entry
operator|&
literal|0x0001
expr_stmt|;
name|bits
operator|=
operator|(
name|entry
operator|>>>
literal|1
operator|)
operator|&
literal|0x000f
expr_stmt|;
name|code
operator|=
operator|(
name|entry
operator|>>>
literal|5
operator|)
operator|&
literal|0x07ff
expr_stmt|;
if|if
condition|(
name|bits
operator|==
literal|12
condition|)
block|{
comment|// Additional makeup codes
name|updatePointer
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|current
operator|=
name|nextLesserThan8Bits
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|entry
operator|=
name|additionalMakeup
index|[
name|current
index|]
expr_stmt|;
name|bits
operator|=
operator|(
name|entry
operator|>>>
literal|1
operator|)
operator|&
literal|0x07
expr_stmt|;
comment|// 3 bits 0000 0111
name|code
operator|=
operator|(
name|entry
operator|>>>
literal|4
operator|)
operator|&
literal|0x0fff
expr_stmt|;
comment|// 12 bits
name|runLength
operator|+=
name|code
expr_stmt|;
name|updatePointer
argument_list|(
literal|4
operator|-
name|bits
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bits
operator|==
literal|15
condition|)
block|{
comment|// EOL code
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"EOL encountered in black run."
argument_list|)
throw|;
block|}
else|else
block|{
name|runLength
operator|+=
name|code
expr_stmt|;
name|updatePointer
argument_list|(
literal|9
operator|-
name|bits
argument_list|)
expr_stmt|;
if|if
condition|(
name|isT
operator|==
literal|0
condition|)
block|{
name|isWhite
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|code
operator|==
literal|200
condition|)
block|{
comment|// Is a Terminating code
name|current
operator|=
name|nextLesserThan8Bits
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|entry
operator|=
name|twoBitBlack
index|[
name|current
index|]
expr_stmt|;
name|code
operator|=
operator|(
name|entry
operator|>>>
literal|5
operator|)
operator|&
literal|0x07ff
expr_stmt|;
name|runLength
operator|+=
name|code
expr_stmt|;
name|bits
operator|=
operator|(
name|entry
operator|>>>
literal|1
operator|)
operator|&
literal|0x0f
expr_stmt|;
name|updatePointer
argument_list|(
literal|2
operator|-
name|bits
argument_list|)
expr_stmt|;
name|isWhite
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// Is a Terminating code
name|runLength
operator|+=
name|code
expr_stmt|;
name|updatePointer
argument_list|(
literal|4
operator|-
name|bits
argument_list|)
expr_stmt|;
name|isWhite
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|runLength
return|;
block|}
specifier|private
name|int
name|readEOL
parameter_list|()
block|{
if|if
condition|(
name|fillBits
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|nextNBits
argument_list|(
literal|12
argument_list|)
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Scanline must begin with EOL."
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|fillBits
operator|==
literal|1
condition|)
block|{
comment|// First EOL code word xxxx 0000 0000 0001 will occur
comment|// As many fill bits will be present as required to make
comment|// the EOL code of 12 bits end on a byte boundary.
name|int
name|bitsLeft
init|=
literal|8
operator|-
name|bitPointer
decl_stmt|;
if|if
condition|(
name|nextNBits
argument_list|(
name|bitsLeft
argument_list|)
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"All fill bits preceding EOL code must be 0."
argument_list|)
throw|;
block|}
comment|// If the number of bitsLeft is less than 8, then to have a 12
comment|// bit EOL sequence, two more bytes are certainly going to be
comment|// required. The first of them has to be all zeros, so ensure
comment|// that.
if|if
condition|(
name|bitsLeft
operator|<
literal|4
condition|)
block|{
if|if
condition|(
name|nextNBits
argument_list|(
literal|8
argument_list|)
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"All fill bits preceding EOL code must be 0."
argument_list|)
throw|;
block|}
block|}
comment|// There might be a random number of fill bytes with 0s, so
comment|// loop till the EOL of 0000 0001 is found, as long as all
comment|// the bytes preceding it are 0's.
name|int
name|n
decl_stmt|;
while|while
condition|(
operator|(
name|n
operator|=
name|nextNBits
argument_list|(
literal|8
argument_list|)
operator|)
operator|!=
literal|1
condition|)
block|{
comment|// If not all zeros
if|if
condition|(
name|n
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"All fill bits preceding EOL code must be 0."
argument_list|)
throw|;
block|}
block|}
block|}
comment|// If one dimensional encoding mode, then always return 1
if|if
condition|(
name|oneD
operator|==
literal|0
condition|)
block|{
return|return
literal|1
return|;
block|}
else|else
block|{
comment|// Otherwise for 2D encoding mode,
comment|// The next one bit signifies 1D/2D encoding of next line.
return|return
name|nextLesserThan8Bits
argument_list|(
literal|1
argument_list|)
return|;
block|}
block|}
specifier|private
name|void
name|getNextChangingElement
parameter_list|(
name|int
name|a0
parameter_list|,
name|boolean
name|isWhite
parameter_list|,
name|int
index|[]
name|ret
parameter_list|)
block|{
comment|// Local copies of instance variables
name|int
index|[]
name|pce
init|=
name|this
operator|.
name|prevChangingElems
decl_stmt|;
name|int
name|ces
init|=
name|this
operator|.
name|changingElemSize
decl_stmt|;
comment|// If the previous match was at an odd element, we still
comment|// have to search the preceeding element.
comment|// int start = lastChangingElement& ~0x1;
name|int
name|start
init|=
name|lastChangingElement
operator|>
literal|0
condition|?
name|lastChangingElement
operator|-
literal|1
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|isWhite
condition|)
block|{
name|start
operator|&=
operator|~
literal|0x1
expr_stmt|;
comment|// Search even numbered elements
block|}
else|else
block|{
name|start
operator||=
literal|0x1
expr_stmt|;
comment|// Search odd numbered elements
block|}
name|int
name|i
init|=
name|start
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|ces
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|int
name|temp
init|=
name|pce
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|temp
operator|>
name|a0
condition|)
block|{
name|lastChangingElement
operator|=
name|i
expr_stmt|;
name|ret
index|[
literal|0
index|]
operator|=
name|temp
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|i
operator|+
literal|1
operator|<
name|ces
condition|)
block|{
name|ret
index|[
literal|1
index|]
operator|=
name|pce
index|[
name|i
operator|+
literal|1
index|]
expr_stmt|;
block|}
block|}
specifier|private
name|int
name|nextNBits
parameter_list|(
name|int
name|bitsToGet
parameter_list|)
block|{
name|byte
name|b
decl_stmt|,
name|next
decl_stmt|,
name|next2next
decl_stmt|;
name|int
name|l
init|=
name|data
operator|.
name|length
operator|-
literal|1
decl_stmt|;
name|int
name|bp
init|=
name|this
operator|.
name|bytePointer
decl_stmt|;
if|if
condition|(
name|fillOrder
operator|==
literal|1
condition|)
block|{
name|b
operator|=
name|data
index|[
name|bp
index|]
expr_stmt|;
if|if
condition|(
name|bp
operator|==
name|l
condition|)
block|{
name|next
operator|=
literal|0x00
expr_stmt|;
name|next2next
operator|=
literal|0x00
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|bp
operator|+
literal|1
operator|)
operator|==
name|l
condition|)
block|{
name|next
operator|=
name|data
index|[
name|bp
operator|+
literal|1
index|]
expr_stmt|;
name|next2next
operator|=
literal|0x00
expr_stmt|;
block|}
else|else
block|{
name|next
operator|=
name|data
index|[
name|bp
operator|+
literal|1
index|]
expr_stmt|;
name|next2next
operator|=
name|data
index|[
name|bp
operator|+
literal|2
index|]
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|fillOrder
operator|==
literal|2
condition|)
block|{
name|b
operator|=
name|flipTable
index|[
name|data
index|[
name|bp
index|]
operator|&
literal|0xff
index|]
expr_stmt|;
if|if
condition|(
name|bp
operator|==
name|l
condition|)
block|{
name|next
operator|=
literal|0x00
expr_stmt|;
name|next2next
operator|=
literal|0x00
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|bp
operator|+
literal|1
operator|)
operator|==
name|l
condition|)
block|{
name|next
operator|=
name|flipTable
index|[
name|data
index|[
name|bp
operator|+
literal|1
index|]
operator|&
literal|0xff
index|]
expr_stmt|;
name|next2next
operator|=
literal|0x00
expr_stmt|;
block|}
else|else
block|{
name|next
operator|=
name|flipTable
index|[
name|data
index|[
name|bp
operator|+
literal|1
index|]
operator|&
literal|0xff
index|]
expr_stmt|;
name|next2next
operator|=
name|flipTable
index|[
name|data
index|[
name|bp
operator|+
literal|2
index|]
operator|&
literal|0xff
index|]
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"TIFF_FILL_ORDER tag must be either 1 or 2."
argument_list|)
throw|;
block|}
name|int
name|bitsLeft
init|=
literal|8
operator|-
name|bitPointer
decl_stmt|;
name|int
name|bitsFromNextByte
init|=
name|bitsToGet
operator|-
name|bitsLeft
decl_stmt|;
name|int
name|bitsFromNext2NextByte
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|bitsFromNextByte
operator|>
literal|8
condition|)
block|{
name|bitsFromNext2NextByte
operator|=
name|bitsFromNextByte
operator|-
literal|8
expr_stmt|;
name|bitsFromNextByte
operator|=
literal|8
expr_stmt|;
block|}
name|bytePointer
operator|++
expr_stmt|;
name|int
name|i1
init|=
operator|(
name|b
operator|&
name|table1
index|[
name|bitsLeft
index|]
operator|)
operator|<<
operator|(
name|bitsToGet
operator|-
name|bitsLeft
operator|)
decl_stmt|;
name|int
name|i2
init|=
operator|(
name|next
operator|&
name|table2
index|[
name|bitsFromNextByte
index|]
operator|)
operator|>>>
operator|(
literal|8
operator|-
name|bitsFromNextByte
operator|)
decl_stmt|;
name|int
name|i3
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|bitsFromNext2NextByte
operator|!=
literal|0
condition|)
block|{
name|i2
operator|<<=
name|bitsFromNext2NextByte
expr_stmt|;
name|i3
operator|=
operator|(
name|next2next
operator|&
name|table2
index|[
name|bitsFromNext2NextByte
index|]
operator|)
operator|>>>
operator|(
literal|8
operator|-
name|bitsFromNext2NextByte
operator|)
expr_stmt|;
name|i2
operator||=
name|i3
expr_stmt|;
name|bytePointer
operator|++
expr_stmt|;
name|bitPointer
operator|=
name|bitsFromNext2NextByte
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|bitsFromNextByte
operator|==
literal|8
condition|)
block|{
name|bitPointer
operator|=
literal|0
expr_stmt|;
name|bytePointer
operator|++
expr_stmt|;
block|}
else|else
block|{
name|bitPointer
operator|=
name|bitsFromNextByte
expr_stmt|;
block|}
block|}
name|int
name|i
init|=
name|i1
operator||
name|i2
decl_stmt|;
return|return
name|i
return|;
block|}
specifier|private
name|int
name|nextLesserThan8Bits
parameter_list|(
name|int
name|bitsToGet
parameter_list|)
block|{
name|byte
name|b
decl_stmt|,
name|next
decl_stmt|;
name|int
name|l
init|=
name|data
operator|.
name|length
operator|-
literal|1
decl_stmt|;
name|int
name|bp
init|=
name|this
operator|.
name|bytePointer
decl_stmt|;
if|if
condition|(
name|fillOrder
operator|==
literal|1
condition|)
block|{
name|b
operator|=
name|data
index|[
name|bp
index|]
expr_stmt|;
if|if
condition|(
name|bp
operator|==
name|l
condition|)
block|{
name|next
operator|=
literal|0x00
expr_stmt|;
block|}
else|else
block|{
name|next
operator|=
name|data
index|[
name|bp
operator|+
literal|1
index|]
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|fillOrder
operator|==
literal|2
condition|)
block|{
name|b
operator|=
name|flipTable
index|[
name|data
index|[
name|bp
index|]
operator|&
literal|0xff
index|]
expr_stmt|;
if|if
condition|(
name|bp
operator|==
name|l
condition|)
block|{
name|next
operator|=
literal|0x00
expr_stmt|;
block|}
else|else
block|{
name|next
operator|=
name|flipTable
index|[
name|data
index|[
name|bp
operator|+
literal|1
index|]
operator|&
literal|0xff
index|]
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"TIFF_FILL_ORDER tag must be either 1 or 2."
argument_list|)
throw|;
block|}
name|int
name|bitsLeft
init|=
literal|8
operator|-
name|bitPointer
decl_stmt|;
name|int
name|bitsFromNextByte
init|=
name|bitsToGet
operator|-
name|bitsLeft
decl_stmt|;
name|int
name|shift
init|=
name|bitsLeft
operator|-
name|bitsToGet
decl_stmt|;
name|int
name|i1
decl_stmt|,
name|i2
decl_stmt|;
if|if
condition|(
name|shift
operator|>=
literal|0
condition|)
block|{
name|i1
operator|=
operator|(
name|b
operator|&
name|table1
index|[
name|bitsLeft
index|]
operator|)
operator|>>>
name|shift
expr_stmt|;
name|bitPointer
operator|+=
name|bitsToGet
expr_stmt|;
if|if
condition|(
name|bitPointer
operator|==
literal|8
condition|)
block|{
name|bitPointer
operator|=
literal|0
expr_stmt|;
name|bytePointer
operator|++
expr_stmt|;
block|}
block|}
else|else
block|{
name|i1
operator|=
operator|(
name|b
operator|&
name|table1
index|[
name|bitsLeft
index|]
operator|)
operator|<<
operator|(
operator|-
name|shift
operator|)
expr_stmt|;
name|i2
operator|=
operator|(
name|next
operator|&
name|table2
index|[
name|bitsFromNextByte
index|]
operator|)
operator|>>>
operator|(
literal|8
operator|-
name|bitsFromNextByte
operator|)
expr_stmt|;
name|i1
operator||=
name|i2
expr_stmt|;
name|bytePointer
operator|++
expr_stmt|;
name|bitPointer
operator|=
name|bitsFromNextByte
expr_stmt|;
block|}
return|return
name|i1
return|;
block|}
comment|// Move pointer backwards by given amount of bits
specifier|private
name|void
name|updatePointer
parameter_list|(
name|int
name|bitsToMoveBack
parameter_list|)
block|{
name|int
name|i
init|=
name|bitPointer
operator|-
name|bitsToMoveBack
decl_stmt|;
if|if
condition|(
name|i
operator|<
literal|0
condition|)
block|{
name|bytePointer
operator|--
expr_stmt|;
name|bitPointer
operator|=
literal|8
operator|+
name|i
expr_stmt|;
block|}
else|else
block|{
name|bitPointer
operator|=
name|i
expr_stmt|;
block|}
block|}
comment|// Move to the next byte boundary
specifier|private
name|boolean
name|advancePointer
parameter_list|()
block|{
if|if
condition|(
name|bitPointer
operator|!=
literal|0
condition|)
block|{
name|bytePointer
operator|++
expr_stmt|;
name|bitPointer
operator|=
literal|0
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

