begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/* $Id$ */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|filter
operator|.
name|ccitt
package|;
end_package

begin_comment
comment|/**  * Constants for CCITT Fax Filter.  * @version $Revision$  */
end_comment

begin_class
specifier|final
class|class
name|CCITTFaxConstants
block|{
comment|/** A constant for group 3 1D encoding (ITU T.4). */
specifier|final
name|int
name|COMPRESSION_GROUP3_1D
init|=
literal|0
decl_stmt|;
comment|/** A constant for group 3 2D encoding (ITU T.4). */
specifier|final
name|int
name|COMPRESSION_GROUP3_2D
init|=
literal|1
decl_stmt|;
comment|/** A constant for group 4 2D encoding (ITU T.6). */
specifier|final
name|int
name|COMPRESSION_GROUP4_2D
init|=
literal|2
decl_stmt|;
comment|//Format: First 8 bits: length of pattern, Second 8 bits: pattern
comment|/** The white terminating code words. */
specifier|public
specifier|static
specifier|final
name|short
index|[]
name|WHITE_TERMINATING
init|=
operator|new
name|short
index|[]
block|{
literal|0x0835
block|,
literal|0x0607
block|,
literal|0x0407
block|,
literal|0x0408
block|,
literal|0x040B
block|,
literal|0x040C
block|,
literal|0x040E
block|,
literal|0x040F
block|,
literal|0x0513
block|,
literal|0x0514
block|,
literal|0x0507
block|,
literal|0x0508
block|,
literal|0x0608
block|,
literal|0x0603
block|,
literal|0x0634
block|,
literal|0x0635
block|,
literal|0x062A
block|,
literal|0x062B
block|,
literal|0x0727
block|,
literal|0x070C
block|,
literal|0x0708
block|,
literal|0x0717
block|,
literal|0x0703
block|,
literal|0x0704
block|,
literal|0x0728
block|,
literal|0x072B
block|,
literal|0x0713
block|,
literal|0x0724
block|,
literal|0x0718
block|,
literal|0x0802
block|,
literal|0x0803
block|,
literal|0x081A
block|,
literal|0x081B
block|,
literal|0x0812
block|,
literal|0x0813
block|,
literal|0x0814
block|,
literal|0x0815
block|,
literal|0x0816
block|,
literal|0x0817
block|,
literal|0x0828
block|,
literal|0x0829
block|,
literal|0x082A
block|,
literal|0x082B
block|,
literal|0x082C
block|,
literal|0x082D
block|,
literal|0x0804
block|,
literal|0x0805
block|,
literal|0x080A
block|,
literal|0x080B
block|,
literal|0x0852
block|,
literal|0x0853
block|,
literal|0x0854
block|,
literal|0x0855
block|,
literal|0x0824
block|,
literal|0x0825
block|,
literal|0x0858
block|,
literal|0x0859
block|,
literal|0x085A
block|,
literal|0x085B
block|,
literal|0x084A
block|,
literal|0x084B
block|,
literal|0x0832
block|,
literal|0x0833
block|,
literal|0x0834
block|}
decl_stmt|;
comment|/** The black terminating code words. */
specifier|public
specifier|static
specifier|final
name|short
index|[]
name|BLACK_TERMINATING
init|=
operator|new
name|short
index|[]
block|{
literal|0x0A37
block|,
literal|0x0302
block|,
literal|0x0203
block|,
literal|0x0202
block|,
literal|0x0303
block|,
literal|0x0403
block|,
literal|0x0402
block|,
literal|0x0503
block|,
literal|0x0605
block|,
literal|0x0604
block|,
literal|0x0704
block|,
literal|0x0705
block|,
literal|0x0707
block|,
literal|0x0804
block|,
literal|0x0807
block|,
literal|0x0918
block|,
literal|0x0A17
block|,
literal|0x0A18
block|,
literal|0x0A08
block|,
literal|0x0B67
block|,
literal|0x0B68
block|,
literal|0x0B6C
block|,
literal|0x0B37
block|,
literal|0x0B28
block|,
literal|0x0B17
block|,
literal|0x0B18
block|,
literal|0x0CCA
block|,
literal|0x0CCB
block|,
literal|0x0CCC
block|,
literal|0x0CCD
block|,
literal|0x0C68
block|,
literal|0x0C69
block|,
literal|0x0C6A
block|,
literal|0x0C6B
block|,
literal|0x0CD2
block|,
literal|0x0CD3
block|,
literal|0x0CD4
block|,
literal|0x0CD5
block|,
literal|0x0CD6
block|,
literal|0x0CD7
block|,
literal|0x0C6C
block|,
literal|0x0C6D
block|,
literal|0x0CDA
block|,
literal|0x0CDB
block|,
literal|0x0C54
block|,
literal|0x0C55
block|,
literal|0x0C56
block|,
literal|0x0C57
block|,
literal|0x0C64
block|,
literal|0x0C65
block|,
literal|0x0C52
block|,
literal|0x0C53
block|,
literal|0x0C24
block|,
literal|0x0C37
block|,
literal|0x0C38
block|,
literal|0x0C27
block|,
literal|0x0C28
block|,
literal|0x0C58
block|,
literal|0x0C59
block|,
literal|0x0C2B
block|,
literal|0x0C2C
block|,
literal|0x0C5A
block|,
literal|0x0C66
block|,
literal|0x0C67
block|}
decl_stmt|;
comment|/** The white make-up code words. */
specifier|public
specifier|static
specifier|final
name|short
index|[]
name|WHITE_MAKE_UP
init|=
operator|new
name|short
index|[]
block|{
literal|0x051B
block|,
literal|0x0512
block|,
literal|0x0617
block|,
literal|0x0737
block|,
literal|0x0836
block|,
literal|0x0837
block|,
literal|0x0864
block|,
literal|0x0865
block|,
literal|0x0868
block|,
literal|0x0867
block|,
literal|0x09CC
block|,
literal|0x09CD
block|,
literal|0x09D2
block|,
literal|0x09D3
block|,
literal|0x09D4
block|,
literal|0x09D5
block|,
literal|0x09D6
block|,
literal|0x09D7
block|,
literal|0x09D8
block|,
literal|0x09D9
block|,
literal|0x09DA
block|,
literal|0x09DB
block|,
literal|0x0998
block|,
literal|0x0999
block|,
literal|0x099A
block|,
literal|0x0618
block|,
literal|0x099B
block|}
decl_stmt|;
comment|/** The black make-up code words. */
specifier|public
specifier|static
specifier|final
name|short
index|[]
name|BLACK_MAKE_UP
init|=
operator|new
name|short
index|[]
block|{
literal|0x0A0F
block|,
literal|0x0CC8
block|,
literal|0x0CC9
block|,
literal|0x0C5B
block|,
literal|0x0C33
block|,
literal|0x0C34
block|,
literal|0x0C35
block|,
literal|0x0D6C
block|,
literal|0x0D6D
block|,
literal|0x0D4A
block|,
literal|0x0D4B
block|,
literal|0x0D4C
block|,
literal|0x0D4D
block|,
literal|0x0D72
block|,
literal|0x0D73
block|,
literal|0x0D74
block|,
literal|0x0D75
block|,
literal|0x0D76
block|,
literal|0x0D77
block|,
literal|0x0D52
block|,
literal|0x0D53
block|,
literal|0x0D54
block|,
literal|0x0D55
block|,
literal|0x0D5A
block|,
literal|0x0D5B
block|,
literal|0x0D64
block|,
literal|0x0D65
block|}
decl_stmt|;
comment|/** The long make-up code words. */
specifier|public
specifier|static
specifier|final
name|short
index|[]
name|LONG_MAKE_UP
init|=
operator|new
name|short
index|[]
block|{
literal|0x0B08
block|,
literal|0x0B0C
block|,
literal|0x0B0D
block|,
literal|0x0C12
block|,
literal|0x0C13
block|,
literal|0x0C14
block|,
literal|0x0C15
block|,
literal|0x0C16
block|,
literal|0x0C17
block|,
literal|0x0C1C
block|,
literal|0x0C1D
block|,
literal|0x0C1E
block|,
literal|0x0C1F
block|}
decl_stmt|;
comment|/** The EOL code word. */
specifier|public
specifier|static
specifier|final
name|short
name|EOL_CODE
init|=
literal|0x0C01
decl_stmt|;
block|}
end_class

end_unit

