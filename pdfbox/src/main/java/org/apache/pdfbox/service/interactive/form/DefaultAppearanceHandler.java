begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|service
operator|.
name|interactive
operator|.
name|form
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|contentstream
operator|.
name|operator
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSFloat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSNumber
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdfparser
operator|.
name|PDFStreamParser
import|;
end_import

begin_comment
comment|/**  * The default appearance, an inheritable attribute contained in the dictionaries  * /DA entry, contains any graphics state or text state operators needed  * to establish the graphics state parameters, such as text size  * and color, for displaying the fieldâ€™s variable text.  *<p>  * Allowed operators are all which are permitted in text objects.  * The Tf operator is required specifying the font and the font size  *</p>  *   *<p>  *<strong>Currently only the Tf operator is abstracted through this class!</strong>  *</p>  */
end_comment

begin_class
class|class
name|DefaultAppearanceHandler
block|{
comment|/**      * The tokens making up the content of the default appearance string.      */
specifier|private
name|List
argument_list|<
name|Object
argument_list|>
name|appearanceTokens
decl_stmt|;
name|DefaultAppearanceHandler
parameter_list|(
name|String
name|defaultApperanceString
parameter_list|)
throws|throws
name|IOException
block|{
name|appearanceTokens
operator|=
name|getStreamTokens
argument_list|(
name|defaultApperanceString
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the font size.      * @return resolved font size.      */
name|float
name|getFontSize
parameter_list|()
block|{
if|if
condition|(
operator|!
name|appearanceTokens
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// daString looks like "BMC /Helv 3.4 Tf EMC"
comment|// use the fontsize of the default existing apperance stream
name|int
name|fontIndex
init|=
name|appearanceTokens
operator|.
name|indexOf
argument_list|(
name|Operator
operator|.
name|getOperator
argument_list|(
literal|"Tf"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fontIndex
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
operator|(
operator|(
name|COSNumber
operator|)
name|appearanceTokens
operator|.
name|get
argument_list|(
name|fontIndex
operator|-
literal|1
argument_list|)
operator|)
operator|.
name|floatValue
argument_list|()
return|;
block|}
block|}
return|return
literal|0f
return|;
block|}
comment|/**      * Set the font size.      * @param fontSize the font size for the Tf operator      */
name|void
name|setFontSize
parameter_list|(
name|float
name|fontSize
parameter_list|)
block|{
name|int
name|fontIndex
init|=
name|appearanceTokens
operator|.
name|indexOf
argument_list|(
name|Operator
operator|.
name|getOperator
argument_list|(
literal|"Tf"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fontIndex
operator|!=
operator|-
literal|1
condition|)
block|{
name|appearanceTokens
operator|.
name|set
argument_list|(
name|fontIndex
operator|-
literal|1
argument_list|,
operator|new
name|COSFloat
argument_list|(
name|fontSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Get the font name.      * @return the resolved font name.      */
name|COSName
name|getFontName
parameter_list|()
block|{
name|int
name|setFontOperatorIndex
init|=
name|appearanceTokens
operator|.
name|indexOf
argument_list|(
name|Operator
operator|.
name|getOperator
argument_list|(
literal|"Tf"
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|(
name|COSName
operator|)
name|appearanceTokens
operator|.
name|get
argument_list|(
name|setFontOperatorIndex
operator|-
literal|2
argument_list|)
return|;
block|}
comment|/**      * Get the tokens resolved from the default appearance string.      * @return the resolved tokens      */
name|List
argument_list|<
name|Object
argument_list|>
name|getTokens
parameter_list|()
block|{
return|return
name|appearanceTokens
return|;
block|}
specifier|private
name|List
argument_list|<
name|Object
argument_list|>
name|getStreamTokens
parameter_list|(
name|String
name|defaultAppearanceString
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|tokens
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|defaultAppearanceString
operator|!=
literal|null
operator|&&
operator|!
name|defaultAppearanceString
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|PDFStreamParser
name|parser
init|=
literal|null
decl_stmt|;
name|ByteArrayInputStream
name|stream
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|defaultAppearanceString
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|parser
operator|=
operator|new
name|PDFStreamParser
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|parser
operator|.
name|parse
argument_list|()
expr_stmt|;
name|tokens
operator|=
name|parser
operator|.
name|getTokens
argument_list|()
expr_stmt|;
name|parser
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|tokens
return|;
block|}
block|}
end_class

end_unit

