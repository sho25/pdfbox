begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDRectangle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDType3Font
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|text
operator|.
name|TextPosition
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|Point2D
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/**  * PDFStreamEngine subclass for advanced processing of text via TextPosition.  *  * @see org.apache.pdfbox.text.TextPosition  * @author Ben Litchfield  * @author John Hewson  */
end_comment

begin_class
specifier|public
class|class
name|PDFTextStreamEngine
extends|extends
name|PDFStreamEngine
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|PDFStreamEngine
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|int
name|pageRotation
decl_stmt|;
specifier|private
name|PDRectangle
name|pageSize
decl_stmt|;
specifier|private
name|PDFTextStreamEngine
parameter_list|()
block|{     }
comment|/**      * Constructor with engine properties. The property keys are all PDF operators, the values are      * class names used to execute those operators. An empty value means that the operator will be      * silently ignored.      *      * @param properties The engine properties.      */
specifier|public
name|PDFTextStreamEngine
parameter_list|(
name|Properties
name|properties
parameter_list|)
block|{
name|super
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will initialise and process the contents of the stream.      *      * @param resources The location to retrieve resources.      * @param cosStream the Stream to execute.      * @param pageSize the size of the page      * @param rotation the page rotation      * @throws java.io.IOException if there is an error accessing the stream.      */
specifier|public
name|void
name|processStream
parameter_list|(
name|PDResources
name|resources
parameter_list|,
name|COSStream
name|cosStream
parameter_list|,
name|PDRectangle
name|pageSize
parameter_list|,
name|int
name|rotation
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|pageRotation
operator|=
name|rotation
expr_stmt|;
name|this
operator|.
name|pageSize
operator|=
name|pageSize
expr_stmt|;
name|super
operator|.
name|processStream
argument_list|(
name|resources
argument_list|,
name|cosStream
argument_list|,
name|pageSize
argument_list|)
expr_stmt|;
block|}
comment|/**      * This method was originally written by Ben Litchfield for PDFStreamEngine.      */
annotation|@
name|Override
specifier|protected
specifier|final
name|void
name|processGlyph
parameter_list|(
name|Matrix
name|textMatrix
parameter_list|,
name|Point2D
operator|.
name|Float
name|end
parameter_list|,
name|float
name|maxHeight
parameter_list|,
name|float
name|widthText
parameter_list|,
name|String
name|unicode
parameter_list|,
name|int
index|[]
name|charCodes
parameter_list|,
name|PDFont
name|font
parameter_list|,
name|float
name|fontSize
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Note on variable names. There are three different units being used in this code.
comment|// Character sizes are given in glyph units, text locations are initially given in text
comment|// units, and we want to save the data in display units. The variable names should end with
comment|// Text or Disp to represent if the values are in text or disp units (no glyph units are
comment|// saved).
name|float
name|fontSizeText
init|=
name|getGraphicsState
argument_list|()
operator|.
name|getTextState
argument_list|()
operator|.
name|getFontSize
argument_list|()
decl_stmt|;
name|float
name|horizontalScalingText
init|=
name|getGraphicsState
argument_list|()
operator|.
name|getTextState
argument_list|()
operator|.
name|getHorizontalScaling
argument_list|()
operator|/
literal|100f
decl_stmt|;
name|Matrix
name|ctm
init|=
name|getGraphicsState
argument_list|()
operator|.
name|getCurrentTransformationMatrix
argument_list|()
decl_stmt|;
name|float
name|glyphSpaceToTextSpaceFactor
init|=
literal|1
operator|/
literal|1000f
decl_stmt|;
if|if
condition|(
name|font
operator|instanceof
name|PDType3Font
condition|)
block|{
comment|// This will typically be 1000 but in the case of a type3 font
comment|// this might be a different number
name|glyphSpaceToTextSpaceFactor
operator|=
literal|1f
operator|/
name|font
operator|.
name|getFontMatrix
argument_list|()
operator|.
name|getValue
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|float
name|spaceWidthText
init|=
literal|0
decl_stmt|;
try|try
block|{
comment|// to avoid crash as described in PDFBOX-614, see what the space displacement should be
name|spaceWidthText
operator|=
name|font
operator|.
name|getSpaceWidth
argument_list|()
operator|*
name|glyphSpaceToTextSpaceFactor
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|exception
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|exception
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|spaceWidthText
operator|==
literal|0
condition|)
block|{
name|spaceWidthText
operator|=
name|font
operator|.
name|getAverageFontWidth
argument_list|()
operator|*
name|glyphSpaceToTextSpaceFactor
expr_stmt|;
comment|// the average space width appears to be higher than necessary so make it smaller
name|spaceWidthText
operator|*=
literal|.80f
expr_stmt|;
block|}
if|if
condition|(
name|spaceWidthText
operator|==
literal|0
condition|)
block|{
name|spaceWidthText
operator|=
literal|1.0f
expr_stmt|;
comment|// if could not find font, use a generic value
block|}
comment|// the space width has to be transformed into display units
name|float
name|spaceWidthDisp
init|=
name|spaceWidthText
operator|*
name|fontSizeText
operator|*
name|horizontalScalingText
operator|*
name|textMatrix
operator|.
name|getXScale
argument_list|()
operator|*
name|ctm
operator|.
name|getXScale
argument_list|()
decl_stmt|;
comment|// PDFBOX-373: Replace a null entry with "?" so it is not printed as "(null)"
if|if
condition|(
name|unicode
operator|==
literal|null
condition|)
block|{
name|unicode
operator|=
literal|"?"
expr_stmt|;
block|}
name|processTextPosition
argument_list|(
operator|new
name|TextPosition
argument_list|(
name|pageRotation
argument_list|,
name|pageSize
operator|.
name|getWidth
argument_list|()
argument_list|,
name|pageSize
operator|.
name|getHeight
argument_list|()
argument_list|,
name|textMatrix
argument_list|,
name|end
operator|.
name|x
argument_list|,
name|end
operator|.
name|y
argument_list|,
name|maxHeight
argument_list|,
name|widthText
argument_list|,
name|spaceWidthDisp
argument_list|,
name|unicode
argument_list|,
name|charCodes
argument_list|,
name|font
argument_list|,
name|fontSize
argument_list|,
call|(
name|int
call|)
argument_list|(
name|fontSize
operator|*
name|textMatrix
operator|.
name|getXScale
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * A method provided as an event interface to allow a subclass to perform some specific      * functionality when text needs to be processed.      *      * @param text The text to be processed.      */
specifier|protected
name|void
name|processTextPosition
parameter_list|(
name|TextPosition
name|text
parameter_list|)
block|{
comment|// subclasses can override to provide specific functionality
block|}
block|}
end_class

end_unit

