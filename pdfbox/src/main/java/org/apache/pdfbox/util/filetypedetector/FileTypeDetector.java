begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|filetypedetector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|Charsets
import|;
end_import

begin_comment
comment|/**  * @author Drew Noakes  *  * code taken from https://github.com/drewnoakes/metadata-extractor  *  * 2016-01-04  *  * latest commit number 73f1a48  *  * Examines the a file's first bytes and estimates the file's type.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|FileTypeDetector
block|{
specifier|private
specifier|static
specifier|final
name|ByteTrie
argument_list|<
name|FileType
argument_list|>
name|root
decl_stmt|;
static|static
block|{
name|root
operator|=
operator|new
name|ByteTrie
argument_list|<>
argument_list|()
expr_stmt|;
name|root
operator|.
name|setDefaultValue
argument_list|(
name|FileType
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
comment|// https://en.wikipedia.org/wiki/List_of_file_signatures
name|root
operator|.
name|addPath
argument_list|(
name|FileType
operator|.
name|JPEG
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0xff
block|,
operator|(
name|byte
operator|)
literal|0xd8
block|}
argument_list|)
expr_stmt|;
name|root
operator|.
name|addPath
argument_list|(
name|FileType
operator|.
name|TIFF
argument_list|,
literal|"II"
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|ISO_8859_1
argument_list|)
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0x2a
block|,
literal|0x00
block|}
argument_list|)
expr_stmt|;
name|root
operator|.
name|addPath
argument_list|(
name|FileType
operator|.
name|TIFF
argument_list|,
literal|"MM"
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|ISO_8859_1
argument_list|)
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0x00
block|,
literal|0x2a
block|}
argument_list|)
expr_stmt|;
name|root
operator|.
name|addPath
argument_list|(
name|FileType
operator|.
name|PSD
argument_list|,
literal|"8BPS"
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|ISO_8859_1
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|addPath
argument_list|(
name|FileType
operator|.
name|PNG
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0x89
block|,
literal|0x50
block|,
literal|0x4E
block|,
literal|0x47
block|,
literal|0x0D
block|,
literal|0x0A
block|,
literal|0x1A
block|,
literal|0x0A
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x0D
block|,
literal|0x49
block|,
literal|0x48
block|,
literal|0x44
block|,
literal|0x52
block|}
argument_list|)
expr_stmt|;
comment|// TODO technically there are other very rare magic numbers for OS/2 BMP files...
name|root
operator|.
name|addPath
argument_list|(
name|FileType
operator|.
name|BMP
argument_list|,
literal|"BM"
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|ISO_8859_1
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|addPath
argument_list|(
name|FileType
operator|.
name|GIF
argument_list|,
literal|"GIF87a"
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|ISO_8859_1
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|addPath
argument_list|(
name|FileType
operator|.
name|GIF
argument_list|,
literal|"GIF89a"
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|ISO_8859_1
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|addPath
argument_list|(
name|FileType
operator|.
name|ICO
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x01
block|,
literal|0x00
block|}
argument_list|)
expr_stmt|;
comment|// multiple PCX versions, explicitly listed
name|root
operator|.
name|addPath
argument_list|(
name|FileType
operator|.
name|PCX
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0x0A
block|,
literal|0x00
block|,
literal|0x01
block|}
argument_list|)
expr_stmt|;
name|root
operator|.
name|addPath
argument_list|(
name|FileType
operator|.
name|PCX
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0x0A
block|,
literal|0x02
block|,
literal|0x01
block|}
argument_list|)
expr_stmt|;
name|root
operator|.
name|addPath
argument_list|(
name|FileType
operator|.
name|PCX
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0x0A
block|,
literal|0x03
block|,
literal|0x01
block|}
argument_list|)
expr_stmt|;
name|root
operator|.
name|addPath
argument_list|(
name|FileType
operator|.
name|PCX
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0x0A
block|,
literal|0x05
block|,
literal|0x01
block|}
argument_list|)
expr_stmt|;
name|root
operator|.
name|addPath
argument_list|(
name|FileType
operator|.
name|RIFF
argument_list|,
literal|"RIFF"
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|ISO_8859_1
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|addPath
argument_list|(
name|FileType
operator|.
name|ARW
argument_list|,
literal|"II"
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|ISO_8859_1
argument_list|)
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0x2a
block|,
literal|0x00
block|,
literal|0x08
block|,
literal|0x00
block|}
argument_list|)
expr_stmt|;
name|root
operator|.
name|addPath
argument_list|(
name|FileType
operator|.
name|CRW
argument_list|,
literal|"II"
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|ISO_8859_1
argument_list|)
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0x1a
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
argument_list|,
literal|"HEAPCCDR"
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|ISO_8859_1
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|addPath
argument_list|(
name|FileType
operator|.
name|CR2
argument_list|,
literal|"II"
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|ISO_8859_1
argument_list|)
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0x2a
block|,
literal|0x00
block|,
literal|0x10
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x43
block|,
literal|0x52
block|}
argument_list|)
expr_stmt|;
name|root
operator|.
name|addPath
argument_list|(
name|FileType
operator|.
name|NEF
argument_list|,
literal|"MM"
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|ISO_8859_1
argument_list|)
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0x00
block|,
literal|0x2a
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
operator|(
name|byte
operator|)
literal|0x80
block|,
literal|0x00
block|}
argument_list|)
expr_stmt|;
name|root
operator|.
name|addPath
argument_list|(
name|FileType
operator|.
name|ORF
argument_list|,
literal|"IIRO"
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|ISO_8859_1
argument_list|)
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0x08
block|,
literal|0x00
block|}
argument_list|)
expr_stmt|;
name|root
operator|.
name|addPath
argument_list|(
name|FileType
operator|.
name|ORF
argument_list|,
literal|"IIRS"
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|ISO_8859_1
argument_list|)
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0x08
block|,
literal|0x00
block|}
argument_list|)
expr_stmt|;
name|root
operator|.
name|addPath
argument_list|(
name|FileType
operator|.
name|RAF
argument_list|,
literal|"FUJIFILMCCD-RAW"
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|ISO_8859_1
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|addPath
argument_list|(
name|FileType
operator|.
name|RW2
argument_list|,
literal|"II"
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|ISO_8859_1
argument_list|)
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0x55
block|,
literal|0x00
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|FileTypeDetector
parameter_list|()
throws|throws
name|Exception
block|{     }
comment|/**      * Examines the a file's first bytes and estimates the file's type.      *<p>      * Requires a {@link BufferedInputStream} in order to mark and reset the stream to the position      * at which it was provided to this method once completed.      *<p>      * Requires the stream to contain at least eight bytes.      *      * @param inputStream a buffered input stream of the file to examine.      * @return the file type.      * @throws IOException if an IO error occurred or the input stream ended unexpectedly.      */
specifier|public
specifier|static
name|FileType
name|detectFileType
parameter_list|(
specifier|final
name|BufferedInputStream
name|inputStream
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|inputStream
operator|.
name|markSupported
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Stream must support mark/reset"
argument_list|)
throw|;
block|}
name|int
name|maxByteCount
init|=
name|root
operator|.
name|getMaxDepth
argument_list|()
decl_stmt|;
name|inputStream
operator|.
name|mark
argument_list|(
name|maxByteCount
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|maxByteCount
index|]
decl_stmt|;
name|int
name|bytesRead
init|=
name|inputStream
operator|.
name|read
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytesRead
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Stream ended before file's magic number could be determined."
argument_list|)
throw|;
block|}
name|inputStream
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|//noinspection ConstantConditions
return|return
name|root
operator|.
name|find
argument_list|(
name|bytes
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|FileType
name|detectFileType
parameter_list|(
specifier|final
name|byte
index|[]
name|fileBytes
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|root
operator|.
name|find
argument_list|(
name|fileBytes
argument_list|)
return|;
block|}
block|}
end_class

end_unit

