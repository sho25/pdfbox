begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_comment
comment|/**  * Utility functions for hex encoding.  *  * @author John Hewson  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|Hex
block|{
comment|/**      * for hex conversion.      *       * https://stackoverflow.com/questions/2817752/java-code-to-convert-byte-to-hexadecimal      *      */
specifier|private
specifier|static
specifier|final
name|String
name|HEXES_STRING
init|=
literal|"0123456789ABCDEF"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|HEXES
init|=
name|HEXES_STRING
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|US_ASCII
argument_list|)
decl_stmt|;
specifier|private
name|Hex
parameter_list|()
block|{}
comment|/**      * Returns a hex string of the given byte.      */
specifier|public
specifier|static
name|String
name|getString
parameter_list|(
name|byte
name|b
parameter_list|)
block|{
name|char
index|[]
name|chars
init|=
operator|new
name|char
index|[]
block|{
name|HEXES_STRING
operator|.
name|charAt
argument_list|(
name|getHighNibble
argument_list|(
name|b
argument_list|)
argument_list|)
block|,
name|HEXES_STRING
operator|.
name|charAt
argument_list|(
name|getLowNibble
argument_list|(
name|b
argument_list|)
argument_list|)
block|}
decl_stmt|;
return|return
operator|new
name|String
argument_list|(
name|chars
argument_list|)
return|;
block|}
comment|/**      * Returns a hex string of the given byte array.      */
specifier|public
specifier|static
name|String
name|getString
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
name|StringBuilder
name|string
init|=
operator|new
name|StringBuilder
argument_list|(
name|bytes
operator|.
name|length
operator|*
literal|2
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
name|b
range|:
name|bytes
control|)
block|{
name|string
operator|.
name|append
argument_list|(
name|HEXES_STRING
operator|.
name|charAt
argument_list|(
name|getHighNibble
argument_list|(
name|b
argument_list|)
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|HEXES_STRING
operator|.
name|charAt
argument_list|(
name|getLowNibble
argument_list|(
name|b
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|string
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Returns the bytes corresponding to the ASCII hex encoding of the given byte.      */
specifier|public
specifier|static
name|byte
index|[]
name|getBytes
parameter_list|(
name|byte
name|b
parameter_list|)
block|{
return|return
operator|new
name|byte
index|[]
block|{
name|HEXES
index|[
name|getHighNibble
argument_list|(
name|b
argument_list|)
index|]
block|,
name|HEXES
index|[
name|getLowNibble
argument_list|(
name|b
argument_list|)
index|]
block|}
return|;
block|}
comment|/**      * Returns the bytes corresponding to the ASCII hex encoding of the given bytes.      */
specifier|public
specifier|static
name|byte
index|[]
name|getBytes
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
name|byte
index|[]
name|asciiBytes
init|=
operator|new
name|byte
index|[
name|bytes
operator|.
name|length
operator|*
literal|2
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bytes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|asciiBytes
index|[
name|i
operator|*
literal|2
index|]
operator|=
name|HEXES
index|[
name|getHighNibble
argument_list|(
name|bytes
index|[
name|i
index|]
argument_list|)
index|]
expr_stmt|;
name|asciiBytes
index|[
name|i
operator|*
literal|2
operator|+
literal|1
index|]
operator|=
name|HEXES
index|[
name|getLowNibble
argument_list|(
name|bytes
index|[
name|i
index|]
argument_list|)
index|]
expr_stmt|;
block|}
return|return
name|asciiBytes
return|;
block|}
comment|/**       * Writes the given byte as hex value to the given output stream.      * @param b the byte to be written      * @param output the output stream to be written to      * @throws IOException exception if anything went wrong      */
specifier|public
specifier|static
name|void
name|writeHexByte
parameter_list|(
name|byte
name|b
parameter_list|,
name|OutputStream
name|output
parameter_list|)
throws|throws
name|IOException
block|{
name|output
operator|.
name|write
argument_list|(
name|HEXES
index|[
name|getHighNibble
argument_list|(
name|b
argument_list|)
index|]
argument_list|)
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
name|HEXES
index|[
name|getLowNibble
argument_list|(
name|b
argument_list|)
index|]
argument_list|)
expr_stmt|;
block|}
comment|/**       * Writes the given byte array as hex value to the given output stream.      * @param b the byte array to be written      * @param output the output stream to be written to      * @throws IOException exception if anything went wrong      */
specifier|public
specifier|static
name|void
name|writeHexBytes
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|OutputStream
name|output
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|byte
name|b
range|:
name|bytes
control|)
block|{
name|writeHexByte
argument_list|(
name|b
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Get the high nibble of the given byte.      *       * @param b the given byte      * @return the high nibble      */
specifier|private
specifier|static
name|int
name|getHighNibble
parameter_list|(
name|byte
name|b
parameter_list|)
block|{
return|return
operator|(
name|b
operator|&
literal|0xF0
operator|)
operator|>>
literal|4
return|;
block|}
comment|/**      * Get the low nibble of the given byte.      *       * @param b the given byte      * @return the low nibble      */
specifier|private
specifier|static
name|int
name|getLowNibble
parameter_list|(
name|byte
name|b
parameter_list|)
block|{
return|return
name|b
operator|&
literal|0x0F
return|;
block|}
block|}
end_class

end_unit

