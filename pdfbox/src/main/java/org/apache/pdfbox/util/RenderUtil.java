begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Graphics2D
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|BufferedImage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|print
operator|.
name|PrinterException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|print
operator|.
name|PrinterJob
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdfviewer
operator|.
name|PageDrawer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPageable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDRectangle
import|;
end_import

begin_comment
comment|/**  * RenderUtil provides some convenience methods to print or draw a single page of a document.  *   */
end_comment

begin_class
specifier|public
class|class
name|RenderUtil
block|{
comment|/**      * Fully transparent that can fall back to white when image type has no alpha.      */
specifier|private
specifier|static
specifier|final
name|Color
name|TRANSPARENT_WHITE
init|=
operator|new
name|Color
argument_list|(
literal|255
argument_list|,
literal|255
argument_list|,
literal|255
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|private
name|RenderUtil
parameter_list|()
block|{
comment|// Utility class. Don't instantiate.
block|}
specifier|private
specifier|static
name|void
name|print
parameter_list|(
name|PDDocument
name|document
parameter_list|,
name|PrinterJob
name|job
parameter_list|,
name|boolean
name|silent
parameter_list|)
throws|throws
name|PrinterException
block|{
if|if
condition|(
name|job
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|PrinterException
argument_list|(
literal|"The given printer job is null."
argument_list|)
throw|;
block|}
else|else
block|{
name|job
operator|.
name|setPageable
argument_list|(
operator|new
name|PDPageable
argument_list|(
name|document
argument_list|,
name|job
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|silent
operator|||
name|job
operator|.
name|printDialog
argument_list|()
condition|)
block|{
name|job
operator|.
name|print
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * This will send the PDF to the default printer without prompting the user for any printer settings.      *       * @param document the document to be printed      * @param printJob A printer job definition.      * @see RenderUtil#print(PDDocument)      *       * @throws PrinterException If there is an error while printing.      */
specifier|public
specifier|static
name|void
name|silentPrint
parameter_list|(
name|PDDocument
name|document
parameter_list|,
name|PrinterJob
name|printJob
parameter_list|)
throws|throws
name|PrinterException
block|{
name|print
argument_list|(
name|document
argument_list|,
name|printJob
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see RenderUtil#print(PDDocument)      *       * @param document the document to be printed      * @param printJob The printer job.      *       * @throws PrinterException If there is an error while sending the PDF to the printer, or you do not have      *             permissions to print this document.      */
specifier|public
specifier|static
name|void
name|print
parameter_list|(
name|PDDocument
name|document
parameter_list|,
name|PrinterJob
name|printJob
parameter_list|)
throws|throws
name|PrinterException
block|{
name|print
argument_list|(
name|document
argument_list|,
name|printJob
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will send the PDF document to a printer. The printing functionality depends on the      * org.apache.pdfbox.pdfviewer.PageDrawer functionality. The PageDrawer is a work in progress and some PDFs will      * print correctly and some will not. This is a convenience method to create the java.awt.print.PrinterJob. The      * PDPageable implements the java.awt.print.Pageable interface and the java.awt.print.Printable interface, so      * advanced printing capabilities can be done by using those interfaces instead of this method.      *       * @param document the document to be printed      * @throws PrinterException If there is an error while sending the PDF to the printer, or you do not have      *             permissions to print the document.      */
specifier|public
specifier|static
name|void
name|print
parameter_list|(
name|PDDocument
name|document
parameter_list|)
throws|throws
name|PrinterException
block|{
name|print
argument_list|(
name|document
argument_list|,
name|PrinterJob
operator|.
name|getPrinterJob
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will send the given PDF to the default printer without prompting the user for any printer settings.      *       * @param document the document to be printed      * @see RenderUtil#print(PDDocument)      *       * @throws PrinterException If there is an error while printing.      */
specifier|public
specifier|static
name|void
name|silentPrint
parameter_list|(
name|PDDocument
name|document
parameter_list|)
throws|throws
name|PrinterException
block|{
name|silentPrint
argument_list|(
name|document
argument_list|,
name|PrinterJob
operator|.
name|getPrinterJob
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Convert the given page to an output image with 8 bits per pixel and the double default screen resolution.      *       * @param page the page to be converted.      * @return A graphical representation of this page.      *       * @throws IOException If there is an error drawing to the image.      */
specifier|public
specifier|static
name|BufferedImage
name|convertToImage
parameter_list|(
name|PDPage
name|page
parameter_list|)
throws|throws
name|IOException
block|{
comment|// note we are doing twice as many pixels because
comment|// the default size is not really good resolution,
comment|// so create an image that is twice the size
comment|// and let the client scale it down.
return|return
name|convertToImage
argument_list|(
name|page
argument_list|,
name|BufferedImage
operator|.
name|TYPE_INT_RGB
argument_list|,
literal|2
operator|*
name|PDPage
operator|.
name|DEFAULT_USER_SPACE_UNIT_DPI
argument_list|)
return|;
block|}
comment|/**      * Convert the given page to an output image.      *       * @param page the page to be converted.      * @param imageType the image type (see {@link BufferedImage}.TYPE_*)      * @param resolution the resolution in dpi (dots per inch)      * @return A graphical representation of this page.      *       * @throws IOException If there is an error drawing to the image.      */
specifier|public
specifier|static
name|BufferedImage
name|convertToImage
parameter_list|(
name|PDPage
name|page
parameter_list|,
name|int
name|imageType
parameter_list|,
name|int
name|resolution
parameter_list|)
throws|throws
name|IOException
block|{
name|PDRectangle
name|cropBox
init|=
name|page
operator|.
name|findCropBox
argument_list|()
decl_stmt|;
name|float
name|widthPt
init|=
name|cropBox
operator|.
name|getWidth
argument_list|()
decl_stmt|;
name|float
name|heightPt
init|=
name|cropBox
operator|.
name|getHeight
argument_list|()
decl_stmt|;
name|float
name|scale
init|=
name|resolution
operator|/
operator|(
name|float
operator|)
name|PDPage
operator|.
name|DEFAULT_USER_SPACE_UNIT_DPI
decl_stmt|;
name|int
name|widthPx
init|=
name|Math
operator|.
name|round
argument_list|(
name|widthPt
operator|*
name|scale
argument_list|)
decl_stmt|;
name|int
name|heightPx
init|=
name|Math
operator|.
name|round
argument_list|(
name|heightPt
operator|*
name|scale
argument_list|)
decl_stmt|;
name|int
name|rotationAngle
init|=
name|page
operator|.
name|findRotation
argument_list|()
decl_stmt|;
comment|// normalize the rotation angle
if|if
condition|(
name|rotationAngle
operator|<
literal|0
condition|)
block|{
name|rotationAngle
operator|+=
literal|360
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rotationAngle
operator|>=
literal|360
condition|)
block|{
name|rotationAngle
operator|-=
literal|360
expr_stmt|;
block|}
comment|// swap width and height
name|BufferedImage
name|image
decl_stmt|;
if|if
condition|(
name|rotationAngle
operator|==
literal|90
operator|||
name|rotationAngle
operator|==
literal|270
condition|)
block|{
name|image
operator|=
operator|new
name|BufferedImage
argument_list|(
name|heightPx
argument_list|,
name|widthPx
argument_list|,
name|imageType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|image
operator|=
operator|new
name|BufferedImage
argument_list|(
name|widthPx
argument_list|,
name|heightPx
argument_list|,
name|imageType
argument_list|)
expr_stmt|;
block|}
comment|// use a transparent background if the imageType supports alpha
name|Graphics2D
name|g
init|=
name|image
operator|.
name|createGraphics
argument_list|()
decl_stmt|;
if|if
condition|(
name|image
operator|.
name|getColorModel
argument_list|()
operator|.
name|hasAlpha
argument_list|()
condition|)
block|{
name|g
operator|.
name|setBackground
argument_list|(
name|TRANSPARENT_WHITE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|g
operator|.
name|setBackground
argument_list|(
name|Color
operator|.
name|WHITE
argument_list|)
expr_stmt|;
block|}
name|renderPage
argument_list|(
name|page
argument_list|,
name|g
argument_list|,
name|image
operator|.
name|getWidth
argument_list|()
argument_list|,
name|image
operator|.
name|getHeight
argument_list|()
argument_list|,
name|scale
argument_list|,
name|scale
argument_list|)
expr_stmt|;
name|g
operator|.
name|dispose
argument_list|()
expr_stmt|;
return|return
name|image
return|;
block|}
specifier|private
specifier|static
name|void
name|renderPage
parameter_list|(
name|PDPage
name|page
parameter_list|,
name|Graphics2D
name|graphics
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
name|float
name|scaleX
parameter_list|,
name|float
name|scaleY
parameter_list|)
throws|throws
name|IOException
block|{
name|graphics
operator|.
name|clearRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|int
name|rotationAngle
init|=
name|page
operator|.
name|findRotation
argument_list|()
decl_stmt|;
if|if
condition|(
name|rotationAngle
operator|!=
literal|0
condition|)
block|{
name|int
name|translateX
init|=
literal|0
decl_stmt|;
name|int
name|translateY
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|rotationAngle
condition|)
block|{
case|case
literal|90
case|:
name|translateX
operator|=
name|width
expr_stmt|;
break|break;
case|case
literal|270
case|:
name|translateY
operator|=
name|height
expr_stmt|;
break|break;
case|case
literal|180
case|:
name|translateX
operator|=
name|width
expr_stmt|;
name|translateY
operator|=
name|height
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|graphics
operator|.
name|translate
argument_list|(
name|translateX
argument_list|,
name|translateY
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|rotate
argument_list|(
operator|(
name|float
operator|)
name|Math
operator|.
name|toRadians
argument_list|(
name|rotationAngle
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|graphics
operator|.
name|scale
argument_list|(
name|scaleX
argument_list|,
name|scaleY
argument_list|)
expr_stmt|;
name|PageDrawer
name|drawer
init|=
operator|new
name|PageDrawer
argument_list|()
decl_stmt|;
name|drawer
operator|.
name|drawPage
argument_list|(
name|graphics
argument_list|,
name|page
argument_list|,
name|page
operator|.
name|findCropBox
argument_list|()
argument_list|)
expr_stmt|;
name|drawer
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

