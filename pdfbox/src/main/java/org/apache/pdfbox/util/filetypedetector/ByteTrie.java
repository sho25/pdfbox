begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|filetypedetector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * @author Drew Noakes  *  * code taken from https://github.com/drewnoakes/metadata-extractor  *  * 2016-01-04  *  * latest commit number 73f1a48  *  * Stores values using a prefix tree (aka 'trie', i.e. reTRIEval data structure).  *  * @param<T> the type of value to store for byte sequences  */
end_comment

begin_class
class|class
name|ByteTrie
parameter_list|<
name|T
parameter_list|>
block|{
comment|/**      * A node in the trie. Has children and may have an associated value.      */
specifier|static
class|class
name|ByteTrieNode
parameter_list|<
name|T
parameter_list|>
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|Byte
argument_list|,
name|ByteTrieNode
argument_list|<
name|T
argument_list|>
argument_list|>
name|children
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|T
name|value
init|=
literal|null
decl_stmt|;
specifier|public
name|void
name|setValue
parameter_list|(
name|T
name|value
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|value
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Value already set for this trie node"
argument_list|)
throw|;
block|}
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|T
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
specifier|private
specifier|final
name|ByteTrieNode
argument_list|<
name|T
argument_list|>
name|root
init|=
operator|new
name|ByteTrieNode
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|int
name|maxDepth
decl_stmt|;
comment|/**      * Return the most specific value stored for this byte sequence. If not found, returns      *<code>null</code> or a default values as specified by calling      * {@link ByteTrie#setDefaultValue}.      * @param bytes      * @return       */
specifier|public
name|T
name|find
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
name|ByteTrieNode
argument_list|<
name|T
argument_list|>
name|node
init|=
name|root
decl_stmt|;
name|T
name|val
init|=
name|node
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|byte
name|b
range|:
name|bytes
control|)
block|{
name|ByteTrieNode
argument_list|<
name|T
argument_list|>
name|child
init|=
name|node
operator|.
name|children
operator|.
name|get
argument_list|(
name|b
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|node
operator|=
name|child
expr_stmt|;
if|if
condition|(
name|node
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|val
operator|=
name|node
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|val
return|;
block|}
comment|/**      * Store the given value at the specified path.      * @param value      * @param parts      */
specifier|public
name|void
name|addPath
parameter_list|(
name|T
name|value
parameter_list|,
name|byte
index|[]
modifier|...
name|parts
parameter_list|)
block|{
name|int
name|depth
init|=
literal|0
decl_stmt|;
name|ByteTrieNode
argument_list|<
name|T
argument_list|>
name|node
init|=
name|root
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|part
range|:
name|parts
control|)
block|{
for|for
control|(
name|byte
name|b
range|:
name|part
control|)
block|{
name|ByteTrieNode
argument_list|<
name|T
argument_list|>
name|child
init|=
name|node
operator|.
name|children
operator|.
name|get
argument_list|(
name|b
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|==
literal|null
condition|)
block|{
name|child
operator|=
operator|new
name|ByteTrieNode
argument_list|<>
argument_list|()
expr_stmt|;
name|node
operator|.
name|children
operator|.
name|put
argument_list|(
name|b
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
name|node
operator|=
name|child
expr_stmt|;
name|depth
operator|++
expr_stmt|;
block|}
block|}
name|node
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|maxDepth
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxDepth
argument_list|,
name|depth
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the default value to use in {@link ByteTrie#find(byte[])} when no path matches.      * @param defaultValue      */
specifier|public
name|void
name|setDefaultValue
parameter_list|(
name|T
name|defaultValue
parameter_list|)
block|{
name|root
operator|.
name|setValue
argument_list|(
name|defaultValue
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the maximum depth stored in this trie.      * @return       */
specifier|public
name|int
name|getMaxDepth
parameter_list|()
block|{
return|return
name|maxDepth
return|;
block|}
block|}
end_class

end_unit

