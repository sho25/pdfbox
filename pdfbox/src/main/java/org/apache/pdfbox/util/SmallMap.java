begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Map implementation with a smallest possible memory usage.  * It should only be used for maps with small number of items  * (e.g.&lt;30) since most operations have an O(n) complexity.  * Thus it should be used in cases with large number of map  * objects, each having only few items.  *   *<p><code>null</code> is not supported for keys or values.</p>  */
end_comment

begin_class
specifier|public
class|class
name|SmallMap
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
comment|/**      * stores key-value pair as 2 objects; key first; in case of empty map this might be<code>null</code>      */
specifier|private
name|Object
index|[]
name|mapArr
decl_stmt|;
comment|/** Creates empty map. */
specifier|public
name|SmallMap
parameter_list|()
block|{     }
comment|/** Creates map filled with entries from provided map. */
specifier|public
name|SmallMap
parameter_list|(
name|Map
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|initMap
parameter_list|)
block|{
name|putAll
argument_list|(
name|initMap
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns index of key within map-array or<code>-1</code>      * if key is not found (or key is<code>null</code>).      */
specifier|private
name|int
name|findKey
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
if|if
condition|(
name|isEmpty
argument_list|()
operator|||
operator|(
name|key
operator|==
literal|null
operator|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
for|for
control|(
name|int
name|aIdx
init|=
literal|0
init|;
name|aIdx
operator|<
name|mapArr
operator|.
name|length
condition|;
name|aIdx
operator|+=
literal|2
control|)
block|{
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|mapArr
index|[
name|aIdx
index|]
argument_list|)
condition|)
block|{
return|return
name|aIdx
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**      * Returns index of value within map-array or<code>-1</code>      * if value is not found (or value is<code>null</code>).      */
specifier|private
name|int
name|findValue
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|isEmpty
argument_list|()
operator|||
operator|(
name|value
operator|==
literal|null
operator|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
for|for
control|(
name|int
name|aIdx
init|=
literal|1
init|;
name|aIdx
operator|<
name|mapArr
operator|.
name|length
condition|;
name|aIdx
operator|+=
literal|2
control|)
block|{
if|if
condition|(
name|value
operator|.
name|equals
argument_list|(
name|mapArr
index|[
name|aIdx
index|]
argument_list|)
condition|)
block|{
return|return
name|aIdx
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|mapArr
operator|==
literal|null
condition|?
literal|0
else|:
name|mapArr
operator|.
name|length
operator|>>
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
operator|(
name|mapArr
operator|==
literal|null
operator|)
operator|||
operator|(
name|mapArr
operator|.
name|length
operator|==
literal|0
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|containsKey
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|findKey
argument_list|(
name|key
argument_list|)
operator|>=
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|containsValue
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
name|findValue
argument_list|(
name|value
argument_list|)
operator|>=
literal|0
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|V
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|int
name|kIdx
init|=
name|findKey
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|kIdx
operator|<
literal|0
condition|?
literal|null
else|:
operator|(
name|V
operator|)
name|mapArr
index|[
name|kIdx
operator|+
literal|1
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|put
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
if|if
condition|(
operator|(
name|key
operator|==
literal|null
operator|)
operator|||
operator|(
name|value
operator|==
literal|null
operator|)
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Key or value must not be null."
argument_list|)
throw|;
block|}
if|if
condition|(
name|mapArr
operator|==
literal|null
condition|)
block|{
name|mapArr
operator|=
operator|new
name|Object
index|[]
block|{
name|key
block|,
name|value
block|}
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
name|int
name|kIdx
init|=
name|findKey
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|kIdx
operator|<
literal|0
condition|)
block|{
comment|// key unknown
name|int
name|oldLen
init|=
name|mapArr
operator|.
name|length
decl_stmt|;
name|Object
index|[]
name|newMapArr
init|=
operator|new
name|Object
index|[
name|oldLen
operator|+
literal|2
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|mapArr
argument_list|,
literal|0
argument_list|,
name|newMapArr
argument_list|,
literal|0
argument_list|,
name|oldLen
argument_list|)
expr_stmt|;
name|newMapArr
index|[
name|oldLen
index|]
operator|=
name|key
expr_stmt|;
name|newMapArr
index|[
name|oldLen
operator|+
literal|1
index|]
operator|=
name|value
expr_stmt|;
name|mapArr
operator|=
name|newMapArr
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
comment|// key exists; replace value
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|V
name|oldValue
init|=
operator|(
name|V
operator|)
name|mapArr
index|[
name|kIdx
operator|+
literal|1
index|]
decl_stmt|;
name|mapArr
index|[
name|kIdx
operator|+
literal|1
index|]
operator|=
name|value
expr_stmt|;
return|return
name|oldValue
return|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|V
name|remove
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|int
name|kIdx
init|=
name|findKey
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|kIdx
operator|<
literal|0
condition|)
block|{
comment|// not found
return|return
literal|null
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|V
name|oldValue
init|=
operator|(
name|V
operator|)
name|mapArr
index|[
name|kIdx
operator|+
literal|1
index|]
decl_stmt|;
name|int
name|oldLen
init|=
name|mapArr
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|oldLen
operator|==
literal|2
condition|)
block|{
comment|// was last entry
name|mapArr
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|Object
index|[]
name|newMapArr
init|=
operator|new
name|Object
index|[
name|oldLen
operator|-
literal|2
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|mapArr
argument_list|,
literal|0
argument_list|,
name|newMapArr
argument_list|,
literal|0
argument_list|,
name|kIdx
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|mapArr
argument_list|,
name|kIdx
operator|+
literal|2
argument_list|,
name|newMapArr
argument_list|,
name|kIdx
argument_list|,
name|oldLen
operator|-
name|kIdx
operator|-
literal|2
argument_list|)
expr_stmt|;
name|mapArr
operator|=
name|newMapArr
expr_stmt|;
block|}
return|return
name|oldValue
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|void
name|putAll
parameter_list|(
name|Map
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|otherMap
parameter_list|)
block|{
if|if
condition|(
operator|(
name|mapArr
operator|==
literal|null
operator|)
operator|||
operator|(
name|mapArr
operator|.
name|length
operator|==
literal|0
operator|)
condition|)
block|{
comment|// existing map is empty
name|mapArr
operator|=
operator|new
name|Object
index|[
name|otherMap
operator|.
name|size
argument_list|()
operator|<<
literal|1
index|]
expr_stmt|;
name|int
name|aIdx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|entry
range|:
name|otherMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|(
name|entry
operator|.
name|getKey
argument_list|()
operator|==
literal|null
operator|)
operator|||
operator|(
name|entry
operator|.
name|getValue
argument_list|()
operator|==
literal|null
operator|)
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Key or value must not be null."
argument_list|)
throw|;
block|}
name|mapArr
index|[
name|aIdx
operator|++
index|]
operator|=
name|entry
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|mapArr
index|[
name|aIdx
operator|++
index|]
operator|=
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|int
name|oldLen
init|=
name|mapArr
operator|.
name|length
decl_stmt|;
comment|// first increase array size to hold all to put entries as if they have unknown keys
comment|// reduce after adding all to the required size
name|Object
index|[]
name|newMapArr
init|=
operator|new
name|Object
index|[
name|oldLen
operator|+
operator|(
name|otherMap
operator|.
name|size
argument_list|()
operator|<<
literal|1
operator|)
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|mapArr
argument_list|,
literal|0
argument_list|,
name|newMapArr
argument_list|,
literal|0
argument_list|,
name|oldLen
argument_list|)
expr_stmt|;
name|int
name|newIdx
init|=
name|oldLen
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|entry
range|:
name|otherMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|(
name|entry
operator|.
name|getKey
argument_list|()
operator|==
literal|null
operator|)
operator|||
operator|(
name|entry
operator|.
name|getValue
argument_list|()
operator|==
literal|null
operator|)
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Key or value must not be null."
argument_list|)
throw|;
block|}
name|int
name|existKeyIdx
init|=
name|findKey
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|existKeyIdx
operator|>=
literal|0
condition|)
block|{
comment|// existing key
name|newMapArr
index|[
name|existKeyIdx
operator|+
literal|1
index|]
operator|=
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// new key
name|newMapArr
index|[
name|newIdx
operator|++
index|]
operator|=
name|entry
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|newMapArr
index|[
name|newIdx
operator|++
index|]
operator|=
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|newIdx
operator|<
name|newMapArr
operator|.
name|length
condition|)
block|{
name|Object
index|[]
name|reducedMapArr
init|=
operator|new
name|Object
index|[
name|newIdx
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|newMapArr
argument_list|,
literal|0
argument_list|,
name|reducedMapArr
argument_list|,
literal|0
argument_list|,
name|newIdx
argument_list|)
expr_stmt|;
name|newMapArr
operator|=
name|reducedMapArr
expr_stmt|;
block|}
name|mapArr
operator|=
name|newMapArr
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|mapArr
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Returns a set view of the keys contained in this map.      *       *<p>The current implementation does not allow changes to the      * returned key set (which would have to be reflected in the      * underlying map.</p>      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|K
argument_list|>
name|keySet
parameter_list|()
block|{
if|if
condition|(
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
name|Set
argument_list|<
name|K
argument_list|>
name|keys
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|kIdx
init|=
literal|0
init|;
name|kIdx
operator|<
name|mapArr
operator|.
name|length
condition|;
name|kIdx
operator|+=
literal|2
control|)
block|{
name|keys
operator|.
name|add
argument_list|(
operator|(
name|K
operator|)
name|mapArr
index|[
name|kIdx
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|keys
argument_list|)
return|;
block|}
comment|/**      * Returns a collection of the values contained in this map.      *       *<p>The current implementation does not allow changes to the      * returned collection (which would have to be reflected in the      * underlying map.</p>      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|V
argument_list|>
name|values
parameter_list|()
block|{
if|if
condition|(
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
name|List
argument_list|<
name|V
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|mapArr
operator|.
name|length
operator|>>
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|vIdx
init|=
literal|1
init|;
name|vIdx
operator|<
name|mapArr
operator|.
name|length
condition|;
name|vIdx
operator|+=
literal|2
control|)
block|{
name|values
operator|.
name|add
argument_list|(
operator|(
name|V
operator|)
name|mapArr
index|[
name|vIdx
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|values
argument_list|)
return|;
block|}
specifier|private
class|class
name|SmallMapEntry
implements|implements
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
specifier|private
specifier|final
name|int
name|keyIdx
decl_stmt|;
name|SmallMapEntry
parameter_list|(
name|int
name|keyInMapIdx
parameter_list|)
block|{
name|keyIdx
operator|=
name|keyInMapIdx
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|K
name|getKey
parameter_list|()
block|{
return|return
operator|(
name|K
operator|)
name|mapArr
index|[
name|keyIdx
index|]
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|V
name|getValue
parameter_list|()
block|{
return|return
operator|(
name|V
operator|)
name|mapArr
index|[
name|keyIdx
operator|+
literal|1
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|setValue
parameter_list|(
name|V
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Key or value must not be null."
argument_list|)
throw|;
block|}
name|V
name|oldValue
init|=
name|getValue
argument_list|()
decl_stmt|;
name|mapArr
index|[
name|keyIdx
operator|+
literal|1
index|]
operator|=
name|value
expr_stmt|;
return|return
name|oldValue
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getKey
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|SmallMap
operator|.
name|SmallMapEntry
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|SmallMapEntry
name|other
init|=
operator|(
name|SmallMapEntry
operator|)
name|obj
decl_stmt|;
return|return
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getKey
argument_list|()
argument_list|)
operator|&&
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entrySet
parameter_list|()
block|{
if|if
condition|(
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
name|Set
argument_list|<
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entries
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|kIdx
init|=
literal|0
init|;
name|kIdx
operator|<
name|mapArr
operator|.
name|length
condition|;
name|kIdx
operator|+=
literal|2
control|)
block|{
name|entries
operator|.
name|add
argument_list|(
operator|new
name|SmallMapEntry
argument_list|(
name|kIdx
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|entries
argument_list|)
return|;
block|}
block|}
end_class

end_unit

