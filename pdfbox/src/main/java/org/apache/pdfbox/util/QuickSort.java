begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * see http://de.wikipedia.org/wiki/Quicksort.  *   * @author UWe Pachler  */
end_comment

begin_class
specifier|public
class|class
name|QuickSort
block|{
specifier|private
name|QuickSort
parameter_list|()
block|{     }
specifier|private
specifier|static
specifier|final
name|Comparator
argument_list|<
name|?
extends|extends
name|Comparable
argument_list|>
name|objComp
init|=
operator|new
name|Comparator
argument_list|<
name|Comparable
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Comparable
name|object1
parameter_list|,
name|Comparable
name|object2
parameter_list|)
block|{
return|return
name|object1
operator|.
name|compareTo
argument_list|(
name|object2
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|/**      * Sorts the given list using the given comparator.      *       * @param list list to be sorted      * @param cmp comparator used to compare the object swithin the list      */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|sort
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|list
parameter_list|,
name|Comparator
argument_list|<
name|T
argument_list|>
name|cmp
parameter_list|)
block|{
name|int
name|size
init|=
name|list
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|<
literal|2
condition|)
block|{
return|return;
block|}
name|quicksort
argument_list|(
name|list
argument_list|,
name|cmp
argument_list|,
literal|0
argument_list|,
name|size
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sorts the given list using compareTo as comparator.      *       * @param list list to be sorted      */
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Comparable
parameter_list|>
name|void
name|sort
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|list
parameter_list|)
block|{
name|sort
argument_list|(
name|list
argument_list|,
operator|(
name|Comparator
argument_list|<
name|T
argument_list|>
operator|)
name|objComp
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|quicksort
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|list
parameter_list|,
name|Comparator
argument_list|<
name|T
argument_list|>
name|cmp
parameter_list|,
name|int
name|left
parameter_list|,
name|int
name|right
parameter_list|)
block|{
if|if
condition|(
name|left
operator|<
name|right
condition|)
block|{
name|int
name|splitter
init|=
name|split
argument_list|(
name|list
argument_list|,
name|cmp
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
decl_stmt|;
name|quicksort
argument_list|(
name|list
argument_list|,
name|cmp
argument_list|,
name|left
argument_list|,
name|splitter
operator|-
literal|1
argument_list|)
expr_stmt|;
name|quicksort
argument_list|(
name|list
argument_list|,
name|cmp
argument_list|,
name|splitter
operator|+
literal|1
argument_list|,
name|right
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|swap
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|list
parameter_list|,
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
name|T
name|tmp
init|=
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|list
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|list
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|set
argument_list|(
name|j
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|int
name|split
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|list
parameter_list|,
name|Comparator
argument_list|<
name|T
argument_list|>
name|cmp
parameter_list|,
name|int
name|left
parameter_list|,
name|int
name|right
parameter_list|)
block|{
name|int
name|i
init|=
name|left
decl_stmt|;
name|int
name|j
init|=
name|right
operator|-
literal|1
decl_stmt|;
name|T
name|pivot
init|=
name|list
operator|.
name|get
argument_list|(
name|right
argument_list|)
decl_stmt|;
do|do
block|{
while|while
condition|(
name|cmp
operator|.
name|compare
argument_list|(
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|pivot
argument_list|)
operator|<=
literal|0
operator|&&
name|i
operator|<
name|right
condition|)
block|{
operator|++
name|i
expr_stmt|;
block|}
while|while
condition|(
name|cmp
operator|.
name|compare
argument_list|(
name|pivot
argument_list|,
name|list
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
operator|<=
literal|0
operator|&&
name|j
operator|>
name|left
condition|)
block|{
operator|--
name|j
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|<
name|j
condition|)
block|{
name|swap
argument_list|(
name|list
argument_list|,
name|i
argument_list|,
name|j
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|i
operator|<
name|j
condition|)
do|;
if|if
condition|(
name|cmp
operator|.
name|compare
argument_list|(
name|pivot
argument_list|,
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
operator|<
literal|0
condition|)
block|{
name|swap
argument_list|(
name|list
argument_list|,
name|i
argument_list|,
name|right
argument_list|)
expr_stmt|;
block|}
return|return
name|i
return|;
block|}
block|}
end_class

end_unit

