begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
package|;
end_package

begin_comment
comment|/**  * A 2D vector.  *  * @author John Hewson  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|Vector
block|{
specifier|private
specifier|final
name|float
name|x
decl_stmt|,
name|y
decl_stmt|;
specifier|public
name|Vector
parameter_list|(
name|float
name|x
parameter_list|,
name|float
name|y
parameter_list|)
block|{
name|this
operator|.
name|x
operator|=
name|x
expr_stmt|;
name|this
operator|.
name|y
operator|=
name|y
expr_stmt|;
block|}
comment|/**      * Returns the x magnitude.      */
specifier|public
name|float
name|getX
parameter_list|()
block|{
return|return
name|x
return|;
block|}
comment|/**      * Returns the y magnitude.      */
specifier|public
name|float
name|getY
parameter_list|()
block|{
return|return
name|y
return|;
block|}
comment|/**      * Returns a new vector scaled by both x and y.      *      * @param sxy x and y scale      */
specifier|public
name|Vector
name|scale
parameter_list|(
name|float
name|sxy
parameter_list|)
block|{
return|return
operator|new
name|Vector
argument_list|(
name|x
operator|*
name|sxy
argument_list|,
name|y
operator|*
name|sxy
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"("
operator|+
name|x
operator|+
literal|", "
operator|+
name|y
operator|+
literal|")"
return|;
block|}
block|}
end_class

end_unit

