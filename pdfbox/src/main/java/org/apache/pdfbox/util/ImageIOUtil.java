begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|BufferedImage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|RenderedImage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|IIOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|IIOImage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|ImageIO
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|ImageTypeSpecifier
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|ImageWriteParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|ImageWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|metadata
operator|.
name|IIOInvalidTreeException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|metadata
operator|.
name|IIOMetadata
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|metadata
operator|.
name|IIOMetadataNode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|stream
operator|.
name|ImageOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_comment
comment|/**  * This class handles some ImageIO operations.  *  * @version $Revision$  *   */
end_comment

begin_class
specifier|public
class|class
name|ImageIOUtil
block|{
specifier|private
name|ImageIOUtil
parameter_list|()
block|{
comment|// Default constructor
block|}
comment|/**      * Converts a given page range of a PDF document to bitmap images.      * @param image the image to be written      * @param imageFormat the target format (ex. "png")      * @param filename used to construct the filename for the individual images      * @param imageType the image type (see {@link BufferedImage}.TYPE_*)      * @param resolution the resolution in dpi (dots per inch)      * @return true if the images were produced, false if there was an error      * @throws IOException if an I/O error occurs      */
specifier|public
specifier|static
name|boolean
name|writeImage
parameter_list|(
name|BufferedImage
name|image
parameter_list|,
name|String
name|imageFormat
parameter_list|,
name|String
name|filename
parameter_list|,
name|int
name|imageType
parameter_list|,
name|int
name|resolution
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|bSuccess
init|=
literal|true
decl_stmt|;
name|ImageOutputStream
name|output
init|=
literal|null
decl_stmt|;
name|ImageWriter
name|imageWriter
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
name|fileName
init|=
name|filename
operator|+
literal|"."
operator|+
name|imageFormat
decl_stmt|;
name|output
operator|=
name|ImageIO
operator|.
name|createImageOutputStream
argument_list|(
operator|new
name|File
argument_list|(
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|foundWriter
init|=
literal|false
decl_stmt|;
name|Iterator
argument_list|<
name|ImageWriter
argument_list|>
name|writerIter
init|=
name|ImageIO
operator|.
name|getImageWritersByFormatName
argument_list|(
name|imageFormat
argument_list|)
decl_stmt|;
while|while
condition|(
name|writerIter
operator|.
name|hasNext
argument_list|()
operator|&&
operator|!
name|foundWriter
condition|)
block|{
try|try
block|{
name|imageWriter
operator|=
operator|(
name|ImageWriter
operator|)
name|writerIter
operator|.
name|next
argument_list|()
expr_stmt|;
name|ImageWriteParam
name|writerParams
init|=
name|imageWriter
operator|.
name|getDefaultWriteParam
argument_list|()
decl_stmt|;
if|if
condition|(
name|writerParams
operator|.
name|canWriteCompressed
argument_list|()
condition|)
block|{
name|writerParams
operator|.
name|setCompressionMode
argument_list|(
name|ImageWriteParam
operator|.
name|MODE_EXPLICIT
argument_list|)
expr_stmt|;
comment|// reset the compression type if overwritten by setCompressionMode
if|if
condition|(
name|writerParams
operator|.
name|getCompressionType
argument_list|()
operator|==
literal|null
condition|)
block|{
name|writerParams
operator|.
name|setCompressionType
argument_list|(
name|writerParams
operator|.
name|getCompressionTypes
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
name|writerParams
operator|.
name|setCompressionQuality
argument_list|(
literal|1.0f
argument_list|)
expr_stmt|;
block|}
name|IIOMetadata
name|meta
init|=
name|createMetadata
argument_list|(
name|image
argument_list|,
name|imageWriter
argument_list|,
name|writerParams
argument_list|,
name|resolution
argument_list|)
decl_stmt|;
name|imageWriter
operator|.
name|setOutput
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|imageWriter
operator|.
name|write
argument_list|(
literal|null
argument_list|,
operator|new
name|IIOImage
argument_list|(
name|image
argument_list|,
literal|null
argument_list|,
name|meta
argument_list|)
argument_list|,
name|writerParams
argument_list|)
expr_stmt|;
name|foundWriter
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IIOException
name|io
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|io
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|imageWriter
operator|!=
literal|null
condition|)
block|{
name|imageWriter
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|foundWriter
condition|)
block|{
name|bSuccess
operator|=
literal|false
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|output
operator|!=
literal|null
condition|)
block|{
name|output
operator|.
name|flush
argument_list|()
expr_stmt|;
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|bSuccess
return|;
block|}
specifier|private
specifier|static
name|IIOMetadata
name|createMetadata
parameter_list|(
name|RenderedImage
name|image
parameter_list|,
name|ImageWriter
name|imageWriter
parameter_list|,
name|ImageWriteParam
name|writerParams
parameter_list|,
name|int
name|resolution
parameter_list|)
block|{
name|ImageTypeSpecifier
name|type
decl_stmt|;
if|if
condition|(
name|writerParams
operator|.
name|getDestinationType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|type
operator|=
name|writerParams
operator|.
name|getDestinationType
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|type
operator|=
name|ImageTypeSpecifier
operator|.
name|createFromRenderedImage
argument_list|(
name|image
argument_list|)
expr_stmt|;
block|}
name|IIOMetadata
name|meta
init|=
name|imageWriter
operator|.
name|getDefaultImageMetadata
argument_list|(
name|type
argument_list|,
name|writerParams
argument_list|)
decl_stmt|;
return|return
operator|(
name|addResolution
argument_list|(
name|meta
argument_list|,
name|resolution
argument_list|)
condition|?
name|meta
else|:
literal|null
operator|)
return|;
block|}
specifier|private
specifier|static
specifier|final
name|String
name|STANDARD_METADATA_FORMAT
init|=
literal|"javax_imageio_1.0"
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|addResolution
parameter_list|(
name|IIOMetadata
name|meta
parameter_list|,
name|int
name|resolution
parameter_list|)
block|{
if|if
condition|(
operator|!
name|meta
operator|.
name|isReadOnly
argument_list|()
operator|&&
name|meta
operator|.
name|isStandardMetadataFormatSupported
argument_list|()
condition|)
block|{
name|IIOMetadataNode
name|root
init|=
operator|(
name|IIOMetadataNode
operator|)
name|meta
operator|.
name|getAsTree
argument_list|(
name|STANDARD_METADATA_FORMAT
argument_list|)
decl_stmt|;
name|IIOMetadataNode
name|dim
init|=
name|getChildNode
argument_list|(
name|root
argument_list|,
literal|"Dimension"
argument_list|)
decl_stmt|;
if|if
condition|(
name|dim
operator|==
literal|null
condition|)
block|{
name|dim
operator|=
operator|new
name|IIOMetadataNode
argument_list|(
literal|"Dimension"
argument_list|)
expr_stmt|;
name|root
operator|.
name|appendChild
argument_list|(
name|dim
argument_list|)
expr_stmt|;
block|}
name|IIOMetadataNode
name|child
decl_stmt|;
name|child
operator|=
name|getChildNode
argument_list|(
name|dim
argument_list|,
literal|"HorizontalPixelSize"
argument_list|)
expr_stmt|;
if|if
condition|(
name|child
operator|==
literal|null
condition|)
block|{
name|child
operator|=
operator|new
name|IIOMetadataNode
argument_list|(
literal|"HorizontalPixelSize"
argument_list|)
expr_stmt|;
name|dim
operator|.
name|appendChild
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
name|child
operator|.
name|setAttribute
argument_list|(
literal|"value"
argument_list|,
name|Double
operator|.
name|toString
argument_list|(
name|resolution
operator|/
literal|25.4
argument_list|)
argument_list|)
expr_stmt|;
name|child
operator|=
name|getChildNode
argument_list|(
name|dim
argument_list|,
literal|"VerticalPixelSize"
argument_list|)
expr_stmt|;
if|if
condition|(
name|child
operator|==
literal|null
condition|)
block|{
name|child
operator|=
operator|new
name|IIOMetadataNode
argument_list|(
literal|"VerticalPixelSize"
argument_list|)
expr_stmt|;
name|dim
operator|.
name|appendChild
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
name|child
operator|.
name|setAttribute
argument_list|(
literal|"value"
argument_list|,
name|Double
operator|.
name|toString
argument_list|(
name|resolution
operator|/
literal|25.4
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|meta
operator|.
name|mergeTree
argument_list|(
name|STANDARD_METADATA_FORMAT
argument_list|,
name|root
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IIOInvalidTreeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot update image metadata: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|IIOMetadataNode
name|getChildNode
parameter_list|(
name|Node
name|n
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|NodeList
name|nodes
init|=
name|n
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|child
init|=
name|nodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|child
operator|.
name|getNodeName
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|(
name|IIOMetadataNode
operator|)
name|child
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

