begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|BufferedImage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|IIOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|IIOImage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|ImageIO
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|ImageTypeSpecifier
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|ImageWriteParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|ImageWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|metadata
operator|.
name|IIOInvalidTreeException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|metadata
operator|.
name|IIOMetadata
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|metadata
operator|.
name|IIOMetadataNode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|stream
operator|.
name|ImageOutputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|OutputKeys
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Transformer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerFactoryConfigurationError
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_comment
comment|/**  * This class handles some ImageIO operations.  *  * @version $Revision$  *   */
end_comment

begin_class
specifier|public
class|class
name|ImageIOUtil
block|{
comment|/**      * Log instance.      */
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ImageIOUtil
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Default screen resolution: 72dpi.      */
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_SCREEN_RESOLUTION
init|=
literal|72
decl_stmt|;
comment|/**      * Default compression quality: 1.0f.      */
specifier|public
specifier|static
specifier|final
name|float
name|DEFAULT_COMPRESSION_QUALITY
init|=
literal|1.0f
decl_stmt|;
specifier|private
name|ImageIOUtil
parameter_list|()
block|{
comment|// Default constructor
block|}
comment|/**      * Writes a buffered image to a file using the given image format.      *       * @param image the image to be written      * @param imageFormat the target format (ex. "png")      * @param filename used to construct the filename for the individual images      * @param resolution the resolution in dpi (dots per inch)      *       * @return true if the images were produced, false if there was an error      * @throws IOException if an I/O error occurs      */
specifier|public
specifier|static
name|boolean
name|writeImage
parameter_list|(
name|BufferedImage
name|image
parameter_list|,
name|String
name|imageFormat
parameter_list|,
name|String
name|filename
parameter_list|,
name|int
name|resolution
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|fileName
init|=
name|filename
operator|+
literal|"."
operator|+
name|imageFormat
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
return|return
name|writeImage
argument_list|(
name|image
argument_list|,
name|imageFormat
argument_list|,
name|file
argument_list|,
name|resolution
argument_list|)
return|;
block|}
comment|/**      * Writes a buffered image to a file using the given image format.      *       * @param image the image to be written      * @param imageFormat the target format (ex. "png")      * @param outputStream the output stream to be used for writing      *       * @return true if the images were produced, false if there was an error      * @throws IOException if an I/O error occurs      */
specifier|public
specifier|static
name|boolean
name|writeImage
parameter_list|(
name|BufferedImage
name|image
parameter_list|,
name|String
name|imageFormat
parameter_list|,
name|OutputStream
name|outputStream
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|writeImage
argument_list|(
name|image
argument_list|,
name|imageFormat
argument_list|,
name|outputStream
argument_list|,
name|DEFAULT_SCREEN_RESOLUTION
argument_list|)
return|;
block|}
comment|/**      * Writes a buffered image to a file using the given image format.      *       * @param image the image to be written      * @param imageFormat the target format (ex. "png")      * @param outputStream the output stream to be used for writing      * @param resolution resolution to be used when writing the image      *       * @return true if the images were produced, false if there was an error      * @throws IOException if an I/O error occurs      */
specifier|public
specifier|static
name|boolean
name|writeImage
parameter_list|(
name|BufferedImage
name|image
parameter_list|,
name|String
name|imageFormat
parameter_list|,
name|Object
name|outputStream
parameter_list|,
name|int
name|resolution
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|writeImage
argument_list|(
name|image
argument_list|,
name|imageFormat
argument_list|,
name|outputStream
argument_list|,
name|resolution
argument_list|,
name|DEFAULT_COMPRESSION_QUALITY
argument_list|)
return|;
block|}
comment|/**      * Writes a buffered image to a file using the given image format.      *       * @param image the image to be written      * @param imageFormat the target format (ex. "png")      * @param outputStream the output stream to be used for writing      * @param resolution resolution to be used when writing the image      * @param quality quality to be used when compressing the image (0&lt;      * quality&lt; 1.0f)      *       * @return true if the images were produced, false if there was an error      * @throws IOException if an I/O error occurs      */
specifier|public
specifier|static
name|boolean
name|writeImage
parameter_list|(
name|BufferedImage
name|image
parameter_list|,
name|String
name|imageFormat
parameter_list|,
name|Object
name|outputStream
parameter_list|,
name|int
name|resolution
parameter_list|,
name|float
name|quality
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|bSuccess
init|=
literal|true
decl_stmt|;
name|ImageOutputStream
name|output
init|=
literal|null
decl_stmt|;
name|ImageWriter
name|imageWriter
init|=
literal|null
decl_stmt|;
try|try
block|{
name|output
operator|=
name|ImageIO
operator|.
name|createImageOutputStream
argument_list|(
name|outputStream
argument_list|)
expr_stmt|;
name|boolean
name|foundWriter
init|=
literal|false
decl_stmt|;
name|Iterator
argument_list|<
name|ImageWriter
argument_list|>
name|writerIter
init|=
name|ImageIO
operator|.
name|getImageWritersByFormatName
argument_list|(
name|imageFormat
argument_list|)
decl_stmt|;
while|while
condition|(
name|writerIter
operator|.
name|hasNext
argument_list|()
operator|&&
operator|!
name|foundWriter
condition|)
block|{
try|try
block|{
name|imageWriter
operator|=
operator|(
name|ImageWriter
operator|)
name|writerIter
operator|.
name|next
argument_list|()
expr_stmt|;
name|ImageWriteParam
name|writerParams
init|=
name|imageWriter
operator|.
name|getDefaultWriteParam
argument_list|()
decl_stmt|;
if|if
condition|(
name|writerParams
operator|.
name|canWriteCompressed
argument_list|()
condition|)
block|{
name|writerParams
operator|.
name|setCompressionMode
argument_list|(
name|ImageWriteParam
operator|.
name|MODE_EXPLICIT
argument_list|)
expr_stmt|;
comment|// reset the compression type if overwritten by setCompressionMode
if|if
condition|(
name|writerParams
operator|.
name|getCompressionType
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|imageFormat
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"tif"
argument_list|)
condition|)
block|{
comment|// avoid error: first compression type is RLE, not optimal and incorrect for color images
comment|//TODO? another writeImage() call with extra compression param so user can decide
if|if
condition|(
name|image
operator|.
name|getType
argument_list|()
operator|==
name|BufferedImage
operator|.
name|TYPE_BYTE_BINARY
operator|&&
name|image
operator|.
name|getColorModel
argument_list|()
operator|.
name|getPixelSize
argument_list|()
operator|==
literal|1
condition|)
block|{
name|writerParams
operator|.
name|setCompressionType
argument_list|(
literal|"CCITT T.6"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writerParams
operator|.
name|setCompressionType
argument_list|(
literal|"LZW"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|writerParams
operator|.
name|setCompressionType
argument_list|(
name|writerParams
operator|.
name|getCompressionTypes
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|writerParams
operator|.
name|setCompressionQuality
argument_list|(
name|quality
argument_list|)
expr_stmt|;
block|}
name|IIOMetadata
name|meta
init|=
name|createMetadata
argument_list|(
name|image
argument_list|,
name|imageWriter
argument_list|,
name|writerParams
argument_list|,
name|resolution
argument_list|)
decl_stmt|;
if|if
condition|(
name|meta
operator|!=
literal|null
condition|)
block|{
name|imageWriter
operator|.
name|setOutput
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|imageWriter
operator|.
name|write
argument_list|(
literal|null
argument_list|,
operator|new
name|IIOImage
argument_list|(
name|image
argument_list|,
literal|null
argument_list|,
name|meta
argument_list|)
argument_list|,
name|writerParams
argument_list|)
expr_stmt|;
name|foundWriter
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IIOException
name|io
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"IIOException in writeImage()"
argument_list|,
name|io
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|io
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|imageWriter
operator|!=
literal|null
condition|)
block|{
name|imageWriter
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|foundWriter
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"No writer found for format '"
operator|+
name|imageFormat
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|bSuccess
operator|=
literal|false
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|output
operator|!=
literal|null
condition|)
block|{
name|output
operator|.
name|flush
argument_list|()
expr_stmt|;
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|bSuccess
return|;
block|}
specifier|private
specifier|static
name|IIOMetadata
name|createMetadata
parameter_list|(
name|BufferedImage
name|image
parameter_list|,
name|ImageWriter
name|imageWriter
parameter_list|,
name|ImageWriteParam
name|writerParams
parameter_list|,
name|int
name|resolution
parameter_list|)
block|{
name|ImageTypeSpecifier
name|type
decl_stmt|;
if|if
condition|(
name|writerParams
operator|.
name|getDestinationType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|type
operator|=
name|writerParams
operator|.
name|getDestinationType
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|type
operator|=
name|ImageTypeSpecifier
operator|.
name|createFromRenderedImage
argument_list|(
name|image
argument_list|)
expr_stmt|;
block|}
name|IIOMetadata
name|meta
init|=
name|imageWriter
operator|.
name|getDefaultImageMetadata
argument_list|(
name|type
argument_list|,
name|writerParams
argument_list|)
decl_stmt|;
name|logMeta
argument_list|(
name|meta
argument_list|,
name|STANDARD_METADATA_FORMAT
argument_list|)
expr_stmt|;
if|if
condition|(
name|imageWriter
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
operator|.
name|contains
argument_list|(
literal|"TIFF"
argument_list|)
condition|)
block|{
name|updateMetadata
argument_list|(
name|image
argument_list|,
name|meta
argument_list|,
name|resolution
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|addResolution
argument_list|(
name|meta
argument_list|,
name|resolution
argument_list|)
condition|)
block|{
name|meta
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|logMeta
argument_list|(
name|meta
argument_list|,
name|STANDARD_METADATA_FORMAT
argument_list|)
expr_stmt|;
return|return
name|meta
return|;
block|}
comment|/**      * log the meta data as an XML tree if debug is enabled.      *       * @param meta meta data.      * @param format the XML format to be used.      */
specifier|private
specifier|static
name|void
name|logMeta
parameter_list|(
name|IIOMetadata
name|meta
parameter_list|,
name|String
name|format
parameter_list|)
block|{
if|if
condition|(
operator|!
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|meta
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"meta is null"
argument_list|)
expr_stmt|;
return|return;
block|}
name|IIOMetadataNode
name|root
init|=
operator|(
name|IIOMetadataNode
operator|)
name|meta
operator|.
name|getAsTree
argument_list|(
name|format
argument_list|)
decl_stmt|;
comment|// http://download.java.net/jdk8/docs/api/javax/imageio/metadata/doc-files/standard_metadata.html
comment|// http://www.java-forum.org/java-basics-anfaenger-themen/96982-aufloesung-dpi-tiff-png-bildern-auslesen.html#post617178
try|try
block|{
name|StringWriter
name|xmlStringWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|StreamResult
name|streamResult
init|=
operator|new
name|StreamResult
argument_list|(
name|xmlStringWriter
argument_list|)
decl_stmt|;
name|Transformer
name|transformer
init|=
name|TransformerFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newTransformer
argument_list|()
decl_stmt|;
name|transformer
operator|.
name|setOutputProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
comment|// http://stackoverflow.com/a/1264872/535646
name|transformer
operator|.
name|setOutputProperty
argument_list|(
literal|"{http://xml.apache.org/xslt}indent-amount"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|DOMSource
name|domSource
init|=
operator|new
name|DOMSource
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|transformer
operator|.
name|transform
argument_list|(
name|domSource
argument_list|,
name|streamResult
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"\n"
operator|+
name|xmlStringWriter
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TransformerFactoryConfigurationError
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ex
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ex
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TransformerException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ex
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|String
name|STANDARD_METADATA_FORMAT
init|=
literal|"javax_imageio_1.0"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SUN_TIFF_NATIVE_FORMAT
init|=
literal|"com_sun_media_imageio_plugins_tiff_image_1.0"
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|addResolution
parameter_list|(
name|IIOMetadata
name|meta
parameter_list|,
name|int
name|resolution
parameter_list|)
block|{
if|if
condition|(
name|meta
operator|!=
literal|null
operator|&&
operator|!
name|meta
operator|.
name|isReadOnly
argument_list|()
operator|&&
name|meta
operator|.
name|isStandardMetadataFormatSupported
argument_list|()
condition|)
block|{
name|IIOMetadataNode
name|root
init|=
operator|(
name|IIOMetadataNode
operator|)
name|meta
operator|.
name|getAsTree
argument_list|(
name|STANDARD_METADATA_FORMAT
argument_list|)
decl_stmt|;
name|IIOMetadataNode
name|dim
init|=
name|getChildNode
argument_list|(
name|root
argument_list|,
literal|"Dimension"
argument_list|)
decl_stmt|;
if|if
condition|(
name|dim
operator|==
literal|null
condition|)
block|{
name|dim
operator|=
operator|new
name|IIOMetadataNode
argument_list|(
literal|"Dimension"
argument_list|)
expr_stmt|;
name|root
operator|.
name|appendChild
argument_list|(
name|dim
argument_list|)
expr_stmt|;
block|}
name|IIOMetadataNode
name|child
decl_stmt|;
name|child
operator|=
name|getChildNode
argument_list|(
name|dim
argument_list|,
literal|"HorizontalPixelSize"
argument_list|)
expr_stmt|;
if|if
condition|(
name|child
operator|==
literal|null
condition|)
block|{
name|child
operator|=
operator|new
name|IIOMetadataNode
argument_list|(
literal|"HorizontalPixelSize"
argument_list|)
expr_stmt|;
name|dim
operator|.
name|appendChild
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
name|child
operator|.
name|setAttribute
argument_list|(
literal|"value"
argument_list|,
name|Double
operator|.
name|toString
argument_list|(
name|resolution
operator|/
literal|25.4
argument_list|)
argument_list|)
expr_stmt|;
name|child
operator|=
name|getChildNode
argument_list|(
name|dim
argument_list|,
literal|"VerticalPixelSize"
argument_list|)
expr_stmt|;
if|if
condition|(
name|child
operator|==
literal|null
condition|)
block|{
name|child
operator|=
operator|new
name|IIOMetadataNode
argument_list|(
literal|"VerticalPixelSize"
argument_list|)
expr_stmt|;
name|dim
operator|.
name|appendChild
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
name|child
operator|.
name|setAttribute
argument_list|(
literal|"value"
argument_list|,
name|Double
operator|.
name|toString
argument_list|(
name|resolution
operator|/
literal|25.4
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|meta
operator|.
name|mergeTree
argument_list|(
name|STANDARD_METADATA_FORMAT
argument_list|,
name|root
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IIOInvalidTreeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot update image metadata: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|IIOMetadataNode
name|getChildNode
parameter_list|(
name|Node
name|n
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|NodeList
name|nodes
init|=
name|n
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|child
init|=
name|nodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|child
operator|.
name|getNodeName
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|(
name|IIOMetadataNode
operator|)
name|child
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Sets the resolution in a TIFF image, the resolution unit (Inches), rows      * per strip to the height to get smaller files, and the name of the      * software to "PDFBOX".      *      * @param tiffImage the TIFF Image      * @param meta the meta data that is to be set      * @param resolution in dots per inch      */
specifier|protected
specifier|static
name|void
name|updateMetadata
parameter_list|(
name|BufferedImage
name|tiffImage
parameter_list|,
name|IIOMetadata
name|meta
parameter_list|,
name|int
name|resolution
parameter_list|)
block|{
comment|// Code inspired by Apache XML graphics
comment|// https://svn.apache.org/repos/asf/xmlgraphics/commons/tags/commons-1_3_1/src/java/org/apache/xmlgraphics/image/writer/imageio/ImageIOTIFFImageWriter.java
comment|// DTD:
comment|// http://download.java.net/media/jai-imageio/javadoc/1.0_01/com/sun/media/imageio/plugins/tiff/package-summary.html
comment|// TIFF6 Spec:
comment|// http://partners.adobe.com/public/developer/tiff/index.html
comment|// We set the resolution manually using the native format since it appears that
comment|// it doesn't work properly through the standard metadata. Haven't figured out why
comment|// that happens.
if|if
condition|(
name|SUN_TIFF_NATIVE_FORMAT
operator|.
name|equals
argument_list|(
name|meta
operator|.
name|getNativeMetadataFormatName
argument_list|()
argument_list|)
condition|)
block|{
name|IIOMetadataNode
name|root
init|=
operator|new
name|IIOMetadataNode
argument_list|(
name|SUN_TIFF_NATIVE_FORMAT
argument_list|)
decl_stmt|;
name|IIOMetadataNode
name|ifd
init|=
name|getChildNode
argument_list|(
name|root
argument_list|,
literal|"TIFFIFD"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ifd
operator|==
literal|null
condition|)
block|{
name|ifd
operator|=
operator|new
name|IIOMetadataNode
argument_list|(
literal|"TIFFIFD"
argument_list|)
expr_stmt|;
name|ifd
operator|.
name|setAttribute
argument_list|(
literal|"tagSets"
argument_list|,
literal|"com.sun.media.imageio.plugins.tiff.BaselineTIFFTagSet"
argument_list|)
expr_stmt|;
name|root
operator|.
name|appendChild
argument_list|(
name|ifd
argument_list|)
expr_stmt|;
block|}
name|ifd
operator|.
name|appendChild
argument_list|(
name|createRationalField
argument_list|(
literal|282
argument_list|,
literal|"XResolution"
argument_list|,
name|resolution
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ifd
operator|.
name|appendChild
argument_list|(
name|createRationalField
argument_list|(
literal|283
argument_list|,
literal|"YResolution"
argument_list|,
name|resolution
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ifd
operator|.
name|appendChild
argument_list|(
name|createShortField
argument_list|(
literal|296
argument_list|,
literal|"ResolutionUnit"
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Inch
name|ifd
operator|.
name|appendChild
argument_list|(
name|createLongField
argument_list|(
literal|278
argument_list|,
literal|"RowsPerStrip"
argument_list|,
name|tiffImage
operator|.
name|getHeight
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ifd
operator|.
name|appendChild
argument_list|(
name|createAsciiField
argument_list|(
literal|305
argument_list|,
literal|"Software"
argument_list|,
literal|"PDFBOX"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|meta
operator|.
name|mergeTree
argument_list|(
name|SUN_TIFF_NATIVE_FORMAT
argument_list|,
name|root
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IIOInvalidTreeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot update image metadata: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
specifier|static
name|IIOMetadataNode
name|createShortField
parameter_list|(
name|int
name|tiffTagNumber
parameter_list|,
name|String
name|name
parameter_list|,
name|int
name|val
parameter_list|)
block|{
name|IIOMetadataNode
name|field
decl_stmt|,
name|arrayNode
decl_stmt|,
name|valueNode
decl_stmt|;
name|field
operator|=
operator|new
name|IIOMetadataNode
argument_list|(
literal|"TIFFField"
argument_list|)
expr_stmt|;
name|field
operator|.
name|setAttribute
argument_list|(
literal|"number"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|tiffTagNumber
argument_list|)
argument_list|)
expr_stmt|;
name|field
operator|.
name|setAttribute
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|arrayNode
operator|=
operator|new
name|IIOMetadataNode
argument_list|(
literal|"TIFFShorts"
argument_list|)
expr_stmt|;
name|field
operator|.
name|appendChild
argument_list|(
name|arrayNode
argument_list|)
expr_stmt|;
name|valueNode
operator|=
operator|new
name|IIOMetadataNode
argument_list|(
literal|"TIFFShort"
argument_list|)
expr_stmt|;
name|arrayNode
operator|.
name|appendChild
argument_list|(
name|valueNode
argument_list|)
expr_stmt|;
name|valueNode
operator|.
name|setAttribute
argument_list|(
literal|"value"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|field
return|;
block|}
specifier|private
specifier|static
name|IIOMetadataNode
name|createAsciiField
parameter_list|(
name|int
name|number
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|)
block|{
name|IIOMetadataNode
name|field
decl_stmt|,
name|arrayNode
decl_stmt|,
name|valueNode
decl_stmt|;
name|field
operator|=
operator|new
name|IIOMetadataNode
argument_list|(
literal|"TIFFField"
argument_list|)
expr_stmt|;
name|field
operator|.
name|setAttribute
argument_list|(
literal|"number"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|number
argument_list|)
argument_list|)
expr_stmt|;
name|field
operator|.
name|setAttribute
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|arrayNode
operator|=
operator|new
name|IIOMetadataNode
argument_list|(
literal|"TIFFAsciis"
argument_list|)
expr_stmt|;
name|field
operator|.
name|appendChild
argument_list|(
name|arrayNode
argument_list|)
expr_stmt|;
name|valueNode
operator|=
operator|new
name|IIOMetadataNode
argument_list|(
literal|"TIFFAscii"
argument_list|)
expr_stmt|;
name|arrayNode
operator|.
name|appendChild
argument_list|(
name|valueNode
argument_list|)
expr_stmt|;
name|valueNode
operator|.
name|setAttribute
argument_list|(
literal|"value"
argument_list|,
name|val
argument_list|)
expr_stmt|;
return|return
name|field
return|;
block|}
specifier|private
specifier|static
name|IIOMetadataNode
name|createLongField
parameter_list|(
name|int
name|number
parameter_list|,
name|String
name|name
parameter_list|,
name|long
name|val
parameter_list|)
block|{
name|IIOMetadataNode
name|field
decl_stmt|,
name|arrayNode
decl_stmt|,
name|valueNode
decl_stmt|;
name|field
operator|=
operator|new
name|IIOMetadataNode
argument_list|(
literal|"TIFFField"
argument_list|)
expr_stmt|;
name|field
operator|.
name|setAttribute
argument_list|(
literal|"number"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|number
argument_list|)
argument_list|)
expr_stmt|;
name|field
operator|.
name|setAttribute
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|arrayNode
operator|=
operator|new
name|IIOMetadataNode
argument_list|(
literal|"TIFFLongs"
argument_list|)
expr_stmt|;
name|field
operator|.
name|appendChild
argument_list|(
name|arrayNode
argument_list|)
expr_stmt|;
name|valueNode
operator|=
operator|new
name|IIOMetadataNode
argument_list|(
literal|"TIFFLong"
argument_list|)
expr_stmt|;
name|arrayNode
operator|.
name|appendChild
argument_list|(
name|valueNode
argument_list|)
expr_stmt|;
name|valueNode
operator|.
name|setAttribute
argument_list|(
literal|"value"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|field
return|;
block|}
specifier|private
specifier|static
name|IIOMetadataNode
name|createRationalField
parameter_list|(
name|int
name|number
parameter_list|,
name|String
name|name
parameter_list|,
name|int
name|numerator
parameter_list|,
name|int
name|denominator
parameter_list|)
block|{
name|IIOMetadataNode
name|field
decl_stmt|,
name|arrayNode
decl_stmt|,
name|valueNode
decl_stmt|;
name|field
operator|=
operator|new
name|IIOMetadataNode
argument_list|(
literal|"TIFFField"
argument_list|)
expr_stmt|;
name|field
operator|.
name|setAttribute
argument_list|(
literal|"number"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|number
argument_list|)
argument_list|)
expr_stmt|;
name|field
operator|.
name|setAttribute
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|arrayNode
operator|=
operator|new
name|IIOMetadataNode
argument_list|(
literal|"TIFFRationals"
argument_list|)
expr_stmt|;
name|field
operator|.
name|appendChild
argument_list|(
name|arrayNode
argument_list|)
expr_stmt|;
name|valueNode
operator|=
operator|new
name|IIOMetadataNode
argument_list|(
literal|"TIFFRational"
argument_list|)
expr_stmt|;
name|arrayNode
operator|.
name|appendChild
argument_list|(
name|valueNode
argument_list|)
expr_stmt|;
name|valueNode
operator|.
name|setAttribute
argument_list|(
literal|"value"
argument_list|,
name|numerator
operator|+
literal|"/"
operator|+
name|denominator
argument_list|)
expr_stmt|;
return|return
name|field
return|;
block|}
block|}
end_class

end_unit

