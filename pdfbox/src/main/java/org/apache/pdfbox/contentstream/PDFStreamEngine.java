begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|contentstream
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|Area
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|GeneralPath
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|Point2D
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSNumber
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdfparser
operator|.
name|PDFStreamParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDRectangle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDFontFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|form
operator|.
name|PDFormXObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|pattern
operator|.
name|PDTilingPattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|state
operator|.
name|PDGraphicsState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|state
operator|.
name|PDTextState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAppearanceStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|Matrix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|contentstream
operator|.
name|operator
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|contentstream
operator|.
name|operator
operator|.
name|OperatorProcessor
import|;
end_import

begin_comment
comment|/**  * Processes a PDF content stream and executes certain operations.  * Provides a callback interface for clients that want to do things with the stream.  *   * @author Ben Litchfield  */
end_comment

begin_class
specifier|public
class|class
name|PDFStreamEngine
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|PDFStreamEngine
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|OperatorProcessor
argument_list|>
name|operators
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|OperatorProcessor
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Matrix
name|textMatrix
decl_stmt|;
specifier|private
name|Matrix
name|textLineMatrix
decl_stmt|;
specifier|protected
name|Matrix
name|subStreamMatrix
init|=
operator|new
name|Matrix
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Stack
argument_list|<
name|PDGraphicsState
argument_list|>
name|graphicsStack
init|=
operator|new
name|Stack
argument_list|<
name|PDGraphicsState
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|PDResources
name|resources
decl_stmt|;
specifier|private
name|PDPage
name|currentPage
decl_stmt|;
specifier|private
name|boolean
name|isProcessingPage
decl_stmt|;
comment|// skip malformed or otherwise unparseable input where possible
specifier|private
name|boolean
name|forceParsing
decl_stmt|;
comment|/**      * Creates a new PDFStreamEngine.      */
specifier|public
name|PDFStreamEngine
parameter_list|()
block|{     }
comment|/**      * Indicates if force parsing is activated.      *       * @return true if force parsing is active      */
specifier|public
name|boolean
name|isForceParsing
parameter_list|()
block|{
return|return
name|forceParsing
return|;
block|}
comment|/**      * Enable/Disable force parsing.      *       * @param forceParsingValue true activates force parsing      */
specifier|public
name|void
name|setForceParsing
parameter_list|(
name|boolean
name|forceParsingValue
parameter_list|)
block|{
name|forceParsing
operator|=
name|forceParsingValue
expr_stmt|;
block|}
comment|/**      * Register a custom operator processor with the engine.      *       * @param operator The operator as a string.      * @param op Processor instance.      * @deprecated Use {@link #addOperator(OperatorProcessor)} instead      */
annotation|@
name|Deprecated
specifier|public
name|void
name|registerOperatorProcessor
parameter_list|(
name|String
name|operator
parameter_list|,
name|OperatorProcessor
name|op
parameter_list|)
block|{
name|op
operator|.
name|setContext
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|operators
operator|.
name|put
argument_list|(
name|operator
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds an operator processor to the engine.      *      * @param op operator processor      */
specifier|public
specifier|final
name|void
name|addOperator
parameter_list|(
name|OperatorProcessor
name|op
parameter_list|)
block|{
name|op
operator|.
name|setContext
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|operators
operator|.
name|put
argument_list|(
name|op
operator|.
name|getName
argument_list|()
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
comment|/**      * Initialises the stream engine for the given page.      */
specifier|private
name|void
name|initPage
parameter_list|(
name|PDPage
name|page
parameter_list|)
block|{
if|if
condition|(
name|page
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Page cannot be null"
argument_list|)
throw|;
block|}
name|currentPage
operator|=
name|page
expr_stmt|;
name|graphicsStack
operator|.
name|clear
argument_list|()
expr_stmt|;
name|graphicsStack
operator|.
name|push
argument_list|(
operator|new
name|PDGraphicsState
argument_list|(
name|page
operator|.
name|getCropBox
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|textMatrix
operator|=
literal|null
expr_stmt|;
name|textLineMatrix
operator|=
literal|null
expr_stmt|;
name|resources
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * This will initialise and process the contents of the stream.      *      * @param page the page to process      * @throws IOException if there is an error accessing the stream      */
specifier|public
name|void
name|processPage
parameter_list|(
name|PDPage
name|page
parameter_list|)
throws|throws
name|IOException
block|{
name|initPage
argument_list|(
name|page
argument_list|)
expr_stmt|;
if|if
condition|(
name|page
operator|.
name|getStream
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|isProcessingPage
operator|=
literal|true
expr_stmt|;
name|processStream
argument_list|(
name|page
argument_list|)
expr_stmt|;
name|isProcessingPage
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|/**      * Shows a transparency group from the content stream.      *      * @param form transparency group (form) XObject      * @throws IOException if the transparency group cannot be processed      */
specifier|public
name|void
name|showTransparencyGroup
parameter_list|(
name|PDFormXObject
name|form
parameter_list|)
throws|throws
name|IOException
block|{
name|showForm
argument_list|(
name|form
argument_list|)
expr_stmt|;
block|}
comment|/**      * Shows a form from the content stream.      *      * @param form form XObject      * @throws IOException if the form cannot be processed      */
specifier|public
name|void
name|showForm
parameter_list|(
name|PDFormXObject
name|form
parameter_list|)
throws|throws
name|IOException
block|{
name|processChildStream
argument_list|(
name|form
argument_list|)
expr_stmt|;
block|}
comment|/**      * Process a child stream of the current page. For use with #processPage(PDPage).      *      * @param contentStream the child content stream      * @throws IOException if there is an exception while processing the stream      */
specifier|public
name|void
name|processChildStream
parameter_list|(
name|PDContentStream
name|contentStream
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|currentPage
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No current page, call "
operator|+
literal|"#processChildStream(PDContentStream, PDPage) instead"
argument_list|)
throw|;
block|}
name|processStream
argument_list|(
name|contentStream
argument_list|)
expr_stmt|;
block|}
comment|// todo: a temporary workaround for tiling patterns (overrides matrix and bbox)
specifier|public
specifier|final
name|void
name|processChildStreamWithMatrix
parameter_list|(
name|PDTilingPattern
name|contentStream
parameter_list|,
name|PDPage
name|page
parameter_list|,
name|Matrix
name|matrix
parameter_list|,
name|PDRectangle
name|bbox
parameter_list|)
throws|throws
name|IOException
block|{
name|initPage
argument_list|(
name|page
argument_list|)
expr_stmt|;
comment|// transform ctm
name|Matrix
name|concat
init|=
name|matrix
operator|.
name|multiply
argument_list|(
name|getGraphicsState
argument_list|()
operator|.
name|getCurrentTransformationMatrix
argument_list|()
argument_list|)
decl_stmt|;
name|getGraphicsState
argument_list|()
operator|.
name|setCurrentTransformationMatrix
argument_list|(
name|concat
argument_list|)
expr_stmt|;
name|processStream
argument_list|(
name|contentStream
argument_list|,
name|bbox
argument_list|)
expr_stmt|;
name|currentPage
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Shows the given annotation.      *      * @param annotation An annotation on the current page.      * @throws IOException If an error occurred reading the annotation      */
specifier|public
name|void
name|showAnnotation
parameter_list|(
name|PDAnnotation
name|annotation
parameter_list|)
throws|throws
name|IOException
block|{
name|PDAppearanceStream
name|appearanceStream
init|=
name|getAppearance
argument_list|(
name|annotation
argument_list|)
decl_stmt|;
if|if
condition|(
name|appearanceStream
operator|!=
literal|null
condition|)
block|{
name|processStream
argument_list|(
name|appearanceStream
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns the appearance stream to process for the given annotation. May be used to render      * a specific appearance such as "hover".      *      * @param annotation The current annotation.      * @return The stream to process.      */
specifier|public
name|PDAppearanceStream
name|getAppearance
parameter_list|(
name|PDAnnotation
name|annotation
parameter_list|)
block|{
return|return
name|annotation
operator|.
name|getNormalAppearanceStream
argument_list|()
return|;
block|}
comment|/**      * Process a child stream of the given page. Cannot be used with #processPage(PDPage).      *      * @param contentStream the child content stream      * @throws IOException if there is an exception while processing the stream      */
specifier|protected
name|void
name|processChildStream
parameter_list|(
name|PDContentStream
name|contentStream
parameter_list|,
name|PDPage
name|page
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isProcessingPage
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Current page has already been set via "
operator|+
literal|" #processPage(PDPage) call #processChildStream(PDContentStream) instead"
argument_list|)
throw|;
block|}
name|initPage
argument_list|(
name|page
argument_list|)
expr_stmt|;
name|processStream
argument_list|(
name|contentStream
argument_list|)
expr_stmt|;
name|currentPage
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Process a content stream.      *      * @param contentStream the content stream      * @throws IOException if there is an exception while processing the stream      */
specifier|private
name|void
name|processStream
parameter_list|(
name|PDContentStream
name|contentStream
parameter_list|)
throws|throws
name|IOException
block|{
name|processStream
argument_list|(
name|contentStream
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Process a content stream.      *      * @param contentStream the content stream      * @param patternBBox fixme: temporary workaround for tiling patterns      * @throws IOException if there is an exception while processing the stream      */
specifier|private
name|void
name|processStream
parameter_list|(
name|PDContentStream
name|contentStream
parameter_list|,
name|PDRectangle
name|patternBBox
parameter_list|)
throws|throws
name|IOException
block|{
comment|// resource lookup: first look for stream resources, then fallback to the current page
name|PDResources
name|parentResources
init|=
name|resources
decl_stmt|;
name|PDResources
name|streamResources
init|=
name|contentStream
operator|.
name|getResources
argument_list|()
decl_stmt|;
if|if
condition|(
name|streamResources
operator|!=
literal|null
condition|)
block|{
name|resources
operator|=
name|streamResources
expr_stmt|;
block|}
else|else
block|{
name|resources
operator|=
name|currentPage
operator|.
name|getResources
argument_list|()
expr_stmt|;
block|}
name|saveGraphicsState
argument_list|()
expr_stmt|;
comment|// transform the CTM using the stream's matrix
name|getGraphicsState
argument_list|()
operator|.
name|getCurrentTransformationMatrix
argument_list|()
operator|.
name|concatenate
argument_list|(
name|contentStream
operator|.
name|getMatrix
argument_list|()
argument_list|)
expr_stmt|;
comment|// clip to bounding box
name|PDRectangle
name|bbox
init|=
name|contentStream
operator|.
name|getBBox
argument_list|()
decl_stmt|;
if|if
condition|(
name|patternBBox
operator|!=
literal|null
condition|)
block|{
name|bbox
operator|=
name|patternBBox
expr_stmt|;
block|}
if|if
condition|(
name|bbox
operator|!=
literal|null
condition|)
block|{
name|Area
name|clip
init|=
operator|new
name|Area
argument_list|(
operator|new
name|GeneralPath
argument_list|(
name|bbox
operator|.
name|toRectangle2D
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|clip
operator|.
name|transform
argument_list|(
name|getGraphicsState
argument_list|()
operator|.
name|getCurrentTransformationMatrix
argument_list|()
operator|.
name|createAffineTransform
argument_list|()
argument_list|)
expr_stmt|;
name|getGraphicsState
argument_list|()
operator|.
name|intersectClippingPath
argument_list|(
name|clip
argument_list|)
expr_stmt|;
block|}
comment|// fixme: stream matrix
name|Matrix
name|oldSubStreamMatrix
init|=
name|subStreamMatrix
decl_stmt|;
name|subStreamMatrix
operator|=
name|getGraphicsState
argument_list|()
operator|.
name|getCurrentTransformationMatrix
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|COSBase
argument_list|>
name|arguments
init|=
operator|new
name|ArrayList
argument_list|<
name|COSBase
argument_list|>
argument_list|()
decl_stmt|;
name|PDFStreamParser
name|parser
init|=
operator|new
name|PDFStreamParser
argument_list|(
name|contentStream
operator|.
name|getContentStream
argument_list|()
argument_list|,
name|forceParsing
argument_list|)
decl_stmt|;
try|try
block|{
name|Iterator
argument_list|<
name|Object
argument_list|>
name|iter
init|=
name|parser
operator|.
name|getTokenIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|token
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|instanceof
name|COSObject
condition|)
block|{
name|arguments
operator|.
name|add
argument_list|(
operator|(
operator|(
name|COSObject
operator|)
name|token
operator|)
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|instanceof
name|Operator
condition|)
block|{
name|processOperator
argument_list|(
operator|(
name|Operator
operator|)
name|token
argument_list|,
name|arguments
argument_list|)
expr_stmt|;
name|arguments
operator|=
operator|new
name|ArrayList
argument_list|<
name|COSBase
argument_list|>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|arguments
operator|.
name|add
argument_list|(
operator|(
name|COSBase
operator|)
name|token
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|parser
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|restoreGraphicsState
argument_list|()
expr_stmt|;
comment|// restore page resources
name|resources
operator|=
name|parentResources
expr_stmt|;
comment|// fixme: stream matrix
name|subStreamMatrix
operator|=
name|oldSubStreamMatrix
expr_stmt|;
block|}
comment|/**      * Called when the BT operator is encountered. This method is for overriding in subclasses, the      * default implementation does nothing.      *      * @throws IOException if there was an error processing the text      */
specifier|public
name|void
name|beginText
parameter_list|()
throws|throws
name|IOException
block|{
comment|// overridden in subclasses
block|}
comment|/**      * Called when the ET operator is encountered. This method is for overriding in subclasses, the      * default implementation does nothing.      *      * @throws IOException if there was an error processing the text      */
specifier|public
name|void
name|endText
parameter_list|()
throws|throws
name|IOException
block|{
comment|// overridden in subclasses
block|}
comment|/**      * Called when a string of text is to be shown.      *      * @param string the encoded text      * @throws IOException if there was an error showing the text      */
specifier|public
name|void
name|showTextString
parameter_list|(
name|byte
index|[]
name|string
parameter_list|)
throws|throws
name|IOException
block|{
name|showText
argument_list|(
name|string
argument_list|)
expr_stmt|;
block|}
comment|/**      * Called when a string of text with spacing adjustments is to be shown.      *      * @param array array of encoded text strings and adjustments      * @throws IOException if there was an error showing the text      */
specifier|public
name|void
name|showTextStrings
parameter_list|(
name|COSArray
name|array
parameter_list|)
throws|throws
name|IOException
block|{
name|PDTextState
name|textState
init|=
name|getGraphicsState
argument_list|()
operator|.
name|getTextState
argument_list|()
decl_stmt|;
name|float
name|fontSize
init|=
name|textState
operator|.
name|getFontSize
argument_list|()
decl_stmt|;
name|float
name|horizontalScaling
init|=
name|textState
operator|.
name|getHorizontalScaling
argument_list|()
operator|/
literal|100f
decl_stmt|;
name|boolean
name|isVertical
init|=
name|textState
operator|.
name|getFont
argument_list|()
operator|.
name|isVertical
argument_list|()
decl_stmt|;
for|for
control|(
name|COSBase
name|obj
range|:
name|array
control|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|COSNumber
condition|)
block|{
name|float
name|tj
init|=
operator|(
operator|(
name|COSNumber
operator|)
name|obj
operator|)
operator|.
name|floatValue
argument_list|()
decl_stmt|;
comment|// calculate the combined displacements
name|float
name|tx
decl_stmt|,
name|ty
decl_stmt|;
if|if
condition|(
name|isVertical
condition|)
block|{
name|tx
operator|=
literal|0
expr_stmt|;
name|ty
operator|=
operator|-
name|tj
operator|/
literal|1000
operator|*
name|fontSize
expr_stmt|;
block|}
else|else
block|{
name|tx
operator|=
operator|-
name|tj
operator|/
literal|1000
operator|*
name|fontSize
operator|*
name|horizontalScaling
expr_stmt|;
name|ty
operator|=
literal|0
expr_stmt|;
block|}
name|applyTextAdjustment
argument_list|(
name|tx
argument_list|,
name|ty
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|COSString
condition|)
block|{
name|byte
index|[]
name|string
init|=
operator|(
operator|(
name|COSString
operator|)
name|obj
operator|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|showText
argument_list|(
name|string
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown type in array for TJ operation:"
operator|+
name|obj
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Applies a text position adjustment from the TJ operator. May be overridden in subclasses.      *      * @param tx x-translation      * @param ty y-translation      */
specifier|protected
name|void
name|applyTextAdjustment
parameter_list|(
name|float
name|tx
parameter_list|,
name|float
name|ty
parameter_list|)
throws|throws
name|IOException
block|{
comment|// update the text matrix
name|textMatrix
operator|.
name|concatenate
argument_list|(
name|Matrix
operator|.
name|getTranslatingInstance
argument_list|(
name|tx
argument_list|,
name|ty
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Process text from the PDF Stream. You should override this method if you want to      * perform an action when encoded text is being processed.      *      * @param string the encoded text      * @throws IOException if there is an error processing the string      */
specifier|protected
name|void
name|showText
parameter_list|(
name|byte
index|[]
name|string
parameter_list|)
throws|throws
name|IOException
block|{
name|PDGraphicsState
name|state
init|=
name|getGraphicsState
argument_list|()
decl_stmt|;
name|PDTextState
name|textState
init|=
name|state
operator|.
name|getTextState
argument_list|()
decl_stmt|;
comment|// get the current font
name|PDFont
name|font
init|=
name|textState
operator|.
name|getFont
argument_list|()
decl_stmt|;
if|if
condition|(
name|font
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No current font, will use default"
argument_list|)
expr_stmt|;
name|font
operator|=
name|PDFontFactory
operator|.
name|createDefaultFont
argument_list|()
expr_stmt|;
block|}
name|float
name|fontSize
init|=
name|textState
operator|.
name|getFontSize
argument_list|()
decl_stmt|;
name|float
name|horizontalScaling
init|=
name|textState
operator|.
name|getHorizontalScaling
argument_list|()
operator|/
literal|100f
decl_stmt|;
name|float
name|charSpacing
init|=
name|textState
operator|.
name|getCharacterSpacing
argument_list|()
decl_stmt|;
comment|// put the text state parameters into matrix form
name|Matrix
name|parameters
init|=
operator|new
name|Matrix
argument_list|(
name|fontSize
operator|*
name|horizontalScaling
argument_list|,
literal|0
argument_list|,
comment|// 0
literal|0
argument_list|,
name|fontSize
argument_list|,
comment|// 0
literal|0
argument_list|,
name|textState
operator|.
name|getRise
argument_list|()
argument_list|)
decl_stmt|;
comment|// 1
comment|// read the stream until it is empty
name|InputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|string
argument_list|)
decl_stmt|;
while|while
condition|(
name|in
operator|.
name|available
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// decode a character
name|int
name|before
init|=
name|in
operator|.
name|available
argument_list|()
decl_stmt|;
name|int
name|code
init|=
name|font
operator|.
name|readCode
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|int
name|codeLength
init|=
name|before
operator|-
name|in
operator|.
name|available
argument_list|()
decl_stmt|;
name|String
name|unicode
init|=
name|font
operator|.
name|toUnicode
argument_list|(
name|code
argument_list|)
decl_stmt|;
comment|// Word spacing shall be applied to every occurrence of the single-byte character code
comment|// 32 in a string when using a simple font or a composite font that defines code 32 as
comment|// a single-byte code.
name|float
name|wordSpacing
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|codeLength
operator|==
literal|1
operator|&&
name|code
operator|==
literal|32
condition|)
block|{
name|wordSpacing
operator|+=
name|textState
operator|.
name|getWordSpacing
argument_list|()
expr_stmt|;
block|}
comment|// text rendering matrix (text space -> device space)
name|Matrix
name|ctm
init|=
name|state
operator|.
name|getCurrentTransformationMatrix
argument_list|()
decl_stmt|;
name|Matrix
name|textRenderingMatrix
init|=
name|parameters
operator|.
name|multiply
argument_list|(
name|textMatrix
argument_list|)
operator|.
name|multiply
argument_list|(
name|ctm
argument_list|)
decl_stmt|;
comment|// get glyph's position vector if this is vertical text
comment|// changes to vertical text should be tested with PDFBOX-2294 and PDFBOX-1422
if|if
condition|(
name|font
operator|.
name|isVertical
argument_list|()
condition|)
block|{
comment|// position vector, in text space
name|Vector
name|v
init|=
name|font
operator|.
name|getPositionVector
argument_list|(
name|code
argument_list|)
decl_stmt|;
comment|// apply the position vector to the horizontal origin to get the vertical origin
name|textRenderingMatrix
operator|.
name|translate
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
comment|// get glyph's horizontal and vertical displacements, in text space
name|Vector
name|w
init|=
name|font
operator|.
name|getDisplacement
argument_list|(
name|code
argument_list|)
decl_stmt|;
comment|// process the decoded glyph
name|saveGraphicsState
argument_list|()
expr_stmt|;
name|getGraphicsState
argument_list|()
operator|.
name|setCurrentTransformationMatrix
argument_list|(
name|textRenderingMatrix
argument_list|)
expr_stmt|;
name|showGlyph
argument_list|(
name|textRenderingMatrix
argument_list|,
name|font
argument_list|,
name|code
argument_list|,
name|unicode
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|restoreGraphicsState
argument_list|()
expr_stmt|;
comment|// calculate the combined displacements
name|float
name|tx
decl_stmt|,
name|ty
decl_stmt|;
if|if
condition|(
name|font
operator|.
name|isVertical
argument_list|()
condition|)
block|{
name|tx
operator|=
literal|0
expr_stmt|;
name|ty
operator|=
name|w
operator|.
name|getY
argument_list|()
operator|*
name|fontSize
operator|+
name|charSpacing
operator|+
name|wordSpacing
expr_stmt|;
block|}
else|else
block|{
name|tx
operator|=
operator|(
name|w
operator|.
name|getX
argument_list|()
operator|*
name|fontSize
operator|+
name|charSpacing
operator|+
name|wordSpacing
operator|)
operator|*
name|horizontalScaling
expr_stmt|;
name|ty
operator|=
literal|0
expr_stmt|;
block|}
comment|// update the text matrix
name|textMatrix
operator|.
name|concatenate
argument_list|(
name|Matrix
operator|.
name|getTranslatingInstance
argument_list|(
name|tx
argument_list|,
name|ty
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Called when a glyph is to be processed.This method is intended for overriding in subclasses,      * the default implementation does nothing.      *      * @param textRenderingMatrix the current text rendering matrix, T<sub>rm</sub>      * @param font the current font      * @param code internal PDF character code for the glyph      * @param unicode the Unicode text for this glyph, or null if the PDF does provide it      * @param displacement the displacement (i.e. advance) of the glyph in text space      * @throws IOException if the glyph cannot be processed      */
specifier|protected
name|void
name|showGlyph
parameter_list|(
name|Matrix
name|textRenderingMatrix
parameter_list|,
name|PDFont
name|font
parameter_list|,
name|int
name|code
parameter_list|,
name|String
name|unicode
parameter_list|,
name|Vector
name|displacement
parameter_list|)
throws|throws
name|IOException
block|{
comment|// overridden in subclasses
block|}
comment|/**      * This is used to handle an operation.      *       * @param operation The operation to perform.      * @param arguments The list of arguments.      * @throws IOException If there is an error processing the operation.      */
specifier|public
name|void
name|processOperator
parameter_list|(
name|String
name|operation
parameter_list|,
name|List
argument_list|<
name|COSBase
argument_list|>
name|arguments
parameter_list|)
throws|throws
name|IOException
block|{
name|Operator
name|operator
init|=
name|Operator
operator|.
name|getOperator
argument_list|(
name|operation
argument_list|)
decl_stmt|;
name|processOperator
argument_list|(
name|operator
argument_list|,
name|arguments
argument_list|)
expr_stmt|;
block|}
comment|/**      * This is used to handle an operation.      *       * @param operator The operation to perform.      * @param arguments The list of arguments.      * @throws IOException If there is an error processing the operation.      */
specifier|protected
name|void
name|processOperator
parameter_list|(
name|Operator
name|operator
parameter_list|,
name|List
argument_list|<
name|COSBase
argument_list|>
name|arguments
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|name
init|=
name|operator
operator|.
name|getName
argument_list|()
decl_stmt|;
name|OperatorProcessor
name|processor
init|=
name|operators
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|processor
operator|!=
literal|null
condition|)
block|{
name|processor
operator|.
name|setContext
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|processor
operator|.
name|process
argument_list|(
name|operator
argument_list|,
name|arguments
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|unsupportedOperator
argument_list|(
name|operator
argument_list|,
name|arguments
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Called when an unsupported operator is encountered.      *      * @param operator The unknown operator.      * @param arguments The list of arguments.      */
specifier|protected
name|void
name|unsupportedOperator
parameter_list|(
name|Operator
name|operator
parameter_list|,
name|List
argument_list|<
name|COSBase
argument_list|>
name|arguments
parameter_list|)
throws|throws
name|IOException
block|{
comment|// overridden in subclasses
block|}
comment|/**      * Pushes the current graphics state to the stack.      */
specifier|public
name|void
name|saveGraphicsState
parameter_list|()
block|{
name|graphicsStack
operator|.
name|push
argument_list|(
name|graphicsStack
operator|.
name|peek
argument_list|()
operator|.
name|clone
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Pops the current graphics state from the stack.      */
specifier|public
name|void
name|restoreGraphicsState
parameter_list|()
block|{
name|graphicsStack
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
comment|/**      * @return Returns the size of the graphicsStack.      */
specifier|public
name|int
name|getGraphicsStackSize
parameter_list|()
block|{
return|return
name|graphicsStack
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**      * @return Returns the graphicsState.      */
specifier|public
name|PDGraphicsState
name|getGraphicsState
parameter_list|()
block|{
return|return
name|graphicsStack
operator|.
name|peek
argument_list|()
return|;
block|}
comment|/**      * @return Returns the textLineMatrix.      */
specifier|public
name|Matrix
name|getTextLineMatrix
parameter_list|()
block|{
return|return
name|textLineMatrix
return|;
block|}
comment|/**      * @param value The textLineMatrix to set.      */
specifier|public
name|void
name|setTextLineMatrix
parameter_list|(
name|Matrix
name|value
parameter_list|)
block|{
name|textLineMatrix
operator|=
name|value
expr_stmt|;
block|}
comment|/**      * @return Returns the textMatrix.      */
specifier|public
name|Matrix
name|getTextMatrix
parameter_list|()
block|{
return|return
name|textMatrix
return|;
block|}
comment|/**      * @param value The textMatrix to set.      */
specifier|public
name|void
name|setTextMatrix
parameter_list|(
name|Matrix
name|value
parameter_list|)
block|{
name|textMatrix
operator|=
name|value
expr_stmt|;
block|}
comment|/**      * Returns the subStreamMatrix.      */
specifier|protected
name|Matrix
name|getSubStreamMatrix
parameter_list|()
block|{
return|return
name|subStreamMatrix
return|;
block|}
comment|/**      * Returns the stream' resources.      */
specifier|public
name|PDResources
name|getResources
parameter_list|()
block|{
return|return
name|resources
return|;
block|}
comment|/**      * Returns the current page.      */
specifier|public
name|PDPage
name|getCurrentPage
parameter_list|()
block|{
return|return
name|currentPage
return|;
block|}
comment|/**      * use the current transformation matrix to transformPoint a single point.      *      * @param x x-coordinate of the point to be transformPoint      * @param y y-coordinate of the point to be transformPoint      * @return the transformed coordinates as Point2D.Double      */
specifier|public
name|Point2D
operator|.
name|Double
name|transformedPoint
parameter_list|(
name|double
name|x
parameter_list|,
name|double
name|y
parameter_list|)
block|{
name|double
index|[]
name|position
init|=
block|{
name|x
block|,
name|y
block|}
decl_stmt|;
name|getGraphicsState
argument_list|()
operator|.
name|getCurrentTransformationMatrix
argument_list|()
operator|.
name|createAffineTransform
argument_list|()
operator|.
name|transform
argument_list|(
name|position
argument_list|,
literal|0
argument_list|,
name|position
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return
operator|new
name|Point2D
operator|.
name|Double
argument_list|(
name|position
index|[
literal|0
index|]
argument_list|,
name|position
index|[
literal|1
index|]
argument_list|)
return|;
block|}
comment|/**      * use the current transformation matrix to transformPoint a PDRectangle.      *       * @param rect the PDRectangle to transformPoint      * @return the transformed coordinates as a GeneralPath      */
specifier|public
name|GeneralPath
name|transformedPDRectanglePath
parameter_list|(
name|PDRectangle
name|rect
parameter_list|)
block|{
name|float
name|x1
init|=
name|rect
operator|.
name|getLowerLeftX
argument_list|()
decl_stmt|;
name|float
name|y1
init|=
name|rect
operator|.
name|getLowerLeftY
argument_list|()
decl_stmt|;
name|float
name|x2
init|=
name|rect
operator|.
name|getUpperRightX
argument_list|()
decl_stmt|;
name|float
name|y2
init|=
name|rect
operator|.
name|getUpperRightY
argument_list|()
decl_stmt|;
name|Point2D
name|p0
init|=
name|transformedPoint
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|)
decl_stmt|;
name|Point2D
name|p1
init|=
name|transformedPoint
argument_list|(
name|x2
argument_list|,
name|y1
argument_list|)
decl_stmt|;
name|Point2D
name|p2
init|=
name|transformedPoint
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|)
decl_stmt|;
name|Point2D
name|p3
init|=
name|transformedPoint
argument_list|(
name|x1
argument_list|,
name|y2
argument_list|)
decl_stmt|;
name|GeneralPath
name|path
init|=
operator|new
name|GeneralPath
argument_list|()
decl_stmt|;
name|path
operator|.
name|moveTo
argument_list|(
operator|(
name|float
operator|)
name|p0
operator|.
name|getX
argument_list|()
argument_list|,
operator|(
name|float
operator|)
name|p0
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
name|path
operator|.
name|lineTo
argument_list|(
operator|(
name|float
operator|)
name|p1
operator|.
name|getX
argument_list|()
argument_list|,
operator|(
name|float
operator|)
name|p1
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
name|path
operator|.
name|lineTo
argument_list|(
operator|(
name|float
operator|)
name|p2
operator|.
name|getX
argument_list|()
argument_list|,
operator|(
name|float
operator|)
name|p2
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
name|path
operator|.
name|lineTo
argument_list|(
operator|(
name|float
operator|)
name|p3
operator|.
name|getX
argument_list|()
argument_list|,
operator|(
name|float
operator|)
name|p3
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
name|path
operator|.
name|closePath
argument_list|()
expr_stmt|;
return|return
name|path
return|;
block|}
comment|// transforms a width using the CTM
specifier|protected
name|float
name|transformWidth
parameter_list|(
name|float
name|width
parameter_list|)
block|{
name|Matrix
name|ctm
init|=
name|getGraphicsState
argument_list|()
operator|.
name|getCurrentTransformationMatrix
argument_list|()
decl_stmt|;
name|float
name|x
init|=
name|ctm
operator|.
name|getValue
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|+
name|ctm
operator|.
name|getValue
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|float
name|y
init|=
name|ctm
operator|.
name|getValue
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|+
name|ctm
operator|.
name|getValue
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
return|return
name|width
operator|*
operator|(
name|float
operator|)
name|Math
operator|.
name|sqrt
argument_list|(
operator|(
name|x
operator|*
name|x
operator|+
name|y
operator|*
name|y
operator|)
operator|*
literal|0.5
argument_list|)
return|;
block|}
block|}
end_class

end_unit

