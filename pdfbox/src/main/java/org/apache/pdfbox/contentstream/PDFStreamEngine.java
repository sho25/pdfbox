begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|contentstream
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|GeneralPath
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|Point2D
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|Rectangle2D
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|contentstream
operator|.
name|operator
operator|.
name|MissingOperandException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|contentstream
operator|.
name|operator
operator|.
name|state
operator|.
name|EmptyGraphicsStackException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSNumber
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|filter
operator|.
name|MissingImageReaderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdfparser
operator|.
name|PDFStreamParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|MissingResourceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDRectangle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDFontFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDType3CharProc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDType3Font
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|PDLineDashPattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDColor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDColorSpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|form
operator|.
name|PDFormXObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|form
operator|.
name|PDTransparencyGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|pattern
operator|.
name|PDTilingPattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|state
operator|.
name|PDGraphicsState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|state
operator|.
name|PDTextState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAppearanceStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|Matrix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|contentstream
operator|.
name|operator
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|contentstream
operator|.
name|operator
operator|.
name|OperatorProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|blend
operator|.
name|BlendMode
import|;
end_import

begin_comment
comment|/**  * Processes a PDF content stream and executes certain operations.  * Provides a callback interface for clients that want to do things with the stream.  *   * @author Ben Litchfield  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|PDFStreamEngine
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|PDFStreamEngine
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|OperatorProcessor
argument_list|>
name|operators
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|80
argument_list|)
decl_stmt|;
specifier|private
name|Matrix
name|textMatrix
decl_stmt|;
specifier|private
name|Matrix
name|textLineMatrix
decl_stmt|;
specifier|private
name|Stack
argument_list|<
name|PDGraphicsState
argument_list|>
name|graphicsStack
init|=
operator|new
name|Stack
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|PDResources
name|resources
decl_stmt|;
specifier|private
name|PDPage
name|currentPage
decl_stmt|;
specifier|private
name|boolean
name|isProcessingPage
decl_stmt|;
specifier|private
name|Matrix
name|initialMatrix
decl_stmt|;
comment|/**      * Creates a new PDFStreamEngine.      */
specifier|protected
name|PDFStreamEngine
parameter_list|()
block|{     }
comment|/**      * Register a custom operator processor with the engine.      *       * @param operator The operator as a string.      * @param op Processor instance.      * @deprecated Use {@link #addOperator(OperatorProcessor)} instead      */
annotation|@
name|Deprecated
specifier|public
name|void
name|registerOperatorProcessor
parameter_list|(
name|String
name|operator
parameter_list|,
name|OperatorProcessor
name|op
parameter_list|)
block|{
name|op
operator|.
name|setContext
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|operators
operator|.
name|put
argument_list|(
name|operator
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds an operator processor to the engine.      *      * @param op operator processor      */
specifier|public
specifier|final
name|void
name|addOperator
parameter_list|(
name|OperatorProcessor
name|op
parameter_list|)
block|{
name|op
operator|.
name|setContext
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|operators
operator|.
name|put
argument_list|(
name|op
operator|.
name|getName
argument_list|()
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
comment|/**      * Initialises the stream engine for the given page.      */
specifier|private
name|void
name|initPage
parameter_list|(
name|PDPage
name|page
parameter_list|)
block|{
if|if
condition|(
name|page
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Page cannot be null"
argument_list|)
throw|;
block|}
name|currentPage
operator|=
name|page
expr_stmt|;
name|graphicsStack
operator|.
name|clear
argument_list|()
expr_stmt|;
name|graphicsStack
operator|.
name|push
argument_list|(
operator|new
name|PDGraphicsState
argument_list|(
name|page
operator|.
name|getCropBox
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|textMatrix
operator|=
literal|null
expr_stmt|;
name|textLineMatrix
operator|=
literal|null
expr_stmt|;
name|resources
operator|=
literal|null
expr_stmt|;
name|initialMatrix
operator|=
name|page
operator|.
name|getMatrix
argument_list|()
expr_stmt|;
block|}
comment|/**      * This will initialise and process the contents of the stream.      *      * @param page the page to process      * @throws IOException if there is an error accessing the stream      */
specifier|public
name|void
name|processPage
parameter_list|(
name|PDPage
name|page
parameter_list|)
throws|throws
name|IOException
block|{
name|initPage
argument_list|(
name|page
argument_list|)
expr_stmt|;
if|if
condition|(
name|page
operator|.
name|hasContents
argument_list|()
condition|)
block|{
name|isProcessingPage
operator|=
literal|true
expr_stmt|;
name|processStream
argument_list|(
name|page
argument_list|)
expr_stmt|;
name|isProcessingPage
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|/**      * Shows a transparency group from the content stream.      *      * @param form transparency group (form) XObject      * @throws IOException if the transparency group cannot be processed      */
specifier|public
name|void
name|showTransparencyGroup
parameter_list|(
name|PDTransparencyGroup
name|form
parameter_list|)
throws|throws
name|IOException
block|{
name|processTransparencyGroup
argument_list|(
name|form
argument_list|)
expr_stmt|;
block|}
comment|/**      * Shows a form from the content stream.      *      * @param form form XObject      * @throws IOException if the form cannot be processed      */
specifier|public
name|void
name|showForm
parameter_list|(
name|PDFormXObject
name|form
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|currentPage
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No current page, call "
operator|+
literal|"#processChildStream(PDContentStream, PDPage) instead"
argument_list|)
throw|;
block|}
name|processStream
argument_list|(
name|form
argument_list|)
expr_stmt|;
block|}
comment|/**      * Processes a soft mask transparency group stream.      * @param group      * @throws IOException      */
specifier|protected
name|void
name|processSoftMask
parameter_list|(
name|PDTransparencyGroup
name|group
parameter_list|)
throws|throws
name|IOException
block|{
name|saveGraphicsState
argument_list|()
expr_stmt|;
name|Matrix
name|softMaskCTM
init|=
name|getGraphicsState
argument_list|()
operator|.
name|getSoftMask
argument_list|()
operator|.
name|getInitialTransformationMatrix
argument_list|()
decl_stmt|;
name|getGraphicsState
argument_list|()
operator|.
name|setCurrentTransformationMatrix
argument_list|(
name|softMaskCTM
argument_list|)
expr_stmt|;
name|processTransparencyGroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|restoreGraphicsState
argument_list|()
expr_stmt|;
block|}
comment|/**      * Processes a transparency group stream.      * @param group      * @throws IOException      */
specifier|protected
name|void
name|processTransparencyGroup
parameter_list|(
name|PDTransparencyGroup
name|group
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|currentPage
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No current page, call "
operator|+
literal|"#processChildStream(PDContentStream, PDPage) instead"
argument_list|)
throw|;
block|}
name|PDResources
name|parent
init|=
name|pushResources
argument_list|(
name|group
argument_list|)
decl_stmt|;
name|Stack
argument_list|<
name|PDGraphicsState
argument_list|>
name|savedStack
init|=
name|saveGraphicsStack
argument_list|()
decl_stmt|;
name|Matrix
name|parentMatrix
init|=
name|initialMatrix
decl_stmt|;
comment|// the stream's initial matrix includes the parent CTM, e.g. this allows a scaled form
name|initialMatrix
operator|=
name|getGraphicsState
argument_list|()
operator|.
name|getCurrentTransformationMatrix
argument_list|()
operator|.
name|clone
argument_list|()
expr_stmt|;
comment|// transform the CTM using the stream's matrix
name|getGraphicsState
argument_list|()
operator|.
name|getCurrentTransformationMatrix
argument_list|()
operator|.
name|concatenate
argument_list|(
name|group
operator|.
name|getMatrix
argument_list|()
argument_list|)
expr_stmt|;
comment|// Before execution of the transparency group XObject’s content stream,
comment|// the current blend mode in the graphics state shall be initialized to Normal,
comment|// the current stroking and nonstroking alpha constants to 1.0, and the current soft mask to None.
name|getGraphicsState
argument_list|()
operator|.
name|setBlendMode
argument_list|(
name|BlendMode
operator|.
name|NORMAL
argument_list|)
expr_stmt|;
name|getGraphicsState
argument_list|()
operator|.
name|setAlphaConstant
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|getGraphicsState
argument_list|()
operator|.
name|setNonStrokeAlphaConstant
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|getGraphicsState
argument_list|()
operator|.
name|setSoftMask
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// clip to bounding box
name|clipToRect
argument_list|(
name|group
operator|.
name|getBBox
argument_list|()
argument_list|)
expr_stmt|;
name|processStreamOperators
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|initialMatrix
operator|=
name|parentMatrix
expr_stmt|;
name|restoreGraphicsStack
argument_list|(
name|savedStack
argument_list|)
expr_stmt|;
name|popResources
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
comment|/**      * Processes a Type 3 character stream.      *      * @param charProc Type 3 character procedure      * @param textRenderingMatrix the Text Rendering Matrix      * @throws IOException if there is an error reading or parsing the character content stream.      */
specifier|protected
name|void
name|processType3Stream
parameter_list|(
name|PDType3CharProc
name|charProc
parameter_list|,
name|Matrix
name|textRenderingMatrix
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|currentPage
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No current page, call "
operator|+
literal|"#processChildStream(PDContentStream, PDPage) instead"
argument_list|)
throw|;
block|}
name|PDResources
name|parent
init|=
name|pushResources
argument_list|(
name|charProc
argument_list|)
decl_stmt|;
name|Stack
argument_list|<
name|PDGraphicsState
argument_list|>
name|savedStack
init|=
name|saveGraphicsStack
argument_list|()
decl_stmt|;
comment|// replace the CTM with the TRM
name|getGraphicsState
argument_list|()
operator|.
name|setCurrentTransformationMatrix
argument_list|(
name|textRenderingMatrix
argument_list|)
expr_stmt|;
comment|// transform the CTM using the stream's matrix (this is the FontMatrix)
name|getGraphicsState
argument_list|()
operator|.
name|getCurrentTransformationMatrix
argument_list|()
operator|.
name|concatenate
argument_list|(
name|charProc
operator|.
name|getMatrix
argument_list|()
argument_list|)
expr_stmt|;
comment|// note: we don't clip to the BBox as it is often wrong, see PDFBOX-1917
comment|// save text matrices (Type 3 stream may contain BT/ET, see PDFBOX-2137)
name|Matrix
name|textMatrixOld
init|=
name|textMatrix
decl_stmt|;
name|textMatrix
operator|=
operator|new
name|Matrix
argument_list|()
expr_stmt|;
name|Matrix
name|textLineMatrixOld
init|=
name|textLineMatrix
decl_stmt|;
name|textLineMatrix
operator|=
operator|new
name|Matrix
argument_list|()
expr_stmt|;
name|processStreamOperators
argument_list|(
name|charProc
argument_list|)
expr_stmt|;
comment|// restore text matrices
name|textMatrix
operator|=
name|textMatrixOld
expr_stmt|;
name|textLineMatrix
operator|=
name|textLineMatrixOld
expr_stmt|;
name|restoreGraphicsStack
argument_list|(
name|savedStack
argument_list|)
expr_stmt|;
name|popResources
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
comment|/**      * Process the given annotation with the specified appearance stream.      *      * @param annotation The annotation containing the appearance stream to process.      * @param appearance The appearance stream to process.      * @throws IOException If there is an error reading or parsing the appearance content stream.      */
specifier|protected
name|void
name|processAnnotation
parameter_list|(
name|PDAnnotation
name|annotation
parameter_list|,
name|PDAppearanceStream
name|appearance
parameter_list|)
throws|throws
name|IOException
block|{
name|PDResources
name|parent
init|=
name|pushResources
argument_list|(
name|appearance
argument_list|)
decl_stmt|;
name|Stack
argument_list|<
name|PDGraphicsState
argument_list|>
name|savedStack
init|=
name|saveGraphicsStack
argument_list|()
decl_stmt|;
name|PDRectangle
name|bbox
init|=
name|appearance
operator|.
name|getBBox
argument_list|()
decl_stmt|;
name|PDRectangle
name|rect
init|=
name|annotation
operator|.
name|getRectangle
argument_list|()
decl_stmt|;
name|Matrix
name|matrix
init|=
name|appearance
operator|.
name|getMatrix
argument_list|()
decl_stmt|;
comment|// zero-sized rectangles are not valid
if|if
condition|(
name|rect
operator|!=
literal|null
operator|&&
name|rect
operator|.
name|getWidth
argument_list|()
operator|>
literal|0
operator|&&
name|rect
operator|.
name|getHeight
argument_list|()
operator|>
literal|0
operator|&&
name|bbox
operator|!=
literal|null
condition|)
block|{
comment|// transformed appearance box  fixme: may be an arbitrary shape
name|Rectangle2D
name|transformedBox
init|=
name|bbox
operator|.
name|transform
argument_list|(
name|matrix
argument_list|)
operator|.
name|getBounds2D
argument_list|()
decl_stmt|;
comment|// compute a matrix which scales and translates the transformed appearance box to align
comment|// with the edges of the annotation's rectangle
name|Matrix
name|a
init|=
name|Matrix
operator|.
name|getTranslateInstance
argument_list|(
name|rect
operator|.
name|getLowerLeftX
argument_list|()
argument_list|,
name|rect
operator|.
name|getLowerLeftY
argument_list|()
argument_list|)
decl_stmt|;
name|a
operator|.
name|concatenate
argument_list|(
name|Matrix
operator|.
name|getScaleInstance
argument_list|(
call|(
name|float
call|)
argument_list|(
name|rect
operator|.
name|getWidth
argument_list|()
operator|/
name|transformedBox
operator|.
name|getWidth
argument_list|()
argument_list|)
argument_list|,
call|(
name|float
call|)
argument_list|(
name|rect
operator|.
name|getHeight
argument_list|()
operator|/
name|transformedBox
operator|.
name|getHeight
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|concatenate
argument_list|(
name|Matrix
operator|.
name|getTranslateInstance
argument_list|(
operator|(
name|float
operator|)
operator|-
name|transformedBox
operator|.
name|getX
argument_list|()
argument_list|,
operator|(
name|float
operator|)
operator|-
name|transformedBox
operator|.
name|getY
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Matrix shall be concatenated with A to form a matrix AA that maps from the appearance's
comment|// coordinate system to the annotation's rectangle in default user space
comment|//
comment|// HOWEVER only the opposite order works for rotated pages with
comment|// filled fields / annotations that have a matrix in the appearance stream, see PDFBOX-3083
name|Matrix
name|aa
init|=
name|Matrix
operator|.
name|concatenate
argument_list|(
name|a
argument_list|,
name|matrix
argument_list|)
decl_stmt|;
comment|// make matrix AA the CTM
name|getGraphicsState
argument_list|()
operator|.
name|setCurrentTransformationMatrix
argument_list|(
name|aa
argument_list|)
expr_stmt|;
comment|// clip to bounding box
name|clipToRect
argument_list|(
name|bbox
argument_list|)
expr_stmt|;
comment|// needed for patterns in appearance streams, e.g. PDFBOX-2182
name|initialMatrix
operator|=
name|aa
operator|.
name|clone
argument_list|()
expr_stmt|;
name|processStreamOperators
argument_list|(
name|appearance
argument_list|)
expr_stmt|;
block|}
name|restoreGraphicsStack
argument_list|(
name|savedStack
argument_list|)
expr_stmt|;
name|popResources
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
comment|/**      * Process the given tiling pattern.      *      * @param tilingPattern the tiling pattern      * @param color color to use, if this is an uncoloured pattern, otherwise null.      * @param colorSpace color space to use, if this is an uncoloured pattern, otherwise null.      * @throws IOException if there is an error reading or parsing the tiling pattern content stream.      */
specifier|protected
specifier|final
name|void
name|processTilingPattern
parameter_list|(
name|PDTilingPattern
name|tilingPattern
parameter_list|,
name|PDColor
name|color
parameter_list|,
name|PDColorSpace
name|colorSpace
parameter_list|)
throws|throws
name|IOException
block|{
name|processTilingPattern
argument_list|(
name|tilingPattern
argument_list|,
name|color
argument_list|,
name|colorSpace
argument_list|,
name|tilingPattern
operator|.
name|getMatrix
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Process the given tiling pattern. Allows the pattern matrix to be overridden for custom      * rendering.      *      * @param tilingPattern the tiling pattern      * @param color color to use, if this is an uncoloured pattern, otherwise null.      * @param colorSpace color space to use, if this is an uncoloured pattern, otherwise null.      * @param patternMatrix the pattern matrix, may be overridden for custom rendering.      * @throws IOException if there is an error reading or parsing the tiling pattern content stream.      */
specifier|protected
specifier|final
name|void
name|processTilingPattern
parameter_list|(
name|PDTilingPattern
name|tilingPattern
parameter_list|,
name|PDColor
name|color
parameter_list|,
name|PDColorSpace
name|colorSpace
parameter_list|,
name|Matrix
name|patternMatrix
parameter_list|)
throws|throws
name|IOException
block|{
name|PDResources
name|parent
init|=
name|pushResources
argument_list|(
name|tilingPattern
argument_list|)
decl_stmt|;
name|Matrix
name|parentMatrix
init|=
name|initialMatrix
decl_stmt|;
name|initialMatrix
operator|=
name|Matrix
operator|.
name|concatenate
argument_list|(
name|initialMatrix
argument_list|,
name|patternMatrix
argument_list|)
expr_stmt|;
comment|// save the original graphics state
name|Stack
argument_list|<
name|PDGraphicsState
argument_list|>
name|savedStack
init|=
name|saveGraphicsStack
argument_list|()
decl_stmt|;
comment|// save a clean state (new clipping path, line path, etc.)
name|Rectangle2D
name|bbox
init|=
name|tilingPattern
operator|.
name|getBBox
argument_list|()
operator|.
name|transform
argument_list|(
name|patternMatrix
argument_list|)
operator|.
name|getBounds2D
argument_list|()
decl_stmt|;
name|PDRectangle
name|rect
init|=
operator|new
name|PDRectangle
argument_list|(
operator|(
name|float
operator|)
name|bbox
operator|.
name|getX
argument_list|()
argument_list|,
operator|(
name|float
operator|)
name|bbox
operator|.
name|getY
argument_list|()
argument_list|,
operator|(
name|float
operator|)
name|bbox
operator|.
name|getWidth
argument_list|()
argument_list|,
operator|(
name|float
operator|)
name|bbox
operator|.
name|getHeight
argument_list|()
argument_list|)
decl_stmt|;
name|graphicsStack
operator|.
name|push
argument_list|(
operator|new
name|PDGraphicsState
argument_list|(
name|rect
argument_list|)
argument_list|)
expr_stmt|;
comment|// non-colored patterns have to be given a color
if|if
condition|(
name|colorSpace
operator|!=
literal|null
condition|)
block|{
name|color
operator|=
operator|new
name|PDColor
argument_list|(
name|color
operator|.
name|getComponents
argument_list|()
argument_list|,
name|colorSpace
argument_list|)
expr_stmt|;
name|getGraphicsState
argument_list|()
operator|.
name|setNonStrokingColorSpace
argument_list|(
name|colorSpace
argument_list|)
expr_stmt|;
name|getGraphicsState
argument_list|()
operator|.
name|setNonStrokingColor
argument_list|(
name|color
argument_list|)
expr_stmt|;
name|getGraphicsState
argument_list|()
operator|.
name|setStrokingColorSpace
argument_list|(
name|colorSpace
argument_list|)
expr_stmt|;
name|getGraphicsState
argument_list|()
operator|.
name|setStrokingColor
argument_list|(
name|color
argument_list|)
expr_stmt|;
block|}
comment|// transform the CTM using the stream's matrix
name|getGraphicsState
argument_list|()
operator|.
name|getCurrentTransformationMatrix
argument_list|()
operator|.
name|concatenate
argument_list|(
name|patternMatrix
argument_list|)
expr_stmt|;
comment|// clip to bounding box
name|clipToRect
argument_list|(
name|tilingPattern
operator|.
name|getBBox
argument_list|()
argument_list|)
expr_stmt|;
name|processStreamOperators
argument_list|(
name|tilingPattern
argument_list|)
expr_stmt|;
name|initialMatrix
operator|=
name|parentMatrix
expr_stmt|;
name|restoreGraphicsStack
argument_list|(
name|savedStack
argument_list|)
expr_stmt|;
name|popResources
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
comment|/**      * Shows the given annotation.      *      * @param annotation An annotation on the current page.      * @throws IOException If an error occurred reading the annotation      */
specifier|public
name|void
name|showAnnotation
parameter_list|(
name|PDAnnotation
name|annotation
parameter_list|)
throws|throws
name|IOException
block|{
name|PDAppearanceStream
name|appearanceStream
init|=
name|getAppearance
argument_list|(
name|annotation
argument_list|)
decl_stmt|;
if|if
condition|(
name|appearanceStream
operator|!=
literal|null
condition|)
block|{
name|processAnnotation
argument_list|(
name|annotation
argument_list|,
name|appearanceStream
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns the appearance stream to process for the given annotation. May be used to render      * a specific appearance such as "hover".      *      * @param annotation The current annotation.      * @return The stream to process.      */
specifier|public
name|PDAppearanceStream
name|getAppearance
parameter_list|(
name|PDAnnotation
name|annotation
parameter_list|)
block|{
return|return
name|annotation
operator|.
name|getNormalAppearanceStream
argument_list|()
return|;
block|}
comment|/**      * Process a child stream of the given page. Cannot be used with {@link #processPage(PDPage)}.      *      * @param contentStream the child content stream      * @param page      * @throws IOException if there is an exception while processing the stream      */
specifier|protected
name|void
name|processChildStream
parameter_list|(
name|PDContentStream
name|contentStream
parameter_list|,
name|PDPage
name|page
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isProcessingPage
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Current page has already been set via "
operator|+
literal|" #processPage(PDPage) call #processChildStream(PDContentStream) instead"
argument_list|)
throw|;
block|}
name|initPage
argument_list|(
name|page
argument_list|)
expr_stmt|;
name|processStream
argument_list|(
name|contentStream
argument_list|)
expr_stmt|;
name|currentPage
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Process a content stream.      *      * @param contentStream the content stream      * @throws IOException if there is an exception while processing the stream      */
specifier|private
name|void
name|processStream
parameter_list|(
name|PDContentStream
name|contentStream
parameter_list|)
throws|throws
name|IOException
block|{
name|PDResources
name|parent
init|=
name|pushResources
argument_list|(
name|contentStream
argument_list|)
decl_stmt|;
name|Stack
argument_list|<
name|PDGraphicsState
argument_list|>
name|savedStack
init|=
name|saveGraphicsStack
argument_list|()
decl_stmt|;
name|Matrix
name|parentMatrix
init|=
name|initialMatrix
decl_stmt|;
comment|// transform the CTM using the stream's matrix
name|getGraphicsState
argument_list|()
operator|.
name|getCurrentTransformationMatrix
argument_list|()
operator|.
name|concatenate
argument_list|(
name|contentStream
operator|.
name|getMatrix
argument_list|()
argument_list|)
expr_stmt|;
comment|// the stream's initial matrix includes the parent CTM, e.g. this allows a scaled form
name|initialMatrix
operator|=
name|getGraphicsState
argument_list|()
operator|.
name|getCurrentTransformationMatrix
argument_list|()
operator|.
name|clone
argument_list|()
expr_stmt|;
comment|// clip to bounding box
name|PDRectangle
name|bbox
init|=
name|contentStream
operator|.
name|getBBox
argument_list|()
decl_stmt|;
name|clipToRect
argument_list|(
name|bbox
argument_list|)
expr_stmt|;
name|processStreamOperators
argument_list|(
name|contentStream
argument_list|)
expr_stmt|;
name|initialMatrix
operator|=
name|parentMatrix
expr_stmt|;
name|restoreGraphicsStack
argument_list|(
name|savedStack
argument_list|)
expr_stmt|;
name|popResources
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
comment|/**      * Processes the operators of the given content stream.      *      * @param contentStream to content stream to parse.      * @throws IOException if there is an error reading or parsing the content stream.      */
specifier|private
name|void
name|processStreamOperators
parameter_list|(
name|PDContentStream
name|contentStream
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|COSBase
argument_list|>
name|arguments
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|PDFStreamParser
name|parser
init|=
operator|new
name|PDFStreamParser
argument_list|(
name|contentStream
argument_list|)
decl_stmt|;
name|Object
name|token
init|=
name|parser
operator|.
name|parseNextToken
argument_list|()
decl_stmt|;
while|while
condition|(
name|token
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|token
operator|instanceof
name|COSObject
condition|)
block|{
name|arguments
operator|.
name|add
argument_list|(
operator|(
operator|(
name|COSObject
operator|)
name|token
operator|)
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|instanceof
name|Operator
condition|)
block|{
name|processOperator
argument_list|(
operator|(
name|Operator
operator|)
name|token
argument_list|,
name|arguments
argument_list|)
expr_stmt|;
name|arguments
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|arguments
operator|.
name|add
argument_list|(
operator|(
name|COSBase
operator|)
name|token
argument_list|)
expr_stmt|;
block|}
name|token
operator|=
name|parser
operator|.
name|parseNextToken
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Pushes the given stream's resources, returning the previous resources.      */
specifier|private
name|PDResources
name|pushResources
parameter_list|(
name|PDContentStream
name|contentStream
parameter_list|)
block|{
comment|// resource lookup: first look for stream resources, then fallback to the current page
name|PDResources
name|parentResources
init|=
name|resources
decl_stmt|;
name|PDResources
name|streamResources
init|=
name|contentStream
operator|.
name|getResources
argument_list|()
decl_stmt|;
if|if
condition|(
name|streamResources
operator|!=
literal|null
condition|)
block|{
name|resources
operator|=
name|streamResources
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|resources
operator|!=
literal|null
condition|)
block|{
comment|// inherit directly from parent stream, this is not in the PDF spec, but the file from
comment|// PDFBOX-1359 does this and works in Acrobat
block|}
else|else
block|{
name|resources
operator|=
name|currentPage
operator|.
name|getResources
argument_list|()
expr_stmt|;
block|}
comment|// resources are required in PDF
if|if
condition|(
name|resources
operator|==
literal|null
condition|)
block|{
name|resources
operator|=
operator|new
name|PDResources
argument_list|()
expr_stmt|;
block|}
return|return
name|parentResources
return|;
block|}
comment|/**      * Pops the current resources, replacing them with the given resources.      */
specifier|private
name|void
name|popResources
parameter_list|(
name|PDResources
name|parentResources
parameter_list|)
block|{
name|resources
operator|=
name|parentResources
expr_stmt|;
block|}
comment|/**      * Transforms the given rectangle using the CTM and then intersects it with the current      * clipping area.      */
specifier|private
name|void
name|clipToRect
parameter_list|(
name|PDRectangle
name|rectangle
parameter_list|)
block|{
if|if
condition|(
name|rectangle
operator|!=
literal|null
condition|)
block|{
name|GeneralPath
name|clip
init|=
name|rectangle
operator|.
name|transform
argument_list|(
name|getGraphicsState
argument_list|()
operator|.
name|getCurrentTransformationMatrix
argument_list|()
argument_list|)
decl_stmt|;
name|getGraphicsState
argument_list|()
operator|.
name|intersectClippingPath
argument_list|(
name|clip
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Called when the BT operator is encountered. This method is for overriding in subclasses, the      * default implementation does nothing.      *      * @throws IOException if there was an error processing the text      */
specifier|public
name|void
name|beginText
parameter_list|()
throws|throws
name|IOException
block|{
comment|// overridden in subclasses
block|}
comment|/**      * Called when the ET operator is encountered. This method is for overriding in subclasses, the      * default implementation does nothing.      *      * @throws IOException if there was an error processing the text      */
specifier|public
name|void
name|endText
parameter_list|()
throws|throws
name|IOException
block|{
comment|// overridden in subclasses
block|}
comment|/**      * Called when a string of text is to be shown.      *      * @param string the encoded text      * @throws IOException if there was an error showing the text      */
specifier|public
name|void
name|showTextString
parameter_list|(
name|byte
index|[]
name|string
parameter_list|)
throws|throws
name|IOException
block|{
name|showText
argument_list|(
name|string
argument_list|)
expr_stmt|;
block|}
comment|/**      * Called when a string of text with spacing adjustments is to be shown.      *      * @param array array of encoded text strings and adjustments      * @throws IOException if there was an error showing the text      */
specifier|public
name|void
name|showTextStrings
parameter_list|(
name|COSArray
name|array
parameter_list|)
throws|throws
name|IOException
block|{
name|PDTextState
name|textState
init|=
name|getGraphicsState
argument_list|()
operator|.
name|getTextState
argument_list|()
decl_stmt|;
name|float
name|fontSize
init|=
name|textState
operator|.
name|getFontSize
argument_list|()
decl_stmt|;
name|float
name|horizontalScaling
init|=
name|textState
operator|.
name|getHorizontalScaling
argument_list|()
operator|/
literal|100f
decl_stmt|;
name|PDFont
name|font
init|=
name|textState
operator|.
name|getFont
argument_list|()
decl_stmt|;
name|boolean
name|isVertical
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|font
operator|!=
literal|null
condition|)
block|{
name|isVertical
operator|=
name|font
operator|.
name|isVertical
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|COSBase
name|obj
range|:
name|array
control|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|COSNumber
condition|)
block|{
name|float
name|tj
init|=
operator|(
operator|(
name|COSNumber
operator|)
name|obj
operator|)
operator|.
name|floatValue
argument_list|()
decl_stmt|;
comment|// calculate the combined displacements
name|float
name|tx
decl_stmt|,
name|ty
decl_stmt|;
if|if
condition|(
name|isVertical
condition|)
block|{
name|tx
operator|=
literal|0
expr_stmt|;
name|ty
operator|=
operator|-
name|tj
operator|/
literal|1000
operator|*
name|fontSize
expr_stmt|;
block|}
else|else
block|{
name|tx
operator|=
operator|-
name|tj
operator|/
literal|1000
operator|*
name|fontSize
operator|*
name|horizontalScaling
expr_stmt|;
name|ty
operator|=
literal|0
expr_stmt|;
block|}
name|applyTextAdjustment
argument_list|(
name|tx
argument_list|,
name|ty
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|COSString
condition|)
block|{
name|byte
index|[]
name|string
init|=
operator|(
operator|(
name|COSString
operator|)
name|obj
operator|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|showText
argument_list|(
name|string
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown type in array for TJ operation:"
operator|+
name|obj
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Applies a text position adjustment from the TJ operator. May be overridden in subclasses.      *      * @param tx x-translation      * @param ty y-translation      */
specifier|protected
name|void
name|applyTextAdjustment
parameter_list|(
name|float
name|tx
parameter_list|,
name|float
name|ty
parameter_list|)
throws|throws
name|IOException
block|{
comment|// update the text matrix
name|textMatrix
operator|.
name|concatenate
argument_list|(
name|Matrix
operator|.
name|getTranslateInstance
argument_list|(
name|tx
argument_list|,
name|ty
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Process text from the PDF Stream. You should override this method if you want to      * perform an action when encoded text is being processed.      *      * @param string the encoded text      * @throws IOException if there is an error processing the string      */
specifier|protected
name|void
name|showText
parameter_list|(
name|byte
index|[]
name|string
parameter_list|)
throws|throws
name|IOException
block|{
name|PDGraphicsState
name|state
init|=
name|getGraphicsState
argument_list|()
decl_stmt|;
name|PDTextState
name|textState
init|=
name|state
operator|.
name|getTextState
argument_list|()
decl_stmt|;
comment|// get the current font
name|PDFont
name|font
init|=
name|textState
operator|.
name|getFont
argument_list|()
decl_stmt|;
if|if
condition|(
name|font
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No current font, will use default"
argument_list|)
expr_stmt|;
name|font
operator|=
name|PDFontFactory
operator|.
name|createDefaultFont
argument_list|()
expr_stmt|;
block|}
name|float
name|fontSize
init|=
name|textState
operator|.
name|getFontSize
argument_list|()
decl_stmt|;
name|float
name|horizontalScaling
init|=
name|textState
operator|.
name|getHorizontalScaling
argument_list|()
operator|/
literal|100f
decl_stmt|;
name|float
name|charSpacing
init|=
name|textState
operator|.
name|getCharacterSpacing
argument_list|()
decl_stmt|;
comment|// put the text state parameters into matrix form
name|Matrix
name|parameters
init|=
operator|new
name|Matrix
argument_list|(
name|fontSize
operator|*
name|horizontalScaling
argument_list|,
literal|0
argument_list|,
comment|// 0
literal|0
argument_list|,
name|fontSize
argument_list|,
comment|// 0
literal|0
argument_list|,
name|textState
operator|.
name|getRise
argument_list|()
argument_list|)
decl_stmt|;
comment|// 1
comment|// read the stream until it is empty
name|InputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|string
argument_list|)
decl_stmt|;
while|while
condition|(
name|in
operator|.
name|available
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// decode a character
name|int
name|before
init|=
name|in
operator|.
name|available
argument_list|()
decl_stmt|;
name|int
name|code
init|=
name|font
operator|.
name|readCode
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|int
name|codeLength
init|=
name|before
operator|-
name|in
operator|.
name|available
argument_list|()
decl_stmt|;
name|String
name|unicode
init|=
name|font
operator|.
name|toUnicode
argument_list|(
name|code
argument_list|)
decl_stmt|;
comment|// Word spacing shall be applied to every occurrence of the single-byte character code
comment|// 32 in a string when using a simple font or a composite font that defines code 32 as
comment|// a single-byte code.
name|float
name|wordSpacing
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|codeLength
operator|==
literal|1
operator|&&
name|code
operator|==
literal|32
condition|)
block|{
name|wordSpacing
operator|+=
name|textState
operator|.
name|getWordSpacing
argument_list|()
expr_stmt|;
block|}
comment|// text rendering matrix (text space -> device space)
name|Matrix
name|ctm
init|=
name|state
operator|.
name|getCurrentTransformationMatrix
argument_list|()
decl_stmt|;
name|Matrix
name|textRenderingMatrix
init|=
name|parameters
operator|.
name|multiply
argument_list|(
name|textMatrix
argument_list|)
operator|.
name|multiply
argument_list|(
name|ctm
argument_list|)
decl_stmt|;
comment|// get glyph's position vector if this is vertical text
comment|// changes to vertical text should be tested with PDFBOX-2294 and PDFBOX-1422
if|if
condition|(
name|font
operator|.
name|isVertical
argument_list|()
condition|)
block|{
comment|// position vector, in text space
name|Vector
name|v
init|=
name|font
operator|.
name|getPositionVector
argument_list|(
name|code
argument_list|)
decl_stmt|;
comment|// apply the position vector to the horizontal origin to get the vertical origin
name|textRenderingMatrix
operator|.
name|translate
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
comment|// get glyph's horizontal and vertical displacements, in text space
name|Vector
name|w
init|=
name|font
operator|.
name|getDisplacement
argument_list|(
name|code
argument_list|)
decl_stmt|;
comment|// process the decoded glyph
name|saveGraphicsState
argument_list|()
expr_stmt|;
name|Matrix
name|textMatrixOld
init|=
name|textMatrix
decl_stmt|;
name|Matrix
name|textLineMatrixOld
init|=
name|textLineMatrix
decl_stmt|;
name|showGlyph
argument_list|(
name|textRenderingMatrix
argument_list|,
name|font
argument_list|,
name|code
argument_list|,
name|unicode
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|textMatrix
operator|=
name|textMatrixOld
expr_stmt|;
name|textLineMatrix
operator|=
name|textLineMatrixOld
expr_stmt|;
name|restoreGraphicsState
argument_list|()
expr_stmt|;
comment|// calculate the combined displacements
name|float
name|tx
decl_stmt|,
name|ty
decl_stmt|;
if|if
condition|(
name|font
operator|.
name|isVertical
argument_list|()
condition|)
block|{
name|tx
operator|=
literal|0
expr_stmt|;
name|ty
operator|=
name|w
operator|.
name|getY
argument_list|()
operator|*
name|fontSize
operator|+
name|charSpacing
operator|+
name|wordSpacing
expr_stmt|;
block|}
else|else
block|{
name|tx
operator|=
operator|(
name|w
operator|.
name|getX
argument_list|()
operator|*
name|fontSize
operator|+
name|charSpacing
operator|+
name|wordSpacing
operator|)
operator|*
name|horizontalScaling
expr_stmt|;
name|ty
operator|=
literal|0
expr_stmt|;
block|}
comment|// update the text matrix
name|textMatrix
operator|.
name|concatenate
argument_list|(
name|Matrix
operator|.
name|getTranslateInstance
argument_list|(
name|tx
argument_list|,
name|ty
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Called when a glyph is to be processed.This method is intended for overriding in subclasses,      * the default implementation does nothing.      *      * @param textRenderingMatrix the current text rendering matrix, T<sub>rm</sub>      * @param font the current font      * @param code internal PDF character code for the glyph      * @param unicode the Unicode text for this glyph, or null if the PDF does provide it      * @param displacement the displacement (i.e. advance) of the glyph in text space      * @throws IOException if the glyph cannot be processed      */
specifier|protected
name|void
name|showGlyph
parameter_list|(
name|Matrix
name|textRenderingMatrix
parameter_list|,
name|PDFont
name|font
parameter_list|,
name|int
name|code
parameter_list|,
name|String
name|unicode
parameter_list|,
name|Vector
name|displacement
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|font
operator|instanceof
name|PDType3Font
condition|)
block|{
name|showType3Glyph
argument_list|(
name|textRenderingMatrix
argument_list|,
operator|(
name|PDType3Font
operator|)
name|font
argument_list|,
name|code
argument_list|,
name|unicode
argument_list|,
name|displacement
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|showFontGlyph
argument_list|(
name|textRenderingMatrix
argument_list|,
name|font
argument_list|,
name|code
argument_list|,
name|unicode
argument_list|,
name|displacement
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Called when a glyph is to be processed.This method is intended for overriding in subclasses,      * the default implementation does nothing.      *      * @param textRenderingMatrix the current text rendering matrix, T<sub>rm</sub>      * @param font the current font      * @param code internal PDF character code for the glyph      * @param unicode the Unicode text for this glyph, or null if the PDF does provide it      * @param displacement the displacement (i.e. advance) of the glyph in text space      * @throws IOException if the glyph cannot be processed      */
specifier|protected
name|void
name|showFontGlyph
parameter_list|(
name|Matrix
name|textRenderingMatrix
parameter_list|,
name|PDFont
name|font
parameter_list|,
name|int
name|code
parameter_list|,
name|String
name|unicode
parameter_list|,
name|Vector
name|displacement
parameter_list|)
throws|throws
name|IOException
block|{
comment|// overridden in subclasses
block|}
comment|/**      * Called when a glyph is to be processed.This method is intended for overriding in subclasses,      * the default implementation does nothing.      *      * @param textRenderingMatrix the current text rendering matrix, T<sub>rm</sub>      * @param font the current font      * @param code internal PDF character code for the glyph      * @param unicode the Unicode text for this glyph, or null if the PDF does provide it      * @param displacement the displacement (i.e. advance) of the glyph in text space      * @throws IOException if the glyph cannot be processed      */
specifier|protected
name|void
name|showType3Glyph
parameter_list|(
name|Matrix
name|textRenderingMatrix
parameter_list|,
name|PDType3Font
name|font
parameter_list|,
name|int
name|code
parameter_list|,
name|String
name|unicode
parameter_list|,
name|Vector
name|displacement
parameter_list|)
throws|throws
name|IOException
block|{
name|PDType3CharProc
name|charProc
init|=
name|font
operator|.
name|getCharProc
argument_list|(
name|code
argument_list|)
decl_stmt|;
if|if
condition|(
name|charProc
operator|!=
literal|null
condition|)
block|{
name|processType3Stream
argument_list|(
name|charProc
argument_list|,
name|textRenderingMatrix
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This is used to handle an operation.      *       * @param operation The operation to perform.      * @param arguments The list of arguments.      * @throws IOException If there is an error processing the operation.      */
specifier|public
name|void
name|processOperator
parameter_list|(
name|String
name|operation
parameter_list|,
name|List
argument_list|<
name|COSBase
argument_list|>
name|arguments
parameter_list|)
throws|throws
name|IOException
block|{
name|Operator
name|operator
init|=
name|Operator
operator|.
name|getOperator
argument_list|(
name|operation
argument_list|)
decl_stmt|;
name|processOperator
argument_list|(
name|operator
argument_list|,
name|arguments
argument_list|)
expr_stmt|;
block|}
comment|/**      * This is used to handle an operation.      *       * @param operator The operation to perform.      * @param operands The list of arguments.      * @throws IOException If there is an error processing the operation.      */
specifier|protected
name|void
name|processOperator
parameter_list|(
name|Operator
name|operator
parameter_list|,
name|List
argument_list|<
name|COSBase
argument_list|>
name|operands
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|name
init|=
name|operator
operator|.
name|getName
argument_list|()
decl_stmt|;
name|OperatorProcessor
name|processor
init|=
name|operators
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|processor
operator|!=
literal|null
condition|)
block|{
name|processor
operator|.
name|setContext
argument_list|(
name|this
argument_list|)
expr_stmt|;
try|try
block|{
name|processor
operator|.
name|process
argument_list|(
name|operator
argument_list|,
name|operands
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|operatorException
argument_list|(
name|operator
argument_list|,
name|operands
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|unsupportedOperator
argument_list|(
name|operator
argument_list|,
name|operands
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Called when an unsupported operator is encountered.      *      * @param operator The unknown operator.      * @param operands The list of operands.      */
specifier|protected
name|void
name|unsupportedOperator
parameter_list|(
name|Operator
name|operator
parameter_list|,
name|List
argument_list|<
name|COSBase
argument_list|>
name|operands
parameter_list|)
throws|throws
name|IOException
block|{
comment|// overridden in subclasses
block|}
comment|/**      * Called when an exception is thrown by an operator.      *      * @param operator The unknown operator.      * @param operands The list of operands.      */
specifier|protected
name|void
name|operatorException
parameter_list|(
name|Operator
name|operator
parameter_list|,
name|List
argument_list|<
name|COSBase
argument_list|>
name|operands
parameter_list|,
name|IOException
name|e
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|e
operator|instanceof
name|MissingOperandException
operator|||
name|e
operator|instanceof
name|MissingResourceException
operator|||
name|e
operator|instanceof
name|MissingImageReaderException
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|EmptyGraphicsStackException
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operator
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Do"
argument_list|)
condition|)
block|{
comment|// todo: this too forgiving, but PDFBox has always worked this way for DrawObject
comment|//       some careful refactoring is needed
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
comment|/**      * Pushes the current graphics state to the stack.      */
specifier|public
name|void
name|saveGraphicsState
parameter_list|()
block|{
name|graphicsStack
operator|.
name|push
argument_list|(
name|graphicsStack
operator|.
name|peek
argument_list|()
operator|.
name|clone
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Pops the current graphics state from the stack.      */
specifier|public
name|void
name|restoreGraphicsState
parameter_list|()
block|{
name|graphicsStack
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
comment|/**      * Saves the entire graphics stack.      */
specifier|protected
specifier|final
name|Stack
argument_list|<
name|PDGraphicsState
argument_list|>
name|saveGraphicsStack
parameter_list|()
block|{
name|Stack
argument_list|<
name|PDGraphicsState
argument_list|>
name|savedStack
init|=
name|graphicsStack
decl_stmt|;
name|graphicsStack
operator|=
operator|new
name|Stack
argument_list|<>
argument_list|()
expr_stmt|;
name|graphicsStack
operator|.
name|add
argument_list|(
name|savedStack
operator|.
name|peek
argument_list|()
operator|.
name|clone
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|savedStack
return|;
block|}
comment|/**      * Restores the entire graphics stack.      */
specifier|protected
specifier|final
name|void
name|restoreGraphicsStack
parameter_list|(
name|Stack
argument_list|<
name|PDGraphicsState
argument_list|>
name|snapshot
parameter_list|)
block|{
name|graphicsStack
operator|=
name|snapshot
expr_stmt|;
block|}
comment|/**      * @return Returns the size of the graphicsStack.      */
specifier|public
name|int
name|getGraphicsStackSize
parameter_list|()
block|{
return|return
name|graphicsStack
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**      * @return Returns the graphicsState.      */
specifier|public
name|PDGraphicsState
name|getGraphicsState
parameter_list|()
block|{
return|return
name|graphicsStack
operator|.
name|peek
argument_list|()
return|;
block|}
comment|/**      * @return Returns the textLineMatrix.      */
specifier|public
name|Matrix
name|getTextLineMatrix
parameter_list|()
block|{
return|return
name|textLineMatrix
return|;
block|}
comment|/**      * @param value The textLineMatrix to set.      */
specifier|public
name|void
name|setTextLineMatrix
parameter_list|(
name|Matrix
name|value
parameter_list|)
block|{
name|textLineMatrix
operator|=
name|value
expr_stmt|;
block|}
comment|/**      * @return Returns the textMatrix.      */
specifier|public
name|Matrix
name|getTextMatrix
parameter_list|()
block|{
return|return
name|textMatrix
return|;
block|}
comment|/**      * @param value The textMatrix to set.      */
specifier|public
name|void
name|setTextMatrix
parameter_list|(
name|Matrix
name|value
parameter_list|)
block|{
name|textMatrix
operator|=
name|value
expr_stmt|;
block|}
comment|/**      * @param array dash array      * @param phase dash phase      */
specifier|public
name|void
name|setLineDashPattern
parameter_list|(
name|COSArray
name|array
parameter_list|,
name|int
name|phase
parameter_list|)
block|{
if|if
condition|(
name|phase
operator|<
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Dash phase has negative value "
operator|+
name|phase
operator|+
literal|", set to 0"
argument_list|)
expr_stmt|;
name|phase
operator|=
literal|0
expr_stmt|;
block|}
name|PDLineDashPattern
name|lineDash
init|=
operator|new
name|PDLineDashPattern
argument_list|(
name|array
argument_list|,
name|phase
argument_list|)
decl_stmt|;
name|getGraphicsState
argument_list|()
operator|.
name|setLineDashPattern
argument_list|(
name|lineDash
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the stream' resources.      */
specifier|public
name|PDResources
name|getResources
parameter_list|()
block|{
return|return
name|resources
return|;
block|}
comment|/**      * Returns the current page.      */
specifier|public
name|PDPage
name|getCurrentPage
parameter_list|()
block|{
return|return
name|currentPage
return|;
block|}
comment|/**      * Gets the stream's initial matrix.      */
specifier|public
name|Matrix
name|getInitialMatrix
parameter_list|()
block|{
return|return
name|initialMatrix
return|;
block|}
comment|/**      * Transforms a point using the CTM.      */
specifier|public
name|Point2D
operator|.
name|Float
name|transformedPoint
parameter_list|(
name|float
name|x
parameter_list|,
name|float
name|y
parameter_list|)
block|{
name|float
index|[]
name|position
init|=
block|{
name|x
block|,
name|y
block|}
decl_stmt|;
name|getGraphicsState
argument_list|()
operator|.
name|getCurrentTransformationMatrix
argument_list|()
operator|.
name|createAffineTransform
argument_list|()
operator|.
name|transform
argument_list|(
name|position
argument_list|,
literal|0
argument_list|,
name|position
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return
operator|new
name|Point2D
operator|.
name|Float
argument_list|(
name|position
index|[
literal|0
index|]
argument_list|,
name|position
index|[
literal|1
index|]
argument_list|)
return|;
block|}
comment|/**      * Transforms a width using the CTM.      */
specifier|protected
name|float
name|transformWidth
parameter_list|(
name|float
name|width
parameter_list|)
block|{
name|Matrix
name|ctm
init|=
name|getGraphicsState
argument_list|()
operator|.
name|getCurrentTransformationMatrix
argument_list|()
decl_stmt|;
name|float
name|x
init|=
name|ctm
operator|.
name|getScaleX
argument_list|()
operator|+
name|ctm
operator|.
name|getShearX
argument_list|()
decl_stmt|;
name|float
name|y
init|=
name|ctm
operator|.
name|getScaleY
argument_list|()
operator|+
name|ctm
operator|.
name|getShearY
argument_list|()
decl_stmt|;
return|return
name|width
operator|*
operator|(
name|float
operator|)
name|Math
operator|.
name|sqrt
argument_list|(
operator|(
name|x
operator|*
name|x
operator|+
name|y
operator|*
name|y
operator|)
operator|*
literal|0.5
argument_list|)
return|;
block|}
block|}
end_class

end_unit

