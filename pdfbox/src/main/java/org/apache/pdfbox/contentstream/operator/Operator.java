begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|contentstream
operator|.
name|operator
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_comment
comment|/**  * An Operator in a PDF content stream.  *  * @author Ben Litchfield  */
end_comment

begin_class
specifier|public
class|class
name|Operator
block|{
specifier|private
name|String
name|theOperator
decl_stmt|;
specifier|private
name|byte
index|[]
name|imageData
decl_stmt|;
specifier|private
name|COSDictionary
name|imageParameters
decl_stmt|;
comment|/** map for singleton operator objects; use {@link ConcurrentHashMap} for better scalability with multiple threads */
specifier|private
specifier|final
specifier|static
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Operator
argument_list|>
name|operators
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Operator
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Constructor.      *      * @param aOperator The operator that this object will represent.      */
specifier|private
name|Operator
parameter_list|(
name|String
name|aOperator
parameter_list|)
block|{
name|theOperator
operator|=
name|aOperator
expr_stmt|;
if|if
condition|(
name|aOperator
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Operators are not allowed to start with / '"
operator|+
name|aOperator
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
comment|/**      * This is used to create/cache operators in the system.      *      * @param operator The operator for the system.      *      * @return The operator that matches the operator keyword.      */
specifier|public
specifier|static
name|Operator
name|getOperator
parameter_list|(
name|String
name|operator
parameter_list|)
block|{
name|Operator
name|operation
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|operator
operator|.
name|equals
argument_list|(
literal|"ID"
argument_list|)
operator|||
name|operator
operator|.
name|equals
argument_list|(
literal|"BI"
argument_list|)
condition|)
block|{
comment|//we can't cache the ID operators.
name|operation
operator|=
operator|new
name|Operator
argument_list|(
name|operator
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|operation
operator|=
name|operators
operator|.
name|get
argument_list|(
name|operator
argument_list|)
expr_stmt|;
if|if
condition|(
name|operation
operator|==
literal|null
condition|)
block|{
comment|// another thread may has already added an operator of this kind
comment|// make sure that we get the same operator
name|operation
operator|=
name|operators
operator|.
name|putIfAbsent
argument_list|(
name|operator
argument_list|,
operator|new
name|Operator
argument_list|(
name|operator
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|operation
operator|==
literal|null
condition|)
block|{
name|operation
operator|=
name|operators
operator|.
name|get
argument_list|(
name|operator
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|operation
return|;
block|}
comment|/**      * This will get the name of the operator.      *      * @return The string representation of the operation.      */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|theOperator
return|;
block|}
comment|/**      * This will print a string rep of this class.      *      * @return A string rep of this class.      */
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"PDFOperator{"
operator|+
name|theOperator
operator|+
literal|"}"
return|;
block|}
comment|/**      * This is the special case for the ID operator where there are just random      * bytes inlined the stream.      *      * @return Value of property imageData.      */
specifier|public
name|byte
index|[]
name|getImageData
parameter_list|()
block|{
return|return
name|this
operator|.
name|imageData
return|;
block|}
comment|/**      * This will set the image data, this is only used for the ID operator.      *      * @param imageDataArray New value of property imageData.      */
specifier|public
name|void
name|setImageData
parameter_list|(
name|byte
index|[]
name|imageDataArray
parameter_list|)
block|{
name|imageData
operator|=
name|imageDataArray
expr_stmt|;
block|}
comment|/**      * This will get the image parameters, this is only valid for BI operators.      *      * @return The image parameters.      */
specifier|public
name|COSDictionary
name|getImageParameters
parameter_list|()
block|{
return|return
name|imageParameters
return|;
block|}
comment|/**      * This will set the image parameters, this is only valid for BI operators.      *      * @param params The image parameters.      */
specifier|public
name|void
name|setImageParameters
parameter_list|(
name|COSDictionary
name|params
parameter_list|)
block|{
name|imageParameters
operator|=
name|params
expr_stmt|;
block|}
block|}
end_class

end_unit

