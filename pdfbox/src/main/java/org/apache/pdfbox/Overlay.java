begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|exceptions
operator|.
name|COSVisitorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdfparser
operator|.
name|PDFParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdfwriter
operator|.
name|COSWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocumentCatalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDResources
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Overlay on document with another one.<br>  * e.g. Overlay an invoice with your company layout<br>  *<br>  * How it (should) work:<br>  * If the document has 10 pages, and the layout 2 the following is the result:<br>  *<pre>  * Document: 1234567890  * Layout  : 1212121212  *</pre>  *<br>  *  * @author Mario Ivankovits (mario@ops.co.at)  * @author<a href="ben@benlitchfield.com">Ben Litchfield</a>  *  * @version $Revision: 1.7 $  */
end_comment

begin_class
specifier|public
class|class
name|Overlay
block|{
comment|/**      * @deprecated use the {@link COSName#XOBJECT} constant instead      */
specifier|public
specifier|static
specifier|final
name|COSName
name|XOBJECT
init|=
name|COSName
operator|.
name|XOBJECT
decl_stmt|;
comment|/**      * @deprecated use the {@link COSName#PROC_SET} constant instead      */
specifier|public
specifier|static
specifier|final
name|COSName
name|PROC_SET
init|=
name|COSName
operator|.
name|PROC_SET
decl_stmt|;
comment|/**      * @deprecated use the {@link COSName#EXT_G_STATE} constant instead      */
specifier|public
specifier|static
specifier|final
name|COSName
name|EXT_G_STATE
init|=
name|COSName
operator|.
name|EXT_G_STATE
decl_stmt|;
specifier|private
name|List
name|layoutPages
init|=
operator|new
name|ArrayList
argument_list|(
literal|10
argument_list|)
decl_stmt|;
specifier|private
name|PDDocument
name|pdfOverlay
decl_stmt|;
specifier|private
name|PDDocument
name|pdfDocument
decl_stmt|;
specifier|private
name|int
name|pageCount
init|=
literal|0
decl_stmt|;
specifier|private
name|COSStream
name|saveGraphicsStateStream
decl_stmt|;
specifier|private
name|COSStream
name|restoreGraphicsStateStream
decl_stmt|;
comment|/**      * This will overlay a document and write out the results.<br/><br/>      *      * usage: java org.apache.pdfbox.Overlay&lt;overlay.pdf&gt;&lt;document.pdf&gt;&lt;result.pdf&gt;      *      * @param args The command line arguments.      *      * @throws IOException If there is an error reading/writing the document.      * @throws COSVisitorException If there is an error writing the document.      */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
throws|,
name|COSVisitorException
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|3
condition|)
block|{
name|usage
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PDDocument
name|overlay
init|=
literal|null
decl_stmt|;
name|PDDocument
name|pdf
init|=
literal|null
decl_stmt|;
try|try
block|{
name|overlay
operator|=
name|getDocument
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|pdf
operator|=
name|getDocument
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Overlay
name|overlayer
init|=
operator|new
name|Overlay
argument_list|()
decl_stmt|;
name|overlayer
operator|.
name|overlay
argument_list|(
name|overlay
argument_list|,
name|pdf
argument_list|)
expr_stmt|;
name|writeDocument
argument_list|(
name|pdf
argument_list|,
name|args
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|overlay
operator|!=
literal|null
condition|)
block|{
name|overlay
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|pdf
operator|!=
literal|null
condition|)
block|{
name|pdf
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|writeDocument
parameter_list|(
name|PDDocument
name|pdf
parameter_list|,
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
throws|,
name|COSVisitorException
block|{
name|FileOutputStream
name|output
init|=
literal|null
decl_stmt|;
name|COSWriter
name|writer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|output
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|filename
argument_list|)
expr_stmt|;
name|writer
operator|=
operator|new
name|COSWriter
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|pdf
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|output
operator|!=
literal|null
condition|)
block|{
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|PDDocument
name|getDocument
parameter_list|(
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
block|{
name|FileInputStream
name|input
init|=
literal|null
decl_stmt|;
name|PDFParser
name|parser
init|=
literal|null
decl_stmt|;
name|PDDocument
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|input
operator|=
operator|new
name|FileInputStream
argument_list|(
name|filename
argument_list|)
expr_stmt|;
name|parser
operator|=
operator|new
name|PDFParser
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|parser
operator|.
name|parse
argument_list|()
expr_stmt|;
name|result
operator|=
name|parser
operator|.
name|getPDDocument
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|input
operator|!=
literal|null
condition|)
block|{
name|input
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
specifier|static
name|void
name|usage
parameter_list|()
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"usage: java -jar pdfbox-app-x.y.z.jar Overlay<overlay.pdf><document.pdf><result.pdf>"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Private class.      */
specifier|private
specifier|static
class|class
name|LayoutPage
block|{
specifier|private
specifier|final
name|COSBase
name|contents
decl_stmt|;
specifier|private
specifier|final
name|COSDictionary
name|res
decl_stmt|;
specifier|private
specifier|final
name|Map
name|objectNameMap
decl_stmt|;
comment|/**          * Constructor.          *          * @param contentsValue The contents.          * @param resValue The resource dictionary          * @param objectNameMapValue The map          */
specifier|public
name|LayoutPage
parameter_list|(
name|COSBase
name|contentsValue
parameter_list|,
name|COSDictionary
name|resValue
parameter_list|,
name|Map
name|objectNameMapValue
parameter_list|)
block|{
name|contents
operator|=
name|contentsValue
expr_stmt|;
name|res
operator|=
name|resValue
expr_stmt|;
name|objectNameMap
operator|=
name|objectNameMapValue
expr_stmt|;
block|}
block|}
comment|/**      * This will overlay two documents onto each other.  The overlay document is      * repeatedly overlayed onto the destination document for every page in the      * destination.      *      * @param overlay The document to copy onto the destination      * @param destination The file that the overlay should be placed on.      *      * @return The destination pdf, same as argument passed in.      *      * @throws IOException If there is an error accessing data.      */
specifier|public
name|PDDocument
name|overlay
parameter_list|(
name|PDDocument
name|overlay
parameter_list|,
name|PDDocument
name|destination
parameter_list|)
throws|throws
name|IOException
block|{
name|pdfOverlay
operator|=
name|overlay
expr_stmt|;
name|pdfDocument
operator|=
name|destination
expr_stmt|;
name|PDDocumentCatalog
name|overlayCatalog
init|=
name|pdfOverlay
operator|.
name|getDocumentCatalog
argument_list|()
decl_stmt|;
name|collectLayoutPages
argument_list|(
name|overlayCatalog
operator|.
name|getAllPages
argument_list|()
argument_list|)
expr_stmt|;
name|COSDictionary
name|saveGraphicsStateDic
init|=
operator|new
name|COSDictionary
argument_list|()
decl_stmt|;
name|saveGraphicsStateStream
operator|=
name|pdfDocument
operator|.
name|getDocument
argument_list|()
operator|.
name|createCOSStream
argument_list|(
name|saveGraphicsStateDic
argument_list|)
expr_stmt|;
name|OutputStream
name|saveStream
init|=
name|saveGraphicsStateStream
operator|.
name|createUnfilteredStream
argument_list|()
decl_stmt|;
name|saveStream
operator|.
name|write
argument_list|(
literal|" q\n"
operator|.
name|getBytes
argument_list|(
literal|"ISO-8859-1"
argument_list|)
argument_list|)
expr_stmt|;
name|saveStream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|restoreGraphicsStateStream
operator|=
name|pdfDocument
operator|.
name|getDocument
argument_list|()
operator|.
name|createCOSStream
argument_list|(
name|saveGraphicsStateDic
argument_list|)
expr_stmt|;
name|OutputStream
name|restoreStream
init|=
name|restoreGraphicsStateStream
operator|.
name|createUnfilteredStream
argument_list|()
decl_stmt|;
name|restoreStream
operator|.
name|write
argument_list|(
literal|" Q\n"
operator|.
name|getBytes
argument_list|(
literal|"ISO-8859-1"
argument_list|)
argument_list|)
expr_stmt|;
name|restoreStream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|PDDocumentCatalog
name|pdfCatalog
init|=
name|pdfDocument
operator|.
name|getDocumentCatalog
argument_list|()
decl_stmt|;
name|processPages
argument_list|(
name|pdfCatalog
operator|.
name|getAllPages
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|pdfDocument
return|;
block|}
specifier|private
name|void
name|collectLayoutPages
parameter_list|(
name|List
name|pages
parameter_list|)
throws|throws
name|IOException
block|{
name|Iterator
name|pagesIter
init|=
name|pages
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|pagesIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|PDPage
name|page
init|=
operator|(
name|PDPage
operator|)
name|pagesIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|COSBase
name|contents
init|=
name|page
operator|.
name|getCOSDictionary
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|CONTENTS
argument_list|)
decl_stmt|;
name|PDResources
name|resources
init|=
name|page
operator|.
name|findResources
argument_list|()
decl_stmt|;
if|if
condition|(
name|resources
operator|==
literal|null
condition|)
block|{
name|resources
operator|=
operator|new
name|PDResources
argument_list|()
expr_stmt|;
name|page
operator|.
name|setResources
argument_list|(
name|resources
argument_list|)
expr_stmt|;
block|}
name|COSDictionary
name|res
init|=
name|resources
operator|.
name|getCOSDictionary
argument_list|()
decl_stmt|;
if|if
condition|(
name|contents
operator|instanceof
name|COSStream
condition|)
block|{
name|COSStream
name|stream
init|=
operator|(
name|COSStream
operator|)
name|contents
decl_stmt|;
name|Map
name|objectNameMap
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
name|stream
operator|=
name|makeUniqObjectNames
argument_list|(
name|objectNameMap
argument_list|,
name|stream
argument_list|)
expr_stmt|;
name|layoutPages
operator|.
name|add
argument_list|(
operator|new
name|LayoutPage
argument_list|(
name|stream
argument_list|,
name|res
argument_list|,
name|objectNameMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|contents
operator|instanceof
name|COSArray
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Layout pages with COSArray currently not supported."
argument_list|)
throw|;
comment|// layoutPages.add(new LayoutPage(contents, res));
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Contents are unknown type:"
operator|+
name|contents
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|COSStream
name|makeUniqObjectNames
parameter_list|(
name|Map
name|objectNameMap
parameter_list|,
name|COSStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|10240
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|10240
index|]
decl_stmt|;
name|int
name|read
decl_stmt|;
name|InputStream
name|is
init|=
name|stream
operator|.
name|getUnfilteredStream
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|read
operator|=
name|is
operator|.
name|read
argument_list|(
name|buf
argument_list|)
operator|)
operator|>
operator|-
literal|1
condition|)
block|{
name|baos
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|read
argument_list|)
expr_stmt|;
block|}
name|buf
operator|=
name|baos
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
name|baos
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|(
name|buf
operator|.
name|length
operator|+
literal|100
argument_list|)
expr_stmt|;
name|StringBuffer
name|sbObjectName
init|=
operator|new
name|StringBuffer
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|boolean
name|bInObjectIdent
init|=
literal|false
decl_stmt|;
name|boolean
name|bInText
init|=
literal|false
decl_stmt|;
name|boolean
name|bInEscape
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buf
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|byte
name|b
init|=
name|buf
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|bInEscape
condition|)
block|{
if|if
condition|(
operator|!
name|bInText
operator|&&
name|b
operator|==
literal|'('
condition|)
block|{
name|bInText
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|bInText
operator|&&
name|b
operator|==
literal|')'
condition|)
block|{
name|bInText
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|b
operator|==
literal|'\\'
condition|)
block|{
name|bInEscape
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|bInText
operator|&&
operator|!
name|bInEscape
condition|)
block|{
if|if
condition|(
name|b
operator|==
literal|'/'
condition|)
block|{
name|bInObjectIdent
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bInObjectIdent
operator|&&
name|Character
operator|.
name|isWhitespace
argument_list|(
operator|(
name|char
operator|)
name|b
argument_list|)
condition|)
block|{
name|bInObjectIdent
operator|=
literal|false
expr_stmt|;
comment|// System.err.println(sbObjectName);
comment|// String object = sbObjectName.toString();
name|String
name|objectName
init|=
name|sbObjectName
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|newObjectName
init|=
name|objectName
operator|+
literal|"overlay"
decl_stmt|;
name|baos
operator|.
name|write
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|baos
operator|.
name|write
argument_list|(
name|newObjectName
operator|.
name|getBytes
argument_list|(
literal|"ISO-8859-1"
argument_list|)
argument_list|)
expr_stmt|;
name|objectNameMap
operator|.
name|put
argument_list|(
name|objectName
argument_list|,
name|COSName
operator|.
name|getPDFName
argument_list|(
name|newObjectName
argument_list|)
argument_list|)
expr_stmt|;
name|sbObjectName
operator|.
name|delete
argument_list|(
literal|0
argument_list|,
name|sbObjectName
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|bInObjectIdent
condition|)
block|{
name|sbObjectName
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|b
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
else|else
block|{
name|bInEscape
operator|=
literal|false
expr_stmt|;
block|}
name|baos
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
name|COSDictionary
name|streamDict
init|=
operator|new
name|COSDictionary
argument_list|()
decl_stmt|;
name|streamDict
operator|.
name|setInt
argument_list|(
name|COSName
operator|.
name|LENGTH
argument_list|,
name|baos
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|COSStream
name|output
init|=
name|pdfDocument
operator|.
name|getDocument
argument_list|()
operator|.
name|createCOSStream
argument_list|(
name|streamDict
argument_list|)
decl_stmt|;
name|output
operator|.
name|setFilters
argument_list|(
name|stream
operator|.
name|getFilters
argument_list|()
argument_list|)
expr_stmt|;
name|OutputStream
name|os
init|=
name|output
operator|.
name|createUnfilteredStream
argument_list|()
decl_stmt|;
name|baos
operator|.
name|writeTo
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|output
return|;
block|}
specifier|private
name|void
name|processPages
parameter_list|(
name|List
name|pages
parameter_list|)
throws|throws
name|IOException
block|{
name|Iterator
name|pageIter
init|=
name|pages
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|pageIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|PDPage
name|page
init|=
operator|(
name|PDPage
operator|)
name|pageIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|COSDictionary
name|pageDictionary
init|=
name|page
operator|.
name|getCOSDictionary
argument_list|()
decl_stmt|;
name|COSBase
name|contents
init|=
name|pageDictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|CONTENTS
argument_list|)
decl_stmt|;
if|if
condition|(
name|contents
operator|instanceof
name|COSStream
condition|)
block|{
name|COSStream
name|contentsStream
init|=
operator|(
name|COSStream
operator|)
name|contents
decl_stmt|;
comment|// System.err.println("stream");
name|COSArray
name|array
init|=
operator|new
name|COSArray
argument_list|()
decl_stmt|;
name|array
operator|.
name|add
argument_list|(
name|contentsStream
argument_list|)
expr_stmt|;
name|mergePage
argument_list|(
name|array
argument_list|,
name|page
argument_list|)
expr_stmt|;
name|pageDictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|CONTENTS
argument_list|,
name|array
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|contents
operator|instanceof
name|COSArray
condition|)
block|{
name|COSArray
name|contentsArray
init|=
operator|(
name|COSArray
operator|)
name|contents
decl_stmt|;
name|mergePage
argument_list|(
name|contentsArray
argument_list|,
name|page
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Contents are unknown type:"
operator|+
name|contents
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|pageCount
operator|++
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|mergePage
parameter_list|(
name|COSArray
name|array
parameter_list|,
name|PDPage
name|page
parameter_list|)
block|{
name|int
name|layoutPageNum
init|=
name|pageCount
operator|%
name|layoutPages
operator|.
name|size
argument_list|()
decl_stmt|;
name|LayoutPage
name|layoutPage
init|=
operator|(
name|LayoutPage
operator|)
name|layoutPages
operator|.
name|get
argument_list|(
name|layoutPageNum
argument_list|)
decl_stmt|;
name|PDResources
name|resources
init|=
name|page
operator|.
name|findResources
argument_list|()
decl_stmt|;
if|if
condition|(
name|resources
operator|==
literal|null
condition|)
block|{
name|resources
operator|=
operator|new
name|PDResources
argument_list|()
expr_stmt|;
name|page
operator|.
name|setResources
argument_list|(
name|resources
argument_list|)
expr_stmt|;
block|}
name|COSDictionary
name|docResDict
init|=
name|resources
operator|.
name|getCOSDictionary
argument_list|()
decl_stmt|;
name|COSDictionary
name|layoutResDict
init|=
name|layoutPage
operator|.
name|res
decl_stmt|;
name|mergeArray
argument_list|(
name|COSName
operator|.
name|PROC_SET
argument_list|,
name|docResDict
argument_list|,
name|layoutResDict
argument_list|)
expr_stmt|;
name|mergeDictionary
argument_list|(
name|COSName
operator|.
name|FONT
argument_list|,
name|docResDict
argument_list|,
name|layoutResDict
argument_list|,
name|layoutPage
operator|.
name|objectNameMap
argument_list|)
expr_stmt|;
name|mergeDictionary
argument_list|(
name|COSName
operator|.
name|XOBJECT
argument_list|,
name|docResDict
argument_list|,
name|layoutResDict
argument_list|,
name|layoutPage
operator|.
name|objectNameMap
argument_list|)
expr_stmt|;
name|mergeDictionary
argument_list|(
name|COSName
operator|.
name|EXT_G_STATE
argument_list|,
name|docResDict
argument_list|,
name|layoutResDict
argument_list|,
name|layoutPage
operator|.
name|objectNameMap
argument_list|)
expr_stmt|;
comment|//we are going to wrap the existing content around some save/restore
comment|//graphics state, so the result is
comment|//
comment|//<save graphics state>
comment|//<all existing content streams>
comment|//<restore graphics state>
comment|//<overlay content>
name|array
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|saveGraphicsStateStream
argument_list|)
expr_stmt|;
name|array
operator|.
name|add
argument_list|(
name|restoreGraphicsStateStream
argument_list|)
expr_stmt|;
name|array
operator|.
name|add
argument_list|(
name|layoutPage
operator|.
name|contents
argument_list|)
expr_stmt|;
block|}
comment|/**      * merges two dictionaries.      *      * @param dest      * @param source      */
specifier|private
name|void
name|mergeDictionary
parameter_list|(
name|COSName
name|name
parameter_list|,
name|COSDictionary
name|dest
parameter_list|,
name|COSDictionary
name|source
parameter_list|,
name|Map
name|objectNameMap
parameter_list|)
block|{
name|COSDictionary
name|destDict
init|=
operator|(
name|COSDictionary
operator|)
name|dest
operator|.
name|getDictionaryObject
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|COSDictionary
name|sourceDict
init|=
operator|(
name|COSDictionary
operator|)
name|source
operator|.
name|getDictionaryObject
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|destDict
operator|==
literal|null
condition|)
block|{
name|destDict
operator|=
operator|new
name|COSDictionary
argument_list|()
expr_stmt|;
name|dest
operator|.
name|setItem
argument_list|(
name|name
argument_list|,
name|destDict
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sourceDict
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|COSName
argument_list|,
name|COSBase
argument_list|>
name|entry
range|:
name|sourceDict
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|COSName
name|mappedKey
init|=
operator|(
name|COSName
operator|)
name|objectNameMap
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mappedKey
operator|!=
literal|null
condition|)
block|{
name|destDict
operator|.
name|setItem
argument_list|(
name|mappedKey
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * merges two arrays.      *      * @param dest      * @param source      */
specifier|private
name|void
name|mergeArray
parameter_list|(
name|COSName
name|name
parameter_list|,
name|COSDictionary
name|dest
parameter_list|,
name|COSDictionary
name|source
parameter_list|)
block|{
name|COSArray
name|destDict
init|=
operator|(
name|COSArray
operator|)
name|dest
operator|.
name|getDictionaryObject
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|COSArray
name|sourceDict
init|=
operator|(
name|COSArray
operator|)
name|source
operator|.
name|getDictionaryObject
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|destDict
operator|==
literal|null
condition|)
block|{
name|destDict
operator|=
operator|new
name|COSArray
argument_list|()
expr_stmt|;
name|dest
operator|.
name|setItem
argument_list|(
name|name
argument_list|,
name|destDict
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|sourceDictIdx
init|=
literal|0
init|;
name|sourceDict
operator|!=
literal|null
operator|&&
name|sourceDictIdx
operator|<
name|sourceDict
operator|.
name|size
argument_list|()
condition|;
name|sourceDictIdx
operator|++
control|)
block|{
name|COSBase
name|key
init|=
name|sourceDict
operator|.
name|get
argument_list|(
name|sourceDictIdx
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|instanceof
name|COSName
condition|)
block|{
name|COSName
name|keyname
init|=
operator|(
name|COSName
operator|)
name|key
decl_stmt|;
name|boolean
name|bFound
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|destDictIdx
init|=
literal|0
init|;
name|destDictIdx
operator|<
name|destDict
operator|.
name|size
argument_list|()
condition|;
name|destDictIdx
operator|++
control|)
block|{
name|COSBase
name|destkey
init|=
name|destDict
operator|.
name|get
argument_list|(
name|destDictIdx
argument_list|)
decl_stmt|;
if|if
condition|(
name|destkey
operator|instanceof
name|COSName
condition|)
block|{
name|COSName
name|destkeyname
init|=
operator|(
name|COSName
operator|)
name|destkey
decl_stmt|;
if|if
condition|(
name|destkeyname
operator|.
name|equals
argument_list|(
name|keyname
argument_list|)
condition|)
block|{
name|bFound
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|bFound
condition|)
block|{
name|destDict
operator|.
name|add
argument_list|(
name|keyname
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

