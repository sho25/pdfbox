begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSNumber
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|COSArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|COSObjectable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDRectangle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * This represents a page node in a pdf document.  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.8 $  */
end_comment

begin_class
specifier|public
class|class
name|PDPageNode
implements|implements
name|COSObjectable
block|{
specifier|private
name|COSDictionary
name|page
decl_stmt|;
comment|/**      * Log instance.      */
specifier|private
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|PDPageNode
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Creates a new instance of PDPage.      */
specifier|public
name|PDPageNode
parameter_list|()
block|{
name|page
operator|=
operator|new
name|COSDictionary
argument_list|()
expr_stmt|;
name|page
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|TYPE
argument_list|,
name|COSName
operator|.
name|PAGES
argument_list|)
expr_stmt|;
name|page
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|KIDS
argument_list|,
operator|new
name|COSArray
argument_list|()
argument_list|)
expr_stmt|;
name|page
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|COUNT
argument_list|,
name|COSInteger
operator|.
name|ZERO
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new instance of PDPage.      *      * @param pages The dictionary pages.      */
specifier|public
name|PDPageNode
parameter_list|(
name|COSDictionary
name|pages
parameter_list|)
block|{
name|page
operator|=
name|pages
expr_stmt|;
block|}
comment|/**      * This will update the count attribute of the page node.  This only needs to      * be called if you add or remove pages.  The PDDocument will call this for you      * when you use the PDDocumnet persistence methods.  So, basically most clients      * will never need to call this.      *      * @return The update count for this node.      */
specifier|public
name|long
name|updateCount
parameter_list|()
block|{
name|long
name|totalCount
init|=
literal|0
decl_stmt|;
name|List
name|kids
init|=
name|getKids
argument_list|()
decl_stmt|;
name|Iterator
name|kidIter
init|=
name|kids
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|kidIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|next
init|=
name|kidIter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|next
operator|instanceof
name|PDPage
condition|)
block|{
name|totalCount
operator|++
expr_stmt|;
block|}
else|else
block|{
name|PDPageNode
name|node
init|=
operator|(
name|PDPageNode
operator|)
name|next
decl_stmt|;
name|totalCount
operator|+=
name|node
operator|.
name|updateCount
argument_list|()
expr_stmt|;
block|}
block|}
name|page
operator|.
name|setLong
argument_list|(
name|COSName
operator|.
name|COUNT
argument_list|,
name|totalCount
argument_list|)
expr_stmt|;
return|return
name|totalCount
return|;
block|}
comment|/**      * This will get the count of descendent page objects.      *      * @return The total number of descendent page objects.      */
specifier|public
name|long
name|getCount
parameter_list|()
block|{
if|if
condition|(
name|page
operator|==
literal|null
condition|)
block|{
return|return
literal|0L
return|;
block|}
name|COSBase
name|num
init|=
name|page
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|COUNT
argument_list|)
decl_stmt|;
if|if
condition|(
name|num
operator|==
literal|null
condition|)
block|{
return|return
literal|0L
return|;
block|}
return|return
operator|(
operator|(
name|COSNumber
operator|)
name|num
operator|)
operator|.
name|intValue
argument_list|()
return|;
block|}
comment|/**      * This will get the underlying dictionary that this class acts on.      *      * @return The underlying dictionary for this class.      */
specifier|public
name|COSDictionary
name|getDictionary
parameter_list|()
block|{
return|return
name|page
return|;
block|}
comment|/**      * This is the parent page node.      *      * @return The parent to this page.      */
specifier|public
name|PDPageNode
name|getParent
parameter_list|()
block|{
name|PDPageNode
name|parent
init|=
literal|null
decl_stmt|;
name|COSDictionary
name|parentDic
init|=
operator|(
name|COSDictionary
operator|)
name|page
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|PARENT
argument_list|,
name|COSName
operator|.
name|P
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentDic
operator|!=
literal|null
condition|)
block|{
name|parent
operator|=
operator|new
name|PDPageNode
argument_list|(
name|parentDic
argument_list|)
expr_stmt|;
block|}
return|return
name|parent
return|;
block|}
comment|/**      * This will set the parent of this page.      *      * @param parent The parent to this page node.      */
specifier|public
name|void
name|setParent
parameter_list|(
name|PDPageNode
name|parent
parameter_list|)
block|{
name|page
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|PARENT
argument_list|,
name|parent
operator|.
name|getDictionary
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|COSBase
name|getCOSObject
parameter_list|()
block|{
return|return
name|page
return|;
block|}
comment|/**      * This will return all kids of this node, either PDPageNode or PDPage.      *      * @return All direct descendents of this node.      */
specifier|public
name|List
name|getKids
parameter_list|()
block|{
name|List
name|actuals
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|COSArray
name|kids
init|=
name|getAllKids
argument_list|(
name|actuals
argument_list|,
name|page
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
operator|new
name|COSArrayList
argument_list|(
name|actuals
argument_list|,
name|kids
argument_list|)
return|;
block|}
comment|/**      * This will return all kids of this node as PDPage.      *      * @param result All direct and indirect descendents of this node are added to this list.      */
specifier|public
name|void
name|getAllKids
parameter_list|(
name|List
name|result
parameter_list|)
block|{
name|getAllKids
argument_list|(
name|result
argument_list|,
name|page
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will return all kids of the given page node as PDPage.      *      * @param result All direct and optionally indirect descendents of this node are added to this list.      * @param page Page dictionary of a page node.      * @param recurse if true indirect descendents are processed recursively      */
specifier|private
specifier|static
name|COSArray
name|getAllKids
parameter_list|(
name|List
name|result
parameter_list|,
name|COSDictionary
name|page
parameter_list|,
name|boolean
name|recurse
parameter_list|)
block|{
if|if
condition|(
name|page
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|COSArray
name|kids
init|=
operator|(
name|COSArray
operator|)
name|page
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|KIDS
argument_list|)
decl_stmt|;
if|if
condition|(
name|kids
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"No Kids found in getAllKids(). Probably a malformed pdf."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|kids
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|COSBase
name|obj
init|=
name|kids
operator|.
name|getObject
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|COSDictionary
condition|)
block|{
name|COSDictionary
name|kid
init|=
operator|(
name|COSDictionary
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|COSName
operator|.
name|PAGE
operator|.
name|equals
argument_list|(
name|kid
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|TYPE
argument_list|)
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|PDPage
argument_list|(
name|kid
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|recurse
condition|)
block|{
name|getAllKids
argument_list|(
name|result
argument_list|,
name|kid
argument_list|,
name|recurse
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|PDPageNode
argument_list|(
name|kid
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|kids
return|;
block|}
comment|/**      * This will get the resources at this page node and not look up the hierarchy.      * This attribute is inheritable, and findResources() should probably used.      * This will return null if no resources are available at this level.      *      * @return The resources at this level in the hierarchy.      */
specifier|public
name|PDResources
name|getResources
parameter_list|()
block|{
name|PDResources
name|retval
init|=
literal|null
decl_stmt|;
name|COSDictionary
name|resources
init|=
operator|(
name|COSDictionary
operator|)
name|page
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|RESOURCES
argument_list|)
decl_stmt|;
if|if
condition|(
name|resources
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
operator|new
name|PDResources
argument_list|(
name|resources
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * This will find the resources for this page by looking up the hierarchy until      * it finds them.      *      * @return The resources at this level in the hierarchy.      */
specifier|public
name|PDResources
name|findResources
parameter_list|()
block|{
name|PDResources
name|retval
init|=
name|getResources
argument_list|()
decl_stmt|;
name|PDPageNode
name|parent
init|=
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|retval
operator|==
literal|null
operator|&&
name|parent
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
name|parent
operator|.
name|findResources
argument_list|()
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * This will set the resources for this page.      *      * @param resources The new resources for this page.      */
specifier|public
name|void
name|setResources
parameter_list|(
name|PDResources
name|resources
parameter_list|)
block|{
if|if
condition|(
name|resources
operator|==
literal|null
condition|)
block|{
name|page
operator|.
name|removeItem
argument_list|(
name|COSName
operator|.
name|RESOURCES
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|page
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|RESOURCES
argument_list|,
name|resources
operator|.
name|getCOSDictionary
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This will get the MediaBox at this page and not look up the hierarchy.      * This attribute is inheritable, and findMediaBox() should probably used.      * This will return null if no MediaBox are available at this level.      *      * @return The MediaBox at this level in the hierarchy.      */
specifier|public
name|PDRectangle
name|getMediaBox
parameter_list|()
block|{
name|PDRectangle
name|retval
init|=
literal|null
decl_stmt|;
name|COSArray
name|array
init|=
operator|(
name|COSArray
operator|)
name|page
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|MEDIA_BOX
argument_list|)
decl_stmt|;
if|if
condition|(
name|array
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
operator|new
name|PDRectangle
argument_list|(
name|array
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * This will find the MediaBox for this page by looking up the hierarchy until      * it finds them.      *      * @return The MediaBox at this level in the hierarchy.      */
specifier|public
name|PDRectangle
name|findMediaBox
parameter_list|()
block|{
name|PDRectangle
name|retval
init|=
name|getMediaBox
argument_list|()
decl_stmt|;
name|PDPageNode
name|parent
init|=
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|retval
operator|==
literal|null
operator|&&
name|parent
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
name|parent
operator|.
name|findMediaBox
argument_list|()
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * This will set the mediaBox for this page.      *      * @param mediaBox The new mediaBox for this page.      */
specifier|public
name|void
name|setMediaBox
parameter_list|(
name|PDRectangle
name|mediaBox
parameter_list|)
block|{
if|if
condition|(
name|mediaBox
operator|==
literal|null
condition|)
block|{
name|page
operator|.
name|removeItem
argument_list|(
name|COSName
operator|.
name|MEDIA_BOX
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|page
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|MEDIA_BOX
argument_list|,
name|mediaBox
operator|.
name|getCOSArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This will get the CropBox at this page and not look up the hierarchy.      * This attribute is inheritable, and findCropBox() should probably used.      * This will return null if no CropBox is available at this level.      *      * @return The CropBox at this level in the hierarchy.      */
specifier|public
name|PDRectangle
name|getCropBox
parameter_list|()
block|{
name|PDRectangle
name|retval
init|=
literal|null
decl_stmt|;
name|COSArray
name|array
init|=
operator|(
name|COSArray
operator|)
name|page
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|CROP_BOX
argument_list|)
decl_stmt|;
if|if
condition|(
name|array
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
operator|new
name|PDRectangle
argument_list|(
name|array
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * This will find the CropBox for this page by looking up the hierarchy until      * it finds them.      *      * @return The CropBox at this level in the hierarchy.      */
specifier|public
name|PDRectangle
name|findCropBox
parameter_list|()
block|{
name|PDRectangle
name|retval
init|=
name|getCropBox
argument_list|()
decl_stmt|;
name|PDPageNode
name|parent
init|=
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|retval
operator|==
literal|null
operator|&&
name|parent
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
name|findParentCropBox
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
comment|//default value for cropbox is the media box
if|if
condition|(
name|retval
operator|==
literal|null
condition|)
block|{
name|retval
operator|=
name|findMediaBox
argument_list|()
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * This will search for a crop box in the parent and return null if it is not      * found.  It will NOT default to the media box if it cannot be found.      *      * @param node The node      */
specifier|private
name|PDRectangle
name|findParentCropBox
parameter_list|(
name|PDPageNode
name|node
parameter_list|)
block|{
name|PDRectangle
name|rect
init|=
name|node
operator|.
name|getCropBox
argument_list|()
decl_stmt|;
name|PDPageNode
name|parent
init|=
name|node
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|rect
operator|==
literal|null
operator|&&
name|parent
operator|!=
literal|null
condition|)
block|{
name|rect
operator|=
name|findParentCropBox
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
return|return
name|rect
return|;
block|}
comment|/**      * This will set the CropBox for this page.      *      * @param cropBox The new CropBox for this page.      */
specifier|public
name|void
name|setCropBox
parameter_list|(
name|PDRectangle
name|cropBox
parameter_list|)
block|{
if|if
condition|(
name|cropBox
operator|==
literal|null
condition|)
block|{
name|page
operator|.
name|removeItem
argument_list|(
name|COSName
operator|.
name|CROP_BOX
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|page
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|CROP_BOX
argument_list|,
name|cropBox
operator|.
name|getCOSArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * A value representing the rotation.  This will be null if not set at this level      * The number of degrees by which the page should      * be rotated clockwise when displayed or printed. The value must be a multiple      * of 90.      *      * This will get the rotation at this page and not look up the hierarchy.      * This attribute is inheritable, and findRotation() should probably used.      * This will return null if no rotation is available at this level.      *      * @return The rotation at this level in the hierarchy.      */
specifier|public
name|Integer
name|getRotation
parameter_list|()
block|{
name|Integer
name|retval
init|=
literal|null
decl_stmt|;
name|COSNumber
name|value
init|=
operator|(
name|COSNumber
operator|)
name|page
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|ROTATE
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
operator|new
name|Integer
argument_list|(
name|value
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * This will find the rotation for this page by looking up the hierarchy until      * it finds them.      *      * @return The rotation at this level in the hierarchy.      */
specifier|public
name|int
name|findRotation
parameter_list|()
block|{
name|int
name|retval
init|=
literal|0
decl_stmt|;
name|Integer
name|rotation
init|=
name|getRotation
argument_list|()
decl_stmt|;
if|if
condition|(
name|rotation
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
name|rotation
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|PDPageNode
name|parent
init|=
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
name|parent
operator|.
name|findRotation
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|retval
return|;
block|}
comment|/**      * This will set the rotation for this page.      *      * @param rotation The new rotation for this page.      */
specifier|public
name|void
name|setRotation
parameter_list|(
name|int
name|rotation
parameter_list|)
block|{
name|page
operator|.
name|setInt
argument_list|(
name|COSName
operator|.
name|ROTATE
argument_list|,
name|rotation
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

