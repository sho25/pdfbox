begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|COSDictionaryMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Contains additional information about the components of colour space.  * Instead of using the alternate color space and tint transform, conforming readers may use custom  * blending algorithms, along with other information provided in the attributes dictionary.  *  * @author Ben Litchfield  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|PDDeviceNAttributes
block|{
specifier|private
specifier|final
name|COSDictionary
name|dictionary
decl_stmt|;
comment|/**      * Creates a new DeviceN colour space attributes dictionary.      */
specifier|public
name|PDDeviceNAttributes
parameter_list|()
block|{
name|dictionary
operator|=
operator|new
name|COSDictionary
argument_list|()
expr_stmt|;
block|}
comment|/**      * Creates a new DeviceN colour space attributes dictionary from the given dictionary.      * @param attributes a dictionary that has all of the attributes      */
specifier|public
name|PDDeviceNAttributes
parameter_list|(
name|COSDictionary
name|attributes
parameter_list|)
block|{
name|dictionary
operator|=
name|attributes
expr_stmt|;
block|}
comment|/**      * Returns the underlying COS dictionary.      * @return the dictionary that this object wraps      */
specifier|public
name|COSDictionary
name|getCOSDictionary
parameter_list|()
block|{
return|return
name|dictionary
return|;
block|}
comment|/**      * Returns a map of colorants and their associated Separation color space.      * @return map of colorants to color spaces      * @throws IOException If there is an error reading a color space      */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|PDSeparation
argument_list|>
name|getColorants
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|PDSeparation
argument_list|>
name|actuals
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|PDSeparation
argument_list|>
argument_list|()
decl_stmt|;
name|COSDictionary
name|colorants
init|=
operator|(
name|COSDictionary
operator|)
name|dictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|COLORANTS
argument_list|)
decl_stmt|;
if|if
condition|(
name|colorants
operator|==
literal|null
condition|)
block|{
name|colorants
operator|=
operator|new
name|COSDictionary
argument_list|()
expr_stmt|;
name|dictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|COLORANTS
argument_list|,
name|colorants
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|COSName
name|name
range|:
name|colorants
operator|.
name|keySet
argument_list|()
control|)
block|{
name|COSBase
name|value
init|=
name|colorants
operator|.
name|getDictionaryObject
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|actuals
operator|.
name|put
argument_list|(
name|name
operator|.
name|getName
argument_list|()
argument_list|,
operator|(
name|PDSeparation
operator|)
name|PDColorSpace
operator|.
name|create
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|COSDictionaryMap
argument_list|<
name|String
argument_list|,
name|PDSeparation
argument_list|>
argument_list|(
name|actuals
argument_list|,
name|colorants
argument_list|)
return|;
block|}
comment|/**      * Returns the DeviceN Process Dictionary, or null if it is missing.      * @return the DeviceN Process Dictionary, or null if it is missing.      */
specifier|public
name|PDDeviceNProcess
name|getProcess
parameter_list|()
block|{
name|COSDictionary
name|process
init|=
operator|(
name|COSDictionary
operator|)
name|dictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|PROCESS
argument_list|)
decl_stmt|;
if|if
condition|(
name|process
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|PDDeviceNProcess
argument_list|(
name|process
argument_list|)
return|;
block|}
comment|/**      * Returns true if this is an NChannel (PDF 1.6) color space.      * @return true if this is an NChannel color space.      */
specifier|public
name|boolean
name|isNChannel
parameter_list|()
block|{
return|return
literal|"NChannel"
operator|.
name|equals
argument_list|(
name|dictionary
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Sets the colorant map.      * @param colorants the map of colorants      */
specifier|public
name|void
name|setColorants
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|PDColorSpace
argument_list|>
name|colorants
parameter_list|)
block|{
name|COSDictionary
name|colorantDict
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|colorants
operator|!=
literal|null
condition|)
block|{
name|colorantDict
operator|=
name|COSDictionaryMap
operator|.
name|convert
argument_list|(
name|colorants
argument_list|)
expr_stmt|;
block|}
name|dictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|COLORANTS
argument_list|,
name|colorantDict
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|dictionary
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|)
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'{'
argument_list|)
expr_stmt|;
name|PDDeviceNProcess
name|process
init|=
name|getProcess
argument_list|()
decl_stmt|;
if|if
condition|(
name|process
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|getProcess
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|PDSeparation
argument_list|>
name|colorants
decl_stmt|;
try|try
block|{
name|colorants
operator|=
name|getColorants
argument_list|()
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Colorants{"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|PDSeparation
argument_list|>
name|col
range|:
name|colorants
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'\"'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|col
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\": "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|col
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"ERROR"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

