begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|contentstream
operator|.
name|PDContentStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|contentstream
operator|.
name|operator
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSNumber
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdfparser
operator|.
name|PDFStreamParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|COSObjectable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDRectangle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|Matrix
import|;
end_import

begin_comment
comment|/**  * A Type 3 character procedure. This is a standalone PDF content stream.  *  * @author John Hewson  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|PDType3CharProc
implements|implements
name|COSObjectable
implements|,
name|PDContentStream
block|{
specifier|private
specifier|final
name|PDType3Font
name|font
decl_stmt|;
specifier|private
specifier|final
name|COSStream
name|charStream
decl_stmt|;
specifier|public
name|PDType3CharProc
parameter_list|(
name|PDType3Font
name|font
parameter_list|,
name|COSStream
name|charStream
parameter_list|)
block|{
name|this
operator|.
name|font
operator|=
name|font
expr_stmt|;
name|this
operator|.
name|charStream
operator|=
name|charStream
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|COSStream
name|getCOSObject
parameter_list|()
block|{
return|return
name|charStream
return|;
block|}
specifier|public
name|PDType3Font
name|getFont
parameter_list|()
block|{
return|return
name|font
return|;
block|}
specifier|public
name|PDStream
name|getContentStream
parameter_list|()
block|{
return|return
operator|new
name|PDStream
argument_list|(
name|charStream
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|getContents
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|charStream
operator|.
name|createInputStream
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|PDResources
name|getResources
parameter_list|()
block|{
return|return
name|font
operator|.
name|getResources
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|PDRectangle
name|getBBox
parameter_list|()
block|{
return|return
name|font
operator|.
name|getFontBBox
argument_list|()
return|;
block|}
comment|/**      * Calculate the bounding box of this glyph. This will work only if the first operator in the      * stream is d1.      *      * @return the bounding box of this glyph, or null if the first operator is not d1.      * @throws IOException If an io error occurs while parsing the stream.      */
specifier|public
name|PDRectangle
name|getGlyphBBox
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|COSBase
argument_list|>
name|arguments
init|=
operator|new
name|ArrayList
argument_list|<
name|COSBase
argument_list|>
argument_list|()
decl_stmt|;
name|PDFStreamParser
name|parser
init|=
operator|new
name|PDFStreamParser
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|Object
name|token
init|=
name|parser
operator|.
name|parseNextToken
argument_list|()
decl_stmt|;
while|while
condition|(
name|token
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|token
operator|instanceof
name|COSObject
condition|)
block|{
name|arguments
operator|.
name|add
argument_list|(
operator|(
operator|(
name|COSObject
operator|)
name|token
operator|)
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|instanceof
name|Operator
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|Operator
operator|)
name|token
operator|)
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"d1"
argument_list|)
operator|&&
name|arguments
operator|.
name|size
argument_list|()
operator|==
literal|6
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|arguments
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|COSNumber
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
return|return
operator|new
name|PDRectangle
argument_list|(
operator|(
operator|(
name|COSNumber
operator|)
name|arguments
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|floatValue
argument_list|()
argument_list|,
operator|(
operator|(
name|COSNumber
operator|)
name|arguments
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|)
operator|.
name|floatValue
argument_list|()
argument_list|,
operator|(
operator|(
name|COSNumber
operator|)
name|arguments
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|)
operator|.
name|floatValue
argument_list|()
operator|-
operator|(
operator|(
name|COSNumber
operator|)
name|arguments
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|floatValue
argument_list|()
argument_list|,
operator|(
operator|(
name|COSNumber
operator|)
name|arguments
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|)
operator|.
name|floatValue
argument_list|()
operator|-
operator|(
operator|(
name|COSNumber
operator|)
name|arguments
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|)
operator|.
name|floatValue
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
name|arguments
operator|.
name|add
argument_list|(
operator|(
name|COSBase
operator|)
name|token
argument_list|)
expr_stmt|;
block|}
name|token
operator|=
name|parser
operator|.
name|parseNextToken
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Matrix
name|getMatrix
parameter_list|()
block|{
return|return
name|font
operator|.
name|getFontMatrix
argument_list|()
return|;
block|}
comment|/**      * todo.      *       * @return      * @throws IOException      */
specifier|public
name|float
name|getWidth
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|COSBase
argument_list|>
name|arguments
init|=
operator|new
name|ArrayList
argument_list|<
name|COSBase
argument_list|>
argument_list|()
decl_stmt|;
name|PDFStreamParser
name|parser
init|=
operator|new
name|PDFStreamParser
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|Object
name|token
init|=
name|parser
operator|.
name|parseNextToken
argument_list|()
decl_stmt|;
while|while
condition|(
name|token
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|token
operator|instanceof
name|COSObject
condition|)
block|{
name|arguments
operator|.
name|add
argument_list|(
operator|(
operator|(
name|COSObject
operator|)
name|token
operator|)
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|instanceof
name|Operator
condition|)
block|{
return|return
name|parseWidth
argument_list|(
operator|(
name|Operator
operator|)
name|token
argument_list|,
name|arguments
argument_list|)
return|;
block|}
else|else
block|{
name|arguments
operator|.
name|add
argument_list|(
operator|(
name|COSBase
operator|)
name|token
argument_list|)
expr_stmt|;
block|}
name|token
operator|=
name|parser
operator|.
name|parseNextToken
argument_list|()
expr_stmt|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected end of stream"
argument_list|)
throw|;
block|}
specifier|private
name|float
name|parseWidth
parameter_list|(
name|Operator
name|operator
parameter_list|,
name|List
argument_list|<
name|COSBase
argument_list|>
name|arguments
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|operator
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"d0"
argument_list|)
operator|||
name|operator
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"d1"
argument_list|)
condition|)
block|{
name|Object
name|obj
init|=
name|arguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|Number
condition|)
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|obj
operator|)
operator|.
name|floatValue
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|COSNumber
condition|)
block|{
return|return
operator|(
operator|(
name|COSNumber
operator|)
name|obj
operator|)
operator|.
name|floatValue
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected argument type: "
operator|+
name|obj
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"First operator must be d0 or d1"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

