begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|form
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSString
import|;
end_import

begin_comment
comment|/**  * A choice field contains several text items, one or more of which shall be selected as the field value.  *   * @author sug  * @author John Hewson  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|PDChoice
extends|extends
name|PDVariableText
block|{
comment|/**      *  Ff-flags.      */
specifier|public
specifier|static
specifier|final
name|int
name|FLAG_COMBO
init|=
literal|1
operator|<<
literal|17
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|FLAG_SORT
init|=
literal|1
operator|<<
literal|19
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|FLAG_MULTI_SELECT
init|=
literal|1
operator|<<
literal|21
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|FLAG_DO_NOT_SPELL_CHECK
init|=
literal|1
operator|<<
literal|22
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|FLAG_COMMIT_ON_SEL_CHANGE
init|=
literal|1
operator|<<
literal|26
decl_stmt|;
comment|/**      * Constructor.      *       * @param acroForm The form that this field is part of.      * @param field the PDF object to represent as a field.      * @param parentNode the parent node of the node to be created      */
specifier|protected
name|PDChoice
parameter_list|(
name|PDAcroForm
name|acroForm
parameter_list|,
name|COSDictionary
name|field
parameter_list|,
name|PDFieldTreeNode
name|parentNode
parameter_list|)
block|{
name|super
argument_list|(
name|acroForm
argument_list|,
name|field
argument_list|,
name|parentNode
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the option values "Opt".      *      * @return COSArray containing all options.      */
specifier|public
name|COSArray
name|getOptions
parameter_list|()
block|{
return|return
operator|(
name|COSArray
operator|)
name|getDictionary
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|OPT
argument_list|)
return|;
block|}
comment|/**      * This will set the options.      *      * @param values COSArray containing all possible options.      */
specifier|public
name|void
name|setOptions
parameter_list|(
name|COSArray
name|values
parameter_list|)
block|{
if|if
condition|(
name|values
operator|!=
literal|null
condition|)
block|{
name|getDictionary
argument_list|()
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|OPT
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getDictionary
argument_list|()
operator|.
name|removeItem
argument_list|(
name|COSName
operator|.
name|OPT
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This will get the indices of the selected options "I".      *      * @return COSArray containing the indices of all selected options.      */
specifier|public
name|COSArray
name|getSelectedOptions
parameter_list|()
block|{
return|return
operator|(
name|COSArray
operator|)
name|getDictionary
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|I
argument_list|)
return|;
block|}
comment|/**      * This will set the indices of the selected options "I".      *      * @param values COSArray containing the indices of all selected options.      */
specifier|public
name|void
name|setSelectedOptions
parameter_list|(
name|COSArray
name|values
parameter_list|)
block|{
if|if
condition|(
name|values
operator|!=
literal|null
condition|)
block|{
name|getDictionary
argument_list|()
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|I
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getDictionary
argument_list|()
operator|.
name|removeItem
argument_list|(
name|COSName
operator|.
name|I
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Determines if Sort is set.      *       * @return true if the options are sorted.      */
specifier|public
name|boolean
name|isSort
parameter_list|()
block|{
return|return
name|getDictionary
argument_list|()
operator|.
name|getFlag
argument_list|(
name|COSName
operator|.
name|FF
argument_list|,
name|FLAG_SORT
argument_list|)
return|;
block|}
comment|/**      * Set the Sort bit.      *      * @param sort The value for Sort.      */
specifier|public
name|void
name|setSort
parameter_list|(
name|boolean
name|sort
parameter_list|)
block|{
name|getDictionary
argument_list|()
operator|.
name|setFlag
argument_list|(
name|COSName
operator|.
name|FF
argument_list|,
name|FLAG_SORT
argument_list|,
name|sort
argument_list|)
expr_stmt|;
block|}
comment|/**      * Determines if MultiSelect is set.      *       * @return true if multi select is allowed.      */
specifier|public
name|boolean
name|isMultiSelect
parameter_list|()
block|{
return|return
name|getDictionary
argument_list|()
operator|.
name|getFlag
argument_list|(
name|COSName
operator|.
name|FF
argument_list|,
name|FLAG_MULTI_SELECT
argument_list|)
return|;
block|}
comment|/**      * Set the MultiSelect bit.      *      * @param multiSelect The value for MultiSelect.      */
specifier|public
name|void
name|setMultiSelect
parameter_list|(
name|boolean
name|multiSelect
parameter_list|)
block|{
name|getDictionary
argument_list|()
operator|.
name|setFlag
argument_list|(
name|COSName
operator|.
name|FF
argument_list|,
name|FLAG_MULTI_SELECT
argument_list|,
name|multiSelect
argument_list|)
expr_stmt|;
block|}
comment|/**      * Determines if DoNotSpellCheck is set.      *       * @return true if spell checker is disabled.      */
specifier|public
name|boolean
name|isDoNotSpellCheck
parameter_list|()
block|{
return|return
name|getDictionary
argument_list|()
operator|.
name|getFlag
argument_list|(
name|COSName
operator|.
name|FF
argument_list|,
name|FLAG_DO_NOT_SPELL_CHECK
argument_list|)
return|;
block|}
comment|/**      * Set the DoNotSpellCheck bit.      *      * @param doNotSpellCheck The value for DoNotSpellCheck.      */
specifier|public
name|void
name|setDoNotSpellCheck
parameter_list|(
name|boolean
name|doNotSpellCheck
parameter_list|)
block|{
name|getDictionary
argument_list|()
operator|.
name|setFlag
argument_list|(
name|COSName
operator|.
name|FF
argument_list|,
name|FLAG_DO_NOT_SPELL_CHECK
argument_list|,
name|doNotSpellCheck
argument_list|)
expr_stmt|;
block|}
comment|/**      * Determines if CommitOnSelChange is set.      *       * @return true if value shall be committed as soon as a selection is made.      */
specifier|public
name|boolean
name|isCommitOnSelChange
parameter_list|()
block|{
return|return
name|getDictionary
argument_list|()
operator|.
name|getFlag
argument_list|(
name|COSName
operator|.
name|FF
argument_list|,
name|FLAG_COMMIT_ON_SEL_CHANGE
argument_list|)
return|;
block|}
comment|/**      * Set the CommitOnSelChange bit.      *      * @param commitOnSelChange The value for CommitOnSelChange.      */
specifier|public
name|void
name|setCommitOnSelChange
parameter_list|(
name|boolean
name|commitOnSelChange
parameter_list|)
block|{
name|getDictionary
argument_list|()
operator|.
name|setFlag
argument_list|(
name|COSName
operator|.
name|FF
argument_list|,
name|FLAG_COMMIT_ON_SEL_CHANGE
argument_list|,
name|commitOnSelChange
argument_list|)
expr_stmt|;
block|}
comment|/**      * Determines if Combo is set.      *       * @return true if value the choice is a combo box..      */
specifier|public
name|boolean
name|isCombo
parameter_list|()
block|{
return|return
name|getDictionary
argument_list|()
operator|.
name|getFlag
argument_list|(
name|COSName
operator|.
name|FF
argument_list|,
name|FLAG_COMBO
argument_list|)
return|;
block|}
comment|/**      * Set the Combo bit.      *      * @param combo The value for Combo.      */
specifier|public
name|void
name|setCombo
parameter_list|(
name|boolean
name|combo
parameter_list|)
block|{
name|getDictionary
argument_list|()
operator|.
name|setFlag
argument_list|(
name|COSName
operator|.
name|FF
argument_list|,
name|FLAG_COMBO
argument_list|,
name|combo
argument_list|)
expr_stmt|;
block|}
comment|/**      * setValue sets the entry "V" to the given value.      *       * @param value the value      *       */
specifier|public
name|void
name|setValue
parameter_list|(
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|getDictionary
argument_list|()
operator|.
name|setString
argument_list|(
name|COSName
operator|.
name|V
argument_list|,
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
name|int
name|index
init|=
name|getSelectedIndex
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The list box does not contain the given value."
argument_list|)
throw|;
block|}
name|selectMultiple
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getDictionary
argument_list|()
operator|.
name|removeItem
argument_list|(
name|COSName
operator|.
name|V
argument_list|)
expr_stmt|;
block|}
comment|// TODO create/update appearance
block|}
comment|/**      * setValue sets the entry "V" to the given value.      *       * @param value the value      *       */
specifier|public
name|void
name|setValue
parameter_list|(
name|String
index|[]
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|isMultiSelect
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The list box does not allow multiple selection."
argument_list|)
throw|;
block|}
name|String
index|[]
name|stringValues
init|=
operator|(
name|String
index|[]
operator|)
name|value
decl_stmt|;
name|COSArray
name|stringArray
init|=
operator|new
name|COSArray
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stringValues
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|stringArray
operator|.
name|add
argument_list|(
operator|new
name|COSString
argument_list|(
name|stringValues
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|getDictionary
argument_list|()
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|V
argument_list|,
name|stringArray
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getDictionary
argument_list|()
operator|.
name|removeItem
argument_list|(
name|COSName
operator|.
name|V
argument_list|)
expr_stmt|;
block|}
comment|// TODO create/update appearance
block|}
comment|/**      * getValue gets the value of the "V" entry.      *       * @return The value of this entry.      *       */
annotation|@
name|Override
specifier|public
name|COSArray
name|getValue
parameter_list|()
block|{
name|COSBase
name|value
init|=
name|getDictionary
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|V
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|COSString
condition|)
block|{
name|COSArray
name|array
init|=
operator|new
name|COSArray
argument_list|()
decl_stmt|;
name|array
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|array
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|COSArray
condition|)
block|{
return|return
operator|(
name|COSArray
operator|)
name|value
return|;
block|}
return|return
literal|null
return|;
block|}
comment|// returns the "Opt" index for the given string
specifier|private
name|int
name|getSelectedIndex
parameter_list|(
name|String
name|optionValue
parameter_list|)
block|{
name|int
name|indexSelected
init|=
operator|-
literal|1
decl_stmt|;
name|COSArray
name|options
init|=
name|getOptions
argument_list|()
decl_stmt|;
comment|// YXJ: Changed the order of the loops. Acrobat produces PDF's
comment|// where sometimes there is 1 string and the rest arrays.
comment|// This code works either way.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|options
operator|.
name|size
argument_list|()
operator|&&
name|indexSelected
operator|==
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|COSBase
name|option
init|=
name|options
operator|.
name|getObject
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|option
operator|instanceof
name|COSArray
condition|)
block|{
name|COSArray
name|keyValuePair
init|=
operator|(
name|COSArray
operator|)
name|option
decl_stmt|;
name|COSString
name|key
init|=
operator|(
name|COSString
operator|)
name|keyValuePair
operator|.
name|getObject
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|COSString
name|value
init|=
operator|(
name|COSString
operator|)
name|keyValuePair
operator|.
name|getObject
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|optionValue
operator|.
name|equals
argument_list|(
name|key
operator|.
name|getString
argument_list|()
argument_list|)
operator|||
name|optionValue
operator|.
name|equals
argument_list|(
name|value
operator|.
name|getString
argument_list|()
argument_list|)
condition|)
block|{
name|indexSelected
operator|=
name|i
expr_stmt|;
block|}
block|}
else|else
block|{
name|COSString
name|value
init|=
operator|(
name|COSString
operator|)
name|option
decl_stmt|;
if|if
condition|(
name|optionValue
operator|.
name|equals
argument_list|(
name|value
operator|.
name|getString
argument_list|()
argument_list|)
condition|)
block|{
name|indexSelected
operator|=
name|i
expr_stmt|;
block|}
block|}
block|}
return|return
name|indexSelected
return|;
block|}
comment|// implements "MultiSelect"
specifier|private
name|void
name|selectMultiple
parameter_list|(
name|int
name|selectedIndex
parameter_list|)
block|{
name|COSArray
name|indexArray
init|=
name|getSelectedOptions
argument_list|()
decl_stmt|;
if|if
condition|(
name|indexArray
operator|!=
literal|null
condition|)
block|{
name|indexArray
operator|.
name|clear
argument_list|()
expr_stmt|;
name|indexArray
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|selectedIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

