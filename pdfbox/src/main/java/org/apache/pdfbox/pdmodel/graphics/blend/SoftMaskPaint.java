begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|blend
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Paint
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|PaintContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Point
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Rectangle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|RenderingHints
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Transparency
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|AffineTransform
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|Rectangle2D
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|BufferedImage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|ColorConvertOp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|ColorModel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|ComponentColorModel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|DataBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|Raster
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|WritableRaster
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * AWT Paint that adds a soft mask to the alpha channel of the existing parent paint. If the parent  * paint does not have an alpha channel, a new raster is created.  *   * @author KÃ¼hn& Weyh Software, GmbH  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|SoftMaskPaint
implements|implements
name|Paint
block|{
specifier|private
specifier|final
name|Paint
name|parentPaint
decl_stmt|;
specifier|private
specifier|final
name|Raster
name|softMaskRaster
decl_stmt|;
comment|/**      * Applies the soft mask to the parent.      */
specifier|public
name|SoftMaskPaint
parameter_list|(
name|Paint
name|parentPaint
parameter_list|,
name|Raster
name|softMaskRaster
parameter_list|)
block|{
name|this
operator|.
name|parentPaint
operator|=
name|parentPaint
expr_stmt|;
name|this
operator|.
name|softMaskRaster
operator|=
name|softMaskRaster
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getTransparency
parameter_list|()
block|{
return|return
name|Transparency
operator|.
name|TRANSLUCENT
return|;
block|}
annotation|@
name|Override
specifier|public
name|PaintContext
name|createContext
parameter_list|(
name|ColorModel
name|cm
parameter_list|,
name|Rectangle
name|deviceBounds
parameter_list|,
name|Rectangle2D
name|userBounds
parameter_list|,
name|AffineTransform
name|at
parameter_list|,
name|RenderingHints
name|hints
parameter_list|)
block|{
try|try
block|{
name|PaintContext
name|parentContext
init|=
name|parentPaint
operator|.
name|createContext
argument_list|(
literal|null
argument_list|,
name|deviceBounds
argument_list|,
name|userBounds
argument_list|,
name|at
argument_list|,
name|hints
argument_list|)
decl_stmt|;
return|return
operator|new
name|Context
argument_list|(
name|parentContext
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
comment|// context cannot be created
block|}
block|}
specifier|private
class|class
name|Context
implements|implements
name|PaintContext
block|{
specifier|private
specifier|final
name|PaintContext
name|parentContext
decl_stmt|;
specifier|private
specifier|final
name|ColorModel
name|colorModel
decl_stmt|;
specifier|private
specifier|final
name|int
name|numColorComponents
decl_stmt|;
specifier|private
specifier|final
name|ColorModel
name|parentColorModel
decl_stmt|;
name|Context
parameter_list|(
name|PaintContext
name|parentContext
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|parentContext
operator|=
name|parentContext
expr_stmt|;
name|parentColorModel
operator|=
name|parentContext
operator|.
name|getColorModel
argument_list|()
expr_stmt|;
if|if
condition|(
name|parentContext
operator|.
name|getColorModel
argument_list|()
operator|.
name|hasAlpha
argument_list|()
condition|)
block|{
name|colorModel
operator|=
name|parentColorModel
expr_stmt|;
block|}
else|else
block|{
name|colorModel
operator|=
operator|new
name|ComponentColorModel
argument_list|(
name|parentContext
operator|.
name|getColorModel
argument_list|()
operator|.
name|getColorSpace
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|Transparency
operator|.
name|OPAQUE
argument_list|,
name|DataBuffer
operator|.
name|TYPE_BYTE
argument_list|)
expr_stmt|;
block|}
name|numColorComponents
operator|=
name|colorModel
operator|.
name|getNumColorComponents
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ColorModel
name|getColorModel
parameter_list|()
block|{
return|return
name|colorModel
return|;
block|}
annotation|@
name|Override
specifier|public
name|Raster
name|getRaster
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|)
block|{
name|Raster
name|parentRaster
init|=
name|parentContext
operator|.
name|getRaster
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
decl_stmt|;
comment|// getRaster can return the raster with origin (0,0) even if we applied for (x,y)
name|int
name|parentMinX
init|=
name|parentRaster
operator|.
name|getMinX
argument_list|()
decl_stmt|;
name|int
name|parentMinY
init|=
name|parentRaster
operator|.
name|getMinY
argument_list|()
decl_stmt|;
name|WritableRaster
name|result
decl_stmt|;
if|if
condition|(
name|parentRaster
operator|instanceof
name|WritableRaster
condition|)
block|{
if|if
condition|(
name|parentColorModel
operator|.
name|equals
argument_list|(
name|colorModel
argument_list|)
condition|)
block|{
name|result
operator|=
name|parentRaster
operator|.
name|createCompatibleWritableRaster
argument_list|()
expr_stmt|;
name|result
operator|.
name|setDataElements
argument_list|(
operator|-
name|parentMinX
argument_list|,
operator|-
name|parentMinY
argument_list|,
name|parentRaster
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|BufferedImage
name|parentImage
init|=
operator|new
name|BufferedImage
argument_list|(
name|parentColorModel
argument_list|,
operator|(
name|WritableRaster
operator|)
name|parentRaster
argument_list|,
name|parentColorModel
operator|.
name|isAlphaPremultiplied
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|result
operator|=
name|Raster
operator|.
name|createWritableRaster
argument_list|(
name|colorModel
operator|.
name|createCompatibleSampleModel
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
argument_list|,
operator|new
name|Point
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|BufferedImage
name|resultImage
init|=
operator|new
name|BufferedImage
argument_list|(
name|colorModel
argument_list|,
name|result
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|resultImage
operator|.
name|getGraphics
argument_list|()
operator|.
name|drawImage
argument_list|(
name|parentImage
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|result
operator|=
name|Raster
operator|.
name|createInterleavedRaster
argument_list|(
name|DataBuffer
operator|.
name|TYPE_BYTE
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|getColorModel
argument_list|()
operator|.
name|getNumComponents
argument_list|()
argument_list|,
operator|new
name|Point
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|ColorConvertOp
name|colorConvertOp
init|=
operator|new
name|ColorConvertOp
argument_list|(
name|parentColorModel
operator|.
name|getColorSpace
argument_list|()
argument_list|,
name|colorModel
operator|.
name|getColorSpace
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|colorConvertOp
operator|.
name|filter
argument_list|(
name|parentRaster
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
name|int
name|softMaskMinX
init|=
name|softMaskRaster
operator|.
name|getMinX
argument_list|()
decl_stmt|;
name|int
name|softMaskMinY
init|=
name|softMaskRaster
operator|.
name|getMinY
argument_list|()
decl_stmt|;
name|int
name|softMaskMaxX
init|=
name|softMaskMinX
operator|+
name|softMaskRaster
operator|.
name|getWidth
argument_list|()
decl_stmt|;
name|int
name|softMaskMaxY
init|=
name|softMaskMinY
operator|+
name|softMaskRaster
operator|.
name|getHeight
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|h
condition|;
name|j
operator|++
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|w
condition|;
name|i
operator|++
control|)
block|{
name|int
name|rx
init|=
name|x
operator|+
name|i
decl_stmt|;
name|int
name|ry
init|=
name|y
operator|+
name|j
decl_stmt|;
name|int
name|alpha
decl_stmt|;
if|if
condition|(
operator|(
name|rx
operator|>=
name|softMaskMinX
operator|)
operator|&&
operator|(
name|rx
operator|<
name|softMaskMaxX
operator|)
operator|&&
operator|(
name|ry
operator|>=
name|softMaskMinY
operator|)
operator|&&
operator|(
name|ry
operator|<
name|softMaskMaxY
operator|)
condition|)
block|{
name|alpha
operator|=
name|softMaskRaster
operator|.
name|getSample
argument_list|(
name|rx
argument_list|,
name|ry
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|alpha
operator|=
literal|0
expr_stmt|;
block|}
name|alpha
operator|=
name|alpha
operator|*
name|result
operator|.
name|getSample
argument_list|(
name|i
argument_list|,
name|j
argument_list|,
name|numColorComponents
argument_list|)
operator|/
literal|255
expr_stmt|;
name|result
operator|.
name|setSample
argument_list|(
name|i
argument_list|,
name|j
argument_list|,
name|numColorComponents
argument_list|,
name|alpha
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dispose
parameter_list|()
block|{
comment|// do nothing
block|}
block|}
block|}
end_class

end_unit

