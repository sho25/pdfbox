begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|form
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdfwriter
operator|.
name|COSWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|form
operator|.
name|PlainText
operator|.
name|Line
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|form
operator|.
name|PlainText
operator|.
name|Paragraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|form
operator|.
name|PlainText
operator|.
name|TextAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|form
operator|.
name|PlainText
operator|.
name|Word
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|Charsets
import|;
end_import

begin_comment
comment|/**  * TextFormatter to handle plain text formatting.  *   * The text formatter will take a single value or an array of values which  * are treated as paragraphs.  */
end_comment

begin_class
class|class
name|PlainTextFormatter
block|{
enum|enum
name|HorizontalAlignment
block|{
name|LEFT
argument_list|(
literal|0
argument_list|)
block|,
name|CENTERED
argument_list|(
literal|1
argument_list|)
block|,
name|RIGHT
argument_list|(
literal|2
argument_list|)
block|;
specifier|private
specifier|final
name|int
name|quadding
decl_stmt|;
specifier|private
name|HorizontalAlignment
parameter_list|(
name|int
name|quadding
parameter_list|)
block|{
name|this
operator|.
name|quadding
operator|=
name|quadding
expr_stmt|;
block|}
name|int
name|getQuadding
parameter_list|()
block|{
return|return
name|quadding
return|;
block|}
specifier|public
specifier|static
name|HorizontalAlignment
name|valueOf
parameter_list|(
name|int
name|quadding
parameter_list|)
block|{
for|for
control|(
name|HorizontalAlignment
name|hAlignment
range|:
name|HorizontalAlignment
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|hAlignment
operator|.
name|getQuadding
argument_list|()
operator|==
name|quadding
condition|)
block|{
return|return
name|hAlignment
return|;
block|}
block|}
return|return
name|HorizontalAlignment
operator|.
name|LEFT
return|;
block|}
block|}
specifier|private
name|AppearanceStyle
name|appearanceStyle
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|wrapLines
decl_stmt|;
specifier|private
specifier|final
name|float
name|width
decl_stmt|;
specifier|private
specifier|final
name|OutputStream
name|outputstream
decl_stmt|;
specifier|private
specifier|final
name|PlainText
name|textContent
decl_stmt|;
specifier|private
specifier|final
name|HorizontalAlignment
name|hAlign
decl_stmt|;
comment|// number format
specifier|private
specifier|final
name|NumberFormat
name|formatDecimal
init|=
name|NumberFormat
operator|.
name|getNumberInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
specifier|static
class|class
name|Builder
block|{
comment|// required parameters
specifier|private
name|OutputStream
name|outputstream
decl_stmt|;
comment|// optional parameters
specifier|private
name|AppearanceStyle
name|appearanceStyle
decl_stmt|;
specifier|private
name|boolean
name|wrapLines
init|=
literal|false
decl_stmt|;
specifier|private
name|float
name|width
init|=
literal|0f
decl_stmt|;
specifier|private
name|PlainText
name|textContent
decl_stmt|;
specifier|private
name|HorizontalAlignment
name|hAlign
init|=
name|HorizontalAlignment
operator|.
name|LEFT
decl_stmt|;
specifier|public
name|Builder
parameter_list|(
name|OutputStream
name|outputstream
parameter_list|)
block|{
name|this
operator|.
name|outputstream
operator|=
name|outputstream
expr_stmt|;
block|}
name|Builder
name|style
parameter_list|(
name|AppearanceStyle
name|appearanceStyle
parameter_list|)
block|{
name|this
operator|.
name|appearanceStyle
operator|=
name|appearanceStyle
expr_stmt|;
return|return
name|this
return|;
block|}
name|Builder
name|wrapLines
parameter_list|(
name|boolean
name|wrapLines
parameter_list|)
block|{
name|this
operator|.
name|wrapLines
operator|=
name|wrapLines
expr_stmt|;
return|return
name|this
return|;
block|}
name|Builder
name|width
parameter_list|(
name|float
name|width
parameter_list|)
block|{
name|this
operator|.
name|width
operator|=
name|width
expr_stmt|;
return|return
name|this
return|;
block|}
name|Builder
name|hAlign
parameter_list|(
name|int
name|quadding
parameter_list|)
block|{
name|this
operator|.
name|hAlign
operator|=
name|HorizontalAlignment
operator|.
name|valueOf
argument_list|(
name|quadding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
name|Builder
name|text
parameter_list|(
name|PlainText
name|textContent
parameter_list|)
block|{
name|this
operator|.
name|textContent
operator|=
name|textContent
expr_stmt|;
return|return
name|this
return|;
block|}
name|PlainTextFormatter
name|build
parameter_list|()
block|{
return|return
operator|new
name|PlainTextFormatter
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
specifier|private
name|PlainTextFormatter
parameter_list|(
name|Builder
name|builder
parameter_list|)
block|{
name|appearanceStyle
operator|=
name|builder
operator|.
name|appearanceStyle
expr_stmt|;
name|wrapLines
operator|=
name|builder
operator|.
name|wrapLines
expr_stmt|;
name|width
operator|=
name|builder
operator|.
name|width
expr_stmt|;
name|outputstream
operator|=
name|builder
operator|.
name|outputstream
expr_stmt|;
name|textContent
operator|=
name|builder
operator|.
name|textContent
expr_stmt|;
name|hAlign
operator|=
name|builder
operator|.
name|hAlign
expr_stmt|;
block|}
comment|/**      * Format the text block.      *       * @throws IOException if there is an error writing to the stream.      */
specifier|public
name|void
name|format
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|textContent
operator|!=
literal|null
operator|&&
operator|!
name|textContent
operator|.
name|getParagraphs
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Paragraph
name|paragraph
range|:
name|textContent
operator|.
name|getParagraphs
argument_list|()
control|)
block|{
if|if
condition|(
name|wrapLines
condition|)
block|{
name|List
argument_list|<
name|Line
argument_list|>
name|lines
init|=
name|paragraph
operator|.
name|getLines
argument_list|(
name|appearanceStyle
operator|.
name|getFont
argument_list|()
argument_list|,
name|appearanceStyle
operator|.
name|getFontSize
argument_list|()
argument_list|,
name|width
argument_list|)
decl_stmt|;
name|processLines
argument_list|(
name|lines
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|showText
argument_list|(
name|paragraph
operator|.
name|getText
argument_list|()
argument_list|,
name|appearanceStyle
operator|.
name|getFont
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Process lines for output.       *      * Process lines for an individual paragraph and generate the       * commands for the content stream to show the text.      *       * @param lines the lines to process.      * @throws IOException if there is an error writing to the stream.      */
specifier|private
name|void
name|processLines
parameter_list|(
name|List
argument_list|<
name|Line
argument_list|>
name|lines
parameter_list|)
throws|throws
name|IOException
block|{
name|PDFont
name|font
init|=
name|appearanceStyle
operator|.
name|getFont
argument_list|()
decl_stmt|;
name|float
name|wordWidth
init|=
literal|0f
decl_stmt|;
name|float
name|lastPos
init|=
literal|0f
decl_stmt|;
name|float
name|startOffset
init|=
literal|0f
decl_stmt|;
for|for
control|(
name|Line
name|line
range|:
name|lines
control|)
block|{
switch|switch
condition|(
name|hAlign
condition|)
block|{
case|case
name|LEFT
case|:
name|startOffset
operator|=
literal|0f
expr_stmt|;
break|break;
case|case
name|CENTERED
case|:
name|startOffset
operator|=
operator|(
name|width
operator|-
name|line
operator|.
name|getWidth
argument_list|()
operator|)
operator|/
literal|2
expr_stmt|;
break|break;
case|case
name|RIGHT
case|:
name|startOffset
operator|=
name|width
operator|-
name|line
operator|.
name|getWidth
argument_list|()
expr_stmt|;
break|break;
default|default:
name|startOffset
operator|=
literal|0f
expr_stmt|;
block|}
name|float
name|offset
init|=
operator|-
name|lastPos
operator|+
name|startOffset
decl_stmt|;
name|newLineAtOffset
argument_list|(
name|offset
argument_list|,
operator|-
name|appearanceStyle
operator|.
name|getLeading
argument_list|()
argument_list|)
expr_stmt|;
name|lastPos
operator|=
name|startOffset
expr_stmt|;
name|List
argument_list|<
name|Word
argument_list|>
name|words
init|=
name|line
operator|.
name|getWords
argument_list|()
decl_stmt|;
for|for
control|(
name|Word
name|word
range|:
name|words
control|)
block|{
name|showText
argument_list|(
name|word
operator|.
name|getText
argument_list|()
argument_list|,
name|font
argument_list|)
expr_stmt|;
name|wordWidth
operator|=
operator|(
name|Float
operator|)
name|word
operator|.
name|getAttributes
argument_list|()
operator|.
name|getIterator
argument_list|()
operator|.
name|getAttribute
argument_list|(
name|TextAttribute
operator|.
name|WIDTH
argument_list|)
expr_stmt|;
if|if
condition|(
name|words
operator|.
name|indexOf
argument_list|(
name|word
argument_list|)
operator|!=
name|words
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
name|newLineAtOffset
argument_list|(
name|wordWidth
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|lastPos
operator|=
name|lastPos
operator|+
name|wordWidth
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Shows the given text at the location specified by the current text matrix.      *      * @param text The Unicode text to show.      * @throws IOException if there is an error writing to the stream.      */
specifier|private
name|void
name|showText
parameter_list|(
name|String
name|text
parameter_list|,
name|PDFont
name|font
parameter_list|)
throws|throws
name|IOException
block|{
name|COSWriter
operator|.
name|writeString
argument_list|(
name|font
operator|.
name|encode
argument_list|(
name|text
argument_list|)
argument_list|,
name|outputstream
argument_list|)
expr_stmt|;
name|write
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|writeOperator
argument_list|(
literal|"Tj"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Writes a string to the content stream as ASCII.      */
specifier|private
name|void
name|write
parameter_list|(
name|String
name|text
parameter_list|)
throws|throws
name|IOException
block|{
name|outputstream
operator|.
name|write
argument_list|(
name|text
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|US_ASCII
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Writes a string to the content stream as ASCII.      */
specifier|private
name|void
name|writeOperator
parameter_list|(
name|String
name|text
parameter_list|)
throws|throws
name|IOException
block|{
name|outputstream
operator|.
name|write
argument_list|(
name|text
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|US_ASCII
argument_list|)
argument_list|)
expr_stmt|;
name|outputstream
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
comment|/**      * The Td operator.      * Move to the start of the next line, offset from the start of the current line by (tx, ty).      *      * @param tx The x translation.      * @param ty The y translation.      * @throws IOException if there is an error writing to the stream.      */
specifier|public
name|void
name|newLineAtOffset
parameter_list|(
name|float
name|tx
parameter_list|,
name|float
name|ty
parameter_list|)
throws|throws
name|IOException
block|{
name|writeOperand
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|writeOperand
argument_list|(
name|ty
argument_list|)
expr_stmt|;
name|writeOperator
argument_list|(
literal|"Td"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Writes a real real to the content stream.      */
specifier|private
name|void
name|writeOperand
parameter_list|(
name|float
name|real
parameter_list|)
throws|throws
name|IOException
block|{
name|write
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|real
argument_list|)
argument_list|)
expr_stmt|;
name|outputstream
operator|.
name|write
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

