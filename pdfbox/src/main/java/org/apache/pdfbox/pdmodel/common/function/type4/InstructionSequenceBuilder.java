begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|function
operator|.
name|type4
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * Basic parser for Type 4 functions which is used to build up instruction sequences.  *  * @version $Revision$  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|InstructionSequenceBuilder
extends|extends
name|Parser
operator|.
name|AbstractSyntaxHandler
block|{
specifier|private
specifier|final
name|InstructionSequence
name|mainSequence
init|=
operator|new
name|InstructionSequence
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Stack
argument_list|<
name|InstructionSequence
argument_list|>
name|seqStack
init|=
operator|new
name|Stack
argument_list|<
name|InstructionSequence
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|InstructionSequenceBuilder
parameter_list|()
block|{
name|this
operator|.
name|seqStack
operator|.
name|push
argument_list|(
name|this
operator|.
name|mainSequence
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the instruction sequence that has been build from the syntactic elements.      * @return the instruction sequence      */
specifier|public
name|InstructionSequence
name|getInstructionSequence
parameter_list|()
block|{
return|return
name|this
operator|.
name|mainSequence
return|;
block|}
comment|/**      * Parses the given text into an instruction sequence representing a Type 4 function      * that can be executed.      * @param text the Type 4 function text      * @return the instruction sequence      */
specifier|public
specifier|static
name|InstructionSequence
name|parse
parameter_list|(
name|CharSequence
name|text
parameter_list|)
block|{
name|InstructionSequenceBuilder
name|builder
init|=
operator|new
name|InstructionSequenceBuilder
argument_list|()
decl_stmt|;
name|Parser
operator|.
name|parse
argument_list|(
name|text
argument_list|,
name|builder
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|getInstructionSequence
argument_list|()
return|;
block|}
specifier|private
name|InstructionSequence
name|getCurrentSequence
parameter_list|()
block|{
return|return
name|this
operator|.
name|seqStack
operator|.
name|peek
argument_list|()
return|;
block|}
specifier|private
specifier|static
specifier|final
name|Pattern
name|INTEGER_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[\\+\\-]?\\d+"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|REAL_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[\\-]?\\d*\\.\\d*([Ee]\\-?\\d+)?"
argument_list|)
decl_stmt|;
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|void
name|token
parameter_list|(
name|CharSequence
name|text
parameter_list|)
block|{
name|String
name|token
init|=
name|text
operator|.
name|toString
argument_list|()
decl_stmt|;
name|token
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|token
parameter_list|(
name|String
name|token
parameter_list|)
block|{
if|if
condition|(
literal|"{"
operator|.
name|equals
argument_list|(
name|token
argument_list|)
condition|)
block|{
name|InstructionSequence
name|child
init|=
operator|new
name|InstructionSequence
argument_list|()
decl_stmt|;
name|getCurrentSequence
argument_list|()
operator|.
name|addProc
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|this
operator|.
name|seqStack
operator|.
name|push
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"}"
operator|.
name|equals
argument_list|(
name|token
argument_list|)
condition|)
block|{
name|this
operator|.
name|seqStack
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Matcher
name|m
init|=
name|INTEGER_PATTERN
operator|.
name|matcher
argument_list|(
name|token
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|getCurrentSequence
argument_list|()
operator|.
name|addInteger
argument_list|(
name|parseInt
argument_list|(
name|token
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|m
operator|=
name|REAL_PATTERN
operator|.
name|matcher
argument_list|(
name|token
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|getCurrentSequence
argument_list|()
operator|.
name|addReal
argument_list|(
name|parseReal
argument_list|(
name|token
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|//TODO Maybe implement radix numbers, such as 8#1777 or 16#FFFE
name|getCurrentSequence
argument_list|()
operator|.
name|addName
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Parses a value of type "int".      * @param token the token to be parsed      * @return the parsed value      */
specifier|public
specifier|static
name|int
name|parseInt
parameter_list|(
name|String
name|token
parameter_list|)
block|{
if|if
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|"+"
argument_list|)
condition|)
block|{
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|token
argument_list|)
return|;
block|}
comment|/**      * Parses a value of type "real".      * @param token the token to be parsed      * @return the parsed value      */
specifier|public
specifier|static
name|float
name|parseReal
parameter_list|(
name|String
name|token
parameter_list|)
block|{
return|return
name|Float
operator|.
name|parseFloat
argument_list|(
name|token
argument_list|)
return|;
block|}
block|}
end_class

end_unit

