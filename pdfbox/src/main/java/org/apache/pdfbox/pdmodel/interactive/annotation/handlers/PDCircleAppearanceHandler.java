begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|handlers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDRectangle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAnnotationSquareCircle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAppearanceContentStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDBorderStyleDictionary
import|;
end_import

begin_comment
comment|/**  * Handler to generate the square annotations appearance.  *  */
end_comment

begin_class
specifier|public
class|class
name|PDCircleAppearanceHandler
extends|extends
name|PDAbstractAppearanceHandler
block|{
specifier|public
name|PDCircleAppearanceHandler
parameter_list|(
name|PDAnnotation
name|annotation
parameter_list|)
block|{
name|super
argument_list|(
name|annotation
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|generateAppearanceStreams
parameter_list|()
block|{
name|generateNormalAppearance
argument_list|()
expr_stmt|;
name|generateRolloverAppearance
argument_list|()
expr_stmt|;
name|generateDownAppearance
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|generateNormalAppearance
parameter_list|()
block|{
name|float
name|lineWidth
init|=
name|getLineWidth
argument_list|()
decl_stmt|;
try|try
block|{
name|PDAppearanceContentStream
name|contentStream
init|=
name|getNormalAppearanceAsContentStream
argument_list|()
decl_stmt|;
name|contentStream
operator|.
name|setStrokingColorOnDemand
argument_list|(
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|hasBackground
init|=
name|contentStream
operator|.
name|setNonStrokingColorOnDemand
argument_list|(
operator|(
operator|(
name|PDAnnotationSquareCircle
operator|)
name|getAnnotation
argument_list|()
operator|)
operator|.
name|getInteriorColor
argument_list|()
argument_list|)
decl_stmt|;
name|handleOpacity
argument_list|(
operator|(
operator|(
name|PDAnnotationSquareCircle
operator|)
name|getAnnotation
argument_list|()
operator|)
operator|.
name|getConstantOpacity
argument_list|()
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setBorderLine
argument_list|(
name|lineWidth
argument_list|,
operator|(
operator|(
name|PDAnnotationSquareCircle
operator|)
name|getAnnotation
argument_list|()
operator|)
operator|.
name|getBorderStyle
argument_list|()
argument_list|)
expr_stmt|;
comment|// the differences rectangle
comment|// TODO: this only works for border effect solid. Cloudy needs a different approach.
name|setRectDifference
argument_list|(
name|lineWidth
argument_list|)
expr_stmt|;
comment|// Acrobat applies a padding to each side of the bbox so the line is completely within
comment|// the bbox.
comment|// TODO: Needs validation for Circles as Adobe Reader seems to extend the bbox bei the rect differenve
comment|// for circle annotations.
name|PDRectangle
name|bbox
init|=
name|getRectangle
argument_list|()
decl_stmt|;
name|PDRectangle
name|borderEdge
init|=
name|getPaddedRectangle
argument_list|(
name|bbox
argument_list|,
name|lineWidth
operator|/
literal|2
argument_list|)
decl_stmt|;
comment|// lower left corner
name|float
name|x0
init|=
name|borderEdge
operator|.
name|getLowerLeftX
argument_list|()
decl_stmt|;
name|float
name|y0
init|=
name|borderEdge
operator|.
name|getLowerLeftY
argument_list|()
decl_stmt|;
comment|// upper right corner
name|float
name|x1
init|=
name|borderEdge
operator|.
name|getUpperRightX
argument_list|()
decl_stmt|;
name|float
name|y1
init|=
name|borderEdge
operator|.
name|getUpperRightY
argument_list|()
decl_stmt|;
comment|// mid points
name|float
name|xm
init|=
name|x0
operator|+
name|borderEdge
operator|.
name|getWidth
argument_list|()
operator|/
literal|2
decl_stmt|;
name|float
name|ym
init|=
name|y0
operator|+
name|borderEdge
operator|.
name|getHeight
argument_list|()
operator|/
literal|2
decl_stmt|;
comment|// see http://spencermortensen.com/articles/bezier-circle/
comment|// the below number was calculated from sampling content streams
comment|// generated using Adobe Reader
name|float
name|magic
init|=
literal|0.55555417f
decl_stmt|;
comment|// control point offsets
name|float
name|vOffset
init|=
name|borderEdge
operator|.
name|getHeight
argument_list|()
operator|/
literal|2
operator|*
name|magic
decl_stmt|;
name|float
name|hOffset
init|=
name|borderEdge
operator|.
name|getWidth
argument_list|()
operator|/
literal|2
operator|*
name|magic
decl_stmt|;
name|contentStream
operator|.
name|moveTo
argument_list|(
name|xm
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|curveTo
argument_list|(
operator|(
name|xm
operator|+
name|hOffset
operator|)
argument_list|,
name|y1
argument_list|,
name|x1
argument_list|,
operator|(
name|ym
operator|+
name|vOffset
operator|)
argument_list|,
name|x1
argument_list|,
name|ym
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|curveTo
argument_list|(
name|x1
argument_list|,
operator|(
name|ym
operator|-
name|vOffset
operator|)
argument_list|,
operator|(
name|xm
operator|+
name|hOffset
operator|)
argument_list|,
name|y0
argument_list|,
name|xm
argument_list|,
name|y0
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|curveTo
argument_list|(
operator|(
name|xm
operator|-
name|hOffset
operator|)
argument_list|,
name|y0
argument_list|,
name|x0
argument_list|,
operator|(
name|ym
operator|-
name|vOffset
operator|)
argument_list|,
name|x0
argument_list|,
name|ym
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|curveTo
argument_list|(
name|x0
argument_list|,
operator|(
name|ym
operator|+
name|vOffset
operator|)
argument_list|,
operator|(
name|xm
operator|-
name|hOffset
operator|)
argument_list|,
name|y1
argument_list|,
name|xm
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|closePath
argument_list|()
expr_stmt|;
name|contentStream
operator|.
name|drawShape
argument_list|(
name|lineWidth
argument_list|,
name|hasBackground
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|generateRolloverAppearance
parameter_list|()
block|{
comment|// TODO to be implemented
block|}
annotation|@
name|Override
specifier|public
name|void
name|generateDownAppearance
parameter_list|()
block|{
comment|// TODO to be implemented
block|}
comment|/**      * Get the line with of the border.      *       * Get the width of the line used to draw a border around the annotation.      * This may either be specified by the annotation dictionaries Border      * setting or by the W entry in the BS border style dictionary. If both are      * missing the default width is 1.      *       * @return the line width      */
comment|// TODO: according to the PDF spec the use of the BS entry is annotation
comment|// specific
comment|// so we will leave that to be implemented by individual handlers.
comment|// If at the end all annotations support the BS entry this can be handled
comment|// here and removed from the individual handlers.
name|float
name|getLineWidth
parameter_list|()
block|{
name|PDAnnotationSquareCircle
name|annotation
init|=
operator|(
name|PDAnnotationSquareCircle
operator|)
name|getAnnotation
argument_list|()
decl_stmt|;
name|PDBorderStyleDictionary
name|bs
init|=
name|annotation
operator|.
name|getBorderStyle
argument_list|()
decl_stmt|;
if|if
condition|(
name|bs
operator|!=
literal|null
condition|)
block|{
return|return
name|bs
operator|.
name|getWidth
argument_list|()
return|;
block|}
else|else
block|{
name|COSArray
name|borderCharacteristics
init|=
name|annotation
operator|.
name|getBorder
argument_list|()
decl_stmt|;
if|if
condition|(
name|borderCharacteristics
operator|.
name|size
argument_list|()
operator|>=
literal|3
condition|)
block|{
return|return
name|borderCharacteristics
operator|.
name|getInt
argument_list|(
literal|3
argument_list|)
return|;
block|}
block|}
return|return
literal|1
return|;
block|}
block|}
end_class

end_unit

