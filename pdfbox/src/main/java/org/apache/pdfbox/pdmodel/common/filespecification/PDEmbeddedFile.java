begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|filespecification
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDStream
import|;
end_import

begin_comment
comment|/**  * This represents an embedded file in a file specification.  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.2 $  */
end_comment

begin_class
specifier|public
class|class
name|PDEmbeddedFile
extends|extends
name|PDStream
block|{
comment|/**      * Constructor.      *      * @param document {@inheritDoc}      */
specifier|public
name|PDEmbeddedFile
parameter_list|(
name|PDDocument
name|document
parameter_list|)
block|{
name|super
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|getStream
argument_list|()
operator|.
name|setName
argument_list|(
name|COSName
operator|.
name|TYPE
argument_list|,
literal|"EmbeddedFile"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor.      *      * @param str The stream parameter.      */
specifier|public
name|PDEmbeddedFile
parameter_list|(
name|COSStream
name|str
parameter_list|)
block|{
name|super
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor.      *      * @param doc {@inheritDoc}      * @param str {@inheritDoc}      *      * @throws IOException {@inheritDoc}      */
specifier|public
name|PDEmbeddedFile
parameter_list|(
name|PDDocument
name|doc
parameter_list|,
name|InputStream
name|str
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|doc
argument_list|,
name|str
argument_list|)
expr_stmt|;
name|getStream
argument_list|()
operator|.
name|setName
argument_list|(
name|COSName
operator|.
name|TYPE
argument_list|,
literal|"EmbeddedFile"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor.      *      * @param doc {@inheritDoc}      * @param str {@inheritDoc}      * @param filtered {@inheritDoc}      *      * @throws IOException {@inheritDoc}      */
specifier|public
name|PDEmbeddedFile
parameter_list|(
name|PDDocument
name|doc
parameter_list|,
name|InputStream
name|str
parameter_list|,
name|boolean
name|filtered
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|doc
argument_list|,
name|str
argument_list|,
name|filtered
argument_list|)
expr_stmt|;
name|getStream
argument_list|()
operator|.
name|setName
argument_list|(
name|COSName
operator|.
name|TYPE
argument_list|,
literal|"EmbeddedFile"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the subtype for this embedded file.  This should be a mime type value.  Optional.      *      * @param mimeType The mimeType for the file.      */
specifier|public
name|void
name|setSubtype
parameter_list|(
name|String
name|mimeType
parameter_list|)
block|{
name|getStream
argument_list|()
operator|.
name|setName
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|,
name|mimeType
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the subtype(mimetype) for the embedded file.      *      * @return The type of embedded file.      */
specifier|public
name|String
name|getSubtype
parameter_list|()
block|{
return|return
name|getStream
argument_list|()
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|)
return|;
block|}
comment|/**      * Get the size of the embedded file.      *      * @return The size of the embedded file.      */
specifier|public
name|int
name|getSize
parameter_list|()
block|{
return|return
name|getStream
argument_list|()
operator|.
name|getEmbeddedInt
argument_list|(
literal|"Params"
argument_list|,
literal|"Size"
argument_list|)
return|;
block|}
comment|/**      * Set the size of the embedded file.      *      * @param size The size of the embedded file.      */
specifier|public
name|void
name|setSize
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|getStream
argument_list|()
operator|.
name|setEmbeddedInt
argument_list|(
literal|"Params"
argument_list|,
literal|"Size"
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the creation date of the embedded file.      *      * @return The Creation date.      * @throws IOException If there is an error while constructing the date.      */
specifier|public
name|Calendar
name|getCreationDate
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getStream
argument_list|()
operator|.
name|getEmbeddedDate
argument_list|(
literal|"Params"
argument_list|,
literal|"CreationDate"
argument_list|)
return|;
block|}
comment|/**      * Set the creation date.      *      * @param creation The new creation date.      */
specifier|public
name|void
name|setCreationDate
parameter_list|(
name|Calendar
name|creation
parameter_list|)
block|{
name|getStream
argument_list|()
operator|.
name|setEmbeddedDate
argument_list|(
literal|"Params"
argument_list|,
literal|"CreationDate"
argument_list|,
name|creation
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the mod date of the embedded file.      *      * @return The mod date.      * @throws IOException If there is an error while constructing the date.      */
specifier|public
name|Calendar
name|getModDate
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getStream
argument_list|()
operator|.
name|getEmbeddedDate
argument_list|(
literal|"Params"
argument_list|,
literal|"ModDate"
argument_list|)
return|;
block|}
comment|/**      * Set the mod date.      *      * @param mod The new creation mod.      */
specifier|public
name|void
name|setModDate
parameter_list|(
name|Calendar
name|mod
parameter_list|)
block|{
name|getStream
argument_list|()
operator|.
name|setEmbeddedDate
argument_list|(
literal|"Params"
argument_list|,
literal|"ModDate"
argument_list|,
name|mod
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the check sum of the embedded file.      *      * @return The check sum of the file.      */
specifier|public
name|String
name|getCheckSum
parameter_list|()
block|{
return|return
name|getStream
argument_list|()
operator|.
name|getEmbeddedString
argument_list|(
literal|"Params"
argument_list|,
literal|"CheckSum"
argument_list|)
return|;
block|}
comment|/**      * Set the check sum.      *      * @param checksum The checksum of the file.      */
specifier|public
name|void
name|setCheckSum
parameter_list|(
name|String
name|checksum
parameter_list|)
block|{
name|getStream
argument_list|()
operator|.
name|setEmbeddedString
argument_list|(
literal|"Params"
argument_list|,
literal|"CheckSum"
argument_list|,
name|checksum
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the mac subtype.      *      * @return The mac subtype.      */
specifier|public
name|String
name|getMacSubtype
parameter_list|()
block|{
name|String
name|retval
init|=
literal|null
decl_stmt|;
name|COSDictionary
name|params
init|=
operator|(
name|COSDictionary
operator|)
name|getStream
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
literal|"Params"
argument_list|)
decl_stmt|;
if|if
condition|(
name|params
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
name|params
operator|.
name|getEmbeddedString
argument_list|(
literal|"Mac"
argument_list|,
literal|"Subtype"
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * Set the mac subtype.      *      * @param macSubtype The mac subtype.      */
specifier|public
name|void
name|setMacSubtype
parameter_list|(
name|String
name|macSubtype
parameter_list|)
block|{
name|COSDictionary
name|params
init|=
operator|(
name|COSDictionary
operator|)
name|getStream
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
literal|"Params"
argument_list|)
decl_stmt|;
if|if
condition|(
name|params
operator|==
literal|null
operator|&&
name|macSubtype
operator|!=
literal|null
condition|)
block|{
name|params
operator|=
operator|new
name|COSDictionary
argument_list|()
expr_stmt|;
name|getStream
argument_list|()
operator|.
name|setItem
argument_list|(
literal|"Params"
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|params
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|setEmbeddedString
argument_list|(
literal|"Mac"
argument_list|,
literal|"Subtype"
argument_list|,
name|macSubtype
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Get the mac Creator.      *      * @return The mac Creator.      */
specifier|public
name|String
name|getMacCreator
parameter_list|()
block|{
name|String
name|retval
init|=
literal|null
decl_stmt|;
name|COSDictionary
name|params
init|=
operator|(
name|COSDictionary
operator|)
name|getStream
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
literal|"Params"
argument_list|)
decl_stmt|;
if|if
condition|(
name|params
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
name|params
operator|.
name|getEmbeddedString
argument_list|(
literal|"Mac"
argument_list|,
literal|"Creator"
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * Set the mac Creator.      *      * @param macCreator The mac Creator.      */
specifier|public
name|void
name|setMacCreator
parameter_list|(
name|String
name|macCreator
parameter_list|)
block|{
name|COSDictionary
name|params
init|=
operator|(
name|COSDictionary
operator|)
name|getStream
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
literal|"Params"
argument_list|)
decl_stmt|;
if|if
condition|(
name|params
operator|==
literal|null
operator|&&
name|macCreator
operator|!=
literal|null
condition|)
block|{
name|params
operator|=
operator|new
name|COSDictionary
argument_list|()
expr_stmt|;
name|getStream
argument_list|()
operator|.
name|setItem
argument_list|(
literal|"Params"
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|params
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|setEmbeddedString
argument_list|(
literal|"Mac"
argument_list|,
literal|"Creator"
argument_list|,
name|macCreator
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Get the mac ResFork.      *      * @return The mac ResFork.      */
specifier|public
name|String
name|getMacResFork
parameter_list|()
block|{
name|String
name|retval
init|=
literal|null
decl_stmt|;
name|COSDictionary
name|params
init|=
operator|(
name|COSDictionary
operator|)
name|getStream
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
literal|"Params"
argument_list|)
decl_stmt|;
if|if
condition|(
name|params
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
name|params
operator|.
name|getEmbeddedString
argument_list|(
literal|"Mac"
argument_list|,
literal|"ResFork"
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * Set the mac ResFork.      *      * @param macResFork The mac ResFork.      */
specifier|public
name|void
name|setMacResFork
parameter_list|(
name|String
name|macResFork
parameter_list|)
block|{
name|COSDictionary
name|params
init|=
operator|(
name|COSDictionary
operator|)
name|getStream
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
literal|"Params"
argument_list|)
decl_stmt|;
if|if
condition|(
name|params
operator|==
literal|null
operator|&&
name|macResFork
operator|!=
literal|null
condition|)
block|{
name|params
operator|=
operator|new
name|COSDictionary
argument_list|()
expr_stmt|;
name|getStream
argument_list|()
operator|.
name|setItem
argument_list|(
literal|"Params"
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|params
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|setEmbeddedString
argument_list|(
literal|"Mac"
argument_list|,
literal|"ResFork"
argument_list|,
name|macResFork
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

