begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|form
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|COSObjectable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * An XML Forms Architecture (XFA) resource.  *  * @author Ben Litchfield  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|PDXFAResource
implements|implements
name|COSObjectable
block|{
comment|/**      * The default buffer size      */
specifier|private
specifier|static
specifier|final
name|int
name|BUFFER_SIZE
init|=
literal|1024
decl_stmt|;
specifier|private
specifier|final
name|COSBase
name|xfa
decl_stmt|;
comment|/**      * Constructor.      *      * @param xfaBase The xfa resource.      */
specifier|public
name|PDXFAResource
parameter_list|(
name|COSBase
name|xfaBase
parameter_list|)
block|{
name|xfa
operator|=
name|xfaBase
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|COSBase
name|getCOSObject
parameter_list|()
block|{
return|return
name|xfa
return|;
block|}
comment|/**      * Get the XFA content as byte array.      *       * The XFA is either a stream containing the entire XFA resource      * or an array specifying individual packets that together make      * up the XFA resource.      *       * A packet is a pair of a string and stream. The string contains      * the name of the XML element and the stream contains the complete      * text of this XML element. Each packet represents a complete XML      * element, with the exception of the first and last packet,      * which specify begin and end tags for the xdp:xdp element.      * [IS0 32000-1:2008: 12.7.8]      *       * @return the XFA content      * @throws IOException       */
specifier|public
name|byte
index|[]
name|getBytes
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|xfaBytes
decl_stmt|;
try|try
block|{
comment|// handle the case if the XFA is split into individual parts
if|if
condition|(
name|this
operator|.
name|getCOSObject
argument_list|()
operator|instanceof
name|COSArray
condition|)
block|{
name|xfaBytes
operator|=
operator|new
name|byte
index|[
name|BUFFER_SIZE
index|]
expr_stmt|;
name|COSArray
name|cosArray
init|=
operator|(
name|COSArray
operator|)
name|this
operator|.
name|getCOSObject
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|cosArray
operator|.
name|size
argument_list|()
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|COSBase
name|cosObj
init|=
name|cosArray
operator|.
name|getObject
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|cosObj
operator|instanceof
name|COSStream
condition|)
block|{
name|is
operator|=
operator|(
operator|(
name|COSStream
operator|)
name|cosObj
operator|)
operator|.
name|createInputStream
argument_list|()
expr_stmt|;
name|int
name|nRead
decl_stmt|;
while|while
condition|(
operator|(
name|nRead
operator|=
name|is
operator|.
name|read
argument_list|(
name|xfaBytes
argument_list|,
literal|0
argument_list|,
name|xfaBytes
operator|.
name|length
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|baos
operator|.
name|write
argument_list|(
name|xfaBytes
argument_list|,
literal|0
argument_list|,
name|nRead
argument_list|)
expr_stmt|;
block|}
name|baos
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
comment|// handle the case if the XFA is represented as a single stream
block|}
elseif|else
if|if
condition|(
name|xfa
operator|.
name|getCOSObject
argument_list|()
operator|instanceof
name|COSStream
condition|)
block|{
name|xfaBytes
operator|=
operator|new
name|byte
index|[
name|BUFFER_SIZE
index|]
expr_stmt|;
name|is
operator|=
operator|(
operator|(
name|COSStream
operator|)
name|xfa
operator|.
name|getCOSObject
argument_list|()
operator|)
operator|.
name|createInputStream
argument_list|()
expr_stmt|;
name|int
name|nRead
decl_stmt|;
while|while
condition|(
operator|(
name|nRead
operator|=
name|is
operator|.
name|read
argument_list|(
name|xfaBytes
argument_list|,
literal|0
argument_list|,
name|xfaBytes
operator|.
name|length
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|baos
operator|.
name|write
argument_list|(
name|xfaBytes
argument_list|,
literal|0
argument_list|,
name|nRead
argument_list|)
expr_stmt|;
block|}
name|baos
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|baos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
comment|/**      * Get the XFA content as W3C document.      *       * @see #getBytes()      *       * @return the XFA content      *       * @throws ParserConfigurationException parser exception.      * @throws SAXException parser exception.      * @throws IOException if something went wrong when reading the XFA content.      *       */
specifier|public
name|Document
name|getDocument
parameter_list|()
throws|throws
name|ParserConfigurationException
throws|,
name|SAXException
throws|,
name|IOException
block|{
name|DocumentBuilderFactory
name|factory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|DocumentBuilder
name|builder
init|=
name|factory
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
return|return
name|builder
operator|.
name|parse
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|this
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

