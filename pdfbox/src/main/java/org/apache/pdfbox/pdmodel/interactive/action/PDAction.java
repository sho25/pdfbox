begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|COSArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDDestinationOrAction
import|;
end_import

begin_comment
comment|/**  * This represents an action that can be executed in a PDF document.  *  * @author Ben Litchfield  * @author Panagiotis Toumasis  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|PDAction
implements|implements
name|PDDestinationOrAction
block|{
comment|/**      * The type of PDF object.      */
specifier|public
specifier|static
specifier|final
name|String
name|TYPE
init|=
literal|"Action"
decl_stmt|;
comment|/**      * The action dictionary.      */
specifier|protected
name|COSDictionary
name|action
decl_stmt|;
comment|/**      * Default constructor.      */
specifier|public
name|PDAction
parameter_list|()
block|{
name|action
operator|=
operator|new
name|COSDictionary
argument_list|()
expr_stmt|;
name|setType
argument_list|(
name|TYPE
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor.      *      * @param a The action dictionary.      */
specifier|public
name|PDAction
parameter_list|(
name|COSDictionary
name|a
parameter_list|)
block|{
name|action
operator|=
name|a
expr_stmt|;
block|}
comment|/**      * Convert this standard java object to a COS object.      *      * @return The cos object that matches this Java object.      */
annotation|@
name|Override
specifier|public
name|COSDictionary
name|getCOSObject
parameter_list|()
block|{
return|return
name|action
return|;
block|}
comment|/**      * This will get the type of PDF object that the actions dictionary describes.      * If present must be Action for an action dictionary.      *      * @return The Type of PDF object.      */
specifier|public
specifier|final
name|String
name|getType
parameter_list|()
block|{
return|return
name|action
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|TYPE
argument_list|)
return|;
block|}
comment|/**      * This will set the type of PDF object that the actions dictionary describes.      * If present must be Action for an action dictionary.      *      * @param type The new Type for the PDF object.      */
specifier|protected
specifier|final
name|void
name|setType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|action
operator|.
name|setName
argument_list|(
name|COSName
operator|.
name|TYPE
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the type of action that the actions dictionary describes.      *      * @return The S entry of actions dictionary.      */
specifier|public
specifier|final
name|String
name|getSubType
parameter_list|()
block|{
return|return
name|action
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|S
argument_list|)
return|;
block|}
comment|/**      * This will set the type of action that the actions dictionary describes.      *      * @param s The new type of action.      */
specifier|protected
specifier|final
name|void
name|setSubType
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|action
operator|.
name|setName
argument_list|(
name|COSName
operator|.
name|S
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the next action, or sequence of actions, to be performed after this one.      * The value is either a single action dictionary or an array of action dictionaries      * to be performed in order.      *      * @return The Next action or sequence of actions.      */
specifier|public
name|List
argument_list|<
name|PDAction
argument_list|>
name|getNext
parameter_list|()
block|{
name|List
argument_list|<
name|PDAction
argument_list|>
name|retval
init|=
literal|null
decl_stmt|;
name|COSBase
name|next
init|=
name|action
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|NEXT
argument_list|)
decl_stmt|;
if|if
condition|(
name|next
operator|instanceof
name|COSDictionary
condition|)
block|{
name|PDAction
name|pdAction
init|=
name|PDActionFactory
operator|.
name|createAction
argument_list|(
operator|(
name|COSDictionary
operator|)
name|next
argument_list|)
decl_stmt|;
name|retval
operator|=
operator|new
name|COSArrayList
argument_list|<>
argument_list|(
name|pdAction
argument_list|,
name|next
argument_list|,
name|action
argument_list|,
name|COSName
operator|.
name|NEXT
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|next
operator|instanceof
name|COSArray
condition|)
block|{
name|COSArray
name|array
init|=
operator|(
name|COSArray
operator|)
name|next
decl_stmt|;
name|List
argument_list|<
name|PDAction
argument_list|>
name|actions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|actions
operator|.
name|add
argument_list|(
name|PDActionFactory
operator|.
name|createAction
argument_list|(
operator|(
name|COSDictionary
operator|)
name|array
operator|.
name|getObject
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|retval
operator|=
operator|new
name|COSArrayList
argument_list|<>
argument_list|(
name|actions
argument_list|,
name|array
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * This will set the next action, or sequence of actions, to be performed after this one.      * The value is either a single action dictionary or an array of action dictionaries      * to be performed in order.      *      * @param next The Next action or sequence of actions.      */
specifier|public
name|void
name|setNext
parameter_list|(
name|List
argument_list|<
name|?
argument_list|>
name|next
parameter_list|)
block|{
name|action
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|NEXT
argument_list|,
name|COSArrayList
operator|.
name|converterToCOSArray
argument_list|(
name|next
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

