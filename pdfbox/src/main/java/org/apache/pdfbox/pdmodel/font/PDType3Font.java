begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDRectangle
import|;
end_import

begin_comment
comment|/**  * A PostScript Type 3 Font.  *  * @author Ben Litchfield  */
end_comment

begin_class
specifier|public
class|class
name|PDType3Font
extends|extends
name|PDFont
block|{
specifier|private
name|PDResources
name|type3Resources
init|=
literal|null
decl_stmt|;
specifier|private
name|COSDictionary
name|charProcs
init|=
literal|null
decl_stmt|;
comment|/**      * Constructor.      *      * @param fontDictionary The font dictionary according to the PDF specification.      */
specifier|public
name|PDType3Font
parameter_list|(
name|COSDictionary
name|fontDictionary
parameter_list|)
block|{
name|super
argument_list|(
name|fontDictionary
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the optional resources of the type3 stream.      *       * @return the resources bound to be used when parsing the type3 stream       */
specifier|public
name|PDResources
name|getType3Resources
parameter_list|()
block|{
if|if
condition|(
name|type3Resources
operator|==
literal|null
condition|)
block|{
name|COSDictionary
name|resources
init|=
operator|(
name|COSDictionary
operator|)
name|dict
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|RESOURCES
argument_list|)
decl_stmt|;
if|if
condition|(
name|resources
operator|!=
literal|null
condition|)
block|{
name|type3Resources
operator|=
operator|new
name|PDResources
argument_list|(
name|resources
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|type3Resources
return|;
block|}
comment|/**      * This will get the fonts bounding box.      *      * @return The fonts bounding box.      * @throws IOException If there is an error getting the bounding box.      */
annotation|@
name|Override
specifier|public
name|PDRectangle
name|getFontBoundingBox
parameter_list|()
throws|throws
name|IOException
block|{
name|COSArray
name|rect
init|=
operator|(
name|COSArray
operator|)
name|dict
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|FONT_BBOX
argument_list|)
decl_stmt|;
name|PDRectangle
name|retval
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|rect
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
operator|new
name|PDRectangle
argument_list|(
name|rect
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * Returns the dictionary containing all streams to be used to render the glyphs.      *       * @return the dictionary containing all glyph streams.      */
specifier|public
name|COSDictionary
name|getCharProcs
parameter_list|()
block|{
if|if
condition|(
name|charProcs
operator|==
literal|null
condition|)
block|{
name|charProcs
operator|=
operator|(
name|COSDictionary
operator|)
name|dict
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|CHAR_PROCS
argument_list|)
expr_stmt|;
block|}
return|return
name|charProcs
return|;
block|}
comment|/**      * Returns the stream of the glyph representing by the given character      *       * @param character the represented character      * @return the stream to be used to render the glyph      * @throws IOException If something went wrong when getting the stream.      */
specifier|public
name|COSStream
name|getCharStream
parameter_list|(
name|Character
name|character
parameter_list|)
throws|throws
name|IOException
block|{
name|COSStream
name|stream
init|=
literal|null
decl_stmt|;
name|String
name|cMapsTo
init|=
name|getFontEncoding
argument_list|()
operator|.
name|getName
argument_list|(
name|character
argument_list|)
decl_stmt|;
if|if
condition|(
name|cMapsTo
operator|!=
literal|null
condition|)
block|{
name|stream
operator|=
operator|(
name|COSStream
operator|)
name|getCharProcs
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|cMapsTo
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|stream
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|super
operator|.
name|clear
argument_list|()
expr_stmt|;
name|charProcs
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|type3Resources
operator|!=
literal|null
condition|)
block|{
name|type3Resources
operator|.
name|clearCache
argument_list|()
expr_stmt|;
name|type3Resources
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

