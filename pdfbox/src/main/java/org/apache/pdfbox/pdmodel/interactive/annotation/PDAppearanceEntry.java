begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|COSDictionaryMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|COSObjectable
import|;
end_import

begin_comment
comment|/**  * An entry in an appearance dictionary. May contain either a single appearance stream or an appearance subdictionary.  *  * @author John Hewson  */
end_comment

begin_class
specifier|public
class|class
name|PDAppearanceEntry
implements|implements
name|COSObjectable
block|{
specifier|private
name|COSBase
name|entry
decl_stmt|;
specifier|private
name|PDAppearanceEntry
parameter_list|()
block|{     }
comment|/**      * Constructor for reading.      *       * @param entry      */
specifier|public
name|PDAppearanceEntry
parameter_list|(
name|COSBase
name|entry
parameter_list|)
block|{
name|this
operator|.
name|entry
operator|=
name|entry
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|COSBase
name|getCOSObject
parameter_list|()
block|{
return|return
name|entry
return|;
block|}
comment|/**      * Returns true if this entry is an appearance subdictionary.      */
specifier|public
name|boolean
name|isSubDictionary
parameter_list|()
block|{
return|return
operator|!
operator|(
name|this
operator|.
name|entry
operator|instanceof
name|COSStream
operator|)
return|;
block|}
comment|/**      * Returns true if this entry is an appearance stream.      */
specifier|public
name|boolean
name|isStream
parameter_list|()
block|{
return|return
name|this
operator|.
name|entry
operator|instanceof
name|COSStream
return|;
block|}
comment|/**      * Returns the entry as an appearance stream.      *      * @throws IllegalStateException if this entry is not an appearance stream      */
specifier|public
name|PDAppearanceStream
name|getAppearanceStream
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isStream
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
return|return
operator|new
name|PDAppearanceStream
argument_list|(
operator|(
name|COSStream
operator|)
name|entry
argument_list|)
return|;
block|}
comment|/**      * Returns the entry as an appearance subdictionary.      *      * @throws IllegalStateException if this entry is not an appearance subdictionary      */
specifier|public
name|Map
argument_list|<
name|COSName
argument_list|,
name|PDAppearanceStream
argument_list|>
name|getSubDictionary
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isSubDictionary
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
name|COSDictionary
name|dict
init|=
operator|(
name|COSDictionary
operator|)
name|entry
decl_stmt|;
name|Map
argument_list|<
name|COSName
argument_list|,
name|PDAppearanceStream
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|COSName
name|name
range|:
name|dict
operator|.
name|keySet
argument_list|()
control|)
block|{
name|COSBase
name|value
init|=
name|dict
operator|.
name|getDictionaryObject
argument_list|(
name|name
argument_list|)
decl_stmt|;
comment|// the file from PDFBOX-1599 contains /null as its entry, so we skip non-stream entries
if|if
condition|(
name|value
operator|instanceof
name|COSStream
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|PDAppearanceStream
argument_list|(
operator|(
name|COSStream
operator|)
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|COSDictionaryMap
argument_list|<>
argument_list|(
name|map
argument_list|,
name|dict
argument_list|)
return|;
block|}
block|}
end_class

end_unit

