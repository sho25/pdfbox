begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSFloat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSNumber
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|COSObjectable
import|;
end_import

begin_comment
comment|/**  * A tristimulus, or collection of three floating point parameters used for color operations.  *  * @author Ben Litchfield  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|PDTristimulus
implements|implements
name|COSObjectable
block|{
specifier|private
name|COSArray
name|values
init|=
literal|null
decl_stmt|;
comment|/**      * Constructor. Defaults all values to 0, 0, 0.      */
specifier|public
name|PDTristimulus
parameter_list|()
block|{
name|values
operator|=
operator|new
name|COSArray
argument_list|()
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
operator|new
name|COSFloat
argument_list|(
literal|0.0f
argument_list|)
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
operator|new
name|COSFloat
argument_list|(
literal|0.0f
argument_list|)
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
operator|new
name|COSFloat
argument_list|(
literal|0.0f
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor from COS object.      * @param array the array containing the XYZ values      */
specifier|public
name|PDTristimulus
parameter_list|(
name|COSArray
name|array
parameter_list|)
block|{
name|values
operator|=
name|array
expr_stmt|;
block|}
comment|/**      * Constructor from COS object.      * @param array the array containing the XYZ values      */
specifier|public
name|PDTristimulus
parameter_list|(
name|float
index|[]
name|array
parameter_list|)
block|{
name|values
operator|=
operator|new
name|COSArray
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|length
operator|&&
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|values
operator|.
name|add
argument_list|(
operator|new
name|COSFloat
argument_list|(
name|array
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Convert this standard java object to a COS object.      * @return the cos object that matches this Java object      */
annotation|@
name|Override
specifier|public
name|COSBase
name|getCOSObject
parameter_list|()
block|{
return|return
name|values
return|;
block|}
comment|/**      * Returns the x value of the tristimulus.      * @return the X value      */
specifier|public
name|float
name|getX
parameter_list|()
block|{
return|return
operator|(
operator|(
name|COSNumber
operator|)
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|floatValue
argument_list|()
return|;
block|}
comment|/**      * Sets the x value of the tristimulus.      * @param x the x value for the tristimulus      */
specifier|public
name|void
name|setX
parameter_list|(
name|float
name|x
parameter_list|)
block|{
name|values
operator|.
name|set
argument_list|(
literal|0
argument_list|,
operator|new
name|COSFloat
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the y value of the tristimulus.      * @return the Y value      */
specifier|public
name|float
name|getY
parameter_list|()
block|{
return|return
operator|(
operator|(
name|COSNumber
operator|)
name|values
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|floatValue
argument_list|()
return|;
block|}
comment|/**      * Sets the y value of the tristimulus.      * @param y the y value for the tristimulus      */
specifier|public
name|void
name|setY
parameter_list|(
name|float
name|y
parameter_list|)
block|{
name|values
operator|.
name|set
argument_list|(
literal|1
argument_list|,
operator|new
name|COSFloat
argument_list|(
name|y
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the z value of the tristimulus.      * @return the Z value      */
specifier|public
name|float
name|getZ
parameter_list|()
block|{
return|return
operator|(
operator|(
name|COSNumber
operator|)
name|values
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|floatValue
argument_list|()
return|;
block|}
comment|/**      * Sets the z value of the tristimulus.      * @param z the z value for the tristimulus      */
specifier|public
name|void
name|setZ
parameter_list|(
name|float
name|z
parameter_list|)
block|{
name|values
operator|.
name|set
argument_list|(
literal|2
argument_list|,
operator|new
name|COSFloat
argument_list|(
name|z
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

