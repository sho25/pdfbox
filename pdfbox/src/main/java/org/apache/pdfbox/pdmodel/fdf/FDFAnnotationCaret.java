begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|fdf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDRectangle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_comment
comment|/**  * This represents a Caret FDF annotation.  *  * @author Ben Litchfield  */
end_comment

begin_class
specifier|public
class|class
name|FDFAnnotationCaret
extends|extends
name|FDFAnnotation
block|{
comment|/**      * COS Model value for SubType entry.      */
specifier|public
specifier|static
specifier|final
name|String
name|SUBTYPE
init|=
literal|"Caret"
decl_stmt|;
comment|/**      * Default constructor.      */
specifier|public
name|FDFAnnotationCaret
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|annot
operator|.
name|setName
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|,
name|SUBTYPE
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor.      *      * @param a An existing FDF Annotation.      */
specifier|public
name|FDFAnnotationCaret
parameter_list|(
name|COSDictionary
name|a
parameter_list|)
block|{
name|super
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor.      *      * @param element An XFDF element.      *      * @throws IOException If there is an error extracting information from the element.      */
specifier|public
name|FDFAnnotationCaret
parameter_list|(
name|Element
name|element
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|annot
operator|.
name|setName
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|,
name|SUBTYPE
argument_list|)
expr_stmt|;
name|initFringe
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|String
name|symbol
init|=
name|element
operator|.
name|getAttribute
argument_list|(
literal|"symbol"
argument_list|)
decl_stmt|;
if|if
condition|(
name|symbol
operator|!=
literal|null
operator|&&
operator|!
name|symbol
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|setSymbol
argument_list|(
name|element
operator|.
name|getAttribute
argument_list|(
literal|"symbol"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|initFringe
parameter_list|(
name|Element
name|element
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|fringe
init|=
name|element
operator|.
name|getAttribute
argument_list|(
literal|"fringe"
argument_list|)
decl_stmt|;
if|if
condition|(
name|fringe
operator|!=
literal|null
operator|&&
operator|!
name|fringe
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
index|[]
name|fringeValues
init|=
name|fringe
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|fringeValues
operator|.
name|length
operator|!=
literal|4
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error: wrong amount of numbers in attribute 'fringe'"
argument_list|)
throw|;
block|}
name|PDRectangle
name|rect
init|=
operator|new
name|PDRectangle
argument_list|()
decl_stmt|;
name|rect
operator|.
name|setLowerLeftX
argument_list|(
name|Float
operator|.
name|parseFloat
argument_list|(
name|fringeValues
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|rect
operator|.
name|setLowerLeftY
argument_list|(
name|Float
operator|.
name|parseFloat
argument_list|(
name|fringeValues
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|rect
operator|.
name|setUpperRightX
argument_list|(
name|Float
operator|.
name|parseFloat
argument_list|(
name|fringeValues
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|rect
operator|.
name|setUpperRightY
argument_list|(
name|Float
operator|.
name|parseFloat
argument_list|(
name|fringeValues
index|[
literal|3
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|setFringe
argument_list|(
name|rect
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This will set the fringe rectangle. Giving the difference between the annotations rectangle and where the drawing      * occurs.      *      * @param fringe the fringe      */
specifier|public
specifier|final
name|void
name|setFringe
parameter_list|(
name|PDRectangle
name|fringe
parameter_list|)
block|{
name|annot
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|RD
argument_list|,
name|fringe
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will retrieve the fringe. Giving the difference between the annotations rectangle and where the drawing      * occurs.      *      * @return the rectangle difference      */
specifier|public
name|PDRectangle
name|getFringe
parameter_list|()
block|{
name|COSArray
name|rd
init|=
operator|(
name|COSArray
operator|)
name|annot
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|RD
argument_list|)
decl_stmt|;
if|if
condition|(
name|rd
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|PDRectangle
argument_list|(
name|rd
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * This will set the symbol that shall be associated with the caret.      *       * @param symbol the symbol      */
specifier|public
specifier|final
name|void
name|setSymbol
parameter_list|(
name|String
name|symbol
parameter_list|)
block|{
name|String
name|newSymbol
init|=
literal|"None"
decl_stmt|;
if|if
condition|(
literal|"paragraph"
operator|.
name|equals
argument_list|(
name|symbol
argument_list|)
condition|)
block|{
name|newSymbol
operator|=
literal|"P"
expr_stmt|;
block|}
name|annot
operator|.
name|setString
argument_list|(
name|COSName
operator|.
name|SY
argument_list|,
name|newSymbol
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will retrieve the symbol that shall be associated with the caret.      *       * @return the symbol      */
specifier|public
name|String
name|getSymbol
parameter_list|()
block|{
return|return
name|annot
operator|.
name|getString
argument_list|(
name|COSName
operator|.
name|SY
argument_list|)
return|;
block|}
block|}
end_class

end_unit

