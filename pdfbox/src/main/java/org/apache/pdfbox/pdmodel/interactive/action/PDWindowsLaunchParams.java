begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|action
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|COSObjectable
import|;
end_import

begin_comment
comment|/**  * Launch paramaters for the windows OS.  *  * @author Ben Litchfield  */
end_comment

begin_class
specifier|public
class|class
name|PDWindowsLaunchParams
implements|implements
name|COSObjectable
block|{
comment|/**      * The open operation for the launch.      */
specifier|public
specifier|static
specifier|final
name|String
name|OPERATION_OPEN
init|=
literal|"open"
decl_stmt|;
comment|/**      * The print operation for the lanuch.      */
specifier|public
specifier|static
specifier|final
name|String
name|OPERATION_PRINT
init|=
literal|"print"
decl_stmt|;
comment|/**      * The params dictionary.      */
specifier|protected
name|COSDictionary
name|params
decl_stmt|;
comment|/**      * Default constructor.      */
specifier|public
name|PDWindowsLaunchParams
parameter_list|()
block|{
name|params
operator|=
operator|new
name|COSDictionary
argument_list|()
expr_stmt|;
block|}
comment|/**      * Constructor.      *      * @param p The params dictionary.      */
specifier|public
name|PDWindowsLaunchParams
parameter_list|(
name|COSDictionary
name|p
parameter_list|)
block|{
name|params
operator|=
name|p
expr_stmt|;
block|}
comment|/**      * Convert this standard java object to a COS object.      *      * @return The cos object that matches this Java object.      */
annotation|@
name|Override
specifier|public
name|COSDictionary
name|getCOSObject
parameter_list|()
block|{
return|return
name|params
return|;
block|}
comment|/**      * The file to launch.      *      * @return The executable/document to launch.      */
specifier|public
name|String
name|getFilename
parameter_list|()
block|{
return|return
name|params
operator|.
name|getString
argument_list|(
literal|"F"
argument_list|)
return|;
block|}
comment|/**      * Set the file to launch.      *      * @param file The executable/document to launch.      */
specifier|public
name|void
name|setFilename
parameter_list|(
name|String
name|file
parameter_list|)
block|{
name|params
operator|.
name|setString
argument_list|(
literal|"F"
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
comment|/**      * The dir to launch from.      *      * @return The dir of the executable/document to launch.      */
specifier|public
name|String
name|getDirectory
parameter_list|()
block|{
return|return
name|params
operator|.
name|getString
argument_list|(
literal|"D"
argument_list|)
return|;
block|}
comment|/**      * Set the dir to launch from.      *      * @param dir The dir of the executable/document to launch.      */
specifier|public
name|void
name|setDirectory
parameter_list|(
name|String
name|dir
parameter_list|)
block|{
name|params
operator|.
name|setString
argument_list|(
literal|"D"
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the operation to perform on the file.  This method will not return null,      * OPERATION_OPEN is the default.      *      * @return The operation to perform for the file.      * @see PDWindowsLaunchParams#OPERATION_OPEN      * @see PDWindowsLaunchParams#OPERATION_PRINT      */
specifier|public
name|String
name|getOperation
parameter_list|()
block|{
return|return
name|params
operator|.
name|getString
argument_list|(
literal|"O"
argument_list|,
name|OPERATION_OPEN
argument_list|)
return|;
block|}
comment|/**      * Set the operation to perform..      *      * @param op The operation to perform on the file.      */
specifier|public
name|void
name|setOperation
parameter_list|(
name|String
name|op
parameter_list|)
block|{
name|params
operator|.
name|setString
argument_list|(
literal|"D"
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
comment|/**      * A parameter to pass the executable.      *      * @return The parameter to pass the executable.      */
specifier|public
name|String
name|getExecuteParam
parameter_list|()
block|{
return|return
name|params
operator|.
name|getString
argument_list|(
literal|"P"
argument_list|)
return|;
block|}
comment|/**      * Set the parameter to pass the executable.      *      * @param param The parameter for the executable.      */
specifier|public
name|void
name|setExecuteParam
parameter_list|(
name|String
name|param
parameter_list|)
block|{
name|params
operator|.
name|setString
argument_list|(
literal|"P"
argument_list|,
name|param
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

