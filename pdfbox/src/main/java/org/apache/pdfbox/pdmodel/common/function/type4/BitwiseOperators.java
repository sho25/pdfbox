begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|function
operator|.
name|type4
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_comment
comment|/**  * Provides the bitwise operators such as "and" and "xor".  *  * @version $Revision$  */
end_comment

begin_class
class|class
name|BitwiseOperators
block|{
comment|/** Abstract base class for logical operators. */
specifier|private
specifier|abstract
specifier|static
class|class
name|AbstractLogicalOperator
implements|implements
name|Operator
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|ExecutionContext
name|context
parameter_list|)
block|{
name|Stack
argument_list|<
name|Object
argument_list|>
name|stack
init|=
name|context
operator|.
name|getStack
argument_list|()
decl_stmt|;
name|Object
name|op2
init|=
name|stack
operator|.
name|pop
argument_list|()
decl_stmt|;
name|Object
name|op1
init|=
name|stack
operator|.
name|pop
argument_list|()
decl_stmt|;
if|if
condition|(
name|op1
operator|instanceof
name|Boolean
operator|&&
name|op2
operator|instanceof
name|Boolean
condition|)
block|{
name|boolean
name|bool1
init|=
operator|(
name|Boolean
operator|)
name|op1
decl_stmt|;
name|boolean
name|bool2
init|=
operator|(
name|Boolean
operator|)
name|op2
decl_stmt|;
name|boolean
name|result
init|=
name|applyForBoolean
argument_list|(
name|bool1
argument_list|,
name|bool2
argument_list|)
decl_stmt|;
name|stack
operator|.
name|push
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|op1
operator|instanceof
name|Integer
operator|&&
name|op2
operator|instanceof
name|Integer
condition|)
block|{
name|int
name|int1
init|=
operator|(
name|Integer
operator|)
name|op1
decl_stmt|;
name|int
name|int2
init|=
operator|(
name|Integer
operator|)
name|op2
decl_stmt|;
name|int
name|result
init|=
name|applyforInteger
argument_list|(
name|int1
argument_list|,
name|int2
argument_list|)
decl_stmt|;
name|stack
operator|.
name|push
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"Operands must be bool/bool or int/int"
argument_list|)
throw|;
block|}
block|}
specifier|protected
specifier|abstract
name|boolean
name|applyForBoolean
parameter_list|(
name|boolean
name|bool1
parameter_list|,
name|boolean
name|bool2
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|int
name|applyforInteger
parameter_list|(
name|int
name|int1
parameter_list|,
name|int
name|int2
parameter_list|)
function_decl|;
block|}
comment|/** Implements the "and" operator. */
specifier|static
class|class
name|And
extends|extends
name|AbstractLogicalOperator
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|applyForBoolean
parameter_list|(
name|boolean
name|bool1
parameter_list|,
name|boolean
name|bool2
parameter_list|)
block|{
return|return
name|bool1
operator|&
name|bool2
return|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|applyforInteger
parameter_list|(
name|int
name|int1
parameter_list|,
name|int
name|int2
parameter_list|)
block|{
return|return
name|int1
operator|&
name|int2
return|;
block|}
block|}
comment|/** Implements the "bitshift" operator. */
specifier|static
class|class
name|Bitshift
implements|implements
name|Operator
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|ExecutionContext
name|context
parameter_list|)
block|{
name|Stack
argument_list|<
name|Object
argument_list|>
name|stack
init|=
name|context
operator|.
name|getStack
argument_list|()
decl_stmt|;
name|int
name|shift
init|=
operator|(
name|Integer
operator|)
name|stack
operator|.
name|pop
argument_list|()
decl_stmt|;
name|int
name|int1
init|=
operator|(
name|Integer
operator|)
name|stack
operator|.
name|pop
argument_list|()
decl_stmt|;
if|if
condition|(
name|shift
operator|<
literal|0
condition|)
block|{
name|int
name|result
init|=
name|int1
operator|>>
name|Math
operator|.
name|abs
argument_list|(
name|shift
argument_list|)
decl_stmt|;
name|stack
operator|.
name|push
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|result
init|=
name|int1
operator|<<
name|shift
decl_stmt|;
name|stack
operator|.
name|push
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Implements the "false" operator. */
specifier|static
class|class
name|False
implements|implements
name|Operator
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|ExecutionContext
name|context
parameter_list|)
block|{
name|Stack
argument_list|<
name|Object
argument_list|>
name|stack
init|=
name|context
operator|.
name|getStack
argument_list|()
decl_stmt|;
name|stack
operator|.
name|push
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Implements the "not" operator. */
specifier|static
class|class
name|Not
implements|implements
name|Operator
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|ExecutionContext
name|context
parameter_list|)
block|{
name|Stack
argument_list|<
name|Object
argument_list|>
name|stack
init|=
name|context
operator|.
name|getStack
argument_list|()
decl_stmt|;
name|Object
name|op1
init|=
name|stack
operator|.
name|pop
argument_list|()
decl_stmt|;
if|if
condition|(
name|op1
operator|instanceof
name|Boolean
condition|)
block|{
name|boolean
name|bool1
init|=
operator|(
name|Boolean
operator|)
name|op1
decl_stmt|;
name|boolean
name|result
init|=
operator|!
name|bool1
decl_stmt|;
name|stack
operator|.
name|push
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|op1
operator|instanceof
name|Integer
condition|)
block|{
name|int
name|int1
init|=
operator|(
name|Integer
operator|)
name|op1
decl_stmt|;
name|int
name|result
init|=
operator|-
name|int1
decl_stmt|;
name|stack
operator|.
name|push
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"Operand must be bool or int"
argument_list|)
throw|;
block|}
block|}
block|}
comment|/** Implements the "or" operator. */
specifier|static
class|class
name|Or
extends|extends
name|AbstractLogicalOperator
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|applyForBoolean
parameter_list|(
name|boolean
name|bool1
parameter_list|,
name|boolean
name|bool2
parameter_list|)
block|{
return|return
name|bool1
operator||
name|bool2
return|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|applyforInteger
parameter_list|(
name|int
name|int1
parameter_list|,
name|int
name|int2
parameter_list|)
block|{
return|return
name|int1
operator||
name|int2
return|;
block|}
block|}
comment|/** Implements the "true" operator. */
specifier|static
class|class
name|True
implements|implements
name|Operator
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|ExecutionContext
name|context
parameter_list|)
block|{
name|Stack
argument_list|<
name|Object
argument_list|>
name|stack
init|=
name|context
operator|.
name|getStack
argument_list|()
decl_stmt|;
name|stack
operator|.
name|push
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Implements the "xor" operator. */
specifier|static
class|class
name|Xor
extends|extends
name|AbstractLogicalOperator
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|applyForBoolean
parameter_list|(
name|boolean
name|bool1
parameter_list|,
name|boolean
name|bool2
parameter_list|)
block|{
return|return
name|bool1
operator|^
name|bool2
return|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|applyforInteger
parameter_list|(
name|int
name|int1
parameter_list|,
name|int
name|int2
parameter_list|)
block|{
return|return
name|int1
operator|^
name|int2
return|;
block|}
block|}
block|}
end_class

end_unit

