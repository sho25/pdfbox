begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|FontBoxFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cff
operator|.
name|CFFFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cff
operator|.
name|CFFType1Font
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|ttf
operator|.
name|OpenTypeFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|ttf
operator|.
name|TTFParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|ttf
operator|.
name|TrueTypeFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|type1
operator|.
name|Type1Font
import|;
end_import

begin_comment
comment|/**  * Font mapper, locates non-embedded fonts via a pluggable FontProvider.  *  * @author John Hewson  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|FontMapper
block|{
specifier|private
name|FontMapper
parameter_list|()
block|{}
specifier|private
specifier|static
specifier|final
name|FontCache
name|fontCache
init|=
operator|new
name|FontCache
argument_list|()
decl_stmt|;
comment|// todo: static cache isn't ideal
specifier|private
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FontMapper
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|FontProvider
name|fontProvider
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|FontInfo
argument_list|>
name|fontInfoByName
decl_stmt|;
comment|/** fallback fonts, used as as a last resort */
specifier|private
specifier|static
specifier|final
name|TrueTypeFont
name|lastResortFont
decl_stmt|;
static|static
block|{
try|try
block|{
name|String
name|ttfName
init|=
literal|"org/apache/pdfbox/resources/ttf/LiberationSans-Regular.ttf"
decl_stmt|;
name|URL
name|url
init|=
name|FontMapper
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|ttfName
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error loading resource: "
operator|+
name|ttfName
argument_list|)
throw|;
block|}
name|InputStream
name|ttfStream
init|=
name|url
operator|.
name|openStream
argument_list|()
decl_stmt|;
name|TTFParser
name|ttfParser
init|=
operator|new
name|TTFParser
argument_list|()
decl_stmt|;
name|lastResortFont
operator|=
name|ttfParser
operator|.
name|parse
argument_list|(
name|ttfStream
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|// lazy thread safe singleton
specifier|private
specifier|static
class|class
name|DefaultFontProvider
block|{
specifier|private
specifier|static
specifier|final
name|FontProvider
name|INSTANCE
init|=
operator|new
name|FileSystemFontProvider
argument_list|(
name|fontCache
argument_list|)
decl_stmt|;
block|}
comment|/**      * Sets the font service provider.      */
specifier|public
specifier|synchronized
specifier|static
name|void
name|setProvider
parameter_list|(
name|FontProvider
name|fontProvider
parameter_list|)
block|{
name|FontMapper
operator|.
name|fontProvider
operator|=
name|fontProvider
expr_stmt|;
name|fontInfoByName
operator|=
name|createFontInfoByName
argument_list|(
name|fontProvider
operator|.
name|getFontInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the font service provider. Defaults to using FileSystemFontProvider.      */
specifier|public
specifier|synchronized
specifier|static
name|FontProvider
name|getProvider
parameter_list|()
block|{
if|if
condition|(
name|fontProvider
operator|==
literal|null
condition|)
block|{
name|setProvider
argument_list|(
name|DefaultFontProvider
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
return|return
name|fontProvider
return|;
block|}
comment|/**      * Returns the font cache associated with this FontMapper. This method is needed by      * FontProvider subclasses.      */
specifier|public
specifier|static
name|FontCache
name|getFontCache
parameter_list|()
block|{
return|return
name|fontCache
return|;
block|}
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|FontInfo
argument_list|>
name|createFontInfoByName
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|FontInfo
argument_list|>
name|fontInfoList
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|FontInfo
argument_list|>
name|map
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|FontInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FontInfo
name|info
range|:
name|fontInfoList
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|info
operator|.
name|getPostScriptName
argument_list|()
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
comment|/** Map of PostScript name substitutes, in priority order. */
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|substitutes
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
comment|// substitutes for standard 14 fonts
name|substitutes
operator|.
name|put
argument_list|(
literal|"Courier"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"CourierNew"
argument_list|,
literal|"CourierNewPSMT"
argument_list|,
literal|"LiberationMono"
argument_list|,
literal|"NimbusMonL-Regu"
argument_list|)
argument_list|)
expr_stmt|;
name|substitutes
operator|.
name|put
argument_list|(
literal|"Courier-Bold"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"CourierNewPS-BoldMT"
argument_list|,
literal|"CourierNew-Bold"
argument_list|,
literal|"LiberationMono-Bold"
argument_list|,
literal|"NimbusMonL-Bold"
argument_list|)
argument_list|)
expr_stmt|;
name|substitutes
operator|.
name|put
argument_list|(
literal|"Courier-Oblique"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"CourierNewPS-ItalicMT"
argument_list|,
literal|"CourierNew-Italic"
argument_list|,
literal|"LiberationMono-Italic"
argument_list|,
literal|"NimbusMonL-ReguObli"
argument_list|)
argument_list|)
expr_stmt|;
name|substitutes
operator|.
name|put
argument_list|(
literal|"Courier-BoldOblique"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"CourierNewPS-BoldItalicMT"
argument_list|,
literal|"CourierNew-BoldItalic"
argument_list|,
literal|"LiberationMono-BoldItalic"
argument_list|,
literal|"NimbusMonL-BoldObli"
argument_list|)
argument_list|)
expr_stmt|;
name|substitutes
operator|.
name|put
argument_list|(
literal|"Helvetica"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"ArialMT"
argument_list|,
literal|"Arial"
argument_list|,
literal|"LiberationSans"
argument_list|,
literal|"NimbusSanL-Regu"
argument_list|)
argument_list|)
expr_stmt|;
name|substitutes
operator|.
name|put
argument_list|(
literal|"Helvetica-Bold"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Arial-BoldMT"
argument_list|,
literal|"Arial-Bold"
argument_list|,
literal|"LiberationSans-Bold"
argument_list|,
literal|"NimbusSanL-Bold"
argument_list|)
argument_list|)
expr_stmt|;
name|substitutes
operator|.
name|put
argument_list|(
literal|"Helvetica-Oblique"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Arial-ItalicMT"
argument_list|,
literal|"Arial-Italic"
argument_list|,
literal|"Helvetica-Italic"
argument_list|,
literal|"LiberationSans-Italic"
argument_list|,
literal|"NimbusSanL-ReguItal"
argument_list|)
argument_list|)
expr_stmt|;
name|substitutes
operator|.
name|put
argument_list|(
literal|"Helvetica-BoldOblique"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Arial-BoldItalicMT"
argument_list|,
literal|"Helvetica-BoldItalic"
argument_list|,
literal|"LiberationSans-BoldItalic"
argument_list|,
literal|"NimbusSanL-BoldItal"
argument_list|)
argument_list|)
expr_stmt|;
name|substitutes
operator|.
name|put
argument_list|(
literal|"Times-Roman"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"TimesNewRomanPSMT"
argument_list|,
literal|"TimesNewRoman"
argument_list|,
literal|"TimesNewRomanPS"
argument_list|,
literal|"LiberationSerif"
argument_list|,
literal|"NimbusRomNo9L-Regu"
argument_list|)
argument_list|)
expr_stmt|;
name|substitutes
operator|.
name|put
argument_list|(
literal|"Times-Bold"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"TimesNewRomanPS-BoldMT"
argument_list|,
literal|"TimesNewRomanPS-Bold"
argument_list|,
literal|"TimesNewRoman-Bold"
argument_list|,
literal|"LiberationSerif-Bold"
argument_list|,
literal|"NimbusRomNo9L-Medi"
argument_list|)
argument_list|)
expr_stmt|;
name|substitutes
operator|.
name|put
argument_list|(
literal|"Times-Italic"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"TimesNewRomanPS-ItalicMT"
argument_list|,
literal|"TimesNewRomanPS-Italic"
argument_list|,
literal|"TimesNewRoman-Italic"
argument_list|,
literal|"LiberationSerif-Italic"
argument_list|,
literal|"NimbusRomNo9L-ReguItal"
argument_list|)
argument_list|)
expr_stmt|;
name|substitutes
operator|.
name|put
argument_list|(
literal|"Times-BoldItalic"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"TimesNewRomanPS-BoldItalicMT"
argument_list|,
literal|"TimesNewRomanPS-BoldItalic"
argument_list|,
literal|"TimesNewRoman-BoldItalic"
argument_list|,
literal|"LiberationSerif-BoldItalic"
argument_list|,
literal|"NimbusRomNo9L-MediItal"
argument_list|)
argument_list|)
expr_stmt|;
name|substitutes
operator|.
name|put
argument_list|(
literal|"Symbol"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Symbol"
argument_list|,
literal|"SymbolMT"
argument_list|,
literal|"StandardSymL"
argument_list|)
argument_list|)
expr_stmt|;
name|substitutes
operator|.
name|put
argument_list|(
literal|"ZapfDingbats"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"ZapfDingbatsITC"
argument_list|,
literal|"Dingbats"
argument_list|,
literal|"MS-Gothic"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Acrobat also uses alternative names for Standard 14 fonts, which we map to those above
comment|// these include names such as "Arial" and "TimesNewRoman"
for|for
control|(
name|String
name|baseName
range|:
name|Standard14Fonts
operator|.
name|getNames
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|substitutes
operator|.
name|containsKey
argument_list|(
name|baseName
argument_list|)
condition|)
block|{
name|String
name|mappedName
init|=
name|Standard14Fonts
operator|.
name|getMappedFontName
argument_list|(
name|baseName
argument_list|)
decl_stmt|;
name|substitutes
operator|.
name|put
argument_list|(
name|baseName
argument_list|,
name|copySubstitutes
argument_list|(
name|mappedName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Copies a list of font substitutes, adding the original font at the start of the list.      */
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|copySubstitutes
parameter_list|(
name|String
name|postScriptName
parameter_list|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|substitutes
operator|.
name|get
argument_list|(
name|postScriptName
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Adds a top-priority substitute for the given font.      *      * @param match PostScript name of the font to match      * @param replace PostScript name of the font to use as a replacement      */
specifier|public
specifier|static
name|void
name|addSubstitute
parameter_list|(
name|String
name|match
parameter_list|,
name|String
name|replace
parameter_list|)
block|{
if|if
condition|(
operator|!
name|substitutes
operator|.
name|containsKey
argument_list|(
name|match
argument_list|)
condition|)
block|{
name|substitutes
operator|.
name|put
argument_list|(
name|match
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|substitutes
operator|.
name|get
argument_list|(
name|match
argument_list|)
operator|.
name|add
argument_list|(
name|replace
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the substitutes for a given font.      */
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getSubstitutes
parameter_list|(
name|String
name|postScriptName
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|subs
init|=
name|substitutes
operator|.
name|get
argument_list|(
name|postScriptName
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|subs
operator|!=
literal|null
condition|)
block|{
return|return
name|subs
return|;
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
comment|/**      * Attempts to find a good fallback based on the font descriptor.      */
specifier|private
specifier|static
name|String
name|getFallbackFontName
parameter_list|(
name|PDFontDescriptor
name|fontDescriptor
parameter_list|)
block|{
name|String
name|fontName
decl_stmt|;
if|if
condition|(
name|fontDescriptor
operator|!=
literal|null
condition|)
block|{
comment|// heuristic detection of bold
name|boolean
name|isBold
init|=
literal|false
decl_stmt|;
name|String
name|name
init|=
name|fontDescriptor
operator|.
name|getFontName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|String
name|lower
init|=
name|fontDescriptor
operator|.
name|getFontName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|isBold
operator|=
name|lower
operator|.
name|contains
argument_list|(
literal|"bold"
argument_list|)
operator|||
name|lower
operator|.
name|contains
argument_list|(
literal|"black"
argument_list|)
operator|||
name|lower
operator|.
name|contains
argument_list|(
literal|"heavy"
argument_list|)
expr_stmt|;
block|}
comment|// font descriptor flags should describe the style
if|if
condition|(
name|fontDescriptor
operator|.
name|isFixedPitch
argument_list|()
condition|)
block|{
name|fontName
operator|=
literal|"Courier"
expr_stmt|;
if|if
condition|(
name|isBold
operator|&&
name|fontDescriptor
operator|.
name|isItalic
argument_list|()
condition|)
block|{
name|fontName
operator|+=
literal|"-BoldOblique"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isBold
condition|)
block|{
name|fontName
operator|+=
literal|"-Bold"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fontDescriptor
operator|.
name|isItalic
argument_list|()
condition|)
block|{
name|fontName
operator|+=
literal|"-Oblique"
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|fontDescriptor
operator|.
name|isSerif
argument_list|()
condition|)
block|{
name|fontName
operator|=
literal|"Times"
expr_stmt|;
if|if
condition|(
name|isBold
operator|&&
name|fontDescriptor
operator|.
name|isItalic
argument_list|()
condition|)
block|{
name|fontName
operator|+=
literal|"-BoldItalic"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isBold
condition|)
block|{
name|fontName
operator|+=
literal|"-Bold"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fontDescriptor
operator|.
name|isItalic
argument_list|()
condition|)
block|{
name|fontName
operator|+=
literal|"-Italic"
expr_stmt|;
block|}
else|else
block|{
name|fontName
operator|+=
literal|"-Roman"
expr_stmt|;
block|}
block|}
else|else
block|{
name|fontName
operator|=
literal|"Helvetica"
expr_stmt|;
if|if
condition|(
name|isBold
operator|&&
name|fontDescriptor
operator|.
name|isItalic
argument_list|()
condition|)
block|{
name|fontName
operator|+=
literal|"-BoldOblique"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isBold
condition|)
block|{
name|fontName
operator|+=
literal|"-Bold"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fontDescriptor
operator|.
name|isItalic
argument_list|()
condition|)
block|{
name|fontName
operator|+=
literal|"-Oblique"
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// if there is no FontDescriptor then we just fall back to Times Roman
name|fontName
operator|=
literal|"Times-Roman"
expr_stmt|;
block|}
return|return
name|fontName
return|;
block|}
comment|/**      * Finds a TrueType font with the given PostScript name, or a suitable substitute, or null.      *      * @param fontDescriptor FontDescriptor      */
specifier|public
specifier|static
name|FontMapping
argument_list|<
name|TrueTypeFont
argument_list|>
name|getTrueTypeFont
parameter_list|(
name|PDFontDescriptor
name|fontDescriptor
parameter_list|)
block|{
name|TrueTypeFont
name|ttf
init|=
operator|(
name|TrueTypeFont
operator|)
name|findFont
argument_list|(
name|FontFormat
operator|.
name|TTF
argument_list|,
name|fontDescriptor
operator|.
name|getFontName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ttf
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|FontMapping
argument_list|<
name|TrueTypeFont
argument_list|>
argument_list|(
name|ttf
argument_list|,
literal|false
argument_list|)
return|;
block|}
else|else
block|{
comment|// fallback - todo: i.e. fuzzy match
name|String
name|fontName
init|=
name|getFallbackFontName
argument_list|(
name|fontDescriptor
argument_list|)
decl_stmt|;
name|ttf
operator|=
operator|(
name|TrueTypeFont
operator|)
name|findFont
argument_list|(
name|FontFormat
operator|.
name|TTF
argument_list|,
name|fontName
argument_list|)
expr_stmt|;
if|if
condition|(
name|ttf
operator|==
literal|null
condition|)
block|{
comment|// we have to return something here as TTFs aren't strictly required on the system
name|log
operator|.
name|error
argument_list|(
literal|"Using last-resort fallback for TTF font '"
operator|+
name|fontName
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|ttf
operator|=
name|lastResortFont
expr_stmt|;
block|}
return|return
operator|new
name|FontMapping
argument_list|<
name|TrueTypeFont
argument_list|>
argument_list|(
name|ttf
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
comment|/**      * Finds a font with the given PostScript name, or a suitable substitute, or null. This allows      * any font to be substituted with a PFB, TTF or OTF.      *      * @param fontDescriptor the FontDescriptor of the font to find      */
specifier|public
specifier|static
name|FontMapping
argument_list|<
name|FontBoxFont
argument_list|>
name|getFontBoxFont
parameter_list|(
name|PDFontDescriptor
name|fontDescriptor
parameter_list|)
block|{
name|FontBoxFont
name|font
init|=
name|findFontBoxFont
argument_list|(
name|fontDescriptor
operator|.
name|getFontName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|font
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|FontMapping
argument_list|<
name|FontBoxFont
argument_list|>
argument_list|(
name|font
argument_list|,
literal|false
argument_list|)
return|;
block|}
else|else
block|{
comment|// fallback - todo: i.e. fuzzy match
name|String
name|fontName
init|=
name|getFallbackFontName
argument_list|(
name|fontDescriptor
argument_list|)
decl_stmt|;
name|font
operator|=
name|findFontBoxFont
argument_list|(
name|fontName
argument_list|)
expr_stmt|;
if|if
condition|(
name|font
operator|==
literal|null
condition|)
block|{
comment|// we have to return something here as TTFs aren't strictly required on the system
name|log
operator|.
name|error
argument_list|(
literal|"Using last-resort fallback for font '"
operator|+
name|fontName
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|font
operator|=
name|lastResortFont
expr_stmt|;
block|}
return|return
operator|new
name|FontMapping
argument_list|<
name|FontBoxFont
argument_list|>
argument_list|(
name|font
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
comment|/**      * Finds a font with the given PostScript name, or a suitable substitute, or null.      *      * @param postScriptName PostScript font name      */
specifier|private
specifier|static
name|FontBoxFont
name|findFontBoxFont
parameter_list|(
name|String
name|postScriptName
parameter_list|)
block|{
name|Type1Font
name|t1
init|=
operator|(
name|Type1Font
operator|)
name|findFont
argument_list|(
name|FontFormat
operator|.
name|PFB
argument_list|,
name|postScriptName
argument_list|)
decl_stmt|;
if|if
condition|(
name|t1
operator|!=
literal|null
condition|)
block|{
return|return
name|t1
return|;
block|}
name|CFFFont
name|cff
init|=
operator|(
name|CFFFont
operator|)
name|findFont
argument_list|(
name|FontFormat
operator|.
name|OTF
argument_list|,
name|postScriptName
argument_list|)
decl_stmt|;
if|if
condition|(
name|cff
operator|instanceof
name|CFFType1Font
condition|)
block|{
return|return
name|cff
return|;
block|}
name|TrueTypeFont
name|ttf
init|=
operator|(
name|TrueTypeFont
operator|)
name|findFont
argument_list|(
name|FontFormat
operator|.
name|TTF
argument_list|,
name|postScriptName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ttf
operator|!=
literal|null
condition|)
block|{
return|return
name|ttf
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Finds a font with the given PostScript name, or a suitable substitute, or null.      *      * @param postScriptName PostScript font name      */
specifier|private
specifier|static
name|FontBoxFont
name|findFont
parameter_list|(
name|FontFormat
name|format
parameter_list|,
name|String
name|postScriptName
parameter_list|)
block|{
comment|// make sure the font provider is initialized
if|if
condition|(
name|fontProvider
operator|==
literal|null
condition|)
block|{
name|getProvider
argument_list|()
expr_stmt|;
block|}
comment|// first try to match the PostScript name
name|FontInfo
name|info
init|=
name|getFont
argument_list|(
name|format
argument_list|,
name|postScriptName
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
return|return
name|info
operator|.
name|getFont
argument_list|()
return|;
block|}
comment|// remove hyphens (e.g. Arial-Black -> ArialBlack)
name|info
operator|=
name|getFont
argument_list|(
name|format
argument_list|,
name|postScriptName
operator|.
name|replaceAll
argument_list|(
literal|"-"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
return|return
name|info
operator|.
name|getFont
argument_list|()
return|;
block|}
comment|// then try named substitutes
for|for
control|(
name|String
name|substituteName
range|:
name|getSubstitutes
argument_list|(
name|postScriptName
argument_list|)
control|)
block|{
name|info
operator|=
name|getFont
argument_list|(
name|format
argument_list|,
name|substituteName
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
return|return
name|info
operator|.
name|getFont
argument_list|()
return|;
block|}
block|}
comment|// then try converting Windows names e.g. (ArialNarrow,Bold) -> (ArialNarrow-Bold)
name|info
operator|=
name|getFont
argument_list|(
name|format
argument_list|,
name|postScriptName
operator|.
name|replaceAll
argument_list|(
literal|","
argument_list|,
literal|"-"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
return|return
name|info
operator|.
name|getFont
argument_list|()
return|;
block|}
comment|// no matches
return|return
literal|null
return|;
block|}
comment|/**      * Finds the named font with the given format.      */
specifier|private
specifier|static
name|FontInfo
name|getFont
parameter_list|(
name|FontFormat
name|format
parameter_list|,
name|String
name|postScriptName
parameter_list|)
block|{
comment|// strip subset tag (happens when we substitute a corrupt embedded font, see PDFBOX-2642)
if|if
condition|(
name|postScriptName
operator|.
name|contains
argument_list|(
literal|"+"
argument_list|)
condition|)
block|{
name|postScriptName
operator|=
name|postScriptName
operator|.
name|substring
argument_list|(
name|postScriptName
operator|.
name|indexOf
argument_list|(
literal|"+"
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// look up the PostScript name
name|FontInfo
name|info
init|=
name|fontInfoByName
operator|.
name|get
argument_list|(
name|postScriptName
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
operator|&&
name|info
operator|.
name|getFormat
argument_list|()
operator|==
name|format
condition|)
block|{
return|return
name|info
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Finds a CFF CID-Keyed font with the given PostScript name, or a suitable substitute, or null.      * This method can also map CJK fonts via their CIDSystemInfo (ROS).      *       * @param fontDescriptor FontDescriptor      * @param cidSystemInfo the CID system info, e.g. "Adobe-Japan1", if any.      */
specifier|public
specifier|static
name|CIDFontMapping
name|getCIDFont
parameter_list|(
name|PDFontDescriptor
name|fontDescriptor
parameter_list|,
name|PDCIDSystemInfo
name|cidSystemInfo
parameter_list|)
block|{
comment|// try name match or substitute with OTF
name|OpenTypeFont
name|otf1
init|=
operator|(
name|OpenTypeFont
operator|)
name|findFont
argument_list|(
name|FontFormat
operator|.
name|OTF
argument_list|,
name|fontDescriptor
operator|.
name|getFontName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|otf1
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|CIDFontMapping
argument_list|(
name|otf1
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|// try name match or substitute with TTF
name|TrueTypeFont
name|ttf
init|=
operator|(
name|TrueTypeFont
operator|)
name|findFont
argument_list|(
name|FontFormat
operator|.
name|TTF
argument_list|,
name|fontDescriptor
operator|.
name|getFontName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ttf
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|CIDFontMapping
argument_list|(
literal|null
argument_list|,
name|ttf
argument_list|,
literal|false
argument_list|)
return|;
block|}
if|if
condition|(
name|cidSystemInfo
operator|!=
literal|null
condition|)
block|{
comment|// "In Acrobat 3.0.1 and later, Type 0 fonts that use a CMap whose CIDSystemInfo
comment|// dictionary defines the Adobe-GB1, Adobe-CNS1 Adobe-Japan1, or Adobe-Korea1 character
comment|// collection can also be substituted." - Adobe Supplement to the ISO 32000
name|String
name|collection
init|=
name|cidSystemInfo
operator|.
name|getRegistry
argument_list|()
operator|+
literal|"-"
operator|+
name|cidSystemInfo
operator|.
name|getOrdering
argument_list|()
decl_stmt|;
if|if
condition|(
name|collection
operator|.
name|equals
argument_list|(
literal|"Adobe-GB1"
argument_list|)
operator|||
name|collection
operator|.
name|equals
argument_list|(
literal|"Adobe-CNS1"
argument_list|)
operator|||
name|collection
operator|.
name|equals
argument_list|(
literal|"Adobe-Japan1"
argument_list|)
operator|||
name|collection
operator|.
name|equals
argument_list|(
literal|"Adobe-Korea1"
argument_list|)
condition|)
block|{
comment|// try automatic substitutes via character collection
for|for
control|(
name|FontInfo
name|info
range|:
name|fontInfoByName
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|info
operator|.
name|getCIDSystemInfo
argument_list|()
operator|!=
literal|null
operator|&&
name|info
operator|.
name|getCIDSystemInfo
argument_list|()
operator|.
name|getRegistry
argument_list|()
operator|.
name|equals
argument_list|(
name|cidSystemInfo
operator|.
name|getRegistry
argument_list|()
argument_list|)
operator|&&
name|info
operator|.
name|getCIDSystemInfo
argument_list|()
operator|.
name|getOrdering
argument_list|()
operator|.
name|equals
argument_list|(
name|cidSystemInfo
operator|.
name|getOrdering
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|CIDFontMapping
argument_list|(
operator|(
name|OpenTypeFont
operator|)
name|info
operator|.
name|getFont
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
block|}
block|}
comment|// last-resort fallback
return|return
operator|new
name|CIDFontMapping
argument_list|(
literal|null
argument_list|,
name|lastResortFont
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
end_class

end_unit

