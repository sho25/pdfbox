begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|BufferedImage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|WritableRaster
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * CIE-based colour spaces specify colours in a way that is independent of the characteristics  * of any particular output device. They are based on an international standard for colour  * specification created by the Commission Internationale de l?Éclairage (CIE).  *  * @author John Hewson  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|PDCIEBasedColorSpace
extends|extends
name|PDColorSpace
block|{
comment|//
comment|// WARNING: this method is performance sensitive, modify with care!
comment|//
specifier|public
name|BufferedImage
name|toRGBImage
parameter_list|(
name|WritableRaster
name|raster
parameter_list|)
throws|throws
name|IOException
block|{
comment|// This method calls toRGB to convert images one pixel at a time. For matrix-based
comment|// CIE color spaces this is fast enough. However, it should not be used with any
comment|// color space which uses an ICC Profile as it will be far too slow.
name|int
name|width
init|=
name|raster
operator|.
name|getWidth
argument_list|()
decl_stmt|;
name|int
name|height
init|=
name|raster
operator|.
name|getHeight
argument_list|()
decl_stmt|;
name|BufferedImage
name|rgbImage
init|=
operator|new
name|BufferedImage
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|BufferedImage
operator|.
name|TYPE_INT_RGB
argument_list|)
decl_stmt|;
name|WritableRaster
name|rgbRaster
init|=
name|rgbImage
operator|.
name|getRaster
argument_list|()
decl_stmt|;
comment|// always three components: ABC
name|float
index|[]
name|abc
init|=
operator|new
name|float
index|[
literal|3
index|]
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|raster
operator|.
name|getPixel
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|abc
argument_list|)
expr_stmt|;
comment|// 0..255 -> 0..1
name|abc
index|[
literal|0
index|]
operator|/=
literal|255
expr_stmt|;
name|abc
index|[
literal|1
index|]
operator|/=
literal|255
expr_stmt|;
name|abc
index|[
literal|2
index|]
operator|/=
literal|255
expr_stmt|;
name|float
index|[]
name|rgb
init|=
name|toRGB
argument_list|(
name|abc
argument_list|)
decl_stmt|;
comment|// 0..1 -> 0..255
name|rgb
index|[
literal|0
index|]
operator|*=
literal|255
expr_stmt|;
name|rgb
index|[
literal|1
index|]
operator|*=
literal|255
expr_stmt|;
name|rgb
index|[
literal|2
index|]
operator|*=
literal|255
expr_stmt|;
name|rgbRaster
operator|.
name|setPixel
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|rgb
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rgbImage
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getName
argument_list|()
return|;
comment|// TODO return more info
block|}
block|}
end_class

end_unit

