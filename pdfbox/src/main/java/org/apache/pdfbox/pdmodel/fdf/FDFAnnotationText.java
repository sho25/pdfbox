begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|fdf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAnnotationText
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_comment
comment|/**  * This represents a Text FDF annotation.  *  * @author Ben Litchfield  * @author Johanneke Lamberink  */
end_comment

begin_class
specifier|public
class|class
name|FDFAnnotationText
extends|extends
name|FDFAnnotation
block|{
comment|/**      * COS Model value for SubType entry.      */
specifier|public
specifier|static
specifier|final
name|String
name|SUBTYPE
init|=
literal|"Text"
decl_stmt|;
comment|/**      * Default constructor.      */
specifier|public
name|FDFAnnotationText
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|annot
operator|.
name|setName
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|,
name|SUBTYPE
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor.      *      * @param a An existing FDF Annotation.      */
specifier|public
name|FDFAnnotationText
parameter_list|(
name|COSDictionary
name|a
parameter_list|)
block|{
name|super
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor.      *      * @param element An XFDF element.      *      * @throws IOException If there is an error extracting information from the element.      */
specifier|public
name|FDFAnnotationText
parameter_list|(
name|Element
name|element
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|annot
operator|.
name|setName
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|,
name|SUBTYPE
argument_list|)
expr_stmt|;
name|String
name|icon
init|=
name|element
operator|.
name|getAttribute
argument_list|(
literal|"icon"
argument_list|)
decl_stmt|;
if|if
condition|(
name|icon
operator|!=
literal|null
operator|&&
operator|!
name|icon
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|setIcon
argument_list|(
name|element
operator|.
name|getAttribute
argument_list|(
literal|"icon"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|state
init|=
name|element
operator|.
name|getAttribute
argument_list|(
literal|"state"
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|!=
literal|null
operator|&&
operator|!
name|state
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|statemodel
init|=
name|element
operator|.
name|getAttribute
argument_list|(
literal|"statemodel"
argument_list|)
decl_stmt|;
if|if
condition|(
name|statemodel
operator|!=
literal|null
operator|&&
operator|!
name|statemodel
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|setState
argument_list|(
name|element
operator|.
name|getAttribute
argument_list|(
literal|"state"
argument_list|)
argument_list|)
expr_stmt|;
name|setStateModel
argument_list|(
name|element
operator|.
name|getAttribute
argument_list|(
literal|"statemodel"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * This will set the icon (and hence appearance, AP taking precedence) For this annotation. See the      * PDAnnotationText.NAME_XXX constants for valid values.      *      * @param icon The name of the annotation      */
specifier|public
name|void
name|setIcon
parameter_list|(
name|String
name|icon
parameter_list|)
block|{
name|annot
operator|.
name|setName
argument_list|(
name|COSName
operator|.
name|NAME
argument_list|,
name|icon
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will retrieve the icon (and hence appearance, AP taking precedence) For this annotation. The default is      * NOTE.      *      * @return The name of this annotation, see the PDAnnotationText.NAME_XXX constants.      */
specifier|public
name|String
name|getIcon
parameter_list|()
block|{
return|return
name|annot
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|NAME
argument_list|,
name|PDAnnotationText
operator|.
name|NAME_NOTE
argument_list|)
return|;
block|}
comment|/**      * This will retrieve the annotation state.      *       * @return the annotation state      */
specifier|public
name|String
name|getState
parameter_list|()
block|{
return|return
name|annot
operator|.
name|getString
argument_list|(
name|COSName
operator|.
name|STATE
argument_list|)
return|;
block|}
comment|/**      * This will set the annotation state.      *       * @param state the annotation state      */
specifier|public
name|void
name|setState
parameter_list|(
name|String
name|state
parameter_list|)
block|{
name|annot
operator|.
name|setString
argument_list|(
name|COSName
operator|.
name|STATE
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will retrieve the annotation state model.      *       * @return the annotation state model      */
specifier|public
name|String
name|getStateModel
parameter_list|()
block|{
return|return
name|annot
operator|.
name|getString
argument_list|(
name|COSName
operator|.
name|STATE_MODEL
argument_list|)
return|;
block|}
comment|/**      * This will set the annotation state model. Allowed values are "Marked" and "Review"      *       * @param stateModel the annotation state model      */
specifier|public
name|void
name|setStateModel
parameter_list|(
name|String
name|stateModel
parameter_list|)
block|{
name|annot
operator|.
name|setString
argument_list|(
name|COSName
operator|.
name|STATE_MODEL
argument_list|,
name|stateModel
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

