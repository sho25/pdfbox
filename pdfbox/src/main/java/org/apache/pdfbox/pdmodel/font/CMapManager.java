begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cmap
operator|.
name|CMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cmap
operator|.
name|CMapParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|ResourceLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * CMap resource loader and cache.  */
end_comment

begin_class
class|class
name|CMapManager
block|{
specifier|protected
specifier|static
specifier|final
name|String
name|CMAP_RESOURCE_ROOT
init|=
literal|"org/apache/pdfbox/resources/cmap/"
decl_stmt|;
specifier|protected
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|CMap
argument_list|>
name|cMapCache
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CMap
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
comment|/**      * Fetches the predefined CMap from disk (or cache).      *      * @param cMapName CMap name      */
specifier|public
specifier|static
name|CMap
name|getPredefinedCMap
parameter_list|(
name|String
name|cMapName
parameter_list|)
throws|throws
name|IOException
block|{
name|CMap
name|cmap
init|=
name|cMapCache
operator|.
name|get
argument_list|(
name|cMapName
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmap
operator|!=
literal|null
condition|)
block|{
return|return
name|cmap
return|;
block|}
return|return
name|parseCMap
argument_list|(
name|ResourceLoader
operator|.
name|loadResource
argument_list|(
name|CMAP_RESOURCE_ROOT
operator|+
name|cMapName
argument_list|)
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * Parse an embedded CMap.      *      * @param cMapStream the CMap to be read      * @return the parsed CMap      */
specifier|public
specifier|static
name|CMap
name|parseCMap
parameter_list|(
name|InputStream
name|cMapStream
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|parseCMap
argument_list|(
name|cMapStream
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * Parse the given CMap.      *      * @param cMapStream the CMap to be read      * @return the parsed CMap      */
specifier|private
specifier|static
name|CMap
name|parseCMap
parameter_list|(
name|InputStream
name|cMapStream
parameter_list|,
name|boolean
name|isPredefined
parameter_list|)
throws|throws
name|IOException
block|{
name|CMap
name|targetCmap
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cMapStream
operator|!=
literal|null
condition|)
block|{
name|CMapParser
name|parser
init|=
operator|new
name|CMapParser
argument_list|()
decl_stmt|;
name|targetCmap
operator|=
name|parser
operator|.
name|parse
argument_list|(
name|CMAP_RESOURCE_ROOT
argument_list|,
name|cMapStream
argument_list|)
expr_stmt|;
comment|// limit the cache to predefined CMaps
if|if
condition|(
name|isPredefined
condition|)
block|{
name|cMapCache
operator|.
name|put
argument_list|(
name|targetCmap
operator|.
name|getName
argument_list|()
argument_list|,
name|targetCmap
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|targetCmap
return|;
block|}
block|}
end_class

end_unit

