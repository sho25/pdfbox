begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|AffineTransform
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|PathIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|contentstream
operator|.
name|PDAbstractContentStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdfwriter
operator|.
name|COSWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|documentinterchange
operator|.
name|markedcontent
operator|.
name|PDPropertyList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|PDXObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDColor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDColorSpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDICCBased
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDPattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDSeparation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|image
operator|.
name|PDImageXObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|image
operator|.
name|PDInlineImage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|state
operator|.
name|PDExtendedGraphicsState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|state
operator|.
name|RenderingMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAppearanceStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|Matrix
import|;
end_import

begin_comment
comment|/**  * Provides the ability to write to a page content stream.  *  * @author Ben Litchfield  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|PDPageContentStream
extends|extends
name|PDAbstractContentStream
implements|implements
name|Closeable
block|{
comment|/**      * This is to choose what to do with the stream: overwrite, append or prepend.      */
specifier|public
enum|enum
name|AppendMode
block|{
comment|/**          * Overwrite the existing page content streams.          */
name|OVERWRITE
block|,
comment|/**          * Append the content stream after all existing page content streams.          */
name|APPEND
block|,
comment|/**          * Insert before all other page content streams.          */
name|PREPEND
block|;
specifier|public
name|boolean
name|isOverwrite
parameter_list|()
block|{
return|return
name|this
operator|==
name|OVERWRITE
return|;
block|}
specifier|public
name|boolean
name|isPrepend
parameter_list|()
block|{
return|return
name|this
operator|==
name|PREPEND
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|PDPageContentStream
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|PDDocument
name|document
decl_stmt|;
specifier|private
specifier|final
name|Stack
argument_list|<
name|PDFont
argument_list|>
name|fontStack
init|=
operator|new
name|Stack
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Stack
argument_list|<
name|PDColorSpace
argument_list|>
name|nonStrokingColorSpaceStack
init|=
operator|new
name|Stack
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Stack
argument_list|<
name|PDColorSpace
argument_list|>
name|strokingColorSpaceStack
init|=
operator|new
name|Stack
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * Create a new PDPage content stream. This constructor overwrites all existing content streams      * of this page.      *      * @param document The document the page is part of.      * @param sourcePage The page to write the contents to.      * @throws IOException If there is an error writing to the page contents.      */
specifier|public
name|PDPageContentStream
parameter_list|(
name|PDDocument
name|document
parameter_list|,
name|PDPage
name|sourcePage
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|document
argument_list|,
name|sourcePage
argument_list|,
name|AppendMode
operator|.
name|OVERWRITE
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a new PDPage content stream.      *      * @param document The document the page is part of.      * @param sourcePage The page to write the contents to.      * @param appendContent Indicates whether content will be overwritten. If false all previous      *                      content is deleted.      * @param compress Tell if the content stream should compress the page contents.      * @throws IOException If there is an error writing to the page contents.      * @deprecated use {@link #PDPageContentStream(PDDocument, PDPage, PDPageContentStream.AppendMode, boolean)}      */
annotation|@
name|Deprecated
specifier|public
name|PDPageContentStream
parameter_list|(
name|PDDocument
name|document
parameter_list|,
name|PDPage
name|sourcePage
parameter_list|,
name|boolean
name|appendContent
parameter_list|,
name|boolean
name|compress
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|document
argument_list|,
name|sourcePage
argument_list|,
name|appendContent
argument_list|,
name|compress
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a new PDPage content stream. If the appendContent parameter is set to      * {@link AppendMode#APPEND}, you may want to use      * {@link #PDPageContentStream(PDDocument, PDPage, PDPageContentStream.AppendMode, boolean, boolean)}      * instead, with the fifth parameter set to true.      *      * @param document The document the page is part of.      * @param sourcePage The page to write the contents to.      * @param appendContent Indicates whether content will be overwritten, appended or prepended.      * @param compress Tell if the content stream should compress the page contents.      * @throws IOException If there is an error writing to the page contents.      */
specifier|public
name|PDPageContentStream
parameter_list|(
name|PDDocument
name|document
parameter_list|,
name|PDPage
name|sourcePage
parameter_list|,
name|AppendMode
name|appendContent
parameter_list|,
name|boolean
name|compress
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|document
argument_list|,
name|sourcePage
argument_list|,
name|appendContent
argument_list|,
name|compress
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a new PDPage content stream.      *      * @param document The document the page is part of.      * @param sourcePage The page to write the contents to.      * @param appendContent Indicates whether content will be overwritten. If false all previous      *                      content is deleted.      * @param compress Tell if the content stream should compress the page contents.      * @param resetContext Tell if the graphic context should be reseted. You should use this when      * appending to an existing stream, because the existing stream may have changed graphic      * properties (e.g. scaling, rotation).      * @throws IOException If there is an error writing to the page contents.      * @deprecated use {@link #PDPageContentStream(PDDocument, PDPage, PDPageContentStream.AppendMode, boolean, boolean) }      */
annotation|@
name|Deprecated
specifier|public
name|PDPageContentStream
parameter_list|(
name|PDDocument
name|document
parameter_list|,
name|PDPage
name|sourcePage
parameter_list|,
name|boolean
name|appendContent
parameter_list|,
name|boolean
name|compress
parameter_list|,
name|boolean
name|resetContext
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|document
argument_list|,
name|sourcePage
argument_list|,
name|appendContent
condition|?
name|AppendMode
operator|.
name|APPEND
else|:
name|AppendMode
operator|.
name|OVERWRITE
argument_list|,
name|compress
argument_list|,
name|resetContext
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a new PDPage content stream.      *      * @param document The document the page is part of.      * @param sourcePage The page to write the contents to.      * @param appendContent Indicates whether content will be overwritten, appended or prepended.      * @param compress Tell if the content stream should compress the page contents.      * @param resetContext Tell if the graphic context should be reset. This is only relevant when      * the appendContent parameter is set to {@link AppendMode#APPEND}. You should use this when      * appending to an existing stream, because the existing stream may have changed graphic      * properties (e.g. scaling, rotation).      * @throws IOException If there is an error writing to the page contents.      */
specifier|public
name|PDPageContentStream
parameter_list|(
name|PDDocument
name|document
parameter_list|,
name|PDPage
name|sourcePage
parameter_list|,
name|AppendMode
name|appendContent
parameter_list|,
name|boolean
name|compress
parameter_list|,
name|boolean
name|resetContext
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|document
operator|=
name|document
expr_stmt|;
name|COSName
name|filter
init|=
name|compress
condition|?
name|COSName
operator|.
name|FLATE_DECODE
else|:
literal|null
decl_stmt|;
comment|// If request specifies the need to append/prepend to the document
if|if
condition|(
operator|!
name|appendContent
operator|.
name|isOverwrite
argument_list|()
operator|&&
name|sourcePage
operator|.
name|hasContents
argument_list|()
condition|)
block|{
comment|// Create a stream to append new content
name|PDStream
name|contentsToAppend
init|=
operator|new
name|PDStream
argument_list|(
name|document
argument_list|)
decl_stmt|;
comment|// Add new stream to contents array
name|COSBase
name|contents
init|=
name|sourcePage
operator|.
name|getCOSObject
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|CONTENTS
argument_list|)
decl_stmt|;
name|COSArray
name|array
decl_stmt|;
if|if
condition|(
name|contents
operator|instanceof
name|COSArray
condition|)
block|{
comment|// If contents is already an array, a new stream is simply appended to it
name|array
operator|=
operator|(
name|COSArray
operator|)
name|contents
expr_stmt|;
block|}
else|else
block|{
comment|// Creates a new array and adds the current stream plus a new one to it
name|array
operator|=
operator|new
name|COSArray
argument_list|()
expr_stmt|;
name|array
operator|.
name|add
argument_list|(
name|contents
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|appendContent
operator|.
name|isPrepend
argument_list|()
condition|)
block|{
name|array
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|contentsToAppend
operator|.
name|getCOSObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|array
operator|.
name|add
argument_list|(
name|contentsToAppend
argument_list|)
expr_stmt|;
block|}
comment|// save the initial/unmodified graphics context
if|if
condition|(
name|resetContext
condition|)
block|{
comment|// create a new stream to encapsulate the existing stream
name|PDStream
name|saveGraphics
init|=
operator|new
name|PDStream
argument_list|(
name|document
argument_list|)
decl_stmt|;
name|setOutput
argument_list|(
name|saveGraphics
operator|.
name|createOutputStream
argument_list|(
name|filter
argument_list|)
argument_list|)
expr_stmt|;
comment|// save the initial/unmodified graphics context
name|saveGraphicsState
argument_list|()
expr_stmt|;
name|close
argument_list|()
expr_stmt|;
comment|// insert the new stream at the beginning
name|array
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|saveGraphics
operator|.
name|getCOSObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Sets the compoundStream as page contents
name|sourcePage
operator|.
name|getCOSObject
argument_list|()
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|CONTENTS
argument_list|,
name|array
argument_list|)
expr_stmt|;
name|setOutput
argument_list|(
name|contentsToAppend
operator|.
name|createOutputStream
argument_list|(
name|filter
argument_list|)
argument_list|)
expr_stmt|;
comment|// restore the initial/unmodified graphics context
if|if
condition|(
name|resetContext
condition|)
block|{
name|restoreGraphicsState
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|sourcePage
operator|.
name|hasContents
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"You are overwriting an existing content, you should use the append mode"
argument_list|)
expr_stmt|;
block|}
name|PDStream
name|contents
init|=
operator|new
name|PDStream
argument_list|(
name|document
argument_list|)
decl_stmt|;
name|sourcePage
operator|.
name|setContents
argument_list|(
name|contents
argument_list|)
expr_stmt|;
name|setOutput
argument_list|(
name|contents
operator|.
name|createOutputStream
argument_list|(
name|filter
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// this has to be done here, as the resources will be set to null when resetting the content
comment|// stream
name|PDResources
name|resources
init|=
name|sourcePage
operator|.
name|getResources
argument_list|()
decl_stmt|;
if|if
condition|(
name|resources
operator|==
literal|null
condition|)
block|{
name|resources
operator|=
operator|new
name|PDResources
argument_list|()
expr_stmt|;
name|sourcePage
operator|.
name|setResources
argument_list|(
name|resources
argument_list|)
expr_stmt|;
block|}
name|setResources
argument_list|(
name|resources
argument_list|)
expr_stmt|;
comment|// configure NumberFormat
name|setMaximumFractionDigits
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a new appearance stream. Note that this is not actually a "page" content stream.      *      * @param doc The document the page is part of.      * @param appearance The appearance stream to write to.      * @throws IOException If there is an error writing to the page contents.      */
specifier|public
name|PDPageContentStream
parameter_list|(
name|PDDocument
name|doc
parameter_list|,
name|PDAppearanceStream
name|appearance
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|doc
argument_list|,
name|appearance
argument_list|,
name|appearance
operator|.
name|getStream
argument_list|()
operator|.
name|createOutputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a new appearance stream. Note that this is not actually a "page" content stream.      *      * @param doc The document the appearance is part of.      * @param appearance The appearance stream to add to.      * @param outputStream The appearances output stream to write to.      * @throws IOException If there is an error writing to the page contents.      */
specifier|public
name|PDPageContentStream
parameter_list|(
name|PDDocument
name|doc
parameter_list|,
name|PDAppearanceStream
name|appearance
parameter_list|,
name|OutputStream
name|outputStream
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|appearance
argument_list|,
name|outputStream
argument_list|)
expr_stmt|;
name|this
operator|.
name|document
operator|=
name|doc
expr_stmt|;
name|setResources
argument_list|(
name|appearance
operator|.
name|getResources
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the font and font size to draw text with.      *      * @param font The font to use.      * @param fontSize The font size to draw the text.      * @throws IOException If there is an error writing the font information.      */
annotation|@
name|Override
specifier|public
name|void
name|setFont
parameter_list|(
name|PDFont
name|font
parameter_list|,
name|float
name|fontSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fontStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fontStack
operator|.
name|add
argument_list|(
name|font
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fontStack
operator|.
name|setElementAt
argument_list|(
name|font
argument_list|,
name|fontStack
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|font
operator|.
name|willBeSubset
argument_list|()
condition|)
block|{
name|document
operator|.
name|getFontsToSubset
argument_list|()
operator|.
name|add
argument_list|(
name|font
argument_list|)
expr_stmt|;
block|}
name|writeOperand
argument_list|(
name|getResources
argument_list|()
operator|.
name|add
argument_list|(
name|font
argument_list|)
argument_list|)
expr_stmt|;
name|writeOperand
argument_list|(
name|fontSize
argument_list|)
expr_stmt|;
name|writeOperator
argument_list|(
literal|"Tf"
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will draw a string at the current location on the screen.      *      * @param text The text to draw.      * @throws IOException If an io exception occurs.      * @deprecated Use {@link #showText} instead.      */
annotation|@
name|Deprecated
specifier|public
name|void
name|drawString
parameter_list|(
name|String
name|text
parameter_list|)
throws|throws
name|IOException
block|{
name|showText
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
comment|/**      * Shows the given text at the location specified by the current text matrix.      *      * @param text The Unicode text to show.      * @throws IOException If an io exception occurs.      */
annotation|@
name|Override
specifier|public
name|void
name|showText
parameter_list|(
name|String
name|text
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|isInTextMode
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Must call beginText() before showText()"
argument_list|)
throw|;
block|}
if|if
condition|(
name|fontStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Must call setFont() before showText()"
argument_list|)
throw|;
block|}
name|PDFont
name|font
init|=
name|fontStack
operator|.
name|peek
argument_list|()
decl_stmt|;
comment|// Unicode code points to keep when subsetting
if|if
condition|(
name|font
operator|.
name|willBeSubset
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|offset
init|=
literal|0
init|;
name|offset
operator|<
name|text
operator|.
name|length
argument_list|()
condition|;
control|)
block|{
name|int
name|codePoint
init|=
name|text
operator|.
name|codePointAt
argument_list|(
name|offset
argument_list|)
decl_stmt|;
name|font
operator|.
name|addToSubset
argument_list|(
name|codePoint
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|Character
operator|.
name|charCount
argument_list|(
name|codePoint
argument_list|)
expr_stmt|;
block|}
block|}
name|COSWriter
operator|.
name|writeString
argument_list|(
name|font
operator|.
name|encode
argument_list|(
name|text
argument_list|)
argument_list|,
name|getOutput
argument_list|()
argument_list|)
expr_stmt|;
name|write
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|writeOperator
argument_list|(
literal|"Tj"
argument_list|)
expr_stmt|;
block|}
comment|/**      * The Td operator.      * A current text matrix will be replaced with a new one (1 0 0 1 x y).      * @param tx The x translation.      * @param ty The y translation.      * @throws IOException If there is an error writing to the stream.      * @deprecated Use {@link #newLineAtOffset} instead.      */
annotation|@
name|Deprecated
specifier|public
name|void
name|moveTextPositionByAmount
parameter_list|(
name|float
name|tx
parameter_list|,
name|float
name|ty
parameter_list|)
throws|throws
name|IOException
block|{
name|newLineAtOffset
argument_list|(
name|tx
argument_list|,
name|ty
argument_list|)
expr_stmt|;
block|}
comment|/**      * The Tm operator. Sets the text matrix to the given values.      * A current text matrix will be replaced with the new one.      * @param a The a value of the matrix.      * @param b The b value of the matrix.      * @param c The c value of the matrix.      * @param d The d value of the matrix.      * @param e The e value of the matrix.      * @param f The f value of the matrix.      * @throws IOException If there is an error writing to the stream.      * @deprecated Use {@link #setTextMatrix(Matrix)} instead.      */
annotation|@
name|Deprecated
specifier|public
name|void
name|setTextMatrix
parameter_list|(
name|double
name|a
parameter_list|,
name|double
name|b
parameter_list|,
name|double
name|c
parameter_list|,
name|double
name|d
parameter_list|,
name|double
name|e
parameter_list|,
name|double
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|setTextMatrix
argument_list|(
operator|new
name|Matrix
argument_list|(
operator|(
name|float
operator|)
name|a
argument_list|,
operator|(
name|float
operator|)
name|b
argument_list|,
operator|(
name|float
operator|)
name|c
argument_list|,
operator|(
name|float
operator|)
name|d
argument_list|,
operator|(
name|float
operator|)
name|e
argument_list|,
operator|(
name|float
operator|)
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * The Tm operator. Sets the text matrix to the given values.      * A current text matrix will be replaced with the new one.      * @param matrix the transformation matrix      * @throws IOException If there is an error writing to the stream.      * @deprecated Use {@link #setTextMatrix(Matrix)} instead.      */
annotation|@
name|Deprecated
specifier|public
name|void
name|setTextMatrix
parameter_list|(
name|AffineTransform
name|matrix
parameter_list|)
throws|throws
name|IOException
block|{
name|setTextMatrix
argument_list|(
operator|new
name|Matrix
argument_list|(
name|matrix
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * The Tm operator. Sets the text matrix to the given scaling and translation values.      * A current text matrix will be replaced with the new one.      * @param sx The scaling factor in x-direction.      * @param sy The scaling factor in y-direction.      * @param tx The translation value in x-direction.      * @param ty The translation value in y-direction.      * @throws IOException If there is an error writing to the stream.      * @deprecated Use {@link #setTextMatrix(Matrix)} instead.      */
annotation|@
name|Deprecated
specifier|public
name|void
name|setTextScaling
parameter_list|(
name|double
name|sx
parameter_list|,
name|double
name|sy
parameter_list|,
name|double
name|tx
parameter_list|,
name|double
name|ty
parameter_list|)
throws|throws
name|IOException
block|{
name|setTextMatrix
argument_list|(
operator|new
name|Matrix
argument_list|(
operator|(
name|float
operator|)
name|sx
argument_list|,
literal|0f
argument_list|,
literal|0f
argument_list|,
operator|(
name|float
operator|)
name|sy
argument_list|,
operator|(
name|float
operator|)
name|tx
argument_list|,
operator|(
name|float
operator|)
name|ty
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * The Tm operator. Sets the text matrix to the given translation values.      * A current text matrix will be replaced with the new one.      * @param tx The translation value in x-direction.      * @param ty The translation value in y-direction.      * @throws IOException If there is an error writing to the stream.      * @deprecated Use {@link #setTextMatrix(Matrix)} instead.      */
annotation|@
name|Deprecated
specifier|public
name|void
name|setTextTranslation
parameter_list|(
name|double
name|tx
parameter_list|,
name|double
name|ty
parameter_list|)
throws|throws
name|IOException
block|{
name|setTextMatrix
argument_list|(
name|Matrix
operator|.
name|getTranslateInstance
argument_list|(
operator|(
name|float
operator|)
name|tx
argument_list|,
operator|(
name|float
operator|)
name|ty
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * The Tm operator. Sets the text matrix to the given rotation and translation values.      * A current text matrix will be replaced with the new one.      * @param angle The angle used for the counterclockwise rotation in radians.      * @param tx The translation value in x-direction.      * @param ty The translation value in y-direction.      * @throws IOException If there is an error writing to the stream.      * @deprecated Use {@link #setTextMatrix(Matrix)} instead.      */
annotation|@
name|Deprecated
specifier|public
name|void
name|setTextRotation
parameter_list|(
name|double
name|angle
parameter_list|,
name|double
name|tx
parameter_list|,
name|double
name|ty
parameter_list|)
throws|throws
name|IOException
block|{
name|setTextMatrix
argument_list|(
name|Matrix
operator|.
name|getRotateInstance
argument_list|(
name|angle
argument_list|,
operator|(
name|float
operator|)
name|tx
argument_list|,
operator|(
name|float
operator|)
name|ty
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Draw an inline image at the x,y coordinates, with the default size of the image.      *      * @param inlineImage The inline image to draw.      * @param x The x-coordinate to draw the inline image.      * @param y The y-coordinate to draw the inline image.      *      * @throws IOException If there is an error writing to the stream.      * @deprecated Use {@link #drawImage(PDInlineImage, float, float)} instead.      */
annotation|@
name|Deprecated
specifier|public
name|void
name|drawInlineImage
parameter_list|(
name|PDInlineImage
name|inlineImage
parameter_list|,
name|float
name|x
parameter_list|,
name|float
name|y
parameter_list|)
throws|throws
name|IOException
block|{
name|drawImage
argument_list|(
name|inlineImage
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|inlineImage
operator|.
name|getWidth
argument_list|()
argument_list|,
name|inlineImage
operator|.
name|getHeight
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Draw an inline image at the x,y coordinates and a certain width and height.      *      * @param inlineImage The inline image to draw.      * @param x The x-coordinate to draw the inline image.      * @param y The y-coordinate to draw the inline image.      * @param width The width of the inline image to draw.      * @param height The height of the inline image to draw.      *      * @throws IOException If there is an error writing to the stream.      * @deprecated Use {@link #drawImage(PDInlineImage, float, float, float, float)} instead.      */
annotation|@
name|Deprecated
specifier|public
name|void
name|drawInlineImage
parameter_list|(
name|PDInlineImage
name|inlineImage
parameter_list|,
name|float
name|x
parameter_list|,
name|float
name|y
parameter_list|,
name|float
name|width
parameter_list|,
name|float
name|height
parameter_list|)
throws|throws
name|IOException
block|{
name|drawImage
argument_list|(
name|inlineImage
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
block|}
comment|/**      * Draw an xobject(form or image) at the x,y coordinates and a certain width and height.      *      * @param xobject The xobject to draw.      * @param x The x-coordinate to draw the image.      * @param y The y-coordinate to draw the image.      * @param width The width of the image to draw.      * @param height The height of the image to draw.      *      * @throws IOException If there is an error writing to the stream.      * @deprecated Use {@link #drawImage} instead.      */
annotation|@
name|Deprecated
specifier|public
name|void
name|drawXObject
parameter_list|(
name|PDXObject
name|xobject
parameter_list|,
name|float
name|x
parameter_list|,
name|float
name|y
parameter_list|,
name|float
name|width
parameter_list|,
name|float
name|height
parameter_list|)
throws|throws
name|IOException
block|{
name|AffineTransform
name|transform
init|=
operator|new
name|AffineTransform
argument_list|(
name|width
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|height
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
decl_stmt|;
name|drawXObject
argument_list|(
name|xobject
argument_list|,
name|transform
argument_list|)
expr_stmt|;
block|}
comment|/**      * Draw an xobject(form or image) using the given {@link AffineTransform} to position      * the xobject.      *      * @param xobject The xobject to draw.      * @param transform the transformation matrix      * @throws IOException If there is an error writing to the stream.      * @throws IllegalStateException If the method was called within a text block.      * @deprecated Use {@link #drawImage(PDImageXObject, Matrix) drawImage(PDImageXObject, Matrix)}      * or {@link #drawForm(PDFormXObject) drawForm(PDFormXObject)} with      * {@link #transform(Matrix) transform(Matrix)} instead.      */
annotation|@
name|Deprecated
specifier|public
name|void
name|drawXObject
parameter_list|(
name|PDXObject
name|xobject
parameter_list|,
name|AffineTransform
name|transform
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isInTextMode
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error: drawXObject is not allowed within a text block."
argument_list|)
throw|;
block|}
name|String
name|xObjectPrefix
decl_stmt|;
if|if
condition|(
name|xobject
operator|instanceof
name|PDImageXObject
condition|)
block|{
name|xObjectPrefix
operator|=
literal|"Im"
expr_stmt|;
block|}
else|else
block|{
name|xObjectPrefix
operator|=
literal|"Form"
expr_stmt|;
block|}
name|COSName
name|objMapping
init|=
name|getResources
argument_list|()
operator|.
name|add
argument_list|(
name|xobject
argument_list|,
name|xObjectPrefix
argument_list|)
decl_stmt|;
name|saveGraphicsState
argument_list|()
expr_stmt|;
name|transform
argument_list|(
operator|new
name|Matrix
argument_list|(
name|transform
argument_list|)
argument_list|)
expr_stmt|;
name|writeOperand
argument_list|(
name|objMapping
argument_list|)
expr_stmt|;
name|writeOperator
argument_list|(
literal|"Do"
argument_list|)
expr_stmt|;
name|restoreGraphicsState
argument_list|()
expr_stmt|;
block|}
comment|/**      * The cm operator. Concatenates the current transformation matrix with the given values.      * @param a The a value of the matrix.      * @param b The b value of the matrix.      * @param c The c value of the matrix.      * @param d The d value of the matrix.      * @param e The e value of the matrix.      * @param f The f value of the matrix.      * @throws IOException If there is an error writing to the stream.      * @deprecated Use {@link #transform} instead.      */
annotation|@
name|Deprecated
specifier|public
name|void
name|concatenate2CTM
parameter_list|(
name|double
name|a
parameter_list|,
name|double
name|b
parameter_list|,
name|double
name|c
parameter_list|,
name|double
name|d
parameter_list|,
name|double
name|e
parameter_list|,
name|double
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|transform
argument_list|(
operator|new
name|Matrix
argument_list|(
operator|(
name|float
operator|)
name|a
argument_list|,
operator|(
name|float
operator|)
name|b
argument_list|,
operator|(
name|float
operator|)
name|c
argument_list|,
operator|(
name|float
operator|)
name|d
argument_list|,
operator|(
name|float
operator|)
name|e
argument_list|,
operator|(
name|float
operator|)
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * The cm operator. Concatenates the current transformation matrix with the given      * {@link AffineTransform}.      * @param at the transformation matrix      * @throws IOException If there is an error writing to the stream.      * @deprecated Use {@link #transform} instead.      */
annotation|@
name|Deprecated
specifier|public
name|void
name|concatenate2CTM
parameter_list|(
name|AffineTransform
name|at
parameter_list|)
throws|throws
name|IOException
block|{
name|transform
argument_list|(
operator|new
name|Matrix
argument_list|(
name|at
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * q operator. Saves the current graphics state.      * @throws IOException If an error occurs while writing to the stream.      */
annotation|@
name|Override
specifier|public
name|void
name|saveGraphicsState
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|fontStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fontStack
operator|.
name|push
argument_list|(
name|fontStack
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|strokingColorSpaceStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|strokingColorSpaceStack
operator|.
name|push
argument_list|(
name|strokingColorSpaceStack
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|nonStrokingColorSpaceStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|nonStrokingColorSpaceStack
operator|.
name|push
argument_list|(
name|nonStrokingColorSpaceStack
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|writeOperator
argument_list|(
literal|"q"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Q operator. Restores the current graphics state.      * @throws IOException If an error occurs while writing to the stream.      */
annotation|@
name|Override
specifier|public
name|void
name|restoreGraphicsState
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|fontStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fontStack
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|strokingColorSpaceStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|strokingColorSpaceStack
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|nonStrokingColorSpaceStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|nonStrokingColorSpaceStack
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
name|writeOperator
argument_list|(
literal|"Q"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the stroking color space.  This will add the colorspace to the PDResources      * if necessary.      *      * @param colorSpace The colorspace to write.      * @throws IOException If there is an error writing the colorspace.      * @deprecated Use {@link #setStrokingColor} instead.      */
annotation|@
name|Deprecated
specifier|public
name|void
name|setStrokingColorSpace
parameter_list|(
name|PDColorSpace
name|colorSpace
parameter_list|)
throws|throws
name|IOException
block|{
name|setStrokingColorSpaceStack
argument_list|(
name|colorSpace
argument_list|)
expr_stmt|;
name|writeOperand
argument_list|(
name|getName
argument_list|(
name|colorSpace
argument_list|)
argument_list|)
expr_stmt|;
name|writeOperator
argument_list|(
literal|"CS"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the stroking color space.  This will add the colorspace to the PDResources      * if necessary.      *      * @param colorSpace The colorspace to write.      * @throws IOException If there is an error writing the colorspace.      * @deprecated Use {@link #setNonStrokingColor} instead.      */
annotation|@
name|Deprecated
specifier|public
name|void
name|setNonStrokingColorSpace
parameter_list|(
name|PDColorSpace
name|colorSpace
parameter_list|)
throws|throws
name|IOException
block|{
name|setNonStrokingColorSpaceStack
argument_list|(
name|colorSpace
argument_list|)
expr_stmt|;
name|writeOperand
argument_list|(
name|getName
argument_list|(
name|colorSpace
argument_list|)
argument_list|)
expr_stmt|;
name|writeOperator
argument_list|(
literal|"cs"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the color components of current stroking color space.      *      * @param components The components to set for the current color.      * @throws IOException If there is an error while writing to the stream.      * @deprecated Use {@link #setStrokingColor(PDColor)} instead.      */
annotation|@
name|Deprecated
specifier|public
name|void
name|setStrokingColor
parameter_list|(
name|float
index|[]
name|components
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|strokingColorSpaceStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"The color space must be set before setting a color"
argument_list|)
throw|;
block|}
for|for
control|(
name|float
name|component
range|:
name|components
control|)
block|{
name|writeOperand
argument_list|(
name|component
argument_list|)
expr_stmt|;
block|}
name|PDColorSpace
name|currentStrokingColorSpace
init|=
name|strokingColorSpaceStack
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentStrokingColorSpace
operator|instanceof
name|PDSeparation
operator|||
name|currentStrokingColorSpace
operator|instanceof
name|PDPattern
operator|||
name|currentStrokingColorSpace
operator|instanceof
name|PDICCBased
condition|)
block|{
name|writeOperator
argument_list|(
literal|"SCN"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeOperator
argument_list|(
literal|"SC"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Set the stroking color in the DeviceCMYK color space. Range is 0..255.      *      * @param c The cyan value.      * @param m The magenta value.      * @param y The yellow value.      * @param k The black value.      * @throws IOException If an IO error occurs while writing to the stream.      * @throws IllegalArgumentException If the parameters are invalid.      * @deprecated Use {@link #setStrokingColor(float, float, float, float)} instead.      */
annotation|@
name|Deprecated
specifier|public
name|void
name|setStrokingColor
parameter_list|(
name|int
name|c
parameter_list|,
name|int
name|m
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|k
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isOutside255Interval
argument_list|(
name|c
argument_list|)
operator|||
name|isOutside255Interval
argument_list|(
name|m
argument_list|)
operator|||
name|isOutside255Interval
argument_list|(
name|y
argument_list|)
operator|||
name|isOutside255Interval
argument_list|(
name|k
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameters must be within 0..255, but are "
operator|+
name|String
operator|.
name|format
argument_list|(
literal|"(%d,%d,%d,%d)"
argument_list|,
name|c
argument_list|,
name|m
argument_list|,
name|y
argument_list|,
name|k
argument_list|)
argument_list|)
throw|;
block|}
name|setStrokingColor
argument_list|(
name|c
operator|/
literal|255f
argument_list|,
name|m
operator|/
literal|255f
argument_list|,
name|y
operator|/
literal|255f
argument_list|,
name|k
operator|/
literal|255f
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the stroking color in the DeviceGray color space. Range is 0..255.      *      * @param g The gray value.      * @throws IOException If an IO error occurs while writing to the stream.      * @throws IllegalArgumentException If the parameter is invalid.      * @deprecated Use {@link #setStrokingColor(double)} instead.      */
annotation|@
name|Deprecated
specifier|public
name|void
name|setStrokingColor
parameter_list|(
name|int
name|g
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isOutside255Interval
argument_list|(
name|g
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter must be within 0..255, but is "
operator|+
name|g
argument_list|)
throw|;
block|}
name|setStrokingColor
argument_list|(
name|g
operator|/
literal|255f
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the color components of current non-stroking color space.      *      * @param components The components to set for the current color.      * @throws IOException If there is an error while writing to the stream.      * @deprecated Use {@link #setNonStrokingColor(PDColor)} instead.      */
annotation|@
name|Deprecated
specifier|public
name|void
name|setNonStrokingColor
parameter_list|(
name|float
index|[]
name|components
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|nonStrokingColorSpaceStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"The color space must be set before setting a color"
argument_list|)
throw|;
block|}
for|for
control|(
name|float
name|component
range|:
name|components
control|)
block|{
name|writeOperand
argument_list|(
name|component
argument_list|)
expr_stmt|;
block|}
name|PDColorSpace
name|currentNonStrokingColorSpace
init|=
name|nonStrokingColorSpaceStack
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentNonStrokingColorSpace
operator|instanceof
name|PDSeparation
operator|||
name|currentNonStrokingColorSpace
operator|instanceof
name|PDPattern
operator|||
name|currentNonStrokingColorSpace
operator|instanceof
name|PDICCBased
condition|)
block|{
name|writeOperator
argument_list|(
literal|"scn"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeOperator
argument_list|(
literal|"sc"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Fill a rectangle on the page using the current non stroking color.      *      * @param x The lower left x coordinate.      * @param y The lower left y coordinate.      * @param width The width of the rectangle.      * @param height The height of the rectangle.      * @throws IOException If there is an error while drawing on the screen.      * @throws IllegalStateException If the method was called within a text block.      * @deprecated Use {@link #addRect} followed by {@link #fill()} instead.      */
annotation|@
name|Deprecated
specifier|public
name|void
name|fillRect
parameter_list|(
name|float
name|x
parameter_list|,
name|float
name|y
parameter_list|,
name|float
name|width
parameter_list|,
name|float
name|height
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isInTextMode
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error: fillRect is not allowed within a text block."
argument_list|)
throw|;
block|}
name|addRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|fill
argument_list|()
expr_stmt|;
block|}
comment|/**      * Append a cubic Bézier curve to the current path. The curve extends from the current      * point to the point (x3 , y3 ), using (x1 , y1 ) and (x2 , y2 ) as the Bézier control points      * @param x1 x coordinate of the point 1      * @param y1 y coordinate of the point 1      * @param x2 x coordinate of the point 2      * @param y2 y coordinate of the point 2      * @param x3 x coordinate of the point 3      * @param y3 y coordinate of the point 3      * @throws IOException If there is an error while adding the .      * @deprecated Use {@link #curveTo} instead.      */
annotation|@
name|Deprecated
specifier|public
name|void
name|addBezier312
parameter_list|(
name|float
name|x1
parameter_list|,
name|float
name|y1
parameter_list|,
name|float
name|x2
parameter_list|,
name|float
name|y2
parameter_list|,
name|float
name|x3
parameter_list|,
name|float
name|y3
parameter_list|)
throws|throws
name|IOException
block|{
name|curveTo
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|x3
argument_list|,
name|y3
argument_list|)
expr_stmt|;
block|}
comment|/**      * Append a cubic Bézier curve to the current path. The curve extends from the current      * point to the point (x3 , y3 ), using the current point and (x2 , y2 ) as the Bézier control points/      *      * @param x2 x coordinate of the point 2      * @param y2 y coordinate of the point 2      * @param x3 x coordinate of the point 3      * @param y3 y coordinate of the point 3      * @throws IOException If there is an error while adding the .      * @deprecated Use {@link #curveTo2} instead.      */
annotation|@
name|Deprecated
specifier|public
name|void
name|addBezier32
parameter_list|(
name|float
name|x2
parameter_list|,
name|float
name|y2
parameter_list|,
name|float
name|x3
parameter_list|,
name|float
name|y3
parameter_list|)
throws|throws
name|IOException
block|{
name|curveTo2
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|,
name|x3
argument_list|,
name|y3
argument_list|)
expr_stmt|;
block|}
comment|/**      * Append a cubic Bézier curve to the current path. The curve extends from the current      * point to the point (x3 , y3 ), using (x1 , y1 ) and (x3 , y3 ) as the Bézier control points/      *      * @param x1 x coordinate of the point 1      * @param y1 y coordinate of the point 1      * @param x3 x coordinate of the point 3      * @param y3 y coordinate of the point 3      * @throws IOException If there is an error while adding the .      * @deprecated Use {@link #curveTo1} instead.      */
annotation|@
name|Deprecated
specifier|public
name|void
name|addBezier31
parameter_list|(
name|float
name|x1
parameter_list|,
name|float
name|y1
parameter_list|,
name|float
name|x3
parameter_list|,
name|float
name|y3
parameter_list|)
throws|throws
name|IOException
block|{
name|curveTo1
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|x3
argument_list|,
name|y3
argument_list|)
expr_stmt|;
block|}
comment|/**      * add a line to the current path.      *      * @param xStart The start x coordinate.      * @param yStart The start y coordinate.      * @param xEnd The end x coordinate.      * @param yEnd The end y coordinate.      * @throws IOException If there is an error while adding the line.      * @throws IllegalStateException If the method was called within a text block.      * @deprecated Use {@link #moveTo moveto(xStart,yStart)} followed by      * {@link #lineTo lineTo(xEnd,yEnd)}.      */
annotation|@
name|Deprecated
specifier|public
name|void
name|addLine
parameter_list|(
name|float
name|xStart
parameter_list|,
name|float
name|yStart
parameter_list|,
name|float
name|xEnd
parameter_list|,
name|float
name|yEnd
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isInTextMode
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error: addLine is not allowed within a text block."
argument_list|)
throw|;
block|}
name|moveTo
argument_list|(
name|xStart
argument_list|,
name|yStart
argument_list|)
expr_stmt|;
name|lineTo
argument_list|(
name|xEnd
argument_list|,
name|yEnd
argument_list|)
expr_stmt|;
block|}
comment|/**      * Draw a line on the page using the current stroking color and the current line width.      *      * @param xStart The start x coordinate.      * @param yStart The start y coordinate.      * @param xEnd The end x coordinate.      * @param yEnd The end y coordinate.      * @throws IOException If there is an error while drawing on the screen.      * @throws IllegalStateException If the method was called within a text block.      * @deprecated Use {@link #moveTo moveto(xStart,yStart)} followed by      * {@link #lineTo lineTo(xEnd,yEnd)} followed by {@link #stroke stroke()}.      */
annotation|@
name|Deprecated
specifier|public
name|void
name|drawLine
parameter_list|(
name|float
name|xStart
parameter_list|,
name|float
name|yStart
parameter_list|,
name|float
name|xEnd
parameter_list|,
name|float
name|yEnd
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isInTextMode
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error: drawLine is not allowed within a text block."
argument_list|)
throw|;
block|}
name|moveTo
argument_list|(
name|xStart
argument_list|,
name|yStart
argument_list|)
expr_stmt|;
name|lineTo
argument_list|(
name|xEnd
argument_list|,
name|yEnd
argument_list|)
expr_stmt|;
name|stroke
argument_list|()
expr_stmt|;
block|}
comment|/**      * Add a polygon to the current path.      * @param x x coordinate of each points      * @param y y coordinate of each points      * @throws IOException If there is an error while drawing on the screen.      * @throws IllegalStateException If the method was called within a text block.      * @throws IllegalArgumentException If the two arrays have different lengths.      * @deprecated Use {@link #moveTo} and {@link #lineTo} methods instead.      */
annotation|@
name|Deprecated
specifier|public
name|void
name|addPolygon
parameter_list|(
name|float
index|[]
name|x
parameter_list|,
name|float
index|[]
name|y
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isInTextMode
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error: addPolygon is not allowed within a text block."
argument_list|)
throw|;
block|}
if|if
condition|(
name|x
operator|.
name|length
operator|!=
name|y
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Error: some points are missing coordinate"
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|x
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|moveTo
argument_list|(
name|x
index|[
name|i
index|]
argument_list|,
name|y
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lineTo
argument_list|(
name|x
index|[
name|i
index|]
argument_list|,
name|y
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|closeSubPath
argument_list|()
expr_stmt|;
block|}
comment|/**      * Draw a polygon on the page using the current stroking color.      * @param x x coordinate of each points      * @param y y coordinate of each points      * @throws IOException If there is an error while drawing on the screen.      * @throws IllegalStateException If the method was called within a text block.      * @deprecated Use {@link #moveTo} and {@link #lineTo} methods instead.      */
annotation|@
name|Deprecated
specifier|public
name|void
name|drawPolygon
parameter_list|(
name|float
index|[]
name|x
parameter_list|,
name|float
index|[]
name|y
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isInTextMode
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error: drawPolygon is not allowed within a text block."
argument_list|)
throw|;
block|}
name|addPolygon
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|stroke
argument_list|()
expr_stmt|;
block|}
comment|/**      * Draw and fill a polygon on the page using the current stroking / non stroking colors.      * @param x x coordinate of each points      * @param y y coordinate of each points      * @throws IOException If there is an error while drawing on the screen.      * @throws IllegalStateException If the method was called within a text block.      * @deprecated Use {@link #moveTo} and {@link #lineTo} methods instead.      */
annotation|@
name|Deprecated
specifier|public
name|void
name|fillPolygon
parameter_list|(
name|float
index|[]
name|x
parameter_list|,
name|float
index|[]
name|y
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isInTextMode
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error: fillPolygon is not allowed within a text block."
argument_list|)
throw|;
block|}
name|addPolygon
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|fill
argument_list|()
expr_stmt|;
block|}
comment|/**      * Fill the path.      *       * @param windingRule the winding rule to be used for filling      * @throws IOException If the content stream could not be written      * @throws IllegalArgumentException If the parameter is not a valid winding rule.      * @deprecated Use {@link #fill()} or {@link #fillEvenOdd} instead.      */
annotation|@
name|Deprecated
specifier|public
name|void
name|fill
parameter_list|(
name|int
name|windingRule
parameter_list|)
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|windingRule
condition|)
block|{
case|case
name|PathIterator
operator|.
name|WIND_NON_ZERO
case|:
name|fill
argument_list|()
expr_stmt|;
break|break;
case|case
name|PathIterator
operator|.
name|WIND_EVEN_ODD
case|:
name|fillEvenOdd
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Error: unknown value for winding rule"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Closes the current subpath.      *       * @throws IOException If the content stream could not be written      * @deprecated Use {@link #closePath()} instead.      */
annotation|@
name|Deprecated
specifier|public
name|void
name|closeSubPath
parameter_list|()
throws|throws
name|IOException
block|{
name|closePath
argument_list|()
expr_stmt|;
block|}
comment|/**      * Clip path.      *       * @param windingRule the winding rule to be used for clipping      * @throws IOException If there is an error while clipping the path.      * @throws IllegalStateException If the method was called within a text block.      * @deprecated Use {@link #clip()} or {@link #clipEvenOdd} instead.      */
annotation|@
name|Deprecated
specifier|public
name|void
name|clipPath
parameter_list|(
name|int
name|windingRule
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isInTextMode
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error: clipPath is not allowed within a text block."
argument_list|)
throw|;
block|}
switch|switch
condition|(
name|windingRule
condition|)
block|{
case|case
name|PathIterator
operator|.
name|WIND_NON_ZERO
case|:
name|writeOperator
argument_list|(
literal|"W"
argument_list|)
expr_stmt|;
break|break;
case|case
name|PathIterator
operator|.
name|WIND_EVEN_ODD
case|:
name|writeOperator
argument_list|(
literal|"W*"
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Error: unknown value for winding rule"
argument_list|)
throw|;
block|}
name|writeOperator
argument_list|(
literal|"n"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Begin a marked content sequence.      *      * @param tag the tag      * @throws IOException if an I/O error occurs      * @deprecated Use {@link #beginMarkedContent} instead.      */
annotation|@
name|Deprecated
specifier|public
name|void
name|beginMarkedContentSequence
parameter_list|(
name|COSName
name|tag
parameter_list|)
throws|throws
name|IOException
block|{
name|beginMarkedContent
argument_list|(
name|tag
argument_list|)
expr_stmt|;
block|}
comment|/**      * Begin a marked content sequence with a reference to an entry in the page resources'      * Properties dictionary.      *      * @param tag the tag      * @param propsName the properties reference      * @throws IOException if an I/O error occurs      * @deprecated Use {@link #beginMarkedContent(COSName, PDPropertyList)} instead.      */
annotation|@
name|Deprecated
specifier|public
name|void
name|beginMarkedContentSequence
parameter_list|(
name|COSName
name|tag
parameter_list|,
name|COSName
name|propsName
parameter_list|)
throws|throws
name|IOException
block|{
name|writeOperand
argument_list|(
name|tag
argument_list|)
expr_stmt|;
name|writeOperand
argument_list|(
name|propsName
argument_list|)
expr_stmt|;
name|writeOperator
argument_list|(
literal|"BDC"
argument_list|)
expr_stmt|;
block|}
comment|/**      * End a marked content sequence.      *      * @throws IOException If the content stream could not be written      * @deprecated Use {@link #endMarkedContent} instead.      */
annotation|@
name|Deprecated
specifier|public
name|void
name|endMarkedContentSequence
parameter_list|()
throws|throws
name|IOException
block|{
name|endMarkedContent
argument_list|()
expr_stmt|;
block|}
comment|/**      * This will append raw commands to the content stream.      *      * @param commands The commands to append to the stream.      * @throws IOException If an error occurs while writing to the stream.      * @deprecated This method will be removed in a future release.      */
annotation|@
name|Deprecated
specifier|public
name|void
name|appendRawCommands
parameter_list|(
name|String
name|commands
parameter_list|)
throws|throws
name|IOException
block|{
name|write
argument_list|(
name|commands
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will append raw commands to the content stream.      *      * @param commands The commands to append to the stream.      * @throws IOException If an error occurs while writing to the stream.      * @deprecated This method will be removed in a future release.      */
annotation|@
name|Deprecated
specifier|public
name|void
name|appendRawCommands
parameter_list|(
name|byte
index|[]
name|commands
parameter_list|)
throws|throws
name|IOException
block|{
name|write
argument_list|(
name|commands
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will append raw commands to the content stream.      *      * @param data Append a raw byte to the stream.      * @throws IOException If an error occurs while writing to the stream.      * @deprecated This method will be removed in a future release.      */
annotation|@
name|Deprecated
specifier|public
name|void
name|appendRawCommands
parameter_list|(
name|int
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|writeOperand
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will append raw commands to the content stream.      *      * @param data Append a formatted double value to the stream.      * @throws IOException If an error occurs while writing to the stream.      * @deprecated This method will be removed in a future release.      */
annotation|@
name|Deprecated
specifier|public
name|void
name|appendRawCommands
parameter_list|(
name|double
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|writeOperand
argument_list|(
operator|(
name|float
operator|)
name|data
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will append raw commands to the content stream.      *      * @param data Append a formatted float value to the stream.      * @throws IOException If an error occurs while writing to the stream.      * @deprecated This method will be removed in a future release.      */
annotation|@
name|Deprecated
specifier|public
name|void
name|appendRawCommands
parameter_list|(
name|float
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|writeOperand
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will append a {@link COSName} to the content stream.      *      * @param name the name      * @throws IOException If an error occurs while writing to the stream.      * @deprecated This method will be removed in a future release.      */
annotation|@
name|Deprecated
specifier|public
name|void
name|appendCOSName
parameter_list|(
name|COSName
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|writeOperand
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set an extended graphics state.      *       * @param state The extended graphics state.      * @throws IOException If the content stream could not be written.      */
annotation|@
name|Override
specifier|public
name|void
name|setGraphicsStateParameters
parameter_list|(
name|PDExtendedGraphicsState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|writeOperand
argument_list|(
name|getResources
argument_list|()
operator|.
name|add
argument_list|(
name|state
argument_list|)
argument_list|)
expr_stmt|;
name|writeOperator
argument_list|(
literal|"gs"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the text rendering mode. This determines whether showing text shall cause glyph outlines      * to be stroked, filled, used as a clipping boundary, or some combination of the three.      *      * @param rm The text rendering mode.      * @throws IOException If the content stream could not be written.      */
specifier|public
name|void
name|setRenderingMode
parameter_list|(
name|RenderingMode
name|rm
parameter_list|)
throws|throws
name|IOException
block|{
name|writeOperand
argument_list|(
name|rm
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|writeOperator
argument_list|(
literal|"Tr"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

