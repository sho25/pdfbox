begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|fdf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPath
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathExpressionException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAnnotationLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_comment
comment|/**  * This represents a Polyline FDF annotation.  *  * @author Ben Litchfield  * @author Johanneke Lamberink  */
end_comment

begin_class
specifier|public
class|class
name|FDFAnnotationPolyline
extends|extends
name|FDFAnnotation
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FDFAnnotationPolyline
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * COS Model value for SubType entry.      */
specifier|public
specifier|static
specifier|final
name|String
name|SUBTYPE
init|=
literal|"Polyline"
decl_stmt|;
comment|/**      * Default constructor.      */
specifier|public
name|FDFAnnotationPolyline
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|annot
operator|.
name|setName
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|,
name|SUBTYPE
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor.      *      * @param a An existing FDF Annotation.      */
specifier|public
name|FDFAnnotationPolyline
parameter_list|(
name|COSDictionary
name|a
parameter_list|)
block|{
name|super
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor.      *      *  @param element An XFDF element.      *      *  @throws IOException If there is an error extracting information from the element.      */
specifier|public
name|FDFAnnotationPolyline
parameter_list|(
name|Element
name|element
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|annot
operator|.
name|setName
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|,
name|SUBTYPE
argument_list|)
expr_stmt|;
name|XPath
name|xpath
init|=
name|XPathFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newXPath
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|vertices
init|=
name|xpath
operator|.
name|evaluate
argument_list|(
literal|"vertices[1]"
argument_list|,
name|element
argument_list|)
decl_stmt|;
if|if
condition|(
name|vertices
operator|==
literal|null
operator|||
name|vertices
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error: missing element 'vertices'"
argument_list|)
throw|;
block|}
name|String
index|[]
name|verticesValues
init|=
name|vertices
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|float
index|[]
name|values
init|=
operator|new
name|float
index|[
name|verticesValues
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|verticesValues
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|verticesValues
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|setVertices
argument_list|(
name|values
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathExpressionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error while evaluating XPath expression for polyline vertices"
argument_list|)
expr_stmt|;
block|}
name|String
name|startStyle
init|=
name|element
operator|.
name|getAttribute
argument_list|(
literal|"head"
argument_list|)
decl_stmt|;
if|if
condition|(
name|startStyle
operator|!=
literal|null
operator|&&
operator|!
name|startStyle
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|setStartPointEndingStyle
argument_list|(
name|startStyle
argument_list|)
expr_stmt|;
block|}
name|String
name|endStyle
init|=
name|element
operator|.
name|getAttribute
argument_list|(
literal|"tail"
argument_list|)
decl_stmt|;
if|if
condition|(
name|endStyle
operator|!=
literal|null
operator|&&
operator|!
name|endStyle
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|setEndPointEndingStyle
argument_list|(
name|endStyle
argument_list|)
expr_stmt|;
block|}
name|String
name|color
init|=
name|element
operator|.
name|getAttribute
argument_list|(
literal|"interior-color"
argument_list|)
decl_stmt|;
if|if
condition|(
name|color
operator|!=
literal|null
operator|&&
name|color
operator|.
name|length
argument_list|()
operator|==
literal|7
operator|&&
name|color
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'#'
condition|)
block|{
name|int
name|colorValue
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|color
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
literal|7
argument_list|)
argument_list|,
literal|16
argument_list|)
decl_stmt|;
name|setInteriorColor
argument_list|(
operator|new
name|Color
argument_list|(
name|colorValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This will set the coordinates of the the vertices.      *      * @param vertices array of floats [x1, y1, x2, y2, ...] vertex coordinates in default user space.      */
specifier|public
name|void
name|setVertices
parameter_list|(
name|float
index|[]
name|vertices
parameter_list|)
block|{
name|COSArray
name|newVertices
init|=
operator|new
name|COSArray
argument_list|()
decl_stmt|;
name|newVertices
operator|.
name|setFloatArray
argument_list|(
name|vertices
argument_list|)
expr_stmt|;
name|annot
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|VERTICES
argument_list|,
name|newVertices
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the coordinates of the the vertices.      *      * @return array of floats [x1, y1, x2, y2, ...] vertex coordinates in default user space.      */
specifier|public
name|float
index|[]
name|getVertices
parameter_list|()
block|{
name|COSArray
name|array
init|=
operator|(
name|COSArray
operator|)
name|annot
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|VERTICES
argument_list|)
decl_stmt|;
if|if
condition|(
name|array
operator|!=
literal|null
condition|)
block|{
return|return
name|array
operator|.
name|toFloatArray
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
comment|// Should never happen as this is a required item
block|}
block|}
comment|/**      * This will set the line ending style for the start point, see the LE_ constants for the possible values.      *      * @param style The new style.      */
specifier|public
name|void
name|setStartPointEndingStyle
parameter_list|(
name|String
name|style
parameter_list|)
block|{
if|if
condition|(
name|style
operator|==
literal|null
condition|)
block|{
name|style
operator|=
name|PDAnnotationLine
operator|.
name|LE_NONE
expr_stmt|;
block|}
name|COSArray
name|array
init|=
operator|(
name|COSArray
operator|)
name|annot
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|LE
argument_list|)
decl_stmt|;
if|if
condition|(
name|array
operator|==
literal|null
condition|)
block|{
name|array
operator|=
operator|new
name|COSArray
argument_list|()
expr_stmt|;
name|array
operator|.
name|add
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|style
argument_list|)
argument_list|)
expr_stmt|;
name|array
operator|.
name|add
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|PDAnnotationLine
operator|.
name|LE_NONE
argument_list|)
argument_list|)
expr_stmt|;
name|annot
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|LE
argument_list|,
name|array
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|array
operator|.
name|setName
argument_list|(
literal|0
argument_list|,
name|style
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This will retrieve the line ending style for the start point, possible values shown in the LE_ constants section.      *      * @return The ending style for the start point.      */
specifier|public
name|String
name|getStartPointEndingStyle
parameter_list|()
block|{
name|String
name|retval
init|=
name|PDAnnotationLine
operator|.
name|LE_NONE
decl_stmt|;
name|COSArray
name|array
init|=
operator|(
name|COSArray
operator|)
name|annot
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|LE
argument_list|)
decl_stmt|;
if|if
condition|(
name|array
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
name|array
operator|.
name|getName
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * This will set the line ending style for the end point, see the LE_ constants for the possible values.      *      * @param style The new style.      */
specifier|public
name|void
name|setEndPointEndingStyle
parameter_list|(
name|String
name|style
parameter_list|)
block|{
if|if
condition|(
name|style
operator|==
literal|null
condition|)
block|{
name|style
operator|=
name|PDAnnotationLine
operator|.
name|LE_NONE
expr_stmt|;
block|}
name|COSArray
name|array
init|=
operator|(
name|COSArray
operator|)
name|annot
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|LE
argument_list|)
decl_stmt|;
if|if
condition|(
name|array
operator|==
literal|null
condition|)
block|{
name|array
operator|=
operator|new
name|COSArray
argument_list|()
expr_stmt|;
name|array
operator|.
name|add
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|PDAnnotationLine
operator|.
name|LE_NONE
argument_list|)
argument_list|)
expr_stmt|;
name|array
operator|.
name|add
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|style
argument_list|)
argument_list|)
expr_stmt|;
name|annot
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|LE
argument_list|,
name|array
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|array
operator|.
name|setName
argument_list|(
literal|1
argument_list|,
name|style
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This will retrieve the line ending style for the end point, possible values shown in the LE_ constants section.      *      * @return The ending style for the end point.      */
specifier|public
name|String
name|getEndPointEndingStyle
parameter_list|()
block|{
name|String
name|retval
init|=
name|PDAnnotationLine
operator|.
name|LE_NONE
decl_stmt|;
name|COSArray
name|array
init|=
operator|(
name|COSArray
operator|)
name|annot
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|LE
argument_list|)
decl_stmt|;
if|if
condition|(
name|array
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
name|array
operator|.
name|getName
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * This will set interior color of the line endings defined in the LE entry.      *      * @param color The interior color of the line endings.      */
specifier|public
name|void
name|setInteriorColor
parameter_list|(
name|Color
name|color
parameter_list|)
block|{
name|COSArray
name|array
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|color
operator|!=
literal|null
condition|)
block|{
name|float
index|[]
name|colors
init|=
name|color
operator|.
name|getRGBColorComponents
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|array
operator|=
operator|new
name|COSArray
argument_list|()
expr_stmt|;
name|array
operator|.
name|setFloatArray
argument_list|(
name|colors
argument_list|)
expr_stmt|;
block|}
name|annot
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|IC
argument_list|,
name|array
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will retrieve the interior color of the line endings defined in the LE entry.      *      * @return object representing the color.      */
specifier|public
name|Color
name|getInteriorColor
parameter_list|()
block|{
name|Color
name|retval
init|=
literal|null
decl_stmt|;
name|COSArray
name|array
init|=
operator|(
name|COSArray
operator|)
name|annot
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|IC
argument_list|)
decl_stmt|;
if|if
condition|(
name|array
operator|!=
literal|null
condition|)
block|{
name|float
index|[]
name|rgb
init|=
name|array
operator|.
name|toFloatArray
argument_list|()
decl_stmt|;
if|if
condition|(
name|rgb
operator|.
name|length
operator|>=
literal|3
condition|)
block|{
name|retval
operator|=
operator|new
name|Color
argument_list|(
name|rgb
index|[
literal|0
index|]
argument_list|,
name|rgb
index|[
literal|1
index|]
argument_list|,
name|rgb
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|retval
return|;
block|}
block|}
end_class

end_unit

