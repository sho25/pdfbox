begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Font
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|FontFormatException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Graphics
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Graphics2D
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|AffineTransform
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDStream
import|;
end_import

begin_comment
comment|/**  * This is implementation of the Type1 Font.  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.11 $  */
end_comment

begin_class
specifier|public
class|class
name|PDType1Font
extends|extends
name|PDSimpleFont
block|{
comment|/**      * Log instance.      */
specifier|private
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|PDType1Font
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Standard Base 14 Font.      */
specifier|public
specifier|static
specifier|final
name|PDType1Font
name|TIMES_ROMAN
init|=
operator|new
name|PDType1Font
argument_list|(
literal|"Times-Roman"
argument_list|)
decl_stmt|;
comment|/**      * Standard Base 14 Font.      */
specifier|public
specifier|static
specifier|final
name|PDType1Font
name|TIMES_BOLD
init|=
operator|new
name|PDType1Font
argument_list|(
literal|"Times-Bold"
argument_list|)
decl_stmt|;
comment|/**      * Standard Base 14 Font.      */
specifier|public
specifier|static
specifier|final
name|PDType1Font
name|TIMES_ITALIC
init|=
operator|new
name|PDType1Font
argument_list|(
literal|"Times-Italic"
argument_list|)
decl_stmt|;
comment|/**      * Standard Base 14 Font.      */
specifier|public
specifier|static
specifier|final
name|PDType1Font
name|TIMES_BOLD_ITALIC
init|=
operator|new
name|PDType1Font
argument_list|(
literal|"Times-BoldItalic"
argument_list|)
decl_stmt|;
comment|/**      * Standard Base 14 Font.      */
specifier|public
specifier|static
specifier|final
name|PDType1Font
name|HELVETICA
init|=
operator|new
name|PDType1Font
argument_list|(
literal|"Helvetica"
argument_list|)
decl_stmt|;
comment|/**      * Standard Base 14 Font.      */
specifier|public
specifier|static
specifier|final
name|PDType1Font
name|HELVETICA_BOLD
init|=
operator|new
name|PDType1Font
argument_list|(
literal|"Helvetica-Bold"
argument_list|)
decl_stmt|;
comment|/**      * Standard Base 14 Font.      */
specifier|public
specifier|static
specifier|final
name|PDType1Font
name|HELVETICA_OBLIQUE
init|=
operator|new
name|PDType1Font
argument_list|(
literal|"Helvetica-Oblique"
argument_list|)
decl_stmt|;
comment|/**      * Standard Base 14 Font.      */
specifier|public
specifier|static
specifier|final
name|PDType1Font
name|HELVETICA_BOLD_OBLIQUE
init|=
operator|new
name|PDType1Font
argument_list|(
literal|"Helvetica-BoldOblique"
argument_list|)
decl_stmt|;
comment|/**      * Standard Base 14 Font.      */
specifier|public
specifier|static
specifier|final
name|PDType1Font
name|COURIER
init|=
operator|new
name|PDType1Font
argument_list|(
literal|"Courier"
argument_list|)
decl_stmt|;
comment|/**      * Standard Base 14 Font.      */
specifier|public
specifier|static
specifier|final
name|PDType1Font
name|COURIER_BOLD
init|=
operator|new
name|PDType1Font
argument_list|(
literal|"Courier-Bold"
argument_list|)
decl_stmt|;
comment|/**      * Standard Base 14 Font.      */
specifier|public
specifier|static
specifier|final
name|PDType1Font
name|COURIER_OBLIQUE
init|=
operator|new
name|PDType1Font
argument_list|(
literal|"Courier-Oblique"
argument_list|)
decl_stmt|;
comment|/**      * Standard Base 14 Font.      */
specifier|public
specifier|static
specifier|final
name|PDType1Font
name|COURIER_BOLD_OBLIQUE
init|=
operator|new
name|PDType1Font
argument_list|(
literal|"Courier-BoldOblique"
argument_list|)
decl_stmt|;
comment|/**      * Standard Base 14 Font.      */
specifier|public
specifier|static
specifier|final
name|PDType1Font
name|SYMBOL
init|=
operator|new
name|PDType1Font
argument_list|(
literal|"Symbol"
argument_list|)
decl_stmt|;
comment|/**      * Standard Base 14 Font.      */
specifier|public
specifier|static
specifier|final
name|PDType1Font
name|ZAPF_DINGBATS
init|=
operator|new
name|PDType1Font
argument_list|(
literal|"ZapfDingbats"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|PDType1Font
argument_list|>
name|STANDARD_14
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|PDType1Font
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|STANDARD_14
operator|.
name|put
argument_list|(
name|TIMES_ROMAN
operator|.
name|getBaseFont
argument_list|()
argument_list|,
name|TIMES_ROMAN
argument_list|)
expr_stmt|;
name|STANDARD_14
operator|.
name|put
argument_list|(
name|TIMES_BOLD
operator|.
name|getBaseFont
argument_list|()
argument_list|,
name|TIMES_BOLD
argument_list|)
expr_stmt|;
name|STANDARD_14
operator|.
name|put
argument_list|(
name|TIMES_ITALIC
operator|.
name|getBaseFont
argument_list|()
argument_list|,
name|TIMES_ITALIC
argument_list|)
expr_stmt|;
name|STANDARD_14
operator|.
name|put
argument_list|(
name|TIMES_BOLD_ITALIC
operator|.
name|getBaseFont
argument_list|()
argument_list|,
name|TIMES_BOLD_ITALIC
argument_list|)
expr_stmt|;
name|STANDARD_14
operator|.
name|put
argument_list|(
name|HELVETICA
operator|.
name|getBaseFont
argument_list|()
argument_list|,
name|HELVETICA
argument_list|)
expr_stmt|;
name|STANDARD_14
operator|.
name|put
argument_list|(
name|HELVETICA_BOLD
operator|.
name|getBaseFont
argument_list|()
argument_list|,
name|HELVETICA_BOLD
argument_list|)
expr_stmt|;
name|STANDARD_14
operator|.
name|put
argument_list|(
name|HELVETICA_OBLIQUE
operator|.
name|getBaseFont
argument_list|()
argument_list|,
name|HELVETICA_OBLIQUE
argument_list|)
expr_stmt|;
name|STANDARD_14
operator|.
name|put
argument_list|(
name|HELVETICA_BOLD_OBLIQUE
operator|.
name|getBaseFont
argument_list|()
argument_list|,
name|HELVETICA_BOLD_OBLIQUE
argument_list|)
expr_stmt|;
name|STANDARD_14
operator|.
name|put
argument_list|(
name|COURIER
operator|.
name|getBaseFont
argument_list|()
argument_list|,
name|COURIER
argument_list|)
expr_stmt|;
name|STANDARD_14
operator|.
name|put
argument_list|(
name|COURIER_BOLD
operator|.
name|getBaseFont
argument_list|()
argument_list|,
name|COURIER_BOLD
argument_list|)
expr_stmt|;
name|STANDARD_14
operator|.
name|put
argument_list|(
name|COURIER_OBLIQUE
operator|.
name|getBaseFont
argument_list|()
argument_list|,
name|COURIER_OBLIQUE
argument_list|)
expr_stmt|;
name|STANDARD_14
operator|.
name|put
argument_list|(
name|COURIER_BOLD_OBLIQUE
operator|.
name|getBaseFont
argument_list|()
argument_list|,
name|COURIER_BOLD_OBLIQUE
argument_list|)
expr_stmt|;
name|STANDARD_14
operator|.
name|put
argument_list|(
name|SYMBOL
operator|.
name|getBaseFont
argument_list|()
argument_list|,
name|SYMBOL
argument_list|)
expr_stmt|;
name|STANDARD_14
operator|.
name|put
argument_list|(
name|ZAPF_DINGBATS
operator|.
name|getBaseFont
argument_list|()
argument_list|,
name|ZAPF_DINGBATS
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Font
name|awtFont
init|=
literal|null
decl_stmt|;
comment|/**      * Constructor.      */
specifier|public
name|PDType1Font
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|font
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|,
name|COSName
operator|.
name|TYPE1
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor.      *      * @param fontDictionary The font dictionary according to the PDF specification.      */
specifier|public
name|PDType1Font
parameter_list|(
name|COSDictionary
name|fontDictionary
parameter_list|)
block|{
name|super
argument_list|(
name|fontDictionary
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor.      *      * @param baseFont The base font for this font.      */
specifier|public
name|PDType1Font
parameter_list|(
name|String
name|baseFont
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|setBaseFont
argument_list|(
name|baseFont
argument_list|)
expr_stmt|;
block|}
comment|/**      * A convenience method to get one of the standard 14 font from name.      *      * @param name The name of the font to get.      *      * @return The font that matches the name or null if it does not exist.      */
specifier|public
specifier|static
name|PDType1Font
name|getStandardFont
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|(
name|PDType1Font
operator|)
name|STANDARD_14
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**      * This will get the names of the standard 14 fonts.      *      * @return An array of the names of the standard 14 fonts.      */
specifier|public
specifier|static
name|String
index|[]
name|getStandard14Names
parameter_list|()
block|{
return|return
operator|(
name|String
index|[]
operator|)
name|STANDARD_14
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|14
index|]
argument_list|)
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|Font
name|getawtFont
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|awtFont
operator|==
literal|null
condition|)
block|{
name|String
name|baseFont
init|=
name|getBaseFont
argument_list|()
decl_stmt|;
name|PDFontDescriptor
name|fd
init|=
name|getFontDescriptor
argument_list|()
decl_stmt|;
if|if
condition|(
name|fd
operator|!=
literal|null
operator|&&
name|fd
operator|instanceof
name|PDFontDescriptorDictionary
condition|)
block|{
name|PDFontDescriptorDictionary
name|fdDictionary
init|=
operator|(
name|PDFontDescriptorDictionary
operator|)
name|fd
decl_stmt|;
if|if
condition|(
name|fdDictionary
operator|.
name|getFontFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
comment|// create a type1 font with the embedded data
name|awtFont
operator|=
name|Font
operator|.
name|createFont
argument_list|(
name|Font
operator|.
name|TYPE1_FONT
argument_list|,
name|fdDictionary
operator|.
name|getFontFile
argument_list|()
operator|.
name|createInputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FontFormatException
name|e
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Can't read the embedded type1 font "
operator|+
name|fd
operator|.
name|getFontName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|fdDictionary
operator|.
name|getFontFile2
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
comment|// create a true type font with the embedded data
name|awtFont
operator|=
name|Font
operator|.
name|createFont
argument_list|(
name|Font
operator|.
name|TRUETYPE_FONT
argument_list|,
name|fdDictionary
operator|.
name|getFontFile2
argument_list|()
operator|.
name|createInputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FontFormatException
name|e
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Can't read the embedded true type font "
operator|+
name|fd
operator|.
name|getFontName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|fdDictionary
operator|.
name|getFontFile3
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|PDType1CFont
name|type1CFont
init|=
operator|new
name|PDType1CFont
argument_list|(
name|super
operator|.
name|font
argument_list|)
decl_stmt|;
name|awtFont
operator|=
name|type1CFont
operator|.
name|getawtFont
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|awtFont
operator|==
literal|null
condition|)
block|{
comment|// check if the font is part of our environment
name|awtFont
operator|=
name|FontManager
operator|.
name|getAwtFont
argument_list|(
name|fd
operator|.
name|getFontName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|awtFont
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Can't find the specified font "
operator|+
name|fd
operator|.
name|getFontName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// check if the font is part of our environment
name|awtFont
operator|=
name|FontManager
operator|.
name|getAwtFont
argument_list|(
name|baseFont
argument_list|)
expr_stmt|;
if|if
condition|(
name|awtFont
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Can't find the specified basefont "
operator|+
name|baseFont
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|awtFont
operator|==
literal|null
condition|)
block|{
comment|// we can't find anything, so we have to use the standard font
name|awtFont
operator|=
name|FontManager
operator|.
name|getStandardFont
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Using font "
operator|+
name|awtFont
operator|.
name|getName
argument_list|()
operator|+
literal|" instead"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|awtFont
return|;
block|}
block|}
end_class

end_unit

