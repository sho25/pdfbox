begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2018 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSFloat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|io
operator|.
name|ScratchFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|handlers
operator|.
name|PDAppearanceHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|handlers
operator|.
name|PDCaretAppearanceHandler
import|;
end_import

begin_comment
comment|/**  *  * @author Paul King  */
end_comment

begin_class
specifier|public
class|class
name|PDAnnotationCaret
extends|extends
name|PDAnnotationMarkup
block|{
comment|/**      * The type of annotation.      */
specifier|public
specifier|static
specifier|final
name|String
name|SUB_TYPE
init|=
literal|"Caret"
decl_stmt|;
specifier|private
name|PDAppearanceHandler
name|caretAppearanceHandler
decl_stmt|;
specifier|public
name|PDAnnotationCaret
parameter_list|()
block|{
name|getCOSObject
argument_list|()
operator|.
name|setName
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|,
name|SUB_TYPE
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a Caret annotation from a COSDictionary, expected to be a correct object definition.      *      * @param field the PDF object to represent as a field.      */
specifier|public
name|PDAnnotationCaret
parameter_list|(
name|COSDictionary
name|field
parameter_list|)
block|{
name|super
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will set the difference between the annotations "outer" rectangle defined by      * /Rect and boundaries of the underlying.      *       *<p>This will set an equal difference for all sides</p>      *       * @param difference from the annotations /Rect entry      */
specifier|public
name|void
name|setRectDifferences
parameter_list|(
name|float
name|difference
parameter_list|)
block|{
name|setRectDifferences
argument_list|(
name|difference
argument_list|,
name|difference
argument_list|,
name|difference
argument_list|,
name|difference
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will set the difference between the annotations "outer" rectangle defined by      * /Rect and the border.      *       * @param differenceLeft left difference from the annotations /Rect entry      * @param differenceTop top difference from the annotations /Rect entry      * @param differenceRight right difference from  the annotations /Rect entry      * @param differenceBottom bottom difference from the annotations /Rect entry      *       */
specifier|public
name|void
name|setRectDifferences
parameter_list|(
name|float
name|differenceLeft
parameter_list|,
name|float
name|differenceTop
parameter_list|,
name|float
name|differenceRight
parameter_list|,
name|float
name|differenceBottom
parameter_list|)
block|{
name|COSArray
name|margins
init|=
operator|new
name|COSArray
argument_list|()
decl_stmt|;
name|margins
operator|.
name|add
argument_list|(
operator|new
name|COSFloat
argument_list|(
name|differenceLeft
argument_list|)
argument_list|)
expr_stmt|;
name|margins
operator|.
name|add
argument_list|(
operator|new
name|COSFloat
argument_list|(
name|differenceTop
argument_list|)
argument_list|)
expr_stmt|;
name|margins
operator|.
name|add
argument_list|(
operator|new
name|COSFloat
argument_list|(
name|differenceRight
argument_list|)
argument_list|)
expr_stmt|;
name|margins
operator|.
name|add
argument_list|(
operator|new
name|COSFloat
argument_list|(
name|differenceBottom
argument_list|)
argument_list|)
expr_stmt|;
name|getCOSObject
argument_list|()
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|RD
argument_list|,
name|margins
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the margin between the annotations "outer" rectangle defined by      * /Rect and the boundaries of the underlying caret.      *       * @return the differences. If the entry hasn't been set am empty array is returned.      */
specifier|public
name|float
index|[]
name|getRectDifferences
parameter_list|()
block|{
name|COSBase
name|margin
init|=
name|getCOSObject
argument_list|()
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|RD
argument_list|)
decl_stmt|;
if|if
condition|(
name|margin
operator|instanceof
name|COSArray
condition|)
block|{
return|return
operator|(
operator|(
name|COSArray
operator|)
name|margin
operator|)
operator|.
name|toFloatArray
argument_list|()
return|;
block|}
return|return
operator|new
name|float
index|[]
block|{}
return|;
block|}
comment|/**      * Set a custom appearance handler for generating the annotations appearance streams.      *       * @param caretAppearanceHandler      */
specifier|public
name|void
name|setCustomCaretAppearanceHandler
parameter_list|(
name|PDAppearanceHandler
name|caretAppearanceHandler
parameter_list|)
block|{
name|this
operator|.
name|caretAppearanceHandler
operator|=
name|caretAppearanceHandler
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|constructAppearances
parameter_list|(
name|ScratchFile
name|scratchFile
parameter_list|)
block|{
if|if
condition|(
name|caretAppearanceHandler
operator|==
literal|null
condition|)
block|{
name|PDCaretAppearanceHandler
name|appearanceHandler
init|=
operator|new
name|PDCaretAppearanceHandler
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|appearanceHandler
operator|.
name|generateAppearanceStreams
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|caretAppearanceHandler
operator|.
name|generateAppearanceStreams
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

