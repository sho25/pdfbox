begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|shading
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|function
operator|.
name|PDFunction
import|;
end_import

begin_comment
comment|/**  * This represents resources for a shading type 4 (Free-Form Gouraud-Shaded Triangle Meshes).  *  * @version $Revision: 1.0 $  */
end_comment

begin_class
specifier|public
class|class
name|PDShadingType4
extends|extends
name|PDShadingResources
block|{
specifier|private
name|PDFunction
name|function
init|=
literal|null
decl_stmt|;
comment|/**      * An array of 2 × n numbers specifying the linear mapping of sample values       * into the range appropriate for the function’s output values.       * Default value: same as the value of Range      */
specifier|private
name|COSArray
name|decode
init|=
literal|null
decl_stmt|;
comment|/**      * Constructor using the given shading dictionary.      *      * @param shadingDictionary The dictionary for this shading.      */
specifier|public
name|PDShadingType4
parameter_list|(
name|COSDictionary
name|shadingDictionary
parameter_list|)
block|{
name|super
argument_list|(
name|shadingDictionary
argument_list|)
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|int
name|getShadingType
parameter_list|()
block|{
return|return
name|PDShadingResources
operator|.
name|SHADING_TYPE4
return|;
block|}
comment|/**      * This will set the function for the color conversion.      *      * @param newFunction The new function.      */
specifier|public
name|void
name|setFunction
parameter_list|(
name|PDFunction
name|newFunction
parameter_list|)
block|{
name|function
operator|=
name|newFunction
expr_stmt|;
name|getCOSDictionary
argument_list|()
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|FUNCTION
argument_list|,
name|newFunction
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will return the function used to convert the color values.      *      * @return The function      * @exception IOException If we are unable to create the PDFunction object.       */
specifier|public
name|PDFunction
name|getFunction
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|function
operator|==
literal|null
condition|)
block|{
name|function
operator|=
name|PDFunction
operator|.
name|create
argument_list|(
name|getCOSDictionary
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|FUNCTION
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|function
return|;
block|}
comment|/**      * The bits per component of this shading.        * This will return -1 if one has not been set.      *      * @return The number of bits per component.      */
specifier|public
name|int
name|getBitsPerComponent
parameter_list|()
block|{
return|return
name|getCOSDictionary
argument_list|()
operator|.
name|getInt
argument_list|(
name|COSName
operator|.
name|BITS_PER_COMPONENT
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/**      * Set the number of bits per component.      *      * @param bpc The number of bits per component.      */
specifier|public
name|void
name|setBitsPerComponent
parameter_list|(
name|int
name|bpc
parameter_list|)
block|{
name|getCOSDictionary
argument_list|()
operator|.
name|setInt
argument_list|(
name|COSName
operator|.
name|BITS_PER_COMPONENT
argument_list|,
name|bpc
argument_list|)
expr_stmt|;
block|}
comment|/**      * The bits per coordinate of this shading.        * This will return -1 if one has not been set.      *      * @return The number of bits per coordinate.      */
specifier|public
name|int
name|getBitsPerCoordinate
parameter_list|()
block|{
return|return
name|getCOSDictionary
argument_list|()
operator|.
name|getInt
argument_list|(
name|COSName
operator|.
name|BITS_PER_COORDINATE
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/**      * Set the number of bits per coordinate.      *      * @param bpc The number of bits per coordinate.      */
specifier|public
name|void
name|setBitsPerCoordinate
parameter_list|(
name|int
name|bpc
parameter_list|)
block|{
name|getCOSDictionary
argument_list|()
operator|.
name|setInt
argument_list|(
name|COSName
operator|.
name|BITS_PER_COORDINATE
argument_list|,
name|bpc
argument_list|)
expr_stmt|;
block|}
comment|/**      * The bits per flag of this shading.        * This will return -1 if one has not been set.      *      * @return The number of bits per flag.      */
specifier|public
name|int
name|getBitsPerFlag
parameter_list|()
block|{
return|return
name|getCOSDictionary
argument_list|()
operator|.
name|getInt
argument_list|(
name|COSName
operator|.
name|BITS_PER_FLAG
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/**      * Set the number of bits per flag.      *      * @param bpf The number of bits per flag.      */
specifier|public
name|void
name|setBitsPerFlag
parameter_list|(
name|int
name|bpf
parameter_list|)
block|{
name|getCOSDictionary
argument_list|()
operator|.
name|setInt
argument_list|(
name|COSName
operator|.
name|BITS_PER_FLAG
argument_list|,
name|bpf
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns all decode values as COSArray.      *       * @return the decode array.       */
specifier|private
name|COSArray
name|getDecodeValues
parameter_list|()
block|{
if|if
condition|(
name|decode
operator|==
literal|null
condition|)
block|{
name|decode
operator|=
operator|(
name|COSArray
operator|)
name|getCOSDictionary
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|DECODE
argument_list|)
expr_stmt|;
block|}
return|return
name|decode
return|;
block|}
comment|/**      * This will set the decode values.      *      * @param decodeValues The new decode values.      */
specifier|public
name|void
name|setDecodeValues
parameter_list|(
name|COSArray
name|decodeValues
parameter_list|)
block|{
name|decode
operator|=
name|decodeValues
expr_stmt|;
name|getCOSDictionary
argument_list|()
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|DECODE
argument_list|,
name|decodeValues
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the decode for the input parameter.      *      * @param paramNum The function parameter number.      *      * @return The decode parameter range or null if none is set.      */
specifier|public
name|PDRange
name|getDecodeForParameter
parameter_list|(
name|int
name|paramNum
parameter_list|)
block|{
name|PDRange
name|retval
init|=
literal|null
decl_stmt|;
name|COSArray
name|decodeValues
init|=
name|getDecodeValues
argument_list|()
decl_stmt|;
if|if
condition|(
name|decodeValues
operator|!=
literal|null
operator|&&
name|decodeValues
operator|.
name|size
argument_list|()
operator|>=
name|paramNum
operator|*
literal|2
operator|+
literal|1
condition|)
block|{
name|retval
operator|=
operator|new
name|PDRange
argument_list|(
name|decodeValues
argument_list|,
name|paramNum
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
block|}
end_class

end_unit

