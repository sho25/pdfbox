begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|form
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|COSArrayList
import|;
end_import

begin_comment
comment|/**  * A set of utility methods to help with common AcroForm form and field related functions.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|FieldUtils
block|{
comment|/**      * An implementation of a basic key value pair.      *       * This implementation is used to help sorting the content of      * field option entries with an array of two-element arrays as      * used by choice fields.      *       */
specifier|static
class|class
name|KeyValue
block|{
specifier|private
specifier|final
name|String
name|key
decl_stmt|;
specifier|private
specifier|final
name|String
name|value
decl_stmt|;
specifier|public
name|KeyValue
parameter_list|(
specifier|final
name|String
name|theKey
parameter_list|,
specifier|final
name|String
name|theValue
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|theKey
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|theValue
expr_stmt|;
block|}
specifier|public
name|String
name|getKey
parameter_list|()
block|{
return|return
name|this
operator|.
name|key
return|;
block|}
specifier|public
name|String
name|getValue
parameter_list|()
block|{
return|return
name|this
operator|.
name|value
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"("
operator|+
name|this
operator|.
name|key
operator|+
literal|", "
operator|+
name|this
operator|.
name|value
operator|+
literal|")"
return|;
block|}
block|}
comment|/**      * Comparator to sort KeyValue by key.      */
specifier|static
class|class
name|KeyValueKeyComparator
implements|implements
name|Serializable
implements|,
name|Comparator
argument_list|<
name|KeyValue
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|6715364290007167694L
decl_stmt|;
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|KeyValue
name|o1
parameter_list|,
name|KeyValue
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|key
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|key
argument_list|)
return|;
block|}
block|}
comment|/**      * Comparator to sort KeyValue by value.      */
specifier|static
class|class
name|KeyValueValueComparator
implements|implements
name|Serializable
implements|,
name|Comparator
argument_list|<
name|KeyValue
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|3984095679894798265L
decl_stmt|;
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|KeyValue
name|o1
parameter_list|,
name|KeyValue
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|value
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|value
argument_list|)
return|;
block|}
block|}
comment|/**      * Constructor.      */
specifier|private
name|FieldUtils
parameter_list|()
block|{     }
comment|/**      * Return two related lists as a single list with key value pairs.      *       * @param key the key elements      * @param value the value elements      * @return a sorted list of KeyValue elements.      */
specifier|static
name|List
argument_list|<
name|KeyValue
argument_list|>
name|toKeyValueList
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|key
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|value
parameter_list|)
block|{
name|List
argument_list|<
name|KeyValue
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|key
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
operator|new
name|FieldUtils
operator|.
name|KeyValue
argument_list|(
name|key
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|value
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
comment|/**      * Sort two related lists simultaneously by the elements in the key parameter.      *       * @param pairs a list of KeyValue elements      */
specifier|static
name|void
name|sortByValue
parameter_list|(
name|List
argument_list|<
name|KeyValue
argument_list|>
name|pairs
parameter_list|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|pairs
argument_list|,
operator|new
name|FieldUtils
operator|.
name|KeyValueValueComparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sort two related lists simultaneously by the elements in the value parameter.      *       * @param pairs a list of KeyValue elements      */
specifier|static
name|void
name|sortByKey
parameter_list|(
name|List
argument_list|<
name|KeyValue
argument_list|>
name|pairs
parameter_list|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|pairs
argument_list|,
operator|new
name|FieldUtils
operator|.
name|KeyValueKeyComparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Return either one of a list which can have two-element arrays entries.      *<p>      * Some entries in a dictionary can either be an array of elements      * or an array of two-element arrays. This method will either return      * the elements in the array or in case of two-element arrays, the element      * designated by the pair index      *</p>      *<p>      * An {@link IllegalArgumentException} will be thrown if the items contain      * two-element arrays and the index is not 0 or 1.      *</p>      *       * @param items the array of elements or two-element arrays      * @param pairIdx the index into the two-element array      * @return a List of single elements      */
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getPairableItems
parameter_list|(
name|COSBase
name|items
parameter_list|,
name|int
name|pairIdx
parameter_list|)
block|{
if|if
condition|(
name|pairIdx
argument_list|<
literal|0
operator|||
name|pairIdx
argument_list|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Only 0 and 1 are allowed as an index into two-element arrays"
argument_list|)
throw|;
block|}
if|if
condition|(
name|items
operator|instanceof
name|COSString
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|array
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|array
operator|.
name|add
argument_list|(
operator|(
operator|(
name|COSString
operator|)
name|items
operator|)
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|array
return|;
block|}
elseif|else
if|if
condition|(
name|items
operator|instanceof
name|COSArray
condition|)
block|{
comment|// test if there is a single text or a two-element array
name|COSBase
name|entry
init|=
operator|(
operator|(
name|COSArray
operator|)
name|items
operator|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|instanceof
name|COSString
condition|)
block|{
return|return
name|COSArrayList
operator|.
name|convertCOSStringCOSArrayToList
argument_list|(
operator|(
name|COSArray
operator|)
name|items
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|getItemsFromPair
argument_list|(
name|items
argument_list|,
name|pairIdx
argument_list|)
return|;
block|}
block|}
return|return
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
return|;
block|}
comment|/**      * Return either one of a list of two-element arrays entries.      *      * @param items the array of elements or two-element arrays      * @param pairIdx the index into the two-element array      * @return a List of single elements      */
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getItemsFromPair
parameter_list|(
name|COSBase
name|items
parameter_list|,
name|int
name|pairIdx
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|exportValues
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|numItems
init|=
operator|(
operator|(
name|COSArray
operator|)
name|items
operator|)
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numItems
condition|;
name|i
operator|++
control|)
block|{
name|COSArray
name|pair
init|=
call|(
name|COSArray
call|)
argument_list|(
operator|(
name|COSArray
operator|)
name|items
argument_list|)
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|COSString
name|displayValue
init|=
operator|(
name|COSString
operator|)
name|pair
operator|.
name|get
argument_list|(
name|pairIdx
argument_list|)
decl_stmt|;
name|exportValues
operator|.
name|add
argument_list|(
name|displayValue
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|exportValues
return|;
block|}
block|}
end_class

end_unit

