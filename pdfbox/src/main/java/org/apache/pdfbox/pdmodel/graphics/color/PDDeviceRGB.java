begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|color
operator|.
name|ColorSpace
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|BufferedImage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|WritableRaster
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_comment
comment|/**  * Colours in the DeviceRGB colour space are specified according to the additive  * RGB (red-green-blue) colour model.  *  * @author Ben Litchfield  * @author John Hewson  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|PDDeviceRGB
extends|extends
name|PDDeviceColorSpace
block|{
comment|/**  This is the single instance of this class. */
specifier|public
specifier|static
specifier|final
name|PDDeviceRGB
name|INSTANCE
init|=
operator|new
name|PDDeviceRGB
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|PDColor
name|initialColor
init|=
operator|new
name|PDColor
argument_list|(
operator|new
name|float
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
argument_list|,
name|this
argument_list|)
decl_stmt|;
specifier|private
specifier|volatile
name|ColorSpace
name|awtColorSpace
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|PDDeviceRGB
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|PDDeviceRGB
parameter_list|()
block|{     }
comment|/**      * Lazy setting of the AWT color space due to JDK race condition.      */
specifier|private
name|void
name|init
parameter_list|()
block|{
comment|// no need to synchronize this check as it is atomic
if|if
condition|(
name|awtColorSpace
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
name|suggestKCMS
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
comment|// we might have been waiting for another thread, so check again
if|if
condition|(
name|awtColorSpace
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
name|awtColorSpace
operator|=
name|ColorSpace
operator|.
name|getInstance
argument_list|(
name|ColorSpace
operator|.
name|CS_sRGB
argument_list|)
expr_stmt|;
comment|// there is a JVM bug which results in a CMMException which appears to be a race
comment|// condition caused by lazy initialization of the color transform, so we perform
comment|// an initial color conversion while we're still synchronized, see PDFBOX-2184
name|awtColorSpace
operator|.
name|toRGB
argument_list|(
operator|new
name|float
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|COSName
operator|.
name|DEVICERGB
operator|.
name|getName
argument_list|()
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|int
name|getNumberOfComponents
parameter_list|()
block|{
return|return
literal|3
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
index|[]
name|getDefaultDecode
parameter_list|(
name|int
name|bitsPerComponent
parameter_list|)
block|{
return|return
operator|new
name|float
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|PDColor
name|getInitialColor
parameter_list|()
block|{
return|return
name|initialColor
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
index|[]
name|toRGB
parameter_list|(
name|float
index|[]
name|value
parameter_list|)
block|{
return|return
name|value
return|;
block|}
annotation|@
name|Override
specifier|public
name|BufferedImage
name|toRGBImage
parameter_list|(
name|WritableRaster
name|raster
parameter_list|)
throws|throws
name|IOException
block|{
name|init
argument_list|()
expr_stmt|;
comment|//
comment|// WARNING: this method is performance sensitive, modify with care!
comment|//
comment|// Please read PDFBOX-3854 and PDFBOX-2092 and look at the related commits first.
comment|// The current code returns TYPE_INT_RGB images which prevents slowness due to threads
comment|// blocking each other when TYPE_CUSTOM images are used.
name|BufferedImage
name|image
init|=
operator|new
name|BufferedImage
argument_list|(
name|raster
operator|.
name|getWidth
argument_list|()
argument_list|,
name|raster
operator|.
name|getHeight
argument_list|()
argument_list|,
name|BufferedImage
operator|.
name|TYPE_INT_RGB
argument_list|)
decl_stmt|;
name|image
operator|.
name|setData
argument_list|(
name|raster
argument_list|)
expr_stmt|;
return|return
name|image
return|;
block|}
specifier|private
specifier|static
name|void
name|suggestKCMS
parameter_list|()
block|{
name|String
name|cmmProperty
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"sun.java2d.cmm"
argument_list|)
decl_stmt|;
if|if
condition|(
name|isMinJdk8
argument_list|()
operator|&&
operator|!
literal|"sun.java2d.cmm.kcms.KcmsServiceProvider"
operator|.
name|equals
argument_list|(
name|cmmProperty
argument_list|)
condition|)
block|{
try|try
block|{
comment|// Make sure that class exists
name|Class
operator|.
name|forName
argument_list|(
literal|"sun.java2d.cmm.kcms.KcmsServiceProvider"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"To get higher rendering speed on java 8 oder 9,"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"  use the option -Dsun.java2d.cmm=sun.java2d.cmm.kcms.KcmsServiceProvider"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"  or call System.setProperty(\"sun.java2d.cmm\", \"sun.java2d.cmm.kcms.KcmsServiceProvider\")"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"KCMS doesn't exist anymore. SO SAD!"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|boolean
name|isMinJdk8
parameter_list|()
block|{
comment|// strategy from lucene-solr/lucene/core/src/java/org/apache/lucene/util/Constants.java
name|String
name|version
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.specification.version"
argument_list|)
decl_stmt|;
specifier|final
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|version
argument_list|,
literal|"."
argument_list|)
decl_stmt|;
try|try
block|{
name|int
name|major
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|st
operator|.
name|nextToken
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|minor
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|st
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|minor
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|st
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|major
operator|>
literal|1
operator|||
operator|(
name|major
operator|==
literal|1
operator|&&
name|minor
operator|>=
literal|8
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
comment|// maybe some new numbering scheme in the 22nd century
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

