begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Point
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|BufferedImage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|DataBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|Raster
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|WritableRaster
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSNumber
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDStream
import|;
end_import

begin_comment
comment|/**  * An Indexed colour space specifies that an area is to be painted using a colour table  * of arbitrary colours from another color space.  *   * @author John Hewson  * @author Ben Litchfield  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|PDIndexed
extends|extends
name|PDSpecialColorSpace
block|{
specifier|private
specifier|final
name|PDColor
name|initialColor
init|=
operator|new
name|PDColor
argument_list|(
operator|new
name|float
index|[]
block|{
literal|0
block|}
argument_list|,
name|this
argument_list|)
decl_stmt|;
specifier|private
name|PDColorSpace
name|baseColorSpace
init|=
literal|null
decl_stmt|;
comment|// cached lookup data
specifier|private
name|byte
index|[]
name|lookupData
decl_stmt|;
specifier|private
name|float
index|[]
index|[]
name|colorTable
decl_stmt|;
specifier|private
name|int
name|actualMaxIndex
decl_stmt|;
specifier|private
name|int
index|[]
index|[]
name|rgbColorTable
decl_stmt|;
comment|/**      * Creates a new Indexed color space.      * Default DeviceRGB, hival 255.      */
specifier|public
name|PDIndexed
parameter_list|()
block|{
name|array
operator|=
operator|new
name|COSArray
argument_list|()
expr_stmt|;
name|array
operator|.
name|add
argument_list|(
name|COSName
operator|.
name|INDEXED
argument_list|)
expr_stmt|;
name|array
operator|.
name|add
argument_list|(
name|COSName
operator|.
name|DEVICERGB
argument_list|)
expr_stmt|;
name|array
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
literal|255
argument_list|)
argument_list|)
expr_stmt|;
name|array
operator|.
name|add
argument_list|(
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSNull
operator|.
name|NULL
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new indexed color space from the given PDF array.      * @param indexedArray the array containing the indexed parameters      * @throws java.io.IOException      */
specifier|public
name|PDIndexed
parameter_list|(
name|COSArray
name|indexedArray
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|indexedArray
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new indexed color space from the given PDF array.      * @param indexedArray the array containing the indexed parameters      * @param resources the resources, can be null. Allows to use its cache for the colorspace.      * @throws java.io.IOException      */
specifier|public
name|PDIndexed
parameter_list|(
name|COSArray
name|indexedArray
parameter_list|,
name|PDResources
name|resources
parameter_list|)
throws|throws
name|IOException
block|{
name|array
operator|=
name|indexedArray
expr_stmt|;
comment|// don't call getObject(1), we want to pass a reference if possible
comment|// to profit of caching (PDFBOX-4149)
name|baseColorSpace
operator|=
name|PDColorSpace
operator|.
name|create
argument_list|(
name|array
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|resources
argument_list|)
expr_stmt|;
name|readColorTable
argument_list|()
expr_stmt|;
name|initRgbColorTable
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|COSName
operator|.
name|INDEXED
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getNumberOfComponents
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
index|[]
name|getDefaultDecode
parameter_list|(
name|int
name|bitsPerComponent
parameter_list|)
block|{
return|return
operator|new
name|float
index|[]
block|{
literal|0
block|,
operator|(
name|float
operator|)
name|Math
operator|.
name|pow
argument_list|(
literal|2
argument_list|,
name|bitsPerComponent
argument_list|)
operator|-
literal|1
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|PDColor
name|getInitialColor
parameter_list|()
block|{
return|return
name|initialColor
return|;
block|}
comment|//
comment|// WARNING: this method is performance sensitive, modify with care!
comment|//
specifier|private
name|void
name|initRgbColorTable
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|numBaseComponents
init|=
name|baseColorSpace
operator|.
name|getNumberOfComponents
argument_list|()
decl_stmt|;
comment|// convert the color table into a 1-row BufferedImage in the base color space,
comment|// using a writable raster for high performance
name|WritableRaster
name|baseRaster
init|=
name|Raster
operator|.
name|createBandedRaster
argument_list|(
name|DataBuffer
operator|.
name|TYPE_BYTE
argument_list|,
name|actualMaxIndex
operator|+
literal|1
argument_list|,
literal|1
argument_list|,
name|numBaseComponents
argument_list|,
operator|new
name|Point
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|int
index|[]
name|base
init|=
operator|new
name|int
index|[
name|numBaseComponents
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|n
init|=
name|actualMaxIndex
init|;
name|i
operator|<=
name|n
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|numBaseComponents
condition|;
name|c
operator|++
control|)
block|{
name|base
index|[
name|c
index|]
operator|=
call|(
name|int
call|)
argument_list|(
name|colorTable
index|[
name|i
index|]
index|[
name|c
index|]
operator|*
literal|255f
argument_list|)
expr_stmt|;
block|}
name|baseRaster
operator|.
name|setPixel
argument_list|(
name|i
argument_list|,
literal|0
argument_list|,
name|base
argument_list|)
expr_stmt|;
block|}
comment|// convert the base image to RGB
name|BufferedImage
name|rgbImage
init|=
name|baseColorSpace
operator|.
name|toRGBImage
argument_list|(
name|baseRaster
argument_list|)
decl_stmt|;
name|WritableRaster
name|rgbRaster
init|=
name|rgbImage
operator|.
name|getRaster
argument_list|()
decl_stmt|;
comment|// build an RGB lookup table from the raster
name|rgbColorTable
operator|=
operator|new
name|int
index|[
name|actualMaxIndex
operator|+
literal|1
index|]
index|[
literal|3
index|]
expr_stmt|;
name|int
index|[]
name|nil
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|n
init|=
name|actualMaxIndex
init|;
name|i
operator|<=
name|n
condition|;
name|i
operator|++
control|)
block|{
name|rgbColorTable
index|[
name|i
index|]
operator|=
name|rgbRaster
operator|.
name|getPixel
argument_list|(
name|i
argument_list|,
literal|0
argument_list|,
name|nil
argument_list|)
expr_stmt|;
block|}
block|}
comment|//
comment|// WARNING: this method is performance sensitive, modify with care!
comment|//
annotation|@
name|Override
specifier|public
name|float
index|[]
name|toRGB
parameter_list|(
name|float
index|[]
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|.
name|length
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Indexed color spaces must have one color value"
argument_list|)
throw|;
block|}
comment|// scale and clamp input value
name|int
name|index
init|=
name|Math
operator|.
name|round
argument_list|(
name|value
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|index
operator|=
name|Math
operator|.
name|max
argument_list|(
name|index
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|index
operator|=
name|Math
operator|.
name|min
argument_list|(
name|index
argument_list|,
name|actualMaxIndex
argument_list|)
expr_stmt|;
comment|// lookup rgb
name|int
index|[]
name|rgb
init|=
name|rgbColorTable
index|[
name|index
index|]
decl_stmt|;
return|return
operator|new
name|float
index|[]
block|{
name|rgb
index|[
literal|0
index|]
operator|/
literal|255f
block|,
name|rgb
index|[
literal|1
index|]
operator|/
literal|255f
block|,
name|rgb
index|[
literal|2
index|]
operator|/
literal|255f
block|}
return|;
block|}
comment|//
comment|// WARNING: this method is performance sensitive, modify with care!
comment|//
annotation|@
name|Override
specifier|public
name|BufferedImage
name|toRGBImage
parameter_list|(
name|WritableRaster
name|raster
parameter_list|)
throws|throws
name|IOException
block|{
comment|// use lookup table
name|int
name|width
init|=
name|raster
operator|.
name|getWidth
argument_list|()
decl_stmt|;
name|int
name|height
init|=
name|raster
operator|.
name|getHeight
argument_list|()
decl_stmt|;
name|BufferedImage
name|rgbImage
init|=
operator|new
name|BufferedImage
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|BufferedImage
operator|.
name|TYPE_INT_RGB
argument_list|)
decl_stmt|;
name|WritableRaster
name|rgbRaster
init|=
name|rgbImage
operator|.
name|getRaster
argument_list|()
decl_stmt|;
name|int
index|[]
name|src
init|=
operator|new
name|int
index|[
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|raster
operator|.
name|getPixel
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|src
argument_list|)
expr_stmt|;
comment|// lookup
name|int
name|index
init|=
name|Math
operator|.
name|min
argument_list|(
name|src
index|[
literal|0
index|]
argument_list|,
name|actualMaxIndex
argument_list|)
decl_stmt|;
name|rgbRaster
operator|.
name|setPixel
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|rgbColorTable
index|[
name|index
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rgbImage
return|;
block|}
comment|/**      * Returns the base color space.      * @return the base color space.      */
specifier|public
name|PDColorSpace
name|getBaseColorSpace
parameter_list|()
block|{
return|return
name|baseColorSpace
return|;
block|}
comment|// returns "hival" array element
specifier|private
name|int
name|getHival
parameter_list|()
block|{
return|return
operator|(
operator|(
name|COSNumber
operator|)
name|array
operator|.
name|getObject
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
return|;
block|}
comment|// reads the lookup table data from the array
specifier|private
name|byte
index|[]
name|getLookupData
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|lookupData
operator|==
literal|null
condition|)
block|{
name|COSBase
name|lookupTable
init|=
name|array
operator|.
name|getObject
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|lookupTable
operator|instanceof
name|COSString
condition|)
block|{
name|lookupData
operator|=
operator|(
operator|(
name|COSString
operator|)
name|lookupTable
operator|)
operator|.
name|getBytes
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lookupTable
operator|instanceof
name|COSStream
condition|)
block|{
name|lookupData
operator|=
operator|new
name|PDStream
argument_list|(
operator|(
name|COSStream
operator|)
name|lookupTable
argument_list|)
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lookupTable
operator|==
literal|null
condition|)
block|{
name|lookupData
operator|=
operator|new
name|byte
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error: Unknown type for lookup table "
operator|+
name|lookupTable
argument_list|)
throw|;
block|}
block|}
return|return
name|lookupData
return|;
block|}
comment|//
comment|// WARNING: this method is performance sensitive, modify with care!
comment|//
specifier|private
name|void
name|readColorTable
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|lookupData
init|=
name|getLookupData
argument_list|()
decl_stmt|;
name|int
name|maxIndex
init|=
name|Math
operator|.
name|min
argument_list|(
name|getHival
argument_list|()
argument_list|,
literal|255
argument_list|)
decl_stmt|;
name|int
name|numComponents
init|=
name|baseColorSpace
operator|.
name|getNumberOfComponents
argument_list|()
decl_stmt|;
comment|// some tables are too short
if|if
condition|(
name|lookupData
operator|.
name|length
operator|/
name|numComponents
operator|<
name|maxIndex
operator|+
literal|1
condition|)
block|{
name|maxIndex
operator|=
name|lookupData
operator|.
name|length
operator|/
name|numComponents
operator|-
literal|1
expr_stmt|;
block|}
name|actualMaxIndex
operator|=
name|maxIndex
expr_stmt|;
comment|// TODO "actual" is ugly, tidy this up
name|colorTable
operator|=
operator|new
name|float
index|[
name|maxIndex
operator|+
literal|1
index|]
index|[
name|numComponents
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|offset
init|=
literal|0
init|;
name|i
operator|<=
name|maxIndex
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|numComponents
condition|;
name|c
operator|++
control|)
block|{
name|colorTable
index|[
name|i
index|]
index|[
name|c
index|]
operator|=
operator|(
name|lookupData
index|[
name|offset
index|]
operator|&
literal|0xff
operator|)
operator|/
literal|255f
expr_stmt|;
name|offset
operator|++
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Sets the base color space.      * @param base the base color space      */
specifier|public
name|void
name|setBaseColorSpace
parameter_list|(
name|PDColorSpace
name|base
parameter_list|)
block|{
name|array
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|base
operator|.
name|getCOSObject
argument_list|()
argument_list|)
expr_stmt|;
name|baseColorSpace
operator|=
name|base
expr_stmt|;
block|}
comment|/**      * Sets the highest value that is allowed. This cannot be higher than 255.      * @param high the highest value for the lookup table      */
specifier|public
name|void
name|setHighValue
parameter_list|(
name|int
name|high
parameter_list|)
block|{
name|array
operator|.
name|set
argument_list|(
literal|2
argument_list|,
name|high
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Indexed{base:"
operator|+
name|baseColorSpace
operator|+
literal|" "
operator|+
literal|"hival:"
operator|+
name|getHival
argument_list|()
operator|+
literal|" "
operator|+
literal|"lookup:("
operator|+
name|colorTable
operator|.
name|length
operator|+
literal|" entries)}"
return|;
block|}
block|}
end_class

end_unit

