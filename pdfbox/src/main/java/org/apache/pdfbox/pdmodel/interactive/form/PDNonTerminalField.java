begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|form
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|COSArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|COSObjectable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|fdf
operator|.
name|FDFField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAnnotationWidget
import|;
end_import

begin_comment
comment|/**  * A non terminal field in an interactive form.  *   * A non terminal field is a node in the fields tree node whose descendants  * are fields.   *   * The attributes such as FT (field type) or V (field value) do not logically  * belong to the non terminal field but are inheritable attributes  * for descendant terminal fields.  */
end_comment

begin_class
specifier|public
class|class
name|PDNonTerminalField
extends|extends
name|PDField
block|{
comment|/**      * Constructor.      *       * @param acroForm The form that this field is part of.      */
specifier|public
name|PDNonTerminalField
parameter_list|(
name|PDAcroForm
name|acroForm
parameter_list|)
block|{
name|super
argument_list|(
name|acroForm
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor.      *       * @param acroForm The form that this field is part of.      * @param field the PDF object to represent as a field.      * @param parent the parent node of the node to be created      */
name|PDNonTerminalField
parameter_list|(
name|PDAcroForm
name|acroForm
parameter_list|,
name|COSDictionary
name|field
parameter_list|,
name|PDNonTerminalField
name|parent
parameter_list|)
block|{
name|super
argument_list|(
name|acroForm
argument_list|,
name|field
argument_list|,
name|parent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getFieldFlags
parameter_list|()
block|{
name|int
name|retval
init|=
literal|0
decl_stmt|;
name|COSInteger
name|ff
init|=
operator|(
name|COSInteger
operator|)
name|getCOSObject
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|FF
argument_list|)
decl_stmt|;
if|if
condition|(
name|ff
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
name|ff
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
comment|// There is no need to look up the parent hierarchy within a non terminal field
return|return
name|retval
return|;
block|}
annotation|@
name|Override
name|void
name|importFDF
parameter_list|(
name|FDFField
name|fdfField
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|importFDF
argument_list|(
name|fdfField
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FDFField
argument_list|>
name|fdfKids
init|=
name|fdfField
operator|.
name|getKids
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PDField
argument_list|>
name|children
init|=
name|getChildren
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|fdfKids
operator|!=
literal|null
operator|&&
name|i
operator|<
name|fdfKids
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|COSObjectable
name|pdKid
range|:
name|children
control|)
block|{
if|if
condition|(
name|pdKid
operator|instanceof
name|PDField
condition|)
block|{
name|PDField
name|pdChild
init|=
operator|(
name|PDField
operator|)
name|pdKid
decl_stmt|;
name|FDFField
name|fdfChild
init|=
name|fdfKids
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|fdfName
init|=
name|fdfChild
operator|.
name|getPartialFieldName
argument_list|()
decl_stmt|;
if|if
condition|(
name|fdfName
operator|!=
literal|null
operator|&&
name|fdfName
operator|.
name|equals
argument_list|(
name|pdChild
operator|.
name|getPartialName
argument_list|()
argument_list|)
condition|)
block|{
name|pdChild
operator|.
name|importFDF
argument_list|(
name|fdfChild
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
annotation|@
name|Override
name|FDFField
name|exportFDF
parameter_list|()
throws|throws
name|IOException
block|{
name|FDFField
name|fdfField
init|=
operator|new
name|FDFField
argument_list|()
decl_stmt|;
name|fdfField
operator|.
name|setPartialFieldName
argument_list|(
name|getPartialName
argument_list|()
argument_list|)
expr_stmt|;
name|fdfField
operator|.
name|setValue
argument_list|(
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PDField
argument_list|>
name|children
init|=
name|getChildren
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FDFField
argument_list|>
name|fdfChildren
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|PDField
name|child
range|:
name|children
control|)
block|{
name|fdfChildren
operator|.
name|add
argument_list|(
name|child
operator|.
name|exportFDF
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|fdfField
operator|.
name|setKids
argument_list|(
name|fdfChildren
argument_list|)
expr_stmt|;
return|return
name|fdfField
return|;
block|}
comment|/**      * Returns this field's children. These may be either terminal or non-terminal fields.      *      * @return the list of child fields. Be aware that this list is<i>not</i> backed by the      * children of the field, so adding or deleting has no effect on the PDF document until you call      * {@link #setChildren(java.util.List) setChildren()} with the modified list.      */
specifier|public
name|List
argument_list|<
name|PDField
argument_list|>
name|getChildren
parameter_list|()
block|{
comment|//TODO: why not return a COSArrayList like in PDPage.getAnnotations() ?
name|List
argument_list|<
name|PDField
argument_list|>
name|children
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|COSArray
name|kids
init|=
operator|(
name|COSArray
operator|)
name|getCOSObject
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|KIDS
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|kids
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|COSBase
name|kid
init|=
name|kids
operator|.
name|getObject
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|kid
operator|instanceof
name|COSDictionary
condition|)
block|{
name|PDField
name|field
init|=
name|PDField
operator|.
name|fromDictionary
argument_list|(
name|getAcroForm
argument_list|()
argument_list|,
operator|(
name|COSDictionary
operator|)
name|kid
argument_list|,
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
name|children
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|children
return|;
block|}
comment|/**      * Sets the child fields.      *      * @param children The list of child fields.      */
specifier|public
name|void
name|setChildren
parameter_list|(
name|List
argument_list|<
name|PDField
argument_list|>
name|children
parameter_list|)
block|{
name|COSArray
name|kidsArray
init|=
name|COSArrayList
operator|.
name|converterToCOSArray
argument_list|(
name|children
argument_list|)
decl_stmt|;
name|getCOSObject
argument_list|()
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|KIDS
argument_list|,
name|kidsArray
argument_list|)
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      *      *<p><b>Note:</b> while non-terminal fields<b>do</b> inherit field values, this method returns      * the local value, without inheritance.      */
annotation|@
name|Override
specifier|public
name|String
name|getFieldType
parameter_list|()
block|{
return|return
name|getCOSObject
argument_list|()
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|FT
argument_list|)
return|;
block|}
comment|/**      * Returns the COSBase value of the "V" entry.      *      *<p><b>Note:</b> while non-terminal fields<b>do</b> inherit field values, this method returns      * the local value, without inheritance.      */
specifier|public
name|COSBase
name|getValue
parameter_list|()
block|{
return|return
name|getCOSObject
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|V
argument_list|)
return|;
block|}
comment|/**      * {@inheritDoc}      *      *<p><b>Note:</b> while non-terminal fields<b>do</b> inherit field values, this method returns      * the local value, without inheritance.      */
annotation|@
name|Override
specifier|public
name|String
name|getValueAsString
parameter_list|()
block|{
name|COSBase
name|fieldValue
init|=
name|getCOSObject
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|V
argument_list|)
decl_stmt|;
return|return
name|fieldValue
operator|!=
literal|null
condition|?
name|fieldValue
operator|.
name|toString
argument_list|()
else|:
literal|""
return|;
block|}
comment|/**      * Sets the value of this field. This may be of any kind which is valid for this field's      * children.      *      *<p><b>Note:</b> while non-terminal fields<b>do</b> inherit field values, this method returns      * the local value, without inheritance.      * @param object      * @throws java.io.IOException      */
specifier|public
name|void
name|setValue
parameter_list|(
name|COSBase
name|object
parameter_list|)
throws|throws
name|IOException
block|{
name|getCOSObject
argument_list|()
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|V
argument_list|,
name|object
argument_list|)
expr_stmt|;
comment|// todo: propagate change event to children?
comment|// todo: construct appearances of children?
block|}
comment|/**      * Sets the plain text value of this field.      *       * @param value Plain text      * @throws IOException if the value could not be set      */
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|getCOSObject
argument_list|()
operator|.
name|setString
argument_list|(
name|COSName
operator|.
name|V
argument_list|,
name|value
argument_list|)
expr_stmt|;
comment|// todo: propagate change event to children?
comment|// todo: construct appearances of children?
block|}
comment|/**      * Returns the default value of this field. This may be of any kind which is valid for this field's      * children.      *      *<p><b>Note:</b> while non-terminal fields<b>do</b> inherit field values, this method returns      * the local value, without inheritance.      */
specifier|public
name|COSBase
name|getDefaultValue
parameter_list|()
block|{
return|return
name|getCOSObject
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|DV
argument_list|)
return|;
block|}
comment|/**      * Sets the default of this field. This may be of any kind which is valid for this field's      * children.      *      *<p><b>Note:</b> while non-terminal fields<b>do</b> inherit field values, this method returns      * the local value, without inheritance.      * @param value      */
specifier|public
name|void
name|setDefaultValue
parameter_list|(
name|COSBase
name|value
parameter_list|)
block|{
name|getCOSObject
argument_list|()
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|V
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|PDAnnotationWidget
argument_list|>
name|getWidgets
parameter_list|()
block|{
comment|//TODO shouldn't we return a non modifiable list?
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
end_class

end_unit

