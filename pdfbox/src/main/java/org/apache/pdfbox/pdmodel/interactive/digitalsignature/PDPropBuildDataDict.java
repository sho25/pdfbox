begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|digitalsignature
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|COSObjectable
import|;
end_import

begin_comment
comment|/**  *<p>This represents the general property dictionaries from the build property dictionary.</p>  *  * @see PDPropBuild  * @author Thomas Chojecki  * @version $Revision: 1.1 $  */
end_comment

begin_class
specifier|public
class|class
name|PDPropBuildDataDict
implements|implements
name|COSObjectable
block|{
specifier|private
name|COSDictionary
name|dictionary
decl_stmt|;
comment|/**      * Default constructor.      */
specifier|public
name|PDPropBuildDataDict
parameter_list|()
block|{
name|dictionary
operator|=
operator|new
name|COSDictionary
argument_list|()
expr_stmt|;
name|dictionary
operator|.
name|setDirect
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// the specification claim to use direct objects
block|}
comment|/**      * Constructor.      *      * @param dict The signature dictionary.      */
specifier|public
name|PDPropBuildDataDict
parameter_list|(
name|COSDictionary
name|dict
parameter_list|)
block|{
name|dictionary
operator|=
name|dict
expr_stmt|;
name|dictionary
operator|.
name|setDirect
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// the specification claim to use direct objects
block|}
comment|/**      * Convert this standard java object to a COS object.      *      * @return The cos object that matches this Java object.      */
specifier|public
name|COSBase
name|getCOSObject
parameter_list|()
block|{
return|return
name|getDictionary
argument_list|()
return|;
block|}
comment|/**      * Convert this standard java object to a COS dictionary.      *      * @return The COS dictionary that matches this Java object.      */
specifier|public
name|COSDictionary
name|getDictionary
parameter_list|()
block|{
return|return
name|dictionary
return|;
block|}
comment|/**      * The name of the software module that was used to create the signature.      * @return the name of the software module      */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|dictionary
operator|.
name|getString
argument_list|(
name|COSName
operator|.
name|NAME
argument_list|)
return|;
block|}
comment|/**      * The name of the software module that was used to create the signature.      *      * @param name is the name of the software module      */
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|dictionary
operator|.
name|setString
argument_list|(
name|COSName
operator|.
name|NAME
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**      * The build date of the software module.      *      * @return the build date of the software module      */
specifier|public
name|String
name|getDate
parameter_list|()
block|{
return|return
name|dictionary
operator|.
name|getString
argument_list|(
name|COSName
operator|.
name|DATE
argument_list|)
return|;
block|}
comment|/**      * The build date of the software module. This string is normally produced by the      * compiler under C++.      *      * @param date is the build date of the software module      */
specifier|public
name|void
name|setDate
parameter_list|(
name|String
name|date
parameter_list|)
block|{
name|dictionary
operator|.
name|setString
argument_list|(
name|COSName
operator|.
name|DATE
argument_list|,
name|date
argument_list|)
expr_stmt|;
block|}
comment|/**      * The software module revision number, corresponding to the Date attribute.      *      * @return the revision of the software module      */
specifier|public
name|long
name|getRevision
parameter_list|()
block|{
return|return
name|dictionary
operator|.
name|getLong
argument_list|(
name|COSName
operator|.
name|R
argument_list|)
return|;
block|}
comment|/**      * The software module revision number, corresponding to the Date attribute.      *      * @param revision is the software module revision number      */
specifier|public
name|void
name|setRevision
parameter_list|(
name|long
name|revision
parameter_list|)
block|{
name|dictionary
operator|.
name|setLong
argument_list|(
name|COSName
operator|.
name|R
argument_list|,
name|revision
argument_list|)
expr_stmt|;
block|}
comment|/**      * The software module revision number, used to determinate the minimum version      * of software that is required in order to process this signature.      *      * @return the revision of the software module      */
specifier|public
name|long
name|getMinimumRevision
parameter_list|()
block|{
return|return
name|dictionary
operator|.
name|getLong
argument_list|(
name|COSName
operator|.
name|V
argument_list|)
return|;
block|}
comment|/**      * The software module revision number, used to determinate the minimum version      * of software that is required in order to process this signature.      *      * @param revision is the software module revision number      */
specifier|public
name|void
name|setMinimumRevision
parameter_list|(
name|long
name|revision
parameter_list|)
block|{
name|dictionary
operator|.
name|setLong
argument_list|(
name|COSName
operator|.
name|V
argument_list|,
name|revision
argument_list|)
expr_stmt|;
block|}
comment|/**      * A flag that can be used by the signature handler or software module to      * indicate that this signature was created with unrelease software.      *      * @return true if the software module or signature handler was a pre release.      */
specifier|public
name|boolean
name|getPreRelease
parameter_list|()
block|{
return|return
name|dictionary
operator|.
name|getBoolean
argument_list|(
name|COSName
operator|.
name|PRE_RELEASE
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * A flag that can be used by the signature handler or software module to      * indicate that this signature was created with unrelease software.      *      * @param preRelease is true if the signature was created with a unrelease      *                   software, otherwise false.      */
specifier|public
name|void
name|setPreRelease
parameter_list|(
name|boolean
name|preRelease
parameter_list|)
block|{
name|dictionary
operator|.
name|setBoolean
argument_list|(
name|COSName
operator|.
name|PRE_RELEASE
argument_list|,
name|preRelease
argument_list|)
expr_stmt|;
block|}
comment|/**      * Indicates the operation system. The format isn't specified yet.      *      * @return a the operation system id or name.      */
specifier|public
name|String
name|getOS
parameter_list|()
block|{
return|return
name|dictionary
operator|.
name|getString
argument_list|(
name|COSName
operator|.
name|OS
argument_list|)
return|;
block|}
comment|/**      * Indicates the operation system. The format isn't specified yet.      *      * @param os is a string with the system id or name.      */
specifier|public
name|void
name|setOS
parameter_list|(
name|String
name|os
parameter_list|)
block|{
name|dictionary
operator|.
name|setString
argument_list|(
name|COSName
operator|.
name|OS
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
comment|/**      * If there is a LegalPDF dictionary in the catalog      * of the PDF file and the NonEmbeddedFonts attribute in this dictionary      * has a non zero value, and the viewing application has a preference      * set to suppress the display of this warning then the value of this      * attribute will be set to true.      *      * @return true if NonEFontNoWarn is set to true      */
specifier|public
name|boolean
name|getNonEFontNoWarn
parameter_list|()
block|{
return|return
name|dictionary
operator|.
name|getBoolean
argument_list|(
name|COSName
operator|.
name|NON_EFONT_NO_WARN
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/*      * setNonEFontNoWarn missing. Maybe not needed or should be self      * implemented.      *      * Documentation says:      * (Optional; PDF 1.5) If there is a LegalPDF dictionary in the catalog      * of the PDF file and the NonEmbeddedFonts attribute in this dictionary      * has a non zero value, and the viewing application has a preference      * set to suppress the display of this warning then the value of this      * attribute will be set to true.      */
comment|/**      * If true, the application was in trusted mode when signing took place.      *      * @return true if the application was in trusted mode while signing.      *              default: false      */
specifier|public
name|boolean
name|getTrustedMode
parameter_list|()
block|{
return|return
name|dictionary
operator|.
name|getBoolean
argument_list|(
name|COSName
operator|.
name|TRUSTED_MODE
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * If true, the application was in trusted mode when signing took place.      *      * @param trustedMode true if the application is in trusted mode.      */
specifier|public
name|void
name|setTrustedMode
parameter_list|(
name|boolean
name|trustedMode
parameter_list|)
block|{
name|dictionary
operator|.
name|setBoolean
argument_list|(
name|COSName
operator|.
name|TRUSTED_MODE
argument_list|,
name|trustedMode
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

