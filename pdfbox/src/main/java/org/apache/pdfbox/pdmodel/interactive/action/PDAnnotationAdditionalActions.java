begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|action
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|COSObjectable
import|;
end_import

begin_comment
comment|/**  * This class represents an annotation's dictionary of actions  * that occur due to events.  *  * @author Ben Litchfield  * @author Panagiotis Toumasis  */
end_comment

begin_class
specifier|public
class|class
name|PDAnnotationAdditionalActions
implements|implements
name|COSObjectable
block|{
specifier|private
name|COSDictionary
name|actions
decl_stmt|;
comment|/**      * Default constructor.      */
specifier|public
name|PDAnnotationAdditionalActions
parameter_list|()
block|{
name|actions
operator|=
operator|new
name|COSDictionary
argument_list|()
expr_stmt|;
block|}
comment|/**      * Constructor.      *      * @param a The action dictionary.      */
specifier|public
name|PDAnnotationAdditionalActions
parameter_list|(
name|COSDictionary
name|a
parameter_list|)
block|{
name|actions
operator|=
name|a
expr_stmt|;
block|}
comment|/**      * Convert this standard java object to a COS object.      *      * @return The cos object that matches this Java object.      */
annotation|@
name|Override
specifier|public
name|COSBase
name|getCOSObject
parameter_list|()
block|{
return|return
name|actions
return|;
block|}
comment|/**      * Convert this standard java object to a COS object.      *      * @return The cos object that matches this Java object.      */
specifier|public
name|COSDictionary
name|getCOSDictionary
parameter_list|()
block|{
return|return
name|actions
return|;
block|}
comment|/**      * This will get an action to be performed when the cursor      * enters the annotation's active area.      *      * @return The E entry of annotation's additional actions dictionary.      */
specifier|public
name|PDAction
name|getE
parameter_list|()
block|{
name|COSDictionary
name|e
init|=
operator|(
name|COSDictionary
operator|)
name|actions
operator|.
name|getDictionaryObject
argument_list|(
literal|"E"
argument_list|)
decl_stmt|;
name|PDAction
name|retval
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
name|PDActionFactory
operator|.
name|createAction
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * This will set an action to be performed when the cursor      * enters the annotation's active area.      *      * @param e The action to be performed.      */
specifier|public
name|void
name|setE
parameter_list|(
name|PDAction
name|e
parameter_list|)
block|{
name|actions
operator|.
name|setItem
argument_list|(
literal|"E"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get an action to be performed when the cursor      * exits the annotation's active area.      *      * @return The X entry of annotation's additional actions dictionary.      */
specifier|public
name|PDAction
name|getX
parameter_list|()
block|{
name|COSDictionary
name|x
init|=
operator|(
name|COSDictionary
operator|)
name|actions
operator|.
name|getDictionaryObject
argument_list|(
literal|"X"
argument_list|)
decl_stmt|;
name|PDAction
name|retval
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|x
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
name|PDActionFactory
operator|.
name|createAction
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * This will set an action to be performed when the cursor      * exits the annotation's active area.      *      * @param x The action to be performed.      */
specifier|public
name|void
name|setX
parameter_list|(
name|PDAction
name|x
parameter_list|)
block|{
name|actions
operator|.
name|setItem
argument_list|(
literal|"X"
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get an action to be performed when the mouse button      * is pressed inside the annotation's active area.      * The name D stands for "down".      *      * @return The d entry of annotation's additional actions dictionary.      */
specifier|public
name|PDAction
name|getD
parameter_list|()
block|{
name|COSDictionary
name|d
init|=
operator|(
name|COSDictionary
operator|)
name|actions
operator|.
name|getDictionaryObject
argument_list|(
literal|"D"
argument_list|)
decl_stmt|;
name|PDAction
name|retval
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|d
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
name|PDActionFactory
operator|.
name|createAction
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * This will set an action to be performed when the mouse button      * is pressed inside the annotation's active area.      * The name D stands for "down".      *      * @param d The action to be performed.      */
specifier|public
name|void
name|setD
parameter_list|(
name|PDAction
name|d
parameter_list|)
block|{
name|actions
operator|.
name|setItem
argument_list|(
literal|"D"
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get an action to be performed when the mouse button      * is released inside the annotation's active area.      * The name U stands for "up".      *      * @return The U entry of annotation's additional actions dictionary.      */
specifier|public
name|PDAction
name|getU
parameter_list|()
block|{
name|COSDictionary
name|u
init|=
operator|(
name|COSDictionary
operator|)
name|actions
operator|.
name|getDictionaryObject
argument_list|(
literal|"U"
argument_list|)
decl_stmt|;
name|PDAction
name|retval
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|u
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
name|PDActionFactory
operator|.
name|createAction
argument_list|(
name|u
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * This will set an action to be performed when the mouse button      * is released inside the annotation's active area.      * The name U stands for "up".      *      * @param u The action to be performed.      */
specifier|public
name|void
name|setU
parameter_list|(
name|PDAction
name|u
parameter_list|)
block|{
name|actions
operator|.
name|setItem
argument_list|(
literal|"U"
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get an action to be performed when the annotation      * receives the input focus.      *      * @return The Fo entry of annotation's additional actions dictionary.      */
specifier|public
name|PDAction
name|getFo
parameter_list|()
block|{
name|COSDictionary
name|fo
init|=
operator|(
name|COSDictionary
operator|)
name|actions
operator|.
name|getDictionaryObject
argument_list|(
literal|"Fo"
argument_list|)
decl_stmt|;
name|PDAction
name|retval
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|fo
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
name|PDActionFactory
operator|.
name|createAction
argument_list|(
name|fo
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * This will set an action to be performed when the annotation      * receives the input focus.      *      * @param fo The action to be performed.      */
specifier|public
name|void
name|setFo
parameter_list|(
name|PDAction
name|fo
parameter_list|)
block|{
name|actions
operator|.
name|setItem
argument_list|(
literal|"Fo"
argument_list|,
name|fo
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get an action to be performed when the annotation      * loses the input focus.      * The name Bl stands for "blurred".      *      * @return The Bl entry of annotation's additional actions dictionary.      */
specifier|public
name|PDAction
name|getBl
parameter_list|()
block|{
name|COSDictionary
name|bl
init|=
operator|(
name|COSDictionary
operator|)
name|actions
operator|.
name|getDictionaryObject
argument_list|(
literal|"Bl"
argument_list|)
decl_stmt|;
name|PDAction
name|retval
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|bl
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
name|PDActionFactory
operator|.
name|createAction
argument_list|(
name|bl
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * This will set an action to be performed when the annotation      * loses the input focus.      * The name Bl stands for "blurred".      *      * @param bl The action to be performed.      */
specifier|public
name|void
name|setBl
parameter_list|(
name|PDAction
name|bl
parameter_list|)
block|{
name|actions
operator|.
name|setItem
argument_list|(
literal|"Bl"
argument_list|,
name|bl
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get an action to be performed when the page containing      * the annotation is opened. The action is executed after the O action      * in the page's additional actions dictionary and the OpenAction entry      * in the document catalog, if such actions are present.      *      * @return The PO entry of annotation's additional actions dictionary.      */
specifier|public
name|PDAction
name|getPO
parameter_list|()
block|{
name|COSDictionary
name|po
init|=
operator|(
name|COSDictionary
operator|)
name|actions
operator|.
name|getDictionaryObject
argument_list|(
literal|"PO"
argument_list|)
decl_stmt|;
name|PDAction
name|retval
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|po
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
name|PDActionFactory
operator|.
name|createAction
argument_list|(
name|po
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * This will set an action to be performed when the page containing      * the annotation is opened. The action is executed after the O action      * in the page's additional actions dictionary and the OpenAction entry      * in the document catalog, if such actions are present.      *      * @param po The action to be performed.      */
specifier|public
name|void
name|setPO
parameter_list|(
name|PDAction
name|po
parameter_list|)
block|{
name|actions
operator|.
name|setItem
argument_list|(
literal|"PO"
argument_list|,
name|po
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get an action to be performed when the page containing      * the annotation is closed. The action is executed before the C action      * in the page's additional actions dictionary, if present.      *      * @return The PC entry of annotation's additional actions dictionary.      */
specifier|public
name|PDAction
name|getPC
parameter_list|()
block|{
name|COSDictionary
name|pc
init|=
operator|(
name|COSDictionary
operator|)
name|actions
operator|.
name|getDictionaryObject
argument_list|(
literal|"PC"
argument_list|)
decl_stmt|;
name|PDAction
name|retval
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|pc
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
name|PDActionFactory
operator|.
name|createAction
argument_list|(
name|pc
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * This will set an action to be performed when the page containing      * the annotation is closed. The action is executed before the C action      * in the page's additional actions dictionary, if present.      *      * @param pc The action to be performed.      */
specifier|public
name|void
name|setPC
parameter_list|(
name|PDAction
name|pc
parameter_list|)
block|{
name|actions
operator|.
name|setItem
argument_list|(
literal|"PC"
argument_list|,
name|pc
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get an action to be performed when the page containing      * the annotation becomes visible in the viewer application's user interface.      *      * @return The PV entry of annotation's additional actions dictionary.      */
specifier|public
name|PDAction
name|getPV
parameter_list|()
block|{
name|COSDictionary
name|pv
init|=
operator|(
name|COSDictionary
operator|)
name|actions
operator|.
name|getDictionaryObject
argument_list|(
literal|"PV"
argument_list|)
decl_stmt|;
name|PDAction
name|retval
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|pv
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
name|PDActionFactory
operator|.
name|createAction
argument_list|(
name|pv
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * This will set an action to be performed when the page containing      * the annotation becomes visible in the viewer application's user interface.      *      * @param pv The action to be performed.      */
specifier|public
name|void
name|setPV
parameter_list|(
name|PDAction
name|pv
parameter_list|)
block|{
name|actions
operator|.
name|setItem
argument_list|(
literal|"PV"
argument_list|,
name|pv
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get an action to be performed when the page containing the annotation      * is no longer visible in the viewer application's user interface.      *      * @return The PI entry of annotation's additional actions dictionary.      */
specifier|public
name|PDAction
name|getPI
parameter_list|()
block|{
name|COSDictionary
name|pi
init|=
operator|(
name|COSDictionary
operator|)
name|actions
operator|.
name|getDictionaryObject
argument_list|(
literal|"PI"
argument_list|)
decl_stmt|;
name|PDAction
name|retval
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|pi
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
name|PDActionFactory
operator|.
name|createAction
argument_list|(
name|pi
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * This will set an action to be performed when the page containing the annotation      * is no longer visible in the viewer application's user interface.      *      * @param pi The action to be performed.      */
specifier|public
name|void
name|setPI
parameter_list|(
name|PDAction
name|pi
parameter_list|)
block|{
name|actions
operator|.
name|setItem
argument_list|(
literal|"PI"
argument_list|,
name|pi
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

