begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|image
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|BufferedImage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|IIOImage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|ImageIO
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|ImageTypeSpecifier
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|ImageWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|metadata
operator|.
name|IIOMetadata
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|plugins
operator|.
name|jpeg
operator|.
name|JPEGImageWriteParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|stream
operator|.
name|ImageOutputStream
import|;
end_import

begin_comment
comment|/**  * Factory for creating a PDImageXObject containing a JPEG compressed image.  * @author John Hewson  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|JPEGFactory
extends|extends
name|ImageFactory
block|{
specifier|private
name|JPEGFactory
parameter_list|()
block|{     }
comment|/**      * Creates a new JPEG Image XObject from an input stream containing JPEG data.      * The input stream data will be preserved and embedded in the PDF file without modification.      * @param document the document where the image will be created      * @param stream a stream of JPEG data      * @return a new Image XObject      * @throws IOException if the input stream cannot be read      */
specifier|public
specifier|static
name|PDImageXObject
name|createFromStream
parameter_list|(
name|PDDocument
name|document
parameter_list|,
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
comment|// create Image XObject from stream
name|PDImageXObject
name|pdImage
init|=
operator|new
name|PDImageXObject
argument_list|(
operator|new
name|PDStream
argument_list|(
name|document
argument_list|,
name|stream
argument_list|,
literal|true
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// add DCT filter
name|pdImage
operator|.
name|getCOSStream
argument_list|()
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|FILTER
argument_list|,
name|COSName
operator|.
name|DCT_DECODE
argument_list|)
expr_stmt|;
comment|// read image
name|ImageIO
operator|.
name|setUseCache
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|BufferedImage
name|awtImage
init|=
name|ImageIO
operator|.
name|read
argument_list|(
name|stream
argument_list|)
decl_stmt|;
comment|// no alpha
if|if
condition|(
name|awtImage
operator|.
name|getColorModel
argument_list|()
operator|.
name|hasAlpha
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"alpha channel not implemented"
argument_list|)
throw|;
block|}
comment|// set properties (width, height, depth, color space, etc.)
name|setPropertiesFromAWT
argument_list|(
name|awtImage
argument_list|,
name|pdImage
argument_list|)
expr_stmt|;
return|return
name|pdImage
return|;
block|}
comment|/**      * Creates a new JPEG Image XObject from a Buffered Image.      * @param document the document where the image will be created      * @param image the buffered image to embed      * @return a new Image XObject      * @throws IOException if the JPEG data cannot be written      */
specifier|public
specifier|static
name|PDImageXObject
name|createFromImage
parameter_list|(
name|PDDocument
name|document
parameter_list|,
name|BufferedImage
name|image
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createFromImage
argument_list|(
name|document
argument_list|,
name|image
argument_list|,
literal|0.75f
argument_list|)
return|;
block|}
comment|/**      * Creates a new JPEG Image XObject from a Buffered Image and a given quality.      * The image will be embedded at 72 DPI.      * @param document the document where the image will be created      * @param image the buffered image to embed      * @param quality the desired JPEG compression quality      * @return a new Image XObject      * @throws IOException if the JPEG data cannot be written      */
specifier|public
specifier|static
name|PDImageXObject
name|createFromImage
parameter_list|(
name|PDDocument
name|document
parameter_list|,
name|BufferedImage
name|image
parameter_list|,
name|float
name|quality
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createFromImage
argument_list|(
name|document
argument_list|,
name|image
argument_list|,
name|quality
argument_list|,
literal|72
argument_list|)
return|;
block|}
comment|/**      * Creates a new JPEG Image XObject from a Buffered Image, a given quality and DPI.      * @param document the document where the image will be created      * @param image the buffered image to embed      * @param quality the desired JPEG compression quality      * @param dpi the desired DPI (resolution) of the JPEG      * @return a new Image XObject      * @throws IOException if the JPEG data cannot be written      */
specifier|public
specifier|static
name|PDImageXObject
name|createFromImage
parameter_list|(
name|PDDocument
name|document
parameter_list|,
name|BufferedImage
name|image
parameter_list|,
name|float
name|quality
parameter_list|,
name|int
name|dpi
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createJPEG
argument_list|(
name|document
argument_list|,
name|image
argument_list|,
name|quality
argument_list|,
name|dpi
argument_list|)
return|;
block|}
comment|// Creates an Image XObject from a Buffered Image using JAI Image I/O
specifier|private
specifier|static
name|PDImageXObject
name|createJPEG
parameter_list|(
name|PDDocument
name|document
parameter_list|,
name|BufferedImage
name|image
parameter_list|,
name|float
name|quality
parameter_list|,
name|int
name|dpi
parameter_list|)
throws|throws
name|IOException
block|{
comment|// extract alpha channel (if any)
name|BufferedImage
name|awtColor
init|=
name|getColorImage
argument_list|(
name|image
argument_list|)
decl_stmt|;
name|BufferedImage
name|awtAlpha
init|=
name|getAlphaImage
argument_list|(
name|image
argument_list|)
decl_stmt|;
comment|// create XObject
name|PDImageXObject
name|pdImage
init|=
operator|new
name|PDImageXObject
argument_list|(
operator|new
name|PDStream
argument_list|(
name|document
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// add DCT filter
name|COSDictionary
name|dict
init|=
name|pdImage
operator|.
name|getCOSStream
argument_list|()
decl_stmt|;
name|pdImage
operator|.
name|getCOSStream
argument_list|()
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|FILTER
argument_list|,
name|COSName
operator|.
name|DCT_DECODE
argument_list|)
expr_stmt|;
comment|// alpha -> soft mask
if|if
condition|(
name|awtAlpha
operator|!=
literal|null
condition|)
block|{
name|PDImage
name|xAlpha
init|=
name|JPEGFactory
operator|.
name|createFromImage
argument_list|(
name|document
argument_list|,
name|awtAlpha
argument_list|,
name|quality
argument_list|)
decl_stmt|;
name|dict
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|SMASK
argument_list|,
name|xAlpha
argument_list|)
expr_stmt|;
block|}
comment|// set properties (width, height, depth, color space, etc.)
name|setPropertiesFromAWT
argument_list|(
name|awtColor
argument_list|,
name|pdImage
argument_list|)
expr_stmt|;
comment|// encode to JPEG
name|OutputStream
name|out
init|=
literal|null
decl_stmt|;
name|ImageOutputStream
name|ios
init|=
literal|null
decl_stmt|;
name|ImageWriter
name|imageWriter
init|=
literal|null
decl_stmt|;
try|try
block|{
name|out
operator|=
name|pdImage
operator|.
name|getCOSStream
argument_list|()
operator|.
name|createFilteredStream
argument_list|()
expr_stmt|;
comment|// find JAI writer
name|imageWriter
operator|=
name|ImageIO
operator|.
name|getImageWritersBySuffix
argument_list|(
literal|"jpeg"
argument_list|)
operator|.
name|next
argument_list|()
expr_stmt|;
name|ios
operator|=
name|ImageIO
operator|.
name|createImageOutputStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|imageWriter
operator|.
name|setOutput
argument_list|(
name|ios
argument_list|)
expr_stmt|;
comment|// add compression
name|JPEGImageWriteParam
name|jpegParam
init|=
operator|(
name|JPEGImageWriteParam
operator|)
name|imageWriter
operator|.
name|getDefaultWriteParam
argument_list|()
decl_stmt|;
name|jpegParam
operator|.
name|setCompressionMode
argument_list|(
name|JPEGImageWriteParam
operator|.
name|MODE_EXPLICIT
argument_list|)
expr_stmt|;
name|jpegParam
operator|.
name|setCompressionQuality
argument_list|(
name|quality
argument_list|)
expr_stmt|;
comment|// add metadata
name|ImageTypeSpecifier
name|imageTypeSpecifier
init|=
operator|new
name|ImageTypeSpecifier
argument_list|(
name|image
argument_list|)
decl_stmt|;
name|IIOMetadata
name|data
init|=
name|imageWriter
operator|.
name|getDefaultImageMetadata
argument_list|(
name|imageTypeSpecifier
argument_list|,
name|jpegParam
argument_list|)
decl_stmt|;
name|Element
name|tree
init|=
operator|(
name|Element
operator|)
name|data
operator|.
name|getAsTree
argument_list|(
literal|"javax_imageio_jpeg_image_1.0"
argument_list|)
decl_stmt|;
name|Element
name|jfif
init|=
operator|(
name|Element
operator|)
name|tree
operator|.
name|getElementsByTagName
argument_list|(
literal|"app0JFIF"
argument_list|)
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|jfif
operator|.
name|setAttribute
argument_list|(
literal|"Xdensity"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|dpi
argument_list|)
argument_list|)
expr_stmt|;
name|jfif
operator|.
name|setAttribute
argument_list|(
literal|"Ydensity"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|dpi
argument_list|)
argument_list|)
expr_stmt|;
name|jfif
operator|.
name|setAttribute
argument_list|(
literal|"resUnits"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
comment|// 1 = dots/inch
comment|// write
name|imageWriter
operator|.
name|write
argument_list|(
name|data
argument_list|,
operator|new
name|IIOImage
argument_list|(
name|image
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|jpegParam
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// clean up
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|out
argument_list|)
expr_stmt|;
if|if
condition|(
name|ios
operator|!=
literal|null
condition|)
block|{
name|ios
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|imageWriter
operator|!=
literal|null
condition|)
block|{
name|imageWriter
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|pdImage
return|;
block|}
block|}
end_class

end_unit

