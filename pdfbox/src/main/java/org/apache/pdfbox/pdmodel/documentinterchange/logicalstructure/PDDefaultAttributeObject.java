begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|documentinterchange
operator|.
name|logicalstructure
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_comment
comment|/**  * A default attribute object.  *   * @author Johannes Koch  */
end_comment

begin_class
specifier|public
class|class
name|PDDefaultAttributeObject
extends|extends
name|PDAttributeObject
block|{
comment|/**      * Default constructor.      */
specifier|public
name|PDDefaultAttributeObject
parameter_list|()
block|{     }
comment|/**      * Creates a default attribute object with a given dictionary.      *       * @param dictionary the dictionary      */
specifier|public
name|PDDefaultAttributeObject
parameter_list|(
name|COSDictionary
name|dictionary
parameter_list|)
block|{
name|super
argument_list|(
name|dictionary
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the attribute names.      *       * @return the attribute names      */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAttributeNames
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|attrNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|COSName
argument_list|,
name|COSBase
argument_list|>
name|entry
range|:
name|this
operator|.
name|getCOSObject
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|COSName
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|COSName
operator|.
name|O
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|attrNames
operator|.
name|add
argument_list|(
name|key
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|attrNames
return|;
block|}
comment|/**      * Gets the attribute value for a given name.      *       * @param attrName the given attribute name      * @return the attribute value for a given name      */
specifier|public
name|COSBase
name|getAttributeValue
parameter_list|(
name|String
name|attrName
parameter_list|)
block|{
return|return
name|this
operator|.
name|getCOSObject
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|attrName
argument_list|)
return|;
block|}
comment|/**      * Gets the attribute value for a given name.      *       * @param attrName the given attribute name      * @param defaultValue the default value      * @return the attribute value for a given name      */
specifier|protected
name|COSBase
name|getAttributeValue
parameter_list|(
name|String
name|attrName
parameter_list|,
name|COSBase
name|defaultValue
parameter_list|)
block|{
name|COSBase
name|value
init|=
name|this
operator|.
name|getCOSObject
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|attrName
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
return|return
name|value
return|;
block|}
comment|/**      * Sets an attribute.      *       * @param attrName the attribute name      * @param attrValue the attribute value      */
specifier|public
name|void
name|setAttribute
parameter_list|(
name|String
name|attrName
parameter_list|,
name|COSBase
name|attrValue
parameter_list|)
block|{
name|COSBase
name|old
init|=
name|this
operator|.
name|getAttributeValue
argument_list|(
name|attrName
argument_list|)
decl_stmt|;
name|this
operator|.
name|getCOSObject
argument_list|()
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|attrName
argument_list|)
argument_list|,
name|attrValue
argument_list|)
expr_stmt|;
name|this
operator|.
name|potentiallyNotifyChanged
argument_list|(
name|old
argument_list|,
name|attrValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|super
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", attributes={"
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|this
operator|.
name|getAttributeNames
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|name
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|getAttributeValue
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

