begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|predictor
package|;
end_package

begin_comment
comment|/**  * From http://www.w3.org/TR/PNG-Filters.html: The Paeth filter computes a  * simple linear function of the three neighboring pixels (left, above, upper  * left), then chooses as predictor the neighboring pixel closest to the  * computed value. This technique is due to Alan W. Paeth [PAETH].  *  * To compute the Paeth filter, apply the following formula to each byte of the  * scanline:  *  *<code>Paeth(i,j) = Raw(i,j) - PaethPredictor(Raw(i-1,j), Raw(i,j-1), Raw(i-1,j-1))</code>  *  * To decode the Paeth filter  *  *<code>Raw(i,j) = Paeth(i,j) - PaethPredictor(Raw(i-1,j), Raw(i,j-1), Raw(i-1,j-1))</code>  *  * @author xylifyx@yahoo.co.uk  * @version $Revision: 1.3 $  */
end_comment

begin_class
specifier|public
class|class
name|Paeth
extends|extends
name|PredictorAlgorithm
block|{
comment|/**      * The paeth predictor function.      *      * This function is taken almost directly from the PNG definition on      * http://www.w3.org/TR/PNG-Filters.html      *      * @param a      *            left      * @param b      *            above      * @param c      *            upper left      * @return The result of the paeth predictor.      */
specifier|public
name|int
name|paethPredictor
parameter_list|(
name|int
name|a
parameter_list|,
name|int
name|b
parameter_list|,
name|int
name|c
parameter_list|)
block|{
name|int
name|p
init|=
name|a
operator|+
name|b
operator|-
name|c
decl_stmt|;
comment|// initial estimate
name|int
name|pa
init|=
name|Math
operator|.
name|abs
argument_list|(
name|p
operator|-
name|a
argument_list|)
decl_stmt|;
comment|// distances to a, b, c
name|int
name|pb
init|=
name|Math
operator|.
name|abs
argument_list|(
name|p
operator|-
name|b
argument_list|)
decl_stmt|;
name|int
name|pc
init|=
name|Math
operator|.
name|abs
argument_list|(
name|p
operator|-
name|c
argument_list|)
decl_stmt|;
comment|// return nearest of a,b,c,
comment|// breaking ties in order a,b,c.
if|if
condition|(
name|pa
operator|<=
name|pb
operator|&&
name|pa
operator|<=
name|pc
condition|)
block|{
return|return
name|a
return|;
block|}
elseif|else
if|if
condition|(
name|pb
operator|<=
name|pc
condition|)
block|{
return|return
name|b
return|;
block|}
else|else
block|{
return|return
name|c
return|;
block|}
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|void
name|encodeLine
parameter_list|(
name|byte
index|[]
name|src
parameter_list|,
name|byte
index|[]
name|dest
parameter_list|,
name|int
name|srcDy
parameter_list|,
name|int
name|srcOffset
parameter_list|,
name|int
name|destDy
parameter_list|,
name|int
name|destOffset
parameter_list|)
block|{
name|int
name|bpl
init|=
name|getWidth
argument_list|()
operator|*
name|getBpp
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|bpl
condition|;
name|x
operator|++
control|)
block|{
name|dest
index|[
name|x
operator|+
name|destOffset
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|src
index|[
name|x
operator|+
name|srcOffset
index|]
operator|-
name|paethPredictor
argument_list|(
name|leftPixel
argument_list|(
name|src
argument_list|,
name|srcOffset
argument_list|,
name|srcDy
argument_list|,
name|x
argument_list|)
argument_list|,
name|abovePixel
argument_list|(
name|src
argument_list|,
name|srcOffset
argument_list|,
name|srcDy
argument_list|,
name|x
argument_list|)
argument_list|,
name|aboveLeftPixel
argument_list|(
name|src
argument_list|,
name|srcOffset
argument_list|,
name|srcDy
argument_list|,
name|x
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|void
name|decodeLine
parameter_list|(
name|byte
index|[]
name|src
parameter_list|,
name|byte
index|[]
name|dest
parameter_list|,
name|int
name|srcDy
parameter_list|,
name|int
name|srcOffset
parameter_list|,
name|int
name|destDy
parameter_list|,
name|int
name|destOffset
parameter_list|)
block|{
name|int
name|bpl
init|=
name|getWidth
argument_list|()
operator|*
name|getBpp
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|bpl
condition|;
name|x
operator|++
control|)
block|{
name|dest
index|[
name|x
operator|+
name|destOffset
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|src
index|[
name|x
operator|+
name|srcOffset
index|]
operator|+
name|paethPredictor
argument_list|(
name|leftPixel
argument_list|(
name|dest
argument_list|,
name|destOffset
argument_list|,
name|destDy
argument_list|,
name|x
argument_list|)
argument_list|,
name|abovePixel
argument_list|(
name|dest
argument_list|,
name|destOffset
argument_list|,
name|destDy
argument_list|,
name|x
argument_list|)
argument_list|,
name|aboveLeftPixel
argument_list|(
name|dest
argument_list|,
name|destOffset
argument_list|,
name|destDy
argument_list|,
name|x
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

