begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|function
operator|.
name|type4
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_comment
comment|/**  * Provides the arithmetic operators such as "add" and "sub".  *  */
end_comment

begin_class
class|class
name|ArithmeticOperators
block|{
comment|/** Implements the "abs" operator. */
specifier|static
class|class
name|Abs
implements|implements
name|Operator
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|ExecutionContext
name|context
parameter_list|)
block|{
name|Number
name|num
init|=
name|context
operator|.
name|popNumber
argument_list|()
decl_stmt|;
if|if
condition|(
name|num
operator|instanceof
name|Integer
condition|)
block|{
name|context
operator|.
name|getStack
argument_list|()
operator|.
name|push
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|num
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|.
name|getStack
argument_list|()
operator|.
name|push
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|num
operator|.
name|floatValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Implements the "add" operator. */
specifier|static
class|class
name|Add
implements|implements
name|Operator
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|ExecutionContext
name|context
parameter_list|)
block|{
name|Number
name|num2
init|=
name|context
operator|.
name|popNumber
argument_list|()
decl_stmt|;
name|Number
name|num1
init|=
name|context
operator|.
name|popNumber
argument_list|()
decl_stmt|;
if|if
condition|(
name|num1
operator|instanceof
name|Integer
operator|&&
name|num2
operator|instanceof
name|Integer
condition|)
block|{
name|long
name|sum
init|=
name|num1
operator|.
name|longValue
argument_list|()
operator|+
name|num2
operator|.
name|longValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|sum
argument_list|<
name|Integer
operator|.
name|MIN_VALUE
operator|||
name|sum
argument_list|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|context
operator|.
name|getStack
argument_list|()
operator|.
name|push
argument_list|(
operator|(
name|float
operator|)
name|sum
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|.
name|getStack
argument_list|()
operator|.
name|push
argument_list|(
operator|(
name|int
operator|)
name|sum
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|float
name|sum
init|=
name|num1
operator|.
name|floatValue
argument_list|()
operator|+
name|num2
operator|.
name|floatValue
argument_list|()
decl_stmt|;
name|context
operator|.
name|getStack
argument_list|()
operator|.
name|push
argument_list|(
name|sum
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Implements the "atan" operator. */
specifier|static
class|class
name|Atan
implements|implements
name|Operator
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|ExecutionContext
name|context
parameter_list|)
block|{
name|float
name|den
init|=
name|context
operator|.
name|popReal
argument_list|()
decl_stmt|;
name|float
name|num
init|=
name|context
operator|.
name|popReal
argument_list|()
decl_stmt|;
name|float
name|atan
init|=
operator|(
name|float
operator|)
name|Math
operator|.
name|atan2
argument_list|(
name|num
argument_list|,
name|den
argument_list|)
decl_stmt|;
name|atan
operator|=
operator|(
name|float
operator|)
name|Math
operator|.
name|toDegrees
argument_list|(
name|atan
argument_list|)
operator|%
literal|360
expr_stmt|;
if|if
condition|(
name|atan
operator|<
literal|0
condition|)
block|{
name|atan
operator|=
name|atan
operator|+
literal|360
expr_stmt|;
block|}
name|context
operator|.
name|getStack
argument_list|()
operator|.
name|push
argument_list|(
name|atan
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Implements the "ceiling" operator. */
specifier|static
class|class
name|Ceiling
implements|implements
name|Operator
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|ExecutionContext
name|context
parameter_list|)
block|{
name|Number
name|num
init|=
name|context
operator|.
name|popNumber
argument_list|()
decl_stmt|;
if|if
condition|(
name|num
operator|instanceof
name|Integer
condition|)
block|{
name|context
operator|.
name|getStack
argument_list|()
operator|.
name|push
argument_list|(
name|num
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|.
name|getStack
argument_list|()
operator|.
name|push
argument_list|(
operator|(
name|float
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|num
operator|.
name|doubleValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Implements the "cos" operator. */
specifier|static
class|class
name|Cos
implements|implements
name|Operator
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|ExecutionContext
name|context
parameter_list|)
block|{
name|float
name|angle
init|=
name|context
operator|.
name|popReal
argument_list|()
decl_stmt|;
name|float
name|cos
init|=
operator|(
name|float
operator|)
name|Math
operator|.
name|cos
argument_list|(
name|Math
operator|.
name|toRadians
argument_list|(
name|angle
argument_list|)
argument_list|)
decl_stmt|;
name|context
operator|.
name|getStack
argument_list|()
operator|.
name|push
argument_list|(
name|cos
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Implements the "cvi" operator. */
specifier|static
class|class
name|Cvi
implements|implements
name|Operator
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|ExecutionContext
name|context
parameter_list|)
block|{
name|Number
name|num
init|=
name|context
operator|.
name|popNumber
argument_list|()
decl_stmt|;
name|context
operator|.
name|getStack
argument_list|()
operator|.
name|push
argument_list|(
name|num
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Implements the "cvr" operator. */
specifier|static
class|class
name|Cvr
implements|implements
name|Operator
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|ExecutionContext
name|context
parameter_list|)
block|{
name|Number
name|num
init|=
name|context
operator|.
name|popNumber
argument_list|()
decl_stmt|;
name|context
operator|.
name|getStack
argument_list|()
operator|.
name|push
argument_list|(
name|num
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Implements the "div" operator. */
specifier|static
class|class
name|Div
implements|implements
name|Operator
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|ExecutionContext
name|context
parameter_list|)
block|{
name|Number
name|num2
init|=
name|context
operator|.
name|popNumber
argument_list|()
decl_stmt|;
name|Number
name|num1
init|=
name|context
operator|.
name|popNumber
argument_list|()
decl_stmt|;
name|context
operator|.
name|getStack
argument_list|()
operator|.
name|push
argument_list|(
name|num1
operator|.
name|floatValue
argument_list|()
operator|/
name|num2
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Implements the "exp" operator. */
specifier|static
class|class
name|Exp
implements|implements
name|Operator
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|ExecutionContext
name|context
parameter_list|)
block|{
name|Number
name|exp
init|=
name|context
operator|.
name|popNumber
argument_list|()
decl_stmt|;
name|Number
name|base
init|=
name|context
operator|.
name|popNumber
argument_list|()
decl_stmt|;
name|double
name|value
init|=
name|Math
operator|.
name|pow
argument_list|(
name|base
operator|.
name|doubleValue
argument_list|()
argument_list|,
name|exp
operator|.
name|doubleValue
argument_list|()
argument_list|)
decl_stmt|;
name|context
operator|.
name|getStack
argument_list|()
operator|.
name|push
argument_list|(
operator|(
name|float
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Implements the "floor" operator. */
specifier|static
class|class
name|Floor
implements|implements
name|Operator
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|ExecutionContext
name|context
parameter_list|)
block|{
name|Number
name|num
init|=
name|context
operator|.
name|popNumber
argument_list|()
decl_stmt|;
if|if
condition|(
name|num
operator|instanceof
name|Integer
condition|)
block|{
name|context
operator|.
name|getStack
argument_list|()
operator|.
name|push
argument_list|(
name|num
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|.
name|getStack
argument_list|()
operator|.
name|push
argument_list|(
operator|(
name|float
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|num
operator|.
name|doubleValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Implements the "idiv" operator. */
specifier|static
class|class
name|IDiv
implements|implements
name|Operator
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|ExecutionContext
name|context
parameter_list|)
block|{
name|int
name|num2
init|=
name|context
operator|.
name|popInt
argument_list|()
decl_stmt|;
name|int
name|num1
init|=
name|context
operator|.
name|popInt
argument_list|()
decl_stmt|;
name|context
operator|.
name|getStack
argument_list|()
operator|.
name|push
argument_list|(
name|num1
operator|/
name|num2
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Implements the "ln" operator. */
specifier|static
class|class
name|Ln
implements|implements
name|Operator
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|ExecutionContext
name|context
parameter_list|)
block|{
name|Number
name|num
init|=
name|context
operator|.
name|popNumber
argument_list|()
decl_stmt|;
name|context
operator|.
name|getStack
argument_list|()
operator|.
name|push
argument_list|(
operator|(
name|float
operator|)
name|Math
operator|.
name|log
argument_list|(
name|num
operator|.
name|doubleValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Implements the "log" operator. */
specifier|static
class|class
name|Log
implements|implements
name|Operator
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|ExecutionContext
name|context
parameter_list|)
block|{
name|Number
name|num
init|=
name|context
operator|.
name|popNumber
argument_list|()
decl_stmt|;
name|context
operator|.
name|getStack
argument_list|()
operator|.
name|push
argument_list|(
operator|(
name|float
operator|)
name|Math
operator|.
name|log10
argument_list|(
name|num
operator|.
name|doubleValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Implements the "mod" operator. */
specifier|static
class|class
name|Mod
implements|implements
name|Operator
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|ExecutionContext
name|context
parameter_list|)
block|{
name|int
name|int2
init|=
name|context
operator|.
name|popInt
argument_list|()
decl_stmt|;
name|int
name|int1
init|=
name|context
operator|.
name|popInt
argument_list|()
decl_stmt|;
name|context
operator|.
name|getStack
argument_list|()
operator|.
name|push
argument_list|(
name|int1
operator|%
name|int2
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Implements the "mul" operator. */
specifier|static
class|class
name|Mul
implements|implements
name|Operator
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|ExecutionContext
name|context
parameter_list|)
block|{
name|Number
name|num2
init|=
name|context
operator|.
name|popNumber
argument_list|()
decl_stmt|;
name|Number
name|num1
init|=
name|context
operator|.
name|popNumber
argument_list|()
decl_stmt|;
if|if
condition|(
name|num1
operator|instanceof
name|Integer
operator|&&
name|num2
operator|instanceof
name|Integer
condition|)
block|{
name|long
name|result
init|=
name|num1
operator|.
name|longValue
argument_list|()
operator|*
name|num2
operator|.
name|longValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|>=
name|Integer
operator|.
name|MIN_VALUE
operator|&&
name|result
operator|<=
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|context
operator|.
name|getStack
argument_list|()
operator|.
name|push
argument_list|(
operator|(
name|int
operator|)
name|result
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|.
name|getStack
argument_list|()
operator|.
name|push
argument_list|(
operator|(
name|float
operator|)
name|result
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|double
name|result
init|=
name|num1
operator|.
name|doubleValue
argument_list|()
operator|*
name|num2
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
name|context
operator|.
name|getStack
argument_list|()
operator|.
name|push
argument_list|(
operator|(
name|float
operator|)
name|result
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Implements the "neg" operator. */
specifier|static
class|class
name|Neg
implements|implements
name|Operator
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|ExecutionContext
name|context
parameter_list|)
block|{
name|Number
name|num
init|=
name|context
operator|.
name|popNumber
argument_list|()
decl_stmt|;
if|if
condition|(
name|num
operator|instanceof
name|Integer
condition|)
block|{
name|int
name|v
init|=
name|num
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|==
name|Integer
operator|.
name|MIN_VALUE
condition|)
block|{
name|context
operator|.
name|getStack
argument_list|()
operator|.
name|push
argument_list|(
operator|-
name|num
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|.
name|getStack
argument_list|()
operator|.
name|push
argument_list|(
operator|-
name|num
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|context
operator|.
name|getStack
argument_list|()
operator|.
name|push
argument_list|(
operator|-
name|num
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Implements the "round" operator. */
specifier|static
class|class
name|Round
implements|implements
name|Operator
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|ExecutionContext
name|context
parameter_list|)
block|{
name|Number
name|num
init|=
name|context
operator|.
name|popNumber
argument_list|()
decl_stmt|;
if|if
condition|(
name|num
operator|instanceof
name|Integer
condition|)
block|{
name|context
operator|.
name|getStack
argument_list|()
operator|.
name|push
argument_list|(
name|num
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|.
name|getStack
argument_list|()
operator|.
name|push
argument_list|(
operator|(
name|float
operator|)
name|Math
operator|.
name|round
argument_list|(
name|num
operator|.
name|doubleValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Implements the "sin" operator. */
specifier|static
class|class
name|Sin
implements|implements
name|Operator
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|ExecutionContext
name|context
parameter_list|)
block|{
name|float
name|angle
init|=
name|context
operator|.
name|popReal
argument_list|()
decl_stmt|;
name|float
name|sin
init|=
operator|(
name|float
operator|)
name|Math
operator|.
name|sin
argument_list|(
name|Math
operator|.
name|toRadians
argument_list|(
name|angle
argument_list|)
argument_list|)
decl_stmt|;
name|context
operator|.
name|getStack
argument_list|()
operator|.
name|push
argument_list|(
name|sin
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Implements the "sqrt" operator. */
specifier|static
class|class
name|Sqrt
implements|implements
name|Operator
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|ExecutionContext
name|context
parameter_list|)
block|{
name|float
name|num
init|=
name|context
operator|.
name|popReal
argument_list|()
decl_stmt|;
if|if
condition|(
name|num
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"argument must be nonnegative"
argument_list|)
throw|;
block|}
name|context
operator|.
name|getStack
argument_list|()
operator|.
name|push
argument_list|(
operator|(
name|float
operator|)
name|Math
operator|.
name|sqrt
argument_list|(
name|num
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Implements the "sub" operator. */
specifier|static
class|class
name|Sub
implements|implements
name|Operator
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|ExecutionContext
name|context
parameter_list|)
block|{
name|Stack
argument_list|<
name|Object
argument_list|>
name|stack
init|=
name|context
operator|.
name|getStack
argument_list|()
decl_stmt|;
name|Number
name|num2
init|=
name|context
operator|.
name|popNumber
argument_list|()
decl_stmt|;
name|Number
name|num1
init|=
name|context
operator|.
name|popNumber
argument_list|()
decl_stmt|;
if|if
condition|(
name|num1
operator|instanceof
name|Integer
operator|&&
name|num2
operator|instanceof
name|Integer
condition|)
block|{
name|long
name|result
init|=
name|num1
operator|.
name|longValue
argument_list|()
operator|-
name|num2
operator|.
name|longValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
argument_list|<
name|Integer
operator|.
name|MIN_VALUE
operator|||
name|result
argument_list|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|stack
operator|.
name|push
argument_list|(
operator|(
name|float
operator|)
name|result
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stack
operator|.
name|push
argument_list|(
operator|(
name|int
operator|)
name|result
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|float
name|result
init|=
name|num1
operator|.
name|floatValue
argument_list|()
operator|-
name|num2
operator|.
name|floatValue
argument_list|()
decl_stmt|;
name|stack
operator|.
name|push
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Implements the "truncate" operator. */
specifier|static
class|class
name|Truncate
implements|implements
name|Operator
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|ExecutionContext
name|context
parameter_list|)
block|{
name|Number
name|num
init|=
name|context
operator|.
name|popNumber
argument_list|()
decl_stmt|;
if|if
condition|(
name|num
operator|instanceof
name|Integer
condition|)
block|{
name|context
operator|.
name|getStack
argument_list|()
operator|.
name|push
argument_list|(
name|num
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|.
name|getStack
argument_list|()
operator|.
name|push
argument_list|(
call|(
name|float
call|)
argument_list|(
name|int
argument_list|)
operator|(
name|num
operator|.
name|floatValue
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

