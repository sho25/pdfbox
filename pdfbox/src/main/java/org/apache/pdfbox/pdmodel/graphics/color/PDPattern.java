begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|BufferedImage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|WritableRaster
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|pattern
operator|.
name|PDAbstractPattern
import|;
end_import

begin_comment
comment|/**  * A Pattern color space is either a Tiling pattern or a Shading pattern.  * @author John Hewson  * @author Ben Litchfield  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|PDPattern
extends|extends
name|PDSpecialColorSpace
block|{
specifier|private
specifier|final
name|PDResources
name|resources
decl_stmt|;
specifier|private
name|PDColorSpace
name|underlyingColorSpace
decl_stmt|;
comment|/**      * Creates a new pattern color space.      *       * @param resources The current resources.      */
specifier|public
name|PDPattern
parameter_list|(
name|PDResources
name|resources
parameter_list|)
block|{
name|this
operator|.
name|resources
operator|=
name|resources
expr_stmt|;
block|}
comment|/**      * Creates a new uncolored tiling pattern color space.      *       * @param resources The current resources.      * @param colorSpace The underlying color space.      */
specifier|public
name|PDPattern
parameter_list|(
name|PDResources
name|resources
parameter_list|,
name|PDColorSpace
name|colorSpace
parameter_list|)
block|{
name|this
operator|.
name|resources
operator|=
name|resources
expr_stmt|;
name|this
operator|.
name|underlyingColorSpace
operator|=
name|colorSpace
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|COSName
operator|.
name|PATTERN
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getNumberOfComponents
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|float
index|[]
name|getDefaultDecode
parameter_list|(
name|int
name|bitsPerComponent
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|PDColor
name|getInitialColor
parameter_list|()
block|{
return|return
name|PDColor
operator|.
name|EMPTY_PATTERN
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
index|[]
name|toRGB
parameter_list|(
name|float
index|[]
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|BufferedImage
name|toRGBImage
parameter_list|(
name|WritableRaster
name|raster
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**      * Returns the pattern for the given color.      *       * @param color color containing a pattern name      * @return pattern for the given color      * @throws java.io.IOException if the pattern name was not found.      */
specifier|public
specifier|final
name|PDAbstractPattern
name|getPattern
parameter_list|(
name|PDColor
name|color
parameter_list|)
throws|throws
name|IOException
block|{
name|PDAbstractPattern
name|pattern
init|=
name|resources
operator|.
name|getPattern
argument_list|(
name|color
operator|.
name|getPatternName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pattern
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"pattern "
operator|+
name|color
operator|.
name|getPatternName
argument_list|()
operator|+
literal|" was not found"
argument_list|)
throw|;
block|}
else|else
block|{
return|return
name|pattern
return|;
block|}
block|}
comment|/**      * Returns the underlying color space, if this is an uncolored tiling pattern, otherwise null.      */
specifier|public
specifier|final
name|PDColorSpace
name|getUnderlyingColorSpace
parameter_list|()
block|{
return|return
name|underlyingColorSpace
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Pattern"
return|;
block|}
block|}
end_class

end_unit

