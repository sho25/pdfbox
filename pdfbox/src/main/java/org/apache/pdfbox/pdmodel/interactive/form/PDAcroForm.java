begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|form
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSNumber
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|COSArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|COSObjectable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|fdf
operator|.
name|FDFDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|fdf
operator|.
name|FDFDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|fdf
operator|.
name|FDFCatalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|fdf
operator|.
name|FDFField
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * An interactive form, also known as an AcroForm.  *  * @author Ben Litchfield  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|PDAcroForm
implements|implements
name|COSObjectable
block|{
specifier|private
specifier|static
specifier|final
name|int
name|FLAG_SIGNATURES_EXIST
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|FLAG_APPEND_ONLY
init|=
literal|1
operator|<<
literal|1
decl_stmt|;
specifier|private
name|COSDictionary
name|acroForm
decl_stmt|;
specifier|private
name|PDDocument
name|document
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|PDFieldTreeNode
argument_list|>
name|fieldCache
decl_stmt|;
comment|/**      * Constructor.      *      * @param doc The document that this form is part of.      */
specifier|public
name|PDAcroForm
parameter_list|(
name|PDDocument
name|doc
parameter_list|)
block|{
name|document
operator|=
name|doc
expr_stmt|;
name|acroForm
operator|=
operator|new
name|COSDictionary
argument_list|()
expr_stmt|;
name|COSArray
name|fields
init|=
operator|new
name|COSArray
argument_list|()
decl_stmt|;
name|acroForm
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|FIELDS
argument_list|,
name|fields
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor.      *      * @param doc The document that this form is part of.      * @param form The existing acroForm.      */
specifier|public
name|PDAcroForm
parameter_list|(
name|PDDocument
name|doc
parameter_list|,
name|COSDictionary
name|form
parameter_list|)
block|{
name|document
operator|=
name|doc
expr_stmt|;
name|acroForm
operator|=
name|form
expr_stmt|;
block|}
comment|/**      * This will get the document associated with this form.      *      * @return The PDF document.      */
specifier|public
name|PDDocument
name|getDocument
parameter_list|()
block|{
return|return
name|document
return|;
block|}
comment|/**      * This will get the dictionary that this form wraps.      *      * @return The dictionary for this form.      */
specifier|public
name|COSDictionary
name|getDictionary
parameter_list|()
block|{
return|return
name|acroForm
return|;
block|}
comment|/**      * This method will import an entire FDF document into the PDF document      * that this acroform is part of.      *      * @param fdf The FDF document to import.      *      * @throws IOException If there is an error doing the import.      */
specifier|public
name|void
name|importFDF
parameter_list|(
name|FDFDocument
name|fdf
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|?
argument_list|>
name|fields
init|=
name|fdf
operator|.
name|getCatalog
argument_list|()
operator|.
name|getFDF
argument_list|()
operator|.
name|getFields
argument_list|()
decl_stmt|;
if|if
condition|(
name|fields
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Object
name|field
range|:
name|fields
control|)
block|{
name|FDFField
name|fdfField
init|=
operator|(
name|FDFField
operator|)
name|field
decl_stmt|;
name|PDFieldTreeNode
name|docField
init|=
name|getField
argument_list|(
name|fdfField
operator|.
name|getPartialFieldName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|docField
operator|!=
literal|null
condition|)
block|{
name|docField
operator|.
name|importFDF
argument_list|(
name|fdfField
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * This will export all FDF form data.      *      * @return An FDF document used to export the document.      * @throws IOException If there is an error when exporting the document.      */
specifier|public
name|FDFDocument
name|exportFDF
parameter_list|()
throws|throws
name|IOException
block|{
name|FDFDocument
name|fdf
init|=
operator|new
name|FDFDocument
argument_list|()
decl_stmt|;
name|FDFCatalog
name|catalog
init|=
name|fdf
operator|.
name|getCatalog
argument_list|()
decl_stmt|;
name|FDFDictionary
name|fdfDict
init|=
operator|new
name|FDFDictionary
argument_list|()
decl_stmt|;
name|catalog
operator|.
name|setFDF
argument_list|(
name|fdfDict
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FDFField
argument_list|>
name|fdfFields
init|=
operator|new
name|ArrayList
argument_list|<
name|FDFField
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PDFieldTreeNode
argument_list|>
name|fields
init|=
name|getFields
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|PDFieldTreeNode
argument_list|>
name|fieldIter
init|=
name|fields
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|fieldIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|PDFieldTreeNode
name|docField
init|=
name|fieldIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|addFieldAndChildren
argument_list|(
name|docField
argument_list|,
name|fdfFields
argument_list|)
expr_stmt|;
block|}
name|fdfDict
operator|.
name|setID
argument_list|(
name|document
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocumentID
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fdfFields
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fdfDict
operator|.
name|setFields
argument_list|(
name|fdfFields
argument_list|)
expr_stmt|;
block|}
return|return
name|fdf
return|;
block|}
specifier|private
name|void
name|addFieldAndChildren
parameter_list|(
name|PDFieldTreeNode
name|docField
parameter_list|,
name|List
argument_list|<
name|FDFField
argument_list|>
name|fdfFields
parameter_list|)
throws|throws
name|IOException
block|{
name|Object
name|fieldValue
init|=
name|docField
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|FDFField
name|fdfField
init|=
operator|new
name|FDFField
argument_list|()
decl_stmt|;
name|fdfField
operator|.
name|setPartialFieldName
argument_list|(
name|docField
operator|.
name|getPartialName
argument_list|()
argument_list|)
expr_stmt|;
name|fdfField
operator|.
name|setValue
argument_list|(
name|fieldValue
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|COSObjectable
argument_list|>
name|kids
init|=
name|docField
operator|.
name|getKids
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FDFField
argument_list|>
name|childFDFFields
init|=
operator|new
name|ArrayList
argument_list|<
name|FDFField
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|kids
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|COSObjectable
name|kid
range|:
name|kids
control|)
block|{
name|addFieldAndChildren
argument_list|(
operator|(
name|PDFieldTreeNode
operator|)
name|kid
argument_list|,
name|childFDFFields
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|childFDFFields
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fdfField
operator|.
name|setKids
argument_list|(
name|childFDFFields
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fieldValue
operator|!=
literal|null
operator|||
operator|!
name|childFDFFields
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fdfFields
operator|.
name|add
argument_list|(
name|fdfField
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This will return all of the documents root fields.      *       * A field might have children that are fields (non-terminal field) or does not      * have children which are fields (terminal fields).      *       * The fields within an AcroForm are organized in a tree structure. The documents root fields       * might either be terminal fields, non-terminal fields or a mixture of both. Non-terminal fields      * mark branches which contents can be retrieved using {@link PDFieldTreeNode#getKids()}.      *       * @return A list of the documents root fields.      *       */
specifier|public
name|List
argument_list|<
name|PDFieldTreeNode
argument_list|>
name|getFields
parameter_list|()
block|{
name|COSArray
name|cosFields
init|=
operator|(
name|COSArray
operator|)
name|acroForm
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|FIELDS
argument_list|)
decl_stmt|;
if|if
condition|(
name|cosFields
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
expr|<
name|PDFieldTreeNode
operator|>
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|PDFieldTreeNode
argument_list|>
name|pdFields
init|=
operator|new
name|ArrayList
argument_list|<
name|PDFieldTreeNode
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cosFields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|COSDictionary
name|element
init|=
operator|(
name|COSDictionary
operator|)
name|cosFields
operator|.
name|getObject
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|element
operator|!=
literal|null
condition|)
block|{
name|PDFieldTreeNode
name|field
init|=
name|PDFieldTreeNode
operator|.
name|createField
argument_list|(
name|this
argument_list|,
name|element
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
name|pdFields
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
operator|new
name|COSArrayList
argument_list|<
name|PDFieldTreeNode
argument_list|>
argument_list|(
name|pdFields
argument_list|,
name|cosFields
argument_list|)
return|;
block|}
comment|/**      * Set the documents root fields.      *      * @param fields The fields that are part of the documents root fields.      */
specifier|public
name|void
name|setFields
parameter_list|(
name|List
argument_list|<
name|PDFieldTreeNode
argument_list|>
name|fields
parameter_list|)
block|{
name|acroForm
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|FIELDS
argument_list|,
name|COSArrayList
operator|.
name|converterToCOSArray
argument_list|(
name|fields
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will tell this form to cache the fields into a Map structure      * for fast access via the getField method.  The default is false.  You would      * want this to be false if you were changing the COSDictionary behind the scenes,      * otherwise setting this to true is acceptable.      *      * @param cache A boolean telling if we should cache the fields.      * @throws IOException If there is an error while caching the fields.      */
specifier|public
name|void
name|setCacheFields
parameter_list|(
name|boolean
name|cache
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|cache
condition|)
block|{
name|fieldCache
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|PDFieldTreeNode
argument_list|>
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|PDFieldTreeNode
argument_list|>
name|fields
init|=
name|getFields
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|PDFieldTreeNode
argument_list|>
name|fieldIter
init|=
name|fields
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|fieldIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|PDFieldTreeNode
name|next
init|=
name|fieldIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|fieldCache
operator|.
name|put
argument_list|(
name|next
operator|.
name|getFullyQualifiedName
argument_list|()
argument_list|,
name|next
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|fieldCache
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * This will tell if this acro form is caching the fields.      *      * @return true if the fields are being cached.      */
specifier|public
name|boolean
name|isCachingFields
parameter_list|()
block|{
return|return
name|fieldCache
operator|!=
literal|null
return|;
block|}
comment|/**      * This will get a field by name, possibly using the cache if setCache is true.      *      * @param name The name of the field to get.      *      * @return The field with that name of null if one was not found.      *      * @throws IOException If there is an error getting the field type.      */
specifier|public
name|PDFieldTreeNode
name|getField
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|PDFieldTreeNode
name|retval
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|fieldCache
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
name|fieldCache
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
index|[]
name|nameSubSection
init|=
name|name
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
decl_stmt|;
name|COSArray
name|fields
init|=
operator|(
name|COSArray
operator|)
name|acroForm
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|FIELDS
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|size
argument_list|()
operator|&&
name|retval
operator|==
literal|null
condition|;
name|i
operator|++
control|)
block|{
name|COSDictionary
name|element
init|=
operator|(
name|COSDictionary
operator|)
name|fields
operator|.
name|getObject
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|element
operator|!=
literal|null
condition|)
block|{
name|COSString
name|fieldName
init|=
operator|(
name|COSString
operator|)
name|element
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|T
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldName
operator|.
name|getString
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
name|fieldName
operator|.
name|getString
argument_list|()
operator|.
name|equals
argument_list|(
name|nameSubSection
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|PDFieldTreeNode
name|root
init|=
name|PDFieldTreeNode
operator|.
name|createField
argument_list|(
name|this
argument_list|,
name|element
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|nameSubSection
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|PDFieldTreeNode
name|kid
init|=
name|root
operator|.
name|findKid
argument_list|(
name|nameSubSection
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|kid
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
name|kid
expr_stmt|;
block|}
else|else
block|{
name|retval
operator|=
name|root
expr_stmt|;
block|}
block|}
else|else
block|{
name|retval
operator|=
name|root
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|retval
return|;
block|}
comment|/**      * Get the default appearance.      *       * @return the DA element of the dictionary object      */
specifier|public
name|COSString
name|getDefaultAppearance
parameter_list|()
block|{
return|return
operator|(
name|COSString
operator|)
name|getDictionary
argument_list|()
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|DA
argument_list|)
return|;
block|}
comment|/**      * Set the default appearance.      *       * @param daValue a string describing the default appearance      */
specifier|public
name|void
name|setDefaultAppearance
parameter_list|(
name|String
name|daValue
parameter_list|)
block|{
if|if
condition|(
name|daValue
operator|!=
literal|null
condition|)
block|{
name|getDictionary
argument_list|()
operator|.
name|setString
argument_list|(
name|COSName
operator|.
name|DA
argument_list|,
name|daValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getDictionary
argument_list|()
operator|.
name|removeItem
argument_list|(
name|COSName
operator|.
name|DA
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Get the value of NeedAppearances.      *       * @return the value of NeedAppearances, false if the value isn't set      */
specifier|public
name|boolean
name|isNeedAppearances
parameter_list|()
block|{
return|return
name|getDictionary
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|COSName
operator|.
name|NEED_APPEARANCES
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Set the NeedAppearances value.      *       * @param value the value for NeedAppearances      */
specifier|public
name|void
name|setNeedAppearances
parameter_list|(
name|Boolean
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|getDictionary
argument_list|()
operator|.
name|setBoolean
argument_list|(
name|COSName
operator|.
name|NEED_APPEARANCES
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getDictionary
argument_list|()
operator|.
name|removeItem
argument_list|(
name|COSName
operator|.
name|NEED_APPEARANCES
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This will get the default resources for the acro form.      *      * @return The default resources.      */
specifier|public
name|PDResources
name|getDefaultResources
parameter_list|()
block|{
name|PDResources
name|retval
init|=
literal|null
decl_stmt|;
name|COSDictionary
name|dr
init|=
operator|(
name|COSDictionary
operator|)
name|acroForm
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|DR
argument_list|)
decl_stmt|;
if|if
condition|(
name|dr
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
operator|new
name|PDResources
argument_list|(
name|dr
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * This will set the default resources for the acroform.      *      * @param dr The new default resources.      */
specifier|public
name|void
name|setDefaultResources
parameter_list|(
name|PDResources
name|dr
parameter_list|)
block|{
name|COSDictionary
name|drDict
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|dr
operator|!=
literal|null
condition|)
block|{
name|drDict
operator|=
name|dr
operator|.
name|getCOSObject
argument_list|()
expr_stmt|;
block|}
name|acroForm
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|DR
argument_list|,
name|drDict
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|COSBase
name|getCOSObject
parameter_list|()
block|{
return|return
name|acroForm
return|;
block|}
comment|/**      * This will tell if the AcroForm has XFA content.      *      * @return true if the AcroForm is an XFA form      */
specifier|public
name|boolean
name|hasXFA
parameter_list|()
block|{
return|return
name|acroForm
operator|.
name|containsKey
argument_list|(
name|COSName
operator|.
name|XFA
argument_list|)
return|;
block|}
comment|/**      * This will tell if the AcroForm is a dynamic XFA form.      *      * @return true if the AcroForm is a dynamic XFA form      */
specifier|public
name|boolean
name|xfaIsDynamic
parameter_list|()
block|{
return|return
name|hasXFA
argument_list|()
operator|&&
name|getFields
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/**      * Get the XFA resource, the XFA resource is only used for PDF 1.5+ forms.      *      * @return The xfa resource or null if it does not exist.      */
specifier|public
name|PDXFAResource
name|getXFA
parameter_list|()
block|{
name|PDXFAResource
name|xfa
init|=
literal|null
decl_stmt|;
name|COSBase
name|base
init|=
name|acroForm
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|XFA
argument_list|)
decl_stmt|;
if|if
condition|(
name|base
operator|!=
literal|null
condition|)
block|{
name|xfa
operator|=
operator|new
name|PDXFAResource
argument_list|(
name|base
argument_list|)
expr_stmt|;
block|}
return|return
name|xfa
return|;
block|}
comment|/**      * Set the XFA resource, this is only used for PDF 1.5+ forms.      *      * @param xfa The xfa resource.      */
specifier|public
name|void
name|setXFA
parameter_list|(
name|PDXFAResource
name|xfa
parameter_list|)
block|{
name|acroForm
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|XFA
argument_list|,
name|xfa
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the 'quadding' or justification of the text to be displayed.      * 0 - Left(default)<br/>      * 1 - Centered<br />      * 2 - Right<br />      * Please see the QUADDING_CONSTANTS.      *      * @return The justification of the text strings.      */
specifier|public
name|int
name|getQ
parameter_list|()
block|{
name|int
name|retval
init|=
literal|0
decl_stmt|;
name|COSNumber
name|number
init|=
operator|(
name|COSNumber
operator|)
name|getDictionary
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|Q
argument_list|)
decl_stmt|;
if|if
condition|(
name|number
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
name|number
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * This will set the quadding/justification of the text.  See QUADDING constants.      *      * @param q The new text justification.      */
specifier|public
name|void
name|setQ
parameter_list|(
name|int
name|q
parameter_list|)
block|{
name|getDictionary
argument_list|()
operator|.
name|setInt
argument_list|(
name|COSName
operator|.
name|Q
argument_list|,
name|q
argument_list|)
expr_stmt|;
block|}
comment|/**      * Determines if SignaturesExist is set.      *       * @return true if the document contains at least one signature.      */
specifier|public
name|boolean
name|isSignaturesExist
parameter_list|()
block|{
return|return
name|getDictionary
argument_list|()
operator|.
name|getFlag
argument_list|(
name|COSName
operator|.
name|SIG_FLAGS
argument_list|,
name|FLAG_SIGNATURES_EXIST
argument_list|)
return|;
block|}
comment|/**      * Set the SignaturesExist bit.      *      * @param signaturesExist The value for SignaturesExist.      */
specifier|public
name|void
name|setSignaturesExist
parameter_list|(
name|boolean
name|signaturesExist
parameter_list|)
block|{
name|getDictionary
argument_list|()
operator|.
name|setFlag
argument_list|(
name|COSName
operator|.
name|SIG_FLAGS
argument_list|,
name|FLAG_SIGNATURES_EXIST
argument_list|,
name|signaturesExist
argument_list|)
expr_stmt|;
block|}
comment|/**      * Determines if AppendOnly is set.      *       * @return true if the document contains signatures that may be invalidated if the file is saved.      */
specifier|public
name|boolean
name|isAppendOnly
parameter_list|()
block|{
return|return
name|getDictionary
argument_list|()
operator|.
name|getFlag
argument_list|(
name|COSName
operator|.
name|SIG_FLAGS
argument_list|,
name|FLAG_APPEND_ONLY
argument_list|)
return|;
block|}
comment|/**      * Set the AppendOnly bit.      *      * @param appendOnly The value for AppendOnly.      */
specifier|public
name|void
name|setAppendOnly
parameter_list|(
name|boolean
name|appendOnly
parameter_list|)
block|{
name|getDictionary
argument_list|()
operator|.
name|setFlag
argument_list|(
name|COSName
operator|.
name|SIG_FLAGS
argument_list|,
name|FLAG_APPEND_ONLY
argument_list|,
name|appendOnly
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

