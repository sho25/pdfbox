begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|Hex
import|;
end_import

begin_comment
comment|/**  * Writes ToUnicode Mapping Files.  *  * @author John Hewson  */
end_comment

begin_class
specifier|final
class|class
name|ToUnicodeWriter
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|cidToUnicode
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|int
name|wMode
decl_stmt|;
comment|/**      * To test corner case of PDFBOX-4302.      */
specifier|static
specifier|final
name|int
name|MAX_ENTRIES_PER_OPERATOR
init|=
literal|100
decl_stmt|;
comment|/**      * Creates a new ToUnicode CMap writer.      */
name|ToUnicodeWriter
parameter_list|()
block|{
name|this
operator|.
name|wMode
operator|=
literal|0
expr_stmt|;
block|}
comment|/**      * Sets the WMode (writing mode) of this CMap.      *      * @param wMode 1 for vertical, 0 for horizontal (default)      */
specifier|public
name|void
name|setWMode
parameter_list|(
name|int
name|wMode
parameter_list|)
block|{
name|this
operator|.
name|wMode
operator|=
name|wMode
expr_stmt|;
block|}
comment|/**      * Adds the given CID to Unicode mapping.      *      * @param cid CID      * @param text Unicode text, up to 512 bytes.      */
specifier|public
name|void
name|add
parameter_list|(
name|int
name|cid
parameter_list|,
name|String
name|text
parameter_list|)
block|{
if|if
condition|(
name|cid
argument_list|<
literal|0
operator|||
name|cid
argument_list|>
literal|0xFFFF
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"CID is not valid"
argument_list|)
throw|;
block|}
if|if
condition|(
name|text
operator|==
literal|null
operator|||
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Text is null or empty"
argument_list|)
throw|;
block|}
name|cidToUnicode
operator|.
name|put
argument_list|(
name|cid
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
comment|/**      * Writes the CMap as ASCII to the given output stream.      *      * @param out ASCII output stream      * @throws IOException if the stream could not be written      */
specifier|public
name|void
name|writeTo
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|BufferedWriter
name|writer
init|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|out
argument_list|,
name|Charsets
operator|.
name|US_ASCII
argument_list|)
argument_list|)
decl_stmt|;
name|writeLine
argument_list|(
name|writer
argument_list|,
literal|"/CIDInit /ProcSet findresource begin"
argument_list|)
expr_stmt|;
name|writeLine
argument_list|(
name|writer
argument_list|,
literal|"12 dict begin\n"
argument_list|)
expr_stmt|;
name|writeLine
argument_list|(
name|writer
argument_list|,
literal|"begincmap"
argument_list|)
expr_stmt|;
name|writeLine
argument_list|(
name|writer
argument_list|,
literal|"/CIDSystemInfo"
argument_list|)
expr_stmt|;
name|writeLine
argument_list|(
name|writer
argument_list|,
literal|"<< /Registry (Adobe)"
argument_list|)
expr_stmt|;
name|writeLine
argument_list|(
name|writer
argument_list|,
literal|"/Ordering (UCS)"
argument_list|)
expr_stmt|;
name|writeLine
argument_list|(
name|writer
argument_list|,
literal|"/Supplement 0"
argument_list|)
expr_stmt|;
name|writeLine
argument_list|(
name|writer
argument_list|,
literal|">> def\n"
argument_list|)
expr_stmt|;
name|writeLine
argument_list|(
name|writer
argument_list|,
literal|"/CMapName /Adobe-Identity-UCS"
operator|+
literal|" def"
argument_list|)
expr_stmt|;
name|writeLine
argument_list|(
name|writer
argument_list|,
literal|"/CMapType 2 def\n"
argument_list|)
expr_stmt|;
comment|// 2 = ToUnicode
if|if
condition|(
name|wMode
operator|!=
literal|0
condition|)
block|{
name|writeLine
argument_list|(
name|writer
argument_list|,
literal|"/WMode /"
operator|+
name|wMode
operator|+
literal|" def"
argument_list|)
expr_stmt|;
block|}
comment|// ToUnicode always uses 16-bit CIDs
name|writeLine
argument_list|(
name|writer
argument_list|,
literal|"1 begincodespacerange"
argument_list|)
expr_stmt|;
name|writeLine
argument_list|(
name|writer
argument_list|,
literal|"<0000><FFFF>"
argument_list|)
expr_stmt|;
name|writeLine
argument_list|(
name|writer
argument_list|,
literal|"endcodespacerange\n"
argument_list|)
expr_stmt|;
comment|// CID -> Unicode mappings, we use ranges to generate a smaller CMap
name|List
argument_list|<
name|Integer
argument_list|>
name|srcFrom
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|srcTo
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dstString
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|srcPrev
init|=
operator|-
literal|1
decl_stmt|;
name|String
name|dstPrev
init|=
literal|""
decl_stmt|;
name|int
name|srcCode1
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|cidToUnicode
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|int
name|cid
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|text
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|cid
operator|==
name|srcPrev
operator|+
literal|1
operator|&&
comment|// CID must be last CID + 1
name|dstPrev
operator|.
name|codePointCount
argument_list|(
literal|0
argument_list|,
name|dstPrev
operator|.
name|length
argument_list|()
argument_list|)
operator|==
literal|1
operator|&&
comment|// no UTF-16 surrogates
name|text
operator|.
name|codePointAt
argument_list|(
literal|0
argument_list|)
operator|==
name|dstPrev
operator|.
name|codePointAt
argument_list|(
literal|0
argument_list|)
operator|+
literal|1
operator|&&
comment|// dstString must be prev + 1
name|dstPrev
operator|.
name|codePointAt
argument_list|(
literal|0
argument_list|)
operator|+
literal|1
operator|<=
literal|255
operator|-
operator|(
name|cid
operator|-
name|srcCode1
operator|)
condition|)
comment|// increment last byte only
block|{
comment|// extend range
name|srcTo
operator|.
name|set
argument_list|(
name|srcTo
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
name|cid
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// begin range
name|srcCode1
operator|=
name|cid
expr_stmt|;
name|srcFrom
operator|.
name|add
argument_list|(
name|cid
argument_list|)
expr_stmt|;
name|srcTo
operator|.
name|add
argument_list|(
name|cid
argument_list|)
expr_stmt|;
name|dstString
operator|.
name|add
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
name|srcPrev
operator|=
name|cid
expr_stmt|;
name|dstPrev
operator|=
name|text
expr_stmt|;
block|}
comment|// limit entries per operator
name|int
name|batchCount
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|srcFrom
operator|.
name|size
argument_list|()
operator|/
operator|(
name|double
operator|)
name|MAX_ENTRIES_PER_OPERATOR
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|batch
init|=
literal|0
init|;
name|batch
operator|<
name|batchCount
condition|;
name|batch
operator|++
control|)
block|{
name|int
name|count
init|=
name|batch
operator|==
name|batchCount
operator|-
literal|1
condition|?
name|srcFrom
operator|.
name|size
argument_list|()
operator|-
name|MAX_ENTRIES_PER_OPERATOR
operator|*
name|batch
else|:
name|MAX_ENTRIES_PER_OPERATOR
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|count
operator|+
literal|" beginbfrange\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|count
condition|;
name|j
operator|++
control|)
block|{
name|int
name|index
init|=
name|batch
operator|*
name|MAX_ENTRIES_PER_OPERATOR
operator|+
name|j
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|'<'
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|Hex
operator|.
name|getChars
argument_list|(
name|srcFrom
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|shortValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"> "
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|'<'
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|Hex
operator|.
name|getChars
argument_list|(
name|srcTo
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|shortValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"> "
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|'<'
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|Hex
operator|.
name|getCharsUTF16BE
argument_list|(
name|dstString
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|">\n"
argument_list|)
expr_stmt|;
block|}
name|writeLine
argument_list|(
name|writer
argument_list|,
literal|"endbfrange\n"
argument_list|)
expr_stmt|;
block|}
comment|// footer
name|writeLine
argument_list|(
name|writer
argument_list|,
literal|"endcmap"
argument_list|)
expr_stmt|;
name|writeLine
argument_list|(
name|writer
argument_list|,
literal|"CMapName currentdict /CMap defineresource pop"
argument_list|)
expr_stmt|;
name|writeLine
argument_list|(
name|writer
argument_list|,
literal|"end"
argument_list|)
expr_stmt|;
name|writeLine
argument_list|(
name|writer
argument_list|,
literal|"end"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|writeLine
parameter_list|(
name|BufferedWriter
name|writer
parameter_list|,
name|String
name|text
parameter_list|)
throws|throws
name|IOException
block|{
name|writer
operator|.
name|write
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

