begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|handlers
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDRectangle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDColor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAppearanceDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAppearanceEntry
import|;
end_import

begin_comment
comment|/**  * Generic handler to generate the fields appearance.  *   * Individual handler will provide specific implementations for different field  * types.  *   */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|PDAppearanceHandler
block|{
specifier|private
name|PDAnnotation
name|annotation
decl_stmt|;
specifier|public
name|PDAppearanceHandler
parameter_list|(
name|PDAnnotation
name|annotation
parameter_list|)
block|{
name|this
operator|.
name|annotation
operator|=
name|annotation
expr_stmt|;
block|}
specifier|public
name|void
name|generateAppearanceStreams
parameter_list|()
block|{
if|if
condition|(
name|annotation
operator|.
name|getRectangle
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|generateNormalAppearance
argument_list|()
expr_stmt|;
name|generateRolloverAppearance
argument_list|()
expr_stmt|;
name|generateDownAppearance
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|abstract
name|void
name|generateNormalAppearance
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|void
name|generateRolloverAppearance
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|void
name|generateDownAppearance
parameter_list|()
function_decl|;
name|PDAnnotation
name|getAnnotation
parameter_list|()
block|{
return|return
name|annotation
return|;
block|}
comment|/**      * Get the line with of the border.      *       * Get the width of the line used to draw a border around the annotation.      * This may either be specified by the annotation dictionaries Border      * setting or by the W entry in the BS border style dictionary. If both are      * missing the default width is 1.      *       * @return the line width      */
comment|// TODO: according to the PDF spec the use of the BS entry is annotation
comment|// specific
comment|// so we will leave that to be implemented by individual handlers.
comment|// If at the end all annotations support the BS entry this can be handled
comment|// here and removed from the individual handlers.
specifier|abstract
name|float
name|getLineWidth
parameter_list|()
function_decl|;
name|PDColor
name|getColor
parameter_list|()
block|{
return|return
name|annotation
operator|.
name|getColor
argument_list|()
return|;
block|}
name|PDRectangle
name|getRectangle
parameter_list|()
block|{
return|return
name|annotation
operator|.
name|getRectangle
argument_list|()
return|;
block|}
comment|/**      * Get the annotations appearance dictionary.      *       *<p>This will get the annotations appearance dictionary. If this is      * not existent an empty appearance dictionary will be created.      *       * @return the annotations appearance dictionary      */
name|PDAppearanceDictionary
name|getAppearance
parameter_list|()
block|{
name|PDAppearanceDictionary
name|appearanceDictionary
init|=
name|annotation
operator|.
name|getAppearance
argument_list|()
decl_stmt|;
if|if
condition|(
name|appearanceDictionary
operator|==
literal|null
condition|)
block|{
name|appearanceDictionary
operator|=
operator|new
name|PDAppearanceDictionary
argument_list|()
expr_stmt|;
name|annotation
operator|.
name|setAppearance
argument_list|(
name|appearanceDictionary
argument_list|)
expr_stmt|;
block|}
return|return
name|appearanceDictionary
return|;
block|}
comment|/**      * Get the annotations normal appearance.      *       *<p>This will get the annotations normal appearance. If this is      * not existent an empty appearance entry will be created.      *       * @return the appearance entry representing the normal appearance.      */
name|PDAppearanceEntry
name|getNormalAppearance
parameter_list|()
block|{
name|PDAppearanceDictionary
name|appearanceDictionary
init|=
name|getAppearance
argument_list|()
decl_stmt|;
name|PDAppearanceEntry
name|appearanceEntry
init|=
name|appearanceDictionary
operator|.
name|getNormalAppearance
argument_list|()
decl_stmt|;
if|if
condition|(
name|appearanceEntry
operator|.
name|isSubDictionary
argument_list|()
condition|)
block|{
name|appearanceEntry
operator|=
operator|new
name|PDAppearanceEntry
argument_list|(
operator|new
name|COSStream
argument_list|()
argument_list|)
expr_stmt|;
name|appearanceDictionary
operator|.
name|setNormalAppearance
argument_list|(
name|appearanceEntry
argument_list|)
expr_stmt|;
block|}
return|return
name|appearanceEntry
return|;
block|}
comment|/**      * Get the annotations down appearance.      *       *<p>This will get the annotations down appearance. If this is      * not existent an empty appearance entry will be created.      *       * @return the appearance entry representing the down appearance.      */
name|PDAppearanceEntry
name|getDownAppearance
parameter_list|()
block|{
name|PDAppearanceDictionary
name|appearanceDictionary
init|=
name|getAppearance
argument_list|()
decl_stmt|;
name|PDAppearanceEntry
name|appearanceEntry
init|=
name|appearanceDictionary
operator|.
name|getDownAppearance
argument_list|()
decl_stmt|;
if|if
condition|(
name|appearanceEntry
operator|.
name|isSubDictionary
argument_list|()
condition|)
block|{
name|appearanceEntry
operator|=
operator|new
name|PDAppearanceEntry
argument_list|(
operator|new
name|COSStream
argument_list|()
argument_list|)
expr_stmt|;
name|appearanceDictionary
operator|.
name|setDownAppearance
argument_list|(
name|appearanceEntry
argument_list|)
expr_stmt|;
block|}
return|return
name|appearanceEntry
return|;
block|}
comment|/**      * Get the annotations rollover appearance.      *       *<p>This will get the annotations rollover appearance. If this is      * not existent an empty appearance entry will be created.      *       * @return the appearance entry representing the rollover appearance.      */
name|PDAppearanceEntry
name|getRolloverAppearance
parameter_list|()
block|{
name|PDAppearanceDictionary
name|appearanceDictionary
init|=
name|getAppearance
argument_list|()
decl_stmt|;
name|PDAppearanceEntry
name|appearanceEntry
init|=
name|appearanceDictionary
operator|.
name|getDownAppearance
argument_list|()
decl_stmt|;
if|if
condition|(
name|appearanceEntry
operator|.
name|isSubDictionary
argument_list|()
condition|)
block|{
name|appearanceEntry
operator|=
operator|new
name|PDAppearanceEntry
argument_list|(
operator|new
name|COSStream
argument_list|()
argument_list|)
expr_stmt|;
name|appearanceDictionary
operator|.
name|setRolloverAppearance
argument_list|(
name|appearanceEntry
argument_list|)
expr_stmt|;
block|}
return|return
name|appearanceEntry
return|;
block|}
block|}
end_class

end_unit

