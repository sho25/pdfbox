begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|fdf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|COSObjectable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|action
operator|.
name|PDActionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|action
operator|.
name|PDActionJavaScript
import|;
end_import

begin_comment
comment|/**  * This represents an FDF JavaScript dictionary that is part of the FDF document.  *  * @author Ben Litchfield  */
end_comment

begin_class
specifier|public
class|class
name|FDFJavaScript
implements|implements
name|COSObjectable
block|{
specifier|private
specifier|final
name|COSDictionary
name|dictionary
decl_stmt|;
comment|/**      * Default constructor.      */
specifier|public
name|FDFJavaScript
parameter_list|()
block|{
name|dictionary
operator|=
operator|new
name|COSDictionary
argument_list|()
expr_stmt|;
block|}
comment|/**      * Constructor.      *      * @param javaScript The FDF java script.      */
specifier|public
name|FDFJavaScript
parameter_list|(
name|COSDictionary
name|javaScript
parameter_list|)
block|{
name|dictionary
operator|=
name|javaScript
expr_stmt|;
block|}
comment|/**      * Convert this standard java object to a COS object.      *      * @return The cos object that matches this Java object.      */
annotation|@
name|Override
specifier|public
name|COSDictionary
name|getCOSObject
parameter_list|()
block|{
return|return
name|dictionary
return|;
block|}
comment|/**      * This will get the javascript that is executed before the import.      *      * @return Some javascript code.      */
specifier|public
name|String
name|getBefore
parameter_list|()
block|{
name|COSBase
name|base
init|=
name|dictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|BEFORE
argument_list|)
decl_stmt|;
if|if
condition|(
name|base
operator|instanceof
name|COSString
condition|)
block|{
return|return
operator|(
operator|(
name|COSString
operator|)
name|base
operator|)
operator|.
name|getString
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|base
operator|instanceof
name|COSStream
condition|)
block|{
return|return
operator|(
operator|(
name|COSStream
operator|)
name|base
operator|)
operator|.
name|getString
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * This will set the javascript code the will get execute before the import.      *      * @param before A reference to some javascript code.      */
specifier|public
name|void
name|setBefore
parameter_list|(
name|String
name|before
parameter_list|)
block|{
name|dictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|BEFORE
argument_list|,
operator|new
name|COSString
argument_list|(
name|before
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the javascript that is executed after the import.      *      * @return Some javascript code.      */
specifier|public
name|String
name|getAfter
parameter_list|()
block|{
name|COSBase
name|base
init|=
name|dictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|AFTER
argument_list|)
decl_stmt|;
if|if
condition|(
name|base
operator|instanceof
name|COSString
condition|)
block|{
return|return
operator|(
operator|(
name|COSString
operator|)
name|base
operator|)
operator|.
name|getString
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|base
operator|instanceof
name|COSStream
condition|)
block|{
return|return
operator|(
operator|(
name|COSStream
operator|)
name|base
operator|)
operator|.
name|getString
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * This will set the javascript code the will get execute after the import.      *      * @param after A reference to some javascript code.      */
specifier|public
name|void
name|setAfter
parameter_list|(
name|String
name|after
parameter_list|)
block|{
name|dictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|AFTER
argument_list|,
operator|new
name|COSString
argument_list|(
name|after
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the dictionary's "Doc" entry, that is, a map of key value pairs to be added to      * the document's JavaScript name tree.      *       * @return Map of named "JavaScript" dictionaries.      */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|PDActionJavaScript
argument_list|>
name|getDoc
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|PDActionJavaScript
argument_list|>
name|map
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|PDActionJavaScript
argument_list|>
argument_list|()
decl_stmt|;
name|COSArray
name|array
init|=
operator|(
name|COSArray
operator|)
name|dictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|DOC
argument_list|)
decl_stmt|;
if|if
condition|(
name|array
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|PDActionFactory
operator|.
name|createAction
argument_list|(
operator|(
name|COSDictionary
operator|)
name|array
operator|.
name|getObject
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
comment|/**      * Sets the dictionary's "Doc" entry.      *       * @param map Map of named "JavaScript" dictionaries.      */
specifier|public
name|void
name|setDoc
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|PDActionJavaScript
argument_list|>
name|map
parameter_list|)
block|{
name|COSArray
name|array
init|=
operator|new
name|COSArray
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|PDActionJavaScript
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|array
operator|.
name|add
argument_list|(
operator|new
name|COSString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|array
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|dictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|DOC
argument_list|,
name|array
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

