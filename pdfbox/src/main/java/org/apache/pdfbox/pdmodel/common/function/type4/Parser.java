begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|function
operator|.
name|type4
package|;
end_package

begin_comment
comment|/**  * Parser for PDF Type 4 functions. This implements a small subset of the PostScript  * language but is no full PostScript interpreter.  *  * @version $Revision$  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|Parser
block|{
comment|/** Used to indicate the parsers current state. */
specifier|private
specifier|static
enum|enum
name|State
block|{
name|NEWLINE
block|,
name|WHITESPACE
block|,
name|COMMENT
block|,
name|TOKEN
block|}
specifier|private
name|Parser
parameter_list|()
block|{
comment|//nop
block|}
comment|/**      * Parses a Type 4 function and sends the syntactic elements to the given      * syntax handler.      * @param input the text source      * @param handler the syntax handler      */
specifier|public
specifier|static
name|void
name|parse
parameter_list|(
name|CharSequence
name|input
parameter_list|,
name|SyntaxHandler
name|handler
parameter_list|)
block|{
name|Tokenizer
name|tokenizer
init|=
operator|new
name|Tokenizer
argument_list|(
name|input
argument_list|,
name|handler
argument_list|)
decl_stmt|;
name|tokenizer
operator|.
name|tokenize
argument_list|()
expr_stmt|;
block|}
comment|/**      * This interface defines all possible syntactic elements of a Type 4 function.      * It is called by the parser as the function is interpreted.      */
specifier|public
interface|interface
name|SyntaxHandler
block|{
comment|/**          * Indicates that a new line starts.          * @param text the new line character (CR, LF, CR/LF or FF)          */
name|void
name|newLine
parameter_list|(
name|CharSequence
name|text
parameter_list|)
function_decl|;
comment|/**          * Called when whitespace characters are encountered.          * @param text the whitespace text          */
name|void
name|whitespace
parameter_list|(
name|CharSequence
name|text
parameter_list|)
function_decl|;
comment|/**          * Called when a token is encountered. No distinction between operators and values          * is done here.          * @param text the token text          */
name|void
name|token
parameter_list|(
name|CharSequence
name|text
parameter_list|)
function_decl|;
comment|/**          * Called for a comment.          * @param text the comment          */
name|void
name|comment
parameter_list|(
name|CharSequence
name|text
parameter_list|)
function_decl|;
block|}
comment|/**      * Abstract base class for a {@link SyntaxHandler}.      */
specifier|public
specifier|abstract
specifier|static
class|class
name|AbstractSyntaxHandler
implements|implements
name|SyntaxHandler
block|{
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|void
name|comment
parameter_list|(
name|CharSequence
name|text
parameter_list|)
block|{
comment|//nop
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|void
name|newLine
parameter_list|(
name|CharSequence
name|text
parameter_list|)
block|{
comment|//nop
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|void
name|whitespace
parameter_list|(
name|CharSequence
name|text
parameter_list|)
block|{
comment|//nop
block|}
block|}
comment|/**      * Tokenizer for Type 4 functions.      */
specifier|private
specifier|static
specifier|final
class|class
name|Tokenizer
block|{
specifier|private
specifier|static
specifier|final
name|char
name|NUL
init|=
literal|'\u0000'
decl_stmt|;
comment|//NUL
specifier|private
specifier|static
specifier|final
name|char
name|EOT
init|=
literal|'\u0004'
decl_stmt|;
comment|//END OF TRANSMISSION
specifier|private
specifier|static
specifier|final
name|char
name|TAB
init|=
literal|'\u0009'
decl_stmt|;
comment|//TAB CHARACTER
specifier|private
specifier|static
specifier|final
name|char
name|FF
init|=
literal|'\u000C'
decl_stmt|;
comment|//FORM FEED
specifier|private
specifier|static
specifier|final
name|char
name|CR
init|=
literal|'\r'
decl_stmt|;
comment|//CARRIAGE RETURN
specifier|private
specifier|static
specifier|final
name|char
name|LF
init|=
literal|'\n'
decl_stmt|;
comment|//LINE FEED
specifier|private
specifier|static
specifier|final
name|char
name|SPACE
init|=
literal|'\u0020'
decl_stmt|;
comment|//SPACE
specifier|private
specifier|final
name|CharSequence
name|input
decl_stmt|;
specifier|private
name|int
name|index
decl_stmt|;
specifier|private
specifier|final
name|SyntaxHandler
name|handler
decl_stmt|;
specifier|private
name|State
name|state
init|=
name|State
operator|.
name|WHITESPACE
decl_stmt|;
specifier|private
specifier|final
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|private
name|Tokenizer
parameter_list|(
name|CharSequence
name|text
parameter_list|,
name|SyntaxHandler
name|syntaxHandler
parameter_list|)
block|{
name|this
operator|.
name|input
operator|=
name|text
expr_stmt|;
name|this
operator|.
name|handler
operator|=
name|syntaxHandler
expr_stmt|;
block|}
specifier|private
name|boolean
name|hasMore
parameter_list|()
block|{
return|return
name|index
operator|<
name|input
operator|.
name|length
argument_list|()
return|;
block|}
specifier|private
name|char
name|currentChar
parameter_list|()
block|{
return|return
name|input
operator|.
name|charAt
argument_list|(
name|index
argument_list|)
return|;
block|}
specifier|private
name|char
name|nextChar
parameter_list|()
block|{
name|index
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|hasMore
argument_list|()
condition|)
block|{
return|return
name|EOT
return|;
block|}
else|else
block|{
return|return
name|currentChar
argument_list|()
return|;
block|}
block|}
specifier|private
name|char
name|peek
parameter_list|()
block|{
if|if
condition|(
name|index
operator|<
name|input
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
return|return
name|input
operator|.
name|charAt
argument_list|(
name|index
operator|+
literal|1
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|EOT
return|;
block|}
block|}
specifier|private
name|State
name|nextState
parameter_list|()
block|{
name|char
name|ch
init|=
name|currentChar
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|ch
condition|)
block|{
case|case
name|CR
case|:
case|case
name|LF
case|:
case|case
name|FF
case|:
comment|//FF
name|state
operator|=
name|State
operator|.
name|NEWLINE
expr_stmt|;
break|break;
case|case
name|NUL
case|:
case|case
name|TAB
case|:
case|case
name|SPACE
case|:
name|state
operator|=
name|State
operator|.
name|WHITESPACE
expr_stmt|;
break|break;
case|case
literal|'%'
case|:
name|state
operator|=
name|State
operator|.
name|COMMENT
expr_stmt|;
break|break;
default|default:
name|state
operator|=
name|State
operator|.
name|TOKEN
expr_stmt|;
block|}
return|return
name|state
return|;
block|}
specifier|private
name|void
name|tokenize
parameter_list|()
block|{
while|while
condition|(
name|hasMore
argument_list|()
condition|)
block|{
name|buffer
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|nextState
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|NEWLINE
case|:
name|scanNewLine
argument_list|()
expr_stmt|;
break|break;
case|case
name|WHITESPACE
case|:
name|scanWhitespace
argument_list|()
expr_stmt|;
break|break;
case|case
name|COMMENT
case|:
name|scanComment
argument_list|()
expr_stmt|;
break|break;
default|default:
name|scanToken
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|scanNewLine
parameter_list|()
block|{
assert|assert
name|state
operator|==
name|State
operator|.
name|NEWLINE
assert|;
name|char
name|ch
init|=
name|currentChar
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
if|if
condition|(
name|ch
operator|==
name|CR
operator|&&
name|peek
argument_list|()
operator|==
name|LF
condition|)
block|{
comment|//CRLF is treated as one newline
name|buffer
operator|.
name|append
argument_list|(
name|nextChar
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|handler
operator|.
name|newLine
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|nextChar
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|scanWhitespace
parameter_list|()
block|{
assert|assert
name|state
operator|==
name|State
operator|.
name|WHITESPACE
assert|;
name|buffer
operator|.
name|append
argument_list|(
name|currentChar
argument_list|()
argument_list|)
expr_stmt|;
name|loop
label|:
while|while
condition|(
name|hasMore
argument_list|()
condition|)
block|{
name|char
name|ch
init|=
name|nextChar
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|ch
condition|)
block|{
case|case
name|NUL
case|:
case|case
name|TAB
case|:
case|case
name|SPACE
case|:
name|buffer
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break
name|loop
break|;
block|}
block|}
name|handler
operator|.
name|whitespace
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|scanComment
parameter_list|()
block|{
assert|assert
name|state
operator|==
name|State
operator|.
name|COMMENT
assert|;
name|buffer
operator|.
name|append
argument_list|(
name|currentChar
argument_list|()
argument_list|)
expr_stmt|;
name|loop
label|:
while|while
condition|(
name|hasMore
argument_list|()
condition|)
block|{
name|char
name|ch
init|=
name|nextChar
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|ch
condition|)
block|{
case|case
name|CR
case|:
case|case
name|LF
case|:
case|case
name|FF
case|:
break|break
name|loop
break|;
default|default:
name|buffer
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
comment|//EOF reached
name|handler
operator|.
name|comment
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|scanToken
parameter_list|()
block|{
assert|assert
name|state
operator|==
name|State
operator|.
name|TOKEN
assert|;
name|char
name|ch
init|=
name|currentChar
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|ch
condition|)
block|{
case|case
literal|'{'
case|:
case|case
literal|'}'
case|:
name|handler
operator|.
name|token
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|nextChar
argument_list|()
expr_stmt|;
return|return;
default|default:
comment|//continue
block|}
name|loop
label|:
while|while
condition|(
name|hasMore
argument_list|()
condition|)
block|{
name|ch
operator|=
name|nextChar
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|ch
condition|)
block|{
case|case
name|NUL
case|:
case|case
name|TAB
case|:
case|case
name|SPACE
case|:
case|case
name|CR
case|:
case|case
name|LF
case|:
case|case
name|FF
case|:
case|case
name|EOT
case|:
case|case
literal|'{'
case|:
case|case
literal|'}'
case|:
break|break
name|loop
break|;
default|default:
name|buffer
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
comment|//EOF reached
name|handler
operator|.
name|token
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

