begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Font
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|FontFormatException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|afm
operator|.
name|AFMParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|afm
operator|.
name|FontMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cff
operator|.
name|AFMFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cff
operator|.
name|charset
operator|.
name|CFFCharset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cff
operator|.
name|encoding
operator|.
name|CFFEncoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cff
operator|.
name|CFFFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cff
operator|.
name|CFFParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cff
operator|.
name|Type1FontFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|util
operator|.
name|BoundingBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSFloat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSNumber
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|encoding
operator|.
name|Encoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|encoding
operator|.
name|EncodingManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|exceptions
operator|.
name|WrappedIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDMatrix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDRectangle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDStream
import|;
end_import

begin_comment
comment|/**  * This class represents a CFF/Type2 Font (aka Type1C Font).  * @author Villu Ruusmann  * @version $Revision: 10.0$  */
end_comment

begin_class
specifier|public
class|class
name|PDType1CFont
extends|extends
name|PDSimpleFont
block|{
specifier|private
name|CFFFont
name|cffFont
init|=
literal|null
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|codeToName
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|codeToCharacter
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|characterToCode
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|FontMetric
name|fontMetric
init|=
literal|null
decl_stmt|;
specifier|private
name|Font
name|awtFont
init|=
literal|null
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|glyphWidths
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|glyphHeights
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Float
name|avgWidth
init|=
literal|null
decl_stmt|;
specifier|private
name|PDRectangle
name|fontBBox
init|=
literal|null
decl_stmt|;
specifier|private
name|PDMatrix
name|fontMatrix
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|PDType1CFont
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|SPACE_BYTES
init|=
block|{
operator|(
name|byte
operator|)
literal|32
block|}
decl_stmt|;
specifier|private
name|COSDictionary
name|fontDict
init|=
literal|null
decl_stmt|;
comment|/**      * Constructor.      * @param fontDictionary the corresponding dictionary      */
specifier|public
name|PDType1CFont
parameter_list|(
name|COSDictionary
name|fontDictionary
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|fontDictionary
argument_list|)
expr_stmt|;
name|fontDict
operator|=
name|fontDictionary
expr_stmt|;
name|load
argument_list|()
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|String
name|encode
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|character
init|=
name|getCharacter
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|character
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"No character for code "
operator|+
operator|(
name|bytes
index|[
name|offset
index|]
operator|&
literal|0xff
operator|)
operator|+
literal|" in "
operator|+
name|this
operator|.
name|cffFont
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|character
return|;
block|}
specifier|private
name|String
name|getCharacter
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|length
operator|>
literal|2
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|code
init|=
name|bytes
index|[
name|offset
index|]
operator|&
literal|0xff
decl_stmt|;
if|if
condition|(
name|length
operator|==
literal|2
condition|)
block|{
name|code
operator|=
name|code
operator|*
literal|256
operator|+
name|bytes
index|[
name|offset
operator|+
literal|1
index|]
operator|&
literal|0xff
expr_stmt|;
block|}
return|return
operator|(
name|String
operator|)
name|this
operator|.
name|codeToCharacter
operator|.
name|get
argument_list|(
name|code
argument_list|)
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|float
name|getFontWidth
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|name
init|=
name|getName
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
operator|&&
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|SPACE_BYTES
argument_list|,
name|bytes
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"No name for code "
operator|+
operator|(
name|bytes
index|[
name|offset
index|]
operator|&
literal|0xff
operator|)
operator|+
literal|" in "
operator|+
name|this
operator|.
name|cffFont
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|Float
name|width
init|=
operator|(
name|Float
operator|)
name|this
operator|.
name|glyphWidths
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|width
operator|==
literal|null
condition|)
block|{
name|width
operator|=
name|Float
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|fontMetric
operator|.
name|getCharacterWidth
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|glyphWidths
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|width
argument_list|)
expr_stmt|;
block|}
return|return
name|width
operator|.
name|floatValue
argument_list|()
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|float
name|getFontHeight
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|name
init|=
name|getName
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"No name for code "
operator|+
operator|(
name|bytes
index|[
name|offset
index|]
operator|&
literal|0xff
operator|)
operator|+
literal|" in "
operator|+
name|this
operator|.
name|cffFont
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|Float
name|height
init|=
operator|(
name|Float
operator|)
name|this
operator|.
name|glyphHeights
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|height
operator|==
literal|null
condition|)
block|{
name|height
operator|=
name|Float
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|fontMetric
operator|.
name|getCharacterHeight
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|glyphHeights
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|height
argument_list|)
expr_stmt|;
block|}
return|return
name|height
operator|.
name|floatValue
argument_list|()
return|;
block|}
specifier|private
name|String
name|getName
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|length
operator|>
literal|2
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|code
init|=
name|bytes
index|[
name|offset
index|]
operator|&
literal|0xff
decl_stmt|;
if|if
condition|(
name|length
operator|==
literal|2
condition|)
block|{
name|code
operator|=
name|code
operator|*
literal|256
operator|+
name|bytes
index|[
name|offset
operator|+
literal|1
index|]
operator|&
literal|0xff
expr_stmt|;
block|}
return|return
operator|(
name|String
operator|)
name|this
operator|.
name|codeToName
operator|.
name|get
argument_list|(
name|code
argument_list|)
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|float
name|getStringWidth
parameter_list|(
name|String
name|string
parameter_list|)
throws|throws
name|IOException
block|{
name|float
name|width
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|string
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|character
init|=
name|string
operator|.
name|substring
argument_list|(
name|i
argument_list|,
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
name|Integer
name|code
init|=
name|getCode
argument_list|(
name|character
argument_list|)
decl_stmt|;
if|if
condition|(
name|code
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"No code for character "
operator|+
name|character
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|width
operator|+=
name|getFontWidth
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
name|code
operator|.
name|intValue
argument_list|()
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|width
return|;
block|}
specifier|private
name|Integer
name|getCode
parameter_list|(
name|String
name|character
parameter_list|)
block|{
return|return
operator|(
name|Integer
operator|)
name|this
operator|.
name|characterToCode
operator|.
name|get
argument_list|(
name|character
argument_list|)
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|float
name|getAverageFontWidth
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|avgWidth
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|avgWidth
operator|=
name|Float
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|fontMetric
operator|.
name|getAverageCharacterWidth
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|avgWidth
operator|.
name|floatValue
argument_list|()
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|PDRectangle
name|getFontBoundingBox
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|fontBBox
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|fontBBox
operator|=
operator|new
name|PDRectangle
argument_list|(
name|this
operator|.
name|fontMetric
operator|.
name|getFontBBox
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|fontBBox
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|PDMatrix
name|getFontMatrix
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|fontMatrix
operator|==
literal|null
condition|)
block|{
name|List
argument_list|<
name|Number
argument_list|>
name|numbers
init|=
operator|(
name|List
argument_list|<
name|Number
argument_list|>
operator|)
name|this
operator|.
name|cffFont
operator|.
name|getProperty
argument_list|(
literal|"FontMatrix"
argument_list|)
decl_stmt|;
if|if
condition|(
name|numbers
operator|!=
literal|null
operator|&&
name|numbers
operator|.
name|size
argument_list|()
operator|==
literal|6
condition|)
block|{
name|COSArray
name|array
init|=
operator|new
name|COSArray
argument_list|()
decl_stmt|;
for|for
control|(
name|Number
name|number
range|:
name|numbers
control|)
block|{
name|array
operator|.
name|add
argument_list|(
operator|new
name|COSFloat
argument_list|(
name|number
operator|.
name|floatValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|fontMatrix
operator|=
operator|new
name|PDMatrix
argument_list|(
name|array
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|fontMatrix
operator|=
name|super
operator|.
name|getFontMatrix
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|this
operator|.
name|fontMatrix
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|Font
name|getawtFont
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|awtFont
return|;
block|}
specifier|private
name|void
name|load
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|cffBytes
init|=
name|loadBytes
argument_list|()
decl_stmt|;
name|CFFParser
name|cffParser
init|=
operator|new
name|CFFParser
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CFFFont
argument_list|>
name|fonts
init|=
name|cffParser
operator|.
name|parse
argument_list|(
name|cffBytes
argument_list|)
decl_stmt|;
name|this
operator|.
name|cffFont
operator|=
operator|(
name|CFFFont
operator|)
name|fonts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|CFFEncoding
name|encoding
init|=
name|this
operator|.
name|cffFont
operator|.
name|getEncoding
argument_list|()
decl_stmt|;
name|PDFEncoding
name|pdfEncoding
init|=
operator|new
name|PDFEncoding
argument_list|(
name|encoding
argument_list|)
decl_stmt|;
name|CFFCharset
name|charset
init|=
name|this
operator|.
name|cffFont
operator|.
name|getCharset
argument_list|()
decl_stmt|;
name|PDFCharset
name|pdfCharset
init|=
operator|new
name|PDFCharset
argument_list|(
name|charset
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|charStringsDict
init|=
name|this
operator|.
name|cffFont
operator|.
name|getCharStringsDict
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|pdfCharStringsDict
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|pdfCharStringsDict
operator|.
name|put
argument_list|(
literal|".notdef"
argument_list|,
name|charStringsDict
operator|.
name|get
argument_list|(
literal|".notdef"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|codeToNameMap
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|CFFFont
operator|.
name|Mapping
argument_list|>
name|mappings
init|=
name|this
operator|.
name|cffFont
operator|.
name|getMappings
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|CFFFont
operator|.
name|Mapping
argument_list|>
name|it
init|=
name|mappings
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CFFFont
operator|.
name|Mapping
name|mapping
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Integer
name|code
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|mapping
operator|.
name|getCode
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|mapping
operator|.
name|getName
argument_list|()
decl_stmt|;
name|codeToNameMap
operator|.
name|put
argument_list|(
name|code
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|knownNames
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|codeToNameMap
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|codeToNameOverride
init|=
name|loadOverride
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|>
name|it
init|=
operator|(
name|codeToNameOverride
operator|.
name|entrySet
argument_list|()
operator|)
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|entry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Integer
name|code
init|=
operator|(
name|Integer
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|name
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|knownNames
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|codeToNameMap
operator|.
name|put
argument_list|(
name|code
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
name|Map
name|nameToCharacter
decl_stmt|;
try|try
block|{
comment|// TODO remove access by reflection
name|Field
name|nameToCharacterField
init|=
name|Encoding
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"NAME_TO_CHARACTER"
argument_list|)
decl_stmt|;
name|nameToCharacterField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nameToCharacter
operator|=
operator|(
name|Map
operator|)
name|nameToCharacterField
operator|.
name|get
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|>
name|it
init|=
operator|(
name|codeToNameMap
operator|.
name|entrySet
argument_list|()
operator|)
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|entry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Integer
name|code
init|=
operator|(
name|Integer
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|name
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|uniName
init|=
literal|"uni"
decl_stmt|;
name|String
name|character
init|=
operator|(
name|String
operator|)
name|nameToCharacter
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|character
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|character
operator|.
name|length
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|uniName
operator|+=
name|hexString
argument_list|(
name|character
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|uniName
operator|+=
name|hexString
argument_list|(
name|code
operator|.
name|intValue
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|character
operator|=
name|String
operator|.
name|valueOf
argument_list|(
operator|(
name|char
operator|)
name|code
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|pdfEncoding
operator|.
name|register
argument_list|(
name|code
operator|.
name|intValue
argument_list|()
argument_list|,
name|code
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|pdfCharset
operator|.
name|register
argument_list|(
name|code
operator|.
name|intValue
argument_list|()
argument_list|,
name|uniName
argument_list|)
expr_stmt|;
name|this
operator|.
name|codeToName
operator|.
name|put
argument_list|(
name|code
argument_list|,
name|uniName
argument_list|)
expr_stmt|;
name|this
operator|.
name|codeToCharacter
operator|.
name|put
argument_list|(
name|code
argument_list|,
name|character
argument_list|)
expr_stmt|;
name|this
operator|.
name|characterToCode
operator|.
name|put
argument_list|(
name|character
argument_list|,
name|code
argument_list|)
expr_stmt|;
name|pdfCharStringsDict
operator|.
name|put
argument_list|(
name|uniName
argument_list|,
name|charStringsDict
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|cffFont
operator|.
name|setEncoding
argument_list|(
name|pdfEncoding
argument_list|)
expr_stmt|;
name|this
operator|.
name|cffFont
operator|.
name|setCharset
argument_list|(
name|pdfCharset
argument_list|)
expr_stmt|;
name|charStringsDict
operator|.
name|clear
argument_list|()
expr_stmt|;
name|charStringsDict
operator|.
name|putAll
argument_list|(
name|pdfCharStringsDict
argument_list|)
expr_stmt|;
name|this
operator|.
name|fontMetric
operator|=
name|prepareFontMetric
argument_list|(
name|this
operator|.
name|cffFont
argument_list|)
expr_stmt|;
name|this
operator|.
name|awtFont
operator|=
name|prepareAwtFont
argument_list|(
name|this
operator|.
name|cffFont
argument_list|)
expr_stmt|;
name|Number
name|defaultWidthX
init|=
operator|(
name|Number
operator|)
name|this
operator|.
name|cffFont
operator|.
name|getProperty
argument_list|(
literal|"defaultWidthX"
argument_list|)
decl_stmt|;
name|this
operator|.
name|glyphWidths
operator|.
name|put
argument_list|(
literal|null
argument_list|,
name|Float
operator|.
name|valueOf
argument_list|(
name|defaultWidthX
operator|.
name|floatValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|byte
index|[]
name|loadBytes
parameter_list|()
throws|throws
name|IOException
block|{
name|PDFontDescriptor
name|fd
init|=
name|getFontDescriptor
argument_list|()
decl_stmt|;
if|if
condition|(
name|fd
operator|!=
literal|null
operator|&&
name|fd
operator|instanceof
name|PDFontDescriptorDictionary
condition|)
block|{
name|PDStream
name|ff3Stream
init|=
operator|(
operator|(
name|PDFontDescriptorDictionary
operator|)
name|fd
operator|)
operator|.
name|getFontFile3
argument_list|()
decl_stmt|;
if|if
condition|(
name|ff3Stream
operator|!=
literal|null
condition|)
block|{
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
name|ff3Stream
operator|.
name|createInputStream
argument_list|()
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|512
index|]
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|count
init|=
name|is
operator|.
name|read
argument_list|(
name|buf
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|<
literal|0
condition|)
block|{
break|break;
block|}
name|os
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|os
operator|.
name|toByteArray
argument_list|()
return|;
block|}
block|}
throw|throw
operator|new
name|IOException
argument_list|()
throw|;
block|}
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|loadOverride
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|result
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|COSBase
name|encoding
init|=
name|fontDict
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|ENCODING
argument_list|)
decl_stmt|;
if|if
condition|(
name|encoding
operator|instanceof
name|COSName
condition|)
block|{
name|COSName
name|name
init|=
operator|(
name|COSName
operator|)
name|encoding
decl_stmt|;
name|result
operator|.
name|putAll
argument_list|(
name|loadEncoding
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|encoding
operator|instanceof
name|COSDictionary
condition|)
block|{
name|COSDictionary
name|encodingDic
init|=
operator|(
name|COSDictionary
operator|)
name|encoding
decl_stmt|;
name|COSName
name|baseName
init|=
operator|(
name|COSName
operator|)
name|encodingDic
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|BASE_ENCODING
argument_list|)
decl_stmt|;
if|if
condition|(
name|baseName
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|putAll
argument_list|(
name|loadEncoding
argument_list|(
name|baseName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|COSArray
name|differences
init|=
operator|(
name|COSArray
operator|)
name|encodingDic
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|DIFFERENCES
argument_list|)
decl_stmt|;
if|if
condition|(
name|differences
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|putAll
argument_list|(
name|loadDifferences
argument_list|(
name|differences
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|loadEncoding
parameter_list|(
name|COSName
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|result
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Encoding
name|encoding
init|=
name|EncodingManager
operator|.
name|INSTANCE
operator|.
name|getEncoding
argument_list|(
name|name
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|>
name|it
init|=
operator|(
name|encoding
operator|.
name|getCodeToNameMap
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|)
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|entry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|result
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|entry
operator|.
name|getValue
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|loadDifferences
parameter_list|(
name|COSArray
name|differences
parameter_list|)
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|result
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Integer
name|code
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|differences
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|COSBase
name|element
init|=
name|differences
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|element
operator|instanceof
name|COSNumber
condition|)
block|{
name|COSNumber
name|number
init|=
operator|(
name|COSNumber
operator|)
name|element
decl_stmt|;
name|code
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|number
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|element
operator|instanceof
name|COSName
condition|)
block|{
name|COSName
name|name
init|=
operator|(
name|COSName
operator|)
name|element
decl_stmt|;
name|result
operator|.
name|put
argument_list|(
name|code
argument_list|,
name|name
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|code
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|code
operator|.
name|intValue
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
specifier|static
name|String
name|hexString
parameter_list|(
name|int
name|code
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|String
name|string
init|=
name|Integer
operator|.
name|toHexString
argument_list|(
name|code
argument_list|)
decl_stmt|;
while|while
condition|(
name|string
operator|.
name|length
argument_list|()
operator|<
name|length
condition|)
block|{
name|string
operator|=
operator|(
literal|"0"
operator|+
name|string
operator|)
expr_stmt|;
block|}
return|return
name|string
return|;
block|}
specifier|private
specifier|static
name|FontMetric
name|prepareFontMetric
parameter_list|(
name|CFFFont
name|font
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|afmBytes
init|=
name|AFMFormatter
operator|.
name|format
argument_list|(
name|font
argument_list|)
decl_stmt|;
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|afmBytes
argument_list|)
decl_stmt|;
try|try
block|{
name|AFMParser
name|afmParser
init|=
operator|new
name|AFMParser
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|afmParser
operator|.
name|parse
argument_list|()
expr_stmt|;
name|FontMetric
name|result
init|=
name|afmParser
operator|.
name|getResult
argument_list|()
decl_stmt|;
comment|// Replace default FontBBox value with a newly computed one
name|BoundingBox
name|bounds
init|=
name|result
operator|.
name|getFontBBox
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|numbers
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
operator|(
name|int
operator|)
name|bounds
operator|.
name|getLowerLeftX
argument_list|()
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
operator|(
name|int
operator|)
name|bounds
operator|.
name|getLowerLeftY
argument_list|()
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
operator|(
name|int
operator|)
name|bounds
operator|.
name|getUpperRightX
argument_list|()
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
operator|(
name|int
operator|)
name|bounds
operator|.
name|getUpperRightY
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|font
operator|.
name|addValueToTopDict
argument_list|(
literal|"FontBBox"
argument_list|,
name|numbers
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
finally|finally
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|Font
name|prepareAwtFont
parameter_list|(
name|CFFFont
name|font
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|type1Bytes
init|=
name|Type1FontFormatter
operator|.
name|format
argument_list|(
name|font
argument_list|)
decl_stmt|;
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|type1Bytes
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|Font
operator|.
name|createFont
argument_list|(
name|Font
operator|.
name|TYPE1_FONT
argument_list|,
name|is
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|FontFormatException
name|ffe
parameter_list|)
block|{
throw|throw
operator|new
name|WrappedIOException
argument_list|(
name|ffe
argument_list|)
throw|;
block|}
finally|finally
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * This class represents a PDFEncoding.      *      */
specifier|private
specifier|static
class|class
name|PDFEncoding
extends|extends
name|CFFEncoding
block|{
specifier|private
name|PDFEncoding
parameter_list|(
name|CFFEncoding
name|parent
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Entry
argument_list|>
name|parentEntries
init|=
name|parent
operator|.
name|getEntries
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|parentEntries
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|addEntry
argument_list|(
name|parentEntries
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isFontSpecific
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
comment|/**      * This class represents a PDFCharset.      *      */
specifier|private
specifier|static
class|class
name|PDFCharset
extends|extends
name|CFFCharset
block|{
specifier|private
name|PDFCharset
parameter_list|(
name|CFFCharset
name|parent
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Entry
argument_list|>
name|parentEntries
init|=
name|parent
operator|.
name|getEntries
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|parentEntries
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|addEntry
argument_list|(
name|parentEntries
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isFontSpecific
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

