begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|AffineTransform
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|GeneralPath
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|Point2D
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|EncodedFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|FontBoxFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cff
operator|.
name|CFFParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cff
operator|.
name|CFFType1Font
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|util
operator|.
name|BoundingBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDRectangle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|encoding
operator|.
name|Encoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|encoding
operator|.
name|StandardEncoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|encoding
operator|.
name|Type1Encoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|Matrix
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|UniUtil
operator|.
name|getUniNameOfCodePoint
import|;
end_import

begin_comment
comment|/**  * Type 1-equivalent CFF font.  *  * @author Villu Ruusmann  * @author John Hewson  */
end_comment

begin_class
specifier|public
class|class
name|PDType1CFont
extends|extends
name|PDSimpleFont
implements|implements
name|PDVectorFont
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|PDType1CFont
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|glyphHeights
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AffineTransform
name|fontMatrixTransform
decl_stmt|;
specifier|private
specifier|final
name|CFFType1Font
name|cffFont
decl_stmt|;
comment|// embedded font
specifier|private
specifier|final
name|FontBoxFont
name|genericFont
decl_stmt|;
comment|// embedded or system font for rendering
specifier|private
specifier|final
name|boolean
name|isEmbedded
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isDamaged
decl_stmt|;
specifier|private
name|Float
name|avgWidth
init|=
literal|null
decl_stmt|;
specifier|private
name|Matrix
name|fontMatrix
decl_stmt|;
specifier|private
name|BoundingBox
name|fontBBox
decl_stmt|;
comment|/**      * Constructor.      *       * @param fontDictionary the corresponding dictionary      * @throws IOException it something went wrong      */
specifier|public
name|PDType1CFont
parameter_list|(
name|COSDictionary
name|fontDictionary
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|fontDictionary
argument_list|)
expr_stmt|;
name|PDFontDescriptor
name|fd
init|=
name|getFontDescriptor
argument_list|()
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|fd
operator|!=
literal|null
condition|)
block|{
name|PDStream
name|ff3Stream
init|=
name|fd
operator|.
name|getFontFile3
argument_list|()
decl_stmt|;
if|if
condition|(
name|ff3Stream
operator|!=
literal|null
condition|)
block|{
name|bytes
operator|=
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|ff3Stream
operator|.
name|createInputStream
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|bytes
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Invalid data for embedded Type1C font "
operator|+
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|bytes
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
name|boolean
name|fontIsDamaged
init|=
literal|false
decl_stmt|;
name|CFFType1Font
name|cffEmbedded
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|bytes
operator|!=
literal|null
condition|)
block|{
comment|// note: this could be an OpenType file, fortunately CFFParser can handle that
name|CFFParser
name|cffParser
init|=
operator|new
name|CFFParser
argument_list|()
decl_stmt|;
name|cffEmbedded
operator|=
operator|(
name|CFFType1Font
operator|)
name|cffParser
operator|.
name|parse
argument_list|(
name|bytes
argument_list|,
operator|new
name|ByteSource
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't read the embedded Type1C font "
operator|+
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fontIsDamaged
operator|=
literal|true
expr_stmt|;
block|}
name|isDamaged
operator|=
name|fontIsDamaged
expr_stmt|;
name|cffFont
operator|=
name|cffEmbedded
expr_stmt|;
if|if
condition|(
name|cffFont
operator|!=
literal|null
condition|)
block|{
name|genericFont
operator|=
name|cffFont
expr_stmt|;
name|isEmbedded
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|FontMapping
argument_list|<
name|FontBoxFont
argument_list|>
name|mapping
init|=
name|FontMappers
operator|.
name|instance
argument_list|()
operator|.
name|getFontBoxFont
argument_list|(
name|getBaseFont
argument_list|()
argument_list|,
name|fd
argument_list|)
decl_stmt|;
name|genericFont
operator|=
name|mapping
operator|.
name|getFont
argument_list|()
expr_stmt|;
if|if
condition|(
name|mapping
operator|.
name|isFallback
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Using fallback font "
operator|+
name|genericFont
operator|.
name|getName
argument_list|()
operator|+
literal|" for "
operator|+
name|getBaseFont
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|isEmbedded
operator|=
literal|false
expr_stmt|;
block|}
name|readEncoding
argument_list|()
expr_stmt|;
name|fontMatrixTransform
operator|=
name|getFontMatrix
argument_list|()
operator|.
name|createAffineTransform
argument_list|()
expr_stmt|;
name|fontMatrixTransform
operator|.
name|scale
argument_list|(
literal|1000
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|FontBoxFont
name|getFontBoxFont
parameter_list|()
block|{
return|return
name|genericFont
return|;
block|}
comment|/**      * Returns the PostScript name of the font.      */
specifier|public
specifier|final
name|String
name|getBaseFont
parameter_list|()
block|{
return|return
name|dict
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|BASE_FONT
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|GeneralPath
name|getPath
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Acrobat only draws .notdef for embedded or "Standard 14" fonts, see PDFBOX-2372
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|".notdef"
argument_list|)
operator|&&
operator|!
name|isEmbedded
argument_list|()
operator|&&
operator|!
name|isStandard14
argument_list|()
condition|)
block|{
return|return
operator|new
name|GeneralPath
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|genericFont
operator|.
name|getPath
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasGlyph
parameter_list|(
name|int
name|code
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|name
init|=
name|getEncoding
argument_list|()
operator|.
name|getName
argument_list|(
name|code
argument_list|)
decl_stmt|;
return|return
name|hasGlyph
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|GeneralPath
name|getPath
parameter_list|(
name|int
name|code
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|name
init|=
name|getEncoding
argument_list|()
operator|.
name|getName
argument_list|(
name|code
argument_list|)
decl_stmt|;
return|return
name|getPath
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|GeneralPath
name|getNormalizedPath
parameter_list|(
name|int
name|code
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|name
init|=
name|getEncoding
argument_list|()
operator|.
name|getName
argument_list|(
name|code
argument_list|)
decl_stmt|;
name|GeneralPath
name|path
init|=
name|getPath
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
return|return
name|getPath
argument_list|(
literal|".notdef"
argument_list|)
return|;
block|}
return|return
name|path
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasGlyph
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|genericFont
operator|.
name|hasGlyph
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|String
name|getName
parameter_list|()
block|{
return|return
name|getBaseFont
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|BoundingBox
name|getBoundingBox
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|fontBBox
operator|==
literal|null
condition|)
block|{
name|fontBBox
operator|=
name|generateBoundingBox
argument_list|()
expr_stmt|;
block|}
return|return
name|fontBBox
return|;
block|}
specifier|private
name|BoundingBox
name|generateBoundingBox
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|getFontDescriptor
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|PDRectangle
name|bbox
init|=
name|getFontDescriptor
argument_list|()
operator|.
name|getFontBoundingBox
argument_list|()
decl_stmt|;
if|if
condition|(
name|isNonZeroBoundingBox
argument_list|(
name|bbox
argument_list|)
condition|)
block|{
return|return
operator|new
name|BoundingBox
argument_list|(
name|bbox
operator|.
name|getLowerLeftX
argument_list|()
argument_list|,
name|bbox
operator|.
name|getLowerLeftY
argument_list|()
argument_list|,
name|bbox
operator|.
name|getUpperRightX
argument_list|()
argument_list|,
name|bbox
operator|.
name|getUpperRightY
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
name|genericFont
operator|.
name|getFontBBox
argument_list|()
return|;
block|}
comment|//@Override
specifier|public
name|String
name|codeToName
parameter_list|(
name|int
name|code
parameter_list|)
block|{
return|return
name|getEncoding
argument_list|()
operator|.
name|getName
argument_list|(
name|code
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Encoding
name|readEncodingFromFont
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|isEmbedded
argument_list|()
operator|&&
name|getStandard14AFM
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// read from AFM
return|return
operator|new
name|Type1Encoding
argument_list|(
name|getStandard14AFM
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
comment|// extract from Type1 font/substitute
if|if
condition|(
name|genericFont
operator|instanceof
name|EncodedFont
condition|)
block|{
return|return
name|Type1Encoding
operator|.
name|fromFontBox
argument_list|(
operator|(
operator|(
name|EncodedFont
operator|)
name|genericFont
operator|)
operator|.
name|getEncoding
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
comment|// default (only happens with TTFs)
return|return
name|StandardEncoding
operator|.
name|INSTANCE
return|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|readCode
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|in
operator|.
name|read
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|Matrix
name|getFontMatrix
parameter_list|()
block|{
if|if
condition|(
name|fontMatrix
operator|==
literal|null
condition|)
block|{
name|List
argument_list|<
name|Number
argument_list|>
name|numbers
init|=
literal|null
decl_stmt|;
try|try
block|{
name|numbers
operator|=
name|genericFont
operator|.
name|getFontMatrix
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Couldn't get font matrix - returning default value"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fontMatrix
operator|=
name|DEFAULT_FONT_MATRIX
expr_stmt|;
block|}
if|if
condition|(
name|numbers
operator|!=
literal|null
operator|&&
name|numbers
operator|.
name|size
argument_list|()
operator|==
literal|6
condition|)
block|{
name|fontMatrix
operator|=
operator|new
name|Matrix
argument_list|(
name|numbers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|floatValue
argument_list|()
argument_list|,
name|numbers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|floatValue
argument_list|()
argument_list|,
name|numbers
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|floatValue
argument_list|()
argument_list|,
name|numbers
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|floatValue
argument_list|()
argument_list|,
name|numbers
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|floatValue
argument_list|()
argument_list|,
name|numbers
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|getFontMatrix
argument_list|()
return|;
block|}
block|}
return|return
name|fontMatrix
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isDamaged
parameter_list|()
block|{
return|return
name|isDamaged
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|getWidthFromFont
parameter_list|(
name|int
name|code
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|name
init|=
name|codeToName
argument_list|(
name|code
argument_list|)
decl_stmt|;
name|float
name|width
init|=
name|genericFont
operator|.
name|getWidth
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Point2D
name|p
init|=
operator|new
name|Point2D
operator|.
name|Float
argument_list|(
name|width
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|fontMatrixTransform
operator|.
name|transform
argument_list|(
name|p
argument_list|,
name|p
argument_list|)
expr_stmt|;
return|return
operator|(
name|float
operator|)
name|p
operator|.
name|getX
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEmbedded
parameter_list|()
block|{
return|return
name|isEmbedded
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|getHeight
parameter_list|(
name|int
name|code
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|name
init|=
name|codeToName
argument_list|(
name|code
argument_list|)
decl_stmt|;
name|float
name|height
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|glyphHeights
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|height
operator|=
operator|(
name|float
operator|)
name|cffFont
operator|.
name|getType1CharString
argument_list|(
name|name
argument_list|)
operator|.
name|getBounds
argument_list|()
operator|.
name|getHeight
argument_list|()
expr_stmt|;
comment|// todo: cffFont could be null
name|glyphHeights
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|height
argument_list|)
expr_stmt|;
block|}
return|return
name|height
return|;
block|}
annotation|@
name|Override
specifier|protected
name|byte
index|[]
name|encode
parameter_list|(
name|int
name|unicode
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|name
init|=
name|getGlyphList
argument_list|()
operator|.
name|codePointToName
argument_list|(
name|unicode
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|encoding
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"U+%04X ('%s') is not available in this font's encoding: %s"
argument_list|,
name|unicode
argument_list|,
name|name
argument_list|,
name|encoding
operator|.
name|getEncodingName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|String
name|nameInFont
init|=
name|getNameInFont
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|inverted
init|=
name|encoding
operator|.
name|getNameToCodeMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|nameInFont
operator|.
name|equals
argument_list|(
literal|".notdef"
argument_list|)
operator|||
operator|!
name|genericFont
operator|.
name|hasGlyph
argument_list|(
name|nameInFont
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"No glyph for U+%04X in font %s"
argument_list|,
name|unicode
argument_list|,
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|int
name|code
init|=
name|inverted
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
name|code
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|getStringWidth
parameter_list|(
name|String
name|string
parameter_list|)
throws|throws
name|IOException
block|{
name|float
name|width
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|string
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|codePoint
init|=
name|string
operator|.
name|codePointAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|getGlyphList
argument_list|()
operator|.
name|codePointToName
argument_list|(
name|codePoint
argument_list|)
decl_stmt|;
name|width
operator|+=
name|cffFont
operator|.
name|getType1CharString
argument_list|(
name|name
argument_list|)
operator|.
name|getWidth
argument_list|()
expr_stmt|;
block|}
return|return
name|width
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|getAverageFontWidth
parameter_list|()
block|{
if|if
condition|(
name|avgWidth
operator|==
literal|null
condition|)
block|{
name|avgWidth
operator|=
name|getAverageCharacterWidth
argument_list|()
expr_stmt|;
block|}
return|return
name|avgWidth
return|;
block|}
comment|/**      * Returns the embedded Type 1-equivalent CFF font.      *       * @return the cffFont      */
specifier|public
name|CFFType1Font
name|getCFFType1Font
parameter_list|()
block|{
return|return
name|cffFont
return|;
block|}
comment|// todo: this is a replacement for FontMetrics method
specifier|private
name|float
name|getAverageCharacterWidth
parameter_list|()
block|{
comment|// todo: not implemented, highly suspect
return|return
literal|500
return|;
block|}
comment|/**      * Maps a PostScript glyph name to the name in the underlying font, for example when      * using a TTF font we might map "W" to "uni0057".      */
specifier|private
name|String
name|getNameInFont
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isEmbedded
argument_list|()
operator|||
name|genericFont
operator|.
name|hasGlyph
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|name
return|;
block|}
else|else
block|{
comment|// try unicode name
name|String
name|unicodes
init|=
name|getGlyphList
argument_list|()
operator|.
name|toUnicode
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|unicodes
operator|!=
literal|null
operator|&&
name|unicodes
operator|.
name|length
argument_list|()
operator|==
literal|1
condition|)
block|{
name|String
name|uniName
init|=
name|getUniNameOfCodePoint
argument_list|(
name|unicodes
operator|.
name|codePointAt
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|genericFont
operator|.
name|hasGlyph
argument_list|(
name|uniName
argument_list|)
condition|)
block|{
return|return
name|uniName
return|;
block|}
block|}
block|}
return|return
literal|".notdef"
return|;
block|}
specifier|private
class|class
name|ByteSource
implements|implements
name|CFFParser
operator|.
name|ByteSource
block|{
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getBytes
parameter_list|()
throws|throws
name|IOException
block|{
name|PDStream
name|ff3Stream
init|=
name|getFontDescriptor
argument_list|()
operator|.
name|getFontFile3
argument_list|()
decl_stmt|;
return|return
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|ff3Stream
operator|.
name|createInputStream
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

