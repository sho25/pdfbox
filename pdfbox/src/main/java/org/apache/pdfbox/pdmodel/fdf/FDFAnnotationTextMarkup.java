begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|fdf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_comment
comment|/**  * This abstract class is used as a superclass for the different FDF annotations with text markup attributes.  *   * @author Johanneke Lamberink  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|FDFAnnotationTextMarkup
extends|extends
name|FDFAnnotation
block|{
comment|/**      * Default constructor.      */
specifier|public
name|FDFAnnotationTextMarkup
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**      * Constructor.      *      * @param a An existing FDF Annotation.      */
specifier|public
name|FDFAnnotationTextMarkup
parameter_list|(
name|COSDictionary
name|a
parameter_list|)
block|{
name|super
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor.      *      *  @param element An XFDF element.      *      *  @throws IOException If there is an error extracting information from the element.      */
specifier|public
name|FDFAnnotationTextMarkup
parameter_list|(
name|Element
name|element
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|String
name|coords
init|=
name|element
operator|.
name|getAttribute
argument_list|(
literal|"coords"
argument_list|)
decl_stmt|;
if|if
condition|(
name|coords
operator|==
literal|null
operator|||
name|coords
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error: missing attribute 'coords'"
argument_list|)
throw|;
block|}
name|String
index|[]
name|coordsValues
init|=
name|coords
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|coordsValues
operator|.
name|length
operator|<
literal|8
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error: too little numbers in attribute 'coords'"
argument_list|)
throw|;
block|}
name|float
index|[]
name|values
init|=
operator|new
name|float
index|[
name|coordsValues
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|coordsValues
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|coordsValues
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|setCoords
argument_list|(
name|values
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the coordinates of individual words or group of words.      *       * The quadliterals shall encompasses a word or group of contiguous words in the text underlying the annotation.      * The coordinates for each quadrilateral shall be given in the order x1 y1 x2 y2 x3 y3 x4 y4.      *      * @param coords an array of 8 􏰍 n numbers specifying the coordinates of n quadrilaterals.      */
specifier|public
name|void
name|setCoords
parameter_list|(
name|float
index|[]
name|coords
parameter_list|)
block|{
name|COSArray
name|newQuadPoints
init|=
operator|new
name|COSArray
argument_list|()
decl_stmt|;
name|newQuadPoints
operator|.
name|setFloatArray
argument_list|(
name|coords
argument_list|)
expr_stmt|;
name|annot
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|QUADPOINTS
argument_list|,
name|newQuadPoints
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the coordinates of individual words or group of words.      * @see #setCoords(float[])      * @return the array of 8 􏰍 n numbers specifying the coordinates of n quadrilaterals.      */
specifier|public
name|float
index|[]
name|getCoords
parameter_list|()
block|{
name|COSArray
name|quadPoints
init|=
operator|(
name|COSArray
operator|)
name|annot
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|QUADPOINTS
argument_list|)
decl_stmt|;
if|if
condition|(
name|quadPoints
operator|!=
literal|null
condition|)
block|{
return|return
name|quadPoints
operator|.
name|toFloatArray
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
comment|// Should never happen as this is a required item
block|}
block|}
block|}
end_class

end_unit

