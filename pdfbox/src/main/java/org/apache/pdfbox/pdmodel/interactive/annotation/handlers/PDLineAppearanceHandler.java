begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2018 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|handlers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDRectangle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDType1Font
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAnnotationLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAppearanceContentStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|Matrix
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|PDLineAppearanceHandler
extends|extends
name|PDAbstractAppearanceHandler
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|PDLineAppearanceHandler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|PDLineAppearanceHandler
parameter_list|(
name|PDAnnotation
name|annotation
parameter_list|)
block|{
name|super
argument_list|(
name|annotation
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|generateAppearanceStreams
parameter_list|()
block|{
name|generateNormalAppearance
argument_list|()
expr_stmt|;
name|generateRolloverAppearance
argument_list|()
expr_stmt|;
name|generateDownAppearance
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|generateNormalAppearance
parameter_list|()
block|{
name|PDAnnotationLine
name|annotation
init|=
operator|(
name|PDAnnotationLine
operator|)
name|getAnnotation
argument_list|()
decl_stmt|;
name|PDRectangle
name|rect
init|=
name|annotation
operator|.
name|getRectangle
argument_list|()
decl_stmt|;
name|float
index|[]
name|pathsArray
init|=
name|annotation
operator|.
name|getLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|pathsArray
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|AnnotationBorder
name|ab
init|=
name|AnnotationBorder
operator|.
name|getAnnotationBorder
argument_list|(
name|annotation
argument_list|,
name|annotation
operator|.
name|getBorderStyle
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ab
operator|.
name|color
operator|.
name|getComponents
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return;
block|}
comment|// Adjust rectangle even if not empty, see PLPDF.com-MarkupAnnotations.pdf
name|float
name|minX
init|=
name|Float
operator|.
name|MAX_VALUE
decl_stmt|;
name|float
name|minY
init|=
name|Float
operator|.
name|MAX_VALUE
decl_stmt|;
name|float
name|maxX
init|=
name|Float
operator|.
name|MIN_VALUE
decl_stmt|;
name|float
name|maxY
init|=
name|Float
operator|.
name|MIN_VALUE
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pathsArray
operator|.
name|length
operator|/
literal|2
condition|;
operator|++
name|i
control|)
block|{
name|float
name|x
init|=
name|pathsArray
index|[
name|i
operator|*
literal|2
index|]
decl_stmt|;
name|float
name|y
init|=
name|pathsArray
index|[
name|i
operator|*
literal|2
operator|+
literal|1
index|]
decl_stmt|;
name|minX
operator|=
name|Math
operator|.
name|min
argument_list|(
name|minX
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|minY
operator|=
name|Math
operator|.
name|min
argument_list|(
name|minY
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|maxX
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxX
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|maxY
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxY
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
comment|// add/substract with and font height
comment|//TODO also consider arrow and other stuff
name|rect
operator|.
name|setLowerLeftX
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|minX
operator|-
name|ab
operator|.
name|width
operator|-
literal|12
argument_list|,
name|rect
operator|.
name|getLowerLeftX
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rect
operator|.
name|setLowerLeftY
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|minY
operator|-
name|ab
operator|.
name|width
operator|-
literal|12
argument_list|,
name|rect
operator|.
name|getLowerLeftY
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rect
operator|.
name|setUpperRightX
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|maxX
operator|+
name|ab
operator|.
name|width
operator|+
literal|12
argument_list|,
name|rect
operator|.
name|getUpperRightX
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rect
operator|.
name|setUpperRightY
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|maxY
operator|+
name|ab
operator|.
name|width
operator|+
literal|12
argument_list|,
name|rect
operator|.
name|getUpperRightY
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|annotation
operator|.
name|setRectangle
argument_list|(
name|rect
argument_list|)
expr_stmt|;
try|try
block|{
try|try
init|(
name|PDAppearanceContentStream
name|cs
init|=
name|getNormalAppearanceAsContentStream
argument_list|()
init|)
block|{
comment|// Tested with Adobe Reader:
comment|// text is written first (TODO)
comment|// width 0 is used by Adobe as such (but results in a visible line in rendering)
comment|// empty color array results in an invisible line ("n" operator) but the rest is visible
comment|// empty content is like no caption
name|boolean
name|hasStroke
init|=
name|cs
operator|.
name|setStrokingColorOnDemand
argument_list|(
name|getColor
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ab
operator|.
name|dashArray
operator|!=
literal|null
condition|)
block|{
name|cs
operator|.
name|setLineDashPattern
argument_list|(
name|ab
operator|.
name|dashArray
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|cs
operator|.
name|setLineWidth
argument_list|(
name|ab
operator|.
name|width
argument_list|)
expr_stmt|;
name|float
name|x1
init|=
name|pathsArray
index|[
literal|0
index|]
operator|-
name|rect
operator|.
name|getLowerLeftX
argument_list|()
decl_stmt|;
name|float
name|y1
init|=
name|pathsArray
index|[
literal|1
index|]
operator|-
name|rect
operator|.
name|getLowerLeftY
argument_list|()
decl_stmt|;
name|float
name|x2
init|=
name|pathsArray
index|[
literal|2
index|]
operator|-
name|rect
operator|.
name|getLowerLeftX
argument_list|()
decl_stmt|;
name|float
name|y2
init|=
name|pathsArray
index|[
literal|3
index|]
operator|-
name|rect
operator|.
name|getLowerLeftY
argument_list|()
decl_stmt|;
name|String
name|contents
init|=
name|annotation
operator|.
name|getContents
argument_list|()
decl_stmt|;
if|if
condition|(
name|contents
operator|==
literal|null
condition|)
block|{
name|contents
operator|=
literal|""
expr_stmt|;
block|}
name|double
name|angle
init|=
name|Math
operator|.
name|atan2
argument_list|(
name|y2
operator|-
name|y1
argument_list|,
name|x2
operator|-
name|x1
argument_list|)
decl_stmt|;
name|cs
operator|.
name|transform
argument_list|(
name|Matrix
operator|.
name|getRotateInstance
argument_list|(
name|angle
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|)
argument_list|)
expr_stmt|;
name|float
name|lineLength
init|=
operator|(
name|float
operator|)
name|Math
operator|.
name|sqrt
argument_list|(
operator|(
operator|(
name|x2
operator|-
name|x1
operator|)
operator|*
operator|(
name|x2
operator|-
name|x1
operator|)
operator|)
operator|+
operator|(
operator|(
name|y2
operator|-
name|y1
operator|)
operator|*
operator|(
name|y2
operator|-
name|y1
operator|)
operator|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|annotation
operator|.
name|getCaption
argument_list|()
operator|&&
operator|!
name|contents
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|PDType1Font
name|font
init|=
name|PDType1Font
operator|.
name|HELVETICA
decl_stmt|;
comment|// TODO: support newlines!!!!!
comment|// see https://www.pdfill.com/example/pdf_commenting_new.pdf
name|float
name|contentLength
init|=
literal|0
decl_stmt|;
try|try
block|{
name|contentLength
operator|=
name|font
operator|.
name|getStringWidth
argument_list|(
name|annotation
operator|.
name|getContents
argument_list|()
argument_list|)
operator|/
literal|1000
operator|*
literal|12
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|//TODO test with "illegal" char to see what Adobe does
block|}
name|float
name|xOffset
init|=
operator|(
name|lineLength
operator|-
name|contentLength
operator|)
operator|/
literal|2
operator|-
literal|1
decl_stmt|;
name|float
name|yOffset
decl_stmt|;
name|String
name|captionPositioning
init|=
name|annotation
operator|.
name|getCaptionPositioning
argument_list|()
decl_stmt|;
comment|// draw the line horizontally, using the rotation CTM to get to correct final position
comment|// that's the easiest way to calculate the positions for the line before and after inline caption
name|cs
operator|.
name|moveTo
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"Top"
operator|.
name|equals
argument_list|(
name|captionPositioning
argument_list|)
condition|)
block|{
comment|// Add 1/2 of size
name|yOffset
operator|=
literal|6
expr_stmt|;
block|}
else|else
block|{
comment|// Inline
name|yOffset
operator|=
operator|-
literal|3
expr_stmt|;
comment|// chitgoks:
comment|// "for the 1st half of the line i set is to xOffset - 2. that looks evened out"
name|cs
operator|.
name|lineTo
argument_list|(
literal|0
operator|+
name|xOffset
operator|-
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cs
operator|.
name|moveTo
argument_list|(
name|lineLength
operator|-
name|xOffset
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|cs
operator|.
name|lineTo
argument_list|(
name|lineLength
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cs
operator|.
name|drawShape
argument_list|(
name|ab
operator|.
name|width
argument_list|,
name|hasStroke
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|contentLength
operator|>
literal|0
condition|)
block|{
comment|// don't show if there was trouble before
name|cs
operator|.
name|beginText
argument_list|()
expr_stmt|;
comment|//TODO reduce font? How to decide the size?
name|cs
operator|.
name|setFont
argument_list|(
name|font
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setTextMatrix
argument_list|(
name|Matrix
operator|.
name|getTranslateInstance
argument_list|(
name|xOffset
argument_list|,
name|yOffset
argument_list|)
argument_list|)
expr_stmt|;
name|cs
operator|.
name|showText
argument_list|(
name|annotation
operator|.
name|getContents
argument_list|()
argument_list|)
expr_stmt|;
name|cs
operator|.
name|endText
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|cs
operator|.
name|moveTo
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cs
operator|.
name|lineTo
argument_list|(
name|lineLength
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cs
operator|.
name|drawShape
argument_list|(
name|ab
operator|.
name|width
argument_list|,
name|hasStroke
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// there can be many, many more styles...
comment|//TODO numbers for arrow size are arbitrary and likely wrong
if|if
condition|(
name|PDAnnotationLine
operator|.
name|LE_OPEN_ARROW
operator|.
name|equals
argument_list|(
name|annotation
operator|.
name|getStartPointEndingStyle
argument_list|()
argument_list|)
condition|)
block|{
name|cs
operator|.
name|moveTo
argument_list|(
literal|6
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|cs
operator|.
name|lineTo
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cs
operator|.
name|lineTo
argument_list|(
literal|6
argument_list|,
operator|-
literal|3
argument_list|)
expr_stmt|;
name|cs
operator|.
name|stroke
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|PDAnnotationLine
operator|.
name|LE_OPEN_ARROW
operator|.
name|equals
argument_list|(
name|annotation
operator|.
name|getEndPointEndingStyle
argument_list|()
argument_list|)
condition|)
block|{
name|cs
operator|.
name|moveTo
argument_list|(
name|lineLength
operator|-
literal|6
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|cs
operator|.
name|lineTo
argument_list|(
name|lineLength
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cs
operator|.
name|lineTo
argument_list|(
name|lineLength
operator|-
literal|6
argument_list|,
operator|-
literal|3
argument_list|)
expr_stmt|;
name|cs
operator|.
name|stroke
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|generateRolloverAppearance
parameter_list|()
block|{
comment|// No rollover appearance generated
block|}
annotation|@
name|Override
specifier|public
name|void
name|generateDownAppearance
parameter_list|()
block|{
comment|// No down appearance generated
block|}
block|}
end_class

end_unit

