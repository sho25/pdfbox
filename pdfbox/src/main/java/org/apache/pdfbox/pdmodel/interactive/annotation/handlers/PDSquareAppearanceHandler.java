begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|handlers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|AffineTransform
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSNumber
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDRectangle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAnnotationSquare
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDAppearanceContentStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAppearanceStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDBorderEffectDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDBorderStyleDictionary
import|;
end_import

begin_comment
comment|/**  * Handler to generate the square annotations appearance.  *  */
end_comment

begin_class
specifier|public
class|class
name|PDSquareAppearanceHandler
extends|extends
name|PDAbstractAppearanceHandler
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|PDSquareAppearanceHandler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|PDSquareAppearanceHandler
parameter_list|(
name|PDAnnotation
name|annotation
parameter_list|)
block|{
name|super
argument_list|(
name|annotation
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|generateAppearanceStreams
parameter_list|()
block|{
name|generateNormalAppearance
argument_list|()
expr_stmt|;
name|generateRolloverAppearance
argument_list|()
expr_stmt|;
name|generateDownAppearance
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|generateNormalAppearance
parameter_list|()
block|{
name|float
name|lineWidth
init|=
name|getLineWidth
argument_list|()
decl_stmt|;
try|try
block|{
name|PDAnnotationSquare
name|annotation
init|=
operator|(
name|PDAnnotationSquare
operator|)
name|getAnnotation
argument_list|()
decl_stmt|;
try|try
init|(
name|PDAppearanceContentStream
name|contentStream
init|=
name|getNormalAppearanceAsContentStream
argument_list|()
init|)
block|{
name|boolean
name|hasStroke
init|=
name|contentStream
operator|.
name|setStrokingColorOnDemand
argument_list|(
name|getColor
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|hasBackground
init|=
name|contentStream
operator|.
name|setNonStrokingColorOnDemand
argument_list|(
name|annotation
operator|.
name|getInteriorColor
argument_list|()
argument_list|)
decl_stmt|;
name|handleOpacity
argument_list|(
name|annotation
operator|.
name|getConstantOpacity
argument_list|()
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setBorderLine
argument_list|(
name|lineWidth
argument_list|,
name|annotation
operator|.
name|getBorderStyle
argument_list|()
argument_list|)
expr_stmt|;
name|PDBorderEffectDictionary
name|borderEffect
init|=
name|annotation
operator|.
name|getBorderEffect
argument_list|()
decl_stmt|;
if|if
condition|(
name|borderEffect
operator|!=
literal|null
operator|&&
name|borderEffect
operator|.
name|getStyle
argument_list|()
operator|.
name|equals
argument_list|(
name|PDBorderEffectDictionary
operator|.
name|STYLE_CLOUDY
argument_list|)
condition|)
block|{
name|CloudyBorder
name|cloudyBorder
init|=
operator|new
name|CloudyBorder
argument_list|(
name|contentStream
argument_list|,
name|borderEffect
operator|.
name|getIntensity
argument_list|()
argument_list|,
name|lineWidth
argument_list|,
name|getRectangle
argument_list|()
argument_list|)
decl_stmt|;
name|cloudyBorder
operator|.
name|createCloudyRectangle
argument_list|(
name|annotation
operator|.
name|getRectDifference
argument_list|()
argument_list|)
expr_stmt|;
name|annotation
operator|.
name|setRectangle
argument_list|(
name|cloudyBorder
operator|.
name|getRectangle
argument_list|()
argument_list|)
expr_stmt|;
name|annotation
operator|.
name|setRectDifference
argument_list|(
name|cloudyBorder
operator|.
name|getRectDifference
argument_list|()
argument_list|)
expr_stmt|;
name|PDAppearanceStream
name|appearanceStream
init|=
name|annotation
operator|.
name|getNormalAppearanceStream
argument_list|()
decl_stmt|;
name|appearanceStream
operator|.
name|setBBox
argument_list|(
name|cloudyBorder
operator|.
name|getBBox
argument_list|()
argument_list|)
expr_stmt|;
name|appearanceStream
operator|.
name|setMatrix
argument_list|(
name|cloudyBorder
operator|.
name|getMatrix
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// handle the border box
comment|//
comment|// There are two options. The handling is not part of the PDF specification but
comment|// implementation specific to Adobe Reader
comment|// - if /RD is set the border box is the /Rect entry inset by the respective
comment|//   border difference.
comment|// - if /RD is not set the border box is defined by the /Rect entry. The /RD entry will
comment|//   be set to be the line width and the /Rect is enlarged by the /RD amount
name|PDRectangle
name|borderBox
init|=
literal|null
decl_stmt|;
name|float
index|[]
name|rectDifferences
init|=
name|annotation
operator|.
name|getRectDifferences
argument_list|()
decl_stmt|;
if|if
condition|(
name|rectDifferences
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|borderBox
operator|=
name|getPaddedRectangle
argument_list|(
name|getRectangle
argument_list|()
argument_list|,
name|lineWidth
operator|/
literal|2
argument_list|)
expr_stmt|;
comment|// the differences rectangle
name|annotation
operator|.
name|setRectDifferences
argument_list|(
name|lineWidth
operator|/
literal|2
argument_list|)
expr_stmt|;
name|annotation
operator|.
name|setRectangle
argument_list|(
name|addRectDifferences
argument_list|(
name|getRectangle
argument_list|()
argument_list|,
name|annotation
operator|.
name|getRectDifferences
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// when the normal appearance stream was generated BBox and Matrix have been set to the
comment|// values of the original /Rect. As the /Rect was changed that needs to be adjusted too.
name|annotation
operator|.
name|getNormalAppearanceStream
argument_list|()
operator|.
name|setBBox
argument_list|(
name|getRectangle
argument_list|()
argument_list|)
expr_stmt|;
name|AffineTransform
name|transform
init|=
name|AffineTransform
operator|.
name|getTranslateInstance
argument_list|(
operator|-
name|getRectangle
argument_list|()
operator|.
name|getLowerLeftX
argument_list|()
argument_list|,
operator|-
name|getRectangle
argument_list|()
operator|.
name|getLowerLeftY
argument_list|()
argument_list|)
decl_stmt|;
name|annotation
operator|.
name|getNormalAppearanceStream
argument_list|()
operator|.
name|setMatrix
argument_list|(
name|transform
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|borderBox
operator|=
name|applyRectDifferences
argument_list|(
name|getRectangle
argument_list|()
argument_list|,
name|rectDifferences
argument_list|)
expr_stmt|;
name|borderBox
operator|=
name|getPaddedRectangle
argument_list|(
name|borderBox
argument_list|,
name|lineWidth
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
name|contentStream
operator|.
name|addRect
argument_list|(
name|borderBox
operator|.
name|getLowerLeftX
argument_list|()
argument_list|,
name|borderBox
operator|.
name|getLowerLeftY
argument_list|()
argument_list|,
name|borderBox
operator|.
name|getWidth
argument_list|()
argument_list|,
name|borderBox
operator|.
name|getHeight
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|contentStream
operator|.
name|drawShape
argument_list|(
name|lineWidth
argument_list|,
name|hasStroke
argument_list|,
name|hasBackground
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|generateRolloverAppearance
parameter_list|()
block|{
comment|// TODO to be implemented
block|}
annotation|@
name|Override
specifier|public
name|void
name|generateDownAppearance
parameter_list|()
block|{
comment|// TODO to be implemented
block|}
comment|/**      * Get the line with of the border.      *       * Get the width of the line used to draw a border around the annotation.      * This may either be specified by the annotation dictionaries Border      * setting or by the W entry in the BS border style dictionary. If both are      * missing the default width is 1.      *       * @return the line width      */
comment|// TODO: according to the PDF spec the use of the BS entry is annotation
comment|// specific
comment|// so we will leave that to be implemented by individual handlers.
comment|// If at the end all annotations support the BS entry this can be handled
comment|// here and removed from the individual handlers.
name|float
name|getLineWidth
parameter_list|()
block|{
name|PDAnnotationSquare
name|annotation
init|=
operator|(
name|PDAnnotationSquare
operator|)
name|getAnnotation
argument_list|()
decl_stmt|;
name|PDBorderStyleDictionary
name|bs
init|=
name|annotation
operator|.
name|getBorderStyle
argument_list|()
decl_stmt|;
if|if
condition|(
name|bs
operator|!=
literal|null
condition|)
block|{
return|return
name|bs
operator|.
name|getWidth
argument_list|()
return|;
block|}
else|else
block|{
name|COSArray
name|borderCharacteristics
init|=
name|annotation
operator|.
name|getBorder
argument_list|()
decl_stmt|;
if|if
condition|(
name|borderCharacteristics
operator|.
name|size
argument_list|()
operator|>=
literal|3
condition|)
block|{
name|COSBase
name|base
init|=
name|borderCharacteristics
operator|.
name|getObject
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|base
operator|instanceof
name|COSNumber
condition|)
block|{
return|return
operator|(
operator|(
name|COSNumber
operator|)
name|base
operator|)
operator|.
name|floatValue
argument_list|()
return|;
block|}
block|}
block|}
return|return
literal|1
return|;
block|}
block|}
end_class

end_unit

