begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|form
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_comment
comment|/**  * A PDField factory.  */
end_comment

begin_class
specifier|final
class|class
name|PDFieldFactory
block|{
specifier|private
specifier|static
specifier|final
name|String
name|FIELD_TYPE_TEXT
init|=
literal|"Tx"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FIELD_TYPE_BUTTON
init|=
literal|"Btn"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FIELD_TYPE_CHOICE
init|=
literal|"Ch"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FIELD_TYPE_SIGNATURE
init|=
literal|"Sig"
decl_stmt|;
specifier|private
name|PDFieldFactory
parameter_list|()
block|{     }
comment|/**      * Creates a COSField subclass from the given field.      *      * @param form the form that the field is part of      * @param field the dictionary representing a field element      * @param parent the parent node of the node to be created       * @return the corresponding PDField instance      */
specifier|static
name|PDField
name|createField
parameter_list|(
name|PDAcroForm
name|form
parameter_list|,
name|COSDictionary
name|field
parameter_list|,
name|PDNonTerminalField
name|parent
parameter_list|)
block|{
name|String
name|fieldType
init|=
name|findFieldType
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|FIELD_TYPE_CHOICE
operator|.
name|equals
argument_list|(
name|fieldType
argument_list|)
condition|)
block|{
return|return
name|createChoiceSubType
argument_list|(
name|form
argument_list|,
name|field
argument_list|,
name|parent
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|FIELD_TYPE_TEXT
operator|.
name|equals
argument_list|(
name|fieldType
argument_list|)
condition|)
block|{
return|return
operator|new
name|PDTextField
argument_list|(
name|form
argument_list|,
name|field
argument_list|,
name|parent
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|FIELD_TYPE_SIGNATURE
operator|.
name|equals
argument_list|(
name|fieldType
argument_list|)
condition|)
block|{
return|return
operator|new
name|PDSignatureField
argument_list|(
name|form
argument_list|,
name|field
argument_list|,
name|parent
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|FIELD_TYPE_BUTTON
operator|.
name|equals
argument_list|(
name|fieldType
argument_list|)
condition|)
block|{
return|return
name|createButtonSubType
argument_list|(
name|form
argument_list|,
name|field
argument_list|,
name|parent
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|field
operator|.
name|containsKey
argument_list|(
name|COSName
operator|.
name|KIDS
argument_list|)
condition|)
block|{
return|return
operator|new
name|PDNonTerminalField
argument_list|(
name|form
argument_list|,
name|field
argument_list|,
name|parent
argument_list|)
return|;
block|}
else|else
block|{
comment|// an erroneous non-field object, see PDFBOX-2885
return|return
literal|null
return|;
block|}
block|}
specifier|private
specifier|static
name|PDField
name|createChoiceSubType
parameter_list|(
name|PDAcroForm
name|form
parameter_list|,
name|COSDictionary
name|field
parameter_list|,
name|PDNonTerminalField
name|parent
parameter_list|)
block|{
name|int
name|flags
init|=
name|field
operator|.
name|getInt
argument_list|(
name|COSName
operator|.
name|FF
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|flags
operator|&
name|PDChoice
operator|.
name|FLAG_COMBO
operator|)
operator|!=
literal|0
condition|)
block|{
return|return
operator|new
name|PDComboBox
argument_list|(
name|form
argument_list|,
name|field
argument_list|,
name|parent
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|PDListBox
argument_list|(
name|form
argument_list|,
name|field
argument_list|,
name|parent
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|PDField
name|createButtonSubType
parameter_list|(
name|PDAcroForm
name|form
parameter_list|,
name|COSDictionary
name|field
parameter_list|,
name|PDNonTerminalField
name|parent
parameter_list|)
block|{
name|int
name|flags
init|=
name|field
operator|.
name|getInt
argument_list|(
name|COSName
operator|.
name|FF
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// BJL: I have found that the radio flag bit is not always set
comment|// and that sometimes there is just a kids dictionary.
comment|// so, if there is a kids dictionary then it must be a radio button group.
if|if
condition|(
operator|(
name|flags
operator|&
name|PDButton
operator|.
name|FLAG_RADIO
operator|)
operator|!=
literal|0
condition|)
block|{
return|return
operator|new
name|PDRadioButton
argument_list|(
name|form
argument_list|,
name|field
argument_list|,
name|parent
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|flags
operator|&
name|PDButton
operator|.
name|FLAG_PUSHBUTTON
operator|)
operator|!=
literal|0
condition|)
block|{
return|return
operator|new
name|PDPushButton
argument_list|(
name|form
argument_list|,
name|field
argument_list|,
name|parent
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|PDCheckBox
argument_list|(
name|form
argument_list|,
name|field
argument_list|,
name|parent
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|String
name|findFieldType
parameter_list|(
name|COSDictionary
name|dic
parameter_list|)
block|{
name|String
name|retval
init|=
name|dic
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|FT
argument_list|)
decl_stmt|;
if|if
condition|(
name|retval
operator|==
literal|null
condition|)
block|{
name|COSDictionary
name|parent
init|=
operator|(
name|COSDictionary
operator|)
name|dic
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|PARENT
argument_list|,
name|COSName
operator|.
name|P
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
name|findFieldType
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|retval
return|;
block|}
block|}
end_class

end_unit

