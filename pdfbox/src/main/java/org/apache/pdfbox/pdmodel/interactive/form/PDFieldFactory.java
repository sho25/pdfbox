begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|form
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|COSObjectable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Factory for creating instances of PDField.  * @author sug  * @author John Hewson  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|PDFieldFactory
block|{
comment|// button flags
specifier|private
specifier|static
specifier|final
name|int
name|FLAG_RADIO
init|=
literal|0x8000
decl_stmt|,
name|FLAG_PUSHBUTTON
init|=
literal|0x10000
decl_stmt|,
name|FLAG_RADIOS_IN_UNISON
init|=
literal|0x2000000
decl_stmt|;
comment|// choice flags
specifier|private
specifier|static
specifier|final
name|int
name|FLAG_COMBO
init|=
literal|0x20000
decl_stmt|;
specifier|private
name|PDFieldFactory
parameter_list|()
block|{     }
comment|/**      * Creates a COSField subclass from the given field.      * @param form the form that the field is part of      * @param field the dictionary representing a field element      * @return the corresponding PDField instance      * @throws IOException if the field cannot be read      */
specifier|public
specifier|static
name|PDField
name|createField
parameter_list|(
name|PDAcroForm
name|form
parameter_list|,
name|COSDictionary
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|fieldType
init|=
name|PDField
operator|.
name|findFieldType
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|isButton
argument_list|(
name|form
argument_list|,
name|field
argument_list|)
condition|)
block|{
name|int
name|flags
init|=
name|field
operator|.
name|getInt
argument_list|(
name|COSName
operator|.
name|FF
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// BJL: I have found that the radio flag bit is not always set
comment|// and that sometimes there is just a kids dictionary.
comment|// so, if there is a kids dictionary then it must be a radio button group.
comment|// TODO JH: this is due to inheritance, we need proper support for "non-terminal fields"
if|if
condition|(
operator|(
name|flags
operator|&
name|FLAG_RADIO
operator|)
operator|!=
literal|0
operator|||
name|field
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|KIDS
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|PDRadioButton
argument_list|(
name|form
argument_list|,
name|field
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|flags
operator|&
name|FLAG_PUSHBUTTON
operator|)
operator|!=
literal|0
condition|)
block|{
return|return
operator|new
name|PDPushButton
argument_list|(
name|form
argument_list|,
name|field
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|PDCheckbox
argument_list|(
name|form
argument_list|,
name|field
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"Ch"
operator|.
name|equals
argument_list|(
name|fieldType
argument_list|)
condition|)
block|{
name|int
name|flags
init|=
name|field
operator|.
name|getInt
argument_list|(
name|COSName
operator|.
name|FF
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|flags
operator|&
name|FLAG_COMBO
operator|)
operator|!=
literal|0
condition|)
block|{
return|return
operator|new
name|PDComboBox
argument_list|(
name|form
argument_list|,
name|field
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|PDListBox
argument_list|(
name|form
argument_list|,
name|field
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"Tx"
operator|.
name|equals
argument_list|(
name|fieldType
argument_list|)
condition|)
block|{
return|return
operator|new
name|PDTextField
argument_list|(
name|form
argument_list|,
name|field
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|"Sig"
operator|.
name|equals
argument_list|(
name|fieldType
argument_list|)
condition|)
block|{
return|return
operator|new
name|PDSignatureField
argument_list|(
name|form
argument_list|,
name|field
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid field type: "
operator|+
name|fieldType
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|isButton
parameter_list|(
name|PDAcroForm
name|form
parameter_list|,
name|COSDictionary
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|fieldType
init|=
name|PDField
operator|.
name|findFieldType
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|COSObjectable
argument_list|>
name|kids
init|=
name|PDField
operator|.
name|getKids
argument_list|(
name|form
argument_list|,
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldType
operator|==
literal|null
operator|&&
name|kids
operator|!=
literal|null
operator|&&
operator|!
name|kids
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// sometimes if it is a button the type is only defined by one of the kids entries
comment|// TODO JH: this is due to inheritance, we need proper support for "non-terminal fields"
name|COSDictionary
name|kid
init|=
operator|(
name|COSDictionary
operator|)
name|kids
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCOSObject
argument_list|()
decl_stmt|;
return|return
name|isButton
argument_list|(
name|form
argument_list|,
name|kid
argument_list|)
return|;
block|}
return|return
literal|"Btn"
operator|.
name|equals
argument_list|(
name|fieldType
argument_list|)
return|;
block|}
block|}
end_class

end_unit

