begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|function
operator|.
name|type4
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_comment
comment|/**  * Provides the relational operators such as "eq" and "le".  *  */
end_comment

begin_class
class|class
name|RelationalOperators
block|{
comment|/** Implements the "eq" operator. */
specifier|static
class|class
name|Eq
implements|implements
name|Operator
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|ExecutionContext
name|context
parameter_list|)
block|{
name|Stack
argument_list|<
name|Object
argument_list|>
name|stack
init|=
name|context
operator|.
name|getStack
argument_list|()
decl_stmt|;
name|Object
name|op2
init|=
name|stack
operator|.
name|pop
argument_list|()
decl_stmt|;
name|Object
name|op1
init|=
name|stack
operator|.
name|pop
argument_list|()
decl_stmt|;
name|boolean
name|result
init|=
name|isEqual
argument_list|(
name|op1
argument_list|,
name|op2
argument_list|)
decl_stmt|;
name|stack
operator|.
name|push
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|boolean
name|isEqual
parameter_list|(
name|Object
name|op1
parameter_list|,
name|Object
name|op2
parameter_list|)
block|{
name|boolean
name|result
decl_stmt|;
if|if
condition|(
name|op1
operator|instanceof
name|Number
operator|&&
name|op2
operator|instanceof
name|Number
condition|)
block|{
name|Number
name|num1
init|=
operator|(
name|Number
operator|)
name|op1
decl_stmt|;
name|Number
name|num2
init|=
operator|(
name|Number
operator|)
name|op2
decl_stmt|;
name|result
operator|=
name|Float
operator|.
name|compare
argument_list|(
name|num1
operator|.
name|floatValue
argument_list|()
argument_list|,
name|num2
operator|.
name|floatValue
argument_list|()
argument_list|)
operator|==
literal|0
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|op1
operator|.
name|equals
argument_list|(
name|op2
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
comment|/** Abstract base class for number comparison operators. */
specifier|private
specifier|abstract
specifier|static
class|class
name|AbstractNumberComparisonOperator
implements|implements
name|Operator
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|ExecutionContext
name|context
parameter_list|)
block|{
name|Stack
argument_list|<
name|Object
argument_list|>
name|stack
init|=
name|context
operator|.
name|getStack
argument_list|()
decl_stmt|;
name|Object
name|op2
init|=
name|stack
operator|.
name|pop
argument_list|()
decl_stmt|;
name|Object
name|op1
init|=
name|stack
operator|.
name|pop
argument_list|()
decl_stmt|;
name|Number
name|num1
init|=
operator|(
name|Number
operator|)
name|op1
decl_stmt|;
name|Number
name|num2
init|=
operator|(
name|Number
operator|)
name|op2
decl_stmt|;
name|boolean
name|result
init|=
name|compare
argument_list|(
name|num1
argument_list|,
name|num2
argument_list|)
decl_stmt|;
name|stack
operator|.
name|push
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|boolean
name|compare
parameter_list|(
name|Number
name|num1
parameter_list|,
name|Number
name|num2
parameter_list|)
function_decl|;
block|}
comment|/** Implements the "ge" operator. */
specifier|static
class|class
name|Ge
extends|extends
name|AbstractNumberComparisonOperator
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|compare
parameter_list|(
name|Number
name|num1
parameter_list|,
name|Number
name|num2
parameter_list|)
block|{
return|return
name|num1
operator|.
name|floatValue
argument_list|()
operator|>=
name|num2
operator|.
name|floatValue
argument_list|()
return|;
block|}
block|}
comment|/** Implements the "gt" operator. */
specifier|static
class|class
name|Gt
extends|extends
name|AbstractNumberComparisonOperator
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|compare
parameter_list|(
name|Number
name|num1
parameter_list|,
name|Number
name|num2
parameter_list|)
block|{
return|return
name|num1
operator|.
name|floatValue
argument_list|()
operator|>
name|num2
operator|.
name|floatValue
argument_list|()
return|;
block|}
block|}
comment|/** Implements the "le" operator. */
specifier|static
class|class
name|Le
extends|extends
name|AbstractNumberComparisonOperator
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|compare
parameter_list|(
name|Number
name|num1
parameter_list|,
name|Number
name|num2
parameter_list|)
block|{
return|return
name|num1
operator|.
name|floatValue
argument_list|()
operator|<=
name|num2
operator|.
name|floatValue
argument_list|()
return|;
block|}
block|}
comment|/** Implements the "lt" operator. */
specifier|static
class|class
name|Lt
extends|extends
name|AbstractNumberComparisonOperator
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|compare
parameter_list|(
name|Number
name|num1
parameter_list|,
name|Number
name|num2
parameter_list|)
block|{
return|return
name|num1
operator|.
name|floatValue
argument_list|()
operator|<
name|num2
operator|.
name|floatValue
argument_list|()
return|;
block|}
block|}
comment|/** Implements the "ne" operator. */
specifier|static
class|class
name|Ne
extends|extends
name|Eq
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|isEqual
parameter_list|(
name|Object
name|op1
parameter_list|,
name|Object
name|op2
parameter_list|)
block|{
name|boolean
name|result
init|=
name|super
operator|.
name|isEqual
argument_list|(
name|op1
argument_list|,
name|op2
argument_list|)
decl_stmt|;
return|return
operator|!
name|result
return|;
block|}
block|}
block|}
end_class

end_unit

