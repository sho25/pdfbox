begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|state
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDFont
import|;
end_import

begin_comment
comment|/**  * This class will hold the current state of the text parameters when executing a  * content stream.  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.4 $  */
end_comment

begin_class
specifier|public
class|class
name|PDTextState
implements|implements
name|Cloneable
block|{
comment|/**      * See PDF Reference 1.5 Table 5.3.      */
specifier|public
specifier|static
specifier|final
name|int
name|RENDERING_MODE_FILL_TEXT
init|=
literal|0
decl_stmt|;
comment|/**      * See PDF Reference 1.5 Table 5.3.      */
specifier|public
specifier|static
specifier|final
name|int
name|RENDERING_MODE_STROKE_TEXT
init|=
literal|1
decl_stmt|;
comment|/**      * See PDF Reference 1.5 Table 5.3.      */
specifier|public
specifier|static
specifier|final
name|int
name|RENDERING_MODE_FILL_THEN_STROKE_TEXT
init|=
literal|2
decl_stmt|;
comment|/**      * See PDF Reference 1.5 Table 5.3.      */
specifier|public
specifier|static
specifier|final
name|int
name|RENDERING_MODE_NEITHER_FILL_NOR_STROKE_TEXT
init|=
literal|3
decl_stmt|;
comment|/**      * See PDF Reference 1.5 Table 5.3.      */
specifier|public
specifier|static
specifier|final
name|int
name|RENDERING_MODE_FILL_TEXT_AND_ADD_TO_PATH_FOR_CLIPPING
init|=
literal|4
decl_stmt|;
comment|/**      * See PDF Reference 1.5 Table 5.3.      */
specifier|public
specifier|static
specifier|final
name|int
name|RENDERING_MODE_STROKE_TEXT_AND_ADD_TO_PATH_FOR_CLIPPING
init|=
literal|5
decl_stmt|;
comment|/**      * See PDF Reference 1.5 Table 5.3.      */
specifier|public
specifier|static
specifier|final
name|int
name|RENDERING_MODE_FILL_THEN_STROKE_TEXT_AND_ADD_TO_PATH_FOR_CLIPPING
init|=
literal|6
decl_stmt|;
comment|/**      * See PDF Reference 1.5 Table 5.3.      */
specifier|public
specifier|static
specifier|final
name|int
name|RENDERING_MODE_ADD_TEXT_TO_PATH_FOR_CLIPPING
init|=
literal|7
decl_stmt|;
comment|//these are set default according to PDF Reference 1.5 section 5.2
specifier|private
name|float
name|characterSpacing
init|=
literal|0
decl_stmt|;
specifier|private
name|float
name|wordSpacing
init|=
literal|0
decl_stmt|;
specifier|private
name|float
name|horizontalScaling
init|=
literal|100
decl_stmt|;
specifier|private
name|float
name|leading
init|=
literal|0
decl_stmt|;
specifier|private
name|PDFont
name|font
decl_stmt|;
specifier|private
name|float
name|fontSize
decl_stmt|;
specifier|private
name|int
name|renderingMode
init|=
literal|0
decl_stmt|;
specifier|private
name|float
name|rise
init|=
literal|0
decl_stmt|;
specifier|private
name|boolean
name|knockout
init|=
literal|true
decl_stmt|;
comment|/**      * Get the value of the characterSpacing.      *      * @return The current characterSpacing.      */
specifier|public
name|float
name|getCharacterSpacing
parameter_list|()
block|{
return|return
name|characterSpacing
return|;
block|}
comment|/**      * Set the value of the characterSpacing.      *      * @param value The characterSpacing.      */
specifier|public
name|void
name|setCharacterSpacing
parameter_list|(
name|float
name|value
parameter_list|)
block|{
name|characterSpacing
operator|=
name|value
expr_stmt|;
block|}
comment|/**      * Get the value of the wordSpacing.      *      * @return The wordSpacing.      */
specifier|public
name|float
name|getWordSpacing
parameter_list|()
block|{
return|return
name|wordSpacing
return|;
block|}
comment|/**      * Set the value of the wordSpacing.      *      * @param value The wordSpacing.      */
specifier|public
name|void
name|setWordSpacing
parameter_list|(
name|float
name|value
parameter_list|)
block|{
name|wordSpacing
operator|=
name|value
expr_stmt|;
block|}
comment|/**      * Get the value of the horizontalScaling.  The default is 100.  This value      * is the percentage value 0-100 and not 0-1.  So for mathematical operations      * you will probably need to divide by 100 first.      *      * @return The horizontalScaling.      */
specifier|public
name|float
name|getHorizontalScalingPercent
parameter_list|()
block|{
return|return
name|horizontalScaling
return|;
block|}
comment|/**      * Set the value of the horizontalScaling.      *      * @param value The horizontalScaling.      */
specifier|public
name|void
name|setHorizontalScalingPercent
parameter_list|(
name|float
name|value
parameter_list|)
block|{
name|horizontalScaling
operator|=
name|value
expr_stmt|;
block|}
comment|/**      * Get the value of the leading.      *      * @return The leading.      */
specifier|public
name|float
name|getLeading
parameter_list|()
block|{
return|return
name|leading
return|;
block|}
comment|/**      * Set the value of the leading.      *      * @param value The leading.      */
specifier|public
name|void
name|setLeading
parameter_list|(
name|float
name|value
parameter_list|)
block|{
name|leading
operator|=
name|value
expr_stmt|;
block|}
comment|/**      * Get the value of the font.      *      * @return The font.      */
specifier|public
name|PDFont
name|getFont
parameter_list|()
block|{
return|return
name|font
return|;
block|}
comment|/**      * Set the value of the font.      *      * @param value The font.      */
specifier|public
name|void
name|setFont
parameter_list|(
name|PDFont
name|value
parameter_list|)
block|{
name|font
operator|=
name|value
expr_stmt|;
block|}
comment|/**      * Get the value of the fontSize.      *      * @return The fontSize.      */
specifier|public
name|float
name|getFontSize
parameter_list|()
block|{
return|return
name|fontSize
return|;
block|}
comment|/**      * Set the value of the fontSize.      *      * @param value The fontSize.      */
specifier|public
name|void
name|setFontSize
parameter_list|(
name|float
name|value
parameter_list|)
block|{
name|fontSize
operator|=
name|value
expr_stmt|;
block|}
comment|/**      * Get the value of the renderingMode.      *      * @return The renderingMode.      */
specifier|public
name|int
name|getRenderingMode
parameter_list|()
block|{
return|return
name|renderingMode
return|;
block|}
comment|/**      * Set the value of the renderingMode.      *      * @param value The renderingMode.      */
specifier|public
name|void
name|setRenderingMode
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|renderingMode
operator|=
name|value
expr_stmt|;
block|}
comment|/**      * Get the value of the rise.      *      * @return The rise.      */
specifier|public
name|float
name|getRise
parameter_list|()
block|{
return|return
name|rise
return|;
block|}
comment|/**      * Set the value of the rise.      *      * @param value The rise.      */
specifier|public
name|void
name|setRise
parameter_list|(
name|float
name|value
parameter_list|)
block|{
name|rise
operator|=
name|value
expr_stmt|;
block|}
comment|/**      * Get the value of the knockout.      *      * @return The knockout.      */
specifier|public
name|boolean
name|getKnockoutFlag
parameter_list|()
block|{
return|return
name|knockout
return|;
block|}
comment|/**      * Set the value of the knockout.      *      * @param value The knockout.      */
specifier|public
name|void
name|setKnockoutFlag
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|knockout
operator|=
name|value
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|Object
name|clone
parameter_list|()
block|{
try|try
block|{
return|return
name|super
operator|.
name|clone
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|ignore
parameter_list|)
block|{
comment|//ignore
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

