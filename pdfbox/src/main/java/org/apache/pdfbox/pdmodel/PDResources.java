begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|COSObjectable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|documentinterchange
operator|.
name|markedcontent
operator|.
name|PDPropertyList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDFontFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|form
operator|.
name|PDFormXObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|state
operator|.
name|PDExternalGraphicsState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDColorSpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|pattern
operator|.
name|PDAbstractPattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|shading
operator|.
name|PDShading
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|image
operator|.
name|PDImageXObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|PDXObject
import|;
end_import

begin_comment
comment|/**  * A set of resources available at the page/pages/stream level.  *   * @author Ben Litchfield  * @author John Hewson  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|PDResources
implements|implements
name|COSObjectable
block|{
specifier|private
specifier|final
name|COSDictionary
name|resources
decl_stmt|;
comment|/**      * Constructor for embedding.      */
specifier|public
name|PDResources
parameter_list|()
block|{
name|resources
operator|=
operator|new
name|COSDictionary
argument_list|()
expr_stmt|;
block|}
comment|/**      * Constructor for reading.      *       * @param resourceDictionary The cos dictionary for this resource.      */
comment|// todo: replace this constructor with a static factory which can cache PDResources at will
comment|//       also it should probably take a COSBase so that it is indirect-object aware.
comment|//       It might also want to have some context, e.g. knowing what the parent of the resources is?
specifier|public
name|PDResources
parameter_list|(
name|COSDictionary
name|resourceDictionary
parameter_list|)
block|{
if|if
condition|(
name|resourceDictionary
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"resourceDictionary is null"
argument_list|)
throw|;
block|}
name|resources
operator|=
name|resourceDictionary
expr_stmt|;
block|}
comment|/**      * Returns the the underlying dictionary.      */
specifier|public
name|COSDictionary
name|getCOSObject
parameter_list|()
block|{
return|return
name|resources
return|;
block|}
comment|/**      * Returns the font resource with the given name, or null if none exists.      */
specifier|public
name|PDFont
name|getFont
parameter_list|(
name|COSName
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|COSDictionary
name|dict
init|=
operator|(
name|COSDictionary
operator|)
name|get
argument_list|(
name|COSName
operator|.
name|FONT
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|dict
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|PDFontFactory
operator|.
name|createFont
argument_list|(
name|dict
argument_list|)
return|;
block|}
comment|/**      * Returns the color space resource with the given name, or null if none exists.      */
specifier|public
name|PDColorSpace
name|getColorSpace
parameter_list|(
name|COSName
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|COSBase
name|object
init|=
name|get
argument_list|(
name|COSName
operator|.
name|COLORSPACE
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|PDColorSpace
operator|.
name|create
argument_list|(
name|object
argument_list|,
name|this
argument_list|)
return|;
block|}
comment|/**      * Returns the external graphics state resource with the given name, or null if none exists.      */
specifier|public
name|PDExternalGraphicsState
name|getExtGState
parameter_list|(
name|COSName
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|COSDictionary
name|dict
init|=
operator|(
name|COSDictionary
operator|)
name|get
argument_list|(
name|COSName
operator|.
name|EXT_G_STATE
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|dict
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|PDExternalGraphicsState
argument_list|(
name|dict
argument_list|)
return|;
block|}
comment|/**      * Returns the shading resource with the given name, or null if none exists.      */
specifier|public
name|PDShading
name|getShading
parameter_list|(
name|COSName
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|COSDictionary
name|dict
init|=
operator|(
name|COSDictionary
operator|)
name|get
argument_list|(
name|COSName
operator|.
name|SHADING
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|dict
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|PDShading
operator|.
name|create
argument_list|(
name|dict
argument_list|)
return|;
block|}
comment|/**      * Returns the pattern resource with the given name, or null if none exists.      */
specifier|public
name|PDAbstractPattern
name|getPattern
parameter_list|(
name|COSName
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|COSDictionary
name|dict
init|=
operator|(
name|COSDictionary
operator|)
name|get
argument_list|(
name|COSName
operator|.
name|PATTERN
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|dict
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|PDAbstractPattern
operator|.
name|create
argument_list|(
name|dict
argument_list|)
return|;
block|}
comment|/**      * Returns the property list resource with the given name, or null if none exists.      */
specifier|public
name|PDPropertyList
name|getProperties
parameter_list|(
name|COSName
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|COSDictionary
name|dict
init|=
operator|(
name|COSDictionary
operator|)
name|get
argument_list|(
name|COSName
operator|.
name|PROPERTIES
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|dict
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|PDPropertyList
operator|.
name|create
argument_list|(
name|dict
argument_list|)
return|;
block|}
comment|/**      * Returns the XObject resource with the given name, or null if none exists.      */
specifier|public
name|PDXObject
name|getXObject
parameter_list|(
name|COSName
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|COSBase
name|value
init|=
name|get
argument_list|(
name|COSName
operator|.
name|XOBJECT
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|COSObject
condition|)
block|{
name|COSObject
name|object
init|=
operator|(
name|COSObject
operator|)
name|value
decl_stmt|;
comment|// add the object number to create an unique identifier
name|String
name|id
init|=
name|name
operator|.
name|getName
argument_list|()
decl_stmt|;
name|id
operator|+=
literal|"#"
operator|+
name|object
operator|.
name|getObjectNumber
argument_list|()
operator|.
name|intValue
argument_list|()
expr_stmt|;
return|return
name|PDXObject
operator|.
name|createXObject
argument_list|(
name|object
operator|.
name|getObject
argument_list|()
argument_list|,
name|id
argument_list|,
name|this
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|PDXObject
operator|.
name|createXObject
argument_list|(
name|value
argument_list|,
name|name
operator|.
name|getName
argument_list|()
argument_list|,
name|this
argument_list|)
return|;
block|}
block|}
comment|/**      * Returns the resource with the given name and kind, or null.      */
specifier|private
name|COSBase
name|get
parameter_list|(
name|COSName
name|kind
parameter_list|,
name|COSName
name|name
parameter_list|)
block|{
name|COSDictionary
name|dict
init|=
operator|(
name|COSDictionary
operator|)
name|resources
operator|.
name|getDictionaryObject
argument_list|(
name|kind
argument_list|)
decl_stmt|;
if|if
condition|(
name|dict
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|dict
operator|.
name|getDictionaryObject
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**      * Returns the names of the color space resources, if any.      */
specifier|public
name|Iterable
argument_list|<
name|COSName
argument_list|>
name|getColorSpaceNames
parameter_list|()
block|{
return|return
name|getNames
argument_list|(
name|COSName
operator|.
name|COLORSPACE
argument_list|)
return|;
block|}
comment|/**      * Returns the names of the XObject resources, if any.      */
specifier|public
name|Iterable
argument_list|<
name|COSName
argument_list|>
name|getXObjectNames
parameter_list|()
block|{
return|return
name|getNames
argument_list|(
name|COSName
operator|.
name|XOBJECT
argument_list|)
return|;
block|}
comment|/**      * Returns the names of the font resources, if any.      */
specifier|public
name|Iterable
argument_list|<
name|COSName
argument_list|>
name|getFontNames
parameter_list|()
block|{
return|return
name|getNames
argument_list|(
name|COSName
operator|.
name|FONT
argument_list|)
return|;
block|}
comment|/**      * Returns the names of the property list resources, if any.      */
specifier|public
name|Iterable
argument_list|<
name|COSName
argument_list|>
name|getPropertiesNames
parameter_list|()
block|{
return|return
name|getNames
argument_list|(
name|COSName
operator|.
name|PROPERTIES
argument_list|)
return|;
block|}
comment|/**      * Returns the names of the shading resources, if any.      */
specifier|public
name|Iterable
argument_list|<
name|COSName
argument_list|>
name|getShadingNames
parameter_list|()
block|{
return|return
name|getNames
argument_list|(
name|COSName
operator|.
name|SHADING
argument_list|)
return|;
block|}
comment|/**      * Returns the names of the pattern resources, if any.      */
specifier|public
name|Iterable
argument_list|<
name|COSName
argument_list|>
name|getPatternNames
parameter_list|()
block|{
return|return
name|getNames
argument_list|(
name|COSName
operator|.
name|PATTERN
argument_list|)
return|;
block|}
comment|/**      * Returns the names of the external graphics state resources, if any.      */
specifier|public
name|Iterable
argument_list|<
name|COSName
argument_list|>
name|getExtGStateNames
parameter_list|()
block|{
return|return
name|getNames
argument_list|(
name|COSName
operator|.
name|EXT_G_STATE
argument_list|)
return|;
block|}
comment|/**      * Returns the resource names of the given kind.      */
specifier|private
name|Iterable
argument_list|<
name|COSName
argument_list|>
name|getNames
parameter_list|(
name|COSName
name|kind
parameter_list|)
block|{
name|COSDictionary
name|dict
init|=
operator|(
name|COSDictionary
operator|)
name|resources
operator|.
name|getDictionaryObject
argument_list|(
name|kind
argument_list|)
decl_stmt|;
if|if
condition|(
name|dict
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
return|return
name|dict
operator|.
name|keySet
argument_list|()
return|;
block|}
comment|/**      * Adds the given font to the resources of the current page and returns the name for the      * new resources. Returns the existing resource name if the given item already exists.      *      * @param font the font to add      * @return the name of the resource in the resources dictionary      */
specifier|public
name|COSName
name|add
parameter_list|(
name|PDFont
name|font
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|add
argument_list|(
name|COSName
operator|.
name|FONT
argument_list|,
literal|"F"
argument_list|,
name|font
argument_list|)
return|;
block|}
comment|/**      * Adds the given color space to the resources of the current page and returns the name for the      * new resources. Returns the existing resource name if the given item already exists.      *      * @param colorSpace the color space to add      * @return the name of the resource in the resources dictionary      */
specifier|public
name|COSName
name|add
parameter_list|(
name|PDColorSpace
name|colorSpace
parameter_list|)
block|{
return|return
name|add
argument_list|(
name|COSName
operator|.
name|COLORSPACE
argument_list|,
literal|"cs"
argument_list|,
name|colorSpace
argument_list|)
return|;
block|}
comment|/**      * Adds the given external graphics state to the resources of the current page and returns the      * name for the new resources. Returns the existing resource name if the given item already exists.      *      * @param extGState the external graphics stae to add      * @return the name of the resource in the resources dictionary      */
specifier|public
name|COSName
name|add
parameter_list|(
name|PDExternalGraphicsState
name|extGState
parameter_list|)
block|{
return|return
name|add
argument_list|(
name|COSName
operator|.
name|EXT_G_STATE
argument_list|,
literal|"gs"
argument_list|,
name|extGState
argument_list|)
return|;
block|}
comment|/**      * Adds the given shading to the resources of the current page and returns the name for the      * new resources. Returns the existing resource name if the given item already exists.      *      * @param shading the shading to add      * @return the name of the resource in the resources dictionary      */
specifier|public
name|COSName
name|add
parameter_list|(
name|PDShading
name|shading
parameter_list|)
block|{
return|return
name|add
argument_list|(
name|COSName
operator|.
name|SHADING
argument_list|,
literal|"cs1"
argument_list|,
name|shading
argument_list|)
return|;
block|}
comment|/**      * Adds the given pattern to the resources of the current page and returns the name for the      * new resources. Returns the existing resource name if the given item already exists.      *      * @param pattern the pattern to add      * @return the name of the resource in the resources dictionary      */
specifier|public
name|COSName
name|add
parameter_list|(
name|PDAbstractPattern
name|pattern
parameter_list|)
block|{
return|return
name|add
argument_list|(
name|COSName
operator|.
name|PATTERN
argument_list|,
literal|"p"
argument_list|,
name|pattern
argument_list|)
return|;
block|}
comment|/**      * Adds the given property list to the resources of the current page and returns the name for      * the new resources. Returns the existing resource name if the given item already exists.      *      * @param properties the property list to add      * @return the name of the resource in the resources dictionary      */
specifier|public
name|COSName
name|add
parameter_list|(
name|PDPropertyList
name|properties
parameter_list|)
block|{
return|return
name|add
argument_list|(
name|COSName
operator|.
name|PROPERTIES
argument_list|,
literal|"Prop"
argument_list|,
name|properties
argument_list|)
return|;
block|}
comment|/**      * Adds the given image to the resources of the current page and returns the name for the      * new resources. Returns the existing resource name if the given item already exists.      *      * @param image the image to add      * @return the name of the resource in the resources dictionary      */
specifier|public
name|COSName
name|add
parameter_list|(
name|PDImageXObject
name|image
parameter_list|)
block|{
return|return
name|add
argument_list|(
name|COSName
operator|.
name|XOBJECT
argument_list|,
literal|"Im"
argument_list|,
name|image
argument_list|)
return|;
block|}
comment|/**      * Adds the given form to the resources of the current page and returns the name for the      * new resources. Returns the existing resource name if the given item already exists.      *      * @param form the form to add      * @return the name of the resource in the resources dictionary      */
specifier|public
name|COSName
name|add
parameter_list|(
name|PDFormXObject
name|form
parameter_list|)
block|{
return|return
name|add
argument_list|(
name|COSName
operator|.
name|XOBJECT
argument_list|,
literal|"Form"
argument_list|,
name|form
argument_list|)
return|;
block|}
comment|/**      * Adds the given XObject to the resources of the current page and returns the name for the      * new resources. Returns the existing resource name if the given item already exists.      *      * @param xobject the XObject to add      * @param prefix the prefix to be used when creating the resource name      * @return the name of the resource in the resources dictionary      */
specifier|public
name|COSName
name|add
parameter_list|(
name|PDXObject
name|xobject
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
return|return
name|add
argument_list|(
name|COSName
operator|.
name|XOBJECT
argument_list|,
name|prefix
argument_list|,
name|xobject
argument_list|)
return|;
block|}
comment|/**      * Adds the given resource if it does not already exist.      */
specifier|private
name|COSName
name|add
parameter_list|(
name|COSName
name|kind
parameter_list|,
name|String
name|prefix
parameter_list|,
name|COSObjectable
name|object
parameter_list|)
block|{
comment|// return the existing key if the item exists already
name|COSDictionary
name|dict
init|=
operator|(
name|COSDictionary
operator|)
name|resources
operator|.
name|getDictionaryObject
argument_list|(
name|kind
argument_list|)
decl_stmt|;
if|if
condition|(
name|dict
operator|!=
literal|null
operator|&&
name|dict
operator|.
name|containsValue
argument_list|(
name|object
operator|.
name|getCOSObject
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|dict
operator|.
name|getKeyForValue
argument_list|(
name|object
operator|.
name|getCOSObject
argument_list|()
argument_list|)
return|;
block|}
comment|// add the item with a new key
name|COSName
name|name
init|=
name|createKey
argument_list|(
name|kind
argument_list|,
name|prefix
argument_list|)
decl_stmt|;
name|put
argument_list|(
name|kind
argument_list|,
name|name
argument_list|,
name|object
argument_list|)
expr_stmt|;
return|return
name|name
return|;
block|}
comment|/**      * Returns a unique key for a new resource.      */
specifier|private
name|COSName
name|createKey
parameter_list|(
name|COSName
name|kind
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|COSDictionary
name|dict
init|=
operator|(
name|COSDictionary
operator|)
name|resources
operator|.
name|getDictionaryObject
argument_list|(
name|kind
argument_list|)
decl_stmt|;
if|if
condition|(
name|dict
operator|==
literal|null
condition|)
block|{
return|return
name|COSName
operator|.
name|getPDFName
argument_list|(
name|prefix
operator|+
literal|1
argument_list|)
return|;
block|}
comment|// find a unique key
name|String
name|key
decl_stmt|;
do|do
block|{
name|key
operator|=
name|prefix
operator|+
operator|(
name|dict
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|1
operator|)
expr_stmt|;
block|}
do|while
condition|(
name|dict
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
do|;
return|return
name|COSName
operator|.
name|getPDFName
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/**      * Sets the value of a given named resource.      */
specifier|private
name|void
name|put
parameter_list|(
name|COSName
name|kind
parameter_list|,
name|COSName
name|name
parameter_list|,
name|COSObjectable
name|object
parameter_list|)
block|{
name|COSDictionary
name|dict
init|=
operator|(
name|COSDictionary
operator|)
name|resources
operator|.
name|getDictionaryObject
argument_list|(
name|kind
argument_list|)
decl_stmt|;
if|if
condition|(
name|dict
operator|==
literal|null
condition|)
block|{
name|dict
operator|=
operator|new
name|COSDictionary
argument_list|()
expr_stmt|;
name|resources
operator|.
name|setItem
argument_list|(
name|kind
argument_list|,
name|dict
argument_list|)
expr_stmt|;
block|}
name|dict
operator|.
name|setItem
argument_list|(
name|name
argument_list|,
name|object
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the font resource with the given name.      *      * @param name the name of the resource      * @param font the font to be added      */
specifier|public
name|void
name|put
parameter_list|(
name|COSName
name|name
parameter_list|,
name|PDFont
name|font
parameter_list|)
throws|throws
name|IOException
block|{
name|put
argument_list|(
name|COSName
operator|.
name|FONT
argument_list|,
name|name
argument_list|,
name|font
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the color space resource with the given name.      *      * @param name the name of the resource      * @param colorSpace the color space to be added      */
specifier|public
name|void
name|put
parameter_list|(
name|COSName
name|name
parameter_list|,
name|PDColorSpace
name|colorSpace
parameter_list|)
throws|throws
name|IOException
block|{
name|put
argument_list|(
name|COSName
operator|.
name|COLORSPACE
argument_list|,
name|name
argument_list|,
name|colorSpace
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the external graphics state resource with the given name.      *      * @param name the name of the resource      * @param extGState the external graphics state to be added      */
specifier|public
name|void
name|put
parameter_list|(
name|COSName
name|name
parameter_list|,
name|PDExternalGraphicsState
name|extGState
parameter_list|)
throws|throws
name|IOException
block|{
name|put
argument_list|(
name|COSName
operator|.
name|EXT_G_STATE
argument_list|,
name|name
argument_list|,
name|extGState
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the shading resource with the given name.      *      * @param name the name of the resource      * @param shading the shading to be added      */
specifier|public
name|void
name|put
parameter_list|(
name|COSName
name|name
parameter_list|,
name|PDShading
name|shading
parameter_list|)
throws|throws
name|IOException
block|{
name|put
argument_list|(
name|COSName
operator|.
name|SHADING
argument_list|,
name|name
argument_list|,
name|shading
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the pattern resource with the given name.      *      * @param name the name of the resource      * @param pattern the pattern to be added      */
specifier|public
name|void
name|put
parameter_list|(
name|COSName
name|name
parameter_list|,
name|PDAbstractPattern
name|pattern
parameter_list|)
throws|throws
name|IOException
block|{
name|put
argument_list|(
name|COSName
operator|.
name|PATTERN
argument_list|,
name|name
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the property list resource with the given name.      *      * @param name the name of the resource      * @param properties the property list to be added      */
specifier|public
name|void
name|put
parameter_list|(
name|COSName
name|name
parameter_list|,
name|PDPropertyList
name|properties
parameter_list|)
throws|throws
name|IOException
block|{
name|put
argument_list|(
name|COSName
operator|.
name|PROPERTIES
argument_list|,
name|name
argument_list|,
name|properties
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the XObject resource with the given name.      *      * @param name the name of the resource      * @param xobject the XObject to be added      */
specifier|public
name|void
name|put
parameter_list|(
name|COSName
name|name
parameter_list|,
name|PDXObject
name|xobject
parameter_list|)
throws|throws
name|IOException
block|{
name|put
argument_list|(
name|COSName
operator|.
name|XOBJECT
argument_list|,
name|name
argument_list|,
name|xobject
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

