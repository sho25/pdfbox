begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|SoftReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|COSObjectable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|documentinterchange
operator|.
name|markedcontent
operator|.
name|PDPropertyList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDFontFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDPattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|form
operator|.
name|PDFormXObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|optionalcontent
operator|.
name|PDOptionalContentGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|state
operator|.
name|PDExtendedGraphicsState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDColorSpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|pattern
operator|.
name|PDAbstractPattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|shading
operator|.
name|PDShading
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|image
operator|.
name|PDImageXObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|PDXObject
import|;
end_import

begin_comment
comment|/**  * A set of resources available at the page/pages/stream level.  *   * @author Ben Litchfield  * @author John Hewson  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|PDResources
implements|implements
name|COSObjectable
block|{
specifier|private
specifier|final
name|COSDictionary
name|resources
decl_stmt|;
specifier|private
specifier|final
name|ResourceCache
name|cache
decl_stmt|;
comment|// PDFBOX-3442 cache fonts that are not indirect objects, as these aren't cached in ResourceCache
comment|// and this would result in huge memory footprint in text extraction
specifier|private
specifier|final
name|Map
argument_list|<
name|COSName
argument_list|,
name|SoftReference
argument_list|<
name|PDFont
argument_list|>
argument_list|>
name|directFontCache
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * Constructor for embedding.      */
specifier|public
name|PDResources
parameter_list|()
block|{
name|resources
operator|=
operator|new
name|COSDictionary
argument_list|()
expr_stmt|;
name|cache
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Constructor for reading.      *      * @param resourceDictionary The cos dictionary for this resource.      */
specifier|public
name|PDResources
parameter_list|(
name|COSDictionary
name|resourceDictionary
parameter_list|)
block|{
if|if
condition|(
name|resourceDictionary
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"resourceDictionary is null"
argument_list|)
throw|;
block|}
name|resources
operator|=
name|resourceDictionary
expr_stmt|;
name|cache
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Constructor for reading.      *      * @param resourceDictionary The cos dictionary for this resource.      * @param resourceCache The document's resource cache, may be null.      */
specifier|public
name|PDResources
parameter_list|(
name|COSDictionary
name|resourceDictionary
parameter_list|,
name|ResourceCache
name|resourceCache
parameter_list|)
block|{
if|if
condition|(
name|resourceDictionary
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"resourceDictionary is null"
argument_list|)
throw|;
block|}
name|resources
operator|=
name|resourceDictionary
expr_stmt|;
name|cache
operator|=
name|resourceCache
expr_stmt|;
block|}
comment|/**      * Returns the underlying dictionary.      */
annotation|@
name|Override
specifier|public
name|COSDictionary
name|getCOSObject
parameter_list|()
block|{
return|return
name|resources
return|;
block|}
comment|/**      * Returns the font resource with the given name, or null if none exists.      *      * @param name Name of the font resource.      * @throws IOException if something went wrong.      */
specifier|public
name|PDFont
name|getFont
parameter_list|(
name|COSName
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|COSObject
name|indirect
init|=
name|getIndirect
argument_list|(
name|COSName
operator|.
name|FONT
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|cache
operator|!=
literal|null
operator|&&
name|indirect
operator|!=
literal|null
condition|)
block|{
name|PDFont
name|cached
init|=
name|cache
operator|.
name|getFont
argument_list|(
name|indirect
argument_list|)
decl_stmt|;
if|if
condition|(
name|cached
operator|!=
literal|null
condition|)
block|{
return|return
name|cached
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|indirect
operator|==
literal|null
condition|)
block|{
name|SoftReference
argument_list|<
name|PDFont
argument_list|>
name|ref
init|=
name|directFontCache
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|!=
literal|null
condition|)
block|{
name|PDFont
name|cached
init|=
name|ref
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|cached
operator|!=
literal|null
condition|)
block|{
return|return
name|cached
return|;
block|}
block|}
block|}
name|PDFont
name|font
init|=
literal|null
decl_stmt|;
name|COSDictionary
name|dict
init|=
operator|(
name|COSDictionary
operator|)
name|get
argument_list|(
name|COSName
operator|.
name|FONT
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|dict
operator|!=
literal|null
condition|)
block|{
name|font
operator|=
name|PDFontFactory
operator|.
name|createFont
argument_list|(
name|dict
argument_list|,
name|cache
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cache
operator|!=
literal|null
operator|&&
name|indirect
operator|!=
literal|null
condition|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|indirect
argument_list|,
name|font
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|indirect
operator|==
literal|null
condition|)
block|{
name|directFontCache
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|SoftReference
argument_list|<>
argument_list|(
name|font
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|font
return|;
block|}
comment|/**      * Returns the color space resource with the given name, or null if none exists.      *       * @param name Name of the color space resource.      * @return a new color space.      * @throws IOException if something went wrong.      */
specifier|public
name|PDColorSpace
name|getColorSpace
parameter_list|(
name|COSName
name|name
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getColorSpace
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Returns the color space resource with the given name, or null if none exists. This method is      * for PDFBox internal use only, others should use {@link #getColorSpace(COSName)}.      *      * @param name Name of the color space resource.      * @param wasDefault if current color space was used by a default color space. This parameter is      * to      * @return a new color space.      * @throws IOException if something went wrong.      */
specifier|public
name|PDColorSpace
name|getColorSpace
parameter_list|(
name|COSName
name|name
parameter_list|,
name|boolean
name|wasDefault
parameter_list|)
throws|throws
name|IOException
block|{
name|COSObject
name|indirect
init|=
name|getIndirect
argument_list|(
name|COSName
operator|.
name|COLORSPACE
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|cache
operator|!=
literal|null
operator|&&
name|indirect
operator|!=
literal|null
condition|)
block|{
name|PDColorSpace
name|cached
init|=
name|cache
operator|.
name|getColorSpace
argument_list|(
name|indirect
argument_list|)
decl_stmt|;
if|if
condition|(
name|cached
operator|!=
literal|null
condition|)
block|{
return|return
name|cached
return|;
block|}
block|}
comment|// get the instance
name|PDColorSpace
name|colorSpace
decl_stmt|;
name|COSBase
name|object
init|=
name|get
argument_list|(
name|COSName
operator|.
name|COLORSPACE
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|object
operator|!=
literal|null
condition|)
block|{
name|colorSpace
operator|=
name|PDColorSpace
operator|.
name|create
argument_list|(
name|object
argument_list|,
name|this
argument_list|,
name|wasDefault
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|colorSpace
operator|=
name|PDColorSpace
operator|.
name|create
argument_list|(
name|name
argument_list|,
name|this
argument_list|,
name|wasDefault
argument_list|)
expr_stmt|;
block|}
comment|// we can't cache PDPattern, because it holds page resources, see PDFBOX-2370
if|if
condition|(
name|cache
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|colorSpace
operator|instanceof
name|PDPattern
operator|)
condition|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|indirect
argument_list|,
name|colorSpace
argument_list|)
expr_stmt|;
block|}
return|return
name|colorSpace
return|;
block|}
comment|/**      * Returns true if the given color space name exists in these resources.      *      * @param name Name of the color space resource.      */
specifier|public
name|boolean
name|hasColorSpace
parameter_list|(
name|COSName
name|name
parameter_list|)
block|{
return|return
name|get
argument_list|(
name|COSName
operator|.
name|COLORSPACE
argument_list|,
name|name
argument_list|)
operator|!=
literal|null
return|;
block|}
comment|/**      * Returns the extended graphics state resource with the given name, or null      * if none exists.      *      * @param name Name of the graphics state resource.      */
specifier|public
name|PDExtendedGraphicsState
name|getExtGState
parameter_list|(
name|COSName
name|name
parameter_list|)
block|{
name|COSObject
name|indirect
init|=
name|getIndirect
argument_list|(
name|COSName
operator|.
name|EXT_G_STATE
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|cache
operator|!=
literal|null
operator|&&
name|indirect
operator|!=
literal|null
condition|)
block|{
name|PDExtendedGraphicsState
name|cached
init|=
name|cache
operator|.
name|getExtGState
argument_list|(
name|indirect
argument_list|)
decl_stmt|;
if|if
condition|(
name|cached
operator|!=
literal|null
condition|)
block|{
return|return
name|cached
return|;
block|}
block|}
comment|// get the instance
name|PDExtendedGraphicsState
name|extGState
init|=
literal|null
decl_stmt|;
name|COSDictionary
name|dict
init|=
operator|(
name|COSDictionary
operator|)
name|get
argument_list|(
name|COSName
operator|.
name|EXT_G_STATE
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|dict
operator|!=
literal|null
condition|)
block|{
name|extGState
operator|=
operator|new
name|PDExtendedGraphicsState
argument_list|(
name|dict
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cache
operator|!=
literal|null
condition|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|indirect
argument_list|,
name|extGState
argument_list|)
expr_stmt|;
block|}
return|return
name|extGState
return|;
block|}
comment|/**      * Returns the shading resource with the given name, or null if none exists.      *      * @param name Name of the shading resource.      * @throws IOException if something went wrong.      */
specifier|public
name|PDShading
name|getShading
parameter_list|(
name|COSName
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|COSObject
name|indirect
init|=
name|getIndirect
argument_list|(
name|COSName
operator|.
name|SHADING
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|cache
operator|!=
literal|null
operator|&&
name|indirect
operator|!=
literal|null
condition|)
block|{
name|PDShading
name|cached
init|=
name|cache
operator|.
name|getShading
argument_list|(
name|indirect
argument_list|)
decl_stmt|;
if|if
condition|(
name|cached
operator|!=
literal|null
condition|)
block|{
return|return
name|cached
return|;
block|}
block|}
comment|// get the instance
name|PDShading
name|shading
init|=
literal|null
decl_stmt|;
name|COSDictionary
name|dict
init|=
operator|(
name|COSDictionary
operator|)
name|get
argument_list|(
name|COSName
operator|.
name|SHADING
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|dict
operator|!=
literal|null
condition|)
block|{
name|shading
operator|=
name|PDShading
operator|.
name|create
argument_list|(
name|dict
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cache
operator|!=
literal|null
condition|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|indirect
argument_list|,
name|shading
argument_list|)
expr_stmt|;
block|}
return|return
name|shading
return|;
block|}
comment|/**      * Returns the pattern resource with the given name, or null if none exists.      *       * @param name Name of the pattern resource.      * @throws IOException if something went wrong.      */
specifier|public
name|PDAbstractPattern
name|getPattern
parameter_list|(
name|COSName
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|COSObject
name|indirect
init|=
name|getIndirect
argument_list|(
name|COSName
operator|.
name|PATTERN
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|cache
operator|!=
literal|null
operator|&&
name|indirect
operator|!=
literal|null
condition|)
block|{
name|PDAbstractPattern
name|cached
init|=
name|cache
operator|.
name|getPattern
argument_list|(
name|indirect
argument_list|)
decl_stmt|;
if|if
condition|(
name|cached
operator|!=
literal|null
condition|)
block|{
return|return
name|cached
return|;
block|}
block|}
comment|// get the instance
name|PDAbstractPattern
name|pattern
init|=
literal|null
decl_stmt|;
name|COSDictionary
name|dict
init|=
operator|(
name|COSDictionary
operator|)
name|get
argument_list|(
name|COSName
operator|.
name|PATTERN
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|dict
operator|!=
literal|null
condition|)
block|{
name|pattern
operator|=
name|PDAbstractPattern
operator|.
name|create
argument_list|(
name|dict
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cache
operator|!=
literal|null
condition|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|indirect
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
block|}
return|return
name|pattern
return|;
block|}
comment|/**      * Returns the property list resource with the given name, or null if none exists.      *       * @param name Name of the property list resource.      */
specifier|public
name|PDPropertyList
name|getProperties
parameter_list|(
name|COSName
name|name
parameter_list|)
block|{
name|COSObject
name|indirect
init|=
name|getIndirect
argument_list|(
name|COSName
operator|.
name|PROPERTIES
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|cache
operator|!=
literal|null
operator|&&
name|indirect
operator|!=
literal|null
condition|)
block|{
name|PDPropertyList
name|cached
init|=
name|cache
operator|.
name|getProperties
argument_list|(
name|indirect
argument_list|)
decl_stmt|;
if|if
condition|(
name|cached
operator|!=
literal|null
condition|)
block|{
return|return
name|cached
return|;
block|}
block|}
comment|// get the instance
name|PDPropertyList
name|propertyList
init|=
literal|null
decl_stmt|;
name|COSDictionary
name|dict
init|=
operator|(
name|COSDictionary
operator|)
name|get
argument_list|(
name|COSName
operator|.
name|PROPERTIES
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|dict
operator|!=
literal|null
condition|)
block|{
name|propertyList
operator|=
name|PDPropertyList
operator|.
name|create
argument_list|(
name|dict
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cache
operator|!=
literal|null
condition|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|indirect
argument_list|,
name|propertyList
argument_list|)
expr_stmt|;
block|}
return|return
name|propertyList
return|;
block|}
comment|/**      * Tells whether the XObject resource with the given name is an image.      *      * @param name Name of the XObject resource.      * @return true if it is an image XObject, false if not.      */
specifier|public
name|boolean
name|isImageXObject
parameter_list|(
name|COSName
name|name
parameter_list|)
block|{
comment|// get the instance
name|COSBase
name|value
init|=
name|get
argument_list|(
name|COSName
operator|.
name|XOBJECT
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|COSObject
condition|)
block|{
name|value
operator|=
operator|(
operator|(
name|COSObject
operator|)
name|value
operator|)
operator|.
name|getObject
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|value
operator|instanceof
name|COSStream
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|COSStream
name|stream
init|=
operator|(
name|COSStream
operator|)
name|value
decl_stmt|;
return|return
name|COSName
operator|.
name|IMAGE
operator|.
name|equals
argument_list|(
name|stream
operator|.
name|getCOSName
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns the XObject resource with the given name, or null if none exists.      *       * @param name Name of the XObject resource.      * @throws IOException if something went wrong.      */
specifier|public
name|PDXObject
name|getXObject
parameter_list|(
name|COSName
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|COSObject
name|indirect
init|=
name|getIndirect
argument_list|(
name|COSName
operator|.
name|XOBJECT
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|cache
operator|!=
literal|null
operator|&&
name|indirect
operator|!=
literal|null
condition|)
block|{
name|PDXObject
name|cached
init|=
name|cache
operator|.
name|getXObject
argument_list|(
name|indirect
argument_list|)
decl_stmt|;
if|if
condition|(
name|cached
operator|!=
literal|null
condition|)
block|{
return|return
name|cached
return|;
block|}
block|}
comment|// get the instance
name|PDXObject
name|xobject
decl_stmt|;
name|COSBase
name|value
init|=
name|get
argument_list|(
name|COSName
operator|.
name|XOBJECT
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|xobject
operator|=
literal|null
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|COSObject
condition|)
block|{
name|xobject
operator|=
name|PDXObject
operator|.
name|createXObject
argument_list|(
operator|(
operator|(
name|COSObject
operator|)
name|value
operator|)
operator|.
name|getObject
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|xobject
operator|=
name|PDXObject
operator|.
name|createXObject
argument_list|(
name|value
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cache
operator|!=
literal|null
operator|&&
name|isAllowedCache
argument_list|(
name|xobject
argument_list|)
condition|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|indirect
argument_list|,
name|xobject
argument_list|)
expr_stmt|;
block|}
return|return
name|xobject
return|;
block|}
specifier|private
name|boolean
name|isAllowedCache
parameter_list|(
name|PDXObject
name|xobject
parameter_list|)
block|{
if|if
condition|(
name|xobject
operator|instanceof
name|PDImageXObject
condition|)
block|{
name|COSBase
name|colorSpace
init|=
name|xobject
operator|.
name|getCOSObject
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|COLORSPACE
argument_list|)
decl_stmt|;
if|if
condition|(
name|colorSpace
operator|instanceof
name|COSName
condition|)
block|{
comment|// don't cache if it might use page resources, see PDFBOX-2370 and PDFBOX-3484
name|COSName
name|colorSpaceName
init|=
operator|(
name|COSName
operator|)
name|colorSpace
decl_stmt|;
if|if
condition|(
name|colorSpaceName
operator|.
name|equals
argument_list|(
name|COSName
operator|.
name|DEVICECMYK
argument_list|)
operator|&&
name|hasColorSpace
argument_list|(
name|COSName
operator|.
name|DEFAULT_CMYK
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|colorSpaceName
operator|.
name|equals
argument_list|(
name|COSName
operator|.
name|DEVICERGB
argument_list|)
operator|&&
name|hasColorSpace
argument_list|(
name|COSName
operator|.
name|DEFAULT_RGB
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|colorSpaceName
operator|.
name|equals
argument_list|(
name|COSName
operator|.
name|DEVICEGRAY
argument_list|)
operator|&&
name|hasColorSpace
argument_list|(
name|COSName
operator|.
name|DEFAULT_GRAY
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|hasColorSpace
argument_list|(
name|colorSpaceName
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Returns the resource with the given name and kind as an indirect object, or null.      */
specifier|private
name|COSObject
name|getIndirect
parameter_list|(
name|COSName
name|kind
parameter_list|,
name|COSName
name|name
parameter_list|)
block|{
name|COSDictionary
name|dict
init|=
operator|(
name|COSDictionary
operator|)
name|resources
operator|.
name|getDictionaryObject
argument_list|(
name|kind
argument_list|)
decl_stmt|;
if|if
condition|(
name|dict
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|COSBase
name|base
init|=
name|dict
operator|.
name|getItem
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|base
operator|instanceof
name|COSObject
condition|)
block|{
return|return
operator|(
name|COSObject
operator|)
name|base
return|;
block|}
comment|// not an indirect object. Resource may have been added at runtime.
return|return
literal|null
return|;
block|}
comment|/**      * Returns the resource with the given name and kind, or null.      */
specifier|private
name|COSBase
name|get
parameter_list|(
name|COSName
name|kind
parameter_list|,
name|COSName
name|name
parameter_list|)
block|{
name|COSDictionary
name|dict
init|=
operator|(
name|COSDictionary
operator|)
name|resources
operator|.
name|getDictionaryObject
argument_list|(
name|kind
argument_list|)
decl_stmt|;
if|if
condition|(
name|dict
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|dict
operator|.
name|getDictionaryObject
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**      * Returns the names of the color space resources, if any.      */
specifier|public
name|Iterable
argument_list|<
name|COSName
argument_list|>
name|getColorSpaceNames
parameter_list|()
block|{
return|return
name|getNames
argument_list|(
name|COSName
operator|.
name|COLORSPACE
argument_list|)
return|;
block|}
comment|/**      * Returns the names of the XObject resources, if any.      */
specifier|public
name|Iterable
argument_list|<
name|COSName
argument_list|>
name|getXObjectNames
parameter_list|()
block|{
return|return
name|getNames
argument_list|(
name|COSName
operator|.
name|XOBJECT
argument_list|)
return|;
block|}
comment|/**      * Returns the names of the font resources, if any.      */
specifier|public
name|Iterable
argument_list|<
name|COSName
argument_list|>
name|getFontNames
parameter_list|()
block|{
return|return
name|getNames
argument_list|(
name|COSName
operator|.
name|FONT
argument_list|)
return|;
block|}
comment|/**      * Returns the names of the property list resources, if any.      */
specifier|public
name|Iterable
argument_list|<
name|COSName
argument_list|>
name|getPropertiesNames
parameter_list|()
block|{
return|return
name|getNames
argument_list|(
name|COSName
operator|.
name|PROPERTIES
argument_list|)
return|;
block|}
comment|/**      * Returns the names of the shading resources, if any.      */
specifier|public
name|Iterable
argument_list|<
name|COSName
argument_list|>
name|getShadingNames
parameter_list|()
block|{
return|return
name|getNames
argument_list|(
name|COSName
operator|.
name|SHADING
argument_list|)
return|;
block|}
comment|/**      * Returns the names of the pattern resources, if any.      */
specifier|public
name|Iterable
argument_list|<
name|COSName
argument_list|>
name|getPatternNames
parameter_list|()
block|{
return|return
name|getNames
argument_list|(
name|COSName
operator|.
name|PATTERN
argument_list|)
return|;
block|}
comment|/**      * Returns the names of the extended graphics state resources, if any.      */
specifier|public
name|Iterable
argument_list|<
name|COSName
argument_list|>
name|getExtGStateNames
parameter_list|()
block|{
return|return
name|getNames
argument_list|(
name|COSName
operator|.
name|EXT_G_STATE
argument_list|)
return|;
block|}
comment|/**      * Returns the resource names of the given kind.      */
specifier|private
name|Iterable
argument_list|<
name|COSName
argument_list|>
name|getNames
parameter_list|(
name|COSName
name|kind
parameter_list|)
block|{
name|COSDictionary
name|dict
init|=
operator|(
name|COSDictionary
operator|)
name|resources
operator|.
name|getDictionaryObject
argument_list|(
name|kind
argument_list|)
decl_stmt|;
if|if
condition|(
name|dict
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
return|return
name|dict
operator|.
name|keySet
argument_list|()
return|;
block|}
comment|/**      * Adds the given font to the resources of the current page and returns the name for the      * new resources. Returns the existing resource name if the given item already exists.      *      * @param font the font to add      * @return the name of the resource in the resources dictionary      */
specifier|public
name|COSName
name|add
parameter_list|(
name|PDFont
name|font
parameter_list|)
block|{
return|return
name|add
argument_list|(
name|COSName
operator|.
name|FONT
argument_list|,
literal|"F"
argument_list|,
name|font
argument_list|)
return|;
block|}
comment|/**      * Adds the given color space to the resources of the current page and returns the name for the      * new resources. Returns the existing resource name if the given item already exists.      *      * @param colorSpace the color space to add      * @return the name of the resource in the resources dictionary      */
specifier|public
name|COSName
name|add
parameter_list|(
name|PDColorSpace
name|colorSpace
parameter_list|)
block|{
return|return
name|add
argument_list|(
name|COSName
operator|.
name|COLORSPACE
argument_list|,
literal|"cs"
argument_list|,
name|colorSpace
argument_list|)
return|;
block|}
comment|/**      * Adds the given extended graphics state to the resources of the current page and returns the      * name for the new resources. Returns the existing resource name if the given item already exists.      *      * @param extGState the extended graphics state to add      * @return the name of the resource in the resources dictionary      */
specifier|public
name|COSName
name|add
parameter_list|(
name|PDExtendedGraphicsState
name|extGState
parameter_list|)
block|{
return|return
name|add
argument_list|(
name|COSName
operator|.
name|EXT_G_STATE
argument_list|,
literal|"gs"
argument_list|,
name|extGState
argument_list|)
return|;
block|}
comment|/**      * Adds the given shading to the resources of the current page and returns the name for the      * new resources. Returns the existing resource name if the given item already exists.      *      * @param shading the shading to add      * @return the name of the resource in the resources dictionary      */
specifier|public
name|COSName
name|add
parameter_list|(
name|PDShading
name|shading
parameter_list|)
block|{
return|return
name|add
argument_list|(
name|COSName
operator|.
name|SHADING
argument_list|,
literal|"sh"
argument_list|,
name|shading
argument_list|)
return|;
block|}
comment|/**      * Adds the given pattern to the resources of the current page and returns the name for the      * new resources. Returns the existing resource name if the given item already exists.      *      * @param pattern the pattern to add      * @return the name of the resource in the resources dictionary      */
specifier|public
name|COSName
name|add
parameter_list|(
name|PDAbstractPattern
name|pattern
parameter_list|)
block|{
return|return
name|add
argument_list|(
name|COSName
operator|.
name|PATTERN
argument_list|,
literal|"p"
argument_list|,
name|pattern
argument_list|)
return|;
block|}
comment|/**      * Adds the given property list to the resources of the current page and returns the name for      * the new resources. Returns the existing resource name if the given item already exists.      *      * @param properties the property list to add      * @return the name of the resource in the resources dictionary      */
specifier|public
name|COSName
name|add
parameter_list|(
name|PDPropertyList
name|properties
parameter_list|)
block|{
if|if
condition|(
name|properties
operator|instanceof
name|PDOptionalContentGroup
condition|)
block|{
return|return
name|add
argument_list|(
name|COSName
operator|.
name|PROPERTIES
argument_list|,
literal|"oc"
argument_list|,
name|properties
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|add
argument_list|(
name|COSName
operator|.
name|PROPERTIES
argument_list|,
literal|"Prop"
argument_list|,
name|properties
argument_list|)
return|;
block|}
block|}
comment|/**      * Adds the given image to the resources of the current page and returns the name for the      * new resources. Returns the existing resource name if the given item already exists.      *      * @param image the image to add      * @return the name of the resource in the resources dictionary      */
specifier|public
name|COSName
name|add
parameter_list|(
name|PDImageXObject
name|image
parameter_list|)
block|{
return|return
name|add
argument_list|(
name|COSName
operator|.
name|XOBJECT
argument_list|,
literal|"Im"
argument_list|,
name|image
argument_list|)
return|;
block|}
comment|/**      * Adds the given form to the resources of the current page and returns the name for the      * new resources. Returns the existing resource name if the given item already exists.      *      * @param form the form to add      * @return the name of the resource in the resources dictionary      */
specifier|public
name|COSName
name|add
parameter_list|(
name|PDFormXObject
name|form
parameter_list|)
block|{
return|return
name|add
argument_list|(
name|COSName
operator|.
name|XOBJECT
argument_list|,
literal|"Form"
argument_list|,
name|form
argument_list|)
return|;
block|}
comment|/**      * Adds the given XObject to the resources of the current page and returns the name for the      * new resources. Returns the existing resource name if the given item already exists.      *      * @param xobject the XObject to add      * @param prefix the prefix to be used when creating the resource name      * @return the name of the resource in the resources dictionary      */
specifier|public
name|COSName
name|add
parameter_list|(
name|PDXObject
name|xobject
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
return|return
name|add
argument_list|(
name|COSName
operator|.
name|XOBJECT
argument_list|,
name|prefix
argument_list|,
name|xobject
argument_list|)
return|;
block|}
comment|/**      * Adds the given resource if it does not already exist.      */
specifier|private
name|COSName
name|add
parameter_list|(
name|COSName
name|kind
parameter_list|,
name|String
name|prefix
parameter_list|,
name|COSObjectable
name|object
parameter_list|)
block|{
comment|// return the existing key if the item exists already
name|COSDictionary
name|dict
init|=
operator|(
name|COSDictionary
operator|)
name|resources
operator|.
name|getDictionaryObject
argument_list|(
name|kind
argument_list|)
decl_stmt|;
if|if
condition|(
name|dict
operator|!=
literal|null
operator|&&
name|dict
operator|.
name|containsValue
argument_list|(
name|object
operator|.
name|getCOSObject
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|dict
operator|.
name|getKeyForValue
argument_list|(
name|object
operator|.
name|getCOSObject
argument_list|()
argument_list|)
return|;
block|}
comment|// PDFBOX-4509: It could exist as an indirect object, happens when a font is taken from the
comment|// AcroForm default resources of a loaded PDF.
if|if
condition|(
name|dict
operator|!=
literal|null
operator|&&
name|COSName
operator|.
name|FONT
operator|.
name|equals
argument_list|(
name|kind
argument_list|)
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|COSName
argument_list|,
name|COSBase
argument_list|>
name|entry
range|:
name|dict
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|instanceof
name|COSObject
operator|&&
name|object
operator|.
name|getCOSObject
argument_list|()
operator|==
operator|(
operator|(
name|COSObject
operator|)
name|entry
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|getObject
argument_list|()
condition|)
block|{
return|return
name|entry
operator|.
name|getKey
argument_list|()
return|;
block|}
block|}
block|}
comment|// add the item with a new key
name|COSName
name|name
init|=
name|createKey
argument_list|(
name|kind
argument_list|,
name|prefix
argument_list|)
decl_stmt|;
name|put
argument_list|(
name|kind
argument_list|,
name|name
argument_list|,
name|object
argument_list|)
expr_stmt|;
return|return
name|name
return|;
block|}
comment|/**      * Returns a unique key for a new resource.      */
specifier|private
name|COSName
name|createKey
parameter_list|(
name|COSName
name|kind
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|COSDictionary
name|dict
init|=
operator|(
name|COSDictionary
operator|)
name|resources
operator|.
name|getDictionaryObject
argument_list|(
name|kind
argument_list|)
decl_stmt|;
if|if
condition|(
name|dict
operator|==
literal|null
condition|)
block|{
return|return
name|COSName
operator|.
name|getPDFName
argument_list|(
name|prefix
operator|+
literal|1
argument_list|)
return|;
block|}
comment|// find a unique key
name|String
name|key
decl_stmt|;
name|int
name|n
init|=
name|dict
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
do|do
block|{
operator|++
name|n
expr_stmt|;
name|key
operator|=
name|prefix
operator|+
name|n
expr_stmt|;
block|}
do|while
condition|(
name|dict
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
do|;
return|return
name|COSName
operator|.
name|getPDFName
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/**      * Sets the value of a given named resource.      */
specifier|private
name|void
name|put
parameter_list|(
name|COSName
name|kind
parameter_list|,
name|COSName
name|name
parameter_list|,
name|COSObjectable
name|object
parameter_list|)
block|{
name|COSDictionary
name|dict
init|=
operator|(
name|COSDictionary
operator|)
name|resources
operator|.
name|getDictionaryObject
argument_list|(
name|kind
argument_list|)
decl_stmt|;
if|if
condition|(
name|dict
operator|==
literal|null
condition|)
block|{
name|dict
operator|=
operator|new
name|COSDictionary
argument_list|()
expr_stmt|;
name|resources
operator|.
name|setItem
argument_list|(
name|kind
argument_list|,
name|dict
argument_list|)
expr_stmt|;
block|}
name|dict
operator|.
name|setItem
argument_list|(
name|name
argument_list|,
name|object
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the font resource with the given name.      *      * @param name the name of the resource      * @param font the font to be added      */
specifier|public
name|void
name|put
parameter_list|(
name|COSName
name|name
parameter_list|,
name|PDFont
name|font
parameter_list|)
block|{
name|put
argument_list|(
name|COSName
operator|.
name|FONT
argument_list|,
name|name
argument_list|,
name|font
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the color space resource with the given name.      *      * @param name the name of the resource      * @param colorSpace the color space to be added      */
specifier|public
name|void
name|put
parameter_list|(
name|COSName
name|name
parameter_list|,
name|PDColorSpace
name|colorSpace
parameter_list|)
block|{
name|put
argument_list|(
name|COSName
operator|.
name|COLORSPACE
argument_list|,
name|name
argument_list|,
name|colorSpace
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the extended graphics state resource with the given name.      *      * @param name the name of the resource      * @param extGState the extended graphics state to be added      */
specifier|public
name|void
name|put
parameter_list|(
name|COSName
name|name
parameter_list|,
name|PDExtendedGraphicsState
name|extGState
parameter_list|)
block|{
name|put
argument_list|(
name|COSName
operator|.
name|EXT_G_STATE
argument_list|,
name|name
argument_list|,
name|extGState
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the shading resource with the given name.      *      * @param name the name of the resource      * @param shading the shading to be added      */
specifier|public
name|void
name|put
parameter_list|(
name|COSName
name|name
parameter_list|,
name|PDShading
name|shading
parameter_list|)
block|{
name|put
argument_list|(
name|COSName
operator|.
name|SHADING
argument_list|,
name|name
argument_list|,
name|shading
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the pattern resource with the given name.      *      * @param name the name of the resource      * @param pattern the pattern to be added      */
specifier|public
name|void
name|put
parameter_list|(
name|COSName
name|name
parameter_list|,
name|PDAbstractPattern
name|pattern
parameter_list|)
block|{
name|put
argument_list|(
name|COSName
operator|.
name|PATTERN
argument_list|,
name|name
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the property list resource with the given name.      *      * @param name the name of the resource      * @param properties the property list to be added      */
specifier|public
name|void
name|put
parameter_list|(
name|COSName
name|name
parameter_list|,
name|PDPropertyList
name|properties
parameter_list|)
block|{
name|put
argument_list|(
name|COSName
operator|.
name|PROPERTIES
argument_list|,
name|name
argument_list|,
name|properties
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the XObject resource with the given name.      *      * @param name the name of the resource      * @param xobject the XObject to be added      */
specifier|public
name|void
name|put
parameter_list|(
name|COSName
name|name
parameter_list|,
name|PDXObject
name|xobject
parameter_list|)
block|{
name|put
argument_list|(
name|COSName
operator|.
name|XOBJECT
argument_list|,
name|name
argument_list|,
name|xobject
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the resource cache associated with the Resources, or null if there is none.      */
specifier|public
name|ResourceCache
name|getResourceCache
parameter_list|()
block|{
return|return
name|cache
return|;
block|}
block|}
end_class

end_unit

