begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|form
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|COSArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|COSObjectable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDTextStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|fdf
operator|.
name|FDFField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|action
operator|.
name|PDFormFieldAdditionalActions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAnnotationWidget
import|;
end_import

begin_comment
comment|/**  * A field in an interactive form.  *  * @author Andreas Lehmk√ºhler  *   */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|PDFieldTreeNode
implements|implements
name|COSObjectable
block|{
comment|/**      * Ff flags.      */
specifier|private
specifier|static
specifier|final
name|int
name|FLAG_READ_ONLY
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|FLAG_REQUIRED
init|=
literal|1
operator|<<
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|FLAG_NO_EXPORT
init|=
literal|1
operator|<<
literal|2
decl_stmt|;
comment|/**      * Field type Text.      */
specifier|private
specifier|static
specifier|final
name|String
name|FIELD_TYPE_TEXT
init|=
literal|"Tx"
decl_stmt|;
comment|/**      * Field type Button.      */
specifier|private
specifier|static
specifier|final
name|String
name|FIELD_TYPE_BUTTON
init|=
literal|"Btn"
decl_stmt|;
comment|/**      * Field type Button.      */
specifier|private
specifier|static
specifier|final
name|String
name|FIELD_TYPE_CHOICE
init|=
literal|"Ch"
decl_stmt|;
comment|/**      * Field type Button.      */
specifier|private
specifier|static
specifier|final
name|String
name|FIELD_TYPE_SIGNATURE
init|=
literal|"Sig"
decl_stmt|;
specifier|private
name|PDAcroForm
name|acroForm
decl_stmt|;
specifier|private
name|COSDictionary
name|dictionary
decl_stmt|;
specifier|private
name|PDFieldTreeNode
name|parent
init|=
literal|null
decl_stmt|;
comment|/**      * Constructor.      *       * @param theAcroForm The form that this field is part of.      */
specifier|protected
name|PDFieldTreeNode
parameter_list|(
name|PDAcroForm
name|theAcroForm
parameter_list|)
block|{
name|this
argument_list|(
name|theAcroForm
argument_list|,
operator|new
name|COSDictionary
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor.      *       * @param theAcroForm The form that this field is part of.      * @param field the PDF object to represent as a field.      * @param parentNode the parent node of the node to be created      */
specifier|protected
name|PDFieldTreeNode
parameter_list|(
name|PDAcroForm
name|theAcroForm
parameter_list|,
name|COSDictionary
name|field
parameter_list|,
name|PDFieldTreeNode
name|parentNode
parameter_list|)
block|{
name|acroForm
operator|=
name|theAcroForm
expr_stmt|;
name|dictionary
operator|=
name|field
expr_stmt|;
name|parent
operator|=
name|parentNode
expr_stmt|;
block|}
comment|/**      * Returns the node in the field tree from which a specific attribute might be inherited.      *      * @param field the field from which to look for the attribute      * @param key the key to look for      * @return PDFieldTreeNode the node from which the attribute will be inherited or null      */
specifier|public
name|PDFieldTreeNode
name|getInheritableAttributesNode
parameter_list|(
name|PDFieldTreeNode
name|field
parameter_list|,
name|COSName
name|key
parameter_list|)
block|{
if|if
condition|(
name|field
operator|.
name|getDictionary
argument_list|()
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|field
return|;
block|}
else|else
block|{
name|PDFieldTreeNode
name|parentField
init|=
name|field
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentField
operator|!=
literal|null
condition|)
block|{
name|getInheritableAttributesNode
argument_list|(
name|parentField
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Returns the given attribute, inheriting from parent nodes if necessary.      *      * @param key the key to look up      * @return COS value for the given key      */
specifier|protected
name|COSBase
name|getInheritableAttribute
parameter_list|(
name|COSName
name|key
parameter_list|)
block|{
name|PDFieldTreeNode
name|attributesNode
init|=
name|getInheritableAttributesNode
argument_list|(
name|this
argument_list|,
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|attributesNode
operator|!=
literal|null
condition|)
block|{
return|return
name|attributesNode
operator|.
name|getDictionary
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|key
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Sets the given attribute, inheriting from parent nodes if necessary.      *      * @param key the key to look up      * @param value the new attributes value      */
specifier|protected
name|void
name|setInheritableAttribute
parameter_list|(
name|COSName
name|key
parameter_list|,
name|COSBase
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|removeInheritableAttribute
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PDFieldTreeNode
name|attributesNode
init|=
name|getInheritableAttributesNode
argument_list|(
name|this
argument_list|,
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|attributesNode
operator|!=
literal|null
condition|)
block|{
name|attributesNode
operator|.
name|getDictionary
argument_list|()
operator|.
name|setItem
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getDictionary
argument_list|()
operator|.
name|setItem
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Removes the given attribute, inheriting from parent nodes if necessary.      *      * @param key the key to look up      */
specifier|protected
name|void
name|removeInheritableAttribute
parameter_list|(
name|COSName
name|key
parameter_list|)
block|{
name|PDFieldTreeNode
name|attributesNode
init|=
name|getInheritableAttributesNode
argument_list|(
name|this
argument_list|,
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|attributesNode
operator|!=
literal|null
condition|)
block|{
name|attributesNode
operator|.
name|getDictionary
argument_list|()
operator|.
name|removeItem
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Get a text as text stream.      *       * Some dictionary entries allow either a text or a text stream.      *       * @param cosBaseEntry the potential text or text stream      * @return the text stream      * @throws IOException if the field dictionary entry is not a text type      */
specifier|protected
name|PDTextStream
name|getAsTextStream
parameter_list|(
name|COSBase
name|cosBaseEntry
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|cosBaseEntry
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|PDTextStream
name|textStream
init|=
name|PDTextStream
operator|.
name|createTextStream
argument_list|(
name|cosBaseEntry
argument_list|)
decl_stmt|;
comment|// This will happen if the entry was not a COSString or COSStream
if|if
condition|(
name|textStream
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid field value. Unexpected type "
operator|+
name|cosBaseEntry
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
return|return
name|textStream
return|;
block|}
block|}
block|}
comment|/**      * Get the FT entry of the field. This is a read only field and is set depending on the actual type. The field type      * is an inheritable attribute.      *       * @return The Field type.      *       */
specifier|public
specifier|abstract
name|String
name|getFieldType
parameter_list|()
function_decl|;
comment|/**      * Get the value of the "DV" entry. The "DV" entry is an inheritable attribute.      *       * This will return null if the "DV" entry doesn't exist or if it has no value assigned.      *       * The different field types do require specific object types for their value      * e.g. for RadioButtons the DV entry needs to be a name object.      * If the value doesn't match the expected type an IOException is thrown. Such a wrong entry might      * have been set with a different library or by using PDFBox low level COS model.      *       * To get the value in such cases the lower level COS model can be used.      *       * @return The value of this field.      * @throws IOException If there is an error reading the data for this field      *      or the type is not in line with the fields required type.      *       */
specifier|public
specifier|abstract
name|Object
name|getDefaultValue
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**      * Set the value of the "DV" entry. The "DV" entry is an inheritable attribute.      *       * The different field types do require specific object types for their value      * e.g. for RadioButtons the DV entry needs to be a name object. This needs to be handled by the      * individual classes.      *       * Trying to set the default value for a {@link PDPushButton} field will lead to an       * {@link IllegalArgumentException} as PDPushButton fields do not support setting the       * entry although, common to all field types, the DV entry shall not be set.      *       * As a result it might be necessary to check the type of the value before      * reusing it.      *       * @param defaultValue The new default field value.      */
specifier|public
specifier|abstract
name|void
name|setDefaultValue
parameter_list|(
name|String
name|defaultValue
parameter_list|)
function_decl|;
comment|/**      * Get the value of the "V" entry. The "V" entry is an inheritable attribute.      *       * This will return null if the "V" entry doesn't exist or if it has no value assigned.      *       * The different field types do require specific object types for their value      * e.g. for RadioButtons the V entry needs to be a name object.      * If the value doesn't match the expected type an IOException is thrown. Such a wrong entry might      * have been set with a different library or by using PDFBox low level COS model.      *       * To get the value in such cases the lower level COS model can be used.      *       * As a result it might be necessary to check the type of the value before      * reusing it.      *       * @return The value of this entry.      * @throws IOException If there is an error reading the data for this field      *      or the type is not in line with the fields required type.      *       */
specifier|public
specifier|abstract
name|Object
name|getValue
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**      * Set the value of the "V" entry. The "V" entry is an inheritable attribute.      *       * The different field types do require specific object types for their value      * e.g. for RadioButtons the V entry needs to be a name object. This needs to be handled by the      * individual classes.      *       * Trying to set the value for a {@link PDPushButton} field will lead to an      * {@link IllegalArgumentException} as PDPushButton fields do not support setting the      * entry although, common to all field types, the DV entry shall not be set.      *       * As a result it might be necessary to check the type of the value before      * reusing it.      *       * @param fieldValue The new field value.      */
specifier|public
specifier|abstract
name|void
name|setValue
parameter_list|(
name|String
name|fieldValue
parameter_list|)
function_decl|;
comment|/**      * sets the field to be read-only.      *       * @param readonly The new flag for readonly.      */
specifier|public
name|void
name|setReadonly
parameter_list|(
name|boolean
name|readonly
parameter_list|)
block|{
name|getDictionary
argument_list|()
operator|.
name|setFlag
argument_list|(
name|COSName
operator|.
name|FF
argument_list|,
name|FLAG_READ_ONLY
argument_list|,
name|readonly
argument_list|)
expr_stmt|;
block|}
comment|/**      *       * @return true if the field is readonly      */
specifier|public
name|boolean
name|isReadonly
parameter_list|()
block|{
return|return
name|getDictionary
argument_list|()
operator|.
name|getFlag
argument_list|(
name|COSName
operator|.
name|FF
argument_list|,
name|FLAG_READ_ONLY
argument_list|)
return|;
block|}
comment|/**      * sets the field to be required.      *       * @param required The new flag for required.      */
specifier|public
name|void
name|setRequired
parameter_list|(
name|boolean
name|required
parameter_list|)
block|{
name|getDictionary
argument_list|()
operator|.
name|setFlag
argument_list|(
name|COSName
operator|.
name|FF
argument_list|,
name|FLAG_REQUIRED
argument_list|,
name|required
argument_list|)
expr_stmt|;
block|}
comment|/**      *       * @return true if the field is required      */
specifier|public
name|boolean
name|isRequired
parameter_list|()
block|{
return|return
name|getDictionary
argument_list|()
operator|.
name|getFlag
argument_list|(
name|COSName
operator|.
name|FF
argument_list|,
name|FLAG_REQUIRED
argument_list|)
return|;
block|}
comment|/**      * sets the field to be not exported.      *       * @param noExport The new flag for noExport.      */
specifier|public
name|void
name|setNoExport
parameter_list|(
name|boolean
name|noExport
parameter_list|)
block|{
name|getDictionary
argument_list|()
operator|.
name|setFlag
argument_list|(
name|COSName
operator|.
name|FF
argument_list|,
name|FLAG_NO_EXPORT
argument_list|,
name|noExport
argument_list|)
expr_stmt|;
block|}
comment|/**      *       * @return true if the field is not to be exported.      */
specifier|public
name|boolean
name|isNoExport
parameter_list|()
block|{
return|return
name|getDictionary
argument_list|()
operator|.
name|getFlag
argument_list|(
name|COSName
operator|.
name|FF
argument_list|,
name|FLAG_NO_EXPORT
argument_list|)
return|;
block|}
comment|/**      * This will get the flags for this field.      *       * @return flags The set of flags.      */
specifier|public
specifier|abstract
name|int
name|getFieldFlags
parameter_list|()
function_decl|;
comment|/**      * This will set the flags for this field.      *       * @param flags The new flags.      */
specifier|public
name|void
name|setFieldFlags
parameter_list|(
name|int
name|flags
parameter_list|)
block|{
name|getDictionary
argument_list|()
operator|.
name|setInt
argument_list|(
name|COSName
operator|.
name|FF
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the additional actions for this field. This will return null if there      * are no additional actions for this field.      *      * @return The actions of the field.      */
specifier|public
name|PDFormFieldAdditionalActions
name|getActions
parameter_list|()
block|{
name|COSDictionary
name|aa
init|=
operator|(
name|COSDictionary
operator|)
name|getDictionary
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|AA
argument_list|)
decl_stmt|;
name|PDFormFieldAdditionalActions
name|retval
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|aa
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
operator|new
name|PDFormFieldAdditionalActions
argument_list|(
name|aa
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * This will import a fdf field from a fdf document.      *       * @param fdfField The fdf field to import.      *       * @throws IOException If there is an error importing the data for this field.      */
specifier|public
name|void
name|importFDF
parameter_list|(
name|FDFField
name|fdfField
parameter_list|)
throws|throws
name|IOException
block|{
name|Object
name|fieldValue
init|=
name|fdfField
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|int
name|fieldFlags
init|=
name|getFieldFlags
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldValue
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|fieldValue
operator|instanceof
name|String
condition|)
block|{
name|fdfField
operator|.
name|setValue
argument_list|(
operator|(
name|String
operator|)
name|fieldValue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldValue
operator|instanceof
name|PDTextStream
condition|)
block|{
name|fdfField
operator|.
name|setValue
argument_list|(
operator|(
operator|(
name|PDTextStream
operator|)
name|fieldValue
operator|)
operator|.
name|getAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown field type:"
operator|+
name|fieldValue
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|Integer
name|ff
init|=
name|fdfField
operator|.
name|getFieldFlags
argument_list|()
decl_stmt|;
if|if
condition|(
name|ff
operator|!=
literal|null
condition|)
block|{
name|setFieldFlags
argument_list|(
name|ff
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// these are suppose to be ignored if the Ff is set.
name|Integer
name|setFf
init|=
name|fdfField
operator|.
name|getSetFieldFlags
argument_list|()
decl_stmt|;
if|if
condition|(
name|setFf
operator|!=
literal|null
condition|)
block|{
name|int
name|setFfInt
init|=
name|setFf
decl_stmt|;
name|fieldFlags
operator|=
name|fieldFlags
operator||
name|setFfInt
expr_stmt|;
name|setFieldFlags
argument_list|(
name|fieldFlags
argument_list|)
expr_stmt|;
block|}
name|Integer
name|clrFf
init|=
name|fdfField
operator|.
name|getClearFieldFlags
argument_list|()
decl_stmt|;
if|if
condition|(
name|clrFf
operator|!=
literal|null
condition|)
block|{
comment|// we have to clear the bits of the document fields for every bit that is
comment|// set in this field.
comment|//
comment|// Example:
comment|// docFf = 1011
comment|// clrFf = 1101
comment|// clrFfValue = 0010;
comment|// newValue = 1011& 0010 which is 0010
name|int
name|clrFfValue
init|=
name|clrFf
decl_stmt|;
name|clrFfValue
operator|^=
literal|0xFFFFFFFF
expr_stmt|;
name|fieldFlags
operator|=
name|fieldFlags
operator|&
name|clrFfValue
expr_stmt|;
name|setFieldFlags
argument_list|(
name|fieldFlags
argument_list|)
expr_stmt|;
block|}
block|}
name|PDAnnotationWidget
name|widget
init|=
name|getWidget
argument_list|()
decl_stmt|;
if|if
condition|(
name|widget
operator|!=
literal|null
condition|)
block|{
name|int
name|annotFlags
init|=
name|widget
operator|.
name|getAnnotationFlags
argument_list|()
decl_stmt|;
name|Integer
name|f
init|=
name|fdfField
operator|.
name|getWidgetFieldFlags
argument_list|()
decl_stmt|;
if|if
condition|(
name|f
operator|!=
literal|null
condition|)
block|{
name|widget
operator|.
name|setAnnotationFlags
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// these are suppose to be ignored if the F is set.
name|Integer
name|setF
init|=
name|fdfField
operator|.
name|getSetWidgetFieldFlags
argument_list|()
decl_stmt|;
if|if
condition|(
name|setF
operator|!=
literal|null
condition|)
block|{
name|annotFlags
operator|=
name|annotFlags
operator||
name|setF
expr_stmt|;
name|widget
operator|.
name|setAnnotationFlags
argument_list|(
name|annotFlags
argument_list|)
expr_stmt|;
block|}
name|Integer
name|clrF
init|=
name|fdfField
operator|.
name|getClearWidgetFieldFlags
argument_list|()
decl_stmt|;
if|if
condition|(
name|clrF
operator|!=
literal|null
condition|)
block|{
comment|// we have to clear the bits of the document fields for every bit that is
comment|// set in this field.
comment|//
comment|// Example:
comment|// docF = 1011
comment|// clrF = 1101
comment|// clrFValue = 0010;
comment|// newValue = 1011& 0010 which is 0010
name|int
name|clrFValue
init|=
name|clrF
decl_stmt|;
name|clrFValue
operator|^=
literal|0xFFFFFFFFL
expr_stmt|;
name|annotFlags
operator|=
name|annotFlags
operator|&
name|clrFValue
expr_stmt|;
name|widget
operator|.
name|setAnnotationFlags
argument_list|(
name|annotFlags
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|List
argument_list|<
name|FDFField
argument_list|>
name|fdfKids
init|=
name|fdfField
operator|.
name|getKids
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|COSObjectable
argument_list|>
name|pdKids
init|=
name|getKids
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|fdfKids
operator|!=
literal|null
operator|&&
name|i
operator|<
name|fdfKids
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|FDFField
name|fdfChild
init|=
name|fdfKids
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|fdfName
init|=
name|fdfChild
operator|.
name|getPartialFieldName
argument_list|()
decl_stmt|;
for|for
control|(
name|COSObjectable
name|pdKid
range|:
name|pdKids
control|)
block|{
if|if
condition|(
name|pdKid
operator|instanceof
name|PDFieldTreeNode
condition|)
block|{
name|PDFieldTreeNode
name|pdChild
init|=
operator|(
name|PDFieldTreeNode
operator|)
name|pdKid
decl_stmt|;
if|if
condition|(
name|fdfName
operator|!=
literal|null
operator|&&
name|fdfName
operator|.
name|equals
argument_list|(
name|pdChild
operator|.
name|getPartialName
argument_list|()
argument_list|)
condition|)
block|{
name|pdChild
operator|.
name|importFDF
argument_list|(
name|fdfChild
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/**      * This will get the single associated widget that is part of this field. This occurs when the Widget is embedded in      * the fields dictionary. Sometimes there are multiple sub widgets associated with this field, in which case you      * want to use getKids(). If the kids entry is specified, then the first entry in that list will be returned.      *       * @return The widget that is associated with this field.      */
specifier|public
name|PDAnnotationWidget
name|getWidget
parameter_list|()
block|{
name|PDAnnotationWidget
name|retval
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|COSObjectable
argument_list|>
name|kids
init|=
name|getKids
argument_list|()
decl_stmt|;
if|if
condition|(
name|kids
operator|==
literal|null
condition|)
block|{
name|retval
operator|=
operator|new
name|PDAnnotationWidget
argument_list|(
name|getDictionary
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|kids
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Object
name|firstKid
init|=
name|kids
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|firstKid
operator|instanceof
name|PDAnnotationWidget
condition|)
block|{
name|retval
operator|=
operator|(
name|PDAnnotationWidget
operator|)
name|firstKid
expr_stmt|;
block|}
else|else
block|{
name|retval
operator|=
operator|(
operator|(
name|PDFieldTreeNode
operator|)
name|firstKid
operator|)
operator|.
name|getWidget
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|retval
return|;
block|}
comment|/**      * Get the parent field to this field, or null if none exists.      *       * @return The parent field.      *       */
specifier|public
name|PDFieldTreeNode
name|getParent
parameter_list|()
block|{
return|return
name|parent
return|;
block|}
comment|/**      * Set the parent of this field.      *       * @param parentNode The parent to this field.      */
specifier|public
name|void
name|setParent
parameter_list|(
name|PDFieldTreeNode
name|parentNode
parameter_list|)
block|{
name|parent
operator|=
name|parentNode
expr_stmt|;
if|if
condition|(
name|parentNode
operator|!=
literal|null
condition|)
block|{
name|getDictionary
argument_list|()
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|PARENT
argument_list|,
name|parent
operator|.
name|getDictionary
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getDictionary
argument_list|()
operator|.
name|removeItem
argument_list|(
name|COSName
operator|.
name|PARENT
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This will find one of the child elements. The name array are the components of the name to search down the tree      * of names. The nameIndex is where to start in that array. This method is called recursively until it finds the end      * point based on the name array.      *       * @param name An array that picks the path to the field.      * @param nameIndex The index into the array.      * @return The field at the endpoint or null if none is found.      */
specifier|public
name|PDFieldTreeNode
name|findKid
parameter_list|(
name|String
index|[]
name|name
parameter_list|,
name|int
name|nameIndex
parameter_list|)
block|{
name|PDFieldTreeNode
name|retval
init|=
literal|null
decl_stmt|;
name|COSArray
name|kids
init|=
operator|(
name|COSArray
operator|)
name|getDictionary
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|KIDS
argument_list|)
decl_stmt|;
if|if
condition|(
name|kids
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|retval
operator|==
literal|null
operator|&&
name|i
operator|<
name|kids
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|COSDictionary
name|kidDictionary
init|=
operator|(
name|COSDictionary
operator|)
name|kids
operator|.
name|getObject
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
index|[
name|nameIndex
index|]
operator|.
name|equals
argument_list|(
name|kidDictionary
operator|.
name|getString
argument_list|(
name|COSName
operator|.
name|T
argument_list|)
argument_list|)
condition|)
block|{
name|retval
operator|=
operator|(
name|PDFieldTreeNode
operator|)
name|PDFieldTreeNode
operator|.
name|createField
argument_list|(
name|acroForm
argument_list|,
name|kidDictionary
argument_list|,
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|length
operator|>
name|nameIndex
operator|+
literal|1
condition|)
block|{
name|retval
operator|=
name|retval
operator|.
name|findKid
argument_list|(
name|name
argument_list|,
name|nameIndex
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|retval
return|;
block|}
comment|/**      * This will get all the kids of this field. The values in the list will either be PDWidget or PDField. Normally      * they will be PDWidget objects unless this is a non-terminal field and they will be child PDField objects.      *      * @return A list of either PDWidget or PDField objects.      */
specifier|public
name|List
argument_list|<
name|COSObjectable
argument_list|>
name|getKids
parameter_list|()
block|{
name|List
argument_list|<
name|COSObjectable
argument_list|>
name|retval
init|=
literal|null
decl_stmt|;
name|COSArray
name|kids
init|=
operator|(
name|COSArray
operator|)
name|dictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|KIDS
argument_list|)
decl_stmt|;
if|if
condition|(
name|kids
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|COSObjectable
argument_list|>
name|kidsList
init|=
operator|new
name|ArrayList
argument_list|<
name|COSObjectable
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|kids
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|COSDictionary
name|kidDictionary
init|=
operator|(
name|COSDictionary
operator|)
name|kids
operator|.
name|getObject
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|kidDictionary
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
comment|// Decide if the kid is field or a widget annotation.
comment|// A field dictionary that does not have a partial field name (T entry)
comment|// of its own shall not be considered a field but simply a Widget annotation.
if|if
condition|(
name|kidDictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|T
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|PDFieldTreeNode
name|field
init|=
name|PDFieldTreeNode
operator|.
name|createField
argument_list|(
name|acroForm
argument_list|,
name|kidDictionary
argument_list|,
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
name|kidsList
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|kidsList
operator|.
name|add
argument_list|(
operator|new
name|PDAnnotationWidget
argument_list|(
name|kidDictionary
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|retval
operator|=
operator|new
name|COSArrayList
argument_list|<
name|COSObjectable
argument_list|>
argument_list|(
name|kidsList
argument_list|,
name|kids
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * This will set the list of kids.      *       * @param kids The list of child widgets.      */
specifier|public
name|void
name|setKids
parameter_list|(
name|List
argument_list|<
name|COSObjectable
argument_list|>
name|kids
parameter_list|)
block|{
name|COSArray
name|kidsArray
init|=
name|COSArrayList
operator|.
name|converterToCOSArray
argument_list|(
name|kids
argument_list|)
decl_stmt|;
name|getDictionary
argument_list|()
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|KIDS
argument_list|,
name|kidsArray
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will return a string representation of this field.      *       * @return A string representation of this field.      */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|""
operator|+
name|getDictionary
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|V
argument_list|)
return|;
block|}
comment|/**      * This will get the acroform that this field is part of.      *       * @return The form this field is on.      */
specifier|public
name|PDAcroForm
name|getAcroForm
parameter_list|()
block|{
return|return
name|acroForm
return|;
block|}
comment|/**      * This will set the form this field is on.      *       * @param value The new form to use.      */
specifier|public
name|void
name|setAcroForm
parameter_list|(
name|PDAcroForm
name|value
parameter_list|)
block|{
name|acroForm
operator|=
name|value
expr_stmt|;
block|}
comment|/**      * This will get the dictionary associated with this field.      *       * @return The dictionary that this class wraps.      */
specifier|public
name|COSDictionary
name|getDictionary
parameter_list|()
block|{
return|return
name|dictionary
return|;
block|}
comment|/**      * Convert this standard java object to a COS object.      *       * @return The cos object that matches this Java object.      */
annotation|@
name|Override
specifier|public
name|COSBase
name|getCOSObject
parameter_list|()
block|{
return|return
name|dictionary
return|;
block|}
comment|/**      * Returns the partial name of the field.      *       * @return the name of the field      */
specifier|public
name|String
name|getPartialName
parameter_list|()
block|{
return|return
name|getDictionary
argument_list|()
operator|.
name|getString
argument_list|(
name|COSName
operator|.
name|T
argument_list|)
return|;
block|}
comment|/**      * This will set the partial name of the field.      *       * @param name The new name for the field.      */
specifier|public
name|void
name|setPartialName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|getDictionary
argument_list|()
operator|.
name|setString
argument_list|(
name|COSName
operator|.
name|T
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the fully qualified name of the field, which is a concatenation of the names of all the parents fields.      *       * @return the name of the field      *       * @throws IOException If there is an error generating the fully qualified name.      */
specifier|public
name|String
name|getFullyQualifiedName
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|finalName
init|=
name|getPartialName
argument_list|()
decl_stmt|;
name|String
name|parentName
init|=
name|getParent
argument_list|()
operator|!=
literal|null
condition|?
name|getParent
argument_list|()
operator|.
name|getFullyQualifiedName
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|parentName
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|finalName
operator|!=
literal|null
condition|)
block|{
name|finalName
operator|=
name|parentName
operator|+
literal|"."
operator|+
name|finalName
expr_stmt|;
block|}
else|else
block|{
name|finalName
operator|=
name|parentName
expr_stmt|;
block|}
block|}
return|return
name|finalName
return|;
block|}
comment|/**      * Gets the alternate name of the field.      *       * @return the alternate name of the field      */
specifier|public
name|String
name|getAlternateFieldName
parameter_list|()
block|{
return|return
name|this
operator|.
name|getDictionary
argument_list|()
operator|.
name|getString
argument_list|(
name|COSName
operator|.
name|TU
argument_list|)
return|;
block|}
comment|/**      * This will set the alternate name of the field.      *       * @param alternateFieldName the alternate name of the field      */
specifier|public
name|void
name|setAlternateFieldName
parameter_list|(
name|String
name|alternateFieldName
parameter_list|)
block|{
name|this
operator|.
name|getDictionary
argument_list|()
operator|.
name|setString
argument_list|(
name|COSName
operator|.
name|TU
argument_list|,
name|alternateFieldName
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the mapping name of the field.      *       * The mapping name shall be used when exporting interactive form field      * data from the document.      *       * @return the mapping name of the field      */
specifier|public
name|String
name|getMappingName
parameter_list|()
block|{
return|return
name|this
operator|.
name|getDictionary
argument_list|()
operator|.
name|getString
argument_list|(
name|COSName
operator|.
name|TM
argument_list|)
return|;
block|}
comment|/**      * This will set the mapping name of the field.      *       * @param mappingName the mapping name of the field      */
specifier|public
name|void
name|setMappingName
parameter_list|(
name|String
name|mappingName
parameter_list|)
block|{
name|this
operator|.
name|getDictionary
argument_list|()
operator|.
name|setString
argument_list|(
name|COSName
operator|.
name|TM
argument_list|,
name|mappingName
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a COSField subclass from the given field.      * @param form the form that the field is part of      * @param field the dictionary representing a field element      * @param parentNode the parent node of the node to be created       * @return the corresponding PDField instance      */
specifier|public
specifier|static
name|PDFieldTreeNode
name|createField
parameter_list|(
name|PDAcroForm
name|form
parameter_list|,
name|COSDictionary
name|field
parameter_list|,
name|PDFieldTreeNode
name|parentNode
parameter_list|)
block|{
name|String
name|fieldType
init|=
name|findFieldType
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|FIELD_TYPE_CHOICE
operator|.
name|equals
argument_list|(
name|fieldType
argument_list|)
condition|)
block|{
name|int
name|flags
init|=
name|field
operator|.
name|getInt
argument_list|(
name|COSName
operator|.
name|FF
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|flags
operator|&
name|PDChoice
operator|.
name|FLAG_COMBO
operator|)
operator|!=
literal|0
condition|)
block|{
return|return
operator|new
name|PDComboBox
argument_list|(
name|form
argument_list|,
name|field
argument_list|,
name|parentNode
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|PDListBox
argument_list|(
name|form
argument_list|,
name|field
argument_list|,
name|parentNode
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|FIELD_TYPE_TEXT
operator|.
name|equals
argument_list|(
name|fieldType
argument_list|)
condition|)
block|{
return|return
operator|new
name|PDTextField
argument_list|(
name|form
argument_list|,
name|field
argument_list|,
name|parentNode
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|FIELD_TYPE_SIGNATURE
operator|.
name|equals
argument_list|(
name|fieldType
argument_list|)
condition|)
block|{
return|return
operator|new
name|PDSignatureField
argument_list|(
name|form
argument_list|,
name|field
argument_list|,
name|parentNode
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|FIELD_TYPE_BUTTON
operator|.
name|equals
argument_list|(
name|fieldType
argument_list|)
condition|)
block|{
name|int
name|flags
init|=
name|field
operator|.
name|getInt
argument_list|(
name|COSName
operator|.
name|FF
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// BJL: I have found that the radio flag bit is not always set
comment|// and that sometimes there is just a kids dictionary.
comment|// so, if there is a kids dictionary then it must be a radio button group.
if|if
condition|(
operator|(
name|flags
operator|&
name|PDButton
operator|.
name|FLAG_RADIO
operator|)
operator|!=
literal|0
condition|)
block|{
return|return
operator|new
name|PDRadioButton
argument_list|(
name|form
argument_list|,
name|field
argument_list|,
name|parentNode
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|flags
operator|&
name|PDButton
operator|.
name|FLAG_PUSHBUTTON
operator|)
operator|!=
literal|0
condition|)
block|{
return|return
operator|new
name|PDPushButton
argument_list|(
name|form
argument_list|,
name|field
argument_list|,
name|parentNode
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|PDCheckbox
argument_list|(
name|form
argument_list|,
name|field
argument_list|,
name|parentNode
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
operator|new
name|PDNonTerminalField
argument_list|(
name|form
argument_list|,
name|field
argument_list|,
name|parentNode
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|String
name|findFieldType
parameter_list|(
name|COSDictionary
name|dic
parameter_list|)
block|{
name|String
name|retval
init|=
name|dic
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|FT
argument_list|)
decl_stmt|;
if|if
condition|(
name|retval
operator|==
literal|null
condition|)
block|{
name|COSDictionary
name|parent
init|=
operator|(
name|COSDictionary
operator|)
name|dic
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|PARENT
argument_list|,
name|COSName
operator|.
name|P
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
name|findFieldType
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|retval
return|;
block|}
block|}
end_class

end_unit

