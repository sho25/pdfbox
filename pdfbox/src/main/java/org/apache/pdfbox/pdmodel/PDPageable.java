begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Dimension
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Graphics
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|print
operator|.
name|PageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|print
operator|.
name|Pageable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|print
operator|.
name|Paper
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|print
operator|.
name|Printable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|print
operator|.
name|PrinterException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|print
operator|.
name|PrinterIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|print
operator|.
name|PrinterJob
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdfviewer
operator|.
name|PageDrawer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDRectangle
import|;
end_import

begin_comment
comment|/**  * Adapter class that implements the {@link Pageable} and {@link Printable} interfaces for printing a given PDF  * document. Note that the given PDF document should not be modified (pages added, removed, etc.) while an instance of  * this class is being used.  *   * @since Apache PDFBox 1.3.0  * @see<a href="https://issues.apache.org/jira/browse/PDFBOX-788">PDFBOX-788</a>  */
end_comment

begin_class
specifier|public
class|class
name|PDPageable
implements|implements
name|Pageable
implements|,
name|Printable
block|{
comment|/**      * List of all pages in the given PDF document.      */
specifier|private
specifier|final
name|List
argument_list|<
name|PDPage
argument_list|>
name|pages
init|=
operator|new
name|ArrayList
argument_list|<
name|PDPage
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * The printer job for printing the given PDF document.      */
specifier|private
specifier|final
name|PrinterJob
name|job
decl_stmt|;
comment|/**      * Creates a {@link Pageable} adapter for the given PDF document and printer job.      *       * @param document PDF document      * @param printerJob printer job      * @throws IllegalArgumentException if an argument is<code>null</code>      * @throws PrinterException if the document permissions prevent printing      */
specifier|public
name|PDPageable
parameter_list|(
name|PDDocument
name|document
parameter_list|,
name|PrinterJob
name|printerJob
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|PrinterException
block|{
if|if
condition|(
name|document
operator|==
literal|null
operator|||
name|printerJob
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"PDPageable("
operator|+
name|document
operator|+
literal|", "
operator|+
name|printerJob
operator|+
literal|")"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
operator|!
name|document
operator|.
name|getCurrentAccessPermission
argument_list|()
operator|.
name|canPrint
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|PrinterException
argument_list|(
literal|"You do not have permission to print this document"
argument_list|)
throw|;
block|}
else|else
block|{
name|document
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|getPages
argument_list|()
operator|.
name|getAllKids
argument_list|(
name|pages
argument_list|)
expr_stmt|;
name|job
operator|=
name|printerJob
expr_stmt|;
block|}
block|}
comment|/**      * Creates a {@link Pageable} adapter for the given PDF document using a default printer job returned by      * {@link PrinterJob#getPrinterJob()}.      *       * @param document PDF document      * @throws IllegalArgumentException if the argument is<code>null</code>      * @throws PrinterException if the document permissions prevent printing      */
specifier|public
name|PDPageable
parameter_list|(
name|PDDocument
name|document
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|PrinterException
block|{
name|this
argument_list|(
name|document
argument_list|,
name|PrinterJob
operator|.
name|getPrinterJob
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the printer job for printing the given PDF document.      *       * @return printer job      */
specifier|public
name|PrinterJob
name|getPrinterJob
parameter_list|()
block|{
return|return
name|job
return|;
block|}
comment|// ------------------------------------------------------------< Pageable>
comment|/**      * Returns the number of pages in the given PDF document.      *       * @return number of pages      */
specifier|public
name|int
name|getNumberOfPages
parameter_list|()
block|{
return|return
name|pages
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**      * Returns the format of the page at the given index.      *       * @param i page index, zero-based      * @return page format      * @throws IndexOutOfBoundsException if the page index is invalid      */
specifier|public
name|PageFormat
name|getPageFormat
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|IndexOutOfBoundsException
block|{
name|PageFormat
name|format
init|=
name|job
operator|.
name|defaultPage
argument_list|()
decl_stmt|;
name|PDPage
name|page
init|=
name|pages
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// can throw IOOBE
name|Dimension
name|media
init|=
name|page
operator|.
name|findMediaBox
argument_list|()
operator|.
name|createDimension
argument_list|()
decl_stmt|;
name|Dimension
name|crop
init|=
name|page
operator|.
name|findCropBox
argument_list|()
operator|.
name|createDimension
argument_list|()
decl_stmt|;
comment|// Center the ImageableArea if the crop is smaller than the media
name|double
name|diffWidth
init|=
literal|0.0
decl_stmt|;
name|double
name|diffHeight
init|=
literal|0.0
decl_stmt|;
if|if
condition|(
operator|!
name|media
operator|.
name|equals
argument_list|(
name|crop
argument_list|)
condition|)
block|{
name|diffWidth
operator|=
operator|(
name|media
operator|.
name|getWidth
argument_list|()
operator|-
name|crop
operator|.
name|getWidth
argument_list|()
operator|)
operator|/
literal|2.0
expr_stmt|;
name|diffHeight
operator|=
operator|(
name|media
operator|.
name|getHeight
argument_list|()
operator|-
name|crop
operator|.
name|getHeight
argument_list|()
operator|)
operator|/
literal|2.0
expr_stmt|;
block|}
name|Paper
name|paper
init|=
name|format
operator|.
name|getPaper
argument_list|()
decl_stmt|;
if|if
condition|(
name|media
operator|.
name|getWidth
argument_list|()
operator|<
name|media
operator|.
name|getHeight
argument_list|()
condition|)
block|{
name|format
operator|.
name|setOrientation
argument_list|(
name|PageFormat
operator|.
name|PORTRAIT
argument_list|)
expr_stmt|;
name|paper
operator|.
name|setImageableArea
argument_list|(
name|diffWidth
argument_list|,
name|diffHeight
argument_list|,
name|crop
operator|.
name|getWidth
argument_list|()
argument_list|,
name|crop
operator|.
name|getHeight
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|format
operator|.
name|setOrientation
argument_list|(
name|PageFormat
operator|.
name|LANDSCAPE
argument_list|)
expr_stmt|;
name|paper
operator|.
name|setImageableArea
argument_list|(
name|diffHeight
argument_list|,
name|diffWidth
argument_list|,
name|crop
operator|.
name|getHeight
argument_list|()
argument_list|,
name|crop
operator|.
name|getWidth
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|format
operator|.
name|setPaper
argument_list|(
name|paper
argument_list|)
expr_stmt|;
return|return
name|format
return|;
block|}
comment|/**      * Returns a {@link Printable} for the page at the given index. Currently this method simply returns the underlying      * {@link PDPage} object that directly implements the {@link Printable} interface, but future versions may choose to      * return a different adapter instance.      *       * @param i page index, zero-based      * @return printable      * @throws IndexOutOfBoundsException if the page index is invalid      */
specifier|public
name|Printable
name|getPrintable
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|IndexOutOfBoundsException
block|{
if|if
condition|(
name|i
operator|>=
name|pages
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
literal|"Index: "
operator|+
name|i
operator|+
literal|", Size: "
operator|+
name|pages
operator|.
name|size
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|this
return|;
block|}
comment|// -----------------------------------------------------------< Printable>
comment|/**      * Prints the page at the given index.      *       * @param graphics printing target      * @param format page format      * @param i page index, zero-based      * @return {@link Printable#PAGE_EXISTS} if the page was printed, or {@link Printable#NO_SUCH_PAGE} if page index      *         was invalid      * @throws PrinterException if printing failed      */
specifier|public
name|int
name|print
parameter_list|(
name|Graphics
name|graphics
parameter_list|,
name|PageFormat
name|format
parameter_list|,
name|int
name|i
parameter_list|)
throws|throws
name|PrinterException
block|{
if|if
condition|(
literal|0
operator|<=
name|i
operator|&&
name|i
operator|<
name|pages
operator|.
name|size
argument_list|()
condition|)
block|{
try|try
block|{
name|PDPage
name|page
init|=
name|pages
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|PDRectangle
name|cropBox
init|=
name|page
operator|.
name|findCropBox
argument_list|()
decl_stmt|;
name|PageDrawer
name|drawer
init|=
operator|new
name|PageDrawer
argument_list|()
decl_stmt|;
name|drawer
operator|.
name|drawPage
argument_list|(
name|graphics
argument_list|,
name|page
argument_list|,
name|cropBox
operator|.
name|createDimension
argument_list|()
argument_list|)
expr_stmt|;
name|drawer
operator|.
name|dispose
argument_list|()
expr_stmt|;
return|return
name|PAGE_EXISTS
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
throw|throw
operator|new
name|PrinterIOException
argument_list|(
name|io
argument_list|)
throw|;
block|}
block|}
else|else
block|{
return|return
name|NO_SUCH_PAGE
return|;
block|}
block|}
block|}
end_class

end_unit

