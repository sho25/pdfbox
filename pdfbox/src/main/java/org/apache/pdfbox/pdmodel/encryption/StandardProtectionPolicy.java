begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|encryption
package|;
end_package

begin_comment
comment|/**  * The protection policy to add to a document for password-based protection.  *  * The following example shows how to protect a PDF document with password.  * In this example, the document will be protected so that someone opening  * the document with the user password<code>user_pwd</code> will not be  * able to modify the document.  *  *<pre>  * AccessPermission ap = new AccessPermission();  * ap.setCanModify(false);  * StandardProtectionPolicy policy = new StandardProtectionPolicy(owner_pwd, user_pwd, ap);  * doc.protect(policy);  *</pre>  *  * @author Benoit Guillon  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|StandardProtectionPolicy
extends|extends
name|ProtectionPolicy
block|{
specifier|private
name|AccessPermission
name|permissions
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"squid:S2068"
block|}
argument_list|)
specifier|private
name|String
name|ownerPassword
init|=
literal|""
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"squid:S2068"
block|}
argument_list|)
specifier|private
name|String
name|userPassword
init|=
literal|""
decl_stmt|;
specifier|private
name|boolean
name|preferAES
init|=
literal|false
decl_stmt|;
comment|/**      * Creates an new instance of the standard protection policy      * in order to protect a PDF document with passwords.      *      * @param ownerPassword The owner's password.      * @param userPassword The users's password.      * @param permissions The access permissions given to the user.      */
specifier|public
name|StandardProtectionPolicy
parameter_list|(
name|String
name|ownerPassword
parameter_list|,
name|String
name|userPassword
parameter_list|,
name|AccessPermission
name|permissions
parameter_list|)
block|{
name|this
operator|.
name|ownerPassword
operator|=
name|ownerPassword
expr_stmt|;
name|this
operator|.
name|userPassword
operator|=
name|userPassword
expr_stmt|;
name|this
operator|.
name|permissions
operator|=
name|permissions
expr_stmt|;
block|}
comment|/**      * Returns the access permissions      * @return the access permissions      */
specifier|public
name|AccessPermission
name|getPermissions
parameter_list|()
block|{
return|return
name|permissions
return|;
block|}
comment|/**      * Sets the access permissions      * @param permissions the new access permissions      */
specifier|public
name|void
name|setPermissions
parameter_list|(
name|AccessPermission
name|permissions
parameter_list|)
block|{
name|this
operator|.
name|permissions
operator|=
name|permissions
expr_stmt|;
block|}
comment|/**      * Returns the owner password.      * @return the owner password      */
specifier|public
name|String
name|getOwnerPassword
parameter_list|()
block|{
return|return
name|ownerPassword
return|;
block|}
comment|/**      * Sets the owner password      * @param ownerPassword the new owner password      */
specifier|public
name|void
name|setOwnerPassword
parameter_list|(
name|String
name|ownerPassword
parameter_list|)
block|{
name|this
operator|.
name|ownerPassword
operator|=
name|ownerPassword
expr_stmt|;
block|}
comment|/**      * Returns the user password.      * @return the user password      */
specifier|public
name|String
name|getUserPassword
parameter_list|()
block|{
return|return
name|userPassword
return|;
block|}
comment|/**      * Sets the user password.      * @param userPassword the new user password      */
specifier|public
name|void
name|setUserPassword
parameter_list|(
name|String
name|userPassword
parameter_list|)
block|{
name|this
operator|.
name|userPassword
operator|=
name|userPassword
expr_stmt|;
block|}
comment|/**      * Tell whether AES encryption is preferred when several encryption methods are available for      * the chosen key length. The default is false. This setting is only relevant if the key length      * is 128 bits.      *      * @return true if AES encryption is preferred      */
specifier|public
name|boolean
name|isPreferAES
parameter_list|()
block|{
return|return
name|this
operator|.
name|preferAES
return|;
block|}
comment|/**      * Set whether AES encryption is preferred when several encryption methods are available for the      * chosen key length. The default is false. This setting is only relevant if the key length is      * 128 bits.      *      * @param preferAES      */
specifier|public
name|void
name|setPreferAES
parameter_list|(
name|boolean
name|preferAES
parameter_list|)
block|{
name|this
operator|.
name|preferAES
operator|=
name|preferAES
expr_stmt|;
block|}
block|}
end_class

end_unit

