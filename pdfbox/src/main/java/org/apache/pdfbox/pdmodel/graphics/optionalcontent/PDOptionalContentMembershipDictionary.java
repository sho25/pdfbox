begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|optionalcontent
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|documentinterchange
operator|.
name|markedcontent
operator|.
name|PDPropertyList
import|;
end_import

begin_comment
comment|/**  * An optional content membership dictionary (OCMD).  *  * @author Tilman Hausherr  */
end_comment

begin_class
specifier|public
class|class
name|PDOptionalContentMembershipDictionary
extends|extends
name|PDPropertyList
block|{
comment|/**      * Creates a new optional content membership dictionary (OCMD).      */
specifier|public
name|PDOptionalContentMembershipDictionary
parameter_list|()
block|{
name|this
operator|.
name|dict
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|TYPE
argument_list|,
name|COSName
operator|.
name|OCMD
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new instance based on a given {@link COSDictionary}.      * @param dict the dictionary      */
specifier|public
name|PDOptionalContentMembershipDictionary
parameter_list|(
name|COSDictionary
name|dict
parameter_list|)
block|{
name|super
argument_list|(
name|dict
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dict
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|TYPE
argument_list|)
operator|.
name|equals
argument_list|(
name|COSName
operator|.
name|OCMD
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Provided dictionary is not of type '"
operator|+
name|COSName
operator|.
name|OCMD
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Get a list of optional content groups.      *       * @return List of optional content groups, never null.      */
specifier|public
name|List
argument_list|<
name|PDPropertyList
argument_list|>
name|getOCGs
parameter_list|()
block|{
name|List
argument_list|<
name|PDPropertyList
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|COSBase
name|base
init|=
name|dict
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|OCGS
argument_list|)
decl_stmt|;
if|if
condition|(
name|base
operator|instanceof
name|COSDictionary
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|PDPropertyList
operator|.
name|create
argument_list|(
operator|(
name|COSDictionary
operator|)
name|base
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|base
operator|instanceof
name|COSArray
condition|)
block|{
name|COSArray
name|ar
init|=
operator|(
name|COSArray
operator|)
name|base
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ar
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|COSBase
name|elem
init|=
name|ar
operator|.
name|getObject
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|elem
operator|instanceof
name|COSDictionary
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|PDPropertyList
operator|.
name|create
argument_list|(
operator|(
name|COSDictionary
operator|)
name|elem
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|list
return|;
block|}
comment|/**      * Set optional content groups as a list.      *       * @param ocgs list of optional content groups to set.      */
specifier|public
name|void
name|setOCGs
parameter_list|(
name|List
argument_list|<
name|PDPropertyList
argument_list|>
name|ocgs
parameter_list|)
block|{
name|COSArray
name|ar
init|=
operator|new
name|COSArray
argument_list|()
decl_stmt|;
for|for
control|(
name|PDPropertyList
name|prop
range|:
name|ocgs
control|)
block|{
name|ar
operator|.
name|add
argument_list|(
name|prop
argument_list|)
expr_stmt|;
block|}
name|dict
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|OCGS
argument_list|,
name|ar
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the visibility policy name. Valid names are AllOff, AllOn, AnyOff, AnyOn (default).      *      * @return the visibility policy, never null.      */
specifier|public
name|COSName
name|getVisibilityPolicy
parameter_list|()
block|{
return|return
name|dict
operator|.
name|getCOSName
argument_list|(
name|COSName
operator|.
name|P
argument_list|,
name|COSName
operator|.
name|ANY_ON
argument_list|)
return|;
block|}
comment|/**      * Sets the visibility policy name. Valid names are AllOff, AllOn, AnyOff, AnyOn (default).      * @param visibilityPolicy       */
specifier|public
name|void
name|setVisibilityPolicy
parameter_list|(
name|COSName
name|visibilityPolicy
parameter_list|)
block|{
name|dict
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|P
argument_list|,
name|visibilityPolicy
argument_list|)
expr_stmt|;
block|}
comment|//TODO support /VE some day
block|}
end_class

end_unit

