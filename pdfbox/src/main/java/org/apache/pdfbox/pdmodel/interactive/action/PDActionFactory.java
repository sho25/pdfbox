begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|action
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_comment
comment|/**  * This class will take a dictionary and determine which type of action to create.  *  * @author Ben Litchfield  *   */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|PDActionFactory
block|{
comment|/**      * Utility Class.      */
specifier|private
name|PDActionFactory
parameter_list|()
block|{
comment|//utility class
block|}
comment|/**      * This will create the correct type of action based on the type specified      * in the dictionary.      *      * @param action An action dictionary.      *      * @return An action of the correct type.      */
specifier|public
specifier|static
name|PDAction
name|createAction
parameter_list|(
name|COSDictionary
name|action
parameter_list|)
block|{
name|PDAction
name|retval
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|action
operator|!=
literal|null
condition|)
block|{
name|String
name|type
init|=
name|action
operator|.
name|getNameAsString
argument_list|(
literal|"S"
argument_list|)
decl_stmt|;
if|if
condition|(
name|PDActionJavaScript
operator|.
name|SUB_TYPE
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|retval
operator|=
operator|new
name|PDActionJavaScript
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|PDActionGoTo
operator|.
name|SUB_TYPE
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|retval
operator|=
operator|new
name|PDActionGoTo
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|PDActionLaunch
operator|.
name|SUB_TYPE
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|retval
operator|=
operator|new
name|PDActionLaunch
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|PDActionRemoteGoTo
operator|.
name|SUB_TYPE
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|retval
operator|=
operator|new
name|PDActionRemoteGoTo
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|PDActionURI
operator|.
name|SUB_TYPE
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|retval
operator|=
operator|new
name|PDActionURI
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|PDActionNamed
operator|.
name|SUB_TYPE
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|retval
operator|=
operator|new
name|PDActionNamed
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|retval
return|;
block|}
block|}
end_class

end_unit

