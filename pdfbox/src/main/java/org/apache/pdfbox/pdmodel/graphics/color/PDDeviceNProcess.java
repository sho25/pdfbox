begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * A DeviceN Process Dictionary  *  * @author John Hewson  */
end_comment

begin_class
specifier|public
class|class
name|PDDeviceNProcess
block|{
specifier|private
name|COSDictionary
name|dictionary
decl_stmt|;
comment|/**      * Creates a new DeviceN Process Dictionary.      */
specifier|public
name|PDDeviceNProcess
parameter_list|()
block|{
name|dictionary
operator|=
operator|new
name|COSDictionary
argument_list|()
expr_stmt|;
block|}
comment|/**      * Creates a new  DeviceN Process Dictionary from the given attributes.      * @param attributes a DeviceN attributes dictionary      */
specifier|public
name|PDDeviceNProcess
parameter_list|(
name|COSDictionary
name|attributes
parameter_list|)
block|{
name|dictionary
operator|=
name|attributes
expr_stmt|;
block|}
comment|/**      * Returns the underlying COS dictionary.      * @return the underlying COS dictionary.      */
specifier|public
name|COSDictionary
name|getCOSDictionary
parameter_list|()
block|{
return|return
name|dictionary
return|;
block|}
comment|/**      * Returns the process color space      * @return the process color space      * @throws IOException if the color space cannot be read      */
specifier|public
name|PDColorSpace
name|getColorSpace
parameter_list|()
throws|throws
name|IOException
block|{
name|COSBase
name|cosColorSpace
init|=
name|dictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|COLORSPACE
argument_list|)
decl_stmt|;
if|if
condition|(
name|cosColorSpace
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
comment|// TODO: return a default?
block|}
return|return
name|PDColorSpace
operator|.
name|create
argument_list|(
name|cosColorSpace
argument_list|)
return|;
block|}
comment|/**      * Returns the names of the color components.      * @return the names of the color components      */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getComponents
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|components
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|COSArray
name|cosComponents
init|=
operator|(
name|COSArray
operator|)
name|dictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|COMPONENTS
argument_list|)
decl_stmt|;
if|if
condition|(
name|cosComponents
operator|==
literal|null
condition|)
block|{
return|return
name|components
return|;
block|}
for|for
control|(
name|COSBase
name|name
range|:
name|cosComponents
control|)
block|{
name|components
operator|.
name|add
argument_list|(
operator|(
operator|(
name|COSName
operator|)
name|name
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|components
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|str
init|=
literal|"Process{"
decl_stmt|;
try|try
block|{
name|str
operator|+=
name|getColorSpace
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|c
range|:
name|getComponents
argument_list|()
control|)
block|{
name|str
operator|+=
literal|" \""
operator|+
name|c
operator|+
literal|"\""
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|str
operator|+=
literal|"ERROR"
expr_stmt|;
block|}
name|str
operator|+=
literal|"}"
expr_stmt|;
return|return
name|str
return|;
block|}
block|}
end_class

end_unit

