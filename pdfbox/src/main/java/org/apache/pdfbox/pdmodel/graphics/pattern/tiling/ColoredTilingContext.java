begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|pattern
operator|.
name|tiling
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|PaintContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|color
operator|.
name|ColorSpace
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|ColorModel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|Raster
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|WritableRaster
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDRectangle
import|;
end_import

begin_comment
comment|/**  * This class represents the PaintContext of an axial shading.  *   */
end_comment

begin_class
specifier|public
class|class
name|ColoredTilingContext
implements|implements
name|PaintContext
block|{
specifier|private
name|ColorModel
name|outputColorModel
decl_stmt|;
specifier|private
name|Raster
name|tilingImage
decl_stmt|;
specifier|private
name|int
name|xstep
decl_stmt|;
specifier|private
name|int
name|ystep
decl_stmt|;
specifier|private
name|int
name|lowerLeftX
decl_stmt|;
specifier|private
name|int
name|lowerLeftY
decl_stmt|;
comment|/**      * Constructor creates an instance to be used for fill operations.      *       * @param cm the colormodel to be used      * @param image the tiling image      * @param xStep horizontal spacing between pattern cells      * @param yStep vertical spacing between pattern cells      * @param bBox bounding box of the tiling image      *       */
specifier|public
name|ColoredTilingContext
parameter_list|(
name|ColorModel
name|cm
parameter_list|,
name|Raster
name|image
parameter_list|,
name|int
name|xStep
parameter_list|,
name|int
name|yStep
parameter_list|,
name|PDRectangle
name|bBox
parameter_list|)
block|{
name|outputColorModel
operator|=
name|cm
expr_stmt|;
name|tilingImage
operator|=
name|image
expr_stmt|;
name|xstep
operator|=
name|Math
operator|.
name|abs
argument_list|(
name|xStep
argument_list|)
expr_stmt|;
name|ystep
operator|=
name|Math
operator|.
name|abs
argument_list|(
name|yStep
argument_list|)
expr_stmt|;
name|lowerLeftX
operator|=
operator|(
name|int
operator|)
name|bBox
operator|.
name|getLowerLeftX
argument_list|()
expr_stmt|;
name|lowerLeftY
operator|=
operator|(
name|int
operator|)
name|bBox
operator|.
name|getLowerLeftY
argument_list|()
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|void
name|dispose
parameter_list|()
block|{
name|outputColorModel
operator|=
literal|null
expr_stmt|;
name|tilingImage
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|ColorModel
name|getColorModel
parameter_list|()
block|{
return|return
name|outputColorModel
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|Raster
name|getRaster
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|)
block|{
comment|// get underlying colorspace
name|ColorSpace
name|cs
init|=
name|getColorModel
argument_list|()
operator|.
name|getColorSpace
argument_list|()
decl_stmt|;
comment|// number of color components including alpha channel
name|int
name|numComponents
init|=
name|cs
operator|.
name|getNumComponents
argument_list|()
operator|+
literal|1
decl_stmt|;
comment|// all the data, plus alpha channel
name|int
index|[]
name|imgData
init|=
operator|new
name|int
index|[
name|w
operator|*
name|h
operator|*
operator|(
name|numComponents
operator|)
index|]
decl_stmt|;
comment|// array holding the processed pixels
name|int
index|[]
name|pixel
init|=
operator|new
name|int
index|[
name|numComponents
index|]
decl_stmt|;
comment|// for each device coordinate
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|h
condition|;
name|j
operator|++
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|w
condition|;
name|i
operator|++
control|)
block|{
comment|// figure out what pixel we are at relative to the image
name|int
name|xloc
init|=
operator|(
name|x
operator|+
name|i
operator|)
operator|-
name|lowerLeftX
decl_stmt|;
name|int
name|yloc
init|=
operator|(
name|y
operator|+
name|j
operator|)
operator|-
name|lowerLeftY
decl_stmt|;
name|xloc
operator|%=
name|xstep
expr_stmt|;
name|yloc
operator|%=
name|ystep
expr_stmt|;
if|if
condition|(
name|xloc
operator|<
literal|0
condition|)
block|{
name|xloc
operator|=
name|xstep
operator|+
name|xloc
expr_stmt|;
block|}
if|if
condition|(
name|yloc
operator|<
literal|0
condition|)
block|{
name|yloc
operator|=
name|ystep
operator|+
name|yloc
expr_stmt|;
block|}
comment|// check if we are inside the image
if|if
condition|(
name|xloc
operator|<
name|tilingImage
operator|.
name|getWidth
argument_list|()
operator|&&
name|yloc
operator|<
name|tilingImage
operator|.
name|getHeight
argument_list|()
condition|)
block|{
name|tilingImage
operator|.
name|getPixel
argument_list|(
name|xloc
argument_list|,
name|yloc
argument_list|,
name|pixel
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|pixel
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|int
name|base
init|=
operator|(
name|j
operator|*
name|w
operator|+
name|i
operator|)
operator|*
name|numComponents
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|numComponents
condition|;
name|c
operator|++
control|)
block|{
name|imgData
index|[
name|base
operator|+
name|c
index|]
operator|=
name|pixel
index|[
name|c
index|]
expr_stmt|;
block|}
block|}
block|}
name|WritableRaster
name|raster
init|=
name|getColorModel
argument_list|()
operator|.
name|createCompatibleWritableRaster
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
decl_stmt|;
name|raster
operator|.
name|setPixels
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|imgData
argument_list|)
expr_stmt|;
return|return
name|raster
return|;
block|}
block|}
end_class

end_unit

