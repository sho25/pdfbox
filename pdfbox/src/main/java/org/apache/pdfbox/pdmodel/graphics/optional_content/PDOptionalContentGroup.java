begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|optional_content
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|COSObjectable
import|;
end_import

begin_comment
comment|/**  * This class represents an optional content group (OCG).  *  * @since PDF 1.5  * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|PDOptionalContentGroup
implements|implements
name|COSObjectable
block|{
specifier|private
name|COSDictionary
name|ocg
decl_stmt|;
comment|/**      * Creates a new optional content group (OCG).      * @param name the name of the content group      */
specifier|public
name|PDOptionalContentGroup
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|ocg
operator|=
operator|new
name|COSDictionary
argument_list|()
expr_stmt|;
name|this
operator|.
name|ocg
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|TYPE
argument_list|,
name|COSName
operator|.
name|OCG
argument_list|)
expr_stmt|;
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new instance based on a given {@link COSDictionary}.      * @param dict the dictionary      */
specifier|public
name|PDOptionalContentGroup
parameter_list|(
name|COSDictionary
name|dict
parameter_list|)
block|{
if|if
condition|(
operator|!
name|dict
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|TYPE
argument_list|)
operator|.
name|equals
argument_list|(
name|COSName
operator|.
name|OCG
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Provided dictionary is not of type '"
operator|+
name|COSName
operator|.
name|OCG
operator|+
literal|"'"
argument_list|)
throw|;
block|}
name|this
operator|.
name|ocg
operator|=
name|dict
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|COSBase
name|getCOSObject
parameter_list|()
block|{
return|return
name|this
operator|.
name|ocg
return|;
block|}
comment|/**      * Returns the name of the optional content group.      * @return the name      */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|this
operator|.
name|ocg
operator|.
name|getString
argument_list|(
name|COSName
operator|.
name|NAME
argument_list|)
return|;
block|}
comment|/**      * Sets the name of the optional content group.      * @param name the name      */
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|ocg
operator|.
name|setString
argument_list|(
name|COSName
operator|.
name|NAME
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
comment|//TODO Add support for "Intent" and "Usage"
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|super
operator|.
name|toString
argument_list|()
operator|+
literal|" ("
operator|+
name|getName
argument_list|()
operator|+
literal|")"
return|;
block|}
block|}
end_class

end_unit

