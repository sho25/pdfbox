begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|pattern
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|state
operator|.
name|PDExtendedGraphicsState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|shading
operator|.
name|PDShading
import|;
end_import

begin_comment
comment|/**  * A shading pattern dictionary.  *  */
end_comment

begin_class
specifier|public
class|class
name|PDShadingPattern
extends|extends
name|PDAbstractPattern
block|{
specifier|private
name|PDExtendedGraphicsState
name|extendedGraphicsState
decl_stmt|;
specifier|private
name|PDShading
name|shading
decl_stmt|;
comment|/**      * Creates a new shading pattern.      */
specifier|public
name|PDShadingPattern
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|getCOSObject
argument_list|()
operator|.
name|setInt
argument_list|(
name|COSName
operator|.
name|PATTERN_TYPE
argument_list|,
name|PDAbstractPattern
operator|.
name|TYPE_SHADING_PATTERN
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new shading pattern from the given COS dictionary.      * @param resourceDictionary The COSDictionary for this pattern resource.      */
specifier|public
name|PDShadingPattern
parameter_list|(
name|COSDictionary
name|resourceDictionary
parameter_list|)
block|{
name|super
argument_list|(
name|resourceDictionary
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getPatternType
parameter_list|()
block|{
return|return
name|PDAbstractPattern
operator|.
name|TYPE_SHADING_PATTERN
return|;
block|}
comment|/**      * This will get the external graphics state for this pattern.      * @return The extended graphics state for this pattern.      */
specifier|public
name|PDExtendedGraphicsState
name|getExtendedGraphicsState
parameter_list|()
block|{
if|if
condition|(
name|extendedGraphicsState
operator|==
literal|null
condition|)
block|{
name|COSDictionary
name|dictionary
init|=
operator|(
name|COSDictionary
operator|)
name|getCOSObject
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|EXT_G_STATE
argument_list|)
decl_stmt|;
if|if
condition|(
name|dictionary
operator|!=
literal|null
condition|)
block|{
name|extendedGraphicsState
operator|=
operator|new
name|PDExtendedGraphicsState
argument_list|(
name|dictionary
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|extendedGraphicsState
return|;
block|}
comment|/**      * This will set the external graphics state for this pattern.      * @param extendedGraphicsState The new extended graphics state for this pattern.      */
specifier|public
name|void
name|setExtendedGraphicsState
parameter_list|(
name|PDExtendedGraphicsState
name|extendedGraphicsState
parameter_list|)
block|{
name|this
operator|.
name|extendedGraphicsState
operator|=
name|extendedGraphicsState
expr_stmt|;
name|getCOSObject
argument_list|()
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|EXT_G_STATE
argument_list|,
name|extendedGraphicsState
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the shading resources for this pattern.      * @return The shading resources for this pattern.      * @throws IOException if something went wrong      */
specifier|public
name|PDShading
name|getShading
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|shading
operator|==
literal|null
condition|)
block|{
name|COSDictionary
name|dictionary
init|=
operator|(
name|COSDictionary
operator|)
name|getCOSObject
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|SHADING
argument_list|)
decl_stmt|;
if|if
condition|(
name|dictionary
operator|!=
literal|null
condition|)
block|{
name|shading
operator|=
name|PDShading
operator|.
name|create
argument_list|(
name|dictionary
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|shading
return|;
block|}
comment|/**      * This will set the shading resources for this pattern.      * @param shadingResources The new shading resources for this pattern.      */
specifier|public
name|void
name|setShading
parameter_list|(
name|PDShading
name|shadingResources
parameter_list|)
block|{
name|shading
operator|=
name|shadingResources
expr_stmt|;
name|getCOSObject
argument_list|()
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|SHADING
argument_list|,
name|shadingResources
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

