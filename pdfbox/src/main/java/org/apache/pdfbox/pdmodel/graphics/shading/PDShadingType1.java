begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|shading
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|AffineTransform
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSFloat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSNumber
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|function
operator|.
name|PDFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|Matrix
import|;
end_import

begin_comment
comment|/**  * This represents resources for a function based shading.  *  */
end_comment

begin_class
specifier|public
class|class
name|PDShadingType1
extends|extends
name|PDShadingResources
block|{
specifier|private
name|COSArray
name|domain
init|=
literal|null
decl_stmt|;
specifier|private
name|PDFunction
name|function
init|=
literal|null
decl_stmt|;
specifier|private
name|PDFunction
index|[]
name|functionArray
init|=
literal|null
decl_stmt|;
comment|/**      * Constructor using the given shading dictionary.      *      * @param shadingDictionary The dictionary for this shading.      */
specifier|public
name|PDShadingType1
parameter_list|(
name|COSDictionary
name|shadingDictionary
parameter_list|)
block|{
name|super
argument_list|(
name|shadingDictionary
argument_list|)
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|int
name|getShadingType
parameter_list|()
block|{
return|return
name|PDShadingResources
operator|.
name|SHADING_TYPE1
return|;
block|}
comment|/**      * This will get the optional Matrix of a function based shading.      *       * @return the matrix      */
specifier|public
name|Matrix
name|getMatrix
parameter_list|()
block|{
name|Matrix
name|retval
init|=
literal|null
decl_stmt|;
name|COSArray
name|array
init|=
operator|(
name|COSArray
operator|)
name|getCOSDictionary
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|MATRIX
argument_list|)
decl_stmt|;
if|if
condition|(
name|array
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
operator|new
name|Matrix
argument_list|()
expr_stmt|;
name|retval
operator|.
name|setValue
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|(
operator|(
name|COSNumber
operator|)
name|array
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
name|retval
operator|.
name|setValue
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
operator|(
operator|(
name|COSNumber
operator|)
name|array
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
name|retval
operator|.
name|setValue
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
operator|(
operator|(
name|COSNumber
operator|)
name|array
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
name|retval
operator|.
name|setValue
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
operator|(
operator|(
name|COSNumber
operator|)
name|array
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|)
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
name|retval
operator|.
name|setValue
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
operator|(
operator|(
name|COSNumber
operator|)
name|array
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|)
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
name|retval
operator|.
name|setValue
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
operator|(
operator|(
name|COSNumber
operator|)
name|array
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|)
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * Sets the optional Matrix entry for the function based shading.      *       * @param transform the transformation matrix      */
specifier|public
name|void
name|setMatrix
parameter_list|(
name|AffineTransform
name|transform
parameter_list|)
block|{
name|COSArray
name|matrix
init|=
operator|new
name|COSArray
argument_list|()
decl_stmt|;
name|double
index|[]
name|values
init|=
operator|new
name|double
index|[
literal|6
index|]
decl_stmt|;
name|transform
operator|.
name|getMatrix
argument_list|(
name|values
argument_list|)
expr_stmt|;
for|for
control|(
name|double
name|v
range|:
name|values
control|)
block|{
name|matrix
operator|.
name|add
argument_list|(
operator|new
name|COSFloat
argument_list|(
operator|(
name|float
operator|)
name|v
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|getCOSDictionary
argument_list|()
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|MATRIX
argument_list|,
name|matrix
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the optional Domain values of a function based shading.      *       * @return the domain values      */
specifier|public
name|COSArray
name|getDomain
parameter_list|()
block|{
if|if
condition|(
name|domain
operator|==
literal|null
condition|)
block|{
name|domain
operator|=
operator|(
name|COSArray
operator|)
name|getCOSDictionary
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|DOMAIN
argument_list|)
expr_stmt|;
block|}
return|return
name|domain
return|;
block|}
comment|/**      * Sets the optional Domain entry for the function based shading.      *       * @param newDomain the domain array      */
specifier|public
name|void
name|setDomain
parameter_list|(
name|COSArray
name|newDomain
parameter_list|)
block|{
name|domain
operator|=
name|newDomain
expr_stmt|;
name|getCOSDictionary
argument_list|()
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|DOMAIN
argument_list|,
name|newDomain
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will set the function for the color conversion.      *      * @param newFunction The new function.      */
specifier|public
name|void
name|setFunction
parameter_list|(
name|PDFunction
name|newFunction
parameter_list|)
block|{
name|function
operator|=
name|newFunction
expr_stmt|;
name|getCOSDictionary
argument_list|()
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|FUNCTION
argument_list|,
name|newFunction
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will return the function used to convert the color values.      *      * @return The function      * @exception IOException If we are unable to create the PDFunction object.       */
specifier|public
name|PDFunction
name|getFunction
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|function
operator|==
literal|null
condition|)
block|{
name|function
operator|=
name|PDFunction
operator|.
name|create
argument_list|(
name|getCOSDictionary
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|FUNCTION
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|function
return|;
block|}
comment|/**      * Provide the function(s) of the shading dictionary as array.      *       * @return an array containing the function(s)       * @throws IOException throw if something went wrong      */
specifier|private
name|PDFunction
index|[]
name|getFunctionsArray
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|functionArray
operator|==
literal|null
condition|)
block|{
name|COSBase
name|functionObject
init|=
name|getCOSDictionary
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|FUNCTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|functionObject
operator|instanceof
name|COSDictionary
condition|)
block|{
name|functionArray
operator|=
operator|new
name|PDFunction
index|[
literal|1
index|]
expr_stmt|;
name|functionArray
index|[
literal|0
index|]
operator|=
name|PDFunction
operator|.
name|create
argument_list|(
name|functionObject
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|COSArray
name|functionCOSArray
init|=
operator|(
name|COSArray
operator|)
name|functionObject
decl_stmt|;
name|int
name|numberOfFunctions
init|=
name|functionCOSArray
operator|.
name|size
argument_list|()
decl_stmt|;
name|functionArray
operator|=
operator|new
name|PDFunction
index|[
name|numberOfFunctions
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfFunctions
condition|;
name|i
operator|++
control|)
block|{
name|functionArray
index|[
name|i
index|]
operator|=
name|PDFunction
operator|.
name|create
argument_list|(
name|functionCOSArray
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|functionArray
return|;
block|}
comment|/**      * Convert the input value using the functions of the shading dictionary.      *       * @param input the input values      * @return the output values      * @throws IOException thrown if something went wrong      */
specifier|public
name|float
index|[]
name|evalFunction
parameter_list|(
name|float
index|[]
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|PDFunction
index|[]
name|functions
init|=
name|getFunctionsArray
argument_list|()
decl_stmt|;
name|int
name|numberOfFunctions
init|=
name|functions
operator|.
name|length
decl_stmt|;
name|float
index|[]
name|returnValues
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|numberOfFunctions
operator|==
literal|1
condition|)
block|{
name|returnValues
operator|=
name|functions
index|[
literal|0
index|]
operator|.
name|eval
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|returnValues
operator|=
operator|new
name|float
index|[
name|numberOfFunctions
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfFunctions
condition|;
name|i
operator|++
control|)
block|{
name|float
index|[]
name|newValue
init|=
name|functions
index|[
name|i
index|]
operator|.
name|eval
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|returnValues
index|[
name|i
index|]
operator|=
name|newValue
index|[
literal|0
index|]
expr_stmt|;
block|}
block|}
return|return
name|returnValues
return|;
block|}
block|}
end_class

end_unit

