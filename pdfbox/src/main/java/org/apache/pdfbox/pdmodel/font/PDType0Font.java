begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDRectangle
import|;
end_import

begin_comment
comment|/**  * This is implementation of the Type0 Font. See<a  * href="https://issues.apache.org/jira/browse/PDFBOX-605">PDFBOX-605</a> for the related improvement issue.  *   * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  */
end_comment

begin_class
specifier|public
class|class
name|PDType0Font
extends|extends
name|PDSimpleFont
block|{
comment|/**      * Log instance.      */
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|PDType0Font
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|COSArray
name|descendantFontArray
decl_stmt|;
specifier|private
name|PDFont
name|descendantFont
decl_stmt|;
specifier|private
name|COSDictionary
name|descendantFontDictionary
decl_stmt|;
comment|/**      * Constructor.      */
specifier|public
name|PDType0Font
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|font
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|,
name|COSName
operator|.
name|TYPE0
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor.      *       * @param fontDictionary The font dictionary according to the PDF specification.      */
specifier|public
name|PDType0Font
parameter_list|(
name|COSDictionary
name|fontDictionary
parameter_list|)
block|{
name|super
argument_list|(
name|fontDictionary
argument_list|)
expr_stmt|;
name|descendantFontDictionary
operator|=
operator|(
name|COSDictionary
operator|)
name|getDescendantFonts
argument_list|()
operator|.
name|getObject
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|descendantFontDictionary
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|descendantFont
operator|=
name|PDFontFactory
operator|.
name|createFont
argument_list|(
name|descendantFontDictionary
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|exception
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error while creating the descendant font!"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|PDRectangle
name|getFontBoundingBox
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Not yet implemented"
argument_list|)
throw|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|float
name|getFontWidth
parameter_list|(
name|byte
index|[]
name|c
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|descendantFont
operator|instanceof
name|PDCIDFontType2Font
condition|)
block|{
comment|// a suitable mapping is needed to address the correct width value
name|PDCIDFontType2Font
name|cidType2Font
init|=
operator|(
name|PDCIDFontType2Font
operator|)
name|descendantFont
decl_stmt|;
name|int
name|code
init|=
name|getCodeFromArray
argument_list|(
name|c
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|cidType2Font
operator|.
name|hasIdentityCIDToGIDMap
argument_list|()
operator|||
name|cidType2Font
operator|.
name|hasCIDToGIDMap
argument_list|()
condition|)
block|{
return|return
name|cidType2Font
operator|.
name|getFontWidth
argument_list|(
name|code
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|getCMap
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|mappedString
init|=
name|getCMap
argument_list|()
operator|.
name|lookup
argument_list|(
name|code
argument_list|,
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|mappedString
operator|!=
literal|null
condition|)
block|{
return|return
name|cidType2Font
operator|.
name|getFontWidth
argument_list|(
name|mappedString
operator|.
name|codePointAt
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
return|return
name|descendantFont
operator|.
name|getFontWidth
argument_list|(
name|c
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|float
name|getFontHeight
parameter_list|(
name|byte
index|[]
name|c
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|descendantFont
operator|.
name|getFontHeight
argument_list|(
name|c
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|float
name|getAverageFontWidth
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|descendantFont
operator|.
name|getAverageFontWidth
argument_list|()
return|;
block|}
specifier|private
name|COSArray
name|getDescendantFonts
parameter_list|()
block|{
if|if
condition|(
name|descendantFontArray
operator|==
literal|null
condition|)
block|{
name|descendantFontArray
operator|=
operator|(
name|COSArray
operator|)
name|font
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|DESCENDANT_FONTS
argument_list|)
expr_stmt|;
block|}
return|return
name|descendantFontArray
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|float
name|getFontWidth
parameter_list|(
name|int
name|charCode
parameter_list|)
block|{
return|return
name|descendantFont
operator|.
name|getFontWidth
argument_list|(
name|charCode
argument_list|)
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|String
name|encode
parameter_list|(
name|byte
index|[]
name|c
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|retval
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|hasToUnicode
argument_list|()
condition|)
block|{
name|retval
operator|=
name|super
operator|.
name|encode
argument_list|(
name|c
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|retval
operator|==
literal|null
condition|)
block|{
name|int
name|result
init|=
name|cmap
operator|.
name|lookupCID
argument_list|(
name|c
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
operator|-
literal|1
condition|)
block|{
name|retval
operator|=
name|descendantFont
operator|.
name|cmapEncoding
argument_list|(
name|result
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|retval
return|;
block|}
comment|/**      *       * Provides the descendant font.      *       * @return the descendant font.      *       */
specifier|public
name|PDFont
name|getDescendantFont
parameter_list|()
block|{
return|return
name|descendantFont
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|super
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|descendantFontArray
operator|!=
literal|null
condition|)
block|{
name|descendantFontArray
operator|.
name|clear
argument_list|()
expr_stmt|;
name|descendantFontArray
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|descendantFont
operator|!=
literal|null
condition|)
block|{
name|descendantFont
operator|.
name|clear
argument_list|()
expr_stmt|;
name|descendantFont
operator|=
literal|null
expr_stmt|;
block|}
name|descendantFontDictionary
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

end_unit

