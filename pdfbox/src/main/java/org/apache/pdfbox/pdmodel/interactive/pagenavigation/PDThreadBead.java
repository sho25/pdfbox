begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|pagenavigation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|COSObjectable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDRectangle
import|;
end_import

begin_comment
comment|/**  * This a single bead in a thread in a PDF document.  *  * @author Ben Litchfield  */
end_comment

begin_class
specifier|public
class|class
name|PDThreadBead
implements|implements
name|COSObjectable
block|{
specifier|private
specifier|final
name|COSDictionary
name|bead
decl_stmt|;
comment|/**      * Constructor that is used for a preexisting dictionary.      *      * @param b The underlying dictionary.      */
specifier|public
name|PDThreadBead
parameter_list|(
name|COSDictionary
name|b
parameter_list|)
block|{
name|bead
operator|=
name|b
expr_stmt|;
block|}
comment|/**      * Default constructor.      *      */
specifier|public
name|PDThreadBead
parameter_list|()
block|{
name|bead
operator|=
operator|new
name|COSDictionary
argument_list|()
expr_stmt|;
name|bead
operator|.
name|setName
argument_list|(
literal|"Type"
argument_list|,
literal|"Bead"
argument_list|)
expr_stmt|;
name|setNextBead
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|setPreviousBead
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the underlying dictionary that this object wraps.      *      * @return The underlying info dictionary.      */
annotation|@
name|Override
specifier|public
name|COSDictionary
name|getCOSObject
parameter_list|()
block|{
return|return
name|bead
return|;
block|}
comment|/**      * This will get the thread that this bead is part of.  This is only required      * for the first bead in a thread, so other beads 'may' return null.      *      * @return The thread that this bead is part of.      */
specifier|public
name|PDThread
name|getThread
parameter_list|()
block|{
name|PDThread
name|retval
init|=
literal|null
decl_stmt|;
name|COSDictionary
name|dic
init|=
operator|(
name|COSDictionary
operator|)
name|bead
operator|.
name|getDictionaryObject
argument_list|(
literal|"T"
argument_list|)
decl_stmt|;
if|if
condition|(
name|dic
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
operator|new
name|PDThread
argument_list|(
name|dic
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * Set the thread that this bead is part of.  This is only required for the      * first bead in a thread.  Note: This property is set for you by the PDThread.setFirstBead() method.      *      * @param thread The thread that this bead is part of.      */
specifier|public
name|void
name|setThread
parameter_list|(
name|PDThread
name|thread
parameter_list|)
block|{
name|bead
operator|.
name|setItem
argument_list|(
literal|"T"
argument_list|,
name|thread
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the next bead.  If this bead is the last bead in the list then this      * will return the first bead.      *      * @return The next bead in the list or the first bead if this is the last bead.      */
specifier|public
name|PDThreadBead
name|getNextBead
parameter_list|()
block|{
return|return
operator|new
name|PDThreadBead
argument_list|(
operator|(
name|COSDictionary
operator|)
name|bead
operator|.
name|getDictionaryObject
argument_list|(
literal|"N"
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Set the next bead in the thread.      *      * @param next The next bead.      */
specifier|protected
specifier|final
name|void
name|setNextBead
parameter_list|(
name|PDThreadBead
name|next
parameter_list|)
block|{
name|bead
operator|.
name|setItem
argument_list|(
literal|"N"
argument_list|,
name|next
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the previous bead.  If this bead is the first bead in the list then this      * will return the last bead.      *      * @return The previous bead in the list or the last bead if this is the first bead.      */
specifier|public
name|PDThreadBead
name|getPreviousBead
parameter_list|()
block|{
return|return
operator|new
name|PDThreadBead
argument_list|(
operator|(
name|COSDictionary
operator|)
name|bead
operator|.
name|getDictionaryObject
argument_list|(
literal|"V"
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Set the previous bead in the thread.      *      * @param previous The previous bead.      */
specifier|protected
specifier|final
name|void
name|setPreviousBead
parameter_list|(
name|PDThreadBead
name|previous
parameter_list|)
block|{
name|bead
operator|.
name|setItem
argument_list|(
literal|"V"
argument_list|,
name|previous
argument_list|)
expr_stmt|;
block|}
comment|/**      * Append a bead after this bead.  This will correctly set the next/previous beads in the      * linked list.      *      * @param append The bead to insert.      */
specifier|public
name|void
name|appendBead
parameter_list|(
name|PDThreadBead
name|append
parameter_list|)
block|{
name|PDThreadBead
name|nextBead
init|=
name|getNextBead
argument_list|()
decl_stmt|;
name|nextBead
operator|.
name|setPreviousBead
argument_list|(
name|append
argument_list|)
expr_stmt|;
name|append
operator|.
name|setNextBead
argument_list|(
name|nextBead
argument_list|)
expr_stmt|;
name|setNextBead
argument_list|(
name|append
argument_list|)
expr_stmt|;
name|append
operator|.
name|setPreviousBead
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the page that this bead is part of.      *      * @return The page that this bead is part of.      */
specifier|public
name|PDPage
name|getPage
parameter_list|()
block|{
name|PDPage
name|page
init|=
literal|null
decl_stmt|;
name|COSDictionary
name|dic
init|=
operator|(
name|COSDictionary
operator|)
name|bead
operator|.
name|getDictionaryObject
argument_list|(
literal|"P"
argument_list|)
decl_stmt|;
if|if
condition|(
name|dic
operator|!=
literal|null
condition|)
block|{
name|page
operator|=
operator|new
name|PDPage
argument_list|(
name|dic
argument_list|)
expr_stmt|;
block|}
return|return
name|page
return|;
block|}
comment|/**      * Set the page that this bead is part of.  This is a required property and must be      * set when creating a new bead.  The PDPage object also has a list of beads in the natural      * reading order.  It is recommended that you add this object to that list as well.      *      * @param page The page that this bead is on.      */
specifier|public
name|void
name|setPage
parameter_list|(
name|PDPage
name|page
parameter_list|)
block|{
name|bead
operator|.
name|setItem
argument_list|(
literal|"P"
argument_list|,
name|page
argument_list|)
expr_stmt|;
block|}
comment|/**      * The rectangle on the page that this bead is part of.      *      * @return The part of the page that this bead covers.      */
specifier|public
name|PDRectangle
name|getRectangle
parameter_list|()
block|{
name|PDRectangle
name|rect
init|=
literal|null
decl_stmt|;
name|COSArray
name|array
init|=
operator|(
name|COSArray
operator|)
name|bead
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|R
argument_list|)
decl_stmt|;
if|if
condition|(
name|array
operator|!=
literal|null
condition|)
block|{
name|rect
operator|=
operator|new
name|PDRectangle
argument_list|(
name|array
argument_list|)
expr_stmt|;
block|}
return|return
name|rect
return|;
block|}
comment|/**      * Set the rectangle on the page that this bead covers.      *      * @param rect The portion of the page that this bead covers.      */
specifier|public
name|void
name|setRectangle
parameter_list|(
name|PDRectangle
name|rect
parameter_list|)
block|{
name|bead
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|R
argument_list|,
name|rect
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

