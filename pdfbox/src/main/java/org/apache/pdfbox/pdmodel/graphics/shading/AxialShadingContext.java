begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|shading
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Dimension
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|PaintContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|AffineTransform
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|Point2D
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|ColorModel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|Raster
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|WritableRaster
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|function
operator|.
name|PDFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|Matrix
import|;
end_import

begin_comment
comment|/**  * This class represents the PaintContext of an axial shading.  *   * @author lehmi  * @version $Revision: $  *   */
end_comment

begin_class
specifier|public
class|class
name|AxialShadingContext
implements|implements
name|PaintContext
block|{
specifier|private
name|ColorModel
name|colorModel
decl_stmt|;
specifier|private
name|PDFunction
name|function
decl_stmt|;
specifier|private
name|Point2D
name|startingPoint
decl_stmt|;
specifier|private
name|Point2D
name|endingPoint
decl_stmt|;
specifier|private
name|float
index|[]
name|domain
decl_stmt|;
specifier|private
name|boolean
index|[]
name|extend
decl_stmt|;
specifier|private
name|double
name|x1x0
decl_stmt|;
specifier|private
name|double
name|y1y0
decl_stmt|;
specifier|private
name|float
name|d1d0
decl_stmt|;
specifier|private
name|double
name|denom
decl_stmt|;
comment|/**      * Log instance.      */
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AxialShadingContext
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Constructor.      *       * @param shadingType2 the shading type to be used      * @param colorModelValue the color model to be used      * @param xform transformation for user to device space      * @param ctm current transformation matrix      * @param pageSize size of the current page      *       */
specifier|public
name|AxialShadingContext
parameter_list|(
name|PDShadingType2
name|shadingType2
parameter_list|,
name|ColorModel
name|colorModelValue
parameter_list|,
name|AffineTransform
name|xform
parameter_list|,
name|Matrix
name|ctm
parameter_list|,
name|Dimension
name|pageSize
parameter_list|)
block|{
comment|// colorModel
if|if
condition|(
name|colorModelValue
operator|!=
literal|null
condition|)
block|{
name|colorModel
operator|=
name|colorModelValue
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
comment|// TODO bpc != 8 ??
name|colorModel
operator|=
name|shadingType2
operator|.
name|getColorSpace
argument_list|()
operator|.
name|createColorModel
argument_list|(
literal|8
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|exception
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error while creating colorModel"
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
comment|// shading function
try|try
block|{
name|function
operator|=
name|shadingType2
operator|.
name|getFunction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|exception
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error while creating a function"
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
name|float
name|yScaling
init|=
name|ctm
operator|.
name|getYScale
argument_list|()
decl_stmt|;
name|float
name|angle
init|=
operator|(
name|float
operator|)
name|Math
operator|.
name|acos
argument_list|(
name|ctm
operator|.
name|getValue
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|/
name|ctm
operator|.
name|getXScale
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ctm
operator|.
name|getValue
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|<
literal|0
operator|&&
name|ctm
operator|.
name|getValue
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
operator|>
literal|0
condition|)
block|{
name|angle
operator|=
operator|(
operator|-
literal|1
operator|)
operator|*
name|angle
expr_stmt|;
block|}
name|ctm
operator|.
name|setValue
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
call|(
name|float
call|)
argument_list|(
name|pageSize
operator|.
name|height
operator|-
name|ctm
operator|.
name|getYPosition
argument_list|()
operator|-
name|Math
operator|.
name|cos
argument_list|(
name|angle
argument_list|)
operator|*
name|yScaling
argument_list|)
argument_list|)
expr_stmt|;
name|ctm
operator|.
name|setValue
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
call|(
name|float
call|)
argument_list|(
name|ctm
operator|.
name|getXPosition
argument_list|()
operator|-
name|Math
operator|.
name|sin
argument_list|(
name|angle
argument_list|)
operator|*
name|yScaling
argument_list|)
argument_list|)
expr_stmt|;
comment|// because of the moved 0,0-reference, we have to shear in the opposite direction
name|ctm
operator|.
name|setValue
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
operator|(
operator|-
literal|1
operator|)
operator|*
name|ctm
operator|.
name|getValue
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ctm
operator|.
name|setValue
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
operator|(
operator|-
literal|1
operator|)
operator|*
name|ctm
operator|.
name|getValue
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// create startingPoint
name|float
index|[]
name|coords
init|=
name|shadingType2
operator|.
name|getCoords
argument_list|()
operator|.
name|toFloatArray
argument_list|()
decl_stmt|;
name|startingPoint
operator|=
operator|new
name|Point2D
operator|.
name|Float
argument_list|(
name|coords
index|[
literal|0
index|]
argument_list|,
name|coords
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|startingPoint
operator|=
name|ctm
operator|.
name|createAffineTransform
argument_list|()
operator|.
name|transform
argument_list|(
name|startingPoint
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|startingPoint
operator|=
name|xform
operator|.
name|transform
argument_list|(
name|startingPoint
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// create endingPoint
name|endingPoint
operator|=
operator|new
name|Point2D
operator|.
name|Float
argument_list|(
name|coords
index|[
literal|2
index|]
argument_list|,
name|coords
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|endingPoint
operator|=
name|ctm
operator|.
name|createAffineTransform
argument_list|()
operator|.
name|transform
argument_list|(
name|endingPoint
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|endingPoint
operator|=
name|xform
operator|.
name|transform
argument_list|(
name|endingPoint
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// domain values
if|if
condition|(
name|shadingType2
operator|.
name|getDomain
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|domain
operator|=
name|shadingType2
operator|.
name|getDomain
argument_list|()
operator|.
name|toFloatArray
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// set default values
name|domain
operator|=
operator|new
name|float
index|[]
block|{
literal|0
block|,
literal|1
block|}
expr_stmt|;
block|}
comment|// extend values
name|COSArray
name|extendValues
init|=
name|shadingType2
operator|.
name|getExtend
argument_list|()
decl_stmt|;
if|if
condition|(
name|shadingType2
operator|.
name|getExtend
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|extend
operator|=
operator|new
name|boolean
index|[
literal|2
index|]
expr_stmt|;
name|extend
index|[
literal|0
index|]
operator|=
operator|(
operator|(
name|COSBoolean
operator|)
name|extendValues
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|extend
index|[
literal|1
index|]
operator|=
operator|(
operator|(
name|COSBoolean
operator|)
name|extendValues
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// set default values
name|extend
operator|=
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|false
block|}
expr_stmt|;
block|}
comment|// calculate some constants to be used in getRaster
name|x1x0
operator|=
name|endingPoint
operator|.
name|getX
argument_list|()
operator|-
name|startingPoint
operator|.
name|getX
argument_list|()
expr_stmt|;
name|y1y0
operator|=
name|endingPoint
operator|.
name|getY
argument_list|()
operator|-
name|startingPoint
operator|.
name|getY
argument_list|()
expr_stmt|;
name|d1d0
operator|=
name|domain
index|[
literal|1
index|]
operator|-
name|domain
index|[
literal|0
index|]
expr_stmt|;
name|denom
operator|=
name|Math
operator|.
name|pow
argument_list|(
name|x1x0
argument_list|,
literal|2
argument_list|)
operator|+
name|Math
operator|.
name|pow
argument_list|(
name|y1y0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// TODO take a possible Background value into account
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|void
name|dispose
parameter_list|()
block|{
name|colorModel
operator|=
literal|null
expr_stmt|;
name|function
operator|=
literal|null
expr_stmt|;
name|startingPoint
operator|=
literal|null
expr_stmt|;
name|endingPoint
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|ColorModel
name|getColorModel
parameter_list|()
block|{
return|return
name|colorModel
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|Raster
name|getRaster
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|)
block|{
comment|// create writable raster
name|WritableRaster
name|raster
init|=
name|getColorModel
argument_list|()
operator|.
name|createCompatibleWritableRaster
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
decl_stmt|;
name|float
index|[]
name|input
init|=
operator|new
name|float
index|[
literal|1
index|]
decl_stmt|;
name|int
index|[]
name|data
init|=
operator|new
name|int
index|[
name|w
operator|*
name|h
operator|*
literal|3
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|h
condition|;
name|j
operator|++
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|w
condition|;
name|i
operator|++
control|)
block|{
name|double
name|inputValue
init|=
name|x1x0
operator|*
operator|(
name|x
operator|+
name|i
operator|-
name|startingPoint
operator|.
name|getX
argument_list|()
operator|)
decl_stmt|;
name|inputValue
operator|+=
name|y1y0
operator|*
operator|(
name|y
operator|+
name|j
operator|-
name|startingPoint
operator|.
name|getY
argument_list|()
operator|)
expr_stmt|;
name|inputValue
operator|/=
name|denom
expr_stmt|;
comment|// input value is out of range
if|if
condition|(
name|inputValue
operator|<
name|domain
index|[
literal|0
index|]
condition|)
block|{
comment|// the shading has to be extended if extend[0] == true
if|if
condition|(
name|extend
index|[
literal|0
index|]
condition|)
block|{
name|inputValue
operator|=
name|domain
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
continue|continue;
block|}
block|}
comment|// input value is out of range
elseif|else
if|if
condition|(
name|inputValue
operator|>
name|domain
index|[
literal|1
index|]
condition|)
block|{
comment|// the shading has to be extended if extend[1] == true
if|if
condition|(
name|extend
index|[
literal|1
index|]
condition|)
block|{
name|inputValue
operator|=
name|domain
index|[
literal|1
index|]
expr_stmt|;
block|}
else|else
block|{
continue|continue;
block|}
block|}
name|input
index|[
literal|0
index|]
operator|=
call|(
name|float
call|)
argument_list|(
name|domain
index|[
literal|0
index|]
operator|+
operator|(
name|d1d0
operator|*
name|inputValue
operator|)
argument_list|)
expr_stmt|;
name|float
index|[]
name|values
init|=
literal|null
decl_stmt|;
try|try
block|{
name|values
operator|=
name|function
operator|.
name|eval
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|exception
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error while processing a function"
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
name|int
name|index
init|=
operator|(
name|j
operator|*
name|w
operator|+
name|i
operator|)
operator|*
literal|3
decl_stmt|;
name|data
index|[
name|index
index|]
operator|=
call|(
name|int
call|)
argument_list|(
name|values
index|[
literal|0
index|]
operator|*
literal|255
argument_list|)
expr_stmt|;
name|data
index|[
name|index
operator|+
literal|1
index|]
operator|=
call|(
name|int
call|)
argument_list|(
name|values
index|[
literal|1
index|]
operator|*
literal|255
argument_list|)
expr_stmt|;
name|data
index|[
name|index
operator|+
literal|2
index|]
operator|=
call|(
name|int
call|)
argument_list|(
name|values
index|[
literal|2
index|]
operator|*
literal|255
argument_list|)
expr_stmt|;
block|}
block|}
name|raster
operator|.
name|setPixels
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|data
argument_list|)
expr_stmt|;
return|return
name|raster
return|;
block|}
block|}
end_class

end_unit

