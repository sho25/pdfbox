begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|ttf
operator|.
name|GlyphData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|ttf
operator|.
name|GlyphTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|ttf
operator|.
name|HorizontalMetricsTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|ttf
operator|.
name|TrueTypeFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|ttf
operator|.
name|VerticalHeaderTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|ttf
operator|.
name|VerticalMetricsTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDStream
import|;
end_import

begin_comment
comment|/**  * Embedded PDCIDFontType2 builder. Helper class to populate a PDCIDFontType2 and its parent  * PDType0Font from a TTF.  *  * @author Keiji Suzuki  * @author John Hewson  */
end_comment

begin_class
specifier|final
class|class
name|PDCIDFontType2Embedder
extends|extends
name|TrueTypeEmbedder
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|PDCIDFontType2Embedder
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|PDDocument
name|document
decl_stmt|;
specifier|private
specifier|final
name|PDType0Font
name|parent
decl_stmt|;
specifier|private
specifier|final
name|COSDictionary
name|dict
decl_stmt|;
specifier|private
specifier|final
name|COSDictionary
name|cidFont
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|vertical
decl_stmt|;
comment|/**      * Creates a new TrueType font embedder for the given TTF as a PDCIDFontType2.      *      * @param document parent document      * @param dict font dictionary      * @param ttf True Type Font      * @param parent parent Type 0 font      * @throws IOException if the TTF could not be read      */
name|PDCIDFontType2Embedder
parameter_list|(
name|PDDocument
name|document
parameter_list|,
name|COSDictionary
name|dict
parameter_list|,
name|TrueTypeFont
name|ttf
parameter_list|,
name|boolean
name|embedSubset
parameter_list|,
name|PDType0Font
name|parent
parameter_list|,
name|boolean
name|vertical
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|document
argument_list|,
name|dict
argument_list|,
name|ttf
argument_list|,
name|embedSubset
argument_list|)
expr_stmt|;
name|this
operator|.
name|document
operator|=
name|document
expr_stmt|;
name|this
operator|.
name|dict
operator|=
name|dict
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|vertical
operator|=
name|vertical
expr_stmt|;
comment|// parent Type 0 font
name|dict
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|,
name|COSName
operator|.
name|TYPE0
argument_list|)
expr_stmt|;
name|dict
operator|.
name|setName
argument_list|(
name|COSName
operator|.
name|BASE_FONT
argument_list|,
name|fontDescriptor
operator|.
name|getFontName
argument_list|()
argument_list|)
expr_stmt|;
name|dict
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|ENCODING
argument_list|,
name|vertical
condition|?
name|COSName
operator|.
name|IDENTITY_V
else|:
name|COSName
operator|.
name|IDENTITY_H
argument_list|)
expr_stmt|;
comment|// CID = GID
comment|// descendant CIDFont
name|cidFont
operator|=
name|createCIDFont
argument_list|()
expr_stmt|;
name|COSArray
name|descendantFonts
init|=
operator|new
name|COSArray
argument_list|()
decl_stmt|;
name|descendantFonts
operator|.
name|add
argument_list|(
name|cidFont
argument_list|)
expr_stmt|;
name|dict
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|DESCENDANT_FONTS
argument_list|,
name|descendantFonts
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|embedSubset
condition|)
block|{
comment|// build GID -> Unicode map
name|buildToUnicodeCMap
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Rebuild a font subset.      */
annotation|@
name|Override
specifier|protected
name|void
name|buildSubset
parameter_list|(
name|InputStream
name|ttfSubset
parameter_list|,
name|String
name|tag
parameter_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|gidToCid
parameter_list|)
throws|throws
name|IOException
block|{
comment|// build CID2GIDMap, because the content stream has been written with the old GIDs
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|cidToGid
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|gidToCid
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|entry
range|:
name|gidToCid
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|int
name|newGID
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|int
name|oldGID
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|cidToGid
operator|.
name|put
argument_list|(
name|oldGID
argument_list|,
name|newGID
argument_list|)
expr_stmt|;
block|}
comment|// build unicode mapping before subsetting as the subsetted font won't have a cmap
name|buildToUnicodeCMap
argument_list|(
name|gidToCid
argument_list|)
expr_stmt|;
comment|// build vertical metrics before subsetting as the subsetted font won't have vhea, vmtx
if|if
condition|(
name|vertical
condition|)
block|{
name|buildVerticalMetrics
argument_list|(
name|cidToGid
argument_list|)
expr_stmt|;
block|}
comment|// rebuild the relevant part of the font
name|buildFontFile2
argument_list|(
name|ttfSubset
argument_list|)
expr_stmt|;
name|addNameTag
argument_list|(
name|tag
argument_list|)
expr_stmt|;
name|buildWidths
argument_list|(
name|cidToGid
argument_list|)
expr_stmt|;
name|buildCIDToGIDMap
argument_list|(
name|cidToGid
argument_list|)
expr_stmt|;
name|buildCIDSet
argument_list|(
name|cidToGid
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|buildToUnicodeCMap
parameter_list|(
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|newGIDToOldCID
parameter_list|)
throws|throws
name|IOException
block|{
name|ToUnicodeWriter
name|toUniWriter
init|=
operator|new
name|ToUnicodeWriter
argument_list|()
decl_stmt|;
name|boolean
name|hasSurrogates
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|gid
init|=
literal|1
init|,
name|max
init|=
name|ttf
operator|.
name|getMaximumProfile
argument_list|()
operator|.
name|getNumGlyphs
argument_list|()
init|;
name|gid
operator|<=
name|max
condition|;
name|gid
operator|++
control|)
block|{
comment|// optional CID2GIDMap for subsetting
name|int
name|cid
decl_stmt|;
if|if
condition|(
name|newGIDToOldCID
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|newGIDToOldCID
operator|.
name|containsKey
argument_list|(
name|gid
argument_list|)
condition|)
block|{
continue|continue;
block|}
else|else
block|{
name|cid
operator|=
name|newGIDToOldCID
operator|.
name|get
argument_list|(
name|gid
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|cid
operator|=
name|gid
expr_stmt|;
block|}
comment|// skip composite glyph components that have no code point
name|List
argument_list|<
name|Integer
argument_list|>
name|codes
init|=
name|cmapLookup
operator|.
name|getCharCodes
argument_list|(
name|cid
argument_list|)
decl_stmt|;
comment|// old GID -> Unicode
if|if
condition|(
name|codes
operator|!=
literal|null
condition|)
block|{
comment|// use the first entry even for ambiguous mappings
name|int
name|codePoint
init|=
name|codes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|codePoint
operator|>
literal|0xFFFF
condition|)
block|{
name|hasSurrogates
operator|=
literal|true
expr_stmt|;
block|}
name|toUniWriter
operator|.
name|add
argument_list|(
name|cid
argument_list|,
operator|new
name|String
argument_list|(
operator|new
name|int
index|[]
block|{
name|codePoint
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|toUniWriter
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|InputStream
name|cMapStream
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|PDStream
name|stream
init|=
operator|new
name|PDStream
argument_list|(
name|document
argument_list|,
name|cMapStream
argument_list|,
name|COSName
operator|.
name|FLATE_DECODE
argument_list|)
decl_stmt|;
comment|// surrogate code points, requires PDF 1.5
if|if
condition|(
name|hasSurrogates
condition|)
block|{
name|float
name|version
init|=
name|document
operator|.
name|getVersion
argument_list|()
decl_stmt|;
if|if
condition|(
name|version
operator|<
literal|1.5
condition|)
block|{
name|document
operator|.
name|setVersion
argument_list|(
literal|1.5f
argument_list|)
expr_stmt|;
block|}
block|}
name|dict
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|TO_UNICODE
argument_list|,
name|stream
argument_list|)
expr_stmt|;
block|}
specifier|private
name|COSDictionary
name|toCIDSystemInfo
parameter_list|(
name|String
name|registry
parameter_list|,
name|String
name|ordering
parameter_list|,
name|int
name|supplement
parameter_list|)
block|{
name|COSDictionary
name|info
init|=
operator|new
name|COSDictionary
argument_list|()
decl_stmt|;
name|info
operator|.
name|setString
argument_list|(
name|COSName
operator|.
name|REGISTRY
argument_list|,
name|registry
argument_list|)
expr_stmt|;
name|info
operator|.
name|setString
argument_list|(
name|COSName
operator|.
name|ORDERING
argument_list|,
name|ordering
argument_list|)
expr_stmt|;
name|info
operator|.
name|setInt
argument_list|(
name|COSName
operator|.
name|SUPPLEMENT
argument_list|,
name|supplement
argument_list|)
expr_stmt|;
return|return
name|info
return|;
block|}
specifier|private
name|COSDictionary
name|createCIDFont
parameter_list|()
throws|throws
name|IOException
block|{
name|COSDictionary
name|cidFont
init|=
operator|new
name|COSDictionary
argument_list|()
decl_stmt|;
comment|// Type, Subtype
name|cidFont
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|TYPE
argument_list|,
name|COSName
operator|.
name|FONT
argument_list|)
expr_stmt|;
name|cidFont
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|,
name|COSName
operator|.
name|CID_FONT_TYPE2
argument_list|)
expr_stmt|;
comment|// BaseFont
name|cidFont
operator|.
name|setName
argument_list|(
name|COSName
operator|.
name|BASE_FONT
argument_list|,
name|fontDescriptor
operator|.
name|getFontName
argument_list|()
argument_list|)
expr_stmt|;
comment|// CIDSystemInfo
name|COSDictionary
name|info
init|=
name|toCIDSystemInfo
argument_list|(
literal|"Adobe"
argument_list|,
literal|"Identity"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|cidFont
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|CIDSYSTEMINFO
argument_list|,
name|info
argument_list|)
expr_stmt|;
comment|// FontDescriptor
name|cidFont
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|FONT_DESC
argument_list|,
name|fontDescriptor
operator|.
name|getCOSObject
argument_list|()
argument_list|)
expr_stmt|;
comment|// W - widths
name|buildWidths
argument_list|(
name|cidFont
argument_list|)
expr_stmt|;
comment|// Vertical metrics
if|if
condition|(
name|vertical
condition|)
block|{
name|buildVerticalMetrics
argument_list|(
name|cidFont
argument_list|)
expr_stmt|;
block|}
comment|// CIDToGIDMap
name|cidFont
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|CID_TO_GID_MAP
argument_list|,
name|COSName
operator|.
name|IDENTITY
argument_list|)
expr_stmt|;
return|return
name|cidFont
return|;
block|}
specifier|private
name|void
name|addNameTag
parameter_list|(
name|String
name|tag
parameter_list|)
block|{
name|String
name|name
init|=
name|fontDescriptor
operator|.
name|getFontName
argument_list|()
decl_stmt|;
name|String
name|newName
init|=
name|tag
operator|+
name|name
decl_stmt|;
name|dict
operator|.
name|setName
argument_list|(
name|COSName
operator|.
name|BASE_FONT
argument_list|,
name|newName
argument_list|)
expr_stmt|;
name|fontDescriptor
operator|.
name|setFontName
argument_list|(
name|newName
argument_list|)
expr_stmt|;
name|cidFont
operator|.
name|setName
argument_list|(
name|COSName
operator|.
name|BASE_FONT
argument_list|,
name|newName
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|buildCIDToGIDMap
parameter_list|(
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|cidToGid
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|int
name|cidMax
init|=
name|Collections
operator|.
name|max
argument_list|(
name|cidToGid
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|cidMax
condition|;
name|i
operator|++
control|)
block|{
name|int
name|gid
decl_stmt|;
if|if
condition|(
name|cidToGid
operator|.
name|containsKey
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|gid
operator|=
name|cidToGid
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|gid
operator|=
literal|0
expr_stmt|;
block|}
name|out
operator|.
name|write
argument_list|(
operator|new
name|byte
index|[]
block|{
call|(
name|byte
call|)
argument_list|(
name|gid
operator|>>
literal|8
operator|&
literal|0xff
argument_list|)
block|,
call|(
name|byte
call|)
argument_list|(
name|gid
operator|&
literal|0xff
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
name|InputStream
name|input
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|PDStream
name|stream
init|=
operator|new
name|PDStream
argument_list|(
name|document
argument_list|,
name|input
argument_list|,
name|COSName
operator|.
name|FLATE_DECODE
argument_list|)
decl_stmt|;
name|cidFont
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|CID_TO_GID_MAP
argument_list|,
name|stream
argument_list|)
expr_stmt|;
block|}
comment|/**      * Builds the CIDSet entry, required by PDF/A. This lists all CIDs in the font, including those      * that don't have a GID.      */
specifier|private
name|void
name|buildCIDSet
parameter_list|(
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|cidToGid
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|cidMax
init|=
name|Collections
operator|.
name|max
argument_list|(
name|cidToGid
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|cidMax
operator|/
literal|8
operator|+
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|cid
init|=
literal|0
init|;
name|cid
operator|<=
name|cidMax
condition|;
name|cid
operator|++
control|)
block|{
name|int
name|mask
init|=
literal|1
operator|<<
literal|7
operator|-
name|cid
operator|%
literal|8
decl_stmt|;
name|bytes
index|[
name|cid
operator|/
literal|8
index|]
operator||=
name|mask
expr_stmt|;
block|}
name|InputStream
name|input
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|PDStream
name|stream
init|=
operator|new
name|PDStream
argument_list|(
name|document
argument_list|,
name|input
argument_list|,
name|COSName
operator|.
name|FLATE_DECODE
argument_list|)
decl_stmt|;
name|fontDescriptor
operator|.
name|setCIDSet
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
comment|/**      * Builds widths with a custom CIDToGIDMap (for embedding font subset).      */
specifier|private
name|void
name|buildWidths
parameter_list|(
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|cidToGid
parameter_list|)
throws|throws
name|IOException
block|{
name|float
name|scaling
init|=
literal|1000f
operator|/
name|ttf
operator|.
name|getHeader
argument_list|()
operator|.
name|getUnitsPerEm
argument_list|()
decl_stmt|;
name|COSArray
name|widths
init|=
operator|new
name|COSArray
argument_list|()
decl_stmt|;
name|COSArray
name|ws
init|=
operator|new
name|COSArray
argument_list|()
decl_stmt|;
name|int
name|prev
init|=
name|Integer
operator|.
name|MIN_VALUE
decl_stmt|;
comment|// Use a sorted list to get an optimal width array
name|Set
argument_list|<
name|Integer
argument_list|>
name|keys
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|cidToGid
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|cid
range|:
name|keys
control|)
block|{
name|int
name|gid
init|=
name|cidToGid
operator|.
name|get
argument_list|(
name|cid
argument_list|)
decl_stmt|;
name|long
name|width
init|=
name|Math
operator|.
name|round
argument_list|(
name|ttf
operator|.
name|getHorizontalMetrics
argument_list|()
operator|.
name|getAdvanceWidth
argument_list|(
name|gid
argument_list|)
operator|*
name|scaling
argument_list|)
decl_stmt|;
if|if
condition|(
name|width
operator|==
literal|1000
condition|)
block|{
comment|// skip default width
continue|continue;
block|}
comment|// c [w1 w2 ... wn]
if|if
condition|(
name|prev
operator|!=
name|cid
operator|-
literal|1
condition|)
block|{
name|ws
operator|=
operator|new
name|COSArray
argument_list|()
expr_stmt|;
name|widths
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|cid
argument_list|)
argument_list|)
expr_stmt|;
comment|// c
name|widths
operator|.
name|add
argument_list|(
name|ws
argument_list|)
expr_stmt|;
block|}
name|ws
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|width
argument_list|)
argument_list|)
expr_stmt|;
comment|// wi
name|prev
operator|=
name|cid
expr_stmt|;
block|}
name|cidFont
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|W
argument_list|,
name|widths
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|buildVerticalHeader
parameter_list|(
name|COSDictionary
name|cidFont
parameter_list|)
throws|throws
name|IOException
block|{
name|VerticalHeaderTable
name|vhea
init|=
name|ttf
operator|.
name|getVerticalHeader
argument_list|()
decl_stmt|;
if|if
condition|(
name|vhea
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Font to be subset is set to vertical, but has no 'vhea' table"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|float
name|scaling
init|=
literal|1000f
operator|/
name|ttf
operator|.
name|getHeader
argument_list|()
operator|.
name|getUnitsPerEm
argument_list|()
decl_stmt|;
name|long
name|v
init|=
name|Math
operator|.
name|round
argument_list|(
name|vhea
operator|.
name|getAscender
argument_list|()
operator|*
name|scaling
argument_list|)
decl_stmt|;
name|long
name|w1
init|=
name|Math
operator|.
name|round
argument_list|(
operator|-
name|vhea
operator|.
name|getAdvanceHeightMax
argument_list|()
operator|*
name|scaling
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|880
operator|||
name|w1
operator|!=
operator|-
literal|1000
condition|)
block|{
name|COSArray
name|cosDw2
init|=
operator|new
name|COSArray
argument_list|()
decl_stmt|;
name|cosDw2
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|cosDw2
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|w1
argument_list|)
argument_list|)
expr_stmt|;
name|cidFont
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|DW2
argument_list|,
name|cosDw2
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Builds vertical metrics with a custom CIDToGIDMap (for embedding font subset).      */
specifier|private
name|void
name|buildVerticalMetrics
parameter_list|(
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|cidToGid
parameter_list|)
throws|throws
name|IOException
block|{
comment|// The "vhea" and "vmtx" tables that specify vertical metrics shall never be used by a conforming
comment|// reader. The only way to specify vertical metrics in PDF shall be by means of the DW2 and W2
comment|// entries in a CIDFont dictionary.
if|if
condition|(
operator|!
name|buildVerticalHeader
argument_list|(
name|cidFont
argument_list|)
condition|)
block|{
return|return;
block|}
name|float
name|scaling
init|=
literal|1000f
operator|/
name|ttf
operator|.
name|getHeader
argument_list|()
operator|.
name|getUnitsPerEm
argument_list|()
decl_stmt|;
name|VerticalHeaderTable
name|vhea
init|=
name|ttf
operator|.
name|getVerticalHeader
argument_list|()
decl_stmt|;
name|VerticalMetricsTable
name|vmtx
init|=
name|ttf
operator|.
name|getVerticalMetrics
argument_list|()
decl_stmt|;
name|GlyphTable
name|glyf
init|=
name|ttf
operator|.
name|getGlyph
argument_list|()
decl_stmt|;
name|HorizontalMetricsTable
name|hmtx
init|=
name|ttf
operator|.
name|getHorizontalMetrics
argument_list|()
decl_stmt|;
name|long
name|v_y
init|=
name|Math
operator|.
name|round
argument_list|(
name|vhea
operator|.
name|getAscender
argument_list|()
operator|*
name|scaling
argument_list|)
decl_stmt|;
name|long
name|w1
init|=
name|Math
operator|.
name|round
argument_list|(
operator|-
name|vhea
operator|.
name|getAdvanceHeightMax
argument_list|()
operator|*
name|scaling
argument_list|)
decl_stmt|;
name|COSArray
name|heights
init|=
operator|new
name|COSArray
argument_list|()
decl_stmt|;
name|COSArray
name|w2
init|=
operator|new
name|COSArray
argument_list|()
decl_stmt|;
name|int
name|prev
init|=
name|Integer
operator|.
name|MIN_VALUE
decl_stmt|;
comment|// Use a sorted list to get an optimal width array
name|Set
argument_list|<
name|Integer
argument_list|>
name|keys
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|cidToGid
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|cid
range|:
name|keys
control|)
block|{
comment|// Unlike buildWidths, we look up with cid (not gid) here because this is
comment|// the original TTF, not the rebuilt one.
name|GlyphData
name|glyph
init|=
name|glyf
operator|.
name|getGlyph
argument_list|(
name|cid
argument_list|)
decl_stmt|;
if|if
condition|(
name|glyph
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|long
name|height
init|=
name|Math
operator|.
name|round
argument_list|(
operator|(
name|glyph
operator|.
name|getYMaximum
argument_list|()
operator|+
name|vmtx
operator|.
name|getTopSideBearing
argument_list|(
name|cid
argument_list|)
operator|)
operator|*
name|scaling
argument_list|)
decl_stmt|;
name|long
name|advance
init|=
name|Math
operator|.
name|round
argument_list|(
operator|-
name|vmtx
operator|.
name|getAdvanceHeight
argument_list|(
name|cid
argument_list|)
operator|*
name|scaling
argument_list|)
decl_stmt|;
if|if
condition|(
name|height
operator|==
name|v_y
operator|&&
name|advance
operator|==
name|w1
condition|)
block|{
comment|// skip default metrics
continue|continue;
block|}
comment|// c [w1_1y v_1x v_1y w1_2y v_2x v_2y ... w1_ny v_nx v_ny]
if|if
condition|(
name|prev
operator|!=
name|cid
operator|-
literal|1
condition|)
block|{
name|w2
operator|=
operator|new
name|COSArray
argument_list|()
expr_stmt|;
name|heights
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|cid
argument_list|)
argument_list|)
expr_stmt|;
comment|// c
name|heights
operator|.
name|add
argument_list|(
name|w2
argument_list|)
expr_stmt|;
block|}
name|w2
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|advance
argument_list|)
argument_list|)
expr_stmt|;
comment|// w1_iy
name|long
name|width
init|=
name|Math
operator|.
name|round
argument_list|(
name|hmtx
operator|.
name|getAdvanceWidth
argument_list|(
name|cid
argument_list|)
operator|*
name|scaling
argument_list|)
decl_stmt|;
name|w2
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|width
operator|/
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// v_ix
name|w2
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|height
argument_list|)
argument_list|)
expr_stmt|;
comment|// v_iy
name|prev
operator|=
name|cid
expr_stmt|;
block|}
name|cidFont
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|W2
argument_list|,
name|heights
argument_list|)
expr_stmt|;
block|}
comment|/**      * Build widths with Identity CIDToGIDMap (for embedding full font).      */
specifier|private
name|void
name|buildWidths
parameter_list|(
name|COSDictionary
name|cidFont
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|cidMax
init|=
name|ttf
operator|.
name|getNumberOfGlyphs
argument_list|()
decl_stmt|;
name|int
index|[]
name|gidwidths
init|=
operator|new
name|int
index|[
name|cidMax
operator|*
literal|2
index|]
decl_stmt|;
for|for
control|(
name|int
name|cid
init|=
literal|0
init|;
name|cid
operator|<
name|cidMax
condition|;
name|cid
operator|++
control|)
block|{
name|gidwidths
index|[
name|cid
operator|*
literal|2
index|]
operator|=
name|cid
expr_stmt|;
name|gidwidths
index|[
name|cid
operator|*
literal|2
operator|+
literal|1
index|]
operator|=
name|ttf
operator|.
name|getHorizontalMetrics
argument_list|()
operator|.
name|getAdvanceWidth
argument_list|(
name|cid
argument_list|)
expr_stmt|;
block|}
name|cidFont
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|W
argument_list|,
name|getWidths
argument_list|(
name|gidwidths
argument_list|)
argument_list|)
expr_stmt|;
block|}
enum|enum
name|State
block|{
name|FIRST
block|,
name|BRACKET
block|,
name|SERIAL
block|}
specifier|private
name|COSArray
name|getWidths
parameter_list|(
name|int
index|[]
name|widths
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|widths
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"length of widths must be> 0"
argument_list|)
throw|;
block|}
name|float
name|scaling
init|=
literal|1000f
operator|/
name|ttf
operator|.
name|getHeader
argument_list|()
operator|.
name|getUnitsPerEm
argument_list|()
decl_stmt|;
name|long
name|lastCid
init|=
name|widths
index|[
literal|0
index|]
decl_stmt|;
name|long
name|lastValue
init|=
name|Math
operator|.
name|round
argument_list|(
name|widths
index|[
literal|1
index|]
operator|*
name|scaling
argument_list|)
decl_stmt|;
name|COSArray
name|inner
init|=
operator|new
name|COSArray
argument_list|()
decl_stmt|;
name|COSArray
name|outer
init|=
operator|new
name|COSArray
argument_list|()
decl_stmt|;
name|outer
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|lastCid
argument_list|)
argument_list|)
expr_stmt|;
name|State
name|state
init|=
name|State
operator|.
name|FIRST
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|widths
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|long
name|cid
init|=
name|widths
index|[
name|i
index|]
decl_stmt|;
name|long
name|value
init|=
name|Math
operator|.
name|round
argument_list|(
name|widths
index|[
name|i
operator|+
literal|1
index|]
operator|*
name|scaling
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|FIRST
case|:
if|if
condition|(
name|cid
operator|==
name|lastCid
operator|+
literal|1
operator|&&
name|value
operator|==
name|lastValue
condition|)
block|{
name|state
operator|=
name|State
operator|.
name|SERIAL
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cid
operator|==
name|lastCid
operator|+
literal|1
condition|)
block|{
name|state
operator|=
name|State
operator|.
name|BRACKET
expr_stmt|;
name|inner
operator|=
operator|new
name|COSArray
argument_list|()
expr_stmt|;
name|inner
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|lastValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|inner
operator|=
operator|new
name|COSArray
argument_list|()
expr_stmt|;
name|inner
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|lastValue
argument_list|)
argument_list|)
expr_stmt|;
name|outer
operator|.
name|add
argument_list|(
name|inner
argument_list|)
expr_stmt|;
name|outer
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|cid
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|BRACKET
case|:
if|if
condition|(
name|cid
operator|==
name|lastCid
operator|+
literal|1
operator|&&
name|value
operator|==
name|lastValue
condition|)
block|{
name|state
operator|=
name|State
operator|.
name|SERIAL
expr_stmt|;
name|outer
operator|.
name|add
argument_list|(
name|inner
argument_list|)
expr_stmt|;
name|outer
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|lastCid
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cid
operator|==
name|lastCid
operator|+
literal|1
condition|)
block|{
name|inner
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|lastValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|state
operator|=
name|State
operator|.
name|FIRST
expr_stmt|;
name|inner
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|lastValue
argument_list|)
argument_list|)
expr_stmt|;
name|outer
operator|.
name|add
argument_list|(
name|inner
argument_list|)
expr_stmt|;
name|outer
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|cid
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|SERIAL
case|:
if|if
condition|(
name|cid
operator|!=
name|lastCid
operator|+
literal|1
operator|||
name|value
operator|!=
name|lastValue
condition|)
block|{
name|outer
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|lastCid
argument_list|)
argument_list|)
expr_stmt|;
name|outer
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|lastValue
argument_list|)
argument_list|)
expr_stmt|;
name|outer
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|cid
argument_list|)
argument_list|)
expr_stmt|;
name|state
operator|=
name|State
operator|.
name|FIRST
expr_stmt|;
block|}
break|break;
block|}
name|lastValue
operator|=
name|value
expr_stmt|;
name|lastCid
operator|=
name|cid
expr_stmt|;
block|}
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|FIRST
case|:
name|inner
operator|=
operator|new
name|COSArray
argument_list|()
expr_stmt|;
name|inner
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|lastValue
argument_list|)
argument_list|)
expr_stmt|;
name|outer
operator|.
name|add
argument_list|(
name|inner
argument_list|)
expr_stmt|;
break|break;
case|case
name|BRACKET
case|:
name|inner
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|lastValue
argument_list|)
argument_list|)
expr_stmt|;
name|outer
operator|.
name|add
argument_list|(
name|inner
argument_list|)
expr_stmt|;
break|break;
case|case
name|SERIAL
case|:
name|outer
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|lastCid
argument_list|)
argument_list|)
expr_stmt|;
name|outer
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|lastValue
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|outer
return|;
block|}
comment|/**      * Build vertical metrics with Identity CIDToGIDMap (for embedding full font).      */
specifier|private
name|void
name|buildVerticalMetrics
parameter_list|(
name|COSDictionary
name|cidFont
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|buildVerticalHeader
argument_list|(
name|cidFont
argument_list|)
condition|)
block|{
return|return;
block|}
name|int
name|cidMax
init|=
name|ttf
operator|.
name|getNumberOfGlyphs
argument_list|()
decl_stmt|;
name|int
index|[]
name|gidMetrics
init|=
operator|new
name|int
index|[
name|cidMax
operator|*
literal|4
index|]
decl_stmt|;
for|for
control|(
name|int
name|cid
init|=
literal|0
init|;
name|cid
operator|<
name|cidMax
condition|;
name|cid
operator|++
control|)
block|{
name|GlyphData
name|glyph
init|=
name|ttf
operator|.
name|getGlyph
argument_list|()
operator|.
name|getGlyph
argument_list|(
name|cid
argument_list|)
decl_stmt|;
if|if
condition|(
name|glyph
operator|==
literal|null
condition|)
block|{
name|gidMetrics
index|[
name|cid
operator|*
literal|4
index|]
operator|=
name|Integer
operator|.
name|MIN_VALUE
expr_stmt|;
block|}
else|else
block|{
name|gidMetrics
index|[
name|cid
operator|*
literal|4
index|]
operator|=
name|cid
expr_stmt|;
name|gidMetrics
index|[
name|cid
operator|*
literal|4
operator|+
literal|1
index|]
operator|=
name|ttf
operator|.
name|getVerticalMetrics
argument_list|()
operator|.
name|getAdvanceHeight
argument_list|(
name|cid
argument_list|)
expr_stmt|;
name|gidMetrics
index|[
name|cid
operator|*
literal|4
operator|+
literal|2
index|]
operator|=
name|ttf
operator|.
name|getHorizontalMetrics
argument_list|()
operator|.
name|getAdvanceWidth
argument_list|(
name|cid
argument_list|)
expr_stmt|;
name|gidMetrics
index|[
name|cid
operator|*
literal|4
operator|+
literal|3
index|]
operator|=
name|glyph
operator|.
name|getYMaximum
argument_list|()
operator|+
name|ttf
operator|.
name|getVerticalMetrics
argument_list|()
operator|.
name|getTopSideBearing
argument_list|(
name|cid
argument_list|)
expr_stmt|;
block|}
block|}
name|cidFont
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|W2
argument_list|,
name|getVerticalMetrics
argument_list|(
name|gidMetrics
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|COSArray
name|getVerticalMetrics
parameter_list|(
name|int
index|[]
name|values
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|values
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"length of values must be> 0"
argument_list|)
throw|;
block|}
name|float
name|scaling
init|=
literal|1000f
operator|/
name|ttf
operator|.
name|getHeader
argument_list|()
operator|.
name|getUnitsPerEm
argument_list|()
decl_stmt|;
name|long
name|lastCid
init|=
name|values
index|[
literal|0
index|]
decl_stmt|;
name|long
name|lastW1Value
init|=
name|Math
operator|.
name|round
argument_list|(
operator|-
name|values
index|[
literal|1
index|]
operator|*
name|scaling
argument_list|)
decl_stmt|;
name|long
name|lastVxValue
init|=
name|Math
operator|.
name|round
argument_list|(
name|values
index|[
literal|2
index|]
operator|*
name|scaling
operator|/
literal|2f
argument_list|)
decl_stmt|;
name|long
name|lastVyValue
init|=
name|Math
operator|.
name|round
argument_list|(
name|values
index|[
literal|3
index|]
operator|*
name|scaling
argument_list|)
decl_stmt|;
name|COSArray
name|inner
init|=
operator|new
name|COSArray
argument_list|()
decl_stmt|;
name|COSArray
name|outer
init|=
operator|new
name|COSArray
argument_list|()
decl_stmt|;
name|outer
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|lastCid
argument_list|)
argument_list|)
expr_stmt|;
name|State
name|state
init|=
name|State
operator|.
name|FIRST
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|4
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|+=
literal|4
control|)
block|{
name|long
name|cid
init|=
name|values
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|cid
operator|==
name|Integer
operator|.
name|MIN_VALUE
condition|)
block|{
comment|// no glyph for this cid
continue|continue;
block|}
name|long
name|w1Value
init|=
name|Math
operator|.
name|round
argument_list|(
operator|-
name|values
index|[
name|i
operator|+
literal|1
index|]
operator|*
name|scaling
argument_list|)
decl_stmt|;
name|long
name|vxValue
init|=
name|Math
operator|.
name|round
argument_list|(
name|values
index|[
name|i
operator|+
literal|2
index|]
operator|*
name|scaling
operator|/
literal|2
argument_list|)
decl_stmt|;
name|long
name|vyValue
init|=
name|Math
operator|.
name|round
argument_list|(
name|values
index|[
name|i
operator|+
literal|3
index|]
operator|*
name|scaling
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|FIRST
case|:
if|if
condition|(
name|cid
operator|==
name|lastCid
operator|+
literal|1
operator|&&
name|w1Value
operator|==
name|lastW1Value
operator|&&
name|vxValue
operator|==
name|lastVxValue
operator|&&
name|vyValue
operator|==
name|lastVyValue
condition|)
block|{
name|state
operator|=
name|State
operator|.
name|SERIAL
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cid
operator|==
name|lastCid
operator|+
literal|1
condition|)
block|{
name|state
operator|=
name|State
operator|.
name|BRACKET
expr_stmt|;
name|inner
operator|=
operator|new
name|COSArray
argument_list|()
expr_stmt|;
name|inner
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|lastW1Value
argument_list|)
argument_list|)
expr_stmt|;
name|inner
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|lastVxValue
argument_list|)
argument_list|)
expr_stmt|;
name|inner
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|lastVyValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|inner
operator|=
operator|new
name|COSArray
argument_list|()
expr_stmt|;
name|inner
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|lastW1Value
argument_list|)
argument_list|)
expr_stmt|;
name|inner
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|lastVxValue
argument_list|)
argument_list|)
expr_stmt|;
name|inner
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|lastVyValue
argument_list|)
argument_list|)
expr_stmt|;
name|outer
operator|.
name|add
argument_list|(
name|inner
argument_list|)
expr_stmt|;
name|outer
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|cid
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|BRACKET
case|:
if|if
condition|(
name|cid
operator|==
name|lastCid
operator|+
literal|1
operator|&&
name|w1Value
operator|==
name|lastW1Value
operator|&&
name|vxValue
operator|==
name|lastVxValue
operator|&&
name|vyValue
operator|==
name|lastVyValue
condition|)
block|{
name|state
operator|=
name|State
operator|.
name|SERIAL
expr_stmt|;
name|outer
operator|.
name|add
argument_list|(
name|inner
argument_list|)
expr_stmt|;
name|outer
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|lastCid
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cid
operator|==
name|lastCid
operator|+
literal|1
condition|)
block|{
name|inner
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|lastW1Value
argument_list|)
argument_list|)
expr_stmt|;
name|inner
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|lastVxValue
argument_list|)
argument_list|)
expr_stmt|;
name|inner
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|lastVyValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|state
operator|=
name|State
operator|.
name|FIRST
expr_stmt|;
name|inner
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|lastW1Value
argument_list|)
argument_list|)
expr_stmt|;
name|inner
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|lastVxValue
argument_list|)
argument_list|)
expr_stmt|;
name|inner
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|lastVyValue
argument_list|)
argument_list|)
expr_stmt|;
name|outer
operator|.
name|add
argument_list|(
name|inner
argument_list|)
expr_stmt|;
name|outer
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|cid
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|SERIAL
case|:
if|if
condition|(
name|cid
operator|!=
name|lastCid
operator|+
literal|1
operator|||
name|w1Value
operator|!=
name|lastW1Value
operator|||
name|vxValue
operator|!=
name|lastVxValue
operator|||
name|vyValue
operator|!=
name|lastVyValue
condition|)
block|{
name|outer
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|lastCid
argument_list|)
argument_list|)
expr_stmt|;
name|outer
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|lastW1Value
argument_list|)
argument_list|)
expr_stmt|;
name|outer
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|lastVxValue
argument_list|)
argument_list|)
expr_stmt|;
name|outer
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|lastVyValue
argument_list|)
argument_list|)
expr_stmt|;
name|outer
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|cid
argument_list|)
argument_list|)
expr_stmt|;
name|state
operator|=
name|State
operator|.
name|FIRST
expr_stmt|;
block|}
break|break;
block|}
name|lastW1Value
operator|=
name|w1Value
expr_stmt|;
name|lastVxValue
operator|=
name|vxValue
expr_stmt|;
name|lastVyValue
operator|=
name|vyValue
expr_stmt|;
name|lastCid
operator|=
name|cid
expr_stmt|;
block|}
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|FIRST
case|:
name|inner
operator|=
operator|new
name|COSArray
argument_list|()
expr_stmt|;
name|inner
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|lastW1Value
argument_list|)
argument_list|)
expr_stmt|;
name|inner
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|lastVxValue
argument_list|)
argument_list|)
expr_stmt|;
name|inner
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|lastVyValue
argument_list|)
argument_list|)
expr_stmt|;
name|outer
operator|.
name|add
argument_list|(
name|inner
argument_list|)
expr_stmt|;
break|break;
case|case
name|BRACKET
case|:
name|inner
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|lastW1Value
argument_list|)
argument_list|)
expr_stmt|;
name|inner
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|lastVxValue
argument_list|)
argument_list|)
expr_stmt|;
name|inner
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|lastVyValue
argument_list|)
argument_list|)
expr_stmt|;
name|outer
operator|.
name|add
argument_list|(
name|inner
argument_list|)
expr_stmt|;
break|break;
case|case
name|SERIAL
case|:
name|outer
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|lastCid
argument_list|)
argument_list|)
expr_stmt|;
name|outer
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|lastW1Value
argument_list|)
argument_list|)
expr_stmt|;
name|outer
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|lastVxValue
argument_list|)
argument_list|)
expr_stmt|;
name|outer
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|lastVyValue
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|outer
return|;
block|}
comment|/**      * Returns the descendant CIDFont.      */
specifier|public
name|PDCIDFont
name|getCIDFont
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|PDCIDFontType2
argument_list|(
name|cidFont
argument_list|,
name|parent
argument_list|,
name|ttf
argument_list|)
return|;
block|}
block|}
end_class

end_unit

