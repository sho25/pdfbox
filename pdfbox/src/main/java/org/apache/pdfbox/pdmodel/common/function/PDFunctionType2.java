begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|function
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSFloat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSNumber
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|Math
import|;
end_import

begin_comment
comment|/**  * This class represents a type 2 function in a PDF document.  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.2 $  */
end_comment

begin_class
specifier|public
class|class
name|PDFunctionType2
extends|extends
name|PDFunction
block|{
comment|/**      * The C0 values of the exponential function.      */
specifier|private
name|COSArray
name|C0
decl_stmt|;
comment|/**      * The C1 values of the exponential function.      */
specifier|private
name|COSArray
name|C1
decl_stmt|;
comment|/**      * Constructor.      *      * @param function The function .      */
specifier|public
name|PDFunctionType2
parameter_list|(
name|COSBase
name|function
parameter_list|)
block|{
name|super
argument_list|(
name|function
argument_list|)
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|int
name|getFunctionType
parameter_list|()
block|{
return|return
literal|2
return|;
block|}
comment|/**     * {@inheritDoc}     */
specifier|public
name|float
index|[]
name|eval
parameter_list|(
name|float
index|[]
name|input
parameter_list|)
throws|throws
name|IOException
block|{
comment|//This function performs exponential interpolation.
comment|//It uses only a single value as its input, but may produce a multi-valued output.
comment|//See PDF Reference section 3.9.2.
name|double
name|inputValue
init|=
name|input
index|[
literal|0
index|]
decl_stmt|;
name|double
name|exponent
init|=
name|getN
argument_list|()
decl_stmt|;
name|COSArray
name|c0
init|=
name|getC0
argument_list|()
decl_stmt|;
name|COSArray
name|c1
init|=
name|getC1
argument_list|()
decl_stmt|;
name|int
name|c0Size
init|=
name|c0
operator|.
name|size
argument_list|()
decl_stmt|;
name|float
index|[]
name|functionResult
init|=
operator|new
name|float
index|[
name|c0Size
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|c0Size
condition|;
name|j
operator|++
control|)
block|{
comment|//y[j] = C0[j] + x^N*(C1[j] - C0[j])
name|functionResult
index|[
name|j
index|]
operator|=
operator|(
operator|(
name|COSNumber
operator|)
name|c0
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|)
operator|.
name|floatValue
argument_list|()
operator|+
operator|(
name|float
operator|)
name|Math
operator|.
name|pow
argument_list|(
name|inputValue
argument_list|,
name|exponent
argument_list|)
operator|*
operator|(
operator|(
operator|(
name|COSNumber
operator|)
name|c1
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|)
operator|.
name|floatValue
argument_list|()
operator|-
operator|(
operator|(
name|COSNumber
operator|)
name|c0
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|)
operator|.
name|floatValue
argument_list|()
operator|)
expr_stmt|;
block|}
comment|// clip to range if available
return|return
name|clipToRange
argument_list|(
name|functionResult
argument_list|)
return|;
block|}
comment|/**      * Returns the C0 values of the function, 0 if empty.      * @return a COSArray with the C0 values      */
specifier|public
name|COSArray
name|getC0
parameter_list|()
block|{
if|if
condition|(
name|C0
operator|==
literal|null
condition|)
block|{
name|C0
operator|=
operator|(
name|COSArray
operator|)
name|getDictionary
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|C0
argument_list|)
expr_stmt|;
if|if
condition|(
name|C0
operator|==
literal|null
condition|)
block|{
comment|// C0 is optional, default = 0
name|C0
operator|=
operator|new
name|COSArray
argument_list|()
expr_stmt|;
name|C0
operator|.
name|add
argument_list|(
operator|new
name|COSFloat
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|C0
return|;
block|}
comment|/**      * Returns the C1 values of the function, 1 if empty.      * @return a COSArray with the C1 values      */
specifier|public
name|COSArray
name|getC1
parameter_list|()
block|{
if|if
condition|(
name|C1
operator|==
literal|null
condition|)
block|{
name|C1
operator|=
operator|(
name|COSArray
operator|)
name|getDictionary
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|C1
argument_list|)
expr_stmt|;
if|if
condition|(
name|C1
operator|==
literal|null
condition|)
block|{
comment|// C1 is optional, default = 1
name|C1
operator|=
operator|new
name|COSArray
argument_list|()
expr_stmt|;
name|C1
operator|.
name|add
argument_list|(
operator|new
name|COSFloat
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|C1
return|;
block|}
comment|/**      * Returns the exponent of the function.      * @return the float value of the exponent      */
specifier|public
name|float
name|getN
parameter_list|()
block|{
return|return
name|getDictionary
argument_list|()
operator|.
name|getFloat
argument_list|(
name|COSName
operator|.
name|N
argument_list|)
return|;
block|}
block|}
end_class

end_unit

