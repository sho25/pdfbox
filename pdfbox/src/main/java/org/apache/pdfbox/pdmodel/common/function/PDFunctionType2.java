begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|function
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSFloat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSNumber
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * This class represents a Type 2 (exponential interpolation) function in a PDF  * document.  *  * @author Ben Litchfield  */
end_comment

begin_class
specifier|public
class|class
name|PDFunctionType2
extends|extends
name|PDFunction
block|{
comment|/**      * The C0 values of the exponential function.      */
specifier|private
specifier|final
name|COSArray
name|c0
decl_stmt|;
comment|/**      * The C1 values of the exponential function.      */
specifier|private
specifier|final
name|COSArray
name|c1
decl_stmt|;
comment|/**      * The exponent value of the exponential function.      */
specifier|private
specifier|final
name|float
name|exponent
decl_stmt|;
comment|/**      * Constructor.      *      * @param function The function.      */
specifier|public
name|PDFunctionType2
parameter_list|(
name|COSBase
name|function
parameter_list|)
block|{
name|super
argument_list|(
name|function
argument_list|)
expr_stmt|;
if|if
condition|(
name|getDictionary
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|C0
argument_list|)
operator|==
literal|null
condition|)
block|{
name|c0
operator|=
operator|new
name|COSArray
argument_list|()
expr_stmt|;
name|c0
operator|.
name|add
argument_list|(
operator|new
name|COSFloat
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|c0
operator|=
operator|(
name|COSArray
operator|)
name|getDictionary
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|C0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getDictionary
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|C1
argument_list|)
operator|==
literal|null
condition|)
block|{
name|c1
operator|=
operator|new
name|COSArray
argument_list|()
expr_stmt|;
name|c1
operator|.
name|add
argument_list|(
operator|new
name|COSFloat
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|c1
operator|=
operator|(
name|COSArray
operator|)
name|getDictionary
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|C1
argument_list|)
expr_stmt|;
block|}
name|exponent
operator|=
name|getDictionary
argument_list|()
operator|.
name|getFloat
argument_list|(
name|COSName
operator|.
name|N
argument_list|)
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|int
name|getFunctionType
parameter_list|()
block|{
return|return
literal|2
return|;
block|}
comment|/**      * Performs exponential interpolation      *      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|float
index|[]
name|eval
parameter_list|(
name|float
index|[]
name|input
parameter_list|)
throws|throws
name|IOException
block|{
comment|// exponential interpolation
name|float
name|xToN
init|=
operator|(
name|float
operator|)
name|Math
operator|.
name|pow
argument_list|(
name|input
index|[
literal|0
index|]
argument_list|,
name|exponent
argument_list|)
decl_stmt|;
comment|// x^exponent
name|float
index|[]
name|result
init|=
operator|new
name|float
index|[
name|c0
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|result
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|float
name|C0j
init|=
operator|(
operator|(
name|COSNumber
operator|)
name|c0
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|)
operator|.
name|floatValue
argument_list|()
decl_stmt|;
name|float
name|C1j
init|=
operator|(
operator|(
name|COSNumber
operator|)
name|c1
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|)
operator|.
name|floatValue
argument_list|()
decl_stmt|;
name|result
index|[
name|j
index|]
operator|=
name|C0j
operator|+
name|xToN
operator|*
operator|(
name|C1j
operator|-
name|C0j
operator|)
expr_stmt|;
block|}
return|return
name|clipToRange
argument_list|(
name|result
argument_list|)
return|;
block|}
comment|/**      * Returns the C0 values of the function, 0 if empty.      *      * @return a COSArray with the C0 values      */
specifier|public
name|COSArray
name|getC0
parameter_list|()
block|{
return|return
name|c0
return|;
block|}
comment|/**      * Returns the C1 values of the function, 1 if empty.      *      * @return a COSArray with the C1 values      */
specifier|public
name|COSArray
name|getC1
parameter_list|()
block|{
return|return
name|c1
return|;
block|}
comment|/**      * Returns the exponent of the function.      *      * @return the float value of the exponent      */
specifier|public
name|float
name|getN
parameter_list|()
block|{
return|return
name|exponent
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"FunctionType2{"
operator|+
literal|"C0: "
operator|+
name|getC0
argument_list|()
operator|+
literal|" "
operator|+
literal|"C1: "
operator|+
name|getC1
argument_list|()
operator|+
literal|" "
operator|+
literal|"N: "
operator|+
name|getN
argument_list|()
operator|+
literal|"}"
return|;
block|}
block|}
end_class

end_unit

