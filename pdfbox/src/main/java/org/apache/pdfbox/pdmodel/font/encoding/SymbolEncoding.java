begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|encoding
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_comment
comment|/**  * This is an interface to a text encoder.  */
end_comment

begin_class
specifier|public
class|class
name|SymbolEncoding
extends|extends
name|Encoding
block|{
specifier|private
specifier|static
specifier|final
name|int
name|CHAR_CODE
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|CHAR_NAME
init|=
literal|1
decl_stmt|;
comment|/**      * Table of octal character codes and their corresponding names.      */
specifier|private
specifier|static
specifier|final
name|Object
index|[]
index|[]
name|SYMBOL_ENCODING_TABLE
init|=
block|{
block|{
literal|0101
block|,
literal|"Alpha"
block|}
block|,
block|{
literal|0102
block|,
literal|"Beta"
block|}
block|,
block|{
literal|0103
block|,
literal|"Chi"
block|}
block|,
block|{
literal|0104
block|,
literal|"Delta"
block|}
block|,
block|{
literal|0105
block|,
literal|"Epsilon"
block|}
block|,
block|{
literal|0110
block|,
literal|"Eta"
block|}
block|,
block|{
literal|0240
block|,
literal|"Euro"
block|}
block|,
block|{
literal|0107
block|,
literal|"Gamma"
block|}
block|,
block|{
literal|0301
block|,
literal|"Ifraktur"
block|}
block|,
block|{
literal|0111
block|,
literal|"Iota"
block|}
block|,
block|{
literal|0113
block|,
literal|"Kappa"
block|}
block|,
block|{
literal|0114
block|,
literal|"Lambda"
block|}
block|,
block|{
literal|0115
block|,
literal|"Mu"
block|}
block|,
block|{
literal|0116
block|,
literal|"Nu"
block|}
block|,
block|{
literal|0127
block|,
literal|"Omega"
block|}
block|,
block|{
literal|0117
block|,
literal|"Omicron"
block|}
block|,
block|{
literal|0106
block|,
literal|"Phi"
block|}
block|,
block|{
literal|0120
block|,
literal|"Pi"
block|}
block|,
block|{
literal|0131
block|,
literal|"Psi"
block|}
block|,
block|{
literal|0302
block|,
literal|"Rfraktur"
block|}
block|,
block|{
literal|0122
block|,
literal|"Rho"
block|}
block|,
block|{
literal|0123
block|,
literal|"Sigma"
block|}
block|,
block|{
literal|0124
block|,
literal|"Tau"
block|}
block|,
block|{
literal|0121
block|,
literal|"Theta"
block|}
block|,
block|{
literal|0125
block|,
literal|"Upsilon"
block|}
block|,
block|{
literal|0241
block|,
literal|"Upsilon1"
block|}
block|,
block|{
literal|0130
block|,
literal|"Xi"
block|}
block|,
block|{
literal|0132
block|,
literal|"Zeta"
block|}
block|,
block|{
literal|0300
block|,
literal|"aleph"
block|}
block|,
block|{
literal|0141
block|,
literal|"alpha"
block|}
block|,
block|{
literal|0046
block|,
literal|"ampersand"
block|}
block|,
block|{
literal|0320
block|,
literal|"angle"
block|}
block|,
block|{
literal|0341
block|,
literal|"angleleft"
block|}
block|,
block|{
literal|0361
block|,
literal|"angleright"
block|}
block|,
block|{
literal|0273
block|,
literal|"approxequal"
block|}
block|,
block|{
literal|0253
block|,
literal|"arrowboth"
block|}
block|,
block|{
literal|0333
block|,
literal|"arrowdblboth"
block|}
block|,
block|{
literal|0337
block|,
literal|"arrowdbldown"
block|}
block|,
block|{
literal|0334
block|,
literal|"arrowdblleft"
block|}
block|,
block|{
literal|0336
block|,
literal|"arrowdblright"
block|}
block|,
block|{
literal|0335
block|,
literal|"arrowdblup"
block|}
block|,
block|{
literal|0257
block|,
literal|"arrowdown"
block|}
block|,
block|{
literal|0276
block|,
literal|"arrowhorizex"
block|}
block|,
block|{
literal|0254
block|,
literal|"arrowleft"
block|}
block|,
block|{
literal|0256
block|,
literal|"arrowright"
block|}
block|,
block|{
literal|0255
block|,
literal|"arrowup"
block|}
block|,
block|{
literal|0275
block|,
literal|"arrowvertex"
block|}
block|,
block|{
literal|0052
block|,
literal|"asteriskmath"
block|}
block|,
block|{
literal|0174
block|,
literal|"bar"
block|}
block|,
block|{
literal|0142
block|,
literal|"beta"
block|}
block|,
block|{
literal|0173
block|,
literal|"braceleft"
block|}
block|,
block|{
literal|0175
block|,
literal|"braceright"
block|}
block|,
block|{
literal|0354
block|,
literal|"bracelefttp"
block|}
block|,
block|{
literal|0355
block|,
literal|"braceleftmid"
block|}
block|,
block|{
literal|0356
block|,
literal|"braceleftbt"
block|}
block|,
block|{
literal|0374
block|,
literal|"bracerighttp"
block|}
block|,
block|{
literal|0375
block|,
literal|"bracerightmid"
block|}
block|,
block|{
literal|0376
block|,
literal|"bracerightbt"
block|}
block|,
block|{
literal|0357
block|,
literal|"braceex"
block|}
block|,
block|{
literal|0133
block|,
literal|"bracketleft"
block|}
block|,
block|{
literal|0135
block|,
literal|"bracketright"
block|}
block|,
block|{
literal|0351
block|,
literal|"bracketlefttp"
block|}
block|,
block|{
literal|0352
block|,
literal|"bracketleftex"
block|}
block|,
block|{
literal|0353
block|,
literal|"bracketleftbt"
block|}
block|,
block|{
literal|0371
block|,
literal|"bracketrighttp"
block|}
block|,
block|{
literal|0372
block|,
literal|"bracketrightex"
block|}
block|,
block|{
literal|0373
block|,
literal|"bracketrightbt"
block|}
block|,
block|{
literal|0267
block|,
literal|"bullet"
block|}
block|,
block|{
literal|0277
block|,
literal|"carriagereturn"
block|}
block|,
block|{
literal|0143
block|,
literal|"chi"
block|}
block|,
block|{
literal|0304
block|,
literal|"circlemultiply"
block|}
block|,
block|{
literal|0305
block|,
literal|"circleplus"
block|}
block|,
block|{
literal|0247
block|,
literal|"club"
block|}
block|,
block|{
literal|0072
block|,
literal|"colon"
block|}
block|,
block|{
literal|0054
block|,
literal|"comma"
block|}
block|,
block|{
literal|0100
block|,
literal|"congruent"
block|}
block|,
block|{
literal|0343
block|,
literal|"copyrightsans"
block|}
block|,
block|{
literal|0323
block|,
literal|"copyrightserif"
block|}
block|,
block|{
literal|0260
block|,
literal|"degree"
block|}
block|,
block|{
literal|0144
block|,
literal|"delta"
block|}
block|,
block|{
literal|0250
block|,
literal|"diamond"
block|}
block|,
block|{
literal|0270
block|,
literal|"divide"
block|}
block|,
block|{
literal|0327
block|,
literal|"dotmath"
block|}
block|,
block|{
literal|0070
block|,
literal|"eight"
block|}
block|,
block|{
literal|0316
block|,
literal|"element"
block|}
block|,
block|{
literal|0274
block|,
literal|"ellipsis"
block|}
block|,
block|{
literal|0306
block|,
literal|"emptyset"
block|}
block|,
block|{
literal|0145
block|,
literal|"epsilon"
block|}
block|,
block|{
literal|0075
block|,
literal|"equal"
block|}
block|,
block|{
literal|0272
block|,
literal|"equivalence"
block|}
block|,
block|{
literal|0150
block|,
literal|"eta"
block|}
block|,
block|{
literal|0041
block|,
literal|"exclam"
block|}
block|,
block|{
literal|0044
block|,
literal|"existential"
block|}
block|,
block|{
literal|0065
block|,
literal|"five"
block|}
block|,
block|{
literal|0246
block|,
literal|"florin"
block|}
block|,
block|{
literal|0064
block|,
literal|"four"
block|}
block|,
block|{
literal|0244
block|,
literal|"fraction"
block|}
block|,
block|{
literal|0147
block|,
literal|"gamma"
block|}
block|,
block|{
literal|0321
block|,
literal|"gradient"
block|}
block|,
block|{
literal|0076
block|,
literal|"greater"
block|}
block|,
block|{
literal|0263
block|,
literal|"greaterequal"
block|}
block|,
block|{
literal|0251
block|,
literal|"heart"
block|}
block|,
block|{
literal|0245
block|,
literal|"infinity"
block|}
block|,
block|{
literal|0362
block|,
literal|"integral"
block|}
block|,
block|{
literal|0363
block|,
literal|"integraltp"
block|}
block|,
block|{
literal|0364
block|,
literal|"integralex"
block|}
block|,
block|{
literal|0365
block|,
literal|"integralbt"
block|}
block|,
block|{
literal|0307
block|,
literal|"intersection"
block|}
block|,
block|{
literal|0151
block|,
literal|"iota"
block|}
block|,
block|{
literal|0153
block|,
literal|"kappa"
block|}
block|,
block|{
literal|0154
block|,
literal|"lambda"
block|}
block|,
block|{
literal|0074
block|,
literal|"less"
block|}
block|,
block|{
literal|0243
block|,
literal|"lessequal"
block|}
block|,
block|{
literal|0331
block|,
literal|"logicaland"
block|}
block|,
block|{
literal|0330
block|,
literal|"logicalnot"
block|}
block|,
block|{
literal|0332
block|,
literal|"logicalor"
block|}
block|,
block|{
literal|0340
block|,
literal|"lozenge"
block|}
block|,
block|{
literal|0055
block|,
literal|"minus"
block|}
block|,
block|{
literal|0242
block|,
literal|"minute"
block|}
block|,
block|{
literal|0155
block|,
literal|"mu"
block|}
block|,
block|{
literal|0264
block|,
literal|"multiply"
block|}
block|,
block|{
literal|0071
block|,
literal|"nine"
block|}
block|,
block|{
literal|0317
block|,
literal|"notelement"
block|}
block|,
block|{
literal|0271
block|,
literal|"notequal"
block|}
block|,
block|{
literal|0313
block|,
literal|"notsubset"
block|}
block|,
block|{
literal|0156
block|,
literal|"nu"
block|}
block|,
block|{
literal|0043
block|,
literal|"numbersign"
block|}
block|,
block|{
literal|0167
block|,
literal|"omega"
block|}
block|,
block|{
literal|0166
block|,
literal|"omega1"
block|}
block|,
block|{
literal|0157
block|,
literal|"omicron"
block|}
block|,
block|{
literal|0061
block|,
literal|"one"
block|}
block|,
block|{
literal|0050
block|,
literal|"parenleft"
block|}
block|,
block|{
literal|0051
block|,
literal|"parenright"
block|}
block|,
block|{
literal|0346
block|,
literal|"parenlefttp"
block|}
block|,
block|{
literal|0347
block|,
literal|"parenleftex"
block|}
block|,
block|{
literal|0350
block|,
literal|"parenleftbt"
block|}
block|,
block|{
literal|0366
block|,
literal|"parenrighttp"
block|}
block|,
block|{
literal|0367
block|,
literal|"parenrightex"
block|}
block|,
block|{
literal|0370
block|,
literal|"parenrightbt"
block|}
block|,
block|{
literal|0266
block|,
literal|"partialdiff"
block|}
block|,
block|{
literal|0045
block|,
literal|"percent"
block|}
block|,
block|{
literal|0056
block|,
literal|"period"
block|}
block|,
block|{
literal|0136
block|,
literal|"perpendicular"
block|}
block|,
block|{
literal|0146
block|,
literal|"phi"
block|}
block|,
block|{
literal|0152
block|,
literal|"phi1"
block|}
block|,
block|{
literal|0160
block|,
literal|"pi"
block|}
block|,
block|{
literal|0053
block|,
literal|"plus"
block|}
block|,
block|{
literal|0261
block|,
literal|"plusminus"
block|}
block|,
block|{
literal|0325
block|,
literal|"product"
block|}
block|,
block|{
literal|0314
block|,
literal|"propersubset"
block|}
block|,
block|{
literal|0311
block|,
literal|"propersuperset"
block|}
block|,
block|{
literal|0265
block|,
literal|"proportional"
block|}
block|,
block|{
literal|0171
block|,
literal|"psi"
block|}
block|,
block|{
literal|0077
block|,
literal|"question"
block|}
block|,
block|{
literal|0326
block|,
literal|"radical"
block|}
block|,
block|{
literal|0140
block|,
literal|"radicalex"
block|}
block|,
block|{
literal|0315
block|,
literal|"reflexsubset"
block|}
block|,
block|{
literal|0312
block|,
literal|"reflexsuperset"
block|}
block|,
block|{
literal|0342
block|,
literal|"registersans"
block|}
block|,
block|{
literal|0322
block|,
literal|"registerserif"
block|}
block|,
block|{
literal|0162
block|,
literal|"rho"
block|}
block|,
block|{
literal|0262
block|,
literal|"second"
block|}
block|,
block|{
literal|0073
block|,
literal|"semicolon"
block|}
block|,
block|{
literal|0067
block|,
literal|"seven"
block|}
block|,
block|{
literal|0163
block|,
literal|"sigma"
block|}
block|,
block|{
literal|0126
block|,
literal|"sigma1"
block|}
block|,
block|{
literal|0176
block|,
literal|"similar"
block|}
block|,
block|{
literal|0066
block|,
literal|"six"
block|}
block|,
block|{
literal|0057
block|,
literal|"slash"
block|}
block|,
block|{
literal|0040
block|,
literal|"space"
block|}
block|,
block|{
literal|0252
block|,
literal|"spade"
block|}
block|,
block|{
literal|0047
block|,
literal|"suchthat"
block|}
block|,
block|{
literal|0345
block|,
literal|"summation"
block|}
block|,
block|{
literal|0164
block|,
literal|"tau"
block|}
block|,
block|{
literal|0134
block|,
literal|"therefore"
block|}
block|,
block|{
literal|0161
block|,
literal|"theta"
block|}
block|,
block|{
literal|0112
block|,
literal|"theta1"
block|}
block|,
block|{
literal|0063
block|,
literal|"three"
block|}
block|,
block|{
literal|0344
block|,
literal|"trademarksans"
block|}
block|,
block|{
literal|0324
block|,
literal|"trademarkserif"
block|}
block|,
block|{
literal|0062
block|,
literal|"two"
block|}
block|,
block|{
literal|0137
block|,
literal|"underscore"
block|}
block|,
block|{
literal|0310
block|,
literal|"union"
block|}
block|,
block|{
literal|0042
block|,
literal|"universal"
block|}
block|,
block|{
literal|0165
block|,
literal|"upsilon"
block|}
block|,
block|{
literal|0303
block|,
literal|"weierstrass"
block|}
block|,
block|{
literal|0170
block|,
literal|"xi"
block|}
block|,
block|{
literal|0060
block|,
literal|"zero"
block|}
block|,
block|{
literal|0172
block|,
literal|"zeta"
block|}
block|}
decl_stmt|;
comment|/**      * Singleton instance of this class.      */
specifier|public
specifier|static
specifier|final
name|SymbolEncoding
name|INSTANCE
init|=
operator|new
name|SymbolEncoding
argument_list|()
decl_stmt|;
comment|/**      * Constructor.      */
specifier|public
name|SymbolEncoding
parameter_list|()
block|{
for|for
control|(
name|Object
index|[]
name|encodingEntry
range|:
name|SYMBOL_ENCODING_TABLE
control|)
block|{
name|add
argument_list|(
operator|(
name|Integer
operator|)
name|encodingEntry
index|[
name|CHAR_CODE
index|]
argument_list|,
name|encodingEntry
index|[
name|CHAR_NAME
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|COSBase
name|getCOSObject
parameter_list|()
block|{
return|return
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"SymbolEncoding"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getEncodingName
parameter_list|()
block|{
return|return
literal|"SymbolEncoding"
return|;
block|}
block|}
end_class

end_unit

