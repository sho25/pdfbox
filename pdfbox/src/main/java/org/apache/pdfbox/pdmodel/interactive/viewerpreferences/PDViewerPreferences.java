begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|viewerpreferences
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|COSObjectable
import|;
end_import

begin_comment
comment|/**  * This is the document viewing preferences.  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.3 $  */
end_comment

begin_class
specifier|public
class|class
name|PDViewerPreferences
implements|implements
name|COSObjectable
block|{
comment|/**      * From PDF Reference: "Neither document outline nor thumbnail images visible".      *       * @deprecated use {@link NON_FULL_SCREEN_PAGE_MODE} instead      */
specifier|public
specifier|static
specifier|final
name|String
name|NON_FULL_SCREEN_PAGE_MODE_USE_NONE
init|=
literal|"UseNone"
decl_stmt|;
comment|/**      * From PDF Reference: "Document outline visible".      *       * @deprecated use {@link NON_FULL_SCREEN_PAGE_MODE} instead      */
specifier|public
specifier|static
specifier|final
name|String
name|NON_FULL_SCREEN_PAGE_MODE_USE_OUTLINES
init|=
literal|"UseOutlines"
decl_stmt|;
comment|/**      * From PDF Reference: "Thumbnail images visible".      *       * @deprecated use {@link NON_FULL_SCREEN_PAGE_MODE} instead      */
specifier|public
specifier|static
specifier|final
name|String
name|NON_FULL_SCREEN_PAGE_MODE_USE_THUMBS
init|=
literal|"UseThumbs"
decl_stmt|;
comment|/**      * From PDF Reference: "Optional content group panel visible".      *       * @deprecated use {@link NON_FULL_SCREEN_PAGE_MODE} instead      */
specifier|public
specifier|static
specifier|final
name|String
name|NON_FULL_SCREEN_PAGE_MODE_USE_OPTIONAL_CONTENT
init|=
literal|"UseOC"
decl_stmt|;
comment|/**      * Enumeration containing all valid values for NonFullScreenPageMode.      */
specifier|public
specifier|static
enum|enum
name|NON_FULL_SCREEN_PAGE_MODE
block|{
comment|/**          *  From PDF Reference: "Neither document outline nor thumbnail images visible".          */
name|UseNone
block|,
comment|/**          * From PDF Reference: "Document outline visible".          */
name|UseOutlines
block|,
comment|/**          * From PDF Reference: "Thumbnail images visible".          */
name|UseThumbs
block|,
comment|/**          * From PDF Reference: "Optional content group panel visible".          */
name|UseOC
block|}
comment|/**      * Reading direction.      *       * @deprecated use {@link READING_DIRECTION} instead      */
specifier|public
specifier|static
specifier|final
name|String
name|READING_DIRECTION_L2R
init|=
literal|"L2R"
decl_stmt|;
comment|/**      * Reading direction.      *       * @deprecated use {@link READING_DIRECTION} instead      */
specifier|public
specifier|static
specifier|final
name|String
name|READING_DIRECTION_R2L
init|=
literal|"R2L"
decl_stmt|;
comment|/**      * Enumeration containing all valid values for ReadingDirection.      */
specifier|public
specifier|static
enum|enum
name|READING_DIRECTION
block|{
comment|/**          * left to right.          */
name|L2R
block|,
comment|/**          * right to left.          */
name|R2L
block|}
comment|/**      * Boundary constant.      *       * @deprecated use {@link BOUNDARY} instead      */
specifier|public
specifier|static
specifier|final
name|String
name|BOUNDARY_MEDIA_BOX
init|=
literal|"MediaBox"
decl_stmt|;
comment|/**      * Boundary constant.      *       * @deprecated use {@link BOUNDARY} instead      */
specifier|public
specifier|static
specifier|final
name|String
name|BOUNDARY_CROP_BOX
init|=
literal|"CropBox"
decl_stmt|;
comment|/**      * Boundary constant.      *       * @deprecated use {@link BOUNDARY} instead      */
specifier|public
specifier|static
specifier|final
name|String
name|BOUNDARY_BLEED_BOX
init|=
literal|"BleedBox"
decl_stmt|;
comment|/**      * Boundary constant.      *       * @deprecated use {@link BOUNDARY} instead      */
specifier|public
specifier|static
specifier|final
name|String
name|BOUNDARY_TRIM_BOX
init|=
literal|"TrimBox"
decl_stmt|;
comment|/**      * Boundary constant.      *       * @deprecated use {@link BOUNDARY} instead      */
specifier|public
specifier|static
specifier|final
name|String
name|BOUNDARY_ART_BOX
init|=
literal|"ArtBox"
decl_stmt|;
comment|/**      * Enumeration containing all valid values for boundaries.      */
specifier|public
specifier|static
enum|enum
name|BOUNDARY
block|{
comment|/**          * use media box as boundary.          */
name|MediaBox
block|,
comment|/**          * use crop box as boundary.          */
name|CropBox
block|,
comment|/**          * use bleed box as boundary.          */
name|BleedBox
block|,
comment|/**          * use trim box as boundary.          */
name|TrimBox
block|,
comment|/**          * use art box as boundary.          */
name|ArtBox
block|}
comment|/**      * Enumeration containing all valid values for duplex.      */
specifier|public
specifier|static
enum|enum
name|DUPLEX
block|{
comment|/**          * simplex printing.          */
name|Simplex
block|,
comment|/**          * duplex printing, flip at short edge.          */
name|DuplexFlipShortEdge
block|,
comment|/**          * duplex printing, flip at long edge.          */
name|DuplexFlipLongEdge
block|}
comment|/**      * Enumeration containing all valid values for printscaling.      */
specifier|public
specifier|static
enum|enum
name|PRINT_SCALING
block|{
comment|/**          * no scaling.          */
name|None
block|,
comment|/**          * use app default.          */
name|AppDefault
block|}
specifier|private
name|COSDictionary
name|prefs
decl_stmt|;
comment|/**      * Constructor that is used for a preexisting dictionary.      *      * @param dic The underlying dictionary.      */
specifier|public
name|PDViewerPreferences
parameter_list|(
name|COSDictionary
name|dic
parameter_list|)
block|{
name|prefs
operator|=
name|dic
expr_stmt|;
block|}
comment|/**      * This will get the underlying dictionary that this object wraps.      *      * @return The underlying info dictionary.      */
specifier|public
name|COSDictionary
name|getDictionary
parameter_list|()
block|{
return|return
name|prefs
return|;
block|}
comment|/**      * Convert this standard java object to a COS object.      *      * @return The cos object that matches this Java object.      */
specifier|public
name|COSBase
name|getCOSObject
parameter_list|()
block|{
return|return
name|prefs
return|;
block|}
comment|/**      * Get the toolbar preference.      *      * @return the toolbar preference.      */
specifier|public
name|boolean
name|hideToolbar
parameter_list|()
block|{
return|return
name|prefs
operator|.
name|getBoolean
argument_list|(
name|COSName
operator|.
name|HIDE_TOOLBAR
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Set the toolbar preference.      *      * @param value Set the toolbar preference.      */
specifier|public
name|void
name|setHideToolbar
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|prefs
operator|.
name|setBoolean
argument_list|(
name|COSName
operator|.
name|HIDE_TOOLBAR
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the menubar preference.      *      * @return the menubar preference.      */
specifier|public
name|boolean
name|hideMenubar
parameter_list|()
block|{
return|return
name|prefs
operator|.
name|getBoolean
argument_list|(
name|COSName
operator|.
name|HIDE_MENUBAR
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Set the menubar preference.      *      * @param value Set the menubar preference.      */
specifier|public
name|void
name|setHideMenubar
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|prefs
operator|.
name|setBoolean
argument_list|(
name|COSName
operator|.
name|HIDE_MENUBAR
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the window UI preference.      *      * @return the window UI preference.      */
specifier|public
name|boolean
name|hideWindowUI
parameter_list|()
block|{
return|return
name|prefs
operator|.
name|getBoolean
argument_list|(
name|COSName
operator|.
name|HIDE_WINDOWUI
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Set the window UI preference.      *      * @param value Set the window UI preference.      */
specifier|public
name|void
name|setHideWindowUI
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|prefs
operator|.
name|setBoolean
argument_list|(
name|COSName
operator|.
name|HIDE_WINDOWUI
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the fit window preference.      *      * @return the fit window preference.      */
specifier|public
name|boolean
name|fitWindow
parameter_list|()
block|{
return|return
name|prefs
operator|.
name|getBoolean
argument_list|(
name|COSName
operator|.
name|FIT_WINDOW
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Set the fit window preference.      *      * @param value Set the fit window preference.      */
specifier|public
name|void
name|setFitWindow
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|prefs
operator|.
name|setBoolean
argument_list|(
name|COSName
operator|.
name|FIT_WINDOW
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the center window preference.      *      * @return the center window preference.      */
specifier|public
name|boolean
name|centerWindow
parameter_list|()
block|{
return|return
name|prefs
operator|.
name|getBoolean
argument_list|(
name|COSName
operator|.
name|CENTER_WINDOW
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Set the center window preference.      *      * @param value Set the center window preference.      */
specifier|public
name|void
name|setCenterWindow
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|prefs
operator|.
name|setBoolean
argument_list|(
name|COSName
operator|.
name|CENTER_WINDOW
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the display doc title preference.      *      * @return the display doc title preference.      */
specifier|public
name|boolean
name|displayDocTitle
parameter_list|()
block|{
return|return
name|prefs
operator|.
name|getBoolean
argument_list|(
name|COSName
operator|.
name|DISPLAY_DOC_TITLE
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Set the display doc title preference.      *      * @param value Set the display doc title preference.      */
specifier|public
name|void
name|setDisplayDocTitle
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|prefs
operator|.
name|setBoolean
argument_list|(
name|COSName
operator|.
name|DISPLAY_DOC_TITLE
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the non full screen page mode preference.      *      * @return the non full screen page mode preference.      */
specifier|public
name|String
name|getNonFullScreenPageMode
parameter_list|()
block|{
return|return
name|prefs
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|NON_FULL_SCREEN_PAGE_MODE
argument_list|,
name|NON_FULL_SCREEN_PAGE_MODE
operator|.
name|UseNone
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Set the non full screen page mode preference.      *      * @param value Set the non full screen page mode preference.      */
specifier|public
name|void
name|setNonFullScreenPageMode
parameter_list|(
name|NON_FULL_SCREEN_PAGE_MODE
name|value
parameter_list|)
block|{
name|prefs
operator|.
name|setName
argument_list|(
name|COSName
operator|.
name|NON_FULL_SCREEN_PAGE_MODE
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the non full screen page mode preference.      *      * @param value Set the non full screen page mode preference.      *       * @deprecated      */
specifier|public
name|void
name|setNonFullScreenPageMode
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|prefs
operator|.
name|setName
argument_list|(
name|COSName
operator|.
name|NON_FULL_SCREEN_PAGE_MODE
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the reading direction preference.      *      * @return the reading direction preference.      */
specifier|public
name|String
name|getReadingDirection
parameter_list|()
block|{
return|return
name|prefs
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|DIRECTION
argument_list|,
name|READING_DIRECTION
operator|.
name|L2R
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Set the reading direction preference.      *      * @param value Set the reading direction preference.      */
specifier|public
name|void
name|setReadingDirection
parameter_list|(
name|READING_DIRECTION
name|value
parameter_list|)
block|{
name|prefs
operator|.
name|setName
argument_list|(
name|COSName
operator|.
name|DIRECTION
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the reading direction preference.      *      * @param value Set the reading direction preference.      *       * @deprecated      */
specifier|public
name|void
name|setReadingDirection
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|prefs
operator|.
name|setName
argument_list|(
name|COSName
operator|.
name|DIRECTION
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the ViewArea preference.  See BOUNDARY enumeration.      *      * @return the ViewArea preference.      */
specifier|public
name|String
name|getViewArea
parameter_list|()
block|{
return|return
name|prefs
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|VIEW_AREA
argument_list|,
name|BOUNDARY
operator|.
name|CropBox
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Set the ViewArea preference.  See BOUNDARY_XXX constants.      *      * @param value Set the ViewArea preference.      *       * @deprecated      */
specifier|public
name|void
name|setViewArea
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|prefs
operator|.
name|setName
argument_list|(
name|COSName
operator|.
name|VIEW_AREA
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the ViewArea preference.  See BOUNDARY enumeration.      *      * @param value Set the ViewArea preference.      */
specifier|public
name|void
name|setViewArea
parameter_list|(
name|BOUNDARY
name|value
parameter_list|)
block|{
name|prefs
operator|.
name|setName
argument_list|(
name|COSName
operator|.
name|VIEW_AREA
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the ViewClip preference.  See BOUNDARY enumeration.      *      * @return the ViewClip preference.      */
specifier|public
name|String
name|getViewClip
parameter_list|()
block|{
return|return
name|prefs
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|VIEW_CLIP
argument_list|,
name|BOUNDARY
operator|.
name|CropBox
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Set the ViewClip preference.  See BOUNDARY enumeration.      *      * @param value Set the ViewClip preference.      */
specifier|public
name|void
name|setViewClip
parameter_list|(
name|BOUNDARY
name|value
parameter_list|)
block|{
name|prefs
operator|.
name|setName
argument_list|(
name|COSName
operator|.
name|VIEW_CLIP
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the ViewClip preference.  See BOUNDARY_XXX constants.      *      * @param value Set the ViewClip preference.      *       * @deprecated      */
specifier|public
name|void
name|setViewClip
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|prefs
operator|.
name|setName
argument_list|(
name|COSName
operator|.
name|VIEW_CLIP
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the PrintArea preference.  See BOUNDARY enumeration.      *      * @return the PrintArea preference.      */
specifier|public
name|String
name|getPrintArea
parameter_list|()
block|{
return|return
name|prefs
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|PRINT_AREA
argument_list|,
name|BOUNDARY
operator|.
name|CropBox
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Set the PrintArea preference.  See BOUNDARY_XXX constants.      *      * @param value Set the PrintArea preference.      *       * @deprecated      */
specifier|public
name|void
name|setPrintArea
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|prefs
operator|.
name|setName
argument_list|(
name|COSName
operator|.
name|PRINT_AREA
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the PrintArea preference.  See BOUNDARY enumeration.      *      * @param value Set the PrintArea preference.      */
specifier|public
name|void
name|setPrintArea
parameter_list|(
name|BOUNDARY
name|value
parameter_list|)
block|{
name|prefs
operator|.
name|setName
argument_list|(
name|COSName
operator|.
name|PRINT_AREA
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the PrintClip preference.  See BOUNDARY enumeration.      *      * @return the PrintClip preference.      */
specifier|public
name|String
name|getPrintClip
parameter_list|()
block|{
return|return
name|prefs
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|PRINT_CLIP
argument_list|,
name|BOUNDARY
operator|.
name|CropBox
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Set the PrintClip preference.  See BOUNDARY_XXX constants.      *      * @param value Set the PrintClip preference.      *       * @deprecated      */
specifier|public
name|void
name|setPrintClip
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|prefs
operator|.
name|setName
argument_list|(
name|COSName
operator|.
name|PRINT_CLIP
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the PrintClip preference.  See BOUNDARY enumeration.      *      * @param value Set the PrintClip preference.      */
specifier|public
name|void
name|setPrintClip
parameter_list|(
name|BOUNDARY
name|value
parameter_list|)
block|{
name|prefs
operator|.
name|setName
argument_list|(
name|COSName
operator|.
name|PRINT_CLIP
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the Duplex preference.  See DUPLEX enumeration.      *      * @return the Duplex preference.      */
specifier|public
name|String
name|getDuplex
parameter_list|()
block|{
return|return
name|prefs
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|DUPLEX
argument_list|)
return|;
block|}
comment|/**      * Set the Duplex preference.  See DUPLEX enumeration.      *      * @param value Set the Duplex preference.      */
specifier|public
name|void
name|setDuplex
parameter_list|(
name|DUPLEX
name|value
parameter_list|)
block|{
name|prefs
operator|.
name|setName
argument_list|(
name|COSName
operator|.
name|DUPLEX
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the PrintScaling preference.  See PRINT_SCALING enumeration.      *      * @return the PrintScaling preference.      */
specifier|public
name|String
name|getPrintScaling
parameter_list|()
block|{
return|return
name|prefs
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|PRINT_SCALING
argument_list|,
name|PRINT_SCALING
operator|.
name|AppDefault
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Set the PrintScaling preference.  See PRINT_SCALING enumeration.      *      * @param value Set the PrintScaling preference.      */
specifier|public
name|void
name|setPrintScaling
parameter_list|(
name|PRINT_SCALING
name|value
parameter_list|)
block|{
name|prefs
operator|.
name|setName
argument_list|(
name|COSName
operator|.
name|PRINT_SCALING
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

