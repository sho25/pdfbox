begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2018 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|handlers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|AffineTransform
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|GeneralPath
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|PathIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDAppearanceContentStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDRectangle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDType1Font
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|blend
operator|.
name|BlendMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDColor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|state
operator|.
name|PDExtendedGraphicsState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAnnotationText
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|Matrix
import|;
end_import

begin_comment
comment|/**  *  * @author Tilman Hausherr  */
end_comment

begin_class
specifier|public
class|class
name|PDTextAppearanceHandler
extends|extends
name|PDAbstractAppearanceHandler
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|PDTextAppearanceHandler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|SUPPORTED_NAMES
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
static|static
block|{
name|SUPPORTED_NAMES
operator|.
name|add
argument_list|(
name|PDAnnotationText
operator|.
name|NAME_NOTE
argument_list|)
expr_stmt|;
name|SUPPORTED_NAMES
operator|.
name|add
argument_list|(
name|PDAnnotationText
operator|.
name|NAME_INSERT
argument_list|)
expr_stmt|;
name|SUPPORTED_NAMES
operator|.
name|add
argument_list|(
name|PDAnnotationText
operator|.
name|NAME_CROSS
argument_list|)
expr_stmt|;
name|SUPPORTED_NAMES
operator|.
name|add
argument_list|(
name|PDAnnotationText
operator|.
name|NAME_HELP
argument_list|)
expr_stmt|;
name|SUPPORTED_NAMES
operator|.
name|add
argument_list|(
name|PDAnnotationText
operator|.
name|NAME_CIRCLE
argument_list|)
expr_stmt|;
name|SUPPORTED_NAMES
operator|.
name|add
argument_list|(
name|PDAnnotationText
operator|.
name|NAME_PARAGRAPH
argument_list|)
expr_stmt|;
name|SUPPORTED_NAMES
operator|.
name|add
argument_list|(
name|PDAnnotationText
operator|.
name|NAME_NEW_PARAGRAPH
argument_list|)
expr_stmt|;
name|SUPPORTED_NAMES
operator|.
name|add
argument_list|(
name|PDAnnotationText
operator|.
name|NAME_CHECK
argument_list|)
expr_stmt|;
name|SUPPORTED_NAMES
operator|.
name|add
argument_list|(
name|PDAnnotationText
operator|.
name|NAME_STAR
argument_list|)
expr_stmt|;
name|SUPPORTED_NAMES
operator|.
name|add
argument_list|(
name|PDAnnotationText
operator|.
name|NAME_RIGHT_ARROW
argument_list|)
expr_stmt|;
name|SUPPORTED_NAMES
operator|.
name|add
argument_list|(
name|PDAnnotationText
operator|.
name|NAME_RIGHT_POINTER
argument_list|)
expr_stmt|;
name|SUPPORTED_NAMES
operator|.
name|add
argument_list|(
name|PDAnnotationText
operator|.
name|NAME_CROSS_HAIRS
argument_list|)
expr_stmt|;
name|SUPPORTED_NAMES
operator|.
name|add
argument_list|(
name|PDAnnotationText
operator|.
name|NAME_UP_ARROW
argument_list|)
expr_stmt|;
name|SUPPORTED_NAMES
operator|.
name|add
argument_list|(
name|PDAnnotationText
operator|.
name|NAME_UP_LEFT_ARROW
argument_list|)
expr_stmt|;
name|SUPPORTED_NAMES
operator|.
name|add
argument_list|(
name|PDAnnotationText
operator|.
name|NAME_COMMENT
argument_list|)
expr_stmt|;
name|SUPPORTED_NAMES
operator|.
name|add
argument_list|(
name|PDAnnotationText
operator|.
name|NAME_KEY
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PDTextAppearanceHandler
parameter_list|(
name|PDAnnotation
name|annotation
parameter_list|)
block|{
name|super
argument_list|(
name|annotation
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PDTextAppearanceHandler
parameter_list|(
name|PDAnnotation
name|annotation
parameter_list|,
name|PDDocument
name|document
parameter_list|)
block|{
name|super
argument_list|(
name|annotation
argument_list|,
name|document
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|generateAppearanceStreams
parameter_list|()
block|{
name|generateNormalAppearance
argument_list|()
expr_stmt|;
name|generateRolloverAppearance
argument_list|()
expr_stmt|;
name|generateDownAppearance
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|generateNormalAppearance
parameter_list|()
block|{
name|PDAnnotationText
name|annotation
init|=
operator|(
name|PDAnnotationText
operator|)
name|getAnnotation
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|SUPPORTED_NAMES
operator|.
name|contains
argument_list|(
name|annotation
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
try|try
init|(
name|PDAppearanceContentStream
name|contentStream
init|=
name|getNormalAppearanceAsContentStream
argument_list|()
init|)
block|{
name|PDColor
name|bgColor
init|=
name|getColor
argument_list|()
decl_stmt|;
if|if
condition|(
name|bgColor
operator|==
literal|null
condition|)
block|{
comment|// White is used by Adobe when /C entry is missing
name|contentStream
operator|.
name|setNonStrokingColor
argument_list|(
literal|1f
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|contentStream
operator|.
name|setNonStrokingColor
argument_list|(
name|bgColor
argument_list|)
expr_stmt|;
block|}
comment|// stroking color is always black which is the PDF default
name|setOpacity
argument_list|(
name|contentStream
argument_list|,
name|annotation
operator|.
name|getConstantOpacity
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|annotation
operator|.
name|getName
argument_list|()
condition|)
block|{
case|case
name|PDAnnotationText
operator|.
name|NAME_NOTE
case|:
name|drawNote
argument_list|(
name|annotation
argument_list|,
name|contentStream
argument_list|)
expr_stmt|;
break|break;
case|case
name|PDAnnotationText
operator|.
name|NAME_CROSS
case|:
name|drawCross
argument_list|(
name|annotation
argument_list|,
name|contentStream
argument_list|)
expr_stmt|;
break|break;
case|case
name|PDAnnotationText
operator|.
name|NAME_CIRCLE
case|:
name|drawCircles
argument_list|(
name|annotation
argument_list|,
name|contentStream
argument_list|)
expr_stmt|;
break|break;
case|case
name|PDAnnotationText
operator|.
name|NAME_INSERT
case|:
name|drawInsert
argument_list|(
name|annotation
argument_list|,
name|contentStream
argument_list|)
expr_stmt|;
break|break;
case|case
name|PDAnnotationText
operator|.
name|NAME_HELP
case|:
name|drawHelp
argument_list|(
name|annotation
argument_list|,
name|contentStream
argument_list|)
expr_stmt|;
break|break;
case|case
name|PDAnnotationText
operator|.
name|NAME_PARAGRAPH
case|:
name|drawParagraph
argument_list|(
name|annotation
argument_list|,
name|contentStream
argument_list|)
expr_stmt|;
break|break;
case|case
name|PDAnnotationText
operator|.
name|NAME_NEW_PARAGRAPH
case|:
name|drawNewParagraph
argument_list|(
name|annotation
argument_list|,
name|contentStream
argument_list|)
expr_stmt|;
break|break;
case|case
name|PDAnnotationText
operator|.
name|NAME_STAR
case|:
name|drawStar
argument_list|(
name|annotation
argument_list|,
name|contentStream
argument_list|)
expr_stmt|;
break|break;
case|case
name|PDAnnotationText
operator|.
name|NAME_CHECK
case|:
name|drawCheck
argument_list|(
name|annotation
argument_list|,
name|contentStream
argument_list|)
expr_stmt|;
break|break;
case|case
name|PDAnnotationText
operator|.
name|NAME_RIGHT_ARROW
case|:
name|drawRightArrow
argument_list|(
name|annotation
argument_list|,
name|contentStream
argument_list|)
expr_stmt|;
break|break;
case|case
name|PDAnnotationText
operator|.
name|NAME_RIGHT_POINTER
case|:
name|drawRightPointer
argument_list|(
name|annotation
argument_list|,
name|contentStream
argument_list|)
expr_stmt|;
break|break;
case|case
name|PDAnnotationText
operator|.
name|NAME_CROSS_HAIRS
case|:
name|drawCrossHairs
argument_list|(
name|annotation
argument_list|,
name|contentStream
argument_list|)
expr_stmt|;
break|break;
case|case
name|PDAnnotationText
operator|.
name|NAME_UP_ARROW
case|:
name|drawUpArrow
argument_list|(
name|annotation
argument_list|,
name|contentStream
argument_list|)
expr_stmt|;
break|break;
case|case
name|PDAnnotationText
operator|.
name|NAME_UP_LEFT_ARROW
case|:
name|drawUpLeftArrow
argument_list|(
name|annotation
argument_list|,
name|contentStream
argument_list|)
expr_stmt|;
break|break;
case|case
name|PDAnnotationText
operator|.
name|NAME_COMMENT
case|:
name|drawComment
argument_list|(
name|annotation
argument_list|,
name|contentStream
argument_list|)
expr_stmt|;
break|break;
case|case
name|PDAnnotationText
operator|.
name|NAME_KEY
case|:
name|drawKey
argument_list|(
name|annotation
argument_list|,
name|contentStream
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|PDRectangle
name|adjustRectAndBBox
parameter_list|(
name|PDAnnotationText
name|annotation
parameter_list|,
name|float
name|width
parameter_list|,
name|float
name|height
parameter_list|)
block|{
comment|// For /Note (other types have different values):
comment|// Adobe takes the left upper bound as anchor, and adjusts the rectangle to 18 x 20.
comment|// Observed with files 007071.pdf, 038785.pdf, 038787.pdf,
comment|// but not with 047745.pdf p133 and 084374.pdf p48, both have the NoZoom flag.
comment|// there the BBox is also set to fixed values, but the rectangle is left untouched.
comment|// When no flags are there, Adobe sets /F 24 = NoZoom NoRotate.
name|PDRectangle
name|rect
init|=
name|getRectangle
argument_list|()
decl_stmt|;
name|PDRectangle
name|bbox
decl_stmt|;
if|if
condition|(
operator|!
name|annotation
operator|.
name|isNoZoom
argument_list|()
condition|)
block|{
name|rect
operator|.
name|setUpperRightX
argument_list|(
name|rect
operator|.
name|getLowerLeftX
argument_list|()
operator|+
name|width
argument_list|)
expr_stmt|;
name|rect
operator|.
name|setLowerLeftY
argument_list|(
name|rect
operator|.
name|getUpperRightY
argument_list|()
operator|-
name|height
argument_list|)
expr_stmt|;
name|annotation
operator|.
name|setRectangle
argument_list|(
name|rect
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|annotation
operator|.
name|getCOSObject
argument_list|()
operator|.
name|containsKey
argument_list|(
name|COSName
operator|.
name|F
argument_list|)
condition|)
block|{
comment|// We set these flags because Adobe does so, but PDFBox doesn't support them when rendering.
name|annotation
operator|.
name|setNoRotate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|annotation
operator|.
name|setNoZoom
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|bbox
operator|=
operator|new
name|PDRectangle
argument_list|(
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|annotation
operator|.
name|getNormalAppearanceStream
argument_list|()
operator|.
name|setBBox
argument_list|(
name|bbox
argument_list|)
expr_stmt|;
return|return
name|bbox
return|;
block|}
specifier|private
name|void
name|drawNote
parameter_list|(
name|PDAnnotationText
name|annotation
parameter_list|,
specifier|final
name|PDAppearanceContentStream
name|contentStream
parameter_list|)
throws|throws
name|IOException
block|{
name|PDRectangle
name|bbox
init|=
name|adjustRectAndBBox
argument_list|(
name|annotation
argument_list|,
literal|18
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|contentStream
operator|.
name|setMiterLimit
argument_list|(
literal|4
argument_list|)
expr_stmt|;
comment|// get round edge the easy way. Adobe uses 4 lines with 4 arcs of radius 0.785 which is bigger.
name|contentStream
operator|.
name|setLineJoinStyle
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setLineCapStyle
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setLineWidth
argument_list|(
literal|0.61f
argument_list|)
expr_stmt|;
comment|// value from Adobe
name|contentStream
operator|.
name|addRect
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
name|bbox
operator|.
name|getWidth
argument_list|()
operator|-
literal|2
argument_list|,
name|bbox
operator|.
name|getHeight
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|moveTo
argument_list|(
name|bbox
operator|.
name|getWidth
argument_list|()
operator|/
literal|4
argument_list|,
name|bbox
operator|.
name|getHeight
argument_list|()
operator|/
literal|7
operator|*
literal|2
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|lineTo
argument_list|(
name|bbox
operator|.
name|getWidth
argument_list|()
operator|*
literal|3
operator|/
literal|4
operator|-
literal|1
argument_list|,
name|bbox
operator|.
name|getHeight
argument_list|()
operator|/
literal|7
operator|*
literal|2
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|moveTo
argument_list|(
name|bbox
operator|.
name|getWidth
argument_list|()
operator|/
literal|4
argument_list|,
name|bbox
operator|.
name|getHeight
argument_list|()
operator|/
literal|7
operator|*
literal|3
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|lineTo
argument_list|(
name|bbox
operator|.
name|getWidth
argument_list|()
operator|*
literal|3
operator|/
literal|4
operator|-
literal|1
argument_list|,
name|bbox
operator|.
name|getHeight
argument_list|()
operator|/
literal|7
operator|*
literal|3
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|moveTo
argument_list|(
name|bbox
operator|.
name|getWidth
argument_list|()
operator|/
literal|4
argument_list|,
name|bbox
operator|.
name|getHeight
argument_list|()
operator|/
literal|7
operator|*
literal|4
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|lineTo
argument_list|(
name|bbox
operator|.
name|getWidth
argument_list|()
operator|*
literal|3
operator|/
literal|4
operator|-
literal|1
argument_list|,
name|bbox
operator|.
name|getHeight
argument_list|()
operator|/
literal|7
operator|*
literal|4
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|moveTo
argument_list|(
name|bbox
operator|.
name|getWidth
argument_list|()
operator|/
literal|4
argument_list|,
name|bbox
operator|.
name|getHeight
argument_list|()
operator|/
literal|7
operator|*
literal|5
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|lineTo
argument_list|(
name|bbox
operator|.
name|getWidth
argument_list|()
operator|*
literal|3
operator|/
literal|4
operator|-
literal|1
argument_list|,
name|bbox
operator|.
name|getHeight
argument_list|()
operator|/
literal|7
operator|*
literal|5
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|fillAndStroke
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|drawCircles
parameter_list|(
name|PDAnnotationText
name|annotation
parameter_list|,
specifier|final
name|PDAppearanceContentStream
name|contentStream
parameter_list|)
throws|throws
name|IOException
block|{
name|PDRectangle
name|bbox
init|=
name|adjustRectAndBBox
argument_list|(
name|annotation
argument_list|,
literal|20
argument_list|,
literal|20
argument_list|)
decl_stmt|;
comment|// strategy used by Adobe:
comment|// 1) add small circle in white using /ca /CA 0.6 and width 1
comment|// 2) fill
comment|// 3) add small circle in one direction
comment|// 4) add large circle in other direction
comment|// 5) stroke + fill
comment|// with square width 20 small r = 6.36, large r = 9.756
name|float
name|smallR
init|=
literal|6.36f
decl_stmt|;
name|float
name|largeR
init|=
literal|9.756f
decl_stmt|;
name|contentStream
operator|.
name|setMiterLimit
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setLineJoinStyle
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setLineCapStyle
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|saveGraphicsState
argument_list|()
expr_stmt|;
name|contentStream
operator|.
name|setLineWidth
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|PDExtendedGraphicsState
name|gs
init|=
operator|new
name|PDExtendedGraphicsState
argument_list|()
decl_stmt|;
name|gs
operator|.
name|setAlphaSourceFlag
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|gs
operator|.
name|setStrokingAlphaConstant
argument_list|(
literal|0.6f
argument_list|)
expr_stmt|;
name|gs
operator|.
name|setNonStrokingAlphaConstant
argument_list|(
literal|0.6f
argument_list|)
expr_stmt|;
name|gs
operator|.
name|setBlendMode
argument_list|(
name|BlendMode
operator|.
name|NORMAL
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setGraphicsStateParameters
argument_list|(
name|gs
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setNonStrokingColor
argument_list|(
literal|1f
argument_list|)
expr_stmt|;
name|drawCircle
argument_list|(
name|contentStream
argument_list|,
name|bbox
operator|.
name|getWidth
argument_list|()
operator|/
literal|2
argument_list|,
name|bbox
operator|.
name|getHeight
argument_list|()
operator|/
literal|2
argument_list|,
name|smallR
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|fill
argument_list|()
expr_stmt|;
name|contentStream
operator|.
name|restoreGraphicsState
argument_list|()
expr_stmt|;
name|contentStream
operator|.
name|setLineWidth
argument_list|(
literal|0.59f
argument_list|)
expr_stmt|;
comment|// value from Adobe
name|drawCircle
argument_list|(
name|contentStream
argument_list|,
name|bbox
operator|.
name|getWidth
argument_list|()
operator|/
literal|2
argument_list|,
name|bbox
operator|.
name|getHeight
argument_list|()
operator|/
literal|2
argument_list|,
name|smallR
argument_list|)
expr_stmt|;
name|drawCircle2
argument_list|(
name|contentStream
argument_list|,
name|bbox
operator|.
name|getWidth
argument_list|()
operator|/
literal|2
argument_list|,
name|bbox
operator|.
name|getHeight
argument_list|()
operator|/
literal|2
argument_list|,
name|largeR
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|fillAndStroke
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|drawInsert
parameter_list|(
name|PDAnnotationText
name|annotation
parameter_list|,
specifier|final
name|PDAppearanceContentStream
name|contentStream
parameter_list|)
throws|throws
name|IOException
block|{
name|PDRectangle
name|bbox
init|=
name|adjustRectAndBBox
argument_list|(
name|annotation
argument_list|,
literal|17
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|contentStream
operator|.
name|setMiterLimit
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setLineJoinStyle
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setLineCapStyle
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setLineWidth
argument_list|(
literal|0.59f
argument_list|)
expr_stmt|;
comment|// value from Adobe
name|contentStream
operator|.
name|moveTo
argument_list|(
name|bbox
operator|.
name|getWidth
argument_list|()
operator|/
literal|2
operator|-
literal|1
argument_list|,
name|bbox
operator|.
name|getHeight
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|lineTo
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|lineTo
argument_list|(
name|bbox
operator|.
name|getWidth
argument_list|()
operator|-
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|closeAndFillAndStroke
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|drawCross
parameter_list|(
name|PDAnnotationText
name|annotation
parameter_list|,
specifier|final
name|PDAppearanceContentStream
name|contentStream
parameter_list|)
throws|throws
name|IOException
block|{
name|PDRectangle
name|bbox
init|=
name|adjustRectAndBBox
argument_list|(
name|annotation
argument_list|,
literal|19
argument_list|,
literal|19
argument_list|)
decl_stmt|;
comment|// should be a square, but who knows...
name|float
name|min
init|=
name|Math
operator|.
name|min
argument_list|(
name|bbox
operator|.
name|getWidth
argument_list|()
argument_list|,
name|bbox
operator|.
name|getHeight
argument_list|()
argument_list|)
decl_stmt|;
comment|// small = offset nearest bbox edge
comment|// large = offset second nearest bbox edge
name|float
name|small
init|=
name|min
operator|/
literal|10
decl_stmt|;
name|float
name|large
init|=
name|min
operator|/
literal|5
decl_stmt|;
name|contentStream
operator|.
name|setMiterLimit
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setLineJoinStyle
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setLineCapStyle
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setLineWidth
argument_list|(
literal|0.59f
argument_list|)
expr_stmt|;
comment|// value from Adobe
name|contentStream
operator|.
name|moveTo
argument_list|(
name|small
argument_list|,
name|large
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|lineTo
argument_list|(
name|large
argument_list|,
name|small
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|lineTo
argument_list|(
name|min
operator|/
literal|2
argument_list|,
name|min
operator|/
literal|2
operator|-
name|small
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|lineTo
argument_list|(
name|min
operator|-
name|large
argument_list|,
name|small
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|lineTo
argument_list|(
name|min
operator|-
name|small
argument_list|,
name|large
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|lineTo
argument_list|(
name|min
operator|/
literal|2
operator|+
name|small
argument_list|,
name|min
operator|/
literal|2
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|lineTo
argument_list|(
name|min
operator|-
name|small
argument_list|,
name|min
operator|-
name|large
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|lineTo
argument_list|(
name|min
operator|-
name|large
argument_list|,
name|min
operator|-
name|small
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|lineTo
argument_list|(
name|min
operator|/
literal|2
argument_list|,
name|min
operator|/
literal|2
operator|+
name|small
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|lineTo
argument_list|(
name|large
argument_list|,
name|min
operator|-
name|small
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|lineTo
argument_list|(
name|small
argument_list|,
name|min
operator|-
name|large
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|lineTo
argument_list|(
name|min
operator|/
literal|2
operator|-
name|small
argument_list|,
name|min
operator|/
literal|2
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|closeAndFillAndStroke
argument_list|()
expr_stmt|;
comment|// alternatively, this could also be drawn with Zapf Dingbats "a21"
comment|// see DrawStar()
block|}
specifier|private
name|void
name|drawHelp
parameter_list|(
name|PDAnnotationText
name|annotation
parameter_list|,
specifier|final
name|PDAppearanceContentStream
name|contentStream
parameter_list|)
throws|throws
name|IOException
block|{
name|PDRectangle
name|bbox
init|=
name|adjustRectAndBBox
argument_list|(
name|annotation
argument_list|,
literal|20
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|float
name|min
init|=
name|Math
operator|.
name|min
argument_list|(
name|bbox
operator|.
name|getWidth
argument_list|()
argument_list|,
name|bbox
operator|.
name|getHeight
argument_list|()
argument_list|)
decl_stmt|;
name|contentStream
operator|.
name|setMiterLimit
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setLineJoinStyle
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setLineCapStyle
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setLineWidth
argument_list|(
literal|0.59f
argument_list|)
expr_stmt|;
comment|// value from Adobe
comment|// Adobe first fills a white circle with CA ca 0.6, so do we
name|contentStream
operator|.
name|saveGraphicsState
argument_list|()
expr_stmt|;
name|contentStream
operator|.
name|setLineWidth
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|PDExtendedGraphicsState
name|gs
init|=
operator|new
name|PDExtendedGraphicsState
argument_list|()
decl_stmt|;
name|gs
operator|.
name|setAlphaSourceFlag
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|gs
operator|.
name|setStrokingAlphaConstant
argument_list|(
literal|0.6f
argument_list|)
expr_stmt|;
name|gs
operator|.
name|setNonStrokingAlphaConstant
argument_list|(
literal|0.6f
argument_list|)
expr_stmt|;
name|gs
operator|.
name|setBlendMode
argument_list|(
name|BlendMode
operator|.
name|NORMAL
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setGraphicsStateParameters
argument_list|(
name|gs
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setNonStrokingColor
argument_list|(
literal|1f
argument_list|)
expr_stmt|;
name|drawCircle2
argument_list|(
name|contentStream
argument_list|,
name|min
operator|/
literal|2
argument_list|,
name|min
operator|/
literal|2
argument_list|,
name|min
operator|/
literal|2
operator|-
literal|1
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|fill
argument_list|()
expr_stmt|;
name|contentStream
operator|.
name|restoreGraphicsState
argument_list|()
expr_stmt|;
name|contentStream
operator|.
name|saveGraphicsState
argument_list|()
expr_stmt|;
comment|// rescale so that "?" fits into circle and move "?" to circle center
comment|// values gathered by trial and error
name|contentStream
operator|.
name|transform
argument_list|(
name|Matrix
operator|.
name|getScaleInstance
argument_list|(
literal|0.001f
operator|*
name|min
operator|/
literal|2.25f
argument_list|,
literal|0.001f
operator|*
name|min
operator|/
literal|2.25f
argument_list|)
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|transform
argument_list|(
name|Matrix
operator|.
name|getTranslateInstance
argument_list|(
literal|500
argument_list|,
literal|375
argument_list|)
argument_list|)
expr_stmt|;
comment|// we get the shape of an Helvetica bold "?" and use that one.
comment|// Adobe uses a different font (which one?), or created the shape from scratch.
name|GeneralPath
name|path
init|=
name|PDType1Font
operator|.
name|HELVETICA_BOLD
operator|.
name|getPath
argument_list|(
literal|"question"
argument_list|)
decl_stmt|;
name|addPath
argument_list|(
name|contentStream
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|restoreGraphicsState
argument_list|()
expr_stmt|;
comment|// draw the outer circle counterclockwise to fill area between circle and "?"
name|drawCircle2
argument_list|(
name|contentStream
argument_list|,
name|min
operator|/
literal|2
argument_list|,
name|min
operator|/
literal|2
argument_list|,
name|min
operator|/
literal|2
operator|-
literal|1
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|fillAndStroke
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|drawParagraph
parameter_list|(
name|PDAnnotationText
name|annotation
parameter_list|,
specifier|final
name|PDAppearanceContentStream
name|contentStream
parameter_list|)
throws|throws
name|IOException
block|{
name|PDRectangle
name|bbox
init|=
name|adjustRectAndBBox
argument_list|(
name|annotation
argument_list|,
literal|20
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|float
name|min
init|=
name|Math
operator|.
name|min
argument_list|(
name|bbox
operator|.
name|getWidth
argument_list|()
argument_list|,
name|bbox
operator|.
name|getHeight
argument_list|()
argument_list|)
decl_stmt|;
name|contentStream
operator|.
name|setMiterLimit
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setLineJoinStyle
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setLineCapStyle
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setLineWidth
argument_list|(
literal|0.59f
argument_list|)
expr_stmt|;
comment|// value from Adobe
comment|// Adobe first fills a white circle with CA ca 0.6, so do we
name|contentStream
operator|.
name|saveGraphicsState
argument_list|()
expr_stmt|;
name|contentStream
operator|.
name|setLineWidth
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|PDExtendedGraphicsState
name|gs
init|=
operator|new
name|PDExtendedGraphicsState
argument_list|()
decl_stmt|;
name|gs
operator|.
name|setAlphaSourceFlag
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|gs
operator|.
name|setStrokingAlphaConstant
argument_list|(
literal|0.6f
argument_list|)
expr_stmt|;
name|gs
operator|.
name|setNonStrokingAlphaConstant
argument_list|(
literal|0.6f
argument_list|)
expr_stmt|;
name|gs
operator|.
name|setBlendMode
argument_list|(
name|BlendMode
operator|.
name|NORMAL
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setGraphicsStateParameters
argument_list|(
name|gs
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setNonStrokingColor
argument_list|(
literal|1f
argument_list|)
expr_stmt|;
name|drawCircle2
argument_list|(
name|contentStream
argument_list|,
name|min
operator|/
literal|2
argument_list|,
name|min
operator|/
literal|2
argument_list|,
name|min
operator|/
literal|2
operator|-
literal|1
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|fill
argument_list|()
expr_stmt|;
name|contentStream
operator|.
name|restoreGraphicsState
argument_list|()
expr_stmt|;
name|contentStream
operator|.
name|saveGraphicsState
argument_list|()
expr_stmt|;
comment|// rescale so that "?" fits into circle and move "?" to circle center
comment|// values gathered by trial and error
name|contentStream
operator|.
name|transform
argument_list|(
name|Matrix
operator|.
name|getScaleInstance
argument_list|(
literal|0.001f
operator|*
name|min
operator|/
literal|3
argument_list|,
literal|0.001f
operator|*
name|min
operator|/
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|transform
argument_list|(
name|Matrix
operator|.
name|getTranslateInstance
argument_list|(
literal|850
argument_list|,
literal|900
argument_list|)
argument_list|)
expr_stmt|;
comment|// we get the shape of an Helvetica "?" and use that one.
comment|// Adobe uses a different font (which one?), or created the shape from scratch.
name|GeneralPath
name|path
init|=
name|PDType1Font
operator|.
name|HELVETICA
operator|.
name|getPath
argument_list|(
literal|"paragraph"
argument_list|)
decl_stmt|;
name|addPath
argument_list|(
name|contentStream
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|restoreGraphicsState
argument_list|()
expr_stmt|;
name|contentStream
operator|.
name|fillAndStroke
argument_list|()
expr_stmt|;
name|drawCircle
argument_list|(
name|contentStream
argument_list|,
name|min
operator|/
literal|2
argument_list|,
name|min
operator|/
literal|2
argument_list|,
name|min
operator|/
literal|2
operator|-
literal|1
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|stroke
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|drawNewParagraph
parameter_list|(
name|PDAnnotationText
name|annotation
parameter_list|,
specifier|final
name|PDAppearanceContentStream
name|contentStream
parameter_list|)
throws|throws
name|IOException
block|{
name|adjustRectAndBBox
argument_list|(
name|annotation
argument_list|,
literal|13
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setMiterLimit
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setLineJoinStyle
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setLineCapStyle
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setLineWidth
argument_list|(
literal|0.59f
argument_list|)
expr_stmt|;
comment|// value from Adobe
comment|// small triangle (values from Adobe)
name|contentStream
operator|.
name|moveTo
argument_list|(
literal|6.4995f
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|lineTo
argument_list|(
literal|0.295f
argument_list|,
literal|7.287f
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|lineTo
argument_list|(
literal|12.705f
argument_list|,
literal|7.287f
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|closeAndFillAndStroke
argument_list|()
expr_stmt|;
comment|// rescale and translate so that "NP" fits below the triangle
comment|// values gathered by trial and error
name|contentStream
operator|.
name|transform
argument_list|(
name|Matrix
operator|.
name|getScaleInstance
argument_list|(
literal|0.001f
operator|*
literal|4
argument_list|,
literal|0.001f
operator|*
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|transform
argument_list|(
name|Matrix
operator|.
name|getTranslateInstance
argument_list|(
literal|200
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|addPath
argument_list|(
name|contentStream
argument_list|,
name|PDType1Font
operator|.
name|HELVETICA_BOLD
operator|.
name|getPath
argument_list|(
literal|"N"
argument_list|)
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|transform
argument_list|(
name|Matrix
operator|.
name|getTranslateInstance
argument_list|(
literal|1300
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|addPath
argument_list|(
name|contentStream
argument_list|,
name|PDType1Font
operator|.
name|HELVETICA_BOLD
operator|.
name|getPath
argument_list|(
literal|"P"
argument_list|)
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|fill
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|drawStar
parameter_list|(
name|PDAnnotationText
name|annotation
parameter_list|,
specifier|final
name|PDAppearanceContentStream
name|contentStream
parameter_list|)
throws|throws
name|IOException
block|{
name|PDRectangle
name|bbox
init|=
name|adjustRectAndBBox
argument_list|(
name|annotation
argument_list|,
literal|20
argument_list|,
literal|19
argument_list|)
decl_stmt|;
name|float
name|min
init|=
name|Math
operator|.
name|min
argument_list|(
name|bbox
operator|.
name|getWidth
argument_list|()
argument_list|,
name|bbox
operator|.
name|getHeight
argument_list|()
argument_list|)
decl_stmt|;
name|contentStream
operator|.
name|setMiterLimit
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setLineJoinStyle
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setLineCapStyle
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setLineWidth
argument_list|(
literal|0.59f
argument_list|)
expr_stmt|;
comment|// value from Adobe
name|contentStream
operator|.
name|transform
argument_list|(
name|Matrix
operator|.
name|getScaleInstance
argument_list|(
literal|0.001f
operator|*
name|min
operator|/
literal|0.8f
argument_list|,
literal|0.001f
operator|*
name|min
operator|/
literal|0.8f
argument_list|)
argument_list|)
expr_stmt|;
comment|// we get the shape of a Zapf Dingbats star (0x2605) and use that one.
comment|// Adobe uses a different font (which one?), or created the shape from scratch.
name|GeneralPath
name|path
init|=
name|PDType1Font
operator|.
name|ZAPF_DINGBATS
operator|.
name|getPath
argument_list|(
literal|"a35"
argument_list|)
decl_stmt|;
name|addPath
argument_list|(
name|contentStream
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|fillAndStroke
argument_list|()
expr_stmt|;
block|}
comment|//TODO this is mostly identical to drawStar, except for scale, translation and symbol
comment|// maybe use a table with all values and draw from there
comment|// this could also optionally use outer circle
specifier|private
name|void
name|drawCheck
parameter_list|(
name|PDAnnotationText
name|annotation
parameter_list|,
specifier|final
name|PDAppearanceContentStream
name|contentStream
parameter_list|)
throws|throws
name|IOException
block|{
name|PDRectangle
name|bbox
init|=
name|adjustRectAndBBox
argument_list|(
name|annotation
argument_list|,
literal|20
argument_list|,
literal|19
argument_list|)
decl_stmt|;
name|float
name|min
init|=
name|Math
operator|.
name|min
argument_list|(
name|bbox
operator|.
name|getWidth
argument_list|()
argument_list|,
name|bbox
operator|.
name|getHeight
argument_list|()
argument_list|)
decl_stmt|;
name|contentStream
operator|.
name|setMiterLimit
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setLineJoinStyle
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setLineCapStyle
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setLineWidth
argument_list|(
literal|0.59f
argument_list|)
expr_stmt|;
comment|// value from Adobe
name|contentStream
operator|.
name|transform
argument_list|(
name|Matrix
operator|.
name|getScaleInstance
argument_list|(
literal|0.001f
operator|*
name|min
operator|/
literal|0.8f
argument_list|,
literal|0.001f
operator|*
name|min
operator|/
literal|0.8f
argument_list|)
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|transform
argument_list|(
name|Matrix
operator|.
name|getTranslateInstance
argument_list|(
literal|0
argument_list|,
literal|50
argument_list|)
argument_list|)
expr_stmt|;
comment|// we get the shape of a Zapf Dingbats check (0x2714) and use that one.
comment|// Adobe uses a different font (which one?), or created the shape from scratch.
name|GeneralPath
name|path
init|=
name|PDType1Font
operator|.
name|ZAPF_DINGBATS
operator|.
name|getPath
argument_list|(
literal|"a20"
argument_list|)
decl_stmt|;
name|addPath
argument_list|(
name|contentStream
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|fillAndStroke
argument_list|()
expr_stmt|;
block|}
comment|//TODO this is mostly identical to drawStar, except for scale, translation and symbol
specifier|private
name|void
name|drawRightPointer
parameter_list|(
name|PDAnnotationText
name|annotation
parameter_list|,
specifier|final
name|PDAppearanceContentStream
name|contentStream
parameter_list|)
throws|throws
name|IOException
block|{
name|PDRectangle
name|bbox
init|=
name|adjustRectAndBBox
argument_list|(
name|annotation
argument_list|,
literal|20
argument_list|,
literal|17
argument_list|)
decl_stmt|;
name|float
name|min
init|=
name|Math
operator|.
name|min
argument_list|(
name|bbox
operator|.
name|getWidth
argument_list|()
argument_list|,
name|bbox
operator|.
name|getHeight
argument_list|()
argument_list|)
decl_stmt|;
name|contentStream
operator|.
name|setMiterLimit
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setLineJoinStyle
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setLineCapStyle
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setLineWidth
argument_list|(
literal|0.59f
argument_list|)
expr_stmt|;
comment|// value from Adobe
name|contentStream
operator|.
name|transform
argument_list|(
name|Matrix
operator|.
name|getScaleInstance
argument_list|(
literal|0.001f
operator|*
name|min
operator|/
literal|0.8f
argument_list|,
literal|0.001f
operator|*
name|min
operator|/
literal|0.8f
argument_list|)
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|transform
argument_list|(
name|Matrix
operator|.
name|getTranslateInstance
argument_list|(
literal|0
argument_list|,
literal|50
argument_list|)
argument_list|)
expr_stmt|;
comment|// we get the shape of a Zapf Dingbats right pointer (0x27A4) and use that one.
comment|// Adobe uses a different font (which one?), or created the shape from scratch.
name|GeneralPath
name|path
init|=
name|PDType1Font
operator|.
name|ZAPF_DINGBATS
operator|.
name|getPath
argument_list|(
literal|"a174"
argument_list|)
decl_stmt|;
name|addPath
argument_list|(
name|contentStream
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|fillAndStroke
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|drawCrossHairs
parameter_list|(
name|PDAnnotationText
name|annotation
parameter_list|,
specifier|final
name|PDAppearanceContentStream
name|contentStream
parameter_list|)
throws|throws
name|IOException
block|{
name|PDRectangle
name|bbox
init|=
name|adjustRectAndBBox
argument_list|(
name|annotation
argument_list|,
literal|20
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|float
name|min
init|=
name|Math
operator|.
name|min
argument_list|(
name|bbox
operator|.
name|getWidth
argument_list|()
argument_list|,
name|bbox
operator|.
name|getHeight
argument_list|()
argument_list|)
decl_stmt|;
name|contentStream
operator|.
name|setMiterLimit
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setLineJoinStyle
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setLineCapStyle
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setLineWidth
argument_list|(
literal|0.61f
argument_list|)
expr_stmt|;
comment|// value from Adobe
name|contentStream
operator|.
name|transform
argument_list|(
name|Matrix
operator|.
name|getScaleInstance
argument_list|(
literal|0.001f
operator|*
name|min
operator|/
literal|1.5f
argument_list|,
literal|0.001f
operator|*
name|min
operator|/
literal|1.5f
argument_list|)
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|transform
argument_list|(
name|Matrix
operator|.
name|getTranslateInstance
argument_list|(
literal|0
argument_list|,
literal|50
argument_list|)
argument_list|)
expr_stmt|;
comment|// we get the shape of a Symbol crosshair (0x2295) and use that one.
comment|// Adobe uses a different font (which one?), or created the shape from scratch.
name|GeneralPath
name|path
init|=
name|PDType1Font
operator|.
name|SYMBOL
operator|.
name|getPath
argument_list|(
literal|"circleplus"
argument_list|)
decl_stmt|;
name|addPath
argument_list|(
name|contentStream
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|fillAndStroke
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|drawUpArrow
parameter_list|(
name|PDAnnotationText
name|annotation
parameter_list|,
specifier|final
name|PDAppearanceContentStream
name|contentStream
parameter_list|)
throws|throws
name|IOException
block|{
name|adjustRectAndBBox
argument_list|(
name|annotation
argument_list|,
literal|17
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setMiterLimit
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setLineJoinStyle
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setLineCapStyle
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setLineWidth
argument_list|(
literal|0.59f
argument_list|)
expr_stmt|;
comment|// value from Adobe
name|contentStream
operator|.
name|moveTo
argument_list|(
literal|1
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|lineTo
argument_list|(
literal|5
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|lineTo
argument_list|(
literal|5
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|lineTo
argument_list|(
literal|12
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|lineTo
argument_list|(
literal|12
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|lineTo
argument_list|(
literal|16
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|lineTo
argument_list|(
literal|8.5f
argument_list|,
literal|19
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|closeAndFillAndStroke
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|drawUpLeftArrow
parameter_list|(
name|PDAnnotationText
name|annotation
parameter_list|,
specifier|final
name|PDAppearanceContentStream
name|contentStream
parameter_list|)
throws|throws
name|IOException
block|{
name|adjustRectAndBBox
argument_list|(
name|annotation
argument_list|,
literal|17
argument_list|,
literal|17
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setMiterLimit
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setLineJoinStyle
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setLineCapStyle
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setLineWidth
argument_list|(
literal|0.59f
argument_list|)
expr_stmt|;
comment|// value from Adobe
name|contentStream
operator|.
name|transform
argument_list|(
name|Matrix
operator|.
name|getRotateInstance
argument_list|(
name|Math
operator|.
name|toRadians
argument_list|(
literal|45
argument_list|)
argument_list|,
literal|8
argument_list|,
operator|-
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|moveTo
argument_list|(
literal|1
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|lineTo
argument_list|(
literal|5
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|lineTo
argument_list|(
literal|5
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|lineTo
argument_list|(
literal|12
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|lineTo
argument_list|(
literal|12
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|lineTo
argument_list|(
literal|16
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|lineTo
argument_list|(
literal|8.5f
argument_list|,
literal|19
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|closeAndFillAndStroke
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|drawRightArrow
parameter_list|(
name|PDAnnotationText
name|annotation
parameter_list|,
specifier|final
name|PDAppearanceContentStream
name|contentStream
parameter_list|)
throws|throws
name|IOException
block|{
name|PDRectangle
name|bbox
init|=
name|adjustRectAndBBox
argument_list|(
name|annotation
argument_list|,
literal|20
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|float
name|min
init|=
name|Math
operator|.
name|min
argument_list|(
name|bbox
operator|.
name|getWidth
argument_list|()
argument_list|,
name|bbox
operator|.
name|getHeight
argument_list|()
argument_list|)
decl_stmt|;
name|contentStream
operator|.
name|setMiterLimit
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setLineJoinStyle
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setLineCapStyle
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setLineWidth
argument_list|(
literal|0.59f
argument_list|)
expr_stmt|;
comment|// value from Adobe
comment|// Adobe first fills a white circle with CA ca 0.6, so do we
name|contentStream
operator|.
name|saveGraphicsState
argument_list|()
expr_stmt|;
name|contentStream
operator|.
name|setLineWidth
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|PDExtendedGraphicsState
name|gs
init|=
operator|new
name|PDExtendedGraphicsState
argument_list|()
decl_stmt|;
name|gs
operator|.
name|setAlphaSourceFlag
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|gs
operator|.
name|setStrokingAlphaConstant
argument_list|(
literal|0.6f
argument_list|)
expr_stmt|;
name|gs
operator|.
name|setNonStrokingAlphaConstant
argument_list|(
literal|0.6f
argument_list|)
expr_stmt|;
name|gs
operator|.
name|setBlendMode
argument_list|(
name|BlendMode
operator|.
name|NORMAL
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setGraphicsStateParameters
argument_list|(
name|gs
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setNonStrokingColor
argument_list|(
literal|1f
argument_list|)
expr_stmt|;
name|drawCircle2
argument_list|(
name|contentStream
argument_list|,
name|min
operator|/
literal|2
argument_list|,
name|min
operator|/
literal|2
argument_list|,
name|min
operator|/
literal|2
operator|-
literal|1
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|fill
argument_list|()
expr_stmt|;
name|contentStream
operator|.
name|restoreGraphicsState
argument_list|()
expr_stmt|;
name|contentStream
operator|.
name|saveGraphicsState
argument_list|()
expr_stmt|;
comment|// rescale so that the glyph fits into circle and move it to circle center
comment|// values gathered by trial and error
name|contentStream
operator|.
name|transform
argument_list|(
name|Matrix
operator|.
name|getScaleInstance
argument_list|(
literal|0.001f
operator|*
name|min
operator|/
literal|1.3f
argument_list|,
literal|0.001f
operator|*
name|min
operator|/
literal|1.3f
argument_list|)
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|transform
argument_list|(
name|Matrix
operator|.
name|getTranslateInstance
argument_list|(
literal|200
argument_list|,
literal|300
argument_list|)
argument_list|)
expr_stmt|;
comment|// we get the shape of a Zapf Dingbats right arrow (0x2794) and use that one.
comment|// Adobe uses a different font (which one?), or created the shape from scratch.
name|GeneralPath
name|path
init|=
name|PDType1Font
operator|.
name|ZAPF_DINGBATS
operator|.
name|getPath
argument_list|(
literal|"a160"
argument_list|)
decl_stmt|;
name|addPath
argument_list|(
name|contentStream
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|restoreGraphicsState
argument_list|()
expr_stmt|;
comment|// surprisingly, this one not counterclockwise.
name|drawCircle
argument_list|(
name|contentStream
argument_list|,
name|min
operator|/
literal|2
argument_list|,
name|min
operator|/
literal|2
argument_list|,
name|min
operator|/
literal|2
operator|-
literal|1
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|fillAndStroke
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|drawComment
parameter_list|(
name|PDAnnotationText
name|annotation
parameter_list|,
specifier|final
name|PDAppearanceContentStream
name|contentStream
parameter_list|)
throws|throws
name|IOException
block|{
name|adjustRectAndBBox
argument_list|(
name|annotation
argument_list|,
literal|18
argument_list|,
literal|18
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setMiterLimit
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setLineJoinStyle
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setLineCapStyle
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setLineWidth
argument_list|(
literal|200
argument_list|)
expr_stmt|;
comment|// Adobe first fills a white rectangle with CA ca 0.6, so do we
name|contentStream
operator|.
name|saveGraphicsState
argument_list|()
expr_stmt|;
name|contentStream
operator|.
name|setLineWidth
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|PDExtendedGraphicsState
name|gs
init|=
operator|new
name|PDExtendedGraphicsState
argument_list|()
decl_stmt|;
name|gs
operator|.
name|setAlphaSourceFlag
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|gs
operator|.
name|setStrokingAlphaConstant
argument_list|(
literal|0.6f
argument_list|)
expr_stmt|;
name|gs
operator|.
name|setNonStrokingAlphaConstant
argument_list|(
literal|0.6f
argument_list|)
expr_stmt|;
name|gs
operator|.
name|setBlendMode
argument_list|(
name|BlendMode
operator|.
name|NORMAL
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setGraphicsStateParameters
argument_list|(
name|gs
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setNonStrokingColor
argument_list|(
literal|1f
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|addRect
argument_list|(
literal|0.3f
argument_list|,
literal|0.3f
argument_list|,
literal|18
operator|-
literal|0.6f
argument_list|,
literal|18
operator|-
literal|0.6f
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|fill
argument_list|()
expr_stmt|;
name|contentStream
operator|.
name|restoreGraphicsState
argument_list|()
expr_stmt|;
name|contentStream
operator|.
name|transform
argument_list|(
name|Matrix
operator|.
name|getScaleInstance
argument_list|(
literal|0.003f
argument_list|,
literal|0.003f
argument_list|)
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|transform
argument_list|(
name|Matrix
operator|.
name|getTranslateInstance
argument_list|(
literal|500
argument_list|,
operator|-
literal|300
argument_list|)
argument_list|)
expr_stmt|;
comment|// outer shape was gathered from Font Awesome by "printing" comment.svg
comment|// into a PDF and looking at the content stream
name|contentStream
operator|.
name|moveTo
argument_list|(
literal|2549
argument_list|,
literal|5269
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|curveTo
argument_list|(
literal|1307
argument_list|,
literal|5269
argument_list|,
literal|300
argument_list|,
literal|4451
argument_list|,
literal|300
argument_list|,
literal|3441
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|curveTo
argument_list|(
literal|300
argument_list|,
literal|3023
argument_list|,
literal|474
argument_list|,
literal|2640
argument_list|,
literal|764
argument_list|,
literal|2331
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|curveTo
argument_list|(
literal|633
argument_list|,
literal|1985
argument_list|,
literal|361
argument_list|,
literal|1691
argument_list|,
literal|357
argument_list|,
literal|1688
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|curveTo
argument_list|(
literal|299
argument_list|,
literal|1626
argument_list|,
literal|283
argument_list|,
literal|1537
argument_list|,
literal|316
argument_list|,
literal|1459
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|curveTo
argument_list|(
literal|350
argument_list|,
literal|1382
argument_list|,
literal|426
argument_list|,
literal|1332
argument_list|,
literal|510
argument_list|,
literal|1332
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|curveTo
argument_list|(
literal|1051
argument_list|,
literal|1332
argument_list|,
literal|1477
argument_list|,
literal|1558
argument_list|,
literal|1733
argument_list|,
literal|1739
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|curveTo
argument_list|(
literal|1987
argument_list|,
literal|1659
argument_list|,
literal|2261
argument_list|,
literal|1613
argument_list|,
literal|2549
argument_list|,
literal|1613
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|curveTo
argument_list|(
literal|3792
argument_list|,
literal|1613
argument_list|,
literal|4799
argument_list|,
literal|2431
argument_list|,
literal|4799
argument_list|,
literal|3441
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|curveTo
argument_list|(
literal|4799
argument_list|,
literal|4451
argument_list|,
literal|3792
argument_list|,
literal|5269
argument_list|,
literal|2549
argument_list|,
literal|5269
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|closePath
argument_list|()
expr_stmt|;
comment|// can't use addRect: if we did that, we wouldn't get the donut effect
name|contentStream
operator|.
name|moveTo
argument_list|(
literal|0.3f
operator|/
literal|0.003f
operator|-
literal|500
argument_list|,
literal|0.3f
operator|/
literal|0.003f
operator|+
literal|300
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|lineTo
argument_list|(
literal|0.3f
operator|/
literal|0.003f
operator|-
literal|500
argument_list|,
literal|0.3f
operator|/
literal|0.003f
operator|+
literal|300
operator|+
literal|17.4f
operator|/
literal|0.003f
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|lineTo
argument_list|(
literal|0.3f
operator|/
literal|0.003f
operator|-
literal|500
operator|+
literal|17.4f
operator|/
literal|0.003f
argument_list|,
literal|0.3f
operator|/
literal|0.003f
operator|+
literal|300
operator|+
literal|17.4f
operator|/
literal|0.003f
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|lineTo
argument_list|(
literal|0.3f
operator|/
literal|0.003f
operator|-
literal|500
operator|+
literal|17.4f
operator|/
literal|0.003f
argument_list|,
literal|0.3f
operator|/
literal|0.003f
operator|+
literal|300
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|closeAndFillAndStroke
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|drawKey
parameter_list|(
name|PDAnnotationText
name|annotation
parameter_list|,
specifier|final
name|PDAppearanceContentStream
name|contentStream
parameter_list|)
throws|throws
name|IOException
block|{
name|adjustRectAndBBox
argument_list|(
name|annotation
argument_list|,
literal|13
argument_list|,
literal|18
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setMiterLimit
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setLineJoinStyle
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setLineCapStyle
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|setLineWidth
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|transform
argument_list|(
name|Matrix
operator|.
name|getScaleInstance
argument_list|(
literal|0.003f
argument_list|,
literal|0.003f
argument_list|)
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|transform
argument_list|(
name|Matrix
operator|.
name|getRotateInstance
argument_list|(
name|Math
operator|.
name|toRadians
argument_list|(
literal|45
argument_list|)
argument_list|,
literal|2500
argument_list|,
operator|-
literal|800
argument_list|)
argument_list|)
expr_stmt|;
comment|// shape was gathered from Font Awesome by "printing" key.svg into a PDF
comment|// and looking at the content stream
name|contentStream
operator|.
name|moveTo
argument_list|(
literal|4799
argument_list|,
literal|4004
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|curveTo
argument_list|(
literal|4799
argument_list|,
literal|3149
argument_list|,
literal|4107
argument_list|,
literal|2457
argument_list|,
literal|3253
argument_list|,
literal|2457
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|curveTo
argument_list|(
literal|3154
argument_list|,
literal|2457
argument_list|,
literal|3058
argument_list|,
literal|2466
argument_list|,
literal|2964
argument_list|,
literal|2484
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|lineTo
argument_list|(
literal|2753
argument_list|,
literal|2246
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|curveTo
argument_list|(
literal|2713
argument_list|,
literal|2201
argument_list|,
literal|2656
argument_list|,
literal|2175
argument_list|,
literal|2595
argument_list|,
literal|2175
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|lineTo
argument_list|(
literal|2268
argument_list|,
literal|2175
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|lineTo
argument_list|(
literal|2268
argument_list|,
literal|1824
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|curveTo
argument_list|(
literal|2268
argument_list|,
literal|1707
argument_list|,
literal|2174
argument_list|,
literal|1613
argument_list|,
literal|2057
argument_list|,
literal|1613
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|lineTo
argument_list|(
literal|1706
argument_list|,
literal|1613
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|lineTo
argument_list|(
literal|1706
argument_list|,
literal|1261
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|curveTo
argument_list|(
literal|1706
argument_list|,
literal|1145
argument_list|,
literal|1611
argument_list|,
literal|1050
argument_list|,
literal|1495
argument_list|,
literal|1050
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|lineTo
argument_list|(
literal|510
argument_list|,
literal|1050
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|curveTo
argument_list|(
literal|394
argument_list|,
literal|1050
argument_list|,
literal|300
argument_list|,
literal|1145
argument_list|,
literal|300
argument_list|,
literal|1261
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|lineTo
argument_list|(
literal|300
argument_list|,
literal|1947
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|curveTo
argument_list|(
literal|300
argument_list|,
literal|2003
argument_list|,
literal|322
argument_list|,
literal|2057
argument_list|,
literal|361
argument_list|,
literal|2097
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|lineTo
argument_list|(
literal|1783
argument_list|,
literal|3519
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|curveTo
argument_list|(
literal|1733
argument_list|,
literal|3671
argument_list|,
literal|1706
argument_list|,
literal|3834
argument_list|,
literal|1706
argument_list|,
literal|4004
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|curveTo
argument_list|(
literal|1706
argument_list|,
literal|4858
argument_list|,
literal|2398
argument_list|,
literal|5550
argument_list|,
literal|3253
argument_list|,
literal|5550
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|curveTo
argument_list|(
literal|4109
argument_list|,
literal|5550
argument_list|,
literal|4799
argument_list|,
literal|4860
argument_list|,
literal|4799
argument_list|,
literal|4004
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|closePath
argument_list|()
expr_stmt|;
name|contentStream
operator|.
name|moveTo
argument_list|(
literal|3253
argument_list|,
literal|4425
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|curveTo
argument_list|(
literal|3253
argument_list|,
literal|4192
argument_list|,
literal|3441
argument_list|,
literal|4004
argument_list|,
literal|3674
argument_list|,
literal|4004
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|curveTo
argument_list|(
literal|3907
argument_list|,
literal|4004
argument_list|,
literal|4096
argument_list|,
literal|4192
argument_list|,
literal|4096
argument_list|,
literal|4425
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|curveTo
argument_list|(
literal|4096
argument_list|,
literal|4658
argument_list|,
literal|3907
argument_list|,
literal|4847
argument_list|,
literal|3674
argument_list|,
literal|4847
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|curveTo
argument_list|(
literal|3441
argument_list|,
literal|4847
argument_list|,
literal|3253
argument_list|,
literal|4658
argument_list|,
literal|3253
argument_list|,
literal|4425
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|fillAndStroke
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|addPath
parameter_list|(
specifier|final
name|PDAppearanceContentStream
name|contentStream
parameter_list|,
name|GeneralPath
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|double
name|curX
init|=
literal|0
decl_stmt|;
name|double
name|curY
init|=
literal|0
decl_stmt|;
name|PathIterator
name|it
init|=
name|path
operator|.
name|getPathIterator
argument_list|(
operator|new
name|AffineTransform
argument_list|()
argument_list|)
decl_stmt|;
name|double
index|[]
name|coords
init|=
operator|new
name|double
index|[
literal|6
index|]
decl_stmt|;
while|while
condition|(
operator|!
name|it
operator|.
name|isDone
argument_list|()
condition|)
block|{
name|int
name|type
init|=
name|it
operator|.
name|currentSegment
argument_list|(
name|coords
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|PathIterator
operator|.
name|SEG_CLOSE
case|:
name|contentStream
operator|.
name|closePath
argument_list|()
expr_stmt|;
break|break;
case|case
name|PathIterator
operator|.
name|SEG_CUBICTO
case|:
name|contentStream
operator|.
name|curveTo
argument_list|(
operator|(
name|float
operator|)
name|coords
index|[
literal|0
index|]
argument_list|,
operator|(
name|float
operator|)
name|coords
index|[
literal|1
index|]
argument_list|,
operator|(
name|float
operator|)
name|coords
index|[
literal|2
index|]
argument_list|,
operator|(
name|float
operator|)
name|coords
index|[
literal|3
index|]
argument_list|,
operator|(
name|float
operator|)
name|coords
index|[
literal|4
index|]
argument_list|,
operator|(
name|float
operator|)
name|coords
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|curX
operator|=
name|coords
index|[
literal|4
index|]
expr_stmt|;
name|curY
operator|=
name|coords
index|[
literal|5
index|]
expr_stmt|;
break|break;
case|case
name|PathIterator
operator|.
name|SEG_QUADTO
case|:
comment|// Convert quadratic Bézier curve to cubic
comment|// https://fontforge.github.io/bezier.html
comment|// CP1 = QP0 + 2/3 *(QP1-QP0)
comment|// CP2 = QP2 + 2/3 *(QP1-QP2)
name|double
name|cp1x
init|=
name|curX
operator|+
literal|2d
operator|/
literal|3d
operator|*
operator|(
name|coords
index|[
literal|0
index|]
operator|-
name|curX
operator|)
decl_stmt|;
name|double
name|cp1y
init|=
name|curY
operator|+
literal|2d
operator|/
literal|3d
operator|*
operator|(
name|coords
index|[
literal|1
index|]
operator|-
name|curY
operator|)
decl_stmt|;
name|double
name|cp2x
init|=
name|coords
index|[
literal|2
index|]
operator|+
literal|2d
operator|/
literal|3d
operator|*
operator|(
name|coords
index|[
literal|0
index|]
operator|-
name|coords
index|[
literal|2
index|]
operator|)
decl_stmt|;
name|double
name|cp2y
init|=
name|coords
index|[
literal|3
index|]
operator|+
literal|2d
operator|/
literal|3d
operator|*
operator|(
name|coords
index|[
literal|1
index|]
operator|-
name|coords
index|[
literal|3
index|]
operator|)
decl_stmt|;
name|contentStream
operator|.
name|curveTo
argument_list|(
operator|(
name|float
operator|)
name|cp1x
argument_list|,
operator|(
name|float
operator|)
name|cp1y
argument_list|,
operator|(
name|float
operator|)
name|cp2x
argument_list|,
operator|(
name|float
operator|)
name|cp2y
argument_list|,
operator|(
name|float
operator|)
name|coords
index|[
literal|2
index|]
argument_list|,
operator|(
name|float
operator|)
name|coords
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|curX
operator|=
name|coords
index|[
literal|2
index|]
expr_stmt|;
name|curY
operator|=
name|coords
index|[
literal|3
index|]
expr_stmt|;
break|break;
case|case
name|PathIterator
operator|.
name|SEG_LINETO
case|:
name|contentStream
operator|.
name|lineTo
argument_list|(
operator|(
name|float
operator|)
name|coords
index|[
literal|0
index|]
argument_list|,
operator|(
name|float
operator|)
name|coords
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|curX
operator|=
name|coords
index|[
literal|0
index|]
expr_stmt|;
name|curY
operator|=
name|coords
index|[
literal|1
index|]
expr_stmt|;
break|break;
case|case
name|PathIterator
operator|.
name|SEG_MOVETO
case|:
name|contentStream
operator|.
name|moveTo
argument_list|(
operator|(
name|float
operator|)
name|coords
index|[
literal|0
index|]
argument_list|,
operator|(
name|float
operator|)
name|coords
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|curX
operator|=
name|coords
index|[
literal|0
index|]
expr_stmt|;
name|curY
operator|=
name|coords
index|[
literal|1
index|]
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|generateRolloverAppearance
parameter_list|()
block|{
comment|// No rollover appearance generated
block|}
annotation|@
name|Override
specifier|public
name|void
name|generateDownAppearance
parameter_list|()
block|{
comment|// No down appearance generated
block|}
block|}
end_class

end_unit

