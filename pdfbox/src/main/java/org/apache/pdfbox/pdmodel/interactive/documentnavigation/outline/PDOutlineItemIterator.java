begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|documentnavigation
operator|.
name|outline
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_comment
comment|/**  * Iterator over the linked list of {@link PDOutlineItem} siblings.  *   * @author Andrea Vacondio  *  */
end_comment

begin_class
class|class
name|PDOutlineItemIterator
implements|implements
name|Iterator
argument_list|<
name|PDOutlineItem
argument_list|>
block|{
specifier|private
name|PDOutlineItem
name|currentItem
decl_stmt|;
specifier|private
specifier|final
name|PDOutlineItem
name|startingItem
decl_stmt|;
name|PDOutlineItemIterator
parameter_list|(
name|PDOutlineItem
name|startingItem
parameter_list|)
block|{
name|this
operator|.
name|startingItem
operator|=
name|startingItem
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|startingItem
operator|!=
literal|null
operator|&&
operator|(
name|currentItem
operator|==
literal|null
operator|||
operator|(
name|currentItem
operator|.
name|getNextSibling
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|startingItem
operator|.
name|equals
argument_list|(
name|currentItem
operator|.
name|getNextSibling
argument_list|()
argument_list|)
operator|)
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|PDOutlineItem
name|next
parameter_list|()
block|{
if|if
condition|(
name|currentItem
operator|==
literal|null
condition|)
block|{
name|currentItem
operator|=
name|startingItem
expr_stmt|;
block|}
else|else
block|{
name|currentItem
operator|=
name|currentItem
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
return|return
name|currentItem
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
end_class

end_unit

