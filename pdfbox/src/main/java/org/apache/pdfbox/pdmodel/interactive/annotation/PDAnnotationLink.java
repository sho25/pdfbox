begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|action
operator|.
name|PDActionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|action
operator|.
name|type
operator|.
name|PDAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|action
operator|.
name|type
operator|.
name|PDActionURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|documentnavigation
operator|.
name|destination
operator|.
name|PDDestination
import|;
end_import

begin_comment
comment|/**  * This is the class that represents a link annotation.  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @author Paul King  * @version $Revision: 1.3 $  */
end_comment

begin_class
specifier|public
class|class
name|PDAnnotationLink
extends|extends
name|PDAnnotation
block|{
comment|/**      * Constant values of the Text as defined in the PDF 1.6 reference Table 8.19.      */
specifier|public
specifier|static
specifier|final
name|String
name|HIGHLIGHT_MODE_NONE
init|=
literal|"N"
decl_stmt|;
comment|/**      * Constant values of the Text as defined in the PDF 1.6 reference Table 8.19.      */
specifier|public
specifier|static
specifier|final
name|String
name|HIGHLIGHT_MODE_INVERT
init|=
literal|"I"
decl_stmt|;
comment|/**      * Constant values of the Text as defined in the PDF 1.6 reference Table 8.19.      */
specifier|public
specifier|static
specifier|final
name|String
name|HIGHLIGHT_MODE_OUTLINE
init|=
literal|"O"
decl_stmt|;
comment|/**      * Constant values of the Text as defined in the PDF 1.6 reference Table 8.19.      */
specifier|public
specifier|static
specifier|final
name|String
name|HIGHLIGHT_MODE_PUSH
init|=
literal|"P"
decl_stmt|;
comment|/**      * The type of annotation.      */
specifier|public
specifier|static
specifier|final
name|String
name|SUB_TYPE
init|=
literal|"Link"
decl_stmt|;
comment|/**      * Constructor.      */
specifier|public
name|PDAnnotationLink
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|getDictionary
argument_list|()
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|,
name|COSName
operator|.
name|getPDFName
argument_list|(
name|SUB_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a Link annotation from a COSDictionary, expected to be      * a correct object definition.      *      * @param field the PDF objet to represent as a field.      */
specifier|public
name|PDAnnotationLink
parameter_list|(
name|COSDictionary
name|field
parameter_list|)
block|{
name|super
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the action to be performed when this annotation is to be activated.      *      * @return The action to be performed when this annotation is activated.      *      * @throws IOException If there is an error creating the action.      * TODO not all annotations have an A entry      */
specifier|public
name|PDAction
name|getAction
parameter_list|()
throws|throws
name|IOException
block|{
name|COSDictionary
name|action
init|=
operator|(
name|COSDictionary
operator|)
name|this
operator|.
name|getDictionary
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|A
argument_list|)
decl_stmt|;
return|return
name|PDActionFactory
operator|.
name|createAction
argument_list|(
name|action
argument_list|)
return|;
block|}
comment|/**      * Set the annotation action.      * As of PDF 1.6 this is only used for Widget Annotations      * @param action The annotation action.      * TODO not all annotations have an A entry      */
specifier|public
name|void
name|setAction
parameter_list|(
name|PDAction
name|action
parameter_list|)
block|{
name|this
operator|.
name|getDictionary
argument_list|()
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|A
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will set the border style dictionary, specifying the width and dash      * pattern used in drawing the line.      *      * @param bs the border style dictionary to set.      * TODO not all annotations may have a BS entry      *      */
specifier|public
name|void
name|setBorderStyle
parameter_list|(
name|PDBorderStyleDictionary
name|bs
parameter_list|)
block|{
name|this
operator|.
name|getDictionary
argument_list|()
operator|.
name|setItem
argument_list|(
literal|"BS"
argument_list|,
name|bs
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will retrieve the border style dictionary, specifying the width and      * dash pattern used in drawing the line.      *      * @return the border style dictionary.      * TODO not all annotations may have a BS entry      */
specifier|public
name|PDBorderStyleDictionary
name|getBorderStyle
parameter_list|()
block|{
name|COSDictionary
name|bs
init|=
operator|(
name|COSDictionary
operator|)
name|this
operator|.
name|getDictionary
argument_list|()
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"BS"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|bs
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|PDBorderStyleDictionary
argument_list|(
name|bs
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Get the destination to be displayed when the annotation is activated.  Either      * this or the A should be set but not both.      *      * @return The destination for this annotation.      *      * @throws IOException If there is an error creating the destination.      */
specifier|public
name|PDDestination
name|getDestination
parameter_list|()
throws|throws
name|IOException
block|{
name|COSBase
name|base
init|=
name|getDictionary
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|DEST
argument_list|)
decl_stmt|;
name|PDDestination
name|retval
init|=
name|PDDestination
operator|.
name|create
argument_list|(
name|base
argument_list|)
decl_stmt|;
return|return
name|retval
return|;
block|}
comment|/**      * The new destination value.      *      * @param dest The updated destination.      */
specifier|public
name|void
name|setDestination
parameter_list|(
name|PDDestination
name|dest
parameter_list|)
block|{
name|getDictionary
argument_list|()
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|DEST
argument_list|,
name|dest
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the highlight mode for when the mouse is depressed.      * See the HIGHLIGHT_MODE_XXX constants.      *      * @return The string representation of the highlight mode.      */
specifier|public
name|String
name|getHighlightMode
parameter_list|()
block|{
return|return
name|getDictionary
argument_list|()
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|H
argument_list|,
name|HIGHLIGHT_MODE_INVERT
argument_list|)
return|;
block|}
comment|/**      * Set the highlight mode.  See the HIGHLIGHT_MODE_XXX constants.      *      * @param mode The new highlight mode.      */
specifier|public
name|void
name|setHighlightMode
parameter_list|(
name|String
name|mode
parameter_list|)
block|{
name|getDictionary
argument_list|()
operator|.
name|setName
argument_list|(
name|COSName
operator|.
name|H
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will set the previous URI action, in case it      * needs to be retrieved at later date.      *      * @param pa The previous URI.      */
specifier|public
name|void
name|setPreviousURI
parameter_list|(
name|PDActionURI
name|pa
parameter_list|)
block|{
name|getDictionary
argument_list|()
operator|.
name|setItem
argument_list|(
literal|"PA"
argument_list|,
name|pa
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will set the previous URI action, in case it's      * needed.      *      * @return The previous URI.      */
specifier|public
name|PDActionURI
name|getPreviousURI
parameter_list|()
block|{
name|COSDictionary
name|pa
init|=
operator|(
name|COSDictionary
operator|)
name|getDictionary
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
literal|"PA"
argument_list|)
decl_stmt|;
if|if
condition|(
name|pa
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|PDActionURI
argument_list|(
name|pa
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * This will set the set of quadpoints which encompass the areas of this      * annotation which will activate.      *      * @param quadPoints      *            an array representing the set of area covered.      */
specifier|public
name|void
name|setQuadPoints
parameter_list|(
name|float
index|[]
name|quadPoints
parameter_list|)
block|{
name|COSArray
name|newQuadPoints
init|=
operator|new
name|COSArray
argument_list|()
decl_stmt|;
name|newQuadPoints
operator|.
name|setFloatArray
argument_list|(
name|quadPoints
argument_list|)
expr_stmt|;
name|getDictionary
argument_list|()
operator|.
name|setItem
argument_list|(
literal|"QuadPoints"
argument_list|,
name|newQuadPoints
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will retrieve the set of quadpoints which encompass the areas of      * this annotation which will activate.      *      * @return An array of floats representing the quad points.      */
specifier|public
name|float
index|[]
name|getQuadPoints
parameter_list|()
block|{
name|COSArray
name|quadPoints
init|=
operator|(
name|COSArray
operator|)
name|getDictionary
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
literal|"QuadPoints"
argument_list|)
decl_stmt|;
if|if
condition|(
name|quadPoints
operator|!=
literal|null
condition|)
block|{
return|return
name|quadPoints
operator|.
name|toFloatArray
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
comment|// Should never happen as this is a required item
block|}
block|}
block|}
end_class

end_unit

