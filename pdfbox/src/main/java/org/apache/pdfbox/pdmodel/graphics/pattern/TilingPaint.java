begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|pattern
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Graphics2D
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Rectangle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|TexturePaint
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Transparency
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|color
operator|.
name|ColorSpace
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|AffineTransform
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|Rectangle2D
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|BufferedImage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|ColorModel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|ComponentColorModel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|DataBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|WritableRaster
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|rendering
operator|.
name|PDFRenderer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|rendering
operator|.
name|PageDrawer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDRectangle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDColor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDColorSpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|rendering
operator|.
name|TilingPatternDrawer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|Matrix
import|;
end_import

begin_comment
comment|/**  * AWT Paint for a tiling pattern, which consists of a small repeating graphical figure.  *  * @author Andreas Lehmkühler  * @author John Hewson  */
end_comment

begin_class
specifier|public
class|class
name|TilingPaint
extends|extends
name|TexturePaint
block|{
comment|/**      * Creates a new colored tiling Paint.      * @param pattern tiling pattern dictionary      */
specifier|public
name|TilingPaint
parameter_list|(
name|PDFRenderer
name|renderer
parameter_list|,
name|PDTilingPattern
name|pattern
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|getImage
argument_list|(
name|renderer
argument_list|,
name|pattern
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|getTransformedRect
argument_list|(
name|pattern
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new uncolored tiling Paint.      * @param pattern tiling pattern dictionary      * @param colorSpace color space for this tiling      * @param color color for this tiling      */
specifier|public
name|TilingPaint
parameter_list|(
name|PDFRenderer
name|renderer
parameter_list|,
name|PDTilingPattern
name|pattern
parameter_list|,
name|PDColorSpace
name|colorSpace
parameter_list|,
name|PDColor
name|color
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|getImage
argument_list|(
name|renderer
argument_list|,
name|pattern
argument_list|,
name|colorSpace
argument_list|,
name|color
argument_list|)
argument_list|,
name|getTransformedRect
argument_list|(
name|pattern
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//  gets rect in parent content stream coordinates
specifier|private
specifier|static
name|Rectangle2D
name|getTransformedRect
parameter_list|(
name|PDTilingPattern
name|pattern
parameter_list|)
block|{
name|float
name|x
init|=
operator|(
name|int
operator|)
name|pattern
operator|.
name|getBBox
argument_list|()
operator|.
name|getLowerLeftX
argument_list|()
decl_stmt|;
name|float
name|y
init|=
operator|(
name|int
operator|)
name|pattern
operator|.
name|getBBox
argument_list|()
operator|.
name|getLowerLeftY
argument_list|()
decl_stmt|;
name|float
name|width
init|=
operator|(
name|int
operator|)
name|pattern
operator|.
name|getBBox
argument_list|()
operator|.
name|getWidth
argument_list|()
decl_stmt|;
name|float
name|height
init|=
operator|(
name|int
operator|)
name|pattern
operator|.
name|getBBox
argument_list|()
operator|.
name|getHeight
argument_list|()
decl_stmt|;
comment|// xStep and yStep
if|if
condition|(
name|pattern
operator|.
name|getXStep
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|width
operator|=
name|pattern
operator|.
name|getXStep
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|pattern
operator|.
name|getYStep
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|height
operator|=
name|pattern
operator|.
name|getYStep
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|pattern
operator|.
name|getMatrix
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|Rectangle2D
operator|.
name|Float
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
return|;
block|}
else|else
block|{
name|AffineTransform
name|at
init|=
name|pattern
operator|.
name|getMatrix
argument_list|()
operator|.
name|createAffineTransform
argument_list|()
decl_stmt|;
name|Rectangle2D
name|rect
init|=
operator|new
name|Rectangle
operator|.
name|Float
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
decl_stmt|;
return|return
name|at
operator|.
name|createTransformedShape
argument_list|(
name|rect
argument_list|)
operator|.
name|getBounds2D
argument_list|()
return|;
block|}
block|}
comment|// gets image in parent stream coordinates
specifier|private
specifier|static
name|BufferedImage
name|getImage
parameter_list|(
name|PDFRenderer
name|renderer
parameter_list|,
name|PDTilingPattern
name|pattern
parameter_list|,
name|PDColorSpace
name|colorSpace
parameter_list|,
name|PDColor
name|color
parameter_list|)
throws|throws
name|IOException
block|{
name|ColorSpace
name|outputCS
init|=
name|ColorSpace
operator|.
name|getInstance
argument_list|(
name|ColorSpace
operator|.
name|CS_sRGB
argument_list|)
decl_stmt|;
name|ColorModel
name|cm
init|=
operator|new
name|ComponentColorModel
argument_list|(
name|outputCS
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|Transparency
operator|.
name|TRANSLUCENT
argument_list|,
name|DataBuffer
operator|.
name|TYPE_BYTE
argument_list|)
decl_stmt|;
name|Rectangle2D
name|rect
init|=
name|getTransformedRect
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
name|int
name|width
init|=
name|Math
operator|.
name|round
argument_list|(
operator|(
name|float
operator|)
name|rect
operator|.
name|getWidth
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|height
init|=
name|Math
operator|.
name|round
argument_list|(
operator|(
name|float
operator|)
name|rect
operator|.
name|getHeight
argument_list|()
argument_list|)
decl_stmt|;
comment|// create raster
name|WritableRaster
name|raster
init|=
name|cm
operator|.
name|createCompatibleWritableRaster
argument_list|(
name|width
argument_list|,
name|height
argument_list|)
decl_stmt|;
name|BufferedImage
name|image
init|=
operator|new
name|BufferedImage
argument_list|(
name|cm
argument_list|,
name|raster
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// TODO the pattern matrix needs to map onto the parent stream's initial space, not the CTM
comment|//      so the transformation below is not correct, because TilingPaint needs more
comment|//      information to perform the transformation correctly, see PDF 32000, p174.
comment|// matrix
name|Matrix
name|matrix
decl_stmt|;
if|if
condition|(
name|pattern
operator|.
name|getMatrix
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// identity
name|matrix
operator|=
operator|new
name|Matrix
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// undo translation
name|matrix
operator|=
name|pattern
operator|.
name|getMatrix
argument_list|()
operator|.
name|clone
argument_list|()
expr_stmt|;
name|matrix
operator|.
name|setValue
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
name|matrix
operator|.
name|getValue
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
operator|-
operator|(
name|float
operator|)
name|rect
operator|.
name|getX
argument_list|()
argument_list|)
expr_stmt|;
comment|// tx
name|matrix
operator|.
name|setValue
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
name|matrix
operator|.
name|getValue
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
operator|-
operator|(
name|float
operator|)
name|rect
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
comment|// ty
block|}
comment|// TODO: need to make it easy to use a custom TilingPatternDrawer
name|PageDrawer
name|drawer
init|=
operator|new
name|TilingPatternDrawer
argument_list|(
name|renderer
argument_list|)
decl_stmt|;
name|PDRectangle
name|pdRect
init|=
operator|new
name|PDRectangle
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
decl_stmt|;
name|Graphics2D
name|graphics
init|=
name|image
operator|.
name|createGraphics
argument_list|()
decl_stmt|;
name|drawer
operator|.
name|drawTilingPattern
argument_list|(
name|graphics
argument_list|,
name|pattern
argument_list|,
name|pdRect
argument_list|,
name|matrix
argument_list|,
name|colorSpace
argument_list|,
name|color
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|dispose
argument_list|()
expr_stmt|;
return|return
name|image
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getTransparency
parameter_list|()
block|{
return|return
name|Transparency
operator|.
name|TRANSLUCENT
return|;
block|}
block|}
end_class

end_unit

