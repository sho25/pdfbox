begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|documentinterchange
operator|.
name|taggedpdf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_comment
comment|/**  * A List attribute object.  *   * @author Johannes Koch  */
end_comment

begin_class
specifier|public
class|class
name|PDListAttributeObject
extends|extends
name|PDStandardAttributeObject
block|{
comment|/**      * standard attribute owner: List      */
specifier|public
specifier|static
specifier|final
name|String
name|OWNER_LIST
init|=
literal|"List"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|LIST_NUMBERING
init|=
literal|"ListNumbering"
decl_stmt|;
comment|/**      * ListNumbering: Circle: Open circular bullet      */
specifier|public
specifier|static
specifier|final
name|String
name|LIST_NUMBERING_CIRCLE
init|=
literal|"Circle"
decl_stmt|;
comment|/**      * ListNumbering: Decimal: Decimal arabic numerals (1–9, 10–99, …)      */
specifier|public
specifier|static
specifier|final
name|String
name|LIST_NUMBERING_DECIMAL
init|=
literal|"Decimal"
decl_stmt|;
comment|/**      * ListNumbering: Disc: Solid circular bullet      */
specifier|public
specifier|static
specifier|final
name|String
name|LIST_NUMBERING_DISC
init|=
literal|"Disc"
decl_stmt|;
comment|/**      * ListNumbering: LowerAlpha: Lowercase letters (a, b, c, …)      */
specifier|public
specifier|static
specifier|final
name|String
name|LIST_NUMBERING_LOWER_ALPHA
init|=
literal|"LowerAlpha"
decl_stmt|;
comment|/**      * ListNumbering: LowerRoman: Lowercase roman numerals (i, ii, iii, iv, …)      */
specifier|public
specifier|static
specifier|final
name|String
name|LIST_NUMBERING_LOWER_ROMAN
init|=
literal|"LowerRoman"
decl_stmt|;
comment|/**      * ListNumbering: None: No autonumbering; Lbl elements (if present) contain arbitrary text      * not subject to any numbering scheme      */
specifier|public
specifier|static
specifier|final
name|String
name|LIST_NUMBERING_NONE
init|=
literal|"None"
decl_stmt|;
comment|/**      * ListNumbering: Square: Solid square bullet      */
specifier|public
specifier|static
specifier|final
name|String
name|LIST_NUMBERING_SQUARE
init|=
literal|"Square"
decl_stmt|;
comment|/**      * ListNumbering: UpperAlpha: Uppercase letters (A, B, C, …)      */
specifier|public
specifier|static
specifier|final
name|String
name|LIST_NUMBERING_UPPER_ALPHA
init|=
literal|"UpperAlpha"
decl_stmt|;
comment|/**      * ListNumbering: UpperRoman: Uppercase roman numerals (I, II, III, IV, …)      */
specifier|public
specifier|static
specifier|final
name|String
name|LIST_NUMBERING_UPPER_ROMAN
init|=
literal|"UpperRoman"
decl_stmt|;
comment|/**      * Default constructor.      */
specifier|public
name|PDListAttributeObject
parameter_list|()
block|{
name|this
operator|.
name|setOwner
argument_list|(
name|OWNER_LIST
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new List attribute object with a given dictionary.      *       * @param dictionary the dictionary      */
specifier|public
name|PDListAttributeObject
parameter_list|(
name|COSDictionary
name|dictionary
parameter_list|)
block|{
name|super
argument_list|(
name|dictionary
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the list numbering (ListNumbering). The default value is      * {@link #LIST_NUMBERING_NONE}.      *       * @return the list numbering      */
specifier|public
name|String
name|getListNumbering
parameter_list|()
block|{
return|return
name|this
operator|.
name|getName
argument_list|(
name|LIST_NUMBERING
argument_list|,
name|LIST_NUMBERING_NONE
argument_list|)
return|;
block|}
comment|/**      * Sets the list numbering (ListNumbering). The value shall be one of the      * following:      *<ul>      *<li>{@link #LIST_NUMBERING_NONE},</li>      *<li>{@link #LIST_NUMBERING_DISC},</li>      *<li>{@link #LIST_NUMBERING_CIRCLE},</li>      *<li>{@link #LIST_NUMBERING_SQUARE},</li>      *<li>{@link #LIST_NUMBERING_DECIMAL},</li>      *<li>{@link #LIST_NUMBERING_UPPER_ROMAN},</li>      *<li>{@link #LIST_NUMBERING_LOWER_ROMAN},</li>      *<li>{@link #LIST_NUMBERING_UPPER_ALPHA},</li>      *<li>{@link #LIST_NUMBERING_LOWER_ALPHA}.</li>      *</ul>      *       * @param listNumbering the list numbering      */
specifier|public
name|void
name|setListNumbering
parameter_list|(
name|String
name|listNumbering
parameter_list|)
block|{
name|this
operator|.
name|setName
argument_list|(
name|LIST_NUMBERING
argument_list|,
name|listNumbering
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|super
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|isSpecified
argument_list|(
name|LIST_NUMBERING
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", ListNumbering="
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|getListNumbering
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

