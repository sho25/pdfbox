begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|encryption
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Provider
import|;
end_import

begin_comment
comment|/**  * Singleton which provides a security provider.  *   */
end_comment

begin_class
specifier|public
class|class
name|SecurityProvider
block|{
specifier|private
specifier|static
name|Provider
name|provider
init|=
literal|null
decl_stmt|;
specifier|private
name|SecurityProvider
parameter_list|()
block|{     }
comment|/**      * Returns the provider to be used for advanced encrypting/decrypting. Default is the BouncyCastleProvider.      *       * @return the security provider      *       * @throws IOException if the default provider can't be instantiated      */
specifier|public
specifier|static
name|Provider
name|getProvider
parameter_list|()
throws|throws
name|IOException
block|{
comment|// TODO synchronize access
if|if
condition|(
name|provider
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|Class
argument_list|<
name|Provider
argument_list|>
name|providerClass
init|=
operator|(
name|Class
argument_list|<
name|Provider
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
literal|"org.bouncycastle.jce.provider.BouncyCastleProvider"
argument_list|)
decl_stmt|;
name|provider
operator|=
name|providerClass
operator|.
name|getDeclaredConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
decl||
name|InstantiationException
decl||
name|IllegalAccessException
decl||
name|NoSuchMethodException
decl||
name|SecurityException
decl||
name|IllegalArgumentException
decl||
name|InvocationTargetException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
return|return
name|provider
return|;
block|}
comment|/**      * Set the provider to be used for advanced encrypting/decrypting.      *       * @param provider the security provider      */
specifier|public
specifier|static
name|void
name|setProvider
parameter_list|(
name|Provider
name|provider
parameter_list|)
block|{
name|SecurityProvider
operator|.
name|provider
operator|=
name|provider
expr_stmt|;
block|}
block|}
end_class

end_unit

