begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|documentnavigation
operator|.
name|outline
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|COSObjectable
import|;
end_import

begin_comment
comment|/**  * This represents an node in an outline in a pdf document.  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.3 $  */
end_comment

begin_class
specifier|public
class|class
name|PDOutlineNode
implements|implements
name|COSObjectable
block|{
comment|/**      * The dictionary for this node.      */
specifier|protected
name|COSDictionary
name|node
decl_stmt|;
comment|/**      * Default Constructor.      */
specifier|public
name|PDOutlineNode
parameter_list|()
block|{
name|node
operator|=
operator|new
name|COSDictionary
argument_list|()
expr_stmt|;
block|}
comment|/**      * Default Constructor.      *      * @param dict The dictionary storage.      */
specifier|public
name|PDOutlineNode
parameter_list|(
name|COSDictionary
name|dict
parameter_list|)
block|{
name|node
operator|=
name|dict
expr_stmt|;
block|}
comment|/**      * Convert this standard java object to a COS object.      *      * @return The cos object that matches this Java object.      */
annotation|@
name|Override
specifier|public
name|COSBase
name|getCOSObject
parameter_list|()
block|{
return|return
name|node
return|;
block|}
comment|/**      * Convert this standard java object to a COS object.      *      * @return The cos object that matches this Java object.      */
specifier|public
name|COSDictionary
name|getCOSDictionary
parameter_list|()
block|{
return|return
name|node
return|;
block|}
comment|/**      * Get the parent of this object.  This will either be a DocumentOutline or an OutlineItem.      *      * @return The parent of this object, or null if this is the document outline and there      * is no parent.      */
specifier|protected
name|PDOutlineNode
name|getParent
parameter_list|()
block|{
name|PDOutlineNode
name|retval
init|=
literal|null
decl_stmt|;
name|COSDictionary
name|parent
init|=
operator|(
name|COSDictionary
operator|)
name|node
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|PARENT
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|parent
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|PARENT
argument_list|)
operator|==
literal|null
condition|)
block|{
name|retval
operator|=
operator|new
name|PDDocumentOutline
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|retval
operator|=
operator|new
name|PDOutlineItem
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|retval
return|;
block|}
comment|/**      * Set the parent of this object, this is maintained by these objects and should not      * be called by any clients of PDFBox code.      *      * @param parent The parent of this object.      */
specifier|protected
name|void
name|setParent
parameter_list|(
name|PDOutlineNode
name|parent
parameter_list|)
block|{
name|node
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|PARENT
argument_list|,
name|parent
argument_list|)
expr_stmt|;
block|}
comment|/**      * append a child node to this node.      *      * @param outlineNode The node to add.      */
specifier|public
name|void
name|appendChild
parameter_list|(
name|PDOutlineItem
name|outlineNode
parameter_list|)
block|{
name|outlineNode
operator|.
name|setParent
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|getFirstChild
argument_list|()
operator|==
literal|null
condition|)
block|{
name|int
name|currentOpenCount
init|=
name|getOpenCount
argument_list|()
decl_stmt|;
name|setFirstChild
argument_list|(
name|outlineNode
argument_list|)
expr_stmt|;
comment|//1 for the the item we are adding;
name|int
name|numberOfOpenNodesWeAreAdding
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|outlineNode
operator|.
name|isNodeOpen
argument_list|()
condition|)
block|{
name|numberOfOpenNodesWeAreAdding
operator|+=
name|outlineNode
operator|.
name|getOpenCount
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|isNodeOpen
argument_list|()
condition|)
block|{
name|setOpenCount
argument_list|(
name|currentOpenCount
operator|+
name|numberOfOpenNodesWeAreAdding
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setOpenCount
argument_list|(
name|currentOpenCount
operator|-
name|numberOfOpenNodesWeAreAdding
argument_list|)
expr_stmt|;
block|}
name|updateParentOpenCount
argument_list|(
name|numberOfOpenNodesWeAreAdding
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PDOutlineItem
name|previousLastChild
init|=
name|getLastChild
argument_list|()
decl_stmt|;
name|previousLastChild
operator|.
name|insertSiblingAfter
argument_list|(
name|outlineNode
argument_list|)
expr_stmt|;
block|}
name|PDOutlineItem
name|lastNode
init|=
name|outlineNode
decl_stmt|;
while|while
condition|(
name|lastNode
operator|.
name|getNextSibling
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|lastNode
operator|=
name|lastNode
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
name|setLastChild
argument_list|(
name|lastNode
argument_list|)
expr_stmt|;
block|}
comment|/**      * Return the first child or null if there is no child.      *      * @return The first child.      */
specifier|public
name|PDOutlineItem
name|getFirstChild
parameter_list|()
block|{
name|PDOutlineItem
name|first
init|=
literal|null
decl_stmt|;
name|COSDictionary
name|firstDic
init|=
operator|(
name|COSDictionary
operator|)
name|node
operator|.
name|getDictionaryObject
argument_list|(
literal|"First"
argument_list|)
decl_stmt|;
if|if
condition|(
name|firstDic
operator|!=
literal|null
condition|)
block|{
name|first
operator|=
operator|new
name|PDOutlineItem
argument_list|(
name|firstDic
argument_list|)
expr_stmt|;
block|}
return|return
name|first
return|;
block|}
comment|/**      * Set the first child, this will be maintained by this class.      *      * @param outlineNode The new first child.      */
specifier|protected
name|void
name|setFirstChild
parameter_list|(
name|PDOutlineNode
name|outlineNode
parameter_list|)
block|{
name|node
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|FIRST
argument_list|,
name|outlineNode
argument_list|)
expr_stmt|;
block|}
comment|/**      * Return the last child or null if there is no child.      *      * @return The last child.      */
specifier|public
name|PDOutlineItem
name|getLastChild
parameter_list|()
block|{
name|PDOutlineItem
name|last
init|=
literal|null
decl_stmt|;
name|COSDictionary
name|lastDic
init|=
operator|(
name|COSDictionary
operator|)
name|node
operator|.
name|getDictionaryObject
argument_list|(
literal|"Last"
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastDic
operator|!=
literal|null
condition|)
block|{
name|last
operator|=
operator|new
name|PDOutlineItem
argument_list|(
name|lastDic
argument_list|)
expr_stmt|;
block|}
return|return
name|last
return|;
block|}
comment|/**      * Set the last child, this will be maintained by this class.      *      * @param outlineNode The new last child.      */
specifier|protected
name|void
name|setLastChild
parameter_list|(
name|PDOutlineNode
name|outlineNode
parameter_list|)
block|{
name|node
operator|.
name|setItem
argument_list|(
literal|"Last"
argument_list|,
name|outlineNode
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the number of open nodes.  Or a negative number if this node      * is closed.  See PDF Reference for more details.  This value      * is updated as you append children and siblings.      *      * @return The Count attribute of the outline dictionary.      */
specifier|public
name|int
name|getOpenCount
parameter_list|()
block|{
return|return
name|node
operator|.
name|getInt
argument_list|(
literal|"Count"
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**      * Set the open count.  This number is automatically managed for you      * when you add items to the outline.      *      * @param openCount The new open cound.      */
specifier|protected
name|void
name|setOpenCount
parameter_list|(
name|int
name|openCount
parameter_list|)
block|{
name|node
operator|.
name|setInt
argument_list|(
literal|"Count"
argument_list|,
name|openCount
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will set this node to be open when it is shown in the viewer.  By default, when      * a new node is created it will be closed.      * This will do nothing if the node is already open.      */
specifier|public
name|void
name|openNode
parameter_list|()
block|{
comment|//if the node is already open then do nothing.
if|if
condition|(
operator|!
name|isNodeOpen
argument_list|()
condition|)
block|{
name|int
name|openChildrenCount
init|=
literal|0
decl_stmt|;
name|PDOutlineItem
name|currentChild
init|=
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|currentChild
operator|!=
literal|null
condition|)
block|{
comment|//first increase by one for the current child
name|openChildrenCount
operator|++
expr_stmt|;
comment|//then increase by the number of open nodes the child has
if|if
condition|(
name|currentChild
operator|.
name|isNodeOpen
argument_list|()
condition|)
block|{
name|openChildrenCount
operator|+=
name|currentChild
operator|.
name|getOpenCount
argument_list|()
expr_stmt|;
block|}
name|currentChild
operator|=
name|currentChild
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
name|setOpenCount
argument_list|(
name|openChildrenCount
argument_list|)
expr_stmt|;
name|updateParentOpenCount
argument_list|(
name|openChildrenCount
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Close this node.      *      */
specifier|public
name|void
name|closeNode
parameter_list|()
block|{
comment|//if the node is already closed then do nothing.
if|if
condition|(
name|isNodeOpen
argument_list|()
condition|)
block|{
name|int
name|openCount
init|=
name|getOpenCount
argument_list|()
decl_stmt|;
name|updateParentOpenCount
argument_list|(
operator|-
name|openCount
argument_list|)
expr_stmt|;
name|setOpenCount
argument_list|(
operator|-
name|openCount
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Node is open if the open count is greater than zero.      * @return true if this node is open.      */
specifier|public
name|boolean
name|isNodeOpen
parameter_list|()
block|{
return|return
name|getOpenCount
argument_list|()
operator|>
literal|0
return|;
block|}
comment|/**      * The count parameter needs to be updated when you add or remove elements to      * the outline.  When you add an element at a lower level then you need to      * increase all of the parents.      *      * @param amount The amount to update by.      */
specifier|protected
name|void
name|updateParentOpenCount
parameter_list|(
name|int
name|amount
parameter_list|)
block|{
name|PDOutlineNode
name|parent
init|=
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|int
name|currentCount
init|=
name|parent
operator|.
name|getOpenCount
argument_list|()
decl_stmt|;
comment|//if the currentCount is negative or it is absent then
comment|//we will treat it as negative.  The default is to be negative.
name|boolean
name|negative
init|=
name|currentCount
operator|<
literal|0
operator|||
name|parent
operator|.
name|getCOSDictionary
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
literal|"Count"
argument_list|)
operator|==
literal|null
decl_stmt|;
name|currentCount
operator|=
name|Math
operator|.
name|abs
argument_list|(
name|currentCount
argument_list|)
expr_stmt|;
name|currentCount
operator|+=
name|amount
expr_stmt|;
if|if
condition|(
name|negative
condition|)
block|{
name|currentCount
operator|=
operator|-
name|currentCount
expr_stmt|;
block|}
name|parent
operator|.
name|setOpenCount
argument_list|(
name|currentCount
argument_list|)
expr_stmt|;
comment|//recursively call parent to update count, but the parents count is only
comment|//updated if this is an open node
if|if
condition|(
operator|!
name|negative
condition|)
block|{
name|parent
operator|.
name|updateParentOpenCount
argument_list|(
name|amount
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

