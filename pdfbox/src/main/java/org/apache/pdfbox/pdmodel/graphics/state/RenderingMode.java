begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|state
package|;
end_package

begin_comment
comment|/**  * Text Rendering Mode.  *  * @author John Hewson  */
end_comment

begin_enum
specifier|public
enum|enum
name|RenderingMode
block|{
comment|/**      * Fill text.      */
name|FILL
argument_list|(
literal|0
argument_list|)
block|,
comment|/**      * Stroke text.      */
name|STROKE
argument_list|(
literal|1
argument_list|)
block|,
comment|/**      * Fill, then stroke text.      */
name|FILL_STROKE
argument_list|(
literal|2
argument_list|)
block|,
comment|/**      * Neither fill nor stroke text (invisible)      */
name|NEITHER
argument_list|(
literal|3
argument_list|)
block|,
comment|/**      * Fill text and add to path for clipping.      */
name|FILL_CLIP
argument_list|(
literal|4
argument_list|)
block|,
comment|/**      * Stroke text and add to path for clipping.      */
name|STROKE_CLIP
argument_list|(
literal|5
argument_list|)
block|,
comment|/**      * Fill, then stroke text and add to path for clipping.      */
name|FILL_STROKE_CLIP
argument_list|(
literal|6
argument_list|)
block|,
comment|/**      * Add text to path for clipping.      */
name|NEITHER_CLIP
argument_list|(
literal|7
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|RenderingMode
index|[]
name|VALUES
init|=
name|RenderingMode
operator|.
name|values
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|RenderingMode
name|fromInt
parameter_list|(
name|int
name|value
parameter_list|)
block|{
return|return
name|VALUES
index|[
name|value
index|]
return|;
block|}
specifier|private
specifier|final
name|int
name|value
decl_stmt|;
name|RenderingMode
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
comment|/**      * Returns the integer value of this mode, as used in a PDF file.      */
specifier|public
name|int
name|intValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
comment|/**      * Returns true is this mode fills text.      */
specifier|public
name|boolean
name|isFill
parameter_list|()
block|{
return|return
name|this
operator|==
name|FILL
operator|||
name|this
operator|==
name|FILL_STROKE
operator|||
name|this
operator|==
name|FILL_CLIP
operator|||
name|this
operator|==
name|FILL_STROKE_CLIP
return|;
block|}
comment|/**      * Returns true is this mode strokes text.      */
specifier|public
name|boolean
name|isStroke
parameter_list|()
block|{
return|return
name|this
operator|==
name|STROKE
operator|||
name|this
operator|==
name|FILL_STROKE
operator|||
name|this
operator|==
name|STROKE
operator|||
name|this
operator|==
name|FILL_STROKE_CLIP
return|;
block|}
comment|/**      * Returns true is this mode clips text.      */
specifier|public
name|boolean
name|isClip
parameter_list|()
block|{
return|return
name|this
operator|==
name|FILL_CLIP
operator|||
name|this
operator|==
name|STROKE_CLIP
operator|||
name|this
operator|==
name|FILL_STROKE_CLIP
operator|||
name|this
operator|==
name|NEITHER_CLIP
return|;
block|}
block|}
end_enum

end_unit

