begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|action
operator|.
name|type
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_comment
comment|/**  * This represents a URI action that can be executed in a PDF document.  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @author Panagiotis Toumasis (ptoumasis@mail.gr)  * @version $Revision: 1.3 $  */
end_comment

begin_class
specifier|public
class|class
name|PDActionURI
extends|extends
name|PDAction
block|{
comment|/**      * This type of action this object represents.      */
specifier|public
specifier|static
specifier|final
name|String
name|SUB_TYPE
init|=
literal|"URI"
decl_stmt|;
comment|/**      * Default constructor.      */
specifier|public
name|PDActionURI
parameter_list|()
block|{
name|action
operator|=
operator|new
name|COSDictionary
argument_list|()
expr_stmt|;
name|setSubType
argument_list|(
name|SUB_TYPE
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor.      *      * @param a The action dictionary.      */
specifier|public
name|PDActionURI
parameter_list|(
name|COSDictionary
name|a
parameter_list|)
block|{
name|super
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
comment|/**      * Convert this standard java object to a COS object.      *      * @return The cos object that matches this Java object.      */
specifier|public
name|COSBase
name|getCOSObject
parameter_list|()
block|{
return|return
name|action
return|;
block|}
comment|/**      * Convert this standard java object to a COS object.      *      * @return The cos object that matches this Java object.      */
specifier|public
name|COSDictionary
name|getCOSDictionary
parameter_list|()
block|{
return|return
name|action
return|;
block|}
comment|/**      * This will get the type of action that the actions dictionary describes.      * It must be URI for a URI action.      *      * @return The S entry of the specific URI action dictionary.      */
specifier|public
name|String
name|getS
parameter_list|()
block|{
return|return
name|action
operator|.
name|getNameAsString
argument_list|(
literal|"S"
argument_list|)
return|;
block|}
comment|/**      * This will set the type of action that the actions dictionary describes.      * It must be URI for a URI action.      *      * @param s The URI action.      */
specifier|public
name|void
name|setS
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|action
operator|.
name|setName
argument_list|(
literal|"S"
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the uniform resource identifier to resolve, encoded in 7-bit ASCII.      *      * @return The URI entry of the specific URI action dictionary.      */
specifier|public
name|String
name|getURI
parameter_list|()
block|{
return|return
name|action
operator|.
name|getString
argument_list|(
literal|"URI"
argument_list|)
return|;
block|}
comment|/**      * This will set the uniform resource identifier to resolve, encoded in 7-bit ASCII.      *      * @param uri The uniform resource identifier.      */
specifier|public
name|void
name|setURI
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|action
operator|.
name|setString
argument_list|(
literal|"URI"
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will specify whether to track the mouse position when the URI is resolved.      * Default value: false.      * This entry applies only to actions triggered by the user's clicking an annotation;      * it is ignored for actions associated with outline items or with a document's OpenAction entry.      *      * @return A flag specifying whether to track the mouse position when the URI is resolved.      */
specifier|public
name|boolean
name|shouldTrackMousePosition
parameter_list|()
block|{
return|return
name|this
operator|.
name|action
operator|.
name|getBoolean
argument_list|(
literal|"IsMap"
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * This will specify whether to track the mouse position when the URI is resolved.      *      * @param value The flag value.      */
specifier|public
name|void
name|setTrackMousePosition
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|this
operator|.
name|action
operator|.
name|setBoolean
argument_list|(
literal|"IsMap"
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|// TODO this must go into PDURIDictionary
comment|/**      * This will get the base URI to be used in resolving relative URI references.      * URI actions within the document may specify URIs in partial form, to be interpreted      * relative to this base address. If no base URI is specified, such partial URIs      * will be interpreted relative to the location of the document itself.      * The use of this entry is parallel to that of the body element&lt;BASE&gt;, as described      * in the HTML 4.01 Specification.      *      * @return The URI entry of the specific URI dictionary.      * @deprecated use {@link PDURIDictionary#getBase()} instead      */
specifier|public
name|String
name|getBase
parameter_list|()
block|{
return|return
name|action
operator|.
name|getString
argument_list|(
literal|"Base"
argument_list|)
return|;
block|}
comment|// TODO this must go into PDURIDictionary
comment|/**      * This will set the base URI to be used in resolving relative URI references.      * URI actions within the document may specify URIs in partial form, to be interpreted      * relative to this base address. If no base URI is specified, such partial URIs      * will be interpreted relative to the location of the document itself.      * The use of this entry is parallel to that of the body element&lt;BASE&gt;, as described      * in the HTML 4.01 Specification.      *      * @param base The the base URI to be used.      * @deprecated use {@link PDURIDictionary#setBase(String)} instead      */
specifier|public
name|void
name|setBase
parameter_list|(
name|String
name|base
parameter_list|)
block|{
name|action
operator|.
name|setString
argument_list|(
literal|"Base"
argument_list|,
name|base
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

