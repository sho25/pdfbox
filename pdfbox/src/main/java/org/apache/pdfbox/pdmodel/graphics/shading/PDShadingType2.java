begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|shading
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_comment
comment|/**  * This represents resources for an axial shading.  *  * @version $Revision: 1.0 $  */
end_comment

begin_class
specifier|public
class|class
name|PDShadingType2
extends|extends
name|PDShadingResources
block|{
specifier|private
name|COSArray
name|coords
init|=
literal|null
decl_stmt|;
specifier|private
name|COSArray
name|domain
init|=
literal|null
decl_stmt|;
specifier|private
name|COSArray
name|extend
init|=
literal|null
decl_stmt|;
comment|/**      * Constructor using the given shading dictionary.      *      * @param shadingDictionary The dictionary for this shading.      */
specifier|public
name|PDShadingType2
parameter_list|(
name|COSDictionary
name|shadingDictionary
parameter_list|)
block|{
name|super
argument_list|(
name|shadingDictionary
argument_list|)
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|int
name|getShadingType
parameter_list|()
block|{
return|return
name|PDShadingResources
operator|.
name|SHADING_TYPE2
return|;
block|}
comment|/**      * This will get the optional Extend values for this shading.      *      * @return the extend values      */
specifier|public
name|COSArray
name|getExtend
parameter_list|()
block|{
if|if
condition|(
name|extend
operator|==
literal|null
condition|)
block|{
name|extend
operator|=
operator|(
name|COSArray
operator|)
name|getCOSDictionary
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|EXTEND
argument_list|)
expr_stmt|;
block|}
return|return
name|extend
return|;
block|}
comment|/**      * Sets the optional Extend entry for this shading.      *      * @param newExtend the extend array      */
specifier|public
name|void
name|setExtend
parameter_list|(
name|COSArray
name|newExtend
parameter_list|)
block|{
name|extend
operator|=
name|newExtend
expr_stmt|;
if|if
condition|(
name|newExtend
operator|==
literal|null
condition|)
block|{
name|getCOSDictionary
argument_list|()
operator|.
name|removeItem
argument_list|(
name|COSName
operator|.
name|EXTEND
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getCOSDictionary
argument_list|()
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|EXTEND
argument_list|,
name|newExtend
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This will get the optional Domain values for this shading.      *      * @return the domain values      */
specifier|public
name|COSArray
name|getDomain
parameter_list|()
block|{
if|if
condition|(
name|domain
operator|==
literal|null
condition|)
block|{
name|domain
operator|=
operator|(
name|COSArray
operator|)
name|getCOSDictionary
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|DOMAIN
argument_list|)
expr_stmt|;
block|}
return|return
name|domain
return|;
block|}
comment|/**      * Sets the optional Domain entry for this shading.      *      * @param newDomain the domain array      */
specifier|public
name|void
name|setDomain
parameter_list|(
name|COSArray
name|newDomain
parameter_list|)
block|{
name|domain
operator|=
name|newDomain
expr_stmt|;
if|if
condition|(
name|newDomain
operator|==
literal|null
condition|)
block|{
name|getCOSDictionary
argument_list|()
operator|.
name|removeItem
argument_list|(
name|COSName
operator|.
name|DOMAIN
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getCOSDictionary
argument_list|()
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|DOMAIN
argument_list|,
name|newDomain
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This will get the Coords values for this shading.      *      * @return the coords values      */
specifier|public
name|COSArray
name|getCoords
parameter_list|()
block|{
if|if
condition|(
name|coords
operator|==
literal|null
condition|)
block|{
name|coords
operator|=
operator|(
name|COSArray
operator|)
name|getCOSDictionary
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|COORDS
argument_list|)
expr_stmt|;
block|}
return|return
name|coords
return|;
block|}
comment|/**      * Sets the Coords entry for this shading.      *      * @param newCoords the coords array      */
specifier|public
name|void
name|setCoords
parameter_list|(
name|COSArray
name|newCoords
parameter_list|)
block|{
name|coords
operator|=
name|newCoords
expr_stmt|;
if|if
condition|(
name|newCoords
operator|==
literal|null
condition|)
block|{
name|getCOSDictionary
argument_list|()
operator|.
name|removeItem
argument_list|(
name|COSName
operator|.
name|COORDS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getCOSDictionary
argument_list|()
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|COORDS
argument_list|,
name|newCoords
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

