begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|io
operator|.
name|RandomAccessBufferedFileInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdfparser
operator|.
name|BaseParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdfparser
operator|.
name|NonSequentialPDFParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdfwriter
operator|.
name|COSWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|COSArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDRectangle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|encryption
operator|.
name|AccessPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|encryption
operator|.
name|DecryptionMaterial
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|encryption
operator|.
name|PDEncryption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|encryption
operator|.
name|ProtectionPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|encryption
operator|.
name|SecurityHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|encryption
operator|.
name|SecurityHandlerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|encryption
operator|.
name|StandardDecryptionMaterial
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|encryption
operator|.
name|StandardProtectionPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|encryption
operator|.
name|StandardSecurityHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAppearanceDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAppearanceStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|digitalsignature
operator|.
name|PDSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|digitalsignature
operator|.
name|SignatureInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|digitalsignature
operator|.
name|SignatureOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|form
operator|.
name|PDAcroForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|form
operator|.
name|PDFieldTreeNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|form
operator|.
name|PDSignatureField
import|;
end_import

begin_comment
comment|/**  * This is the in-memory representation of the PDF document.  * The #close() method must be called once the document is no longer needed.  *   * @author Ben Litchfield  */
end_comment

begin_class
specifier|public
class|class
name|PDDocument
implements|implements
name|Closeable
block|{
specifier|private
specifier|final
name|COSDocument
name|document
decl_stmt|;
comment|// cached values
specifier|private
name|PDDocumentInformation
name|documentInformation
decl_stmt|;
specifier|private
name|PDDocumentCatalog
name|documentCatalog
decl_stmt|;
comment|// the encryption will be cached here. When the document is decrypted then
comment|// the COSDocument will not have an "Encrypt" dictionary anymore and this object must be used
specifier|private
name|PDEncryption
name|encryption
decl_stmt|;
comment|// holds a flag which tells us if we should remove all security from this documents.
specifier|private
name|boolean
name|allSecurityToBeRemoved
decl_stmt|;
comment|// keep tracking customized documentId for the trailer. If null, a new id will be generated
comment|// this ID doesn't represent the actual documentId from the trailer
specifier|private
name|Long
name|documentId
decl_stmt|;
comment|// the PDF parser
specifier|private
specifier|final
name|BaseParser
name|parser
decl_stmt|;
comment|// the File to read incremental data from
specifier|private
name|File
name|incrementalFile
decl_stmt|;
comment|// the access permissions of the document
specifier|private
name|AccessPermission
name|accessPermission
decl_stmt|;
comment|/**      * Creates an empty PDF document.      * You need to add at least one page for the document to be valid.      */
specifier|public
name|PDDocument
parameter_list|()
block|{
name|document
operator|=
operator|new
name|COSDocument
argument_list|()
expr_stmt|;
name|parser
operator|=
literal|null
expr_stmt|;
comment|// First we need a trailer
name|COSDictionary
name|trailer
init|=
operator|new
name|COSDictionary
argument_list|()
decl_stmt|;
name|document
operator|.
name|setTrailer
argument_list|(
name|trailer
argument_list|)
expr_stmt|;
comment|// Next we need the root dictionary.
name|COSDictionary
name|rootDictionary
init|=
operator|new
name|COSDictionary
argument_list|()
decl_stmt|;
name|trailer
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|ROOT
argument_list|,
name|rootDictionary
argument_list|)
expr_stmt|;
name|rootDictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|TYPE
argument_list|,
name|COSName
operator|.
name|CATALOG
argument_list|)
expr_stmt|;
name|rootDictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|VERSION
argument_list|,
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"1.4"
argument_list|)
argument_list|)
expr_stmt|;
comment|// next we need the pages tree structure
name|COSDictionary
name|pages
init|=
operator|new
name|COSDictionary
argument_list|()
decl_stmt|;
name|rootDictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|PAGES
argument_list|,
name|pages
argument_list|)
expr_stmt|;
name|pages
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|TYPE
argument_list|,
name|COSName
operator|.
name|PAGES
argument_list|)
expr_stmt|;
name|COSArray
name|kidsArray
init|=
operator|new
name|COSArray
argument_list|()
decl_stmt|;
name|pages
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|KIDS
argument_list|,
name|kidsArray
argument_list|)
expr_stmt|;
name|pages
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|COUNT
argument_list|,
name|COSInteger
operator|.
name|ZERO
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will add a page to the document. This is a convenience method, that will add the page to the root of the      * hierarchy and set the parent of the page to the root.      *       * @param page The page to add to the document.      */
specifier|public
name|void
name|addPage
parameter_list|(
name|PDPage
name|page
parameter_list|)
block|{
name|getPages
argument_list|()
operator|.
name|add
argument_list|(
name|page
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add a signature.      *       * @param sigObject is the PDSignatureField model      * @param signatureInterface is a interface which provides signing capabilities      * @throws IOException if there is an error creating required fields      */
specifier|public
name|void
name|addSignature
parameter_list|(
name|PDSignature
name|sigObject
parameter_list|,
name|SignatureInterface
name|signatureInterface
parameter_list|)
throws|throws
name|IOException
block|{
name|addSignature
argument_list|(
name|sigObject
argument_list|,
name|signatureInterface
argument_list|,
operator|new
name|SignatureOptions
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will add a signature to the document.      *       * @param sigObject is the PDSignatureField model      * @param signatureInterface is a interface which provides signing capabilities      * @param options signature options      * @throws IOException if there is an error creating required fields      */
specifier|public
name|void
name|addSignature
parameter_list|(
name|PDSignature
name|sigObject
parameter_list|,
name|SignatureInterface
name|signatureInterface
parameter_list|,
name|SignatureOptions
name|options
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Reserve content
comment|// We need to reserve some space for the signature. Some signatures including
comment|// big certificate chain and we need enough space to store it.
name|int
name|preferedSignatureSize
init|=
name|options
operator|.
name|getPreferedSignatureSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|preferedSignatureSize
operator|>
literal|0
condition|)
block|{
name|sigObject
operator|.
name|setContents
argument_list|(
operator|new
name|byte
index|[
name|preferedSignatureSize
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sigObject
operator|.
name|setContents
argument_list|(
operator|new
name|byte
index|[
literal|0x2500
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Reserve ByteRange
name|sigObject
operator|.
name|setByteRange
argument_list|(
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1000000000
block|,
literal|1000000000
block|,
literal|1000000000
block|}
argument_list|)
expr_stmt|;
name|getDocument
argument_list|()
operator|.
name|setSignatureInterface
argument_list|(
name|signatureInterface
argument_list|)
expr_stmt|;
comment|//
comment|// Create SignatureForm for signature
comment|// and appending it to the document
comment|//
comment|// Get the first page
name|PDDocumentCatalog
name|catalog
init|=
name|getDocumentCatalog
argument_list|()
decl_stmt|;
name|int
name|pageCount
init|=
name|catalog
operator|.
name|getPages
argument_list|()
operator|.
name|getCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|pageCount
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot sign an empty document"
argument_list|)
throw|;
block|}
name|int
name|startIndex
init|=
name|Math
operator|.
name|max
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|options
operator|.
name|getPage
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|,
name|pageCount
operator|-
literal|1
argument_list|)
decl_stmt|;
name|PDPage
name|page
init|=
name|catalog
operator|.
name|getPages
argument_list|()
operator|.
name|get
argument_list|(
name|startIndex
argument_list|)
decl_stmt|;
comment|// Get the AcroForm from the Root-Dictionary and append the annotation
name|PDAcroForm
name|acroForm
init|=
name|catalog
operator|.
name|getAcroForm
argument_list|()
decl_stmt|;
name|catalog
operator|.
name|getCOSObject
argument_list|()
operator|.
name|setNeedToBeUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|acroForm
operator|==
literal|null
condition|)
block|{
name|acroForm
operator|=
operator|new
name|PDAcroForm
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|catalog
operator|.
name|setAcroForm
argument_list|(
name|acroForm
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|acroForm
operator|.
name|getCOSObject
argument_list|()
operator|.
name|setNeedToBeUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// For invisible signatures, the annotation has a rectangle array with values [ 0 0 0 0 ]. This annotation is
comment|// usually attached to the viewed page when the signature is created. Despite not having an appearance, the
comment|// annotation AP and N dictionaries may be present in some versions of Acrobat. If present, N references the
comment|// DSBlankXObj (blank) XObject.
comment|// Create Annotation / Field for signature
name|List
argument_list|<
name|PDAnnotation
argument_list|>
name|annotations
init|=
name|page
operator|.
name|getAnnotations
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PDFieldTreeNode
argument_list|>
name|fields
init|=
name|acroForm
operator|.
name|getFields
argument_list|()
decl_stmt|;
name|PDSignatureField
name|signatureField
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
block|{
name|fields
operator|=
operator|new
name|ArrayList
argument_list|<
name|PDFieldTreeNode
argument_list|>
argument_list|()
expr_stmt|;
name|acroForm
operator|.
name|setFields
argument_list|(
name|fields
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PDFieldTreeNode
name|pdField
range|:
name|fields
control|)
block|{
if|if
condition|(
name|pdField
operator|instanceof
name|PDSignatureField
condition|)
block|{
name|PDSignature
name|signature
init|=
operator|(
operator|(
name|PDSignatureField
operator|)
name|pdField
operator|)
operator|.
name|getSignature
argument_list|()
decl_stmt|;
if|if
condition|(
name|signature
operator|!=
literal|null
operator|&&
name|signature
operator|.
name|getDictionary
argument_list|()
operator|.
name|equals
argument_list|(
name|sigObject
operator|.
name|getDictionary
argument_list|()
argument_list|)
condition|)
block|{
name|signatureField
operator|=
operator|(
name|PDSignatureField
operator|)
name|pdField
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|signatureField
operator|==
literal|null
condition|)
block|{
name|signatureField
operator|=
operator|new
name|PDSignatureField
argument_list|(
name|acroForm
argument_list|)
expr_stmt|;
name|signatureField
operator|.
name|setSignature
argument_list|(
name|sigObject
argument_list|)
expr_stmt|;
comment|// append the signature object
name|signatureField
operator|.
name|getWidget
argument_list|()
operator|.
name|setPage
argument_list|(
name|page
argument_list|)
expr_stmt|;
comment|// backward linking
block|}
comment|// Set the AcroForm Fields
name|List
argument_list|<
name|PDFieldTreeNode
argument_list|>
name|acroFormFields
init|=
name|acroForm
operator|.
name|getFields
argument_list|()
decl_stmt|;
name|acroForm
operator|.
name|getDictionary
argument_list|()
operator|.
name|setDirect
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|acroForm
operator|.
name|setSignaturesExist
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|acroForm
operator|.
name|setAppendOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|boolean
name|checkFields
init|=
literal|false
decl_stmt|;
for|for
control|(
name|PDFieldTreeNode
name|field
range|:
name|acroFormFields
control|)
block|{
if|if
condition|(
name|field
operator|instanceof
name|PDSignatureField
operator|&&
operator|(
operator|(
name|PDSignatureField
operator|)
name|field
operator|)
operator|.
name|getCOSObject
argument_list|()
operator|.
name|equals
argument_list|(
name|signatureField
operator|.
name|getCOSObject
argument_list|()
argument_list|)
condition|)
block|{
name|checkFields
operator|=
literal|true
expr_stmt|;
name|signatureField
operator|.
name|getCOSObject
argument_list|()
operator|.
name|setNeedToBeUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|checkFields
condition|)
block|{
name|acroFormFields
operator|.
name|add
argument_list|(
name|signatureField
argument_list|)
expr_stmt|;
block|}
comment|// Get the object from the visual signature
name|COSDocument
name|visualSignature
init|=
name|options
operator|.
name|getVisualSignature
argument_list|()
decl_stmt|;
comment|// Distinction of case for visual and non-visual signature
if|if
condition|(
name|visualSignature
operator|==
literal|null
condition|)
comment|// non-visual signature
block|{
comment|// Set rectangle for non-visual signature to 0 0 0 0
name|signatureField
operator|.
name|getWidget
argument_list|()
operator|.
name|setRectangle
argument_list|(
operator|new
name|PDRectangle
argument_list|()
argument_list|)
expr_stmt|;
comment|// rectangle array [ 0 0 0 0 ]
comment|// Clear AcroForm / Set DefaultRessource
name|acroForm
operator|.
name|setDefaultResources
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// Set empty Appearance-Dictionary
name|PDAppearanceDictionary
name|ap
init|=
operator|new
name|PDAppearanceDictionary
argument_list|()
decl_stmt|;
name|COSStream
name|apsStream
init|=
name|getDocument
argument_list|()
operator|.
name|createCOSStream
argument_list|()
decl_stmt|;
name|apsStream
operator|.
name|createUnfilteredStream
argument_list|()
expr_stmt|;
name|PDAppearanceStream
name|aps
init|=
operator|new
name|PDAppearanceStream
argument_list|(
name|apsStream
argument_list|)
decl_stmt|;
name|COSDictionary
name|cosObject
init|=
operator|(
name|COSDictionary
operator|)
name|aps
operator|.
name|getCOSObject
argument_list|()
decl_stmt|;
name|cosObject
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|,
name|COSName
operator|.
name|FORM
argument_list|)
expr_stmt|;
name|cosObject
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|BBOX
argument_list|,
operator|new
name|PDRectangle
argument_list|()
argument_list|)
expr_stmt|;
name|ap
operator|.
name|setNormalAppearance
argument_list|(
name|aps
argument_list|)
expr_stmt|;
name|ap
operator|.
name|getCOSObject
argument_list|()
operator|.
name|setDirect
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|signatureField
operator|.
name|getWidget
argument_list|()
operator|.
name|setAppearance
argument_list|(
name|ap
argument_list|)
expr_stmt|;
block|}
else|else
comment|// visual signature
block|{
comment|// Obtain visual signature object
name|List
argument_list|<
name|COSObject
argument_list|>
name|cosObjects
init|=
name|visualSignature
operator|.
name|getObjects
argument_list|()
decl_stmt|;
name|boolean
name|annotNotFound
init|=
literal|true
decl_stmt|;
name|boolean
name|sigFieldNotFound
init|=
literal|true
decl_stmt|;
name|COSDictionary
name|acroFormDict
init|=
name|acroForm
operator|.
name|getDictionary
argument_list|()
decl_stmt|;
for|for
control|(
name|COSObject
name|cosObject
range|:
name|cosObjects
control|)
block|{
if|if
condition|(
operator|!
name|annotNotFound
operator|&&
operator|!
name|sigFieldNotFound
condition|)
block|{
break|break;
block|}
name|COSBase
name|base
init|=
name|cosObject
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|base
operator|instanceof
name|COSDictionary
condition|)
block|{
name|COSBase
name|ft
init|=
operator|(
operator|(
name|COSDictionary
operator|)
name|base
operator|)
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|FT
argument_list|)
decl_stmt|;
name|COSBase
name|type
init|=
operator|(
operator|(
name|COSDictionary
operator|)
name|base
operator|)
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|TYPE
argument_list|)
decl_stmt|;
name|COSBase
name|apDict
init|=
operator|(
operator|(
name|COSDictionary
operator|)
name|base
operator|)
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|AP
argument_list|)
decl_stmt|;
comment|// Search for signature annotation
if|if
condition|(
name|annotNotFound
operator|&&
name|COSName
operator|.
name|ANNOT
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|COSDictionary
name|cosBaseDict
init|=
operator|(
name|COSDictionary
operator|)
name|base
decl_stmt|;
comment|// Read and set the Rectangle for visual signature
name|COSArray
name|rectAry
init|=
operator|(
name|COSArray
operator|)
name|cosBaseDict
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|RECT
argument_list|)
decl_stmt|;
name|PDRectangle
name|rect
init|=
operator|new
name|PDRectangle
argument_list|(
name|rectAry
argument_list|)
decl_stmt|;
name|signatureField
operator|.
name|getWidget
argument_list|()
operator|.
name|setRectangle
argument_list|(
name|rect
argument_list|)
expr_stmt|;
name|annotNotFound
operator|=
literal|false
expr_stmt|;
block|}
comment|// Search for Signature-Field
if|if
condition|(
name|sigFieldNotFound
operator|&&
name|COSName
operator|.
name|SIG
operator|.
name|equals
argument_list|(
name|ft
argument_list|)
operator|&&
name|apDict
operator|!=
literal|null
condition|)
block|{
name|COSDictionary
name|cosBaseDict
init|=
operator|(
name|COSDictionary
operator|)
name|base
decl_stmt|;
comment|// read and set Appearance Dictionary
name|PDAppearanceDictionary
name|ap
init|=
operator|new
name|PDAppearanceDictionary
argument_list|(
operator|(
name|COSDictionary
operator|)
name|cosBaseDict
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|AP
argument_list|)
argument_list|)
decl_stmt|;
name|ap
operator|.
name|getCOSObject
argument_list|()
operator|.
name|setDirect
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|signatureField
operator|.
name|getWidget
argument_list|()
operator|.
name|setAppearance
argument_list|(
name|ap
argument_list|)
expr_stmt|;
comment|// read and set AcroForm DefaultResource
name|COSBase
name|dr
init|=
name|cosBaseDict
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|DR
argument_list|)
decl_stmt|;
if|if
condition|(
name|dr
operator|!=
literal|null
condition|)
block|{
name|dr
operator|.
name|setDirect
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dr
operator|.
name|setNeedToBeUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|acroFormDict
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|DR
argument_list|,
name|dr
argument_list|)
expr_stmt|;
block|}
name|sigFieldNotFound
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|annotNotFound
operator|||
name|sigFieldNotFound
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Template is missing required objects"
argument_list|)
throw|;
block|}
block|}
comment|// Get the annotations of the page and append the signature-annotation to it
comment|// take care that page and acroforms do not share the same array (if so, we don't need to add it twice)
if|if
condition|(
operator|!
operator|(
name|annotations
operator|instanceof
name|COSArrayList
operator|&&
name|acroFormFields
operator|instanceof
name|COSArrayList
operator|&&
operator|(
operator|(
name|COSArrayList
operator|)
name|annotations
operator|)
operator|.
name|toList
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|COSArrayList
operator|)
name|acroFormFields
operator|)
operator|.
name|toList
argument_list|()
argument_list|)
operator|&&
name|checkFields
operator|)
condition|)
block|{
name|annotations
operator|.
name|add
argument_list|(
name|signatureField
operator|.
name|getWidget
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|page
operator|.
name|getCOSObject
argument_list|()
operator|.
name|setNeedToBeUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will add a signature field to the document.      *       * @param sigFields are the PDSignatureFields that should be added to the document      * @param signatureInterface is a interface which provides signing capabilities      * @param options signature options      * @throws IOException if there is an error creating required fields      */
specifier|public
name|void
name|addSignatureField
parameter_list|(
name|List
argument_list|<
name|PDSignatureField
argument_list|>
name|sigFields
parameter_list|,
name|SignatureInterface
name|signatureInterface
parameter_list|,
name|SignatureOptions
name|options
parameter_list|)
throws|throws
name|IOException
block|{
name|PDDocumentCatalog
name|catalog
init|=
name|getDocumentCatalog
argument_list|()
decl_stmt|;
name|catalog
operator|.
name|getCOSObject
argument_list|()
operator|.
name|setNeedToBeUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|PDAcroForm
name|acroForm
init|=
name|catalog
operator|.
name|getAcroForm
argument_list|()
decl_stmt|;
if|if
condition|(
name|acroForm
operator|==
literal|null
condition|)
block|{
name|acroForm
operator|=
operator|new
name|PDAcroForm
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|catalog
operator|.
name|setAcroForm
argument_list|(
name|acroForm
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|acroForm
operator|.
name|getCOSObject
argument_list|()
operator|.
name|setNeedToBeUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|COSDictionary
name|acroFormDict
init|=
name|acroForm
operator|.
name|getDictionary
argument_list|()
decl_stmt|;
name|acroFormDict
operator|.
name|setDirect
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|acroFormDict
operator|.
name|setNeedToBeUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|acroForm
operator|.
name|isSignaturesExist
argument_list|()
condition|)
block|{
name|acroForm
operator|.
name|setSignaturesExist
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// 1 if at least one signature field is available
block|}
name|List
argument_list|<
name|PDFieldTreeNode
argument_list|>
name|field
init|=
name|acroForm
operator|.
name|getFields
argument_list|()
decl_stmt|;
for|for
control|(
name|PDSignatureField
name|sigField
range|:
name|sigFields
control|)
block|{
name|PDSignature
name|sigObject
init|=
name|sigField
operator|.
name|getSignature
argument_list|()
decl_stmt|;
name|sigField
operator|.
name|getCOSObject
argument_list|()
operator|.
name|setNeedToBeUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Check if the field already exist
name|boolean
name|checkFields
init|=
literal|false
decl_stmt|;
for|for
control|(
name|PDFieldTreeNode
name|fieldNode
range|:
name|field
control|)
block|{
if|if
condition|(
name|fieldNode
operator|instanceof
name|PDSignatureField
operator|&&
name|fieldNode
operator|.
name|getCOSObject
argument_list|()
operator|.
name|equals
argument_list|(
name|sigField
operator|.
name|getCOSObject
argument_list|()
argument_list|)
condition|)
block|{
name|checkFields
operator|=
literal|true
expr_stmt|;
name|sigField
operator|.
name|getCOSObject
argument_list|()
operator|.
name|setNeedToBeUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|checkFields
condition|)
block|{
name|field
operator|.
name|add
argument_list|(
name|sigField
argument_list|)
expr_stmt|;
block|}
comment|// Check if we need to add a signature
if|if
condition|(
name|sigField
operator|.
name|getSignature
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sigField
operator|.
name|getCOSObject
argument_list|()
operator|.
name|setNeedToBeUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|options
operator|==
literal|null
condition|)
block|{                  }
name|addSignature
argument_list|(
name|sigField
operator|.
name|getSignature
argument_list|()
argument_list|,
name|signatureInterface
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Remove the page from the document.      *       * @param page The page to remove from the document.      */
specifier|public
name|void
name|removePage
parameter_list|(
name|PDPage
name|page
parameter_list|)
block|{
name|getPages
argument_list|()
operator|.
name|remove
argument_list|(
name|page
argument_list|)
expr_stmt|;
block|}
comment|/**      * Remove the page from the document.      *       * @param pageNumber 0 based index to page number.      */
specifier|public
name|void
name|removePage
parameter_list|(
name|int
name|pageNumber
parameter_list|)
block|{
name|getPages
argument_list|()
operator|.
name|remove
argument_list|(
name|pageNumber
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will import and copy the contents from another location. Currently the content stream is stored in a scratch      * file. The scratch file is associated with the document. If you are adding a page to this document from another      * document and want to copy the contents to this document's scratch file then use this method otherwise just use      * the addPage method.      *       * @param page The page to import.      * @return The page that was imported.      *       * @throws IOException If there is an error copying the page.      */
specifier|public
name|PDPage
name|importPage
parameter_list|(
name|PDPage
name|page
parameter_list|)
throws|throws
name|IOException
block|{
name|PDPage
name|importedPage
init|=
operator|new
name|PDPage
argument_list|(
operator|new
name|COSDictionary
argument_list|(
name|page
operator|.
name|getCOSObject
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
name|OutputStream
name|os
init|=
literal|null
decl_stmt|;
try|try
block|{
name|PDStream
name|src
init|=
name|page
operator|.
name|getStream
argument_list|()
decl_stmt|;
if|if
condition|(
name|src
operator|!=
literal|null
condition|)
block|{
name|PDStream
name|dest
init|=
operator|new
name|PDStream
argument_list|(
name|document
operator|.
name|createCOSStream
argument_list|()
argument_list|)
decl_stmt|;
name|dest
operator|.
name|addCompression
argument_list|()
expr_stmt|;
name|importedPage
operator|.
name|setContents
argument_list|(
name|dest
argument_list|)
expr_stmt|;
name|os
operator|=
name|dest
operator|.
name|createOutputStream
argument_list|()
expr_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|10240
index|]
decl_stmt|;
name|int
name|amountRead
decl_stmt|;
name|is
operator|=
name|src
operator|.
name|createInputStream
argument_list|()
expr_stmt|;
while|while
condition|(
operator|(
name|amountRead
operator|=
name|is
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
literal|10240
argument_list|)
operator|)
operator|>
operator|-
literal|1
condition|)
block|{
name|os
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|amountRead
argument_list|)
expr_stmt|;
block|}
block|}
name|addPage
argument_list|(
name|importedPage
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|os
operator|!=
literal|null
condition|)
block|{
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|importedPage
return|;
block|}
comment|/**      * Constructor that uses an existing document. The COSDocument that is passed in must be valid.      *       * @param doc The COSDocument that this document wraps.      */
specifier|public
name|PDDocument
parameter_list|(
name|COSDocument
name|doc
parameter_list|)
block|{
name|this
argument_list|(
name|doc
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor that uses an existing document. The COSDocument that is passed in must be valid.      *       * @param doc The COSDocument that this document wraps.      * @param usedParser the parser which is used to read the pdf      */
specifier|public
name|PDDocument
parameter_list|(
name|COSDocument
name|doc
parameter_list|,
name|BaseParser
name|usedParser
parameter_list|)
block|{
name|this
argument_list|(
name|doc
argument_list|,
name|usedParser
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor that uses an existing document. The COSDocument that is passed in must be valid.      *       * @param doc The COSDocument that this document wraps.      * @param usedParser the parser which is used to read the pdf      * @param permission he access permissions of the pdf      *       */
specifier|public
name|PDDocument
parameter_list|(
name|COSDocument
name|doc
parameter_list|,
name|BaseParser
name|usedParser
parameter_list|,
name|AccessPermission
name|permission
parameter_list|)
block|{
name|document
operator|=
name|doc
expr_stmt|;
name|parser
operator|=
name|usedParser
expr_stmt|;
name|accessPermission
operator|=
name|permission
expr_stmt|;
block|}
comment|/**      * This will get the low level document.      *       * @return The document that this layer sits on top of.      */
specifier|public
name|COSDocument
name|getDocument
parameter_list|()
block|{
return|return
name|document
return|;
block|}
comment|/**      * This will get the document info dictionary. This is guaranteed to not return null.      *       * @return The documents /Info dictionary      */
specifier|public
name|PDDocumentInformation
name|getDocumentInformation
parameter_list|()
block|{
if|if
condition|(
name|documentInformation
operator|==
literal|null
condition|)
block|{
name|COSDictionary
name|trailer
init|=
name|document
operator|.
name|getTrailer
argument_list|()
decl_stmt|;
name|COSDictionary
name|infoDic
init|=
operator|(
name|COSDictionary
operator|)
name|trailer
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|INFO
argument_list|)
decl_stmt|;
if|if
condition|(
name|infoDic
operator|==
literal|null
condition|)
block|{
name|infoDic
operator|=
operator|new
name|COSDictionary
argument_list|()
expr_stmt|;
name|trailer
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|INFO
argument_list|,
name|infoDic
argument_list|)
expr_stmt|;
block|}
name|documentInformation
operator|=
operator|new
name|PDDocumentInformation
argument_list|(
name|infoDic
argument_list|)
expr_stmt|;
block|}
return|return
name|documentInformation
return|;
block|}
comment|/**      * This will set the document information for this document.      *       * @param info The updated document information.      */
specifier|public
name|void
name|setDocumentInformation
parameter_list|(
name|PDDocumentInformation
name|info
parameter_list|)
block|{
name|documentInformation
operator|=
name|info
expr_stmt|;
name|document
operator|.
name|getTrailer
argument_list|()
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|INFO
argument_list|,
name|info
operator|.
name|getDictionary
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the document CATALOG. This is guaranteed to not return null.      *       * @return The documents /Root dictionary      */
specifier|public
name|PDDocumentCatalog
name|getDocumentCatalog
parameter_list|()
block|{
if|if
condition|(
name|documentCatalog
operator|==
literal|null
condition|)
block|{
name|COSDictionary
name|trailer
init|=
name|document
operator|.
name|getTrailer
argument_list|()
decl_stmt|;
name|COSBase
name|dictionary
init|=
name|trailer
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|ROOT
argument_list|)
decl_stmt|;
if|if
condition|(
name|dictionary
operator|instanceof
name|COSDictionary
condition|)
block|{
name|documentCatalog
operator|=
operator|new
name|PDDocumentCatalog
argument_list|(
name|this
argument_list|,
operator|(
name|COSDictionary
operator|)
name|dictionary
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|documentCatalog
operator|=
operator|new
name|PDDocumentCatalog
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|documentCatalog
return|;
block|}
comment|/**      * This will tell if this document is encrypted or not.      *       * @return true If this document is encrypted.      */
specifier|public
name|boolean
name|isEncrypted
parameter_list|()
block|{
return|return
name|document
operator|.
name|isEncrypted
argument_list|()
return|;
block|}
comment|/**      * @deprecated Use {@link #getEncryption()} instead.      *      * @return The encryption dictionary(most likely a PDStandardEncryption object)      */
annotation|@
name|Deprecated
specifier|public
name|PDEncryption
name|getEncryptionDictionary
parameter_list|()
block|{
return|return
name|getEncryption
argument_list|()
return|;
block|}
comment|/**      * This will get the encryption dictionary for this document. This will still return the parameters if the document      * was decrypted. As the encryption architecture in PDF documents is plugable this returns an abstract class,      * but the only supported subclass at this time is a      * PDStandardEncryption object.      *      * @return The encryption dictionary(most likely a PDStandardEncryption object)      */
specifier|public
name|PDEncryption
name|getEncryption
parameter_list|()
block|{
if|if
condition|(
name|encryption
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|isEncrypted
argument_list|()
condition|)
block|{
name|encryption
operator|=
operator|new
name|PDEncryption
argument_list|(
name|document
operator|.
name|getEncryptionDictionary
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|encryption
return|;
block|}
comment|/**      * This will set the encryption dictionary for this document.      *       * @param encryption The encryption dictionary(most likely a PDStandardEncryption object)      *       * @throws IOException If there is an error determining which security handler to use.      */
specifier|public
name|void
name|setEncryptionDictionary
parameter_list|(
name|PDEncryption
name|encryption
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|encryption
operator|=
name|encryption
expr_stmt|;
block|}
comment|/**      * This will return the last signature.      *       * @return the last signature as<code>PDSignatureField</code>.      * @throws IOException if no document catalog can be found.      */
specifier|public
name|PDSignature
name|getLastSignatureDictionary
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|PDSignature
argument_list|>
name|signatureDictionaries
init|=
name|getSignatureDictionaries
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|signatureDictionaries
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|>
literal|0
condition|)
block|{
return|return
name|signatureDictionaries
operator|.
name|get
argument_list|(
name|size
operator|-
literal|1
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Retrieve all signature fields from the document.      *       * @return a<code>List</code> of<code>PDSignatureField</code>s      * @throws IOException if no document catalog can be found.      */
specifier|public
name|List
argument_list|<
name|PDSignatureField
argument_list|>
name|getSignatureFields
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|PDSignatureField
argument_list|>
name|fields
init|=
operator|new
name|LinkedList
argument_list|<
name|PDSignatureField
argument_list|>
argument_list|()
decl_stmt|;
name|PDAcroForm
name|acroForm
init|=
name|getDocumentCatalog
argument_list|()
operator|.
name|getAcroForm
argument_list|()
decl_stmt|;
if|if
condition|(
name|acroForm
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|COSDictionary
argument_list|>
name|signatureDictionary
init|=
name|document
operator|.
name|getSignatureFields
argument_list|(
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|COSDictionary
name|dict
range|:
name|signatureDictionary
control|)
block|{
name|fields
operator|.
name|add
argument_list|(
operator|new
name|PDSignatureField
argument_list|(
name|acroForm
argument_list|,
name|dict
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|fields
return|;
block|}
comment|/**      * Retrieve all signature dictionaries from the document.      *       * @return a<code>List</code> of<code>PDSignatureField</code>s      * @throws IOException if no document catalog can be found.      */
specifier|public
name|List
argument_list|<
name|PDSignature
argument_list|>
name|getSignatureDictionaries
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|COSDictionary
argument_list|>
name|signatureDictionary
init|=
name|document
operator|.
name|getSignatureDictionaries
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PDSignature
argument_list|>
name|signatures
init|=
operator|new
name|LinkedList
argument_list|<
name|PDSignature
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|COSDictionary
name|dict
range|:
name|signatureDictionary
control|)
block|{
name|signatures
operator|.
name|add
argument_list|(
operator|new
name|PDSignature
argument_list|(
name|dict
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|signatures
return|;
block|}
comment|/**      * This will decrypt a document.      *      * @deprecated This method is provided for compatibility reasons only. User should use the new      * security layer instead and the openProtection method especially.      *       * @param password Either the user or owner password.      *      * @throws IOException If there is an error getting the stream data.      */
annotation|@
name|Deprecated
specifier|public
name|void
name|decrypt
parameter_list|(
name|String
name|password
parameter_list|)
throws|throws
name|IOException
block|{
name|StandardDecryptionMaterial
name|m
init|=
operator|new
name|StandardDecryptionMaterial
argument_list|(
name|password
argument_list|)
decl_stmt|;
name|openProtection
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will<b>mark</b> a document to be encrypted. The actual encryption will occur when the document is saved.      *      * @deprecated This method is provided for compatibility reasons only. User should use the new security layer       * instead and the openProtection method especially.      *       * @param ownerPassword The owner password to encrypt the document.      * @param userPassword The user password to encrypt the document.       * @throws IOException If there is an error accessing the data.      */
annotation|@
name|Deprecated
specifier|public
name|void
name|encrypt
parameter_list|(
name|String
name|ownerPassword
parameter_list|,
name|String
name|userPassword
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|isEncrypted
argument_list|()
condition|)
block|{
name|encryption
operator|=
operator|new
name|PDEncryption
argument_list|()
expr_stmt|;
block|}
name|getEncryption
argument_list|()
operator|.
name|setSecurityHandler
argument_list|(
operator|new
name|StandardSecurityHandler
argument_list|(
operator|new
name|StandardProtectionPolicy
argument_list|(
name|ownerPassword
argument_list|,
name|userPassword
argument_list|,
operator|new
name|AccessPermission
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * The owner password that was passed into the encrypt method. You should never use this method. This will not      * longer be valid once encryption has occured.      *       * @return The owner password passed to the encrypt method.      *       * @deprecated Do not rely on this method anymore.      */
annotation|@
name|Deprecated
specifier|public
name|String
name|getOwnerPasswordForEncryption
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**      * The user password that was passed into the encrypt method. You should never use this method. This will not longer      * be valid once encryption has occured.      *       * @return The user password passed to the encrypt method.      *       * @deprecated Do not rely on this method anymore.      */
annotation|@
name|Deprecated
specifier|public
name|String
name|getUserPasswordForEncryption
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**      * Parses PDF with non sequential parser.      *       * @param file file to be loaded      *       * @return loaded document      *       * @throws IOException in case of a file reading or parsing error      */
specifier|public
specifier|static
name|PDDocument
name|load
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|load
argument_list|(
name|file
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Parses PDF with non sequential parser.      *       * @param file file to be loaded      * @param useScratchFiles enables the usage of a scratch file if set to true      *       * @return loaded document      *       * @throws IOException in case of a file reading or parsing error      */
specifier|public
specifier|static
name|PDDocument
name|load
parameter_list|(
name|File
name|file
parameter_list|,
name|boolean
name|useScratchFiles
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|load
argument_list|(
name|file
argument_list|,
literal|""
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|useScratchFiles
argument_list|)
return|;
block|}
comment|/**      * Parses PDF with non sequential parser.      *       * @param file file to be loaded      * @param password password to be used for decryption      *       * @return loaded document      *       * @throws IOException in case of a file reading or parsing error      */
specifier|public
specifier|static
name|PDDocument
name|load
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|load
argument_list|(
name|file
argument_list|,
name|password
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Parses PDF with non sequential parser.      *       * @param file file to be loaded      * @param password password to be used for decryption      * @param useScratchFiles enables the usage of a scratch file if set to true      *       * @return loaded document      *       * @throws IOException in case of a file reading or parsing error      */
specifier|public
specifier|static
name|PDDocument
name|load
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|password
parameter_list|,
name|boolean
name|useScratchFiles
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|load
argument_list|(
name|file
argument_list|,
name|password
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|useScratchFiles
argument_list|)
return|;
block|}
comment|/**      * Parses PDF with non sequential parser.      *       * @param file file to be loaded      * @param password password to be used for decryption      * @param keyStore key store to be used for decryption when using public key security       * @param alias alias to be used for decryption when using public key security      *       * @return loaded document      *       * @throws IOException in case of a file reading or parsing error      */
specifier|public
specifier|static
name|PDDocument
name|load
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|password
parameter_list|,
name|InputStream
name|keyStore
parameter_list|,
name|String
name|alias
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|load
argument_list|(
name|file
argument_list|,
name|password
argument_list|,
name|keyStore
argument_list|,
name|alias
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Parses PDF with non sequential parser.      *       * @param file file to be loaded      * @param password password to be used for decryption      * @param keyStore key store to be used for decryption when using public key security       * @param alias alias to be used for decryption when using public key security      * @param useScratchFiles enables the usage of a scratch file if set to true      *       * @return loaded document      *       * @throws IOException in case of a file reading or parsing error      */
specifier|public
specifier|static
name|PDDocument
name|load
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|password
parameter_list|,
name|InputStream
name|keyStore
parameter_list|,
name|String
name|alias
parameter_list|,
name|boolean
name|useScratchFiles
parameter_list|)
throws|throws
name|IOException
block|{
name|NonSequentialPDFParser
name|parser
init|=
operator|new
name|NonSequentialPDFParser
argument_list|(
name|file
argument_list|,
name|password
argument_list|,
name|keyStore
argument_list|,
name|alias
argument_list|,
name|useScratchFiles
argument_list|)
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|()
expr_stmt|;
name|PDDocument
name|doc
init|=
name|parser
operator|.
name|getPDDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|incrementalFile
operator|=
name|file
expr_stmt|;
return|return
name|doc
return|;
block|}
comment|/**      * Parses PDF with non sequential parser.      *       * @param input stream that contains the document.      *       * @return loaded document      *       * @throws IOException in case of a file reading or parsing error      */
specifier|public
specifier|static
name|PDDocument
name|load
parameter_list|(
name|InputStream
name|input
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|load
argument_list|(
name|input
argument_list|,
literal|""
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Parses PDF with non sequential parser.      *       * @param input stream that contains the document.      * @param useScratchFiles enables the usage of a scratch file if set to true      *       * @return loaded document      *       * @throws IOException in case of a file reading or parsing error      */
specifier|public
specifier|static
name|PDDocument
name|load
parameter_list|(
name|InputStream
name|input
parameter_list|,
name|boolean
name|useScratchFiles
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|load
argument_list|(
name|input
argument_list|,
literal|""
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|useScratchFiles
argument_list|)
return|;
block|}
comment|/**      * Parses PDF with non sequential parser.      *       * @param input stream that contains the document.      * @param password password to be used for decryption      *       * @return loaded document      *       * @throws IOException in case of a file reading or parsing error      */
specifier|public
specifier|static
name|PDDocument
name|load
parameter_list|(
name|InputStream
name|input
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|load
argument_list|(
name|input
argument_list|,
name|password
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Parses PDF with non sequential parser.      *       * @param input stream that contains the document.      * @param password password to be used for decryption      * @param keyStore key store to be used for decryption when using public key security       * @param alias alias to be used for decryption when using public key security      *       * @return loaded document      *       * @throws IOException in case of a file reading or parsing error      */
specifier|public
specifier|static
name|PDDocument
name|load
parameter_list|(
name|InputStream
name|input
parameter_list|,
name|String
name|password
parameter_list|,
name|InputStream
name|keyStore
parameter_list|,
name|String
name|alias
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|load
argument_list|(
name|input
argument_list|,
name|password
argument_list|,
name|keyStore
argument_list|,
name|alias
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Parses PDF with non sequential parser.      *       * @param input stream that contains the document.      * @param password password to be used for decryption      * @param keyStore key store to be used for decryption when using public key security       * @param alias alias to be used for decryption when using public key security      * @param useScratchFiles enables the usage of a scratch file if set to true      *       * @return loaded document      *       * @throws IOException in case of a file reading or parsing error      */
specifier|public
specifier|static
name|PDDocument
name|load
parameter_list|(
name|InputStream
name|input
parameter_list|,
name|String
name|password
parameter_list|,
name|InputStream
name|keyStore
parameter_list|,
name|String
name|alias
parameter_list|,
name|boolean
name|useScratchFiles
parameter_list|)
throws|throws
name|IOException
block|{
name|NonSequentialPDFParser
name|parser
init|=
operator|new
name|NonSequentialPDFParser
argument_list|(
name|input
argument_list|,
name|password
argument_list|,
name|keyStore
argument_list|,
name|alias
argument_list|,
name|useScratchFiles
argument_list|)
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|()
expr_stmt|;
return|return
name|parser
operator|.
name|getPDDocument
argument_list|()
return|;
block|}
comment|/**      * Save the document to a file.      *       * @param fileName The file to save as.      *      * @throws IOException if the output could not be written      */
specifier|public
name|void
name|save
parameter_list|(
name|String
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
name|save
argument_list|(
operator|new
name|File
argument_list|(
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Save the document to a file.      *       * @param file The file to save as.      *      * @throws IOException if the output could not be written      */
specifier|public
name|void
name|save
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|save
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will save the document to an output stream.      *       * @param output The stream to write to.      *      * @throws IOException if the output could not be written      */
specifier|public
name|void
name|save
parameter_list|(
name|OutputStream
name|output
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|document
operator|.
name|isClosed
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot save a document which has been closed"
argument_list|)
throw|;
block|}
name|COSWriter
name|writer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|writer
operator|=
operator|new
name|COSWriter
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Save the PDF as an incremental update.      *      * @param output stream to write      * @throws IOException if the output could not be written      */
specifier|public
name|void
name|saveIncremental
parameter_list|(
name|OutputStream
name|output
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|input
init|=
operator|new
name|RandomAccessBufferedFileInputStream
argument_list|(
name|incrementalFile
argument_list|)
decl_stmt|;
name|COSWriter
name|writer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|writer
operator|=
operator|new
name|COSWriter
argument_list|(
name|output
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Returns the page at the given index.      *      * @param pageIndex the page index      * @return the page at the given index.      */
specifier|public
name|PDPage
name|getPage
parameter_list|(
name|int
name|pageIndex
parameter_list|)
comment|// todo: REPLACE most calls to this method with BELOW method
block|{
return|return
name|getDocumentCatalog
argument_list|()
operator|.
name|getPages
argument_list|()
operator|.
name|get
argument_list|(
name|pageIndex
argument_list|)
return|;
block|}
comment|// todo: new!
specifier|public
name|PDPageTree
name|getPages
parameter_list|()
block|{
return|return
name|getDocumentCatalog
argument_list|()
operator|.
name|getPages
argument_list|()
return|;
block|}
comment|/**      * This will return the total page count of the PDF document.      *       * @return The total number of pages in the PDF document.      */
specifier|public
name|int
name|getNumberOfPages
parameter_list|()
block|{
return|return
name|getDocumentCatalog
argument_list|()
operator|.
name|getPages
argument_list|()
operator|.
name|getCount
argument_list|()
return|;
block|}
comment|/**      * This will close the underlying COSDocument object.      *       * @throws IOException If there is an error releasing resources.      */
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|document
operator|.
name|isClosed
argument_list|()
condition|)
block|{
comment|// close all intermediate I/O streams
name|document
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// close the source PDF stream, if we read from one
if|if
condition|(
name|parser
operator|!=
literal|null
condition|)
block|{
name|parser
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Protects the document with the protection policy pp. The document content will be really encrypted when it will      * be saved. This method only marks the document for encryption.      *      * @see org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy      * @see org.apache.pdfbox.pdmodel.encryption.PublicKeyProtectionPolicy      *       * @param policy The protection policy.      *       * @throws IOException if there isn't any suitable security handler.      */
specifier|public
name|void
name|protect
parameter_list|(
name|ProtectionPolicy
name|policy
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|isEncrypted
argument_list|()
condition|)
block|{
name|encryption
operator|=
operator|new
name|PDEncryption
argument_list|()
expr_stmt|;
block|}
name|SecurityHandler
name|securityHandler
init|=
name|SecurityHandlerFactory
operator|.
name|INSTANCE
operator|.
name|newSecurityHandlerForPolicy
argument_list|(
name|policy
argument_list|)
decl_stmt|;
if|if
condition|(
name|securityHandler
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No security handler for policy "
operator|+
name|policy
argument_list|)
throw|;
block|}
name|getEncryption
argument_list|()
operator|.
name|setSecurityHandler
argument_list|(
name|securityHandler
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tries to decrypt the document in memory using the provided decryption material.      *       * @see org.apache.pdfbox.pdmodel.encryption.StandardDecryptionMaterial      * @see org.apache.pdfbox.pdmodel.encryption.PublicKeyDecryptionMaterial      *       * @param decryptionMaterial The decryption material (password or certificate).      *      * @throws IOException If there is an error reading cryptographic information.      */
specifier|public
name|void
name|openProtection
parameter_list|(
name|DecryptionMaterial
name|decryptionMaterial
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isEncrypted
argument_list|()
condition|)
block|{
name|SecurityHandler
name|securityHandler
init|=
name|getEncryption
argument_list|()
operator|.
name|getSecurityHandler
argument_list|()
decl_stmt|;
name|securityHandler
operator|.
name|decryptDocument
argument_list|(
name|this
argument_list|,
name|decryptionMaterial
argument_list|)
expr_stmt|;
name|accessPermission
operator|=
name|securityHandler
operator|.
name|getCurrentAccessPermission
argument_list|()
expr_stmt|;
name|document
operator|.
name|dereferenceObjectStreams
argument_list|()
expr_stmt|;
name|document
operator|.
name|setEncryptionDictionary
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|getDocumentCatalog
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Document is not encrypted"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns the access permissions granted when the document was decrypted. If the document was not decrypted this      * method returns the access permission for a document owner (ie can do everything). The returned object is in read      * only mode so that permissions cannot be changed. Methods providing access to content should rely on this object      * to verify if the current user is allowed to proceed.      *       * @return the access permissions for the current user on the document.      */
specifier|public
name|AccessPermission
name|getCurrentAccessPermission
parameter_list|()
block|{
if|if
condition|(
name|accessPermission
operator|==
literal|null
condition|)
block|{
name|accessPermission
operator|=
name|AccessPermission
operator|.
name|getOwnerAccessPermission
argument_list|()
expr_stmt|;
block|}
return|return
name|accessPermission
return|;
block|}
comment|/**      * Get the security handler that is used for document encryption.      *      * @deprecated Use {@link #getEncryption()}.      * {@link org.apache.pdfbox.pdmodel.encryption.PDEncryption#getSecurityHandler()}      *      * @return The handler used to encrypt/decrypt the document.      */
annotation|@
name|Deprecated
specifier|public
name|SecurityHandler
name|getSecurityHandler
parameter_list|()
block|{
if|if
condition|(
name|isEncrypted
argument_list|()
operator|&&
name|getEncryption
argument_list|()
operator|.
name|hasSecurityHandler
argument_list|()
condition|)
block|{
try|try
block|{
return|return
name|getEncryption
argument_list|()
operator|.
name|getSecurityHandler
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// will never happen because we checked hasSecurityHandler() first
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * @deprecated Use protection policies instead.      *      * @param securityHandler security handler to be assigned to document      * @return true if security handler was set      */
annotation|@
name|Deprecated
specifier|public
name|boolean
name|setSecurityHandler
parameter_list|(
name|SecurityHandler
name|securityHandler
parameter_list|)
block|{
if|if
condition|(
name|isEncrypted
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|encryption
operator|=
operator|new
name|PDEncryption
argument_list|()
expr_stmt|;
name|getEncryption
argument_list|()
operator|.
name|setSecurityHandler
argument_list|(
name|securityHandler
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**      * Indicates if all security is removed or not when writing the pdf.      *       * @return returns true if all security shall be removed otherwise false      */
specifier|public
name|boolean
name|isAllSecurityToBeRemoved
parameter_list|()
block|{
return|return
name|allSecurityToBeRemoved
return|;
block|}
comment|/**      * Activates/Deactivates the removal of all security when writing the pdf.      *       * @param removeAllSecurity remove all security if set to true      */
specifier|public
name|void
name|setAllSecurityToBeRemoved
parameter_list|(
name|boolean
name|removeAllSecurity
parameter_list|)
block|{
name|allSecurityToBeRemoved
operator|=
name|removeAllSecurity
expr_stmt|;
block|}
comment|/**      * Provides the document ID.      *      * @return the dcoument ID      */
specifier|public
name|Long
name|getDocumentId
parameter_list|()
block|{
return|return
name|documentId
return|;
block|}
comment|/**      * Sets the document ID to the given value.      *       * @param docId the new document ID      */
specifier|public
name|void
name|setDocumentId
parameter_list|(
name|Long
name|docId
parameter_list|)
block|{
name|documentId
operator|=
name|docId
expr_stmt|;
block|}
block|}
end_class

end_unit

