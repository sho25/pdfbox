begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|color
operator|.
name|ColorSpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDRange
import|;
end_import

begin_comment
comment|/**  * This class represents a CalRGB color space.  *   * The color conversion uses the algorithm described on wikipedia.  *   * The blackpoint isn't used, as I can't find any hint how to do that.  *   */
end_comment

begin_class
specifier|public
class|class
name|ColorSpaceLab
extends|extends
name|ColorSpace
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|5769360600770807798L
decl_stmt|;
specifier|private
name|PDTristimulus
name|whitepoint
init|=
literal|null
decl_stmt|;
comment|// TODO unused??
specifier|private
name|PDTristimulus
name|blackpoint
init|=
literal|null
decl_stmt|;
specifier|private
name|PDRange
name|aRange
init|=
literal|null
decl_stmt|;
specifier|private
name|PDRange
name|bRange
init|=
literal|null
decl_stmt|;
comment|/**      * Default Constructor.      *       */
specifier|public
name|ColorSpaceLab
parameter_list|()
block|{
name|super
argument_list|(
name|ColorSpace
operator|.
name|TYPE_3CLR
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
comment|/**       * Constructor.      *       * @param whitept whitepoint values      * @param blackpt blackpoint values      * @param a range for value a       * @param b range for value b      */
specifier|public
name|ColorSpaceLab
parameter_list|(
name|PDTristimulus
name|whitept
parameter_list|,
name|PDTristimulus
name|blackpt
parameter_list|,
name|PDRange
name|a
parameter_list|,
name|PDRange
name|b
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|whitepoint
operator|=
name|whitept
expr_stmt|;
name|blackpoint
operator|=
name|blackpt
expr_stmt|;
name|aRange
operator|=
name|a
expr_stmt|;
name|bRange
operator|=
name|b
expr_stmt|;
block|}
comment|/**      * Clip the given value to the given range.      *       * @param x      *            the given value to be clipped      * @param range      *            the range to be used to clip the value to      *       * @return the clipped value      */
specifier|private
name|float
name|clipToRange
parameter_list|(
name|float
name|x
parameter_list|,
name|PDRange
name|range
parameter_list|)
block|{
return|return
name|Math
operator|.
name|min
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|x
argument_list|,
name|range
operator|.
name|getMin
argument_list|()
argument_list|)
argument_list|,
name|range
operator|.
name|getMax
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
specifier|final
name|float
name|VALUE_6_29
init|=
literal|6
operator|/
literal|29
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|float
name|VALUE_4_29
init|=
literal|4
operator|/
literal|29
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|float
name|VALUE_108_841
init|=
literal|108
operator|/
literal|841
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|float
name|VALUE_841_108
init|=
literal|841
operator|/
literal|108
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|float
name|VALUE_216_24389
init|=
literal|216
operator|/
literal|24389
decl_stmt|;
specifier|private
name|float
name|calculateStage2ToXYZ
parameter_list|(
name|float
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|>=
name|VALUE_6_29
condition|)
block|{
return|return
operator|(
name|float
operator|)
name|Math
operator|.
name|pow
argument_list|(
name|value
argument_list|,
literal|3
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|VALUE_108_841
operator|*
operator|(
name|value
operator|-
name|VALUE_4_29
operator|)
return|;
block|}
block|}
specifier|private
name|float
name|calculateStage2FromXYZ
parameter_list|(
name|float
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|>=
name|VALUE_216_24389
condition|)
block|{
return|return
operator|(
name|float
operator|)
name|Math
operator|.
name|pow
argument_list|(
name|value
argument_list|,
literal|1
operator|/
literal|3
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|VALUE_841_108
operator|*
name|value
operator|+
name|VALUE_4_29
return|;
block|}
block|}
comment|/**      * {@inheritDoc}      *       */
specifier|public
name|float
index|[]
name|toRGB
parameter_list|(
name|float
index|[]
name|colorvalue
parameter_list|)
block|{
name|ColorSpace
name|colorspaceXYZ
init|=
name|ColorSpace
operator|.
name|getInstance
argument_list|(
name|CS_CIEXYZ
argument_list|)
decl_stmt|;
return|return
name|colorspaceXYZ
operator|.
name|toRGB
argument_list|(
name|toCIEXYZ
argument_list|(
name|colorvalue
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * {@inheritDoc}      *       */
specifier|public
name|float
index|[]
name|fromRGB
parameter_list|(
name|float
index|[]
name|rgbvalue
parameter_list|)
block|{
name|ColorSpace
name|colorspaceXYZ
init|=
name|ColorSpace
operator|.
name|getInstance
argument_list|(
name|CS_CIEXYZ
argument_list|)
decl_stmt|;
return|return
name|fromCIEXYZ
argument_list|(
name|colorspaceXYZ
operator|.
name|fromRGB
argument_list|(
name|rgbvalue
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * {@inheritDoc}      *       */
specifier|public
name|float
index|[]
name|toCIEXYZ
parameter_list|(
name|float
index|[]
name|colorvalue
parameter_list|)
block|{
name|float
name|a
init|=
name|colorvalue
index|[
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|aRange
operator|!=
literal|null
condition|)
block|{
comment|// clip the a value to the given range
name|a
operator|=
name|clipToRange
argument_list|(
name|a
argument_list|,
name|aRange
argument_list|)
expr_stmt|;
block|}
name|float
name|b
init|=
name|colorvalue
index|[
literal|2
index|]
decl_stmt|;
if|if
condition|(
name|bRange
operator|!=
literal|null
condition|)
block|{
comment|// clip the b value to the given range
name|b
operator|=
name|clipToRange
argument_list|(
name|b
argument_list|,
name|bRange
argument_list|)
expr_stmt|;
block|}
name|float
name|m
init|=
operator|(
name|colorvalue
index|[
literal|0
index|]
operator|+
literal|16
operator|)
operator|/
literal|116
decl_stmt|;
name|float
name|l
init|=
name|m
operator|+
operator|(
name|a
operator|/
literal|500
operator|)
decl_stmt|;
name|float
name|n
init|=
name|m
operator|-
operator|(
name|b
operator|/
literal|200
operator|)
decl_stmt|;
name|float
name|x
init|=
name|whitepoint
operator|.
name|getX
argument_list|()
operator|*
name|calculateStage2ToXYZ
argument_list|(
name|l
argument_list|)
decl_stmt|;
name|float
name|y
init|=
name|whitepoint
operator|.
name|getY
argument_list|()
operator|*
name|calculateStage2ToXYZ
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|float
name|z
init|=
name|whitepoint
operator|.
name|getZ
argument_list|()
operator|*
name|calculateStage2ToXYZ
argument_list|(
name|n
argument_list|)
decl_stmt|;
return|return
operator|new
name|float
index|[]
block|{
name|x
block|,
name|y
block|,
name|z
block|}
return|;
block|}
comment|/**      * {@inheritDoc}      *       */
specifier|public
name|float
index|[]
name|fromCIEXYZ
parameter_list|(
name|float
index|[]
name|colorvalue
parameter_list|)
block|{
name|float
name|x
init|=
name|calculateStage2FromXYZ
argument_list|(
name|colorvalue
index|[
literal|0
index|]
operator|/
name|whitepoint
operator|.
name|getX
argument_list|()
argument_list|)
decl_stmt|;
name|float
name|y
init|=
name|calculateStage2FromXYZ
argument_list|(
name|colorvalue
index|[
literal|1
index|]
operator|/
name|whitepoint
operator|.
name|getY
argument_list|()
argument_list|)
decl_stmt|;
name|float
name|z
init|=
name|calculateStage2FromXYZ
argument_list|(
name|colorvalue
index|[
literal|2
index|]
operator|/
name|whitepoint
operator|.
name|getZ
argument_list|()
argument_list|)
decl_stmt|;
name|float
name|l
init|=
literal|116
operator|*
name|y
operator|-
literal|116
decl_stmt|;
name|float
name|a
init|=
literal|500
operator|*
operator|(
name|x
operator|-
name|y
operator|)
decl_stmt|;
name|float
name|b
init|=
literal|200
operator|*
operator|(
name|y
operator|-
name|z
operator|)
decl_stmt|;
if|if
condition|(
name|aRange
operator|!=
literal|null
condition|)
block|{
comment|// clip the a value to the given range
name|a
operator|=
name|clipToRange
argument_list|(
name|a
argument_list|,
name|aRange
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bRange
operator|!=
literal|null
condition|)
block|{
comment|// clip the b value to the given range
name|b
operator|=
name|clipToRange
argument_list|(
name|b
argument_list|,
name|bRange
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|float
index|[]
block|{
name|l
block|,
name|a
block|,
name|b
block|}
return|;
block|}
block|}
end_class

end_unit

