begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|SoftReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|FontBoxFont
import|;
end_import

begin_comment
comment|/**  * A cache for system fonts. This allows PDFBox to manage caching for a {@link FontProvider}.  * PDFBox is free to purge this cache at will.  *  * @author John Hewson  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|FontCache
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|FontInfo
argument_list|,
name|SoftReference
argument_list|<
name|FontBoxFont
argument_list|>
argument_list|>
name|cache
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|FontInfo
argument_list|,
name|SoftReference
argument_list|<
name|FontBoxFont
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Adds the given FontBox font to the cache.      */
specifier|public
name|void
name|addFont
parameter_list|(
name|FontInfo
name|info
parameter_list|,
name|FontBoxFont
name|font
parameter_list|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|info
argument_list|,
operator|new
name|SoftReference
argument_list|<
name|FontBoxFont
argument_list|>
argument_list|(
name|font
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the FontBox font associated with the given FontInfo.      */
specifier|public
name|FontBoxFont
name|getFont
parameter_list|(
name|FontInfo
name|info
parameter_list|)
block|{
return|return
name|cache
operator|.
name|get
argument_list|(
name|info
argument_list|)
operator|.
name|get
argument_list|()
return|;
block|}
block|}
end_class

end_unit

