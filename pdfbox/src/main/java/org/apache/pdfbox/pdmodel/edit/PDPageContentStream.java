begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|edit
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|color
operator|.
name|ColorSpace
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|PathIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|COSStreamArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDColorSpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDDeviceCMYK
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDDeviceGray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDDeviceN
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDDeviceRGB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDICCBased
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDPattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDSeparation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|xobject
operator|.
name|PDXObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|xobject
operator|.
name|PDXObjectImage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|MapUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSString
import|;
end_import

begin_comment
comment|/**  * This class will is a convenience for creating page content streams.  You MUST  * call close() when you are finished with this object.  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.19 $  */
end_comment

begin_class
specifier|public
class|class
name|PDPageContentStream
block|{
specifier|private
name|PDPage
name|page
decl_stmt|;
specifier|private
name|OutputStream
name|output
decl_stmt|;
specifier|private
name|boolean
name|inTextMode
init|=
literal|false
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|PDFont
argument_list|,
name|String
argument_list|>
name|fontMappings
init|=
operator|new
name|HashMap
argument_list|<
name|PDFont
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|PDXObject
argument_list|,
name|String
argument_list|>
name|xobjectMappings
init|=
operator|new
name|HashMap
argument_list|<
name|PDXObject
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|PDResources
name|resources
decl_stmt|;
specifier|private
name|Map
name|fonts
decl_stmt|;
specifier|private
name|Map
name|xobjects
decl_stmt|;
specifier|private
name|PDColorSpace
name|currentStrokingColorSpace
init|=
operator|new
name|PDDeviceGray
argument_list|()
decl_stmt|;
specifier|private
name|PDColorSpace
name|currentNonStrokingColorSpace
init|=
operator|new
name|PDDeviceGray
argument_list|()
decl_stmt|;
comment|//cached storage component for getting color values
specifier|private
name|float
index|[]
name|colorComponents
init|=
operator|new
name|float
index|[
literal|4
index|]
decl_stmt|;
specifier|private
name|NumberFormat
name|formatDecimal
init|=
name|NumberFormat
operator|.
name|getNumberInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BEGIN_TEXT
init|=
literal|"BT\n"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|END_TEXT
init|=
literal|"ET\n"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SET_FONT
init|=
literal|"Tf\n"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MOVE_TEXT_POSITION
init|=
literal|"Td\n"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SET_TEXT_MATRIX
init|=
literal|"Tm\n"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SHOW_TEXT
init|=
literal|"Tj\n"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SAVE_GRAPHICS_STATE
init|=
literal|"q\n"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|RESTORE_GRAPHICS_STATE
init|=
literal|"Q\n"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CONCATENATE_MATRIX
init|=
literal|"cm\n"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|XOBJECT_DO
init|=
literal|"Do\n"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|RG_STROKING
init|=
literal|"RG\n"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|RG_NON_STROKING
init|=
literal|"rg\n"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|K_STROKING
init|=
literal|"K\n"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|K_NON_STROKING
init|=
literal|"k\n"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|G_STROKING
init|=
literal|"G\n"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|G_NON_STROKING
init|=
literal|"g\n"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|RECTANGLE
init|=
literal|"re\n"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FILL_NON_ZERO
init|=
literal|"f\n"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FILL_EVEN_ODD
init|=
literal|"f*\n"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LINE_TO
init|=
literal|"l\n"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MOVE_TO
init|=
literal|"m\n"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CLOSE_STROKE
init|=
literal|"s\n"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|STROKE
init|=
literal|"S\n"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LINE_WIDTH
init|=
literal|"w\n"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CLOSE_SUBPATH
init|=
literal|"h\n"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CLIP_PATH_NON_ZERO
init|=
literal|"W\n"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CLIP_PATH_EVEN_ODD
init|=
literal|"W*\n"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NOP
init|=
literal|"n\n"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BEZIER_312
init|=
literal|"c\n"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BEZIER_32
init|=
literal|"v\n"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BEZIER_313
init|=
literal|"y\n"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SET_STROKING_COLORSPACE
init|=
literal|"CS\n"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SET_NON_STROKING_COLORSPACE
init|=
literal|"cs\n"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SET_STROKING_COLOR_SIMPLE
init|=
literal|"SC\n"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SET_STROKING_COLOR_COMPLEX
init|=
literal|"SCN\n"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SET_NON_STROKING_COLOR_SIMPLE
init|=
literal|"sc\n"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SET_NON_STROKING_COLOR_COMPLEX
init|=
literal|"scn\n"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|SPACE
init|=
literal|32
decl_stmt|;
comment|/**      * Create a new PDPage content stream.      *      * @param document The document the page is part of.      * @param sourcePage The page to write the contents to.      * @throws IOException If there is an error writing to the page contents.      */
specifier|public
name|PDPageContentStream
parameter_list|(
name|PDDocument
name|document
parameter_list|,
name|PDPage
name|sourcePage
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|document
argument_list|,
name|sourcePage
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a new PDPage content stream.      *      * @param document The document the page is part of.      * @param sourcePage The page to write the contents to.      * @param appendContent Indicates whether content will be overwritten. If false all previous content is deleted.      * @param compress Tell if the content stream should compress the page contents.      * @throws IOException If there is an error writing to the page contents.      */
specifier|public
name|PDPageContentStream
parameter_list|(
name|PDDocument
name|document
parameter_list|,
name|PDPage
name|sourcePage
parameter_list|,
name|boolean
name|appendContent
parameter_list|,
name|boolean
name|compress
parameter_list|)
throws|throws
name|IOException
block|{
name|page
operator|=
name|sourcePage
expr_stmt|;
name|resources
operator|=
name|page
operator|.
name|getResources
argument_list|()
expr_stmt|;
if|if
condition|(
name|resources
operator|==
literal|null
condition|)
block|{
name|resources
operator|=
operator|new
name|PDResources
argument_list|()
expr_stmt|;
name|page
operator|.
name|setResources
argument_list|(
name|resources
argument_list|)
expr_stmt|;
block|}
name|fonts
operator|=
name|resources
operator|.
name|getFonts
argument_list|()
expr_stmt|;
name|xobjects
operator|=
name|resources
operator|.
name|getImages
argument_list|()
expr_stmt|;
comment|// If request specifies the need to append to the document
if|if
condition|(
name|appendContent
condition|)
block|{
comment|// Get the pdstream from the source page instead of creating a new one
name|PDStream
name|contents
init|=
name|sourcePage
operator|.
name|getContents
argument_list|()
decl_stmt|;
comment|// Create a pdstream to append new content
name|PDStream
name|contentsToAppend
init|=
operator|new
name|PDStream
argument_list|(
name|document
argument_list|)
decl_stmt|;
comment|// This will be the resulting COSStreamArray after existing and new streams are merged
name|COSStreamArray
name|compoundStream
init|=
literal|null
decl_stmt|;
comment|// If contents is already an array, a new stream is simply appended to it
if|if
condition|(
name|contents
operator|.
name|getStream
argument_list|()
operator|instanceof
name|COSStreamArray
condition|)
block|{
name|compoundStream
operator|=
operator|(
name|COSStreamArray
operator|)
name|contents
operator|.
name|getStream
argument_list|()
expr_stmt|;
name|compoundStream
operator|.
name|appendStream
argument_list|(
name|contentsToAppend
operator|.
name|getStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Creates the COSStreamArray and adds the current stream plus a new one to it
name|COSArray
name|newArray
init|=
operator|new
name|COSArray
argument_list|()
decl_stmt|;
name|newArray
operator|.
name|add
argument_list|(
name|contents
operator|.
name|getCOSObject
argument_list|()
argument_list|)
expr_stmt|;
name|newArray
operator|.
name|add
argument_list|(
name|contentsToAppend
operator|.
name|getCOSObject
argument_list|()
argument_list|)
expr_stmt|;
name|compoundStream
operator|=
operator|new
name|COSStreamArray
argument_list|(
name|newArray
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|compress
condition|)
block|{
name|List
name|filters
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|filters
operator|.
name|add
argument_list|(
name|COSName
operator|.
name|FLATE_DECODE
argument_list|)
expr_stmt|;
name|contentsToAppend
operator|.
name|setFilters
argument_list|(
name|filters
argument_list|)
expr_stmt|;
block|}
comment|// Sets the compoundStream as page contents
name|sourcePage
operator|.
name|setContents
argument_list|(
operator|new
name|PDStream
argument_list|(
name|compoundStream
argument_list|)
argument_list|)
expr_stmt|;
name|output
operator|=
name|contentsToAppend
operator|.
name|createOutputStream
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|PDStream
name|contents
init|=
operator|new
name|PDStream
argument_list|(
name|document
argument_list|)
decl_stmt|;
if|if
condition|(
name|compress
condition|)
block|{
name|List
name|filters
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|filters
operator|.
name|add
argument_list|(
name|COSName
operator|.
name|FLATE_DECODE
argument_list|)
expr_stmt|;
name|contents
operator|.
name|setFilters
argument_list|(
name|filters
argument_list|)
expr_stmt|;
block|}
name|sourcePage
operator|.
name|setContents
argument_list|(
name|contents
argument_list|)
expr_stmt|;
name|output
operator|=
name|contents
operator|.
name|createOutputStream
argument_list|()
expr_stmt|;
block|}
name|formatDecimal
operator|.
name|setMaximumFractionDigits
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|formatDecimal
operator|.
name|setGroupingUsed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Begin some text operations.      *      * @throws IOException If there is an error writing to the stream or if you attempt to      *         nest beginText calls.      */
specifier|public
name|void
name|beginText
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|inTextMode
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error: Nested beginText() calls are not allowed."
argument_list|)
throw|;
block|}
name|appendRawCommands
argument_list|(
name|BEGIN_TEXT
argument_list|)
expr_stmt|;
name|inTextMode
operator|=
literal|true
expr_stmt|;
block|}
comment|/**      * End some text operations.      *      * @throws IOException If there is an error writing to the stream or if you attempt to      *         nest endText calls.      */
specifier|public
name|void
name|endText
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|inTextMode
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error: You must call beginText() before calling endText."
argument_list|)
throw|;
block|}
name|appendRawCommands
argument_list|(
name|END_TEXT
argument_list|)
expr_stmt|;
name|inTextMode
operator|=
literal|false
expr_stmt|;
block|}
comment|/**      * Set the font to draw text with.      *      * @param font The font to use.      * @param fontSize The font size to draw the text.      * @throws IOException If there is an error writing the font information.      */
specifier|public
name|void
name|setFont
parameter_list|(
name|PDFont
name|font
parameter_list|,
name|float
name|fontSize
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|fontMapping
init|=
name|fontMappings
operator|.
name|get
argument_list|(
name|font
argument_list|)
decl_stmt|;
if|if
condition|(
name|fontMapping
operator|==
literal|null
condition|)
block|{
name|fontMapping
operator|=
name|MapUtil
operator|.
name|getNextUniqueKey
argument_list|(
name|fonts
argument_list|,
literal|"F"
argument_list|)
expr_stmt|;
name|fontMappings
operator|.
name|put
argument_list|(
name|font
argument_list|,
name|fontMapping
argument_list|)
expr_stmt|;
name|fonts
operator|.
name|put
argument_list|(
name|fontMapping
argument_list|,
name|font
argument_list|)
expr_stmt|;
block|}
name|appendRawCommands
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|fontMapping
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|fontSize
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SET_FONT
argument_list|)
expr_stmt|;
block|}
comment|/**      * Draw an image at the x,y coordinates, with the default size of the image.      *      * @param image The image to draw.      * @param x The x-coordinate to draw the image.      * @param y The y-coordinate to draw the image.      *      * @throws IOException If there is an error writing to the stream.      */
specifier|public
name|void
name|drawImage
parameter_list|(
name|PDXObjectImage
name|image
parameter_list|,
name|float
name|x
parameter_list|,
name|float
name|y
parameter_list|)
throws|throws
name|IOException
block|{
name|drawXObject
argument_list|(
name|image
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|image
operator|.
name|getWidth
argument_list|()
argument_list|,
name|image
operator|.
name|getHeight
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Draw an xobject(form or image) at the x,y coordinates and a certain width and height.      *      * @param xobject The xobject to draw.      * @param x The x-coordinate to draw the image.      * @param y The y-coordinate to draw the image.      * @param width The width of the image to draw.      * @param height The height of the image to draw.      *      * @throws IOException If there is an error writing to the stream.      */
specifier|public
name|void
name|drawXObject
parameter_list|(
name|PDXObject
name|xobject
parameter_list|,
name|float
name|x
parameter_list|,
name|float
name|y
parameter_list|,
name|float
name|width
parameter_list|,
name|float
name|height
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|xObjectPrefix
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|xobject
operator|instanceof
name|PDXObjectImage
condition|)
block|{
name|xObjectPrefix
operator|=
literal|"Im"
expr_stmt|;
block|}
else|else
block|{
name|xObjectPrefix
operator|=
literal|"Form"
expr_stmt|;
block|}
name|String
name|objMapping
init|=
name|xobjectMappings
operator|.
name|get
argument_list|(
name|xobject
argument_list|)
decl_stmt|;
if|if
condition|(
name|objMapping
operator|==
literal|null
condition|)
block|{
name|objMapping
operator|=
name|MapUtil
operator|.
name|getNextUniqueKey
argument_list|(
name|xobjects
argument_list|,
name|xObjectPrefix
argument_list|)
expr_stmt|;
name|xobjectMappings
operator|.
name|put
argument_list|(
name|xobject
argument_list|,
name|objMapping
argument_list|)
expr_stmt|;
name|xobjects
operator|.
name|put
argument_list|(
name|objMapping
argument_list|,
name|xobject
argument_list|)
expr_stmt|;
block|}
name|saveGraphicsState
argument_list|()
expr_stmt|;
name|concatenate2CTM
argument_list|(
name|width
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|height
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|objMapping
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|XOBJECT_DO
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|restoreGraphicsState
argument_list|()
expr_stmt|;
block|}
comment|/**      * The Td operator.      * A current text matrix will be replaced with a new one (1 0 0 1 x y).       * @param x The x coordinate.      * @param y The y coordinate.      * @throws IOException If there is an error writing to the stream.      */
specifier|public
name|void
name|moveTextPositionByAmount
parameter_list|(
name|float
name|x
parameter_list|,
name|float
name|y
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|inTextMode
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error: must call beginText() before moveTextPositionByAmount"
argument_list|)
throw|;
block|}
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|y
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|MOVE_TEXT_POSITION
argument_list|)
expr_stmt|;
block|}
comment|/**      * The Tm operator. Sets the text matrix to the given values.      * A current text matrix will be replaced with the new one.       * @param a The a value of the matrix.      * @param b The b value of the matrix.      * @param c The c value of the matrix.      * @param d The d value of the matrix.      * @param e The e value of the matrix.      * @param f The f value of the matrix.      * @throws IOException If there is an error writing to the stream.      */
specifier|public
name|void
name|setTextMatrix
parameter_list|(
name|double
name|a
parameter_list|,
name|double
name|b
parameter_list|,
name|double
name|c
parameter_list|,
name|double
name|d
parameter_list|,
name|double
name|e
parameter_list|,
name|double
name|f
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|inTextMode
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error: must call beginText() before setTextMatrix"
argument_list|)
throw|;
block|}
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SET_TEXT_MATRIX
argument_list|)
expr_stmt|;
block|}
comment|/**      * The Tm operator. Sets the text matrix to the given scaling and translation values.      * A current text matrix will be replaced with the new one.       * @param sx The scaling factor in x-direction.      * @param sy The scaling factor in y-direction.      * @param tx The translation value in x-direction.      * @param ty The translation value in y-direction.      * @throws IOException If there is an error writing to the stream.      */
specifier|public
name|void
name|setTextScaling
parameter_list|(
name|double
name|sx
parameter_list|,
name|double
name|sy
parameter_list|,
name|double
name|tx
parameter_list|,
name|double
name|ty
parameter_list|)
throws|throws
name|IOException
block|{
name|setTextMatrix
argument_list|(
name|sx
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|sy
argument_list|,
name|tx
argument_list|,
name|ty
argument_list|)
expr_stmt|;
block|}
comment|/**      * The Tm operator. Sets the text matrix to the given translation values.      * A current text matrix will be replaced with the new one.       * @param tx The translation value in x-direction.      * @param ty The translation value in y-direction.      * @throws IOException If there is an error writing to the stream.      */
specifier|public
name|void
name|setTextTranslation
parameter_list|(
name|double
name|tx
parameter_list|,
name|double
name|ty
parameter_list|)
throws|throws
name|IOException
block|{
name|setTextMatrix
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|tx
argument_list|,
name|ty
argument_list|)
expr_stmt|;
block|}
comment|/**      * The Tm operator. Sets the text matrix to the given rotation and translation values.      * A current text matrix will be replaced with the new one.       * @param angle The angle used for the counterclockwise rotation in radians.      * @param tx The translation value in x-direction.      * @param ty The translation value in y-direction.      * @throws IOException If there is an error writing to the stream.      */
specifier|public
name|void
name|setTextRotation
parameter_list|(
name|double
name|angle
parameter_list|,
name|double
name|tx
parameter_list|,
name|double
name|ty
parameter_list|)
throws|throws
name|IOException
block|{
name|double
name|angleCos
init|=
name|Math
operator|.
name|cos
argument_list|(
name|angle
argument_list|)
decl_stmt|;
name|double
name|angleSin
init|=
name|Math
operator|.
name|sin
argument_list|(
name|angle
argument_list|)
decl_stmt|;
name|setTextMatrix
argument_list|(
name|angleCos
argument_list|,
name|angleSin
argument_list|,
operator|-
name|angleSin
argument_list|,
name|angleCos
argument_list|,
name|tx
argument_list|,
name|ty
argument_list|)
expr_stmt|;
block|}
comment|/**      * The Cm operator. Concatenates the current transformation matrix with the given values.      * @param a The a value of the matrix.      * @param b The b value of the matrix.      * @param c The c value of the matrix.      * @param d The d value of the matrix.      * @param e The e value of the matrix.      * @param f The f value of the matrix.      * @throws IOException If there is an error writing to the stream.      */
specifier|public
name|void
name|concatenate2CTM
parameter_list|(
name|double
name|a
parameter_list|,
name|double
name|b
parameter_list|,
name|double
name|c
parameter_list|,
name|double
name|d
parameter_list|,
name|double
name|e
parameter_list|,
name|double
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|CONCATENATE_MATRIX
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will draw a string at the current location on the screen.      *      * @param text The text to draw.      * @throws IOException If an io exception occurs.      */
specifier|public
name|void
name|drawString
parameter_list|(
name|String
name|text
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|inTextMode
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error: must call beginText() before drawString"
argument_list|)
throw|;
block|}
name|COSString
name|string
init|=
operator|new
name|COSString
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|buffer
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|string
operator|.
name|writePDF
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
operator|new
name|String
argument_list|(
name|buffer
operator|.
name|toByteArray
argument_list|()
argument_list|,
literal|"ISO-8859-1"
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SHOW_TEXT
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the stroking color space.  This will add the colorspace to the PDResources      * if necessary.      *      * @param colorSpace The colorspace to write.      * @throws IOException If there is an error writing the colorspace.      */
specifier|public
name|void
name|setStrokingColorSpace
parameter_list|(
name|PDColorSpace
name|colorSpace
parameter_list|)
throws|throws
name|IOException
block|{
name|currentStrokingColorSpace
operator|=
name|colorSpace
expr_stmt|;
name|writeColorSpace
argument_list|(
name|colorSpace
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SET_STROKING_COLORSPACE
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the stroking color space.  This will add the colorspace to the PDResources      * if necessary.      *      * @param colorSpace The colorspace to write.      * @throws IOException If there is an error writing the colorspace.      */
specifier|public
name|void
name|setNonStrokingColorSpace
parameter_list|(
name|PDColorSpace
name|colorSpace
parameter_list|)
throws|throws
name|IOException
block|{
name|currentNonStrokingColorSpace
operator|=
name|colorSpace
expr_stmt|;
name|writeColorSpace
argument_list|(
name|colorSpace
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SET_NON_STROKING_COLORSPACE
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeColorSpace
parameter_list|(
name|PDColorSpace
name|colorSpace
parameter_list|)
throws|throws
name|IOException
block|{
name|COSName
name|key
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|colorSpace
operator|instanceof
name|PDDeviceGray
operator|||
name|colorSpace
operator|instanceof
name|PDDeviceRGB
operator|||
name|colorSpace
operator|instanceof
name|PDDeviceCMYK
condition|)
block|{
name|key
operator|=
name|COSName
operator|.
name|getPDFName
argument_list|(
name|colorSpace
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|COSDictionary
name|colorSpaces
init|=
operator|(
name|COSDictionary
operator|)
name|resources
operator|.
name|getCOSDictionary
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|COLORSPACE
argument_list|)
decl_stmt|;
if|if
condition|(
name|colorSpaces
operator|==
literal|null
condition|)
block|{
name|colorSpaces
operator|=
operator|new
name|COSDictionary
argument_list|()
expr_stmt|;
name|resources
operator|.
name|getCOSDictionary
argument_list|()
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|COLORSPACE
argument_list|,
name|colorSpaces
argument_list|)
expr_stmt|;
block|}
name|key
operator|=
name|colorSpaces
operator|.
name|getKeyForValue
argument_list|(
name|colorSpace
operator|.
name|getCOSObject
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
name|int
name|counter
init|=
literal|0
decl_stmt|;
name|String
name|csName
init|=
literal|"CS"
decl_stmt|;
while|while
condition|(
name|colorSpaces
operator|.
name|containsValue
argument_list|(
name|csName
operator|+
name|counter
argument_list|)
condition|)
block|{
name|counter
operator|++
expr_stmt|;
block|}
name|key
operator|=
name|COSName
operator|.
name|getPDFName
argument_list|(
name|csName
operator|+
name|counter
argument_list|)
expr_stmt|;
name|colorSpaces
operator|.
name|setItem
argument_list|(
name|key
argument_list|,
name|colorSpace
argument_list|)
expr_stmt|;
block|}
block|}
name|key
operator|.
name|writePDF
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the color components of current stroking colorspace.      *      * @param components The components to set for the current color.      * @throws IOException If there is an error while writing to the stream.      */
specifier|public
name|void
name|setStrokingColor
parameter_list|(
name|float
index|[]
name|components
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|components
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|components
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|currentStrokingColorSpace
operator|instanceof
name|PDSeparation
operator|||
name|currentStrokingColorSpace
operator|instanceof
name|PDPattern
operator|||
name|currentStrokingColorSpace
operator|instanceof
name|PDDeviceN
operator|||
name|currentStrokingColorSpace
operator|instanceof
name|PDICCBased
condition|)
block|{
name|appendRawCommands
argument_list|(
name|SET_STROKING_COLOR_COMPLEX
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|appendRawCommands
argument_list|(
name|SET_STROKING_COLOR_SIMPLE
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Set the stroking color, specified as RGB.      *      * @param color The color to set.      * @throws IOException If an IO error occurs while writing to the stream.      */
specifier|public
name|void
name|setStrokingColor
parameter_list|(
name|Color
name|color
parameter_list|)
throws|throws
name|IOException
block|{
name|ColorSpace
name|colorSpace
init|=
name|color
operator|.
name|getColorSpace
argument_list|()
decl_stmt|;
if|if
condition|(
name|colorSpace
operator|.
name|getType
argument_list|()
operator|==
name|ColorSpace
operator|.
name|TYPE_RGB
condition|)
block|{
name|setStrokingColor
argument_list|(
name|color
operator|.
name|getRed
argument_list|()
argument_list|,
name|color
operator|.
name|getGreen
argument_list|()
argument_list|,
name|color
operator|.
name|getBlue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|colorSpace
operator|.
name|getType
argument_list|()
operator|==
name|ColorSpace
operator|.
name|TYPE_GRAY
condition|)
block|{
name|color
operator|.
name|getColorComponents
argument_list|(
name|colorComponents
argument_list|)
expr_stmt|;
name|setStrokingColor
argument_list|(
name|colorComponents
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|colorSpace
operator|.
name|getType
argument_list|()
operator|==
name|ColorSpace
operator|.
name|TYPE_CMYK
condition|)
block|{
name|color
operator|.
name|getColorComponents
argument_list|(
name|colorComponents
argument_list|)
expr_stmt|;
name|setStrokingColor
argument_list|(
name|colorComponents
index|[
literal|0
index|]
argument_list|,
name|colorComponents
index|[
literal|2
index|]
argument_list|,
name|colorComponents
index|[
literal|2
index|]
argument_list|,
name|colorComponents
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error: unknown colorspace:"
operator|+
name|colorSpace
argument_list|)
throw|;
block|}
block|}
comment|/**      * Set the non stroking color, specified as RGB.      *      * @param color The color to set.      * @throws IOException If an IO error occurs while writing to the stream.      */
specifier|public
name|void
name|setNonStrokingColor
parameter_list|(
name|Color
name|color
parameter_list|)
throws|throws
name|IOException
block|{
name|ColorSpace
name|colorSpace
init|=
name|color
operator|.
name|getColorSpace
argument_list|()
decl_stmt|;
if|if
condition|(
name|colorSpace
operator|.
name|getType
argument_list|()
operator|==
name|ColorSpace
operator|.
name|TYPE_RGB
condition|)
block|{
name|setNonStrokingColor
argument_list|(
name|color
operator|.
name|getRed
argument_list|()
argument_list|,
name|color
operator|.
name|getGreen
argument_list|()
argument_list|,
name|color
operator|.
name|getBlue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|colorSpace
operator|.
name|getType
argument_list|()
operator|==
name|ColorSpace
operator|.
name|TYPE_GRAY
condition|)
block|{
name|color
operator|.
name|getColorComponents
argument_list|(
name|colorComponents
argument_list|)
expr_stmt|;
name|setNonStrokingColor
argument_list|(
name|colorComponents
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|colorSpace
operator|.
name|getType
argument_list|()
operator|==
name|ColorSpace
operator|.
name|TYPE_CMYK
condition|)
block|{
name|color
operator|.
name|getColorComponents
argument_list|(
name|colorComponents
argument_list|)
expr_stmt|;
name|setNonStrokingColor
argument_list|(
name|colorComponents
index|[
literal|0
index|]
argument_list|,
name|colorComponents
index|[
literal|2
index|]
argument_list|,
name|colorComponents
index|[
literal|2
index|]
argument_list|,
name|colorComponents
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error: unknown colorspace:"
operator|+
name|colorSpace
argument_list|)
throw|;
block|}
block|}
comment|/**      * Set the stroking color, specified as RGB, 0-255.      *      * @param r The red value.      * @param g The green value.      * @param b The blue value.      * @throws IOException If an IO error occurs while writing to the stream.      */
specifier|public
name|void
name|setStrokingColor
parameter_list|(
name|int
name|r
parameter_list|,
name|int
name|g
parameter_list|,
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|r
operator|/
literal|255d
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|g
operator|/
literal|255d
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|b
operator|/
literal|255d
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|RG_STROKING
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the stroking color, specified as CMYK, 0-255.      *      * @param c The cyan value.      * @param m The magenta value.      * @param y The yellow value.      * @param k The black value.      * @throws IOException If an IO error occurs while writing to the stream.      */
specifier|public
name|void
name|setStrokingColor
parameter_list|(
name|int
name|c
parameter_list|,
name|int
name|m
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|k
parameter_list|)
throws|throws
name|IOException
block|{
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|c
operator|/
literal|255d
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|m
operator|/
literal|255d
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|y
operator|/
literal|255d
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|k
operator|/
literal|255d
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|K_STROKING
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the stroking color, specified as CMYK, 0.0-1.0.      *      * @param c The cyan value.      * @param m The magenta value.      * @param y The yellow value.      * @param k The black value.      * @throws IOException If an IO error occurs while writing to the stream.      */
specifier|public
name|void
name|setStrokingColor
parameter_list|(
name|double
name|c
parameter_list|,
name|double
name|m
parameter_list|,
name|double
name|y
parameter_list|,
name|double
name|k
parameter_list|)
throws|throws
name|IOException
block|{
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|y
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|k
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|K_STROKING
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the stroking color, specified as grayscale, 0-255.      *      * @param g The gray value.      * @throws IOException If an IO error occurs while writing to the stream.      */
specifier|public
name|void
name|setStrokingColor
parameter_list|(
name|int
name|g
parameter_list|)
throws|throws
name|IOException
block|{
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|g
operator|/
literal|255d
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|G_STROKING
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the stroking color, specified as Grayscale 0.0-1.0.      *      * @param g The gray value.      * @throws IOException If an IO error occurs while writing to the stream.      */
specifier|public
name|void
name|setStrokingColor
parameter_list|(
name|double
name|g
parameter_list|)
throws|throws
name|IOException
block|{
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|g
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|G_STROKING
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the color components of current non stroking colorspace.      *      * @param components The components to set for the current color.      * @throws IOException If there is an error while writing to the stream.      */
specifier|public
name|void
name|setNonStrokingColor
parameter_list|(
name|float
index|[]
name|components
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|components
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|components
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|currentNonStrokingColorSpace
operator|instanceof
name|PDSeparation
operator|||
name|currentNonStrokingColorSpace
operator|instanceof
name|PDPattern
operator|||
name|currentNonStrokingColorSpace
operator|instanceof
name|PDDeviceN
operator|||
name|currentNonStrokingColorSpace
operator|instanceof
name|PDICCBased
condition|)
block|{
name|appendRawCommands
argument_list|(
name|SET_NON_STROKING_COLOR_COMPLEX
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|appendRawCommands
argument_list|(
name|SET_NON_STROKING_COLOR_SIMPLE
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Set the non stroking color, specified as RGB, 0-255.      *      * @param r The red value.      * @param g The green value.      * @param b The blue value.      * @throws IOException If an IO error occurs while writing to the stream.      */
specifier|public
name|void
name|setNonStrokingColor
parameter_list|(
name|int
name|r
parameter_list|,
name|int
name|g
parameter_list|,
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|r
operator|/
literal|255d
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|g
operator|/
literal|255d
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|b
operator|/
literal|255d
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|RG_NON_STROKING
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the non stroking color, specified as CMYK, 0-255.      *      * @param c The cyan value.      * @param m The magenta value.      * @param y The yellow value.      * @param k The black value.      * @throws IOException If an IO error occurs while writing to the stream.      */
specifier|public
name|void
name|setNonStrokingColor
parameter_list|(
name|int
name|c
parameter_list|,
name|int
name|m
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|k
parameter_list|)
throws|throws
name|IOException
block|{
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|c
operator|/
literal|255d
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|m
operator|/
literal|255d
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|y
operator|/
literal|255d
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|k
operator|/
literal|255d
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|K_NON_STROKING
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the non stroking color, specified as CMYK, 0.0-1.0.      *      * @param c The cyan value.      * @param m The magenta value.      * @param y The yellow value.      * @param k The black value.      * @throws IOException If an IO error occurs while writing to the stream.      */
specifier|public
name|void
name|setNonStrokingColor
parameter_list|(
name|double
name|c
parameter_list|,
name|double
name|m
parameter_list|,
name|double
name|y
parameter_list|,
name|double
name|k
parameter_list|)
throws|throws
name|IOException
block|{
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|y
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|k
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|K_NON_STROKING
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the non stroking color, specified as grayscale, 0-255.      *      * @param g The gray value.      * @throws IOException If an IO error occurs while writing to the stream.      */
specifier|public
name|void
name|setNonStrokingColor
parameter_list|(
name|int
name|g
parameter_list|)
throws|throws
name|IOException
block|{
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|g
operator|/
literal|255d
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|G_NON_STROKING
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the non stroking color, specified as Grayscale 0.0-1.0.      *      * @param g The gray value.      * @throws IOException If an IO error occurs while writing to the stream.      */
specifier|public
name|void
name|setNonStrokingColor
parameter_list|(
name|double
name|g
parameter_list|)
throws|throws
name|IOException
block|{
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|g
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|G_NON_STROKING
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add a rectangle to the current path.      *      * @param x The lower left x coordinate.      * @param y The lower left y coordinate.      * @param width The width of the rectangle.      * @param height The height of the rectangle.      * @throws IOException If there is an error while drawing on the screen.      */
specifier|public
name|void
name|addRect
parameter_list|(
name|float
name|x
parameter_list|,
name|float
name|y
parameter_list|,
name|float
name|width
parameter_list|,
name|float
name|height
parameter_list|)
throws|throws
name|IOException
block|{
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|y
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|width
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|height
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|RECTANGLE
argument_list|)
expr_stmt|;
block|}
comment|/**      * Draw a rectangle on the page using the current non stroking color.      *      * @param x The lower left x coordinate.      * @param y The lower left y coordinate.      * @param width The width of the rectangle.      * @param height The height of the rectangle.      * @throws IOException If there is an error while drawing on the screen.      */
specifier|public
name|void
name|fillRect
parameter_list|(
name|float
name|x
parameter_list|,
name|float
name|y
parameter_list|,
name|float
name|width
parameter_list|,
name|float
name|height
parameter_list|)
throws|throws
name|IOException
block|{
name|addRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|fill
argument_list|(
name|PathIterator
operator|.
name|WIND_NON_ZERO
argument_list|)
expr_stmt|;
block|}
comment|/**      * Append a cubic Bézier curve to the current path. The curve extends from the current       * point to the point (x3 , y3 ), using (x1 , y1 ) and (x2 , y2 ) as the Bézier control points      * @param x1 x coordinate of the point 1      * @param y1 y coordinate of the point 1      * @param x2 x coordinate of the point 2      * @param y2 y coordinate of the point 2      * @param x3 x coordinate of the point 3      * @param y3 y coordinate of the point 3      * @throws IOException If there is an error while adding the .      */
specifier|public
name|void
name|addBezier312
parameter_list|(
name|float
name|x1
parameter_list|,
name|float
name|y1
parameter_list|,
name|float
name|x2
parameter_list|,
name|float
name|y2
parameter_list|,
name|float
name|x3
parameter_list|,
name|float
name|y3
parameter_list|)
throws|throws
name|IOException
block|{
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|x1
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|y1
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|x2
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|y2
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|x3
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|y3
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|BEZIER_312
argument_list|)
expr_stmt|;
block|}
comment|/**      * Append a cubic Bézier curve to the current path. The curve extends from the current       * point to the point (x3 , y3 ), using the current point and (x2 , y2 ) as the Bézier control points      * @param x2 x coordinate of the point 2      * @param y2 y coordinate of the point 2      * @param x3 x coordinate of the point 3      * @param y3 y coordinate of the point 3      * @throws IOException If there is an error while adding the .      */
specifier|public
name|void
name|addBezier32
parameter_list|(
name|float
name|x2
parameter_list|,
name|float
name|y2
parameter_list|,
name|float
name|x3
parameter_list|,
name|float
name|y3
parameter_list|)
throws|throws
name|IOException
block|{
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|x2
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|y2
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|x3
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|y3
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|BEZIER_32
argument_list|)
expr_stmt|;
block|}
comment|/**      * Append a cubic Bézier curve to the current path. The curve extends from the current       * point to the point (x3 , y3 ), using (x1 , y1 ) and (x3 , y3 ) as the Bézier control points      * @param x1 x coordinate of the point 1      * @param y1 y coordinate of the point 1      * @param x3 x coordinate of the point 3      * @param y3 y coordinate of the point 3      * @throws IOException If there is an error while adding the .      */
specifier|public
name|void
name|addBezier31
parameter_list|(
name|float
name|x1
parameter_list|,
name|float
name|y1
parameter_list|,
name|float
name|x3
parameter_list|,
name|float
name|y3
parameter_list|)
throws|throws
name|IOException
block|{
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|x1
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|y1
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|x3
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|y3
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|BEZIER_313
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add a line to the given coordinate.       *      * @param x The x coordinate.      * @param y The y coordinate.      * @throws IOException If there is an error while adding the line.      */
specifier|public
name|void
name|moveTo
parameter_list|(
name|float
name|x
parameter_list|,
name|float
name|y
parameter_list|)
throws|throws
name|IOException
block|{
comment|// moveTo
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|y
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|MOVE_TO
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add a move to the given coordinate.      *      * @param x The x coordinate.      * @param y The y coordinate.      * @throws IOException If there is an error while adding the line.      */
specifier|public
name|void
name|lineTo
parameter_list|(
name|float
name|x
parameter_list|,
name|float
name|y
parameter_list|)
throws|throws
name|IOException
block|{
comment|// moveTo
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|y
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|LINE_TO
argument_list|)
expr_stmt|;
block|}
comment|/**      * add a line to the current path.      *      * @param xStart The start x coordinate.      * @param yStart The start y coordinate.      * @param xEnd The end x coordinate.      * @param yEnd The end y coordinate.      * @throws IOException If there is an error while adding the line.      */
specifier|public
name|void
name|addLine
parameter_list|(
name|float
name|xStart
parameter_list|,
name|float
name|yStart
parameter_list|,
name|float
name|xEnd
parameter_list|,
name|float
name|yEnd
parameter_list|)
throws|throws
name|IOException
block|{
comment|// moveTo
name|moveTo
argument_list|(
name|xStart
argument_list|,
name|yStart
argument_list|)
expr_stmt|;
comment|// lineTo
name|lineTo
argument_list|(
name|xEnd
argument_list|,
name|yEnd
argument_list|)
expr_stmt|;
block|}
comment|/**      * Draw a line on the page using the current non stroking color and the current line width.      *      * @param xStart The start x coordinate.      * @param yStart The start y coordinate.      * @param xEnd The end x coordinate.      * @param yEnd The end y coordinate.      * @throws IOException If there is an error while drawing on the screen.      */
specifier|public
name|void
name|drawLine
parameter_list|(
name|float
name|xStart
parameter_list|,
name|float
name|yStart
parameter_list|,
name|float
name|xEnd
parameter_list|,
name|float
name|yEnd
parameter_list|)
throws|throws
name|IOException
block|{
name|addLine
argument_list|(
name|xStart
argument_list|,
name|yStart
argument_list|,
name|xEnd
argument_list|,
name|yEnd
argument_list|)
expr_stmt|;
comment|// stroke
name|stroke
argument_list|()
expr_stmt|;
block|}
comment|/**      * Add a polygon to the current path.      * @param x x coordinate of each points      * @param y y coordinate of each points      * @throws IOException If there is an error while drawing on the screen.      */
specifier|public
name|void
name|addPolygon
parameter_list|(
name|float
index|[]
name|x
parameter_list|,
name|float
index|[]
name|y
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|x
operator|.
name|length
operator|!=
name|y
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error: some points are missing coordinate"
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|x
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|moveTo
argument_list|(
name|x
index|[
name|i
index|]
argument_list|,
name|y
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lineTo
argument_list|(
name|x
index|[
name|i
index|]
argument_list|,
name|y
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|closeSubPath
argument_list|()
expr_stmt|;
block|}
comment|/**      * Draw a polygon on the page using the current non stroking color.      * @param x x coordinate of each points      * @param y y coordinate of each points      * @throws IOException If there is an error while drawing on the screen.      */
specifier|public
name|void
name|drawPolygon
parameter_list|(
name|float
index|[]
name|x
parameter_list|,
name|float
index|[]
name|y
parameter_list|)
throws|throws
name|IOException
block|{
name|addPolygon
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|stroke
argument_list|()
expr_stmt|;
block|}
comment|/**      * Draw and fill a polygon on the page using the current non stroking color.      * @param x x coordinate of each points      * @param y y coordinate of each points      * @throws IOException If there is an error while drawing on the screen.      */
specifier|public
name|void
name|fillPolygon
parameter_list|(
name|float
index|[]
name|x
parameter_list|,
name|float
index|[]
name|y
parameter_list|)
throws|throws
name|IOException
block|{
name|addPolygon
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|fill
argument_list|(
name|PathIterator
operator|.
name|WIND_NON_ZERO
argument_list|)
expr_stmt|;
block|}
comment|/**      * Stroke the path.      */
specifier|public
name|void
name|stroke
parameter_list|()
throws|throws
name|IOException
block|{
name|appendRawCommands
argument_list|(
name|STROKE
argument_list|)
expr_stmt|;
block|}
comment|/**      * Close and stroke the path.      */
specifier|public
name|void
name|closeAndStroke
parameter_list|()
throws|throws
name|IOException
block|{
name|appendRawCommands
argument_list|(
name|CLOSE_STROKE
argument_list|)
expr_stmt|;
block|}
comment|/**      * Fill the path.      */
specifier|public
name|void
name|fill
parameter_list|(
name|int
name|windingRule
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|windingRule
operator|==
name|PathIterator
operator|.
name|WIND_NON_ZERO
condition|)
block|{
name|appendRawCommands
argument_list|(
name|FILL_NON_ZERO
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|windingRule
operator|==
name|PathIterator
operator|.
name|WIND_EVEN_ODD
condition|)
block|{
name|appendRawCommands
argument_list|(
name|FILL_EVEN_ODD
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error: unknown value for winding rule"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Close subpath.      */
specifier|public
name|void
name|closeSubPath
parameter_list|()
throws|throws
name|IOException
block|{
name|appendRawCommands
argument_list|(
name|CLOSE_SUBPATH
argument_list|)
expr_stmt|;
block|}
comment|/**      * Clip path.      */
specifier|public
name|void
name|clipPath
parameter_list|(
name|int
name|windingRule
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|windingRule
operator|==
name|PathIterator
operator|.
name|WIND_NON_ZERO
condition|)
block|{
name|appendRawCommands
argument_list|(
name|CLIP_PATH_NON_ZERO
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|NOP
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|windingRule
operator|==
name|PathIterator
operator|.
name|WIND_EVEN_ODD
condition|)
block|{
name|appendRawCommands
argument_list|(
name|CLIP_PATH_EVEN_ODD
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|NOP
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error: unknown value for winding rule"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Set linewidth to the given value.      *      * @param lineWidth The width which is used for drwaing.      * @throws IOException If there is an error while drawing on the screen.      */
specifier|public
name|void
name|setLineWidth
parameter_list|(
name|float
name|lineWidth
parameter_list|)
throws|throws
name|IOException
block|{
name|appendRawCommands
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|lineWidth
argument_list|)
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|SPACE
argument_list|)
expr_stmt|;
name|appendRawCommands
argument_list|(
name|LINE_WIDTH
argument_list|)
expr_stmt|;
block|}
comment|/**      * q operator. Saves the current graphics state.      * @throws IOException If an error occurs while writing to the stream.      */
specifier|public
name|void
name|saveGraphicsState
parameter_list|()
throws|throws
name|IOException
block|{
name|appendRawCommands
argument_list|(
name|SAVE_GRAPHICS_STATE
argument_list|)
expr_stmt|;
block|}
comment|/**      * Q operator. Restores the current graphics state.      * @throws IOException If an error occurs while writing to the stream.      */
specifier|public
name|void
name|restoreGraphicsState
parameter_list|()
throws|throws
name|IOException
block|{
name|appendRawCommands
argument_list|(
name|RESTORE_GRAPHICS_STATE
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will append raw commands to the content stream.      *      * @param commands The commands to append to the stream.      * @throws IOException If an error occurs while writing to the stream.      */
specifier|public
name|void
name|appendRawCommands
parameter_list|(
name|String
name|commands
parameter_list|)
throws|throws
name|IOException
block|{
name|appendRawCommands
argument_list|(
name|commands
operator|.
name|getBytes
argument_list|(
literal|"ISO-8859-1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will append raw commands to the content stream.      *      * @param commands The commands to append to the stream.      * @throws IOException If an error occurs while writing to the stream.      */
specifier|public
name|void
name|appendRawCommands
parameter_list|(
name|byte
index|[]
name|commands
parameter_list|)
throws|throws
name|IOException
block|{
name|output
operator|.
name|write
argument_list|(
name|commands
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will append raw commands to the content stream.      *      * @param data Append a raw byte to the stream.      *      * @throws IOException If an error occurs while writing to the stream.      */
specifier|public
name|void
name|appendRawCommands
parameter_list|(
name|int
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|output
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
comment|/**      * Close the content stream.  This must be called when you are done with this      * object.      * @throws IOException If the underlying stream has a problem being written to.      */
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

