begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|blend
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Blend mode.  *  * @author KÃ¼hn&amp; Weyh Software GmbH  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|BlendMode
block|{
specifier|public
specifier|static
specifier|final
name|SeparableBlendMode
name|NORMAL
init|=
operator|new
name|SeparableBlendMode
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|float
name|blendChannel
parameter_list|(
name|float
name|srcValue
parameter_list|,
name|float
name|dstValue
parameter_list|)
block|{
return|return
name|srcValue
return|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SeparableBlendMode
name|COMPATIBLE
init|=
name|NORMAL
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SeparableBlendMode
name|MULTIPLY
init|=
operator|new
name|SeparableBlendMode
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|float
name|blendChannel
parameter_list|(
name|float
name|srcValue
parameter_list|,
name|float
name|dstValue
parameter_list|)
block|{
return|return
name|srcValue
operator|*
name|dstValue
return|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SeparableBlendMode
name|SCREEN
init|=
operator|new
name|SeparableBlendMode
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|float
name|blendChannel
parameter_list|(
name|float
name|srcValue
parameter_list|,
name|float
name|dstValue
parameter_list|)
block|{
return|return
name|srcValue
operator|+
name|dstValue
operator|-
name|srcValue
operator|*
name|dstValue
return|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SeparableBlendMode
name|OVERLAY
init|=
operator|new
name|SeparableBlendMode
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|float
name|blendChannel
parameter_list|(
name|float
name|srcValue
parameter_list|,
name|float
name|dstValue
parameter_list|)
block|{
return|return
operator|(
name|dstValue
operator|<=
literal|0.5
operator|)
condition|?
literal|2
operator|*
name|dstValue
operator|*
name|srcValue
else|:
literal|2
operator|*
operator|(
name|srcValue
operator|+
name|dstValue
operator|-
name|srcValue
operator|*
name|dstValue
operator|)
operator|-
literal|1
return|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SeparableBlendMode
name|DARKEN
init|=
operator|new
name|SeparableBlendMode
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|float
name|blendChannel
parameter_list|(
name|float
name|srcValue
parameter_list|,
name|float
name|dstValue
parameter_list|)
block|{
return|return
name|Math
operator|.
name|min
argument_list|(
name|srcValue
argument_list|,
name|dstValue
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SeparableBlendMode
name|LIGHTEN
init|=
operator|new
name|SeparableBlendMode
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|float
name|blendChannel
parameter_list|(
name|float
name|srcValue
parameter_list|,
name|float
name|dstValue
parameter_list|)
block|{
return|return
name|Math
operator|.
name|max
argument_list|(
name|srcValue
argument_list|,
name|dstValue
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SeparableBlendMode
name|COLOR_DODGE
init|=
operator|new
name|SeparableBlendMode
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|float
name|blendChannel
parameter_list|(
name|float
name|srcValue
parameter_list|,
name|float
name|dstValue
parameter_list|)
block|{
comment|// See PDF 2.0 specification
if|if
condition|(
name|Float
operator|.
name|compare
argument_list|(
name|dstValue
argument_list|,
literal|0
argument_list|)
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|dstValue
operator|>=
literal|1
operator|-
name|srcValue
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
name|dstValue
operator|/
operator|(
literal|1
operator|-
name|srcValue
operator|)
return|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SeparableBlendMode
name|COLOR_BURN
init|=
operator|new
name|SeparableBlendMode
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|float
name|blendChannel
parameter_list|(
name|float
name|srcValue
parameter_list|,
name|float
name|dstValue
parameter_list|)
block|{
comment|// See PDF 2.0 specification
if|if
condition|(
name|Float
operator|.
name|compare
argument_list|(
name|dstValue
argument_list|,
literal|1
argument_list|)
operator|==
literal|0
condition|)
block|{
return|return
literal|1
return|;
block|}
if|if
condition|(
literal|1
operator|-
name|dstValue
operator|>=
name|srcValue
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
literal|1
operator|-
operator|(
literal|1
operator|-
name|dstValue
operator|)
operator|/
name|srcValue
return|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SeparableBlendMode
name|HARD_LIGHT
init|=
operator|new
name|SeparableBlendMode
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|float
name|blendChannel
parameter_list|(
name|float
name|srcValue
parameter_list|,
name|float
name|dstValue
parameter_list|)
block|{
return|return
operator|(
name|srcValue
operator|<=
literal|0.5
operator|)
condition|?
literal|2
operator|*
name|dstValue
operator|*
name|srcValue
else|:
literal|2
operator|*
operator|(
name|srcValue
operator|+
name|dstValue
operator|-
name|srcValue
operator|*
name|dstValue
operator|)
operator|-
literal|1
return|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SeparableBlendMode
name|SOFT_LIGHT
init|=
operator|new
name|SeparableBlendMode
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|float
name|blendChannel
parameter_list|(
name|float
name|srcValue
parameter_list|,
name|float
name|dstValue
parameter_list|)
block|{
if|if
condition|(
name|srcValue
operator|<=
literal|0.5
condition|)
block|{
return|return
name|dstValue
operator|-
operator|(
literal|1
operator|-
literal|2
operator|*
name|srcValue
operator|)
operator|*
name|dstValue
operator|*
operator|(
literal|1
operator|-
name|dstValue
operator|)
return|;
block|}
else|else
block|{
name|float
name|d
init|=
operator|(
name|dstValue
operator|<=
literal|0.25
operator|)
condition|?
operator|(
operator|(
literal|16
operator|*
name|dstValue
operator|-
literal|12
operator|)
operator|*
name|dstValue
operator|+
literal|4
operator|)
operator|*
name|dstValue
else|:
operator|(
name|float
operator|)
name|Math
operator|.
name|sqrt
argument_list|(
name|dstValue
argument_list|)
decl_stmt|;
return|return
name|dstValue
operator|+
operator|(
literal|2
operator|*
name|srcValue
operator|-
literal|1
operator|)
operator|*
operator|(
name|d
operator|-
name|dstValue
operator|)
return|;
block|}
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SeparableBlendMode
name|DIFFERENCE
init|=
operator|new
name|SeparableBlendMode
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|float
name|blendChannel
parameter_list|(
name|float
name|srcValue
parameter_list|,
name|float
name|dstValue
parameter_list|)
block|{
return|return
name|Math
operator|.
name|abs
argument_list|(
name|dstValue
operator|-
name|srcValue
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SeparableBlendMode
name|EXCLUSION
init|=
operator|new
name|SeparableBlendMode
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|float
name|blendChannel
parameter_list|(
name|float
name|srcValue
parameter_list|,
name|float
name|dstValue
parameter_list|)
block|{
return|return
name|dstValue
operator|+
name|srcValue
operator|-
literal|2
operator|*
name|dstValue
operator|*
name|srcValue
return|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|NonSeparableBlendMode
name|HUE
init|=
operator|new
name|NonSeparableBlendMode
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|blend
parameter_list|(
name|float
index|[]
name|srcValues
parameter_list|,
name|float
index|[]
name|dstValues
parameter_list|,
name|float
index|[]
name|result
parameter_list|)
block|{
name|float
index|[]
name|temp
init|=
operator|new
name|float
index|[
literal|3
index|]
decl_stmt|;
name|getSaturationRGB
argument_list|(
name|dstValues
argument_list|,
name|srcValues
argument_list|,
name|temp
argument_list|)
expr_stmt|;
name|getLuminosityRGB
argument_list|(
name|dstValues
argument_list|,
name|temp
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|NonSeparableBlendMode
name|SATURATION
init|=
operator|new
name|NonSeparableBlendMode
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|blend
parameter_list|(
name|float
index|[]
name|srcValues
parameter_list|,
name|float
index|[]
name|dstValues
parameter_list|,
name|float
index|[]
name|result
parameter_list|)
block|{
name|getSaturationRGB
argument_list|(
name|srcValues
argument_list|,
name|dstValues
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|NonSeparableBlendMode
name|COLOR
init|=
operator|new
name|NonSeparableBlendMode
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|blend
parameter_list|(
name|float
index|[]
name|srcValues
parameter_list|,
name|float
index|[]
name|dstValues
parameter_list|,
name|float
index|[]
name|result
parameter_list|)
block|{
name|getLuminosityRGB
argument_list|(
name|dstValues
argument_list|,
name|srcValues
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|NonSeparableBlendMode
name|LUMINOSITY
init|=
operator|new
name|NonSeparableBlendMode
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|blend
parameter_list|(
name|float
index|[]
name|srcValues
parameter_list|,
name|float
index|[]
name|dstValues
parameter_list|,
name|float
index|[]
name|result
parameter_list|)
block|{
name|getLuminosityRGB
argument_list|(
name|srcValues
argument_list|,
name|dstValues
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|// these maps *must* come after the BlendMode.* constant declarations, otherwise their values would be null
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|COSName
argument_list|,
name|BlendMode
argument_list|>
name|BLEND_MODES
init|=
name|createBlendModeMap
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|BlendMode
argument_list|,
name|COSName
argument_list|>
name|BLEND_MODE_NAMES
init|=
name|createBlendModeNamesMap
argument_list|()
decl_stmt|;
name|BlendMode
parameter_list|()
block|{     }
comment|/**      * Determines the blend mode from the BM entry in the COS ExtGState.      *      * @param cosBlendMode name or array      * @return blending mode      */
specifier|public
specifier|static
name|BlendMode
name|getInstance
parameter_list|(
name|COSBase
name|cosBlendMode
parameter_list|)
block|{
name|BlendMode
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cosBlendMode
operator|instanceof
name|COSName
condition|)
block|{
name|result
operator|=
name|BLEND_MODES
operator|.
name|get
argument_list|(
name|cosBlendMode
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cosBlendMode
operator|instanceof
name|COSArray
condition|)
block|{
name|COSArray
name|cosBlendModeArray
init|=
operator|(
name|COSArray
operator|)
name|cosBlendMode
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cosBlendModeArray
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|=
name|BLEND_MODES
operator|.
name|get
argument_list|(
name|cosBlendModeArray
operator|.
name|getObject
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
block|}
block|}
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
return|return
name|result
return|;
block|}
return|return
name|BlendMode
operator|.
name|NORMAL
return|;
block|}
comment|/**      * Determines the blend mode name from the BM object.      *      * @param bm Blend mode.      * @return name of blend mode.      */
specifier|public
specifier|static
name|COSName
name|getCOSName
parameter_list|(
name|BlendMode
name|bm
parameter_list|)
block|{
return|return
name|BLEND_MODE_NAMES
operator|.
name|get
argument_list|(
name|bm
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|int
name|get255Value
parameter_list|(
name|float
name|val
parameter_list|)
block|{
return|return
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|val
operator|>=
literal|1.0
condition|?
literal|255
else|:
name|val
operator|*
literal|255.0
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|getSaturationRGB
parameter_list|(
name|float
index|[]
name|srcValues
parameter_list|,
name|float
index|[]
name|dstValues
parameter_list|,
name|float
index|[]
name|result
parameter_list|)
block|{
name|int
name|minb
decl_stmt|;
name|int
name|maxb
decl_stmt|;
name|int
name|mins
decl_stmt|;
name|int
name|maxs
decl_stmt|;
name|int
name|y
decl_stmt|;
name|int
name|scale
decl_stmt|;
name|int
name|r
decl_stmt|;
name|int
name|g
decl_stmt|;
name|int
name|b
decl_stmt|;
name|int
name|rd
init|=
name|get255Value
argument_list|(
name|dstValues
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|int
name|gd
init|=
name|get255Value
argument_list|(
name|dstValues
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|int
name|bd
init|=
name|get255Value
argument_list|(
name|dstValues
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|int
name|rs
init|=
name|get255Value
argument_list|(
name|srcValues
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|int
name|gs
init|=
name|get255Value
argument_list|(
name|srcValues
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|int
name|bs
init|=
name|get255Value
argument_list|(
name|srcValues
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|minb
operator|=
name|Math
operator|.
name|min
argument_list|(
name|rd
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|gd
argument_list|,
name|bd
argument_list|)
argument_list|)
expr_stmt|;
name|maxb
operator|=
name|Math
operator|.
name|max
argument_list|(
name|rd
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|gd
argument_list|,
name|bd
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|minb
operator|==
name|maxb
condition|)
block|{
comment|/* backdrop has zero saturation, avoid divide by 0 */
name|result
index|[
literal|0
index|]
operator|=
name|gd
operator|/
literal|255.0f
expr_stmt|;
name|result
index|[
literal|1
index|]
operator|=
name|gd
operator|/
literal|255.0f
expr_stmt|;
name|result
index|[
literal|2
index|]
operator|=
name|gd
operator|/
literal|255.0f
expr_stmt|;
return|return;
block|}
name|mins
operator|=
name|Math
operator|.
name|min
argument_list|(
name|rs
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|gs
argument_list|,
name|bs
argument_list|)
argument_list|)
expr_stmt|;
name|maxs
operator|=
name|Math
operator|.
name|max
argument_list|(
name|rs
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|gs
argument_list|,
name|bs
argument_list|)
argument_list|)
expr_stmt|;
name|scale
operator|=
operator|(
operator|(
name|maxs
operator|-
name|mins
operator|)
operator|<<
literal|16
operator|)
operator|/
operator|(
name|maxb
operator|-
name|minb
operator|)
expr_stmt|;
name|y
operator|=
operator|(
name|rd
operator|*
literal|77
operator|+
name|gd
operator|*
literal|151
operator|+
name|bd
operator|*
literal|28
operator|+
literal|0x80
operator|)
operator|>>
literal|8
expr_stmt|;
name|r
operator|=
name|y
operator|+
operator|(
operator|(
operator|(
operator|(
name|rd
operator|-
name|y
operator|)
operator|*
name|scale
operator|)
operator|+
literal|0x8000
operator|)
operator|>>
literal|16
operator|)
expr_stmt|;
name|g
operator|=
name|y
operator|+
operator|(
operator|(
operator|(
operator|(
name|gd
operator|-
name|y
operator|)
operator|*
name|scale
operator|)
operator|+
literal|0x8000
operator|)
operator|>>
literal|16
operator|)
expr_stmt|;
name|b
operator|=
name|y
operator|+
operator|(
operator|(
operator|(
operator|(
name|bd
operator|-
name|y
operator|)
operator|*
name|scale
operator|)
operator|+
literal|0x8000
operator|)
operator|>>
literal|16
operator|)
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|r
operator||
name|g
operator||
name|b
operator|)
operator|&
literal|0x100
operator|)
operator|==
literal|0x100
condition|)
block|{
name|int
name|scalemin
decl_stmt|;
name|int
name|scalemax
decl_stmt|;
name|int
name|min
decl_stmt|;
name|int
name|max
decl_stmt|;
name|min
operator|=
name|Math
operator|.
name|min
argument_list|(
name|r
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|g
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|max
operator|=
name|Math
operator|.
name|max
argument_list|(
name|r
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|g
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|min
operator|<
literal|0
condition|)
block|{
name|scalemin
operator|=
operator|(
name|y
operator|<<
literal|16
operator|)
operator|/
operator|(
name|y
operator|-
name|min
operator|)
expr_stmt|;
block|}
else|else
block|{
name|scalemin
operator|=
literal|0x10000
expr_stmt|;
block|}
if|if
condition|(
name|max
operator|>
literal|255
condition|)
block|{
name|scalemax
operator|=
operator|(
operator|(
literal|255
operator|-
name|y
operator|)
operator|<<
literal|16
operator|)
operator|/
operator|(
name|max
operator|-
name|y
operator|)
expr_stmt|;
block|}
else|else
block|{
name|scalemax
operator|=
literal|0x10000
expr_stmt|;
block|}
name|scale
operator|=
name|Math
operator|.
name|min
argument_list|(
name|scalemin
argument_list|,
name|scalemax
argument_list|)
expr_stmt|;
name|r
operator|=
name|y
operator|+
operator|(
operator|(
operator|(
name|r
operator|-
name|y
operator|)
operator|*
name|scale
operator|+
literal|0x8000
operator|)
operator|>>
literal|16
operator|)
expr_stmt|;
name|g
operator|=
name|y
operator|+
operator|(
operator|(
operator|(
name|g
operator|-
name|y
operator|)
operator|*
name|scale
operator|+
literal|0x8000
operator|)
operator|>>
literal|16
operator|)
expr_stmt|;
name|b
operator|=
name|y
operator|+
operator|(
operator|(
operator|(
name|b
operator|-
name|y
operator|)
operator|*
name|scale
operator|+
literal|0x8000
operator|)
operator|>>
literal|16
operator|)
expr_stmt|;
block|}
name|result
index|[
literal|0
index|]
operator|=
name|r
operator|/
literal|255.0f
expr_stmt|;
name|result
index|[
literal|1
index|]
operator|=
name|g
operator|/
literal|255.0f
expr_stmt|;
name|result
index|[
literal|2
index|]
operator|=
name|b
operator|/
literal|255.0f
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|getLuminosityRGB
parameter_list|(
name|float
index|[]
name|srcValues
parameter_list|,
name|float
index|[]
name|dstValues
parameter_list|,
name|float
index|[]
name|result
parameter_list|)
block|{
name|int
name|delta
decl_stmt|;
name|int
name|scale
decl_stmt|;
name|int
name|r
decl_stmt|;
name|int
name|g
decl_stmt|;
name|int
name|b
decl_stmt|;
name|int
name|y
decl_stmt|;
name|int
name|rd
init|=
name|get255Value
argument_list|(
name|dstValues
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|int
name|gd
init|=
name|get255Value
argument_list|(
name|dstValues
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|int
name|bd
init|=
name|get255Value
argument_list|(
name|dstValues
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|int
name|rs
init|=
name|get255Value
argument_list|(
name|srcValues
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|int
name|gs
init|=
name|get255Value
argument_list|(
name|srcValues
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|int
name|bs
init|=
name|get255Value
argument_list|(
name|srcValues
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|delta
operator|=
operator|(
operator|(
name|rs
operator|-
name|rd
operator|)
operator|*
literal|77
operator|+
operator|(
name|gs
operator|-
name|gd
operator|)
operator|*
literal|151
operator|+
operator|(
name|bs
operator|-
name|bd
operator|)
operator|*
literal|28
operator|+
literal|0x80
operator|)
operator|>>
literal|8
expr_stmt|;
name|r
operator|=
name|rd
operator|+
name|delta
expr_stmt|;
name|g
operator|=
name|gd
operator|+
name|delta
expr_stmt|;
name|b
operator|=
name|bd
operator|+
name|delta
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|r
operator||
name|g
operator||
name|b
operator|)
operator|&
literal|0x100
operator|)
operator|==
literal|0x100
condition|)
block|{
name|y
operator|=
operator|(
name|rs
operator|*
literal|77
operator|+
name|gs
operator|*
literal|151
operator|+
name|bs
operator|*
literal|28
operator|+
literal|0x80
operator|)
operator|>>
literal|8
expr_stmt|;
if|if
condition|(
name|delta
operator|>
literal|0
condition|)
block|{
name|int
name|max
decl_stmt|;
name|max
operator|=
name|Math
operator|.
name|max
argument_list|(
name|r
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|g
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|scale
operator|=
name|max
operator|==
name|y
condition|?
literal|0
else|:
operator|(
operator|(
literal|255
operator|-
name|y
operator|)
operator|<<
literal|16
operator|)
operator|/
operator|(
name|max
operator|-
name|y
operator|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|min
decl_stmt|;
name|min
operator|=
name|Math
operator|.
name|min
argument_list|(
name|r
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|g
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|scale
operator|=
name|y
operator|==
name|min
condition|?
literal|0
else|:
operator|(
name|y
operator|<<
literal|16
operator|)
operator|/
operator|(
name|y
operator|-
name|min
operator|)
expr_stmt|;
block|}
name|r
operator|=
name|y
operator|+
operator|(
operator|(
operator|(
name|r
operator|-
name|y
operator|)
operator|*
name|scale
operator|+
literal|0x8000
operator|)
operator|>>
literal|16
operator|)
expr_stmt|;
name|g
operator|=
name|y
operator|+
operator|(
operator|(
operator|(
name|g
operator|-
name|y
operator|)
operator|*
name|scale
operator|+
literal|0x8000
operator|)
operator|>>
literal|16
operator|)
expr_stmt|;
name|b
operator|=
name|y
operator|+
operator|(
operator|(
operator|(
name|b
operator|-
name|y
operator|)
operator|*
name|scale
operator|+
literal|0x8000
operator|)
operator|>>
literal|16
operator|)
expr_stmt|;
block|}
name|result
index|[
literal|0
index|]
operator|=
name|r
operator|/
literal|255.0f
expr_stmt|;
name|result
index|[
literal|1
index|]
operator|=
name|g
operator|/
literal|255.0f
expr_stmt|;
name|result
index|[
literal|2
index|]
operator|=
name|b
operator|/
literal|255.0f
expr_stmt|;
block|}
specifier|private
specifier|static
name|Map
argument_list|<
name|COSName
argument_list|,
name|BlendMode
argument_list|>
name|createBlendModeMap
parameter_list|()
block|{
name|Map
argument_list|<
name|COSName
argument_list|,
name|BlendMode
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|13
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|COSName
operator|.
name|NORMAL
argument_list|,
name|BlendMode
operator|.
name|NORMAL
argument_list|)
expr_stmt|;
comment|// BlendMode.COMPATIBLE should not be used
name|map
operator|.
name|put
argument_list|(
name|COSName
operator|.
name|COMPATIBLE
argument_list|,
name|BlendMode
operator|.
name|NORMAL
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|COSName
operator|.
name|MULTIPLY
argument_list|,
name|BlendMode
operator|.
name|MULTIPLY
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|COSName
operator|.
name|SCREEN
argument_list|,
name|BlendMode
operator|.
name|SCREEN
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|COSName
operator|.
name|OVERLAY
argument_list|,
name|BlendMode
operator|.
name|OVERLAY
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|COSName
operator|.
name|DARKEN
argument_list|,
name|BlendMode
operator|.
name|DARKEN
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|COSName
operator|.
name|LIGHTEN
argument_list|,
name|BlendMode
operator|.
name|LIGHTEN
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|COSName
operator|.
name|COLOR_DODGE
argument_list|,
name|BlendMode
operator|.
name|COLOR_DODGE
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|COSName
operator|.
name|COLOR_BURN
argument_list|,
name|BlendMode
operator|.
name|COLOR_BURN
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|COSName
operator|.
name|HARD_LIGHT
argument_list|,
name|BlendMode
operator|.
name|HARD_LIGHT
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|COSName
operator|.
name|SOFT_LIGHT
argument_list|,
name|BlendMode
operator|.
name|SOFT_LIGHT
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|COSName
operator|.
name|DIFFERENCE
argument_list|,
name|BlendMode
operator|.
name|DIFFERENCE
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|COSName
operator|.
name|EXCLUSION
argument_list|,
name|BlendMode
operator|.
name|EXCLUSION
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|COSName
operator|.
name|HUE
argument_list|,
name|BlendMode
operator|.
name|HUE
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|COSName
operator|.
name|SATURATION
argument_list|,
name|BlendMode
operator|.
name|SATURATION
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|COSName
operator|.
name|LUMINOSITY
argument_list|,
name|BlendMode
operator|.
name|LUMINOSITY
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|COSName
operator|.
name|COLOR
argument_list|,
name|BlendMode
operator|.
name|COLOR
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
specifier|private
specifier|static
name|Map
argument_list|<
name|BlendMode
argument_list|,
name|COSName
argument_list|>
name|createBlendModeNamesMap
parameter_list|()
block|{
name|Map
argument_list|<
name|BlendMode
argument_list|,
name|COSName
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|13
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|BlendMode
operator|.
name|NORMAL
argument_list|,
name|COSName
operator|.
name|NORMAL
argument_list|)
expr_stmt|;
comment|// BlendMode.COMPATIBLE should not be used
name|map
operator|.
name|put
argument_list|(
name|BlendMode
operator|.
name|COMPATIBLE
argument_list|,
name|COSName
operator|.
name|NORMAL
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|BlendMode
operator|.
name|MULTIPLY
argument_list|,
name|COSName
operator|.
name|MULTIPLY
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|BlendMode
operator|.
name|SCREEN
argument_list|,
name|COSName
operator|.
name|SCREEN
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|BlendMode
operator|.
name|OVERLAY
argument_list|,
name|COSName
operator|.
name|OVERLAY
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|BlendMode
operator|.
name|DARKEN
argument_list|,
name|COSName
operator|.
name|DARKEN
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|BlendMode
operator|.
name|LIGHTEN
argument_list|,
name|COSName
operator|.
name|LIGHTEN
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|BlendMode
operator|.
name|COLOR_DODGE
argument_list|,
name|COSName
operator|.
name|COLOR_DODGE
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|BlendMode
operator|.
name|COLOR_BURN
argument_list|,
name|COSName
operator|.
name|COLOR_BURN
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|BlendMode
operator|.
name|HARD_LIGHT
argument_list|,
name|COSName
operator|.
name|HARD_LIGHT
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|BlendMode
operator|.
name|SOFT_LIGHT
argument_list|,
name|COSName
operator|.
name|SOFT_LIGHT
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|BlendMode
operator|.
name|DIFFERENCE
argument_list|,
name|COSName
operator|.
name|DIFFERENCE
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|BlendMode
operator|.
name|EXCLUSION
argument_list|,
name|COSName
operator|.
name|EXCLUSION
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|BlendMode
operator|.
name|HUE
argument_list|,
name|COSName
operator|.
name|HUE
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|BlendMode
operator|.
name|SATURATION
argument_list|,
name|COSName
operator|.
name|SATURATION
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|BlendMode
operator|.
name|LUMINOSITY
argument_list|,
name|COSName
operator|.
name|LUMINOSITY
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|BlendMode
operator|.
name|COLOR
argument_list|,
name|COSName
operator|.
name|COLOR
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
block|}
end_class

end_unit

