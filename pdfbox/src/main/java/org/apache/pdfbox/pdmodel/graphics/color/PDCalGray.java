begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSFloat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSNumber
import|;
end_import

begin_comment
comment|/**  * A CalGray colour space is a special case of a single-component CIE-based  * colour space.  *  * @author John Hewson  * @author Ben Litchfield  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|PDCalGray
extends|extends
name|PDCIEDictionaryBasedColorSpace
block|{
specifier|private
specifier|final
name|PDColor
name|initialColor
init|=
operator|new
name|PDColor
argument_list|(
operator|new
name|float
index|[]
block|{
literal|0
block|}
argument_list|,
name|this
argument_list|)
decl_stmt|;
comment|// PDFBOX-4119: cache the results for much improved performance
comment|// cached values MUST be cloned, because they are modified by the caller.
comment|// this can be observed in rendering of PDFBOX-1724
specifier|private
specifier|final
name|Map
argument_list|<
name|Float
argument_list|,
name|float
index|[]
argument_list|>
name|map1
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * Create a new CalGray color space.      */
specifier|public
name|PDCalGray
parameter_list|()
block|{
name|super
argument_list|(
name|COSName
operator|.
name|CALGRAY
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new CalGray color space using the given COS array.      *      * @param array the COS array which represents this color space      */
specifier|public
name|PDCalGray
parameter_list|(
name|COSArray
name|array
parameter_list|)
block|{
name|super
argument_list|(
name|array
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|COSName
operator|.
name|CALGRAY
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getNumberOfComponents
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
index|[]
name|getDefaultDecode
parameter_list|(
name|int
name|bitsPerComponent
parameter_list|)
block|{
return|return
operator|new
name|float
index|[]
block|{
literal|0
block|,
literal|1
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|PDColor
name|getInitialColor
parameter_list|()
block|{
return|return
name|initialColor
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
index|[]
name|toRGB
parameter_list|(
name|float
index|[]
name|value
parameter_list|)
block|{
comment|// see implementation of toRGB in PDCalRGB, and PDFBOX-2971
if|if
condition|(
name|isWhitePoint
argument_list|()
condition|)
block|{
name|float
name|a
init|=
name|value
index|[
literal|0
index|]
decl_stmt|;
name|float
index|[]
name|result
init|=
name|map1
operator|.
name|get
argument_list|(
name|a
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
return|return
name|result
operator|.
name|clone
argument_list|()
return|;
block|}
name|float
name|gamma
init|=
name|getGamma
argument_list|()
decl_stmt|;
name|float
name|powAG
init|=
operator|(
name|float
operator|)
name|Math
operator|.
name|pow
argument_list|(
name|a
argument_list|,
name|gamma
argument_list|)
decl_stmt|;
name|result
operator|=
name|convXYZtoRGB
argument_list|(
name|powAG
argument_list|,
name|powAG
argument_list|,
name|powAG
argument_list|)
expr_stmt|;
name|map1
operator|.
name|put
argument_list|(
name|a
argument_list|,
name|result
operator|.
name|clone
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
else|else
block|{
return|return
operator|new
name|float
index|[]
block|{
name|value
index|[
literal|0
index|]
block|,
name|value
index|[
literal|0
index|]
block|,
name|value
index|[
literal|0
index|]
block|}
return|;
block|}
block|}
comment|/**      * This will get the gamma value. If none is present then the default of 1      * will be returned.      *      * @return The gamma value.      */
specifier|public
name|float
name|getGamma
parameter_list|()
block|{
name|float
name|retval
init|=
literal|1.0f
decl_stmt|;
name|COSNumber
name|gamma
init|=
operator|(
name|COSNumber
operator|)
name|dictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|GAMMA
argument_list|)
decl_stmt|;
if|if
condition|(
name|gamma
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
name|gamma
operator|.
name|floatValue
argument_list|()
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * Set the gamma value.      *      * @param value The new gamma value.      */
specifier|public
name|void
name|setGamma
parameter_list|(
name|float
name|value
parameter_list|)
block|{
name|dictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|GAMMA
argument_list|,
operator|new
name|COSFloat
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

