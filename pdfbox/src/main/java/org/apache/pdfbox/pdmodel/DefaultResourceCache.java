begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|SoftReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|documentinterchange
operator|.
name|markedcontent
operator|.
name|PDPropertyList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|PDXObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDColorSpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|pattern
operator|.
name|PDAbstractPattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|shading
operator|.
name|PDShading
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|state
operator|.
name|PDExtendedGraphicsState
import|;
end_import

begin_comment
comment|/**  * A resource cached based on SoftReference, retains resources until memory pressure causes them  * to be garbage collected.  *  * @author John Hewson  */
end_comment

begin_class
specifier|public
class|class
name|DefaultResourceCache
implements|implements
name|ResourceCache
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|COSObject
argument_list|,
name|SoftReference
argument_list|<
name|PDFont
argument_list|>
argument_list|>
name|fonts
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|COSObject
argument_list|,
name|SoftReference
argument_list|<
name|PDColorSpace
argument_list|>
argument_list|>
name|colorSpaces
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|COSObject
argument_list|,
name|SoftReference
argument_list|<
name|PDXObject
argument_list|>
argument_list|>
name|xobjects
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|COSObject
argument_list|,
name|SoftReference
argument_list|<
name|PDExtendedGraphicsState
argument_list|>
argument_list|>
name|extGStates
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|COSObject
argument_list|,
name|SoftReference
argument_list|<
name|PDShading
argument_list|>
argument_list|>
name|shadings
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|COSObject
argument_list|,
name|SoftReference
argument_list|<
name|PDAbstractPattern
argument_list|>
argument_list|>
name|patterns
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|COSObject
argument_list|,
name|SoftReference
argument_list|<
name|PDPropertyList
argument_list|>
argument_list|>
name|properties
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|PDFont
name|getFont
parameter_list|(
name|COSObject
name|indirect
parameter_list|)
throws|throws
name|IOException
block|{
name|SoftReference
argument_list|<
name|PDFont
argument_list|>
name|font
init|=
name|fonts
operator|.
name|get
argument_list|(
name|indirect
argument_list|)
decl_stmt|;
if|if
condition|(
name|font
operator|!=
literal|null
condition|)
block|{
return|return
name|font
operator|.
name|get
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|put
parameter_list|(
name|COSObject
name|indirect
parameter_list|,
name|PDFont
name|font
parameter_list|)
throws|throws
name|IOException
block|{
name|fonts
operator|.
name|put
argument_list|(
name|indirect
argument_list|,
operator|new
name|SoftReference
argument_list|<>
argument_list|(
name|font
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|PDColorSpace
name|getColorSpace
parameter_list|(
name|COSObject
name|indirect
parameter_list|)
throws|throws
name|IOException
block|{
name|SoftReference
argument_list|<
name|PDColorSpace
argument_list|>
name|colorSpace
init|=
name|colorSpaces
operator|.
name|get
argument_list|(
name|indirect
argument_list|)
decl_stmt|;
if|if
condition|(
name|colorSpace
operator|!=
literal|null
condition|)
block|{
return|return
name|colorSpace
operator|.
name|get
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|put
parameter_list|(
name|COSObject
name|indirect
parameter_list|,
name|PDColorSpace
name|colorSpace
parameter_list|)
throws|throws
name|IOException
block|{
name|colorSpaces
operator|.
name|put
argument_list|(
name|indirect
argument_list|,
operator|new
name|SoftReference
argument_list|<>
argument_list|(
name|colorSpace
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|PDExtendedGraphicsState
name|getExtGState
parameter_list|(
name|COSObject
name|indirect
parameter_list|)
block|{
name|SoftReference
argument_list|<
name|PDExtendedGraphicsState
argument_list|>
name|extGState
init|=
name|extGStates
operator|.
name|get
argument_list|(
name|indirect
argument_list|)
decl_stmt|;
if|if
condition|(
name|extGState
operator|!=
literal|null
condition|)
block|{
return|return
name|extGState
operator|.
name|get
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|put
parameter_list|(
name|COSObject
name|indirect
parameter_list|,
name|PDExtendedGraphicsState
name|extGState
parameter_list|)
block|{
name|extGStates
operator|.
name|put
argument_list|(
name|indirect
argument_list|,
operator|new
name|SoftReference
argument_list|<>
argument_list|(
name|extGState
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|PDShading
name|getShading
parameter_list|(
name|COSObject
name|indirect
parameter_list|)
throws|throws
name|IOException
block|{
name|SoftReference
argument_list|<
name|PDShading
argument_list|>
name|shading
init|=
name|shadings
operator|.
name|get
argument_list|(
name|indirect
argument_list|)
decl_stmt|;
if|if
condition|(
name|shading
operator|!=
literal|null
condition|)
block|{
return|return
name|shading
operator|.
name|get
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|put
parameter_list|(
name|COSObject
name|indirect
parameter_list|,
name|PDShading
name|shading
parameter_list|)
throws|throws
name|IOException
block|{
name|shadings
operator|.
name|put
argument_list|(
name|indirect
argument_list|,
operator|new
name|SoftReference
argument_list|<>
argument_list|(
name|shading
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|PDAbstractPattern
name|getPattern
parameter_list|(
name|COSObject
name|indirect
parameter_list|)
throws|throws
name|IOException
block|{
name|SoftReference
argument_list|<
name|PDAbstractPattern
argument_list|>
name|pattern
init|=
name|patterns
operator|.
name|get
argument_list|(
name|indirect
argument_list|)
decl_stmt|;
if|if
condition|(
name|pattern
operator|!=
literal|null
condition|)
block|{
return|return
name|pattern
operator|.
name|get
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|put
parameter_list|(
name|COSObject
name|indirect
parameter_list|,
name|PDAbstractPattern
name|pattern
parameter_list|)
throws|throws
name|IOException
block|{
name|patterns
operator|.
name|put
argument_list|(
name|indirect
argument_list|,
operator|new
name|SoftReference
argument_list|<>
argument_list|(
name|pattern
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|PDPropertyList
name|getProperties
parameter_list|(
name|COSObject
name|indirect
parameter_list|)
block|{
name|SoftReference
argument_list|<
name|PDPropertyList
argument_list|>
name|propertyList
init|=
name|properties
operator|.
name|get
argument_list|(
name|indirect
argument_list|)
decl_stmt|;
if|if
condition|(
name|propertyList
operator|!=
literal|null
condition|)
block|{
return|return
name|propertyList
operator|.
name|get
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|put
parameter_list|(
name|COSObject
name|indirect
parameter_list|,
name|PDPropertyList
name|propertyList
parameter_list|)
block|{
name|properties
operator|.
name|put
argument_list|(
name|indirect
argument_list|,
operator|new
name|SoftReference
argument_list|<>
argument_list|(
name|propertyList
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|PDXObject
name|getXObject
parameter_list|(
name|COSObject
name|indirect
parameter_list|)
throws|throws
name|IOException
block|{
name|SoftReference
argument_list|<
name|PDXObject
argument_list|>
name|xobject
init|=
name|xobjects
operator|.
name|get
argument_list|(
name|indirect
argument_list|)
decl_stmt|;
if|if
condition|(
name|xobject
operator|!=
literal|null
condition|)
block|{
return|return
name|xobject
operator|.
name|get
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|put
parameter_list|(
name|COSObject
name|indirect
parameter_list|,
name|PDXObject
name|xobject
parameter_list|)
throws|throws
name|IOException
block|{
name|xobjects
operator|.
name|put
argument_list|(
name|indirect
argument_list|,
operator|new
name|SoftReference
argument_list|<>
argument_list|(
name|xobject
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

