begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|fdf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPath
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathExpressionException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSNumber
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|COSObjectable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDRectangle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDBorderEffectDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDBorderStyleDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|DateConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NamedNodeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_comment
comment|/**  * This represents an FDF annotation that is part of the FDF document.  *  * @author Ben Litchfield  * @author Johanneke Lamberink  *   * */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|FDFAnnotation
implements|implements
name|COSObjectable
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FDFAnnotation
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Annotation dictionary.      */
specifier|protected
name|COSDictionary
name|annot
decl_stmt|;
comment|/**      * Default constructor.      */
specifier|public
name|FDFAnnotation
parameter_list|()
block|{
name|annot
operator|=
operator|new
name|COSDictionary
argument_list|()
expr_stmt|;
name|annot
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|TYPE
argument_list|,
name|COSName
operator|.
name|ANNOT
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor.      *      * @param a The FDF annotation.      */
specifier|public
name|FDFAnnotation
parameter_list|(
name|COSDictionary
name|a
parameter_list|)
block|{
name|annot
operator|=
name|a
expr_stmt|;
block|}
comment|/**      * Constructor.      *      * @param element An XFDF element.      *      * @throws IOException If there is an error extracting data from the element.      */
specifier|public
name|FDFAnnotation
parameter_list|(
name|Element
name|element
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|()
expr_stmt|;
name|String
name|page
init|=
name|element
operator|.
name|getAttribute
argument_list|(
literal|"page"
argument_list|)
decl_stmt|;
if|if
condition|(
name|page
operator|==
literal|null
operator|||
name|page
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error: missing required attribute 'page'"
argument_list|)
throw|;
block|}
name|setPage
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|page
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|color
init|=
name|element
operator|.
name|getAttribute
argument_list|(
literal|"color"
argument_list|)
decl_stmt|;
if|if
condition|(
name|color
operator|!=
literal|null
operator|&&
name|color
operator|.
name|length
argument_list|()
operator|==
literal|7
operator|&&
name|color
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'#'
condition|)
block|{
name|int
name|colorValue
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|color
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
literal|7
argument_list|)
argument_list|,
literal|16
argument_list|)
decl_stmt|;
name|setColor
argument_list|(
operator|new
name|Color
argument_list|(
name|colorValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|setDate
argument_list|(
name|element
operator|.
name|getAttribute
argument_list|(
literal|"date"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|flags
init|=
name|element
operator|.
name|getAttribute
argument_list|(
literal|"flags"
argument_list|)
decl_stmt|;
if|if
condition|(
name|flags
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|flagTokens
init|=
name|flags
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|flagToken
range|:
name|flagTokens
control|)
block|{
if|if
condition|(
name|flagToken
operator|.
name|equals
argument_list|(
literal|"invisible"
argument_list|)
condition|)
block|{
name|setInvisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|flagToken
operator|.
name|equals
argument_list|(
literal|"hidden"
argument_list|)
condition|)
block|{
name|setHidden
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|flagToken
operator|.
name|equals
argument_list|(
literal|"print"
argument_list|)
condition|)
block|{
name|setPrinted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|flagToken
operator|.
name|equals
argument_list|(
literal|"nozoom"
argument_list|)
condition|)
block|{
name|setNoZoom
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|flagToken
operator|.
name|equals
argument_list|(
literal|"norotate"
argument_list|)
condition|)
block|{
name|setNoRotate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|flagToken
operator|.
name|equals
argument_list|(
literal|"noview"
argument_list|)
condition|)
block|{
name|setNoView
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|flagToken
operator|.
name|equals
argument_list|(
literal|"readonly"
argument_list|)
condition|)
block|{
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|flagToken
operator|.
name|equals
argument_list|(
literal|"locked"
argument_list|)
condition|)
block|{
name|setLocked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|flagToken
operator|.
name|equals
argument_list|(
literal|"togglenoview"
argument_list|)
condition|)
block|{
name|setToggleNoView
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|setName
argument_list|(
name|element
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|rect
init|=
name|element
operator|.
name|getAttribute
argument_list|(
literal|"rect"
argument_list|)
decl_stmt|;
if|if
condition|(
name|rect
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error: missing attribute 'rect'"
argument_list|)
throw|;
block|}
name|String
index|[]
name|rectValues
init|=
name|rect
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|rectValues
operator|.
name|length
operator|!=
literal|4
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error: wrong amount of numbers in attribute 'rect'"
argument_list|)
throw|;
block|}
name|float
index|[]
name|values
init|=
operator|new
name|float
index|[
literal|4
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|rectValues
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|COSArray
name|array
init|=
operator|new
name|COSArray
argument_list|()
decl_stmt|;
name|array
operator|.
name|setFloatArray
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|setRectangle
argument_list|(
operator|new
name|PDRectangle
argument_list|(
name|array
argument_list|)
argument_list|)
expr_stmt|;
name|setTitle
argument_list|(
name|element
operator|.
name|getAttribute
argument_list|(
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
comment|/*          * Set the markup annotation attributes          */
name|setCreationDate
argument_list|(
name|DateConverter
operator|.
name|toCalendar
argument_list|(
name|element
operator|.
name|getAttribute
argument_list|(
literal|"creationdate"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|opac
init|=
name|element
operator|.
name|getAttribute
argument_list|(
literal|"opacity"
argument_list|)
decl_stmt|;
if|if
condition|(
name|opac
operator|!=
literal|null
operator|&&
operator|!
name|opac
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|setOpacity
argument_list|(
name|Float
operator|.
name|parseFloat
argument_list|(
name|opac
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|setSubject
argument_list|(
name|element
operator|.
name|getAttribute
argument_list|(
literal|"subject"
argument_list|)
argument_list|)
expr_stmt|;
name|setIntent
argument_list|(
name|element
operator|.
name|getAttribute
argument_list|(
literal|"intent"
argument_list|)
argument_list|)
expr_stmt|;
name|XPath
name|xpath
init|=
name|XPathFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newXPath
argument_list|()
decl_stmt|;
try|try
block|{
name|setContents
argument_list|(
name|xpath
operator|.
name|evaluate
argument_list|(
literal|"contents[1]"
argument_list|,
name|element
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathExpressionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error while evaluating XPath expression for richtext contents"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Node
name|richContents
init|=
operator|(
name|Node
operator|)
name|xpath
operator|.
name|evaluate
argument_list|(
literal|"contents-richtext[1]"
argument_list|,
name|element
argument_list|,
name|XPathConstants
operator|.
name|NODE
argument_list|)
decl_stmt|;
if|if
condition|(
name|richContents
operator|!=
literal|null
condition|)
block|{
name|setRichContents
argument_list|(
name|richContentsToString
argument_list|(
name|richContents
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|setContents
argument_list|(
name|richContents
operator|.
name|getTextContent
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|XPathExpressionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error while evaluating XPath expression for richtext contents"
argument_list|)
expr_stmt|;
block|}
name|PDBorderStyleDictionary
name|borderStyle
init|=
operator|new
name|PDBorderStyleDictionary
argument_list|()
decl_stmt|;
name|String
name|width
init|=
name|element
operator|.
name|getAttribute
argument_list|(
literal|"width"
argument_list|)
decl_stmt|;
if|if
condition|(
name|width
operator|!=
literal|null
operator|&&
operator|!
name|width
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|borderStyle
operator|.
name|setWidth
argument_list|(
name|Float
operator|.
name|parseFloat
argument_list|(
name|width
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|borderStyle
operator|.
name|getWidth
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|style
init|=
name|element
operator|.
name|getAttribute
argument_list|(
literal|"style"
argument_list|)
decl_stmt|;
if|if
condition|(
name|style
operator|!=
literal|null
operator|&&
operator|!
name|style
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|style
operator|.
name|equals
argument_list|(
literal|"dash"
argument_list|)
condition|)
block|{
name|borderStyle
operator|.
name|setStyle
argument_list|(
literal|"D"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|style
operator|.
name|equals
argument_list|(
literal|"bevelled"
argument_list|)
condition|)
block|{
name|borderStyle
operator|.
name|setStyle
argument_list|(
literal|"B"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|style
operator|.
name|equals
argument_list|(
literal|"inset"
argument_list|)
condition|)
block|{
name|borderStyle
operator|.
name|setStyle
argument_list|(
literal|"I"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|style
operator|.
name|equals
argument_list|(
literal|"underline"
argument_list|)
condition|)
block|{
name|borderStyle
operator|.
name|setStyle
argument_list|(
literal|"U"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|style
operator|.
name|equals
argument_list|(
literal|"cloudy"
argument_list|)
condition|)
block|{
name|borderStyle
operator|.
name|setStyle
argument_list|(
literal|"S"
argument_list|)
expr_stmt|;
name|PDBorderEffectDictionary
name|borderEffect
init|=
operator|new
name|PDBorderEffectDictionary
argument_list|()
decl_stmt|;
name|borderEffect
operator|.
name|setStyle
argument_list|(
literal|"C"
argument_list|)
expr_stmt|;
name|String
name|intensity
init|=
name|element
operator|.
name|getAttribute
argument_list|(
literal|"intensity"
argument_list|)
decl_stmt|;
if|if
condition|(
name|intensity
operator|!=
literal|null
operator|&&
operator|!
name|intensity
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|borderEffect
operator|.
name|setIntensity
argument_list|(
name|Float
operator|.
name|parseFloat
argument_list|(
name|element
operator|.
name|getAttribute
argument_list|(
literal|"intensity"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|setBorderEffect
argument_list|(
name|borderEffect
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|borderStyle
operator|.
name|setStyle
argument_list|(
literal|"S"
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|dashes
init|=
name|element
operator|.
name|getAttribute
argument_list|(
literal|"dashes"
argument_list|)
decl_stmt|;
if|if
condition|(
name|dashes
operator|!=
literal|null
operator|&&
operator|!
name|dashes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
index|[]
name|dashesValues
init|=
name|dashes
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|COSArray
name|dashPattern
init|=
operator|new
name|COSArray
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dashesValues
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|dashPattern
operator|.
name|add
argument_list|(
name|COSNumber
operator|.
name|get
argument_list|(
name|dashesValues
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|borderStyle
operator|.
name|setDashStyle
argument_list|(
name|dashPattern
argument_list|)
expr_stmt|;
block|}
name|setBorderStyle
argument_list|(
name|borderStyle
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Create the correct FDFAnnotation.      *      * @param fdfDic The FDF dictionary.      *      * @return A newly created FDFAnnotation      *      * @throws IOException If there is an error accessing the FDF information.      */
specifier|public
specifier|static
name|FDFAnnotation
name|create
parameter_list|(
name|COSDictionary
name|fdfDic
parameter_list|)
throws|throws
name|IOException
block|{
name|FDFAnnotation
name|retval
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|fdfDic
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|FDFAnnotationText
operator|.
name|SUBTYPE
operator|.
name|equals
argument_list|(
name|fdfDic
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|)
argument_list|)
condition|)
block|{
name|retval
operator|=
operator|new
name|FDFAnnotationText
argument_list|(
name|fdfDic
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|FDFAnnotationCaret
operator|.
name|SUBTYPE
operator|.
name|equals
argument_list|(
name|fdfDic
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|)
argument_list|)
condition|)
block|{
name|retval
operator|=
operator|new
name|FDFAnnotationCaret
argument_list|(
name|fdfDic
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|FDFAnnotationFreeText
operator|.
name|SUBTYPE
operator|.
name|equals
argument_list|(
name|fdfDic
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|)
argument_list|)
condition|)
block|{
name|retval
operator|=
operator|new
name|FDFAnnotationFreeText
argument_list|(
name|fdfDic
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|FDFAnnotationFileAttachment
operator|.
name|SUBTYPE
operator|.
name|equals
argument_list|(
name|fdfDic
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|)
argument_list|)
condition|)
block|{
name|retval
operator|=
operator|new
name|FDFAnnotationFileAttachment
argument_list|(
name|fdfDic
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|FDFAnnotationHighlight
operator|.
name|SUBTYPE
operator|.
name|equals
argument_list|(
name|fdfDic
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|)
argument_list|)
condition|)
block|{
name|retval
operator|=
operator|new
name|FDFAnnotationHighlight
argument_list|(
name|fdfDic
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|FDFAnnotationInk
operator|.
name|SUBTYPE
operator|.
name|equals
argument_list|(
name|fdfDic
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|)
argument_list|)
condition|)
block|{
name|retval
operator|=
operator|new
name|FDFAnnotationInk
argument_list|(
name|fdfDic
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|FDFAnnotationLine
operator|.
name|SUBTYPE
operator|.
name|equals
argument_list|(
name|fdfDic
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|)
argument_list|)
condition|)
block|{
name|retval
operator|=
operator|new
name|FDFAnnotationLine
argument_list|(
name|fdfDic
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|FDFAnnotationLink
operator|.
name|SUBTYPE
operator|.
name|equals
argument_list|(
name|fdfDic
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|)
argument_list|)
condition|)
block|{
name|retval
operator|=
operator|new
name|FDFAnnotationLink
argument_list|(
name|fdfDic
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|FDFAnnotationCircle
operator|.
name|SUBTYPE
operator|.
name|equals
argument_list|(
name|fdfDic
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|)
argument_list|)
condition|)
block|{
name|retval
operator|=
operator|new
name|FDFAnnotationCircle
argument_list|(
name|fdfDic
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|FDFAnnotationSquare
operator|.
name|SUBTYPE
operator|.
name|equals
argument_list|(
name|fdfDic
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|)
argument_list|)
condition|)
block|{
name|retval
operator|=
operator|new
name|FDFAnnotationSquare
argument_list|(
name|fdfDic
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|FDFAnnotationPolygon
operator|.
name|SUBTYPE
operator|.
name|equals
argument_list|(
name|fdfDic
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|)
argument_list|)
condition|)
block|{
name|retval
operator|=
operator|new
name|FDFAnnotationPolygon
argument_list|(
name|fdfDic
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|FDFAnnotationPolyline
operator|.
name|SUBTYPE
operator|.
name|equals
argument_list|(
name|fdfDic
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|)
argument_list|)
condition|)
block|{
name|retval
operator|=
operator|new
name|FDFAnnotationPolyline
argument_list|(
name|fdfDic
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|FDFAnnotationSound
operator|.
name|SUBTYPE
operator|.
name|equals
argument_list|(
name|fdfDic
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|)
argument_list|)
condition|)
block|{
name|retval
operator|=
operator|new
name|FDFAnnotationSound
argument_list|(
name|fdfDic
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|FDFAnnotationSquiggly
operator|.
name|SUBTYPE
operator|.
name|equals
argument_list|(
name|fdfDic
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|)
argument_list|)
condition|)
block|{
name|retval
operator|=
operator|new
name|FDFAnnotationSquiggly
argument_list|(
name|fdfDic
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|FDFAnnotationStamp
operator|.
name|SUBTYPE
operator|.
name|equals
argument_list|(
name|fdfDic
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|)
argument_list|)
condition|)
block|{
name|retval
operator|=
operator|new
name|FDFAnnotationStamp
argument_list|(
name|fdfDic
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|FDFAnnotationStrikeOut
operator|.
name|SUBTYPE
operator|.
name|equals
argument_list|(
name|fdfDic
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|)
argument_list|)
condition|)
block|{
name|retval
operator|=
operator|new
name|FDFAnnotationStrikeOut
argument_list|(
name|fdfDic
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|FDFAnnotationUnderline
operator|.
name|SUBTYPE
operator|.
name|equals
argument_list|(
name|fdfDic
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|)
argument_list|)
condition|)
block|{
name|retval
operator|=
operator|new
name|FDFAnnotationUnderline
argument_list|(
name|fdfDic
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unknown or unsupported annotation type '"
operator|+
name|fdfDic
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|)
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|retval
return|;
block|}
comment|/**      * Convert this standard java object to a COS object.      *      * @return The cos object that matches this Java object.      */
annotation|@
name|Override
specifier|public
name|COSDictionary
name|getCOSObject
parameter_list|()
block|{
return|return
name|annot
return|;
block|}
comment|/**      * This will get the page number or null if it does not exist.      *      * @return The page number.      */
specifier|public
name|Integer
name|getPage
parameter_list|()
block|{
name|Integer
name|retval
init|=
literal|null
decl_stmt|;
name|COSNumber
name|page
init|=
operator|(
name|COSNumber
operator|)
name|annot
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|PAGE
argument_list|)
decl_stmt|;
if|if
condition|(
name|page
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
name|page
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * This will set the page.      *      * @param page The page number.      */
specifier|public
name|void
name|setPage
parameter_list|(
name|int
name|page
parameter_list|)
block|{
name|annot
operator|.
name|setInt
argument_list|(
literal|"Page"
argument_list|,
name|page
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the annotation color.      *      * @return The annotation color, or null if there is none.      */
specifier|public
name|Color
name|getColor
parameter_list|()
block|{
name|Color
name|retval
init|=
literal|null
decl_stmt|;
name|COSArray
name|array
init|=
operator|(
name|COSArray
operator|)
name|annot
operator|.
name|getDictionaryObject
argument_list|(
literal|"color"
argument_list|)
decl_stmt|;
if|if
condition|(
name|array
operator|!=
literal|null
condition|)
block|{
name|float
index|[]
name|rgb
init|=
name|array
operator|.
name|toFloatArray
argument_list|()
decl_stmt|;
if|if
condition|(
name|rgb
operator|.
name|length
operator|>=
literal|3
condition|)
block|{
name|retval
operator|=
operator|new
name|Color
argument_list|(
name|rgb
index|[
literal|0
index|]
argument_list|,
name|rgb
index|[
literal|1
index|]
argument_list|,
name|rgb
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|retval
return|;
block|}
comment|/**      * Set the annotation color.      *      * @param c The annotation color.      */
specifier|public
name|void
name|setColor
parameter_list|(
name|Color
name|c
parameter_list|)
block|{
name|COSArray
name|color
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|float
index|[]
name|colors
init|=
name|c
operator|.
name|getRGBColorComponents
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|color
operator|=
operator|new
name|COSArray
argument_list|()
expr_stmt|;
name|color
operator|.
name|setFloatArray
argument_list|(
name|colors
argument_list|)
expr_stmt|;
block|}
name|annot
operator|.
name|setItem
argument_list|(
literal|"color"
argument_list|,
name|color
argument_list|)
expr_stmt|;
block|}
comment|/**      * Modification date.      *      * @return The date as a string.      */
specifier|public
name|String
name|getDate
parameter_list|()
block|{
return|return
name|annot
operator|.
name|getString
argument_list|(
name|COSName
operator|.
name|DATE
argument_list|)
return|;
block|}
comment|/**      * The annotation modification date.      *      * @param date The date to store in the FDF annotation.      */
specifier|public
name|void
name|setDate
parameter_list|(
name|String
name|date
parameter_list|)
block|{
name|annot
operator|.
name|setString
argument_list|(
name|COSName
operator|.
name|DATE
argument_list|,
name|date
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the invisible flag.      *      * @return The invisible flag.      */
specifier|public
name|boolean
name|isInvisible
parameter_list|()
block|{
return|return
name|annot
operator|.
name|getFlag
argument_list|(
name|COSName
operator|.
name|F
argument_list|,
name|PDAnnotation
operator|.
name|FLAG_INVISIBLE
argument_list|)
return|;
block|}
comment|/**      * Set the invisible flag.      *      * @param invisible The new invisible flag.      */
specifier|public
name|void
name|setInvisible
parameter_list|(
name|boolean
name|invisible
parameter_list|)
block|{
name|annot
operator|.
name|setFlag
argument_list|(
name|COSName
operator|.
name|F
argument_list|,
name|PDAnnotation
operator|.
name|FLAG_INVISIBLE
argument_list|,
name|invisible
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the hidden flag.      *      * @return The hidden flag.      */
specifier|public
name|boolean
name|isHidden
parameter_list|()
block|{
return|return
name|annot
operator|.
name|getFlag
argument_list|(
name|COSName
operator|.
name|F
argument_list|,
name|PDAnnotation
operator|.
name|FLAG_HIDDEN
argument_list|)
return|;
block|}
comment|/**      * Set the hidden flag.      *      * @param hidden The new hidden flag.      */
specifier|public
name|void
name|setHidden
parameter_list|(
name|boolean
name|hidden
parameter_list|)
block|{
name|annot
operator|.
name|setFlag
argument_list|(
name|COSName
operator|.
name|F
argument_list|,
name|PDAnnotation
operator|.
name|FLAG_HIDDEN
argument_list|,
name|hidden
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the printed flag.      *      * @return The printed flag.      */
specifier|public
name|boolean
name|isPrinted
parameter_list|()
block|{
return|return
name|annot
operator|.
name|getFlag
argument_list|(
name|COSName
operator|.
name|F
argument_list|,
name|PDAnnotation
operator|.
name|FLAG_PRINTED
argument_list|)
return|;
block|}
comment|/**      * Set the printed flag.      *      * @param printed The new printed flag.      */
specifier|public
name|void
name|setPrinted
parameter_list|(
name|boolean
name|printed
parameter_list|)
block|{
name|annot
operator|.
name|setFlag
argument_list|(
name|COSName
operator|.
name|F
argument_list|,
name|PDAnnotation
operator|.
name|FLAG_PRINTED
argument_list|,
name|printed
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the noZoom flag.      *      * @return The noZoom flag.      */
specifier|public
name|boolean
name|isNoZoom
parameter_list|()
block|{
return|return
name|annot
operator|.
name|getFlag
argument_list|(
name|COSName
operator|.
name|F
argument_list|,
name|PDAnnotation
operator|.
name|FLAG_NO_ZOOM
argument_list|)
return|;
block|}
comment|/**      * Set the noZoom flag.      *      * @param noZoom The new noZoom flag.      */
specifier|public
name|void
name|setNoZoom
parameter_list|(
name|boolean
name|noZoom
parameter_list|)
block|{
name|annot
operator|.
name|setFlag
argument_list|(
name|COSName
operator|.
name|F
argument_list|,
name|PDAnnotation
operator|.
name|FLAG_NO_ZOOM
argument_list|,
name|noZoom
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the noRotate flag.      *      * @return The noRotate flag.      */
specifier|public
name|boolean
name|isNoRotate
parameter_list|()
block|{
return|return
name|annot
operator|.
name|getFlag
argument_list|(
name|COSName
operator|.
name|F
argument_list|,
name|PDAnnotation
operator|.
name|FLAG_NO_ROTATE
argument_list|)
return|;
block|}
comment|/**      * Set the noRotate flag.      *      * @param noRotate The new noRotate flag.      */
specifier|public
name|void
name|setNoRotate
parameter_list|(
name|boolean
name|noRotate
parameter_list|)
block|{
name|annot
operator|.
name|setFlag
argument_list|(
name|COSName
operator|.
name|F
argument_list|,
name|PDAnnotation
operator|.
name|FLAG_NO_ROTATE
argument_list|,
name|noRotate
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the noView flag.      *      * @return The noView flag.      */
specifier|public
name|boolean
name|isNoView
parameter_list|()
block|{
return|return
name|annot
operator|.
name|getFlag
argument_list|(
name|COSName
operator|.
name|F
argument_list|,
name|PDAnnotation
operator|.
name|FLAG_NO_VIEW
argument_list|)
return|;
block|}
comment|/**      * Set the noView flag.      *      * @param noView The new noView flag.      */
specifier|public
name|void
name|setNoView
parameter_list|(
name|boolean
name|noView
parameter_list|)
block|{
name|annot
operator|.
name|setFlag
argument_list|(
name|COSName
operator|.
name|F
argument_list|,
name|PDAnnotation
operator|.
name|FLAG_NO_VIEW
argument_list|,
name|noView
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the readOnly flag.      *      * @return The readOnly flag.      */
specifier|public
name|boolean
name|isReadOnly
parameter_list|()
block|{
return|return
name|annot
operator|.
name|getFlag
argument_list|(
name|COSName
operator|.
name|F
argument_list|,
name|PDAnnotation
operator|.
name|FLAG_READ_ONLY
argument_list|)
return|;
block|}
comment|/**      * Set the readOnly flag.      *      * @param readOnly The new readOnly flag.      */
specifier|public
name|void
name|setReadOnly
parameter_list|(
name|boolean
name|readOnly
parameter_list|)
block|{
name|annot
operator|.
name|setFlag
argument_list|(
name|COSName
operator|.
name|F
argument_list|,
name|PDAnnotation
operator|.
name|FLAG_READ_ONLY
argument_list|,
name|readOnly
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the locked flag.      *      * @return The locked flag.      */
specifier|public
name|boolean
name|isLocked
parameter_list|()
block|{
return|return
name|annot
operator|.
name|getFlag
argument_list|(
name|COSName
operator|.
name|F
argument_list|,
name|PDAnnotation
operator|.
name|FLAG_LOCKED
argument_list|)
return|;
block|}
comment|/**      * Set the locked flag.      *      * @param locked The new locked flag.      */
specifier|public
name|void
name|setLocked
parameter_list|(
name|boolean
name|locked
parameter_list|)
block|{
name|annot
operator|.
name|setFlag
argument_list|(
name|COSName
operator|.
name|F
argument_list|,
name|PDAnnotation
operator|.
name|FLAG_LOCKED
argument_list|,
name|locked
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the toggleNoView flag.      *      * @return The toggleNoView flag.      */
specifier|public
name|boolean
name|isToggleNoView
parameter_list|()
block|{
return|return
name|annot
operator|.
name|getFlag
argument_list|(
name|COSName
operator|.
name|F
argument_list|,
name|PDAnnotation
operator|.
name|FLAG_TOGGLE_NO_VIEW
argument_list|)
return|;
block|}
comment|/**      * Set the toggleNoView flag.      *      * @param toggleNoView The new toggleNoView flag.      */
specifier|public
name|void
name|setToggleNoView
parameter_list|(
name|boolean
name|toggleNoView
parameter_list|)
block|{
name|annot
operator|.
name|setFlag
argument_list|(
name|COSName
operator|.
name|F
argument_list|,
name|PDAnnotation
operator|.
name|FLAG_TOGGLE_NO_VIEW
argument_list|,
name|toggleNoView
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set a unique name for an annotation.      *      * @param name The unique annotation name.      */
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|annot
operator|.
name|setString
argument_list|(
name|COSName
operator|.
name|NM
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the annotation name.      *      * @return The unique name of the annotation.      */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|annot
operator|.
name|getString
argument_list|(
name|COSName
operator|.
name|NM
argument_list|)
return|;
block|}
comment|/**      * Set the rectangle associated with this annotation.      *      * @param rectangle The annotation rectangle.      */
specifier|public
name|void
name|setRectangle
parameter_list|(
name|PDRectangle
name|rectangle
parameter_list|)
block|{
name|annot
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|RECT
argument_list|,
name|rectangle
argument_list|)
expr_stmt|;
block|}
comment|/**      * The rectangle associated with this annotation.      *      * @return The annotation rectangle.      */
specifier|public
name|PDRectangle
name|getRectangle
parameter_list|()
block|{
name|PDRectangle
name|retval
init|=
literal|null
decl_stmt|;
name|COSArray
name|rectArray
init|=
operator|(
name|COSArray
operator|)
name|annot
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|RECT
argument_list|)
decl_stmt|;
if|if
condition|(
name|rectArray
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
operator|new
name|PDRectangle
argument_list|(
name|rectArray
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * Set the contents, or a description, for an annotation.      *      * @param contents The annotation contents, or a description.      */
specifier|public
name|void
name|setContents
parameter_list|(
name|String
name|contents
parameter_list|)
block|{
name|annot
operator|.
name|setString
argument_list|(
name|COSName
operator|.
name|CONTENTS
argument_list|,
name|contents
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the text, or a description, of the annotation.      *      * @return The text, or a description, of the annotation.      */
specifier|public
name|String
name|getContents
parameter_list|()
block|{
return|return
name|annot
operator|.
name|getString
argument_list|(
name|COSName
operator|.
name|CONTENTS
argument_list|)
return|;
block|}
comment|/**      * Set a unique title for an annotation.      *      * @param title The annotation title.      */
specifier|public
name|void
name|setTitle
parameter_list|(
name|String
name|title
parameter_list|)
block|{
name|annot
operator|.
name|setString
argument_list|(
name|COSName
operator|.
name|T
argument_list|,
name|title
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the annotation title.      *      * @return The title of the annotation.      */
specifier|public
name|String
name|getTitle
parameter_list|()
block|{
return|return
name|annot
operator|.
name|getString
argument_list|(
name|COSName
operator|.
name|T
argument_list|)
return|;
block|}
comment|/**      * The annotation create date.      *      * @return The date of the creation of the annotation date      *      * @throws IOException If there is an error converting the string to a Calendar object.      */
specifier|public
name|Calendar
name|getCreationDate
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|annot
operator|.
name|getDate
argument_list|(
name|COSName
operator|.
name|CREATION_DATE
argument_list|)
return|;
block|}
comment|/**      * Set the creation date.      *      * @param date The date the annotation was created.      */
specifier|public
name|void
name|setCreationDate
parameter_list|(
name|Calendar
name|date
parameter_list|)
block|{
name|annot
operator|.
name|setDate
argument_list|(
name|COSName
operator|.
name|CREATION_DATE
argument_list|,
name|date
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the annotation opacity.      *      * @param opacity The new opacity value.      */
specifier|public
name|void
name|setOpacity
parameter_list|(
name|float
name|opacity
parameter_list|)
block|{
name|annot
operator|.
name|setFloat
argument_list|(
name|COSName
operator|.
name|CA
argument_list|,
name|opacity
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the opacity value.      *      * @return The opacity of the annotation.      */
specifier|public
name|float
name|getOpacity
parameter_list|()
block|{
return|return
name|annot
operator|.
name|getFloat
argument_list|(
name|COSName
operator|.
name|CA
argument_list|,
literal|1f
argument_list|)
return|;
block|}
comment|/**      * A short description of the annotation.      *      * @param subject The annotation subject.      */
specifier|public
name|void
name|setSubject
parameter_list|(
name|String
name|subject
parameter_list|)
block|{
name|annot
operator|.
name|setString
argument_list|(
name|COSName
operator|.
name|SUBJ
argument_list|,
name|subject
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the description of the annotation.      *      * @return The subject of the annotation.      */
specifier|public
name|String
name|getSubject
parameter_list|()
block|{
return|return
name|annot
operator|.
name|getString
argument_list|(
name|COSName
operator|.
name|SUBJ
argument_list|)
return|;
block|}
comment|/**      * The intent of the annotation.      *       * @param intent The annotation's intent.      */
specifier|public
name|void
name|setIntent
parameter_list|(
name|String
name|intent
parameter_list|)
block|{
name|annot
operator|.
name|setString
argument_list|(
name|COSName
operator|.
name|IT
argument_list|,
name|intent
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the intent of the annotation.      *       * @return The intent of the annotation.      */
specifier|public
name|String
name|getIntent
parameter_list|()
block|{
return|return
name|annot
operator|.
name|getString
argument_list|(
name|COSName
operator|.
name|IT
argument_list|)
return|;
block|}
comment|/**      * This will retrieve the rich text stream which is displayed in the popup window.      *      * @return the rich text stream.      */
specifier|public
name|String
name|getRichContents
parameter_list|()
block|{
return|return
name|getStringOrStream
argument_list|(
name|annot
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|RC
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * This will set the rich text stream which is displayed in the popup window.      *      * @param rc the rich text stream.      */
specifier|public
name|void
name|setRichContents
parameter_list|(
name|String
name|rc
parameter_list|)
block|{
name|annot
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|RC
argument_list|,
operator|new
name|COSString
argument_list|(
name|rc
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will set the border style dictionary, specifying the width and dash pattern used in drawing the annotation.      *      * @param bs the border style dictionary to set.      *      */
specifier|public
name|void
name|setBorderStyle
parameter_list|(
name|PDBorderStyleDictionary
name|bs
parameter_list|)
block|{
name|annot
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|BS
argument_list|,
name|bs
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will retrieve the border style dictionary, specifying the width and dash pattern used in drawing the      * annotation.      *      * @return the border style dictionary.      */
specifier|public
name|PDBorderStyleDictionary
name|getBorderStyle
parameter_list|()
block|{
name|COSDictionary
name|bs
init|=
operator|(
name|COSDictionary
operator|)
name|annot
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|BS
argument_list|)
decl_stmt|;
if|if
condition|(
name|bs
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|PDBorderStyleDictionary
argument_list|(
name|bs
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * This will set the border effect dictionary, describing the effect applied to the border described by the BS      * entry.      *      * @param be the border effect dictionary to set.      *      */
specifier|public
name|void
name|setBorderEffect
parameter_list|(
name|PDBorderEffectDictionary
name|be
parameter_list|)
block|{
name|annot
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|BE
argument_list|,
name|be
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will retrieve the border style dictionary, describing the effect applied to the border described by the BS      * entry.      *      * @return the border effect dictionary.      */
specifier|public
name|PDBorderEffectDictionary
name|getBorderEffect
parameter_list|()
block|{
name|COSDictionary
name|be
init|=
operator|(
name|COSDictionary
operator|)
name|annot
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|BE
argument_list|)
decl_stmt|;
if|if
condition|(
name|be
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|PDBorderEffectDictionary
argument_list|(
name|be
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Get a text or text stream.      *      * Some dictionary entries allow either a text or a text stream.      *      * @param base the potential text or text stream      * @return the text stream      */
specifier|protected
specifier|final
name|String
name|getStringOrStream
parameter_list|(
name|COSBase
name|base
parameter_list|)
block|{
if|if
condition|(
name|base
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
elseif|else
if|if
condition|(
name|base
operator|instanceof
name|COSString
condition|)
block|{
return|return
operator|(
operator|(
name|COSString
operator|)
name|base
operator|)
operator|.
name|getString
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|base
operator|instanceof
name|COSStream
condition|)
block|{
return|return
operator|(
operator|(
name|COSStream
operator|)
name|base
operator|)
operator|.
name|getString
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|""
return|;
block|}
block|}
specifier|private
name|String
name|richContentsToString
parameter_list|(
name|Node
name|node
parameter_list|,
name|boolean
name|root
parameter_list|)
block|{
name|String
name|retval
init|=
literal|""
decl_stmt|;
name|XPath
name|xpath
init|=
name|XPathFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newXPath
argument_list|()
decl_stmt|;
try|try
block|{
name|NodeList
name|nodelist
init|=
operator|(
name|NodeList
operator|)
name|xpath
operator|.
name|evaluate
argument_list|(
literal|"*"
argument_list|,
name|node
argument_list|,
name|XPathConstants
operator|.
name|NODESET
argument_list|)
decl_stmt|;
name|String
name|subString
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|nodelist
operator|.
name|getLength
argument_list|()
operator|==
literal|0
condition|)
block|{
name|subString
operator|=
name|node
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodelist
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|child
init|=
name|nodelist
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|instanceof
name|Element
condition|)
block|{
name|subString
operator|+=
name|richContentsToString
argument_list|(
name|child
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
name|NamedNodeMap
name|attributes
init|=
name|node
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attributes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|attribute
init|=
name|attributes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|" %s=\"%s\""
argument_list|,
name|attribute
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|attribute
operator|.
name|getNodeValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|root
condition|)
block|{
return|return
name|subString
return|;
block|}
name|retval
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"<%s%s>%s</%s>"
argument_list|,
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|builder
operator|.
name|toString
argument_list|()
argument_list|,
name|subString
argument_list|,
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathExpressionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error while evaluating XPath expression for richtext contents"
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
block|}
end_class

end_unit

