begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|documentinterchange
operator|.
name|taggedpdf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|COSObjectable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDGamma
import|;
end_import

begin_comment
comment|/**  * An object for four colours.  *  * @author<a href="mailto:Johannes%20Koch%20%3Ckoch@apache.org%3E">Johannes Koch</a>  * @version $Revision: $  */
end_comment

begin_class
specifier|public
class|class
name|PDFourColours
implements|implements
name|COSObjectable
block|{
specifier|private
name|COSArray
name|array
decl_stmt|;
specifier|public
name|PDFourColours
parameter_list|()
block|{
name|this
operator|.
name|array
operator|=
operator|new
name|COSArray
argument_list|()
expr_stmt|;
name|this
operator|.
name|array
operator|.
name|add
argument_list|(
name|COSNull
operator|.
name|NULL
argument_list|)
expr_stmt|;
name|this
operator|.
name|array
operator|.
name|add
argument_list|(
name|COSNull
operator|.
name|NULL
argument_list|)
expr_stmt|;
name|this
operator|.
name|array
operator|.
name|add
argument_list|(
name|COSNull
operator|.
name|NULL
argument_list|)
expr_stmt|;
name|this
operator|.
name|array
operator|.
name|add
argument_list|(
name|COSNull
operator|.
name|NULL
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PDFourColours
parameter_list|(
name|COSArray
name|array
parameter_list|)
block|{
name|this
operator|.
name|array
operator|=
name|array
expr_stmt|;
comment|// ensure that array has 4 items
if|if
condition|(
name|this
operator|.
name|array
operator|.
name|size
argument_list|()
operator|<
literal|4
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
operator|(
name|this
operator|.
name|array
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|this
operator|.
name|array
operator|.
name|add
argument_list|(
name|COSNull
operator|.
name|NULL
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Gets the colour for the before edge.      *       * @return the colour for the before edge      */
specifier|public
name|PDGamma
name|getBeforeColour
parameter_list|()
block|{
return|return
name|this
operator|.
name|getColourByIndex
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|/**      * Sets the colour for the before edge.      *       * @param colour the colour for the before edge      */
specifier|public
name|void
name|setBeforeColour
parameter_list|(
name|PDGamma
name|colour
parameter_list|)
block|{
name|this
operator|.
name|setColourByIndex
argument_list|(
literal|0
argument_list|,
name|colour
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the colour for the after edge.      *       * @return the colour for the after edge      */
specifier|public
name|PDGamma
name|getAfterColour
parameter_list|()
block|{
return|return
name|this
operator|.
name|getColourByIndex
argument_list|(
literal|1
argument_list|)
return|;
block|}
comment|/**      * Sets the colour for the after edge.      *       * @param colour the colour for the after edge      */
specifier|public
name|void
name|setAfterColour
parameter_list|(
name|PDGamma
name|colour
parameter_list|)
block|{
name|this
operator|.
name|setColourByIndex
argument_list|(
literal|1
argument_list|,
name|colour
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the colour for the start edge.      *       * @return the colour for the start edge      */
specifier|public
name|PDGamma
name|getStartColour
parameter_list|()
block|{
return|return
name|this
operator|.
name|getColourByIndex
argument_list|(
literal|2
argument_list|)
return|;
block|}
comment|/**      * Sets the colour for the start edge.      *       * @param colour the colour for the start edge      */
specifier|public
name|void
name|setStartColour
parameter_list|(
name|PDGamma
name|colour
parameter_list|)
block|{
name|this
operator|.
name|setColourByIndex
argument_list|(
literal|2
argument_list|,
name|colour
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the colour for the end edge.      *       * @return the colour for the end edge      */
specifier|public
name|PDGamma
name|getEndColour
parameter_list|()
block|{
return|return
name|this
operator|.
name|getColourByIndex
argument_list|(
literal|3
argument_list|)
return|;
block|}
comment|/**      * Sets the colour for the end edge.      *       * @param colour the colour for the end edge      */
specifier|public
name|void
name|setEndColour
parameter_list|(
name|PDGamma
name|colour
parameter_list|)
block|{
name|this
operator|.
name|setColourByIndex
argument_list|(
literal|3
argument_list|,
name|colour
argument_list|)
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|COSBase
name|getCOSObject
parameter_list|()
block|{
return|return
name|this
operator|.
name|array
return|;
block|}
comment|/**      * Gets the colour by edge index.      *       * @param index edge index      * @return the colour      */
specifier|private
name|PDGamma
name|getColourByIndex
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|PDGamma
name|retval
init|=
literal|null
decl_stmt|;
name|COSBase
name|item
init|=
name|this
operator|.
name|array
operator|.
name|getObject
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|instanceof
name|COSArray
condition|)
block|{
name|retval
operator|=
operator|new
name|PDGamma
argument_list|(
operator|(
name|COSArray
operator|)
name|item
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * Sets the colour by edge index.      *       * @param index the edge index      * @param colour the colour      */
specifier|private
name|void
name|setColourByIndex
parameter_list|(
name|int
name|index
parameter_list|,
name|PDGamma
name|colour
parameter_list|)
block|{
name|COSBase
name|base
decl_stmt|;
if|if
condition|(
name|colour
operator|==
literal|null
condition|)
block|{
name|base
operator|=
name|COSNull
operator|.
name|NULL
expr_stmt|;
block|}
else|else
block|{
name|base
operator|=
name|colour
operator|.
name|getCOSArray
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|array
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|base
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

