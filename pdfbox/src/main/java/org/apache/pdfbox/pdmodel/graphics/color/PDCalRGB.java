begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSFloat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDMatrix
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|color
operator|.
name|ColorSpace
import|;
end_import

begin_comment
comment|/**  * A CalRGB colour space is a CIE-based colour space with one transformation stage instead of two.  * In this type of space, A, B, and C represent calibrated red, green, and blue colour values.  *  * @author Ben Litchfield  * @author John Hewson  */
end_comment

begin_class
specifier|public
class|class
name|PDCalRGB
extends|extends
name|PDCIEBasedColorSpace
block|{
specifier|private
specifier|static
specifier|final
name|ColorSpace
name|CIEXYZ
init|=
name|ColorSpace
operator|.
name|getInstance
argument_list|(
name|ColorSpace
operator|.
name|CS_CIEXYZ
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|PDColor
name|INITIAL_COLOR
init|=
operator|new
name|PDColor
argument_list|(
operator|new
name|float
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
argument_list|)
decl_stmt|;
specifier|protected
name|COSArray
name|array
decl_stmt|;
specifier|protected
name|COSDictionary
name|dictionary
decl_stmt|;
comment|/**      * Creates a new CalRGB color space.      */
specifier|public
name|PDCalRGB
parameter_list|()
block|{
name|array
operator|=
operator|new
name|COSArray
argument_list|()
expr_stmt|;
name|dictionary
operator|=
operator|new
name|COSDictionary
argument_list|()
expr_stmt|;
name|array
operator|.
name|add
argument_list|(
name|COSName
operator|.
name|CALRGB
argument_list|)
expr_stmt|;
name|array
operator|.
name|add
argument_list|(
name|dictionary
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new CalRGB color space using the given COS array.      * @param rgb the cos array which represents this color space      */
specifier|public
name|PDCalRGB
parameter_list|(
name|COSArray
name|rgb
parameter_list|)
block|{
name|array
operator|=
name|rgb
expr_stmt|;
name|dictionary
operator|=
operator|(
name|COSDictionary
operator|)
name|array
operator|.
name|getObject
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|COSName
operator|.
name|CALRGB
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getNumberOfComponents
parameter_list|()
block|{
return|return
literal|3
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
index|[]
name|getDefaultDecode
parameter_list|()
block|{
return|return
operator|new
name|float
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|PDColor
name|getInitialColor
parameter_list|()
block|{
return|return
name|INITIAL_COLOR
return|;
block|}
comment|//
comment|// WARNING: this method is performance sensitive, modify with care!
comment|//
annotation|@
name|Override
specifier|public
specifier|final
name|float
index|[]
name|toRGB
parameter_list|(
name|float
index|[]
name|value
parameter_list|)
block|{
name|float
name|a
init|=
name|value
index|[
literal|0
index|]
decl_stmt|;
name|float
name|b
init|=
name|value
index|[
literal|1
index|]
decl_stmt|;
name|float
name|c
init|=
name|value
index|[
literal|2
index|]
decl_stmt|;
name|PDGamma
name|g
init|=
name|getGamma
argument_list|()
decl_stmt|;
name|PDMatrix
name|m
init|=
name|getGammaMatrix
argument_list|()
decl_stmt|;
name|float
name|xA
init|=
name|m
operator|.
name|getValue
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|float
name|xB
init|=
name|m
operator|.
name|getValue
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|float
name|xC
init|=
name|m
operator|.
name|getValue
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|float
name|yA
init|=
name|m
operator|.
name|getValue
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|float
name|yB
init|=
name|m
operator|.
name|getValue
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|float
name|yC
init|=
name|m
operator|.
name|getValue
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|float
name|zA
init|=
name|m
operator|.
name|getValue
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|float
name|zB
init|=
name|m
operator|.
name|getValue
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|float
name|zC
init|=
name|m
operator|.
name|getValue
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|float
name|v1
init|=
operator|(
name|float
operator|)
name|Math
operator|.
name|pow
argument_list|(
name|a
argument_list|,
name|g
operator|.
name|getR
argument_list|()
argument_list|)
decl_stmt|;
comment|// A ^ G_R
name|float
name|v2
init|=
operator|(
name|float
operator|)
name|Math
operator|.
name|pow
argument_list|(
name|b
argument_list|,
name|g
operator|.
name|getG
argument_list|()
argument_list|)
decl_stmt|;
comment|// B ^ G_G
name|float
name|v3
init|=
operator|(
name|float
operator|)
name|Math
operator|.
name|pow
argument_list|(
name|c
argument_list|,
name|g
operator|.
name|getB
argument_list|()
argument_list|)
decl_stmt|;
comment|// C ^ G_B   NOTE: PDF32000 p147 is mistaken
name|float
name|x
init|=
name|xA
operator|*
name|v1
operator|+
name|xB
operator|*
name|v2
operator|+
name|xC
operator|*
name|v3
decl_stmt|;
name|float
name|y
init|=
name|yA
operator|*
name|v1
operator|+
name|yB
operator|*
name|v2
operator|+
name|yC
operator|*
name|v3
decl_stmt|;
name|float
name|z
init|=
name|zA
operator|*
name|v1
operator|+
name|zB
operator|*
name|v2
operator|+
name|zC
operator|*
name|v3
decl_stmt|;
comment|// TODO scale XYZ values using blackpoint
name|x
operator|/=
name|getWhitepoint
argument_list|()
operator|.
name|getX
argument_list|()
expr_stmt|;
name|y
operator|/=
name|getWhitepoint
argument_list|()
operator|.
name|getY
argument_list|()
expr_stmt|;
name|z
operator|/=
name|getWhitepoint
argument_list|()
operator|.
name|getZ
argument_list|()
expr_stmt|;
return|return
name|CIEXYZ
operator|.
name|toRGB
argument_list|(
operator|new
name|float
index|[]
block|{
name|x
block|,
name|y
block|,
name|z
block|}
argument_list|)
return|;
block|}
comment|/**      * Returns the whitepoint tristimulus.      * A default of 1,1,1 will be returned if the PDF does not have any values yet.      * @return the whitepoint tristimulus.      */
specifier|public
specifier|final
name|PDTristimulus
name|getWhitepoint
parameter_list|()
block|{
name|COSArray
name|wp
init|=
operator|(
name|COSArray
operator|)
name|dictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|WHITE_POINT
argument_list|)
decl_stmt|;
if|if
condition|(
name|wp
operator|==
literal|null
condition|)
block|{
name|wp
operator|=
operator|new
name|COSArray
argument_list|()
expr_stmt|;
name|wp
operator|.
name|add
argument_list|(
operator|new
name|COSFloat
argument_list|(
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|wp
operator|.
name|add
argument_list|(
operator|new
name|COSFloat
argument_list|(
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|wp
operator|.
name|add
argument_list|(
operator|new
name|COSFloat
argument_list|(
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|dictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|WHITE_POINT
argument_list|,
name|wp
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|PDTristimulus
argument_list|(
name|wp
argument_list|)
return|;
block|}
comment|/**      * Returns the blackpoint tristimulus.      * A default of 0,0,0 will be returned if the PDF does not have any values yet.      * @return the blackpoint tristimulus      */
specifier|public
specifier|final
name|PDTristimulus
name|getBlackPoint
parameter_list|()
block|{
name|COSArray
name|bp
init|=
operator|(
name|COSArray
operator|)
name|dictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|BLACK_POINT
argument_list|)
decl_stmt|;
if|if
condition|(
name|bp
operator|==
literal|null
condition|)
block|{
name|bp
operator|=
operator|new
name|COSArray
argument_list|()
expr_stmt|;
name|bp
operator|.
name|add
argument_list|(
operator|new
name|COSFloat
argument_list|(
literal|0.0f
argument_list|)
argument_list|)
expr_stmt|;
name|bp
operator|.
name|add
argument_list|(
operator|new
name|COSFloat
argument_list|(
literal|0.0f
argument_list|)
argument_list|)
expr_stmt|;
name|bp
operator|.
name|add
argument_list|(
operator|new
name|COSFloat
argument_list|(
literal|0.0f
argument_list|)
argument_list|)
expr_stmt|;
name|dictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|BLACK_POINT
argument_list|,
name|bp
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|PDTristimulus
argument_list|(
name|bp
argument_list|)
return|;
block|}
comment|/**      * Returns the the gamma value.      * If none is present then the default of 1,1,1 will be returned.      * @return the gamma value      */
specifier|public
specifier|final
name|PDGamma
name|getGamma
parameter_list|()
block|{
name|COSArray
name|gamma
init|=
operator|(
name|COSArray
operator|)
name|dictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|GAMMA
argument_list|)
decl_stmt|;
if|if
condition|(
name|gamma
operator|==
literal|null
condition|)
block|{
name|gamma
operator|=
operator|new
name|COSArray
argument_list|()
expr_stmt|;
name|gamma
operator|.
name|add
argument_list|(
operator|new
name|COSFloat
argument_list|(
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|gamma
operator|.
name|add
argument_list|(
operator|new
name|COSFloat
argument_list|(
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|gamma
operator|.
name|add
argument_list|(
operator|new
name|COSFloat
argument_list|(
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|dictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|GAMMA
argument_list|,
name|gamma
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|PDGamma
argument_list|(
name|gamma
argument_list|)
return|;
block|}
comment|/**      * Returns the linear interpretation matrix.      * If the underlying dictionary contains null then the identity matrix will be returned.      * @return the linear interpretation matrix      */
specifier|public
specifier|final
name|PDMatrix
name|getGammaMatrix
parameter_list|()
block|{
name|COSArray
name|matrix
init|=
operator|(
name|COSArray
operator|)
name|dictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|MATRIX
argument_list|)
decl_stmt|;
if|if
condition|(
name|matrix
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|PDMatrix
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|new
name|PDMatrix
argument_list|(
name|matrix
argument_list|)
return|;
block|}
block|}
comment|/**      * Sets the whitepoint tristimulus      * @param whitepoint the whitepoint tristimulus, which may not be null      */
specifier|public
specifier|final
name|void
name|setWhitepoint
parameter_list|(
name|PDTristimulus
name|whitepoint
parameter_list|)
block|{
name|COSBase
name|wpArray
init|=
name|whitepoint
operator|.
name|getCOSObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|wpArray
operator|!=
literal|null
condition|)
block|{
name|dictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|WHITE_POINT
argument_list|,
name|wpArray
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Sets the blackpoint tristimulus      * @param blackpoint the blackpoint tristimulus, which may not be null      */
specifier|public
specifier|final
name|void
name|setBlackPoint
parameter_list|(
name|PDTristimulus
name|blackpoint
parameter_list|)
block|{
name|COSBase
name|bpArray
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|blackpoint
operator|!=
literal|null
condition|)
block|{
name|bpArray
operator|=
name|blackpoint
operator|.
name|getCOSObject
argument_list|()
expr_stmt|;
block|}
name|dictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|BLACK_POINT
argument_list|,
name|bpArray
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the gamma value.      * @param gamma the new gamma value      */
specifier|public
specifier|final
name|void
name|setGamma
parameter_list|(
name|PDGamma
name|gamma
parameter_list|)
block|{
name|COSArray
name|array
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|gamma
operator|!=
literal|null
condition|)
block|{
name|array
operator|=
name|gamma
operator|.
name|getCOSArray
argument_list|()
expr_stmt|;
block|}
name|dictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|GAMMA
argument_list|,
name|array
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the linear interpretation matrix.      * Passing in null will clear the matrix.      * @param matrix the new linear interpretation matrix, or null      */
specifier|public
specifier|final
name|void
name|setGammaMatrix
parameter_list|(
name|PDMatrix
name|matrix
parameter_list|)
block|{
name|COSArray
name|matrixArray
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|matrix
operator|!=
literal|null
condition|)
block|{
name|matrixArray
operator|=
name|matrix
operator|.
name|getCOSArray
argument_list|()
expr_stmt|;
block|}
name|dictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|MATRIX
argument_list|,
name|matrixArray
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

