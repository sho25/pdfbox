begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSFloat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|Matrix
import|;
end_import

begin_comment
comment|/**  * A CalRGB colour space is a CIE-based colour space with one transformation stage instead of two.  * In this type of space, A, B, and C represent calibrated red, green, and blue colour values.  *  * @author Ben Litchfield  * @author John Hewson  */
end_comment

begin_class
specifier|public
class|class
name|PDCalRGB
extends|extends
name|PDCIEDictionaryBasedColorSpace
block|{
specifier|private
specifier|final
name|PDColor
name|initialColor
init|=
operator|new
name|PDColor
argument_list|(
operator|new
name|float
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
argument_list|,
name|this
argument_list|)
decl_stmt|;
comment|/**      * Creates a new CalRGB color space.      */
specifier|public
name|PDCalRGB
parameter_list|()
block|{
name|super
argument_list|(
name|COSName
operator|.
name|CALRGB
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new CalRGB color space using the given COS array.      * @param rgb the cos array which represents this color space      */
specifier|public
name|PDCalRGB
parameter_list|(
name|COSArray
name|rgb
parameter_list|)
block|{
name|super
argument_list|(
name|rgb
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|COSName
operator|.
name|CALRGB
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getNumberOfComponents
parameter_list|()
block|{
return|return
literal|3
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
index|[]
name|getDefaultDecode
parameter_list|(
name|int
name|bitsPerComponent
parameter_list|)
block|{
return|return
operator|new
name|float
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|PDColor
name|getInitialColor
parameter_list|()
block|{
return|return
name|initialColor
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
index|[]
name|toRGB
parameter_list|(
name|float
index|[]
name|value
parameter_list|)
block|{
if|if
condition|(
name|isWhitePoint
argument_list|()
condition|)
block|{
name|float
name|a
init|=
name|value
index|[
literal|0
index|]
decl_stmt|;
name|float
name|b
init|=
name|value
index|[
literal|1
index|]
decl_stmt|;
name|float
name|c
init|=
name|value
index|[
literal|2
index|]
decl_stmt|;
name|PDGamma
name|gamma
init|=
name|getGamma
argument_list|()
decl_stmt|;
name|float
name|powAR
init|=
operator|(
name|float
operator|)
name|Math
operator|.
name|pow
argument_list|(
name|a
argument_list|,
name|gamma
operator|.
name|getR
argument_list|()
argument_list|)
decl_stmt|;
name|float
name|powBG
init|=
operator|(
name|float
operator|)
name|Math
operator|.
name|pow
argument_list|(
name|b
argument_list|,
name|gamma
operator|.
name|getG
argument_list|()
argument_list|)
decl_stmt|;
name|float
name|powCB
init|=
operator|(
name|float
operator|)
name|Math
operator|.
name|pow
argument_list|(
name|c
argument_list|,
name|gamma
operator|.
name|getB
argument_list|()
argument_list|)
decl_stmt|;
name|float
index|[]
name|matrix
init|=
name|getMatrix
argument_list|()
decl_stmt|;
name|float
name|mXA
init|=
name|matrix
index|[
literal|0
index|]
decl_stmt|;
name|float
name|mYA
init|=
name|matrix
index|[
literal|1
index|]
decl_stmt|;
name|float
name|mZA
init|=
name|matrix
index|[
literal|2
index|]
decl_stmt|;
name|float
name|mXB
init|=
name|matrix
index|[
literal|3
index|]
decl_stmt|;
name|float
name|mYB
init|=
name|matrix
index|[
literal|4
index|]
decl_stmt|;
name|float
name|mZB
init|=
name|matrix
index|[
literal|5
index|]
decl_stmt|;
name|float
name|mXC
init|=
name|matrix
index|[
literal|6
index|]
decl_stmt|;
name|float
name|mYC
init|=
name|matrix
index|[
literal|7
index|]
decl_stmt|;
name|float
name|mZC
init|=
name|matrix
index|[
literal|8
index|]
decl_stmt|;
name|float
name|x
init|=
name|mXA
operator|*
name|powAR
operator|+
name|mXB
operator|*
name|powBG
operator|+
name|mXC
operator|*
name|powCB
decl_stmt|;
name|float
name|y
init|=
name|mYA
operator|*
name|powAR
operator|+
name|mYB
operator|*
name|powBG
operator|+
name|mYC
operator|*
name|powCB
decl_stmt|;
name|float
name|z
init|=
name|mZA
operator|*
name|powAR
operator|+
name|mZB
operator|*
name|powBG
operator|+
name|mZC
operator|*
name|powCB
decl_stmt|;
return|return
name|convXYZtoRGB
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
return|;
block|}
else|else
block|{
comment|// this is a hack, we simply skip CIE calibration of the RGB value
comment|// this works only with whitepoint D65 (0.9505 1.0 1.089)
comment|// see PDFBOX-2553
return|return
operator|new
name|float
index|[]
block|{
name|value
index|[
literal|0
index|]
block|,
name|value
index|[
literal|1
index|]
block|,
name|value
index|[
literal|2
index|]
block|}
return|;
block|}
block|}
comment|/**      * Returns the gamma value.      * If none is present then the default of 1,1,1 will be returned.      * @return the gamma value      */
specifier|public
specifier|final
name|PDGamma
name|getGamma
parameter_list|()
block|{
name|COSArray
name|gammaArray
init|=
operator|(
name|COSArray
operator|)
name|dictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|GAMMA
argument_list|)
decl_stmt|;
if|if
condition|(
name|gammaArray
operator|==
literal|null
condition|)
block|{
name|gammaArray
operator|=
operator|new
name|COSArray
argument_list|()
expr_stmt|;
name|gammaArray
operator|.
name|add
argument_list|(
operator|new
name|COSFloat
argument_list|(
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|gammaArray
operator|.
name|add
argument_list|(
operator|new
name|COSFloat
argument_list|(
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|gammaArray
operator|.
name|add
argument_list|(
operator|new
name|COSFloat
argument_list|(
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|dictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|GAMMA
argument_list|,
name|gammaArray
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|PDGamma
argument_list|(
name|gammaArray
argument_list|)
return|;
block|}
comment|/**      * Returns the linear interpretation matrix, which is an array of nine numbers.      * If the underlying dictionary contains null then the identity matrix will be returned.      * @return the linear interpretation matrix      */
specifier|public
specifier|final
name|float
index|[]
name|getMatrix
parameter_list|()
block|{
name|COSArray
name|matrix
init|=
operator|(
name|COSArray
operator|)
name|dictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|MATRIX
argument_list|)
decl_stmt|;
if|if
condition|(
name|matrix
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|float
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|}
return|;
block|}
else|else
block|{
return|return
name|matrix
operator|.
name|toFloatArray
argument_list|()
return|;
block|}
block|}
comment|/**      * Sets the gamma value.      * @param gamma the new gamma value      */
specifier|public
specifier|final
name|void
name|setGamma
parameter_list|(
name|PDGamma
name|gamma
parameter_list|)
block|{
name|COSArray
name|gammaArray
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|gamma
operator|!=
literal|null
condition|)
block|{
name|gammaArray
operator|=
name|gamma
operator|.
name|getCOSArray
argument_list|()
expr_stmt|;
block|}
name|dictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|GAMMA
argument_list|,
name|gammaArray
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the linear interpretation matrix.      * Passing in null will clear the matrix.      * @param matrix the new linear interpretation matrix, or null      */
specifier|public
specifier|final
name|void
name|setMatrix
parameter_list|(
name|Matrix
name|matrix
parameter_list|)
block|{
name|COSArray
name|matrixArray
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|matrix
operator|!=
literal|null
condition|)
block|{
name|matrixArray
operator|=
name|matrix
operator|.
name|toCOSArray
argument_list|()
expr_stmt|;
block|}
name|dictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|MATRIX
argument_list|,
name|matrixArray
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

