begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_comment
comment|/**  * This is the class that represents a popup annotation. Introduced in PDF 1.3 specification  *  * @author Paul King  */
end_comment

begin_class
specifier|public
class|class
name|PDAnnotationPopup
extends|extends
name|PDAnnotation
block|{
comment|/**      * The type of annotation.      */
specifier|public
specifier|static
specifier|final
name|String
name|SUB_TYPE
init|=
literal|"Popup"
decl_stmt|;
comment|/**      * Constructor.      */
specifier|public
name|PDAnnotationPopup
parameter_list|()
block|{
name|getCOSObject
argument_list|()
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|,
name|COSName
operator|.
name|getPDFName
argument_list|(
name|SUB_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a popup annotation from a COSDictionary, expected to be a correct object definition.      *      * @param field the PDF object to represent as a field.      */
specifier|public
name|PDAnnotationPopup
parameter_list|(
name|COSDictionary
name|field
parameter_list|)
block|{
name|super
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will set inital state of the annotation, open or closed.      *      * @param open Boolean value, true = open false = closed.      */
specifier|public
name|void
name|setOpen
parameter_list|(
name|boolean
name|open
parameter_list|)
block|{
name|getCOSObject
argument_list|()
operator|.
name|setBoolean
argument_list|(
literal|"Open"
argument_list|,
name|open
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will retrieve the initial state of the annotation, open Or closed (default closed).      *      * @return The initial state, true = open false = closed.      */
specifier|public
name|boolean
name|getOpen
parameter_list|()
block|{
return|return
name|getCOSObject
argument_list|()
operator|.
name|getBoolean
argument_list|(
literal|"Open"
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * This will set the markup annotation which this popup relates to.      *      * @param annot the markup annotation.      */
specifier|public
name|void
name|setParent
parameter_list|(
name|PDAnnotationMarkup
name|annot
parameter_list|)
block|{
name|getCOSObject
argument_list|()
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|PARENT
argument_list|,
name|annot
operator|.
name|getCOSObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will retrieve the markup annotation which this popup relates to.      *      * @return The parent markup annotation.      */
specifier|public
name|PDAnnotationMarkup
name|getParent
parameter_list|()
block|{
name|PDAnnotationMarkup
name|am
init|=
literal|null
decl_stmt|;
try|try
block|{
name|am
operator|=
operator|(
name|PDAnnotationMarkup
operator|)
name|PDAnnotation
operator|.
name|createAnnotation
argument_list|(
name|getCOSObject
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|PARENT
argument_list|,
name|COSName
operator|.
name|P
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// Couldn't construct the annotation, so return null i.e. do nothing
block|}
return|return
name|am
return|;
block|}
block|}
end_class

end_unit

