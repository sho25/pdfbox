begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2014 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|color
operator|.
name|ColorSpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSFloat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_comment
comment|/**  * CIE-based colour spaces that use a dictionary.  *  * @author Ben Litchfield  * @author John Hewson  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|PDCIEDictionaryBasedColorSpace
extends|extends
name|PDCIEBasedColorSpace
block|{
specifier|protected
name|COSDictionary
name|dictionary
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ColorSpace
name|CIEXYZ
init|=
name|ColorSpace
operator|.
name|getInstance
argument_list|(
name|ColorSpace
operator|.
name|CS_CIEXYZ
argument_list|)
decl_stmt|;
comment|// we need to cache whitepoint values, because using getWhitePoint()
comment|// would create a new default object for each pixel conversion if the original
comment|// PDF didn't have a whitepoint array
specifier|protected
name|float
name|wpX
init|=
literal|1
decl_stmt|;
specifier|protected
name|float
name|wpY
init|=
literal|1
decl_stmt|;
specifier|protected
name|float
name|wpZ
init|=
literal|1
decl_stmt|;
specifier|protected
name|PDCIEDictionaryBasedColorSpace
parameter_list|(
name|COSName
name|cosName
parameter_list|)
block|{
name|array
operator|=
operator|new
name|COSArray
argument_list|()
expr_stmt|;
name|dictionary
operator|=
operator|new
name|COSDictionary
argument_list|()
expr_stmt|;
name|array
operator|.
name|add
argument_list|(
name|cosName
argument_list|)
expr_stmt|;
name|array
operator|.
name|add
argument_list|(
name|dictionary
argument_list|)
expr_stmt|;
name|fillWhitepointCache
argument_list|(
name|getWhitepoint
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new CalRGB color space using the given COS array.      *      * @param rgb the cos array which represents this color space      */
specifier|protected
name|PDCIEDictionaryBasedColorSpace
parameter_list|(
name|COSArray
name|rgb
parameter_list|)
block|{
name|array
operator|=
name|rgb
expr_stmt|;
name|dictionary
operator|=
operator|(
name|COSDictionary
operator|)
name|array
operator|.
name|getObject
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|fillWhitepointCache
argument_list|(
name|getWhitepoint
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests if the current point is the white point.      *      * @return true if the current point is the white point.      */
specifier|protected
name|boolean
name|isWhitePoint
parameter_list|()
block|{
return|return
name|Float
operator|.
name|compare
argument_list|(
name|wpX
argument_list|,
literal|1
argument_list|)
operator|==
literal|0
operator|&&
name|Float
operator|.
name|compare
argument_list|(
name|wpY
argument_list|,
literal|1
argument_list|)
operator|==
literal|0
operator|&&
name|Float
operator|.
name|compare
argument_list|(
name|wpZ
argument_list|,
literal|1
argument_list|)
operator|==
literal|0
return|;
block|}
specifier|private
name|void
name|fillWhitepointCache
parameter_list|(
name|PDTristimulus
name|whitepoint
parameter_list|)
block|{
name|wpX
operator|=
name|whitepoint
operator|.
name|getX
argument_list|()
expr_stmt|;
name|wpY
operator|=
name|whitepoint
operator|.
name|getY
argument_list|()
expr_stmt|;
name|wpZ
operator|=
name|whitepoint
operator|.
name|getZ
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|float
index|[]
name|convXYZtoRGB
parameter_list|(
name|float
name|x
parameter_list|,
name|float
name|y
parameter_list|,
name|float
name|z
parameter_list|)
block|{
comment|// toRGB() malfunctions with negative values
comment|// XYZ must be non-negative anyway:
comment|// http://ninedegreesbelow.com/photography/icc-profile-negative-tristimulus.html
if|if
condition|(
name|x
operator|<
literal|0
condition|)
block|{
name|x
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|y
operator|<
literal|0
condition|)
block|{
name|y
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|z
operator|<
literal|0
condition|)
block|{
name|z
operator|=
literal|0
expr_stmt|;
block|}
return|return
name|CIEXYZ
operator|.
name|toRGB
argument_list|(
operator|new
name|float
index|[]
block|{
name|x
block|,
name|y
block|,
name|z
block|}
argument_list|)
return|;
block|}
comment|/**      * This will return the whitepoint tristimulus. As this is a required field      * this will never return null. A default of 1,1,1 will be returned if the      * pdf does not have any values yet.      *      * @return the whitepoint tristimulus      */
specifier|public
specifier|final
name|PDTristimulus
name|getWhitepoint
parameter_list|()
block|{
name|COSArray
name|wp
init|=
operator|(
name|COSArray
operator|)
name|dictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|WHITE_POINT
argument_list|)
decl_stmt|;
if|if
condition|(
name|wp
operator|==
literal|null
condition|)
block|{
name|wp
operator|=
operator|new
name|COSArray
argument_list|()
expr_stmt|;
name|wp
operator|.
name|add
argument_list|(
operator|new
name|COSFloat
argument_list|(
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|wp
operator|.
name|add
argument_list|(
operator|new
name|COSFloat
argument_list|(
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|wp
operator|.
name|add
argument_list|(
operator|new
name|COSFloat
argument_list|(
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|PDTristimulus
argument_list|(
name|wp
argument_list|)
return|;
block|}
comment|/**      * This will return the BlackPoint tristimulus. This is an optional field      * but has defaults so this will never return null. A default of 0,0,0 will      * be returned if the pdf does not have any values yet.      *      * @return the blackpoint tristimulus      */
specifier|public
specifier|final
name|PDTristimulus
name|getBlackPoint
parameter_list|()
block|{
name|COSArray
name|bp
init|=
operator|(
name|COSArray
operator|)
name|dictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|BLACK_POINT
argument_list|)
decl_stmt|;
if|if
condition|(
name|bp
operator|==
literal|null
condition|)
block|{
name|bp
operator|=
operator|new
name|COSArray
argument_list|()
expr_stmt|;
name|bp
operator|.
name|add
argument_list|(
operator|new
name|COSFloat
argument_list|(
literal|0.0f
argument_list|)
argument_list|)
expr_stmt|;
name|bp
operator|.
name|add
argument_list|(
operator|new
name|COSFloat
argument_list|(
literal|0.0f
argument_list|)
argument_list|)
expr_stmt|;
name|bp
operator|.
name|add
argument_list|(
operator|new
name|COSFloat
argument_list|(
literal|0.0f
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|PDTristimulus
argument_list|(
name|bp
argument_list|)
return|;
block|}
comment|/**      * This will set the whitepoint tristimulus. As this is a required field      * this null should not be passed into this function.      *      * @param whitepoint the whitepoint tristimulus      */
specifier|public
name|void
name|setWhitePoint
parameter_list|(
name|PDTristimulus
name|whitepoint
parameter_list|)
block|{
name|COSBase
name|wpArray
init|=
name|whitepoint
operator|.
name|getCOSObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|wpArray
operator|!=
literal|null
condition|)
block|{
name|dictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|WHITE_POINT
argument_list|,
name|wpArray
argument_list|)
expr_stmt|;
block|}
name|fillWhitepointCache
argument_list|(
name|whitepoint
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will set the BlackPoint tristimulus. As this is a required field      * this null should not be passed into this function.      *      * @param blackpoint the BlackPoint tristimulus      */
specifier|public
name|void
name|setBlackPoint
parameter_list|(
name|PDTristimulus
name|blackpoint
parameter_list|)
block|{
name|COSBase
name|bpArray
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|blackpoint
operator|!=
literal|null
condition|)
block|{
name|bpArray
operator|=
name|blackpoint
operator|.
name|getCOSObject
argument_list|()
expr_stmt|;
block|}
name|dictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|BLACK_POINT
argument_list|,
name|bpArray
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

