begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|documentinterchange
operator|.
name|taggedpdf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_comment
comment|/**  * A PrintField attribute object.  *   * @author Johannes Koch  */
end_comment

begin_class
specifier|public
class|class
name|PDPrintFieldAttributeObject
extends|extends
name|PDStandardAttributeObject
block|{
comment|/**      * standard attribute owner: PrintField      */
specifier|public
specifier|static
specifier|final
name|String
name|OWNER_PRINT_FIELD
init|=
literal|"PrintField"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ROLE
init|=
literal|"Role"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CHECKED
init|=
literal|"checked"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DESC
init|=
literal|"Desc"
decl_stmt|;
comment|/**      * role: rb: Radio button      */
specifier|public
specifier|static
specifier|final
name|String
name|ROLE_RB
init|=
literal|"rb"
decl_stmt|;
comment|/**      * role: cb: Check box      */
specifier|public
specifier|static
specifier|final
name|String
name|ROLE_CB
init|=
literal|"cb"
decl_stmt|;
comment|/**      * role: pb: Push button      */
specifier|public
specifier|static
specifier|final
name|String
name|ROLE_PB
init|=
literal|"pb"
decl_stmt|;
comment|/**      * role: tv: Text-value field      */
specifier|public
specifier|static
specifier|final
name|String
name|ROLE_TV
init|=
literal|"tv"
decl_stmt|;
comment|/**      * checked state: on      */
specifier|public
specifier|static
specifier|final
name|String
name|CHECKED_STATE_ON
init|=
literal|"on"
decl_stmt|;
comment|/**      * checked state: off      */
specifier|public
specifier|static
specifier|final
name|String
name|CHECKED_STATE_OFF
init|=
literal|"off"
decl_stmt|;
comment|/**      * checked state: neutral      */
specifier|public
specifier|static
specifier|final
name|String
name|CHECKED_STATE_NEUTRAL
init|=
literal|"neutral"
decl_stmt|;
comment|/**      * Default constructor.      */
specifier|public
name|PDPrintFieldAttributeObject
parameter_list|()
block|{
name|this
operator|.
name|setOwner
argument_list|(
name|OWNER_PRINT_FIELD
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new PrintField attribute object with a given dictionary.      *       * @param dictionary the dictionary      */
specifier|public
name|PDPrintFieldAttributeObject
parameter_list|(
name|COSDictionary
name|dictionary
parameter_list|)
block|{
name|super
argument_list|(
name|dictionary
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the role.      *       * @return the role      */
specifier|public
name|String
name|getRole
parameter_list|()
block|{
return|return
name|this
operator|.
name|getName
argument_list|(
name|ROLE
argument_list|)
return|;
block|}
comment|/**      * Sets the role. The value of Role shall be one of the following:      *<ul>      *<li>{@link #ROLE_RB},</li>      *<li>{@link #ROLE_CB},</li>      *<li>{@link #ROLE_PB},</li>      *<li>{@link #ROLE_TV}.</li>      *</ul>      *       * @param role the role      */
specifier|public
name|void
name|setRole
parameter_list|(
name|String
name|role
parameter_list|)
block|{
name|this
operator|.
name|setName
argument_list|(
name|ROLE
argument_list|,
name|role
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the checked state. The default value is {@link #CHECKED_STATE_OFF}.      *       * @return the checked state      */
specifier|public
name|String
name|getCheckedState
parameter_list|()
block|{
return|return
name|this
operator|.
name|getName
argument_list|(
name|CHECKED
argument_list|,
name|CHECKED_STATE_OFF
argument_list|)
return|;
block|}
comment|/**      * Sets the checked state. The value shall be one of:      *<ul>      *<li>{@link #CHECKED_STATE_ON},</li>      *<li>{@link #CHECKED_STATE_OFF} (default), or</li>      *<li>{@link #CHECKED_STATE_NEUTRAL}.</li>      *</ul>      *       * @param checkedState the checked state      */
specifier|public
name|void
name|setCheckedState
parameter_list|(
name|String
name|checkedState
parameter_list|)
block|{
name|this
operator|.
name|setName
argument_list|(
name|CHECKED
argument_list|,
name|checkedState
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the alternate name of the field (Desc).      *       * @return the alternate name of the field      */
specifier|public
name|String
name|getAlternateName
parameter_list|()
block|{
return|return
name|this
operator|.
name|getString
argument_list|(
name|DESC
argument_list|)
return|;
block|}
comment|/**      * Sets the alternate name of the field (Desc).      *       * @param alternateName the alternate name of the field      */
specifier|public
name|void
name|setAlternateName
parameter_list|(
name|String
name|alternateName
parameter_list|)
block|{
name|this
operator|.
name|setString
argument_list|(
name|DESC
argument_list|,
name|alternateName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|super
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|isSpecified
argument_list|(
name|ROLE
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", Role="
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|getRole
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|isSpecified
argument_list|(
name|CHECKED
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", Checked="
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|getCheckedState
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|isSpecified
argument_list|(
name|DESC
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", Desc="
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|getAlternateName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

