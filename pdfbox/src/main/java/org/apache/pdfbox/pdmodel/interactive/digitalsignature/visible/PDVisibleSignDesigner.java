begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|digitalsignature
operator|.
name|visible
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|BufferedImage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|ImageIO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDRectangle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  *   * That class is in order to build  your   * visible signature design. Because of   * this is builder, instead of setParam()  * we use param() methods.  * @author<a href="mailto:vakhtang.koroghlishvili@gmail.com"> vakhtang koroghlishvili (gogebashvili)</a>  */
end_comment

begin_class
specifier|public
class|class
name|PDVisibleSignDesigner
block|{
specifier|private
name|Float
name|sigImgWidth
decl_stmt|;
specifier|private
name|Float
name|sigImgHeight
decl_stmt|;
specifier|private
name|float
name|xAxis
decl_stmt|;
specifier|private
name|float
name|yAxis
decl_stmt|;
specifier|private
name|float
name|pageHeight
decl_stmt|;
specifier|private
name|float
name|pageWidth
decl_stmt|;
specifier|private
name|InputStream
name|imgageStream
decl_stmt|;
specifier|private
name|String
name|signatureFieldName
init|=
literal|"sig"
decl_stmt|;
comment|// default
specifier|private
name|byte
index|[]
name|formaterRectangleParams
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|100
block|,
literal|50
block|}
decl_stmt|;
comment|// default
specifier|private
name|byte
index|[]
name|AffineTransformParams
init|=
block|{
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
comment|// default
specifier|private
name|float
name|imageSizeInPercents
decl_stmt|;
specifier|private
name|PDDocument
name|document
init|=
literal|null
decl_stmt|;
comment|/**      *       * @param originalDocumenStream      * @param imageStream      * @param page the page the visible signature is added to.      * @throws IOException      */
specifier|public
name|PDVisibleSignDesigner
parameter_list|(
name|InputStream
name|originalDocumenStream
parameter_list|,
name|InputStream
name|imageStream
parameter_list|,
name|int
name|page
parameter_list|)
throws|throws
name|IOException
block|{
name|signatureImageStream
argument_list|(
name|imageStream
argument_list|)
expr_stmt|;
name|document
operator|=
name|PDDocument
operator|.
name|load
argument_list|(
name|originalDocumenStream
argument_list|)
expr_stmt|;
name|calculatePageSize
argument_list|(
name|document
argument_list|,
name|page
argument_list|)
expr_stmt|;
block|}
comment|/**      *       * @param documentPath - path of your pdf document      * @param imageStream - stream of image      * @param page the page the visible signature is added to.      * @throws IOException      */
specifier|public
name|PDVisibleSignDesigner
parameter_list|(
name|String
name|documentPath
parameter_list|,
name|InputStream
name|imageStream
parameter_list|,
name|int
name|page
parameter_list|)
throws|throws
name|IOException
block|{
comment|// set visible singature image Input stream
name|signatureImageStream
argument_list|(
name|imageStream
argument_list|)
expr_stmt|;
comment|// create PD document
name|document
operator|=
name|PDDocument
operator|.
name|load
argument_list|(
name|documentPath
argument_list|)
expr_stmt|;
comment|// calculate height an width of document
name|calculatePageSize
argument_list|(
name|document
argument_list|,
name|page
argument_list|)
expr_stmt|;
name|document
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      *       * @param doc - Already created PDDocument of your PDF document      * @param imageStream      * @param page      * @throws IOException - If we can't read, flush, or can't close stream      */
specifier|public
name|PDVisibleSignDesigner
parameter_list|(
name|PDDocument
name|doc
parameter_list|,
name|InputStream
name|imageStream
parameter_list|,
name|int
name|page
parameter_list|)
throws|throws
name|IOException
block|{
name|signatureImageStream
argument_list|(
name|imageStream
argument_list|)
expr_stmt|;
name|calculatePageSize
argument_list|(
name|doc
argument_list|,
name|page
argument_list|)
expr_stmt|;
block|}
comment|/**      * Each page of document can be different sizes.      *       * @param document      * @param page      */
specifier|private
name|void
name|calculatePageSize
parameter_list|(
name|PDDocument
name|document
parameter_list|,
name|int
name|page
parameter_list|)
block|{
if|if
condition|(
name|page
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"First page of pdf is 1, not "
operator|+
name|page
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|?
argument_list|>
name|pages
init|=
name|document
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|getAllPages
argument_list|()
decl_stmt|;
name|PDPage
name|firstPage
init|=
operator|(
name|PDPage
operator|)
name|pages
operator|.
name|get
argument_list|(
name|page
operator|-
literal|1
argument_list|)
decl_stmt|;
name|PDRectangle
name|mediaBox
init|=
name|firstPage
operator|.
name|findMediaBox
argument_list|()
decl_stmt|;
name|this
operator|.
name|pageHeight
argument_list|(
name|mediaBox
operator|.
name|getHeight
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|pageWidth
operator|=
name|mediaBox
operator|.
name|getWidth
argument_list|()
expr_stmt|;
name|float
name|x
init|=
name|this
operator|.
name|pageWidth
decl_stmt|;
name|float
name|y
init|=
literal|0
decl_stmt|;
name|this
operator|.
name|pageWidth
operator|=
name|this
operator|.
name|pageWidth
operator|+
name|y
expr_stmt|;
name|float
name|tPercent
init|=
operator|(
literal|100
operator|*
name|y
operator|/
operator|(
name|x
operator|+
name|y
operator|)
operator|)
decl_stmt|;
name|this
operator|.
name|imageSizeInPercents
operator|=
literal|100
operator|-
name|tPercent
expr_stmt|;
block|}
comment|/**      *       * @param path  of image location      * @return image Stream      * @throws IOException      */
specifier|public
name|PDVisibleSignDesigner
name|signatureImage
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|fin
init|=
operator|new
name|FileInputStream
argument_list|(
name|path
argument_list|)
decl_stmt|;
return|return
name|signatureImageStream
argument_list|(
name|fin
argument_list|)
return|;
block|}
comment|/**      * zoom signature image with some percent.      *       * @param percent the percentage for zooming the image.      * @return Visible Signature Configuration Object      */
specifier|public
name|PDVisibleSignDesigner
name|zoom
parameter_list|(
name|float
name|percent
parameter_list|)
block|{
name|sigImgHeight
operator|=
name|sigImgHeight
operator|+
operator|(
name|sigImgHeight
operator|*
name|percent
operator|)
operator|/
literal|100
expr_stmt|;
name|sigImgWidth
operator|=
name|sigImgWidth
operator|+
operator|(
name|sigImgWidth
operator|*
name|percent
operator|)
operator|/
literal|100
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      *       * @param x the x coordinate.      * @param y the y coordinate.      * @return Visible Signature Configuration Object.      */
specifier|public
name|PDVisibleSignDesigner
name|coordinates
parameter_list|(
name|float
name|x
parameter_list|,
name|float
name|y
parameter_list|)
block|{
name|xAxis
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|yAxis
argument_list|(
name|y
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      *       * @return xAxis - gets x coordinates      */
specifier|public
name|float
name|getxAxis
parameter_list|()
block|{
return|return
name|xAxis
return|;
block|}
comment|/**      *       * @param xAxis  - x coordinate       * @return Visible Signature Configuration Object      */
specifier|public
name|PDVisibleSignDesigner
name|xAxis
parameter_list|(
name|float
name|xAxis
parameter_list|)
block|{
name|this
operator|.
name|xAxis
operator|=
name|xAxis
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      *       * @return yAxis      */
specifier|public
name|float
name|getyAxis
parameter_list|()
block|{
return|return
name|yAxis
return|;
block|}
comment|/**      *       * @param yAxis      * @return Visible Signature Configuration Object      */
specifier|public
name|PDVisibleSignDesigner
name|yAxis
parameter_list|(
name|float
name|yAxis
parameter_list|)
block|{
name|this
operator|.
name|yAxis
operator|=
name|yAxis
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      *       * @return signature image width      */
specifier|public
name|float
name|getWidth
parameter_list|()
block|{
return|return
name|sigImgWidth
return|;
block|}
comment|/**      *       * @param signatureImgWidth the signature image width.      * @return Visible Signature Configuration Object.      */
specifier|public
name|PDVisibleSignDesigner
name|width
parameter_list|(
name|float
name|signatureImgWidth
parameter_list|)
block|{
name|this
operator|.
name|sigImgWidth
operator|=
name|signatureImgWidth
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      *       * @return signature image height      */
specifier|public
name|float
name|getHeight
parameter_list|()
block|{
return|return
name|sigImgHeight
return|;
block|}
comment|/**      *       * @param signatureImgHeight the signature image height      * @return Visible Signature Configuration Object      */
specifier|public
name|PDVisibleSignDesigner
name|height
parameter_list|(
name|float
name|signatureImgHeight
parameter_list|)
block|{
name|this
operator|.
name|sigImgHeight
operator|=
name|signatureImgHeight
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      *       * @return template height      */
specifier|protected
name|float
name|getTemplateHeight
parameter_list|()
block|{
return|return
name|getPageHeight
argument_list|()
return|;
block|}
comment|/**      *       * @param templateHeight      * @return Visible Signature Configuration Object      */
specifier|private
name|PDVisibleSignDesigner
name|pageHeight
parameter_list|(
name|float
name|templateHeight
parameter_list|)
block|{
name|this
operator|.
name|pageHeight
operator|=
name|templateHeight
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      *       * @return signature field name      */
specifier|public
name|String
name|getSignatureFieldName
parameter_list|()
block|{
return|return
name|signatureFieldName
return|;
block|}
comment|/**      *       * @param signatureFieldName      * @return Visible Signature Configuration Object      */
specifier|public
name|PDVisibleSignDesigner
name|signatureFieldName
parameter_list|(
name|String
name|signatureFieldName
parameter_list|)
block|{
name|this
operator|.
name|signatureFieldName
operator|=
name|signatureFieldName
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      *       * @return image Stream      */
specifier|public
name|InputStream
name|getImageStream
parameter_list|()
block|{
return|return
name|imgageStream
return|;
block|}
comment|/**      *       * @param imgageStream- stream of your visible signature image      * @return Visible Signature Configuration Object      * @throws IOException - If we can't read, flush, or close stream of image      */
specifier|private
name|PDVisibleSignDesigner
name|signatureImageStream
parameter_list|(
name|InputStream
name|imageStream
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|int
name|len
decl_stmt|;
while|while
condition|(
operator|(
name|len
operator|=
name|imageStream
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|>
operator|-
literal|1
condition|)
block|{
name|baos
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
name|baos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|baos
operator|.
name|close
argument_list|()
expr_stmt|;
name|byte
index|[]
name|byteArray
init|=
name|baos
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|byte
index|[]
name|byteArraySecond
init|=
name|Arrays
operator|.
name|clone
argument_list|(
name|byteArray
argument_list|)
decl_stmt|;
name|InputStream
name|inputForBufferedImage
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|byteArray
argument_list|)
decl_stmt|;
name|InputStream
name|revertInputStream
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|byteArraySecond
argument_list|)
decl_stmt|;
if|if
condition|(
name|sigImgHeight
operator|==
literal|null
operator|||
name|sigImgWidth
operator|==
literal|null
condition|)
block|{
name|calcualteImageSize
argument_list|(
name|inputForBufferedImage
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|imgageStream
operator|=
name|revertInputStream
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * calculates image width and height. sported formats: all      *       * @param fis - input stream of image      * @throws IOException - if can't read input stream      */
specifier|private
name|void
name|calcualteImageSize
parameter_list|(
name|InputStream
name|fis
parameter_list|)
throws|throws
name|IOException
block|{
name|BufferedImage
name|bimg
init|=
name|ImageIO
operator|.
name|read
argument_list|(
name|fis
argument_list|)
decl_stmt|;
name|int
name|width
init|=
name|bimg
operator|.
name|getWidth
argument_list|()
decl_stmt|;
name|int
name|height
init|=
name|bimg
operator|.
name|getHeight
argument_list|()
decl_stmt|;
name|sigImgHeight
operator|=
operator|(
name|float
operator|)
name|height
expr_stmt|;
name|sigImgWidth
operator|=
operator|(
name|float
operator|)
name|width
expr_stmt|;
block|}
comment|/**      *       * @return Affine Transform parameters of for PDF Matrix      */
specifier|public
name|byte
index|[]
name|getAffineTransformParams
parameter_list|()
block|{
return|return
name|AffineTransformParams
return|;
block|}
comment|/**      *       * @param affineTransformParams      * @return Visible Signature Configuration Object      */
specifier|public
name|PDVisibleSignDesigner
name|affineTransformParams
parameter_list|(
name|byte
index|[]
name|affineTransformParams
parameter_list|)
block|{
name|AffineTransformParams
operator|=
name|affineTransformParams
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      *       * @return formatter PDRectanle parameters      */
specifier|public
name|byte
index|[]
name|getFormaterRectangleParams
parameter_list|()
block|{
return|return
name|formaterRectangleParams
return|;
block|}
comment|/**      * sets formatter PDRectangle;      *       * @param formaterRectangleParams      * @return Visible Signature Configuration Object      */
specifier|public
name|PDVisibleSignDesigner
name|formaterRectangleParams
parameter_list|(
name|byte
index|[]
name|formaterRectangleParams
parameter_list|)
block|{
name|this
operator|.
name|formaterRectangleParams
operator|=
name|formaterRectangleParams
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      *       * @return page width      */
specifier|public
name|float
name|getPageWidth
parameter_list|()
block|{
return|return
name|pageWidth
return|;
block|}
comment|/**      *       * @param pageWidth the pageWidth.      * @return Visible Signature Configuration Object.      */
specifier|public
name|PDVisibleSignDesigner
name|pageWidth
parameter_list|(
name|float
name|pageWidth
parameter_list|)
block|{
name|this
operator|.
name|pageWidth
operator|=
name|pageWidth
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      *       * @return page height      */
specifier|public
name|float
name|getPageHeight
parameter_list|()
block|{
return|return
name|pageHeight
return|;
block|}
comment|/**      * get image size in percents      * @return image size in percents.      */
specifier|public
name|float
name|getImageSizeInPercents
parameter_list|()
block|{
return|return
name|imageSizeInPercents
return|;
block|}
comment|/**     *      * @param imageSizeInPercents     */
specifier|public
name|void
name|imageSizeInPercents
parameter_list|(
name|float
name|imageSizeInPercents
parameter_list|)
block|{
name|this
operator|.
name|imageSizeInPercents
operator|=
name|imageSizeInPercents
expr_stmt|;
block|}
comment|/**      * returns visible signature text      * @return visible signature text.      */
specifier|public
name|String
name|getSignatureText
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"That method is not yet implemented"
argument_list|)
throw|;
block|}
comment|/**      *       * @param signatureText - adds the text on visible signature      * @return the signature design representing the text.      */
specifier|public
name|PDVisibleSignDesigner
name|signatureText
parameter_list|(
name|String
name|signatureText
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"That method is not yet implemented"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

