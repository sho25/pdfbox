begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|form
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdfwriter
operator|.
name|COSWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDRectangle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|Charsets
import|;
end_import

begin_comment
comment|/**  * Write the primitives making up a content stream.  *  *<strong>This class shall be treated internal use only!</strong>  */
end_comment

begin_class
class|class
name|AppearancePrimitivesComposer
block|{
comment|// the ouput stream to write to
specifier|private
specifier|final
name|OutputStream
name|outputstream
decl_stmt|;
comment|// number format for real number output
specifier|private
specifier|final
name|NumberFormat
name|formatDecimal
init|=
name|NumberFormat
operator|.
name|getNumberInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
comment|// will be set for operators doing text output
specifier|private
name|boolean
name|inTextMode
init|=
literal|false
decl_stmt|;
name|AppearancePrimitivesComposer
parameter_list|(
name|OutputStream
name|outputstream
parameter_list|)
block|{
name|this
operator|.
name|outputstream
operator|=
name|outputstream
expr_stmt|;
block|}
comment|/**      * Add a rectangle to the current path.      *      * @param rect the rectangle.      * @throws IOException If the content stream could not be written.      */
specifier|public
name|void
name|addRect
parameter_list|(
name|PDRectangle
name|rect
parameter_list|)
throws|throws
name|IOException
block|{
name|addRect
argument_list|(
name|rect
operator|.
name|getLowerLeftX
argument_list|()
argument_list|,
name|rect
operator|.
name|getLowerLeftY
argument_list|()
argument_list|,
name|rect
operator|.
name|getWidth
argument_list|()
argument_list|,
name|rect
operator|.
name|getHeight
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add a rectangle to the current path.      *      * @param x The lower left x coordinate.      * @param y The lower left y coordinate.      * @param width The width of the rectangle.      * @param height The height of the rectangle.      * @throws IOException If the content stream could not be written.      */
specifier|public
name|void
name|addRect
parameter_list|(
name|float
name|x
parameter_list|,
name|float
name|y
parameter_list|,
name|float
name|width
parameter_list|,
name|float
name|height
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|inTextMode
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error: addRect is not allowed within a text block."
argument_list|)
throw|;
block|}
name|writeOperand
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|writeOperand
argument_list|(
name|y
argument_list|)
expr_stmt|;
name|writeOperand
argument_list|(
name|width
argument_list|)
expr_stmt|;
name|writeOperand
argument_list|(
name|height
argument_list|)
expr_stmt|;
name|writeOperator
argument_list|(
literal|"re"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Begin some text operations.      *      * @throws IOException If there is an error writing to the stream or if you attempt to      *         nest beginText calls.      */
specifier|public
name|void
name|beginText
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|inTextMode
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error: Nested beginText() calls are not allowed."
argument_list|)
throw|;
block|}
name|writeOperator
argument_list|(
literal|"BT"
argument_list|)
expr_stmt|;
name|inTextMode
operator|=
literal|true
expr_stmt|;
block|}
comment|/**      * Intersects the current clipping path with the current path, using the nonzero rule.      *      * @throws IOException If the content stream could not be written      */
specifier|public
name|void
name|clip
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|inTextMode
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error: clip is not allowed within a text block."
argument_list|)
throw|;
block|}
name|writeOperator
argument_list|(
literal|"W"
argument_list|)
expr_stmt|;
name|writeOperator
argument_list|(
literal|"n"
argument_list|)
expr_stmt|;
comment|// end path without filling or stroking
block|}
comment|/**      * End some text operations.      *      * @throws IOException If there is an error writing to the stream or if you attempt to      *         nest endText calls.      */
specifier|public
name|void
name|endText
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|inTextMode
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error: You must call beginText() before calling endText."
argument_list|)
throw|;
block|}
name|writeOperator
argument_list|(
literal|"ET"
argument_list|)
expr_stmt|;
name|inTextMode
operator|=
literal|false
expr_stmt|;
block|}
comment|/**      * The Td operator.      * Move to the start of the next line, offset from the start of the current line by (tx, ty).      *      * @param tx The x translation.      * @param ty The y translation.      * @throws IOException if there is an error writing to the stream.      */
name|void
name|newLineAtOffset
parameter_list|(
name|float
name|tx
parameter_list|,
name|float
name|ty
parameter_list|)
throws|throws
name|IOException
block|{
name|writeOperand
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|writeOperand
argument_list|(
name|ty
argument_list|)
expr_stmt|;
name|writeOperator
argument_list|(
literal|"Td"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Shows the given text at the location specified by the current text matrix.      *      * @param text The Unicode text to show.      * @throws IOException if there is an error writing to the stream.      */
name|void
name|showText
parameter_list|(
name|String
name|text
parameter_list|,
name|PDFont
name|font
parameter_list|)
throws|throws
name|IOException
block|{
name|COSWriter
operator|.
name|writeString
argument_list|(
name|font
operator|.
name|encode
argument_list|(
name|text
argument_list|)
argument_list|,
name|outputstream
argument_list|)
expr_stmt|;
name|write
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|writeOperator
argument_list|(
literal|"Tj"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Writes a string to the content stream as ASCII.      */
specifier|private
name|void
name|write
parameter_list|(
name|String
name|text
parameter_list|)
throws|throws
name|IOException
block|{
name|outputstream
operator|.
name|write
argument_list|(
name|text
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|US_ASCII
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Writes a string to the content stream as ASCII.      */
specifier|private
name|void
name|writeOperator
parameter_list|(
name|String
name|text
parameter_list|)
throws|throws
name|IOException
block|{
name|outputstream
operator|.
name|write
argument_list|(
name|text
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|US_ASCII
argument_list|)
argument_list|)
expr_stmt|;
name|outputstream
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
comment|/**      * Writes a real real to the content stream.      */
specifier|private
name|void
name|writeOperand
parameter_list|(
name|float
name|real
parameter_list|)
throws|throws
name|IOException
block|{
name|write
argument_list|(
name|formatDecimal
operator|.
name|format
argument_list|(
name|real
argument_list|)
argument_list|)
expr_stmt|;
name|outputstream
operator|.
name|write
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

