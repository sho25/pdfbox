begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Point
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|BufferedImage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|DataBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|Raster
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|WritableRaster
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|function
operator|.
name|PDFunction
import|;
end_import

begin_comment
comment|/**  * A Separation color space used to specify either additional colorants or for isolating the  * control of individual colour components of a device colour space for a subtractive device.  * When such a space is the current colour space, the current colour shall be a single-component  * value, called a tint, that controls the given colorant or colour components only.  *  * @author Ben Litchfield  * @author John Hewson  */
end_comment

begin_class
specifier|public
class|class
name|PDSeparation
extends|extends
name|PDSpecialColorSpace
block|{
specifier|private
specifier|final
name|PDColor
name|initialColor
init|=
operator|new
name|PDColor
argument_list|(
operator|new
name|float
index|[]
block|{
literal|1
block|}
argument_list|,
name|this
argument_list|)
decl_stmt|;
comment|// array indexes
specifier|private
specifier|static
specifier|final
name|int
name|COLORANT_NAMES
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|ALTERNATE_CS
init|=
literal|2
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|TINT_TRANSFORM
init|=
literal|3
decl_stmt|;
comment|// fields
specifier|private
name|PDColorSpace
name|alternateColorSpace
init|=
literal|null
decl_stmt|;
specifier|private
name|PDFunction
name|tintTransform
init|=
literal|null
decl_stmt|;
comment|/**      * Creates a new Separation color space.      */
specifier|public
name|PDSeparation
parameter_list|()
block|{
name|array
operator|=
operator|new
name|COSArray
argument_list|()
expr_stmt|;
name|array
operator|.
name|add
argument_list|(
name|COSName
operator|.
name|SEPARATION
argument_list|)
expr_stmt|;
name|array
operator|.
name|add
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new Separation color space from a PDF color space array.      * @param separation an array containing all separation information      */
specifier|public
name|PDSeparation
parameter_list|(
name|COSArray
name|separation
parameter_list|)
throws|throws
name|IOException
block|{
name|array
operator|=
name|separation
expr_stmt|;
name|alternateColorSpace
operator|=
name|PDColorSpace
operator|.
name|create
argument_list|(
name|array
operator|.
name|getObject
argument_list|(
name|ALTERNATE_CS
argument_list|)
argument_list|)
expr_stmt|;
name|tintTransform
operator|=
name|PDFunction
operator|.
name|create
argument_list|(
name|array
operator|.
name|getObject
argument_list|(
name|TINT_TRANSFORM
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|COSName
operator|.
name|SEPARATION
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getNumberOfComponents
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
index|[]
name|getDefaultDecode
parameter_list|(
name|int
name|bitsPerComponent
parameter_list|)
block|{
return|return
operator|new
name|float
index|[]
block|{
literal|0
block|,
literal|1
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|PDColor
name|getInitialColor
parameter_list|()
block|{
return|return
name|initialColor
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
index|[]
name|toRGB
parameter_list|(
name|float
index|[]
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|float
index|[]
name|altColor
init|=
name|tintTransform
operator|.
name|eval
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
name|alternateColorSpace
operator|.
name|toRGB
argument_list|(
name|altColor
argument_list|)
return|;
block|}
comment|//
comment|// WARNING: this method is performance sensitive, modify with care!
comment|//
annotation|@
name|Override
specifier|public
name|BufferedImage
name|toRGBImage
parameter_list|(
name|WritableRaster
name|raster
parameter_list|)
throws|throws
name|IOException
block|{
comment|// use the tint transform to convert the sample into
comment|// the alternate color space (this is usually 1:many)
name|WritableRaster
name|altRaster
init|=
name|Raster
operator|.
name|createBandedRaster
argument_list|(
name|DataBuffer
operator|.
name|TYPE_BYTE
argument_list|,
name|raster
operator|.
name|getWidth
argument_list|()
argument_list|,
name|raster
operator|.
name|getHeight
argument_list|()
argument_list|,
name|alternateColorSpace
operator|.
name|getNumberOfComponents
argument_list|()
argument_list|,
operator|new
name|Point
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|numAltComponents
init|=
name|alternateColorSpace
operator|.
name|getNumberOfComponents
argument_list|()
decl_stmt|;
name|int
name|width
init|=
name|raster
operator|.
name|getWidth
argument_list|()
decl_stmt|;
name|int
name|height
init|=
name|raster
operator|.
name|getHeight
argument_list|()
decl_stmt|;
name|float
index|[]
name|samples
init|=
operator|new
name|float
index|[
literal|1
index|]
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|int
index|[]
argument_list|>
name|calculatedValues
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|int
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|Integer
name|hash
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|raster
operator|.
name|getPixel
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|samples
argument_list|)
expr_stmt|;
name|int
name|alt
index|[]
init|=
name|calculatedValues
operator|.
name|get
argument_list|(
name|hash
operator|=
name|Float
operator|.
name|floatToIntBits
argument_list|(
name|samples
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|alt
operator|==
literal|null
condition|)
block|{
name|alt
operator|=
operator|new
name|int
index|[
name|numAltComponents
index|]
expr_stmt|;
name|tintTransform
argument_list|(
name|samples
argument_list|,
name|alt
argument_list|)
expr_stmt|;
name|calculatedValues
operator|.
name|put
argument_list|(
name|hash
argument_list|,
name|alt
argument_list|)
expr_stmt|;
block|}
name|altRaster
operator|.
name|setPixel
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|alt
argument_list|)
expr_stmt|;
block|}
block|}
comment|// convert the alternate color space to RGB
return|return
name|alternateColorSpace
operator|.
name|toRGBImage
argument_list|(
name|altRaster
argument_list|)
return|;
block|}
specifier|protected
name|void
name|tintTransform
parameter_list|(
name|float
name|samples
index|[]
parameter_list|,
name|int
name|alt
index|[]
parameter_list|)
throws|throws
name|IOException
block|{
name|samples
index|[
literal|0
index|]
operator|/=
literal|255
expr_stmt|;
comment|// 0..1
name|float
name|result
index|[]
init|=
name|tintTransform
operator|.
name|eval
argument_list|(
name|samples
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|s
init|=
literal|0
init|;
name|s
operator|<
name|alt
operator|.
name|length
condition|;
name|s
operator|++
control|)
block|{
comment|// scale to 0..255
name|alt
index|[
name|s
index|]
operator|=
call|(
name|int
call|)
argument_list|(
name|result
index|[
name|s
index|]
operator|*
literal|255
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns the colorant name.      * @return the name of the colorant      */
specifier|public
name|String
name|getColorantName
parameter_list|()
block|{
name|COSName
name|name
init|=
operator|(
name|COSName
operator|)
name|array
operator|.
name|getObject
argument_list|(
name|COLORANT_NAMES
argument_list|)
decl_stmt|;
return|return
name|name
operator|.
name|getName
argument_list|()
return|;
block|}
comment|/**      * Sets the colorant name.      * @param name the name of the colorant      */
specifier|public
name|void
name|setColorantName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|array
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|COSName
operator|.
name|getPDFName
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the alternate color space.      * @param colorSpace The alternate color space.      */
specifier|public
name|void
name|setAlternateColorSpace
parameter_list|(
name|PDColorSpace
name|colorSpace
parameter_list|)
block|{
name|alternateColorSpace
operator|=
name|colorSpace
expr_stmt|;
name|COSBase
name|space
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|colorSpace
operator|!=
literal|null
condition|)
block|{
name|space
operator|=
name|colorSpace
operator|.
name|getCOSObject
argument_list|()
expr_stmt|;
block|}
name|array
operator|.
name|set
argument_list|(
name|ALTERNATE_CS
argument_list|,
name|space
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the tint transform function.      * @param tint the tint transform function      */
specifier|public
name|void
name|setTintTransform
parameter_list|(
name|PDFunction
name|tint
parameter_list|)
block|{
name|tintTransform
operator|=
name|tint
expr_stmt|;
name|array
operator|.
name|set
argument_list|(
name|TINT_TRANSFORM
argument_list|,
name|tint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getName
argument_list|()
operator|+
literal|"{"
operator|+
literal|"\""
operator|+
name|getColorantName
argument_list|()
operator|+
literal|"\""
operator|+
literal|" "
operator|+
name|alternateColorSpace
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|tintTransform
operator|+
literal|"}"
return|;
block|}
block|}
end_class

end_unit

