begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cff
operator|.
name|CFFFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cff
operator|.
name|CFFParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|ttf
operator|.
name|NamingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|ttf
operator|.
name|TTFParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|ttf
operator|.
name|TrueTypeFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|type1
operator|.
name|Type1Font
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|util
operator|.
name|autodetect
operator|.
name|FontFileFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * External font provider which searches for fonts on the local filesystem.  *  * @author John Hewson  */
end_comment

begin_class
specifier|final
class|class
name|FileSystemFontProvider
extends|extends
name|FontProvider
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FileSystemFontProvider
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// cache of font files on the system (populated in constructor)
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
name|ttfFontFiles
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
name|cffFontFiles
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
name|type1FontFiles
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
argument_list|()
decl_stmt|;
comment|// cache of loaded fonts which are in use (populated on-the-fly)
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|TrueTypeFont
argument_list|>
name|ttfFonts
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|TrueTypeFont
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|CFFFont
argument_list|>
name|cffFonts
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CFFFont
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Type1Font
argument_list|>
name|type1Fonts
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Type1Font
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Constructor.      */
name|FileSystemFontProvider
parameter_list|()
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Will search the local system for fonts"
argument_list|)
expr_stmt|;
block|}
name|int
name|count
init|=
literal|0
decl_stmt|;
name|FontFileFinder
name|fontFileFinder
init|=
operator|new
name|FontFileFinder
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|URI
argument_list|>
name|fonts
init|=
name|fontFileFinder
operator|.
name|find
argument_list|()
decl_stmt|;
for|for
control|(
name|URI
name|font
range|:
name|fonts
control|)
block|{
name|count
operator|++
expr_stmt|;
name|File
name|fontFile
init|=
operator|new
name|File
argument_list|(
name|font
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|fontFile
operator|.
name|getPath
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".ttf"
argument_list|)
operator|||
name|fontFile
operator|.
name|getPath
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".otf"
argument_list|)
condition|)
block|{
name|addOpenTypeFont
argument_list|(
name|fontFile
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fontFile
operator|.
name|getPath
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".pfb"
argument_list|)
condition|)
block|{
name|addType1Font
argument_list|(
name|fontFile
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error parsing font "
operator|+
name|fontFile
operator|.
name|getPath
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Found "
operator|+
name|count
operator|+
literal|" fonts on the local system"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Adds an OTF or TTF font to the file cache. To reduce memory, the parsed font is not cached.      */
specifier|private
name|void
name|addOpenTypeFont
parameter_list|(
name|File
name|otfFile
parameter_list|)
throws|throws
name|IOException
block|{
name|TTFParser
name|ttfParser
init|=
operator|new
name|TTFParser
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|TrueTypeFont
name|ttf
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ttf
operator|=
name|ttfParser
operator|.
name|parse
argument_list|(
name|otfFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
comment|// TTF parser is buggy
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not load font file: "
operator|+
name|otfFile
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not load font file: "
operator|+
name|otfFile
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
comment|// check for 'name' table
name|NamingTable
name|nameTable
init|=
name|ttf
operator|.
name|getNaming
argument_list|()
decl_stmt|;
if|if
condition|(
name|nameTable
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Missing 'name' table in font "
operator|+
name|otfFile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// read PostScript name, if any
if|if
condition|(
name|nameTable
operator|.
name|getPostScriptName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|psName
init|=
name|nameTable
operator|.
name|getPostScriptName
argument_list|()
decl_stmt|;
name|String
name|format
decl_stmt|;
if|if
condition|(
name|ttf
operator|.
name|getTableMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"CFF "
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|format
operator|=
literal|"OTF"
expr_stmt|;
name|cffFontFiles
operator|.
name|putAll
argument_list|(
name|toMap
argument_list|(
name|getNames
argument_list|(
name|ttf
argument_list|)
argument_list|,
name|otfFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|format
operator|=
literal|"TTF"
expr_stmt|;
name|ttfFontFiles
operator|.
name|putAll
argument_list|(
name|toMap
argument_list|(
name|getNames
argument_list|(
name|ttf
argument_list|)
argument_list|,
name|otfFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
name|format
operator|+
literal|": '"
operator|+
name|psName
operator|+
literal|"' / '"
operator|+
name|nameTable
operator|.
name|getFontFamily
argument_list|()
operator|+
literal|"' / '"
operator|+
name|nameTable
operator|.
name|getFontSubFamily
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Missing 'name' entry for PostScript name in font "
operator|+
name|otfFile
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|ttf
operator|!=
literal|null
condition|)
block|{
name|ttf
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Adds a Type 1 font to the file cache. To reduce memory, the parsed font is not cached.      */
specifier|private
name|void
name|addType1Font
parameter_list|(
name|File
name|pfbFile
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|input
init|=
operator|new
name|FileInputStream
argument_list|(
name|pfbFile
argument_list|)
decl_stmt|;
try|try
block|{
name|Type1Font
name|type1
init|=
name|Type1Font
operator|.
name|createWithPFB
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|String
name|psName
init|=
name|type1
operator|.
name|getFontName
argument_list|()
decl_stmt|;
name|type1FontFiles
operator|.
name|putAll
argument_list|(
name|toMap
argument_list|(
name|getNames
argument_list|(
name|type1
argument_list|)
argument_list|,
name|pfbFile
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"PFB: '"
operator|+
name|psName
operator|+
literal|"' / '"
operator|+
name|type1
operator|.
name|getFamilyName
argument_list|()
operator|+
literal|"' / '"
operator|+
name|type1
operator|.
name|getWeight
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|input
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|TrueTypeFont
name|getTrueTypeFont
parameter_list|(
name|String
name|postScriptName
parameter_list|)
block|{
name|TrueTypeFont
name|ttf
init|=
name|ttfFonts
operator|.
name|get
argument_list|(
name|postScriptName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ttf
operator|!=
literal|null
condition|)
block|{
return|return
name|ttf
return|;
block|}
name|File
name|file
init|=
name|ttfFontFiles
operator|.
name|get
argument_list|(
name|postScriptName
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
name|TTFParser
name|ttfParser
init|=
operator|new
name|TTFParser
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
name|ttf
operator|=
name|ttfParser
operator|.
name|parse
argument_list|(
name|file
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|getNames
argument_list|(
name|ttf
argument_list|)
control|)
block|{
name|ttfFonts
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|ttf
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Loaded "
operator|+
name|postScriptName
operator|+
literal|" from "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
return|return
name|ttf
return|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
comment|// TTF parser is buggy
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not load font file: "
operator|+
name|file
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not load font file: "
operator|+
name|file
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|CFFFont
name|getCFFFont
parameter_list|(
name|String
name|postScriptName
parameter_list|)
block|{
name|CFFFont
name|cff
init|=
name|cffFonts
operator|.
name|get
argument_list|(
name|postScriptName
argument_list|)
decl_stmt|;
if|if
condition|(
name|cff
operator|!=
literal|null
condition|)
block|{
return|return
name|cff
return|;
block|}
name|File
name|file
init|=
name|cffFontFiles
operator|.
name|get
argument_list|(
name|postScriptName
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
name|InputStream
name|input
init|=
literal|null
decl_stmt|;
try|try
block|{
name|input
operator|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|CFFParser
name|cffParser
init|=
operator|new
name|CFFParser
argument_list|()
decl_stmt|;
name|cff
operator|=
name|cffParser
operator|.
name|parse
argument_list|(
name|bytes
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|getNames
argument_list|(
name|cff
argument_list|)
control|)
block|{
name|cffFonts
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|cff
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Loaded "
operator|+
name|postScriptName
operator|+
literal|" from "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
return|return
name|cff
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not load font file: "
operator|+
name|file
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|Type1Font
name|getType1Font
parameter_list|(
name|String
name|postScriptName
parameter_list|)
block|{
name|Type1Font
name|type1
init|=
name|type1Fonts
operator|.
name|get
argument_list|(
name|postScriptName
argument_list|)
decl_stmt|;
if|if
condition|(
name|type1
operator|!=
literal|null
condition|)
block|{
return|return
name|type1
return|;
block|}
name|File
name|file
init|=
name|type1FontFiles
operator|.
name|get
argument_list|(
name|postScriptName
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
name|InputStream
name|input
init|=
literal|null
decl_stmt|;
try|try
block|{
name|input
operator|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|type1
operator|=
name|Type1Font
operator|.
name|createWithPFB
argument_list|(
name|input
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|getNames
argument_list|(
name|type1
argument_list|)
control|)
block|{
name|type1Fonts
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|type1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Loaded "
operator|+
name|postScriptName
operator|+
literal|" from "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
return|return
name|type1
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not load font file: "
operator|+
name|file
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Returns a map containing the given file for each string key.      */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
name|toMap
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|names
parameter_list|,
name|File
name|file
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toDebugString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
name|entry
range|:
name|ttfFontFiles
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"TTF: "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
name|entry
range|:
name|cffFontFiles
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"OTF: "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
name|entry
range|:
name|type1FontFiles
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"PFB: "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

