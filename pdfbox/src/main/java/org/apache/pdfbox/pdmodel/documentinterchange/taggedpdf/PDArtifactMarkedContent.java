begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|documentinterchange
operator|.
name|taggedpdf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDRectangle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|documentinterchange
operator|.
name|markedcontent
operator|.
name|PDMarkedContent
import|;
end_import

begin_comment
comment|/**  * An artifact marked content.  *  * @author Johannes Koch  *  */
end_comment

begin_class
specifier|public
class|class
name|PDArtifactMarkedContent
extends|extends
name|PDMarkedContent
block|{
specifier|public
name|PDArtifactMarkedContent
parameter_list|(
name|COSDictionary
name|properties
parameter_list|)
block|{
name|super
argument_list|(
name|COSName
operator|.
name|ARTIFACT
argument_list|,
name|properties
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the type (Type).      *       * @return the type      */
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|this
operator|.
name|getProperties
argument_list|()
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|TYPE
argument_list|)
return|;
block|}
comment|/**      * Gets the artifact's bounding box (BBox).      *       * @return the artifact's bounding box      */
specifier|public
name|PDRectangle
name|getBBox
parameter_list|()
block|{
name|PDRectangle
name|retval
init|=
literal|null
decl_stmt|;
name|COSArray
name|a
init|=
operator|(
name|COSArray
operator|)
name|this
operator|.
name|getProperties
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|BBOX
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
operator|new
name|PDRectangle
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * Is the artifact attached to the top edge?      *       * @return<code>true</code> if the artifact is attached to the top edge,      *<code>false</code> otherwise      */
specifier|public
name|boolean
name|isTopAttached
parameter_list|()
block|{
return|return
name|this
operator|.
name|isAttached
argument_list|(
literal|"Top"
argument_list|)
return|;
block|}
comment|/**      * Is the artifact attached to the bottom edge?      *       * @return<code>true</code> if the artifact is attached to the bottom edge,      *<code>false</code> otherwise      */
specifier|public
name|boolean
name|isBottomAttached
parameter_list|()
block|{
return|return
name|this
operator|.
name|isAttached
argument_list|(
literal|"Bottom"
argument_list|)
return|;
block|}
comment|/**      * Is the artifact attached to the left edge?      *       * @return<code>true</code> if the artifact is attached to the left edge,      *<code>false</code> otherwise      */
specifier|public
name|boolean
name|isLeftAttached
parameter_list|()
block|{
return|return
name|this
operator|.
name|isAttached
argument_list|(
literal|"Left"
argument_list|)
return|;
block|}
comment|/**      * Is the artifact attached to the right edge?      *       * @return<code>true</code> if the artifact is attached to the right edge,      *<code>false</code> otherwise      */
specifier|public
name|boolean
name|isRightAttached
parameter_list|()
block|{
return|return
name|this
operator|.
name|isAttached
argument_list|(
literal|"Right"
argument_list|)
return|;
block|}
comment|/**      * Gets the subtype (Subtype).      *       * @return the subtype      */
specifier|public
name|String
name|getSubtype
parameter_list|()
block|{
return|return
name|this
operator|.
name|getProperties
argument_list|()
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|)
return|;
block|}
comment|/**      * Is the artifact attached to the given edge?      *       * @param edge the edge      * @return<code>true</code> if the artifact is attached to the given edge,      *<code>false</code> otherwise      */
specifier|private
name|boolean
name|isAttached
parameter_list|(
name|String
name|edge
parameter_list|)
block|{
name|COSArray
name|a
init|=
operator|(
name|COSArray
operator|)
name|this
operator|.
name|getProperties
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|ATTACHED
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|a
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|edge
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getName
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

