begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|shading
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|COSObjectable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDMatrix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDRectangle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDColorSpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDColorSpaceFactory
import|;
end_import

begin_comment
comment|/**  * This represents resources for a shading.  *  * @version $Revision: 1.0 $  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|PDShadingResources
implements|implements
name|COSObjectable
block|{
specifier|private
name|COSDictionary
name|dictionary
decl_stmt|;
specifier|private
name|COSArray
name|background
init|=
literal|null
decl_stmt|;
specifier|private
name|PDRectangle
name|bBox
init|=
literal|null
decl_stmt|;
specifier|private
name|PDColorSpace
name|colorspace
init|=
literal|null
decl_stmt|;
comment|/**      * shading type 1 = function based shading.      */
specifier|public
specifier|static
specifier|final
name|int
name|SHADING_TYPE1
init|=
literal|1
decl_stmt|;
comment|/**      * shading type 2 = axial shading.      */
specifier|public
specifier|static
specifier|final
name|int
name|SHADING_TYPE2
init|=
literal|2
decl_stmt|;
comment|/**      * shading type 3 = radial shading.      */
specifier|public
specifier|static
specifier|final
name|int
name|SHADING_TYPE3
init|=
literal|3
decl_stmt|;
comment|/**      * shading type 4 = Free-Form Gouraud-Shaded Triangle Meshes.      */
specifier|public
specifier|static
specifier|final
name|int
name|SHADING_TYPE4
init|=
literal|4
decl_stmt|;
comment|/**      * shading type 5 = Lattice-Form Gouraud-Shaded Triangle Meshes.      */
specifier|public
specifier|static
specifier|final
name|int
name|SHADING_TYPE5
init|=
literal|5
decl_stmt|;
comment|/**      * shading type 6 = Coons Patch Meshes.      */
specifier|public
specifier|static
specifier|final
name|int
name|SHADING_TYPE6
init|=
literal|6
decl_stmt|;
comment|/**      * shading type 7 = Tensor-Product Patch Meshes.      */
specifier|public
specifier|static
specifier|final
name|int
name|SHADING_TYPE7
init|=
literal|7
decl_stmt|;
comment|/**      * Default constructor.      */
specifier|public
name|PDShadingResources
parameter_list|()
block|{
name|dictionary
operator|=
operator|new
name|COSDictionary
argument_list|()
expr_stmt|;
block|}
comment|/**      * Constructor using the given shading dictionary.      *      * @param shadingDictionary The dictionary for this shading.      */
specifier|public
name|PDShadingResources
parameter_list|(
name|COSDictionary
name|shadingDictionary
parameter_list|)
block|{
name|dictionary
operator|=
name|shadingDictionary
expr_stmt|;
block|}
comment|/**      * This will get the underlying dictionary.      *      * @return The dictionary for this shading.      */
specifier|public
name|COSDictionary
name|getCOSDictionary
parameter_list|()
block|{
return|return
name|dictionary
return|;
block|}
comment|/**      * Convert this standard java object to a COS object.      *      * @return The cos object that matches this Java object.      */
specifier|public
name|COSBase
name|getCOSObject
parameter_list|()
block|{
return|return
name|dictionary
return|;
block|}
comment|/**      * This will return the type.      *      * @return The type of object that this is.      */
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|COSName
operator|.
name|SHADING
operator|.
name|getName
argument_list|()
return|;
block|}
comment|/**      * This will set the shading type.      *      * @param shadingType The new shading type.      */
specifier|public
name|void
name|setShadingType
parameter_list|(
name|int
name|shadingType
parameter_list|)
block|{
name|dictionary
operator|.
name|setInt
argument_list|(
name|COSName
operator|.
name|SHADING_TYPE
argument_list|,
name|shadingType
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will return the shading type.      *      * @return The shading type      */
specifier|public
specifier|abstract
name|int
name|getShadingType
parameter_list|()
function_decl|;
comment|/**      * This will set the background.      *      * @param newBackground The new background.      */
specifier|public
name|void
name|setBackground
parameter_list|(
name|COSArray
name|newBackground
parameter_list|)
block|{
name|background
operator|=
name|newBackground
expr_stmt|;
name|dictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|BACKGROUND
argument_list|,
name|newBackground
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will return the background.      *      * @return The background      */
specifier|public
name|COSArray
name|getBackground
parameter_list|()
block|{
if|if
condition|(
name|background
operator|==
literal|null
condition|)
block|{
name|background
operator|=
operator|(
name|COSArray
operator|)
name|dictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|BACKGROUND
argument_list|)
expr_stmt|;
block|}
return|return
name|background
return|;
block|}
comment|/**      * An array of four numbers in the form coordinate system (see      * below), giving the coordinates of the left, bottom, right, and top edges,      * respectively, of the shadings's bounding box.      *      * @return The BBox of the form.      */
specifier|public
name|PDRectangle
name|getBBox
parameter_list|()
block|{
if|if
condition|(
name|bBox
operator|==
literal|null
condition|)
block|{
name|COSArray
name|array
init|=
operator|(
name|COSArray
operator|)
name|dictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|BBOX
argument_list|)
decl_stmt|;
if|if
condition|(
name|array
operator|!=
literal|null
condition|)
block|{
name|bBox
operator|=
operator|new
name|PDRectangle
argument_list|(
name|array
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|bBox
return|;
block|}
comment|/**      * This will set the BBox (bounding box) for this Shading.      *      * @param newBBox The new BBox.      */
specifier|public
name|void
name|setBBox
parameter_list|(
name|PDRectangle
name|newBBox
parameter_list|)
block|{
name|bBox
operator|=
name|newBBox
expr_stmt|;
if|if
condition|(
name|bBox
operator|==
literal|null
condition|)
block|{
name|dictionary
operator|.
name|removeItem
argument_list|(
name|COSName
operator|.
name|BBOX
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|BBOX
argument_list|,
name|bBox
operator|.
name|getCOSArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This will set the AntiAlias value.      *      * @param antiAlias The new AntiAlias value.      */
specifier|public
name|void
name|setAntiAlias
parameter_list|(
name|boolean
name|antiAlias
parameter_list|)
block|{
name|dictionary
operator|.
name|setBoolean
argument_list|(
name|COSName
operator|.
name|ANTI_ALIAS
argument_list|,
name|antiAlias
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will return the AntiAlias value.      *      * @return The AntiAlias value      */
specifier|public
name|boolean
name|getAntiAlias
parameter_list|()
block|{
return|return
name|dictionary
operator|.
name|getBoolean
argument_list|(
name|COSName
operator|.
name|ANTI_ALIAS
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * This will get the color space or null if none exists.      *      * @return The color space for the shading.      *      * @throws IOException If there is an error getting the colorspace.      */
specifier|public
name|PDColorSpace
name|getColorSpace
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|colorspace
operator|==
literal|null
condition|)
block|{
name|COSBase
name|colorSpaceDictionary
init|=
name|dictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|CS
argument_list|,
name|COSName
operator|.
name|COLORSPACE
argument_list|)
decl_stmt|;
name|colorspace
operator|=
name|PDColorSpaceFactory
operator|.
name|createColorSpace
argument_list|(
name|colorSpaceDictionary
argument_list|)
expr_stmt|;
block|}
return|return
name|colorspace
return|;
block|}
comment|/**      * This will set the color space for the shading.      *      * @param newColorspace The color space      */
specifier|public
name|void
name|setColorSpace
parameter_list|(
name|PDColorSpace
name|newColorspace
parameter_list|)
block|{
name|colorspace
operator|=
name|newColorspace
expr_stmt|;
if|if
condition|(
name|newColorspace
operator|!=
literal|null
condition|)
block|{
name|dictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|COLORSPACE
argument_list|,
name|newColorspace
operator|.
name|getCOSObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dictionary
operator|.
name|removeItem
argument_list|(
name|COSName
operator|.
name|COLORSPACE
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Create the correct PD Model shading based on the COS base shading.      *       * @param resourceDictionary the COS shading dictionary      *       * @return the newly created shading resources object      *       * @throws IOException If we are unable to create the PDShading object.      */
specifier|public
specifier|static
name|PDShadingResources
name|create
parameter_list|(
name|COSDictionary
name|resourceDictionary
parameter_list|)
throws|throws
name|IOException
block|{
name|PDShadingResources
name|shading
init|=
literal|null
decl_stmt|;
name|int
name|shadingType
init|=
name|resourceDictionary
operator|.
name|getInt
argument_list|(
name|COSName
operator|.
name|SHADING_TYPE
argument_list|,
literal|0
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|shadingType
condition|)
block|{
case|case
name|SHADING_TYPE1
case|:
name|shading
operator|=
operator|new
name|PDShadingType1
argument_list|(
name|resourceDictionary
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHADING_TYPE2
case|:
name|shading
operator|=
operator|new
name|PDShadingType2
argument_list|(
name|resourceDictionary
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHADING_TYPE3
case|:
name|shading
operator|=
operator|new
name|PDShadingType3
argument_list|(
name|resourceDictionary
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHADING_TYPE4
case|:
name|shading
operator|=
operator|new
name|PDShadingType4
argument_list|(
name|resourceDictionary
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHADING_TYPE5
case|:
name|shading
operator|=
operator|new
name|PDShadingType5
argument_list|(
name|resourceDictionary
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHADING_TYPE6
case|:
name|shading
operator|=
operator|new
name|PDShadingType6
argument_list|(
name|resourceDictionary
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHADING_TYPE7
case|:
name|shading
operator|=
operator|new
name|PDShadingType7
argument_list|(
name|resourceDictionary
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error: Unknown shading type "
operator|+
name|shadingType
argument_list|)
throw|;
block|}
return|return
name|shading
return|;
block|}
block|}
end_class

end_unit

