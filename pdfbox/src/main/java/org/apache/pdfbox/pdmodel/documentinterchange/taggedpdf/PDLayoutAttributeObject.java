begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|documentinterchange
operator|.
name|taggedpdf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDRectangle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDGamma
import|;
end_import

begin_comment
comment|/**  * A Layout attribute object.  *   * @author<a href="mailto:Johannes%20Koch%20%3Ckoch@apache.org%3E">Johannes Koch</a>  * @version $Revision: $  */
end_comment

begin_class
specifier|public
class|class
name|PDLayoutAttributeObject
extends|extends
name|PDStandardAttributeObject
block|{
comment|/**      * standard attribute owner: Layout      */
specifier|public
specifier|static
specifier|final
name|String
name|OWNER_LAYOUT
init|=
literal|"Layout"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PLACEMENT
init|=
literal|"Placement"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|WRITING_MODE
init|=
literal|"WritingMode"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BACKGROUND_COLOR
init|=
literal|"BackgroundColor"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BORDER_COLOR
init|=
literal|"BorderColor"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BORDER_STYLE
init|=
literal|"BorderStyle"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BORDER_THICKNESS
init|=
literal|"BorderThickness"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PADDING
init|=
literal|"Padding"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COLOR
init|=
literal|"Color"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SPACE_BEFORE
init|=
literal|"SpaceBefore"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SPACE_AFTER
init|=
literal|"SpaceAfter"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|START_INDENT
init|=
literal|"StartIndent"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|END_INDENT
init|=
literal|"EndIndent"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEXT_INDENT
init|=
literal|"TextIndent"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEXT_ALIGN
init|=
literal|"TextAlign"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BBOX
init|=
literal|"BBox"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|WIDTH
init|=
literal|"Width"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HEIGHT
init|=
literal|"Height"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BLOCK_ALIGN
init|=
literal|"BlockAlign"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|INLINE_ALIGN
init|=
literal|"InlineAlign"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|T_BORDER_STYLE
init|=
literal|"TBorderStyle"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|T_PADDING
init|=
literal|"TPadding"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BASELINE_SHIFT
init|=
literal|"BaselineShift"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LINE_HEIGHT
init|=
literal|"LineHeight"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEXT_DECORATION_COLOR
init|=
literal|"TextDecorationColor"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEXT_DECORATION_THICKNESS
init|=
literal|"TextDecorationThickness"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEXT_DECORATION_TYPE
init|=
literal|"TextDecorationType"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|RUBY_ALIGN
init|=
literal|"RubyAlign"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|RUBY_POSITION
init|=
literal|"RubyPosition"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|GLYPH_ORIENTATION_VERTICAL
init|=
literal|"GlyphOrientationVertical"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COLUMN_COUNT
init|=
literal|"ColumnCount"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COLUMN_GAP
init|=
literal|"ColumnGap"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COLUMN_WIDTHS
init|=
literal|"ColumnWidths"
decl_stmt|;
comment|/**      * Placement: Block: Stacked in the block-progression direction within an      * enclosing reference area or parent BLSE.      */
specifier|public
specifier|static
specifier|final
name|String
name|PLACEMENT_BLOCK
init|=
literal|"Block"
decl_stmt|;
comment|/**      * Placement: Inline: Packed in the inline-progression direction within an      * enclosing BLSE.      */
specifier|public
specifier|static
specifier|final
name|String
name|PLACEMENT_INLINE
init|=
literal|"Inline"
decl_stmt|;
comment|/**      * Placement: Before: Placed so that the before edge of the element’s      * allocation rectangle coincides with that of the nearest enclosing      * reference area. The element may float, if necessary, to achieve the      * specified placement. The element shall be treated as a block occupying      * the full extent of the enclosing reference area in the inline direction.      * Other content shall be stacked so as to begin at the after edge of the      * element’s allocation rectangle.      */
specifier|public
specifier|static
specifier|final
name|String
name|PLACEMENT_BEFORE
init|=
literal|"Before"
decl_stmt|;
comment|/**      * Placement: Start: Placed so that the start edge of the element’s      * allocation rectangle coincides with that of the nearest enclosing      * reference area. The element may float, if necessary, to achieve the      * specified placement. Other content that would intrude into the element’s      * allocation rectangle shall be laid out as a runaround.      */
specifier|public
specifier|static
specifier|final
name|String
name|PLACEMENT_START
init|=
literal|"Start"
decl_stmt|;
comment|/**      * Placement: End: Placed so that the end edge of the element’s allocation      * rectangle coincides with that of the nearest enclosing reference area.      * The element may float, if necessary, to achieve the specified placement.      * Other content that would intrude into the element’s allocation rectangle      * shall be laid out as a runaround.      */
specifier|public
specifier|static
specifier|final
name|String
name|PLACEMENT_END
init|=
literal|"End"
decl_stmt|;
comment|/**      * WritingMode: LrTb: Inline progression from left to right; block      * progression from top to bottom. This is the typical writing mode for      * Western writing systems.      */
specifier|public
specifier|static
specifier|final
name|String
name|WRITING_MODE_LRTB
init|=
literal|"LrTb"
decl_stmt|;
comment|/**      * WritingMode: RlTb: Inline progression from right to left; block      * progression from top to bottom. This is the typical writing mode for      * Arabic and Hebrew writing systems.      */
specifier|public
specifier|static
specifier|final
name|String
name|WRITING_MODE_RLTB
init|=
literal|"RlTb"
decl_stmt|;
comment|/**      * WritingMode: TbRl: Inline progression from top to bottom; block      * progression from right to left. This is the typical writing mode for      * Chinese and Japanese writing systems.      */
specifier|public
specifier|static
specifier|final
name|String
name|WRITING_MODE_TBRL
init|=
literal|"TbRl"
decl_stmt|;
comment|/**      * BorderStyle: None: No border. Forces the computed value of      * BorderThickness to be 0.      */
specifier|public
specifier|static
specifier|final
name|String
name|BORDER_STYLE_NONE
init|=
literal|"None"
decl_stmt|;
comment|/**      * BorderStyle: Hidden: Same as {@link #BORDER_STYLE_NONE}, except in terms      * of border conflict resolution for table elements.      */
specifier|public
specifier|static
specifier|final
name|String
name|BORDER_STYLE_HIDDEN
init|=
literal|"Hidden"
decl_stmt|;
comment|/**      * BorderStyle: Dotted: The border is a series of dots.      */
specifier|public
specifier|static
specifier|final
name|String
name|BORDER_STYLE_DOTTED
init|=
literal|"Dotted"
decl_stmt|;
comment|/**      * BorderStyle: Dashed: The border is a series of short line segments.      */
specifier|public
specifier|static
specifier|final
name|String
name|BORDER_STYLE_DASHED
init|=
literal|"Dashed"
decl_stmt|;
comment|/**      * BorderStyle: Solid: The border is a single line segment.      */
specifier|public
specifier|static
specifier|final
name|String
name|BORDER_STYLE_SOLID
init|=
literal|"Solid"
decl_stmt|;
comment|/**      * BorderStyle: Double: The border is two solid lines. The sum of the two      * lines and the space between them equals the value of BorderThickness.      */
specifier|public
specifier|static
specifier|final
name|String
name|BORDER_STYLE_DOUBLE
init|=
literal|"Double"
decl_stmt|;
comment|/**      * BorderStyle: Groove: The border looks as though it were carved into the      * canvas.      */
specifier|public
specifier|static
specifier|final
name|String
name|BORDER_STYLE_GROOVE
init|=
literal|"Groove"
decl_stmt|;
comment|/**      * BorderStyle: Ridge: The border looks as though it were coming out of the      * canvas (the opposite of {@link #BORDER_STYLE_GROOVE}).      */
specifier|public
specifier|static
specifier|final
name|String
name|BORDER_STYLE_RIDGE
init|=
literal|"Ridge"
decl_stmt|;
comment|/**      * BorderStyle: Inset: The border makes the entire box look as though it      * were embedded in the canvas.      */
specifier|public
specifier|static
specifier|final
name|String
name|BORDER_STYLE_INSET
init|=
literal|"Inset"
decl_stmt|;
comment|/**      * BorderStyle: Outset: The border makes the entire box look as though it      * were coming out of the canvas (the opposite of {@link #BORDER_STYLE_INSET}.      */
specifier|public
specifier|static
specifier|final
name|String
name|BORDER_STYLE_OUTSET
init|=
literal|"Outset"
decl_stmt|;
comment|/**      * TextAlign: Start: Aligned with the start edge.      */
specifier|public
specifier|static
specifier|final
name|String
name|TEXT_ALIGN_START
init|=
literal|"Start"
decl_stmt|;
comment|/**      * TextAlign: Center: Centered between the start and end edges.      */
specifier|public
specifier|static
specifier|final
name|String
name|TEXT_ALIGN_CENTER
init|=
literal|"Center"
decl_stmt|;
comment|/**      * TextAlign: End: Aligned with the end edge.      */
specifier|public
specifier|static
specifier|final
name|String
name|TEXT_ALIGN_END
init|=
literal|"End"
decl_stmt|;
comment|/**      * TextAlign: Justify: Aligned with both the start and end edges, with      * internal spacing within each line expanded, if necessary, to achieve such      * alignment. The last (or only) line shall be aligned with the start edge      * only.      */
specifier|public
specifier|static
specifier|final
name|String
name|TEXT_ALIGN_JUSTIFY
init|=
literal|"Justify"
decl_stmt|;
comment|/**      * Width: Auto      */
specifier|public
specifier|static
specifier|final
name|String
name|WIDTH_AUTO
init|=
literal|"Auto"
decl_stmt|;
comment|/**      * Height: Auto      */
specifier|public
specifier|static
specifier|final
name|String
name|HEIGHT_AUTO
init|=
literal|"Auto"
decl_stmt|;
comment|/**      * BlockAlign: Before: Before edge of the first child’s allocation rectangle      * aligned with that of the table cell’s content rectangle.      */
specifier|public
specifier|static
specifier|final
name|String
name|BLOCK_ALIGN_BEFORE
init|=
literal|"Before"
decl_stmt|;
comment|/**      * BlockAlign: Middle: Children centered within the table cell. The distance      * between the before edge of the first child’s allocation rectangle and      * that of the table cell’s content rectangle shall be the same as the      * distance between the after edge of the last child’s allocation rectangle      * and that of the table cell’s content rectangle.      */
specifier|public
specifier|static
specifier|final
name|String
name|BLOCK_ALIGN_MIDDLE
init|=
literal|"Middle"
decl_stmt|;
comment|/**      * BlockAlign: After: After edge of the last child’s allocation rectangle      * aligned with that of the table cell’s content rectangle.      */
specifier|public
specifier|static
specifier|final
name|String
name|BLOCK_ALIGN_AFTER
init|=
literal|"After"
decl_stmt|;
comment|/**      * BlockAlign: Justify: Children aligned with both the before and after      * edges of the table cell’s content rectangle. The first child shall be      * placed as described for {@link #BLOCK_ALIGN_BEFORE} and the last child as      * described for {@link #BLOCK_ALIGN_AFTER}, with equal spacing between the      * children. If there is only one child, it shall be aligned with the before      * edge only, as for {@link #BLOCK_ALIGN_BEFORE}.      */
specifier|public
specifier|static
specifier|final
name|String
name|BLOCK_ALIGN_JUSTIFY
init|=
literal|"Justify"
decl_stmt|;
comment|/**      * InlineAlign: Start: Start edge of each child’s allocation rectangle      * aligned with that of the table cell’s content rectangle.      */
specifier|public
specifier|static
specifier|final
name|String
name|INLINE_ALIGN_START
init|=
literal|"Start"
decl_stmt|;
comment|/**      * InlineAlign: Center: Each child centered within the table cell. The      * distance between the start edges of the child’s allocation rectangle and      * the table cell’s content rectangle shall be the same as the distance      * between their end edges.      */
specifier|public
specifier|static
specifier|final
name|String
name|INLINE_ALIGN_CENTER
init|=
literal|"Center"
decl_stmt|;
comment|/**      * InlineAlign: End: End edge of each child’s allocation rectangle aligned      * with that of the table cell’s content rectangle.      */
specifier|public
specifier|static
specifier|final
name|String
name|INLINE_ALIGN_END
init|=
literal|"End"
decl_stmt|;
comment|/**      * LineHeight: NormalAdjust the line height to include any nonzero value      * specified for BaselineShift.      */
specifier|public
specifier|static
specifier|final
name|String
name|LINE_HEIGHT_NORMAL
init|=
literal|"Normal"
decl_stmt|;
comment|/**      * LineHeight: Auto: Adjustment for the value of BaselineShift shall not be      * made.      */
specifier|public
specifier|static
specifier|final
name|String
name|LINE_HEIGHT_AUTO
init|=
literal|"Auto"
decl_stmt|;
comment|/**      * TextDecorationType: None: No text decoration      */
specifier|public
specifier|static
specifier|final
name|String
name|TEXT_DECORATION_TYPE_NONE
init|=
literal|"None"
decl_stmt|;
comment|/**      * TextDecorationType: Underline: A line below the text      */
specifier|public
specifier|static
specifier|final
name|String
name|TEXT_DECORATION_TYPE_UNDERLINE
init|=
literal|"Underline"
decl_stmt|;
comment|/**      * TextDecorationType: Overline: A line above the text      */
specifier|public
specifier|static
specifier|final
name|String
name|TEXT_DECORATION_TYPE_OVERLINE
init|=
literal|"Overline"
decl_stmt|;
comment|/**      * TextDecorationType: LineThrough: A line through the middle of the text      */
specifier|public
specifier|static
specifier|final
name|String
name|TEXT_DECORATION_TYPE_LINE_THROUGH
init|=
literal|"LineThrough"
decl_stmt|;
comment|/**      * RubyAlign: Start: The content shall be aligned on the start edge in the      * inline-progression direction.      */
specifier|public
specifier|static
specifier|final
name|String
name|RUBY_ALIGN_START
init|=
literal|"Start"
decl_stmt|;
comment|/**      * RubyAlign: Center: The content shall be centered in the      * inline-progression direction.      */
specifier|public
specifier|static
specifier|final
name|String
name|RUBY_ALIGN_CENTER
init|=
literal|"Center"
decl_stmt|;
comment|/**      * RubyAlign: End: The content shall be aligned on the end edge in the      * inline-progression direction.      */
specifier|public
specifier|static
specifier|final
name|String
name|RUBY_ALIGN_END
init|=
literal|"End"
decl_stmt|;
comment|/**      * RubyAlign: Justify:  The content shall be expanded to fill the available      * width in the inline-progression direction.      */
specifier|public
specifier|static
specifier|final
name|String
name|RUBY_ALIGN_JUSTIFY
init|=
literal|"Justify"
decl_stmt|;
comment|/**      * RubyAlign: Distribute: The content shall be expanded to fill the      * available width in the inline-progression direction. However, space shall      * also be inserted at the start edge and end edge of the text. The spacing      * shall be distributed using a 1:2:1 (start:infix:end) ratio. It shall be      * changed to a 0:1:1 ratio if the ruby appears at the start of a text line      * or to a 1:1:0 ratio if the ruby appears at the end of the text line.      */
specifier|public
specifier|static
specifier|final
name|String
name|RUBY_ALIGN_DISTRIBUTE
init|=
literal|"Distribute"
decl_stmt|;
comment|/**      * RubyPosition: Before: The RT content shall be aligned along the before      * edge of the element.      */
specifier|public
specifier|static
specifier|final
name|String
name|RUBY_POSITION_BEFORE
init|=
literal|"Before"
decl_stmt|;
comment|/**      * RubyPosition: After: The RT content shall be aligned along the after edge      * of the element.      */
specifier|public
specifier|static
specifier|final
name|String
name|RUBY_POSITION_AFTER
init|=
literal|"After"
decl_stmt|;
comment|/**      * RubyPosition: Warichu: The RT and associated RP elements shall be      * formatted as a warichu, following the RB element.      */
specifier|public
specifier|static
specifier|final
name|String
name|RUBY_POSITION_WARICHU
init|=
literal|"Warichu"
decl_stmt|;
comment|/**      * RubyPosition: Inline: The RT and associated RP elements shall be      * formatted as a parenthesis comment, following the RB element.      */
specifier|public
specifier|static
specifier|final
name|String
name|RUBY_POSITION_INLINE
init|=
literal|"Inline"
decl_stmt|;
comment|/**      * GlyphOrientationVertical: Auto      */
specifier|public
specifier|static
specifier|final
name|String
name|GLYPH_ORIENTATION_VERTICAL_AUTO
init|=
literal|"Auto"
decl_stmt|;
comment|/**      * GlyphOrientationVertical: -180°      */
specifier|public
specifier|static
specifier|final
name|String
name|GLYPH_ORIENTATION_VERTICAL_MINUS_180_DEGREES
init|=
literal|"-180"
decl_stmt|;
comment|/**      * GlyphOrientationVertical: -90°      */
specifier|public
specifier|static
specifier|final
name|String
name|GLYPH_ORIENTATION_VERTICAL_MINUS_90_DEGREES
init|=
literal|"-90"
decl_stmt|;
comment|/**      * GlyphOrientationVertical: 0°      */
specifier|public
specifier|static
specifier|final
name|String
name|GLYPH_ORIENTATION_VERTICAL_ZERO_DEGREES
init|=
literal|"0"
decl_stmt|;
comment|/**      * GlyphOrientationVertical: 90°      */
specifier|public
specifier|static
specifier|final
name|String
name|GLYPH_ORIENTATION_VERTICAL_90_DEGREES
init|=
literal|"90"
decl_stmt|;
comment|/**      * GlyphOrientationVertical: 180°      */
specifier|public
specifier|static
specifier|final
name|String
name|GLYPH_ORIENTATION_VERTICAL_180_DEGREES
init|=
literal|"180"
decl_stmt|;
comment|/**      * GlyphOrientationVertical: 270°      */
specifier|public
specifier|static
specifier|final
name|String
name|GLYPH_ORIENTATION_VERTICAL_270_DEGREES
init|=
literal|"270"
decl_stmt|;
comment|/**      * GlyphOrientationVertical: 360°      */
specifier|public
specifier|static
specifier|final
name|String
name|GLYPH_ORIENTATION_VERTICAL_360_DEGREES
init|=
literal|"360"
decl_stmt|;
comment|/**      * Default constructor.      */
specifier|public
name|PDLayoutAttributeObject
parameter_list|()
block|{
name|this
operator|.
name|setOwner
argument_list|(
name|OWNER_LAYOUT
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new Layout attribute object with a given dictionary.      *       * @param dictionary the dictionary      */
specifier|public
name|PDLayoutAttributeObject
parameter_list|(
name|COSDictionary
name|dictionary
parameter_list|)
block|{
name|super
argument_list|(
name|dictionary
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the positioning of the element with respect to the enclosing      * reference area and other content (Placement). The default value is      * {@link #PLACEMENT_INLINE}.      *       * @return the placement      */
specifier|public
name|String
name|getPlacement
parameter_list|()
block|{
return|return
name|this
operator|.
name|getName
argument_list|(
name|PLACEMENT
argument_list|,
name|PLACEMENT_INLINE
argument_list|)
return|;
block|}
comment|/**      * Sets the positioning of the element with respect to the enclosing      * reference area and other content (Placement). The value should be one of:      *<ul>      *<li>{@link #PLACEMENT_BLOCK},</li>      *<li>{@link #PLACEMENT_INLINE},</li>      *<li>{@link #PLACEMENT_BEFORE},</li>      *<li>{@link #PLACEMENT_START},</li>      *<li>{@link #PLACEMENT_END}.</li>      *<ul>      *       * @param placement the placement      */
specifier|public
name|void
name|setPlacement
parameter_list|(
name|String
name|placement
parameter_list|)
block|{
name|this
operator|.
name|setName
argument_list|(
name|PLACEMENT
argument_list|,
name|placement
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the writing mode (WritingMode). The default value is      * {@link #WRITING_MODE_LRTB}.      *       * @return the writing mode      */
specifier|public
name|String
name|getWritingMode
parameter_list|()
block|{
return|return
name|this
operator|.
name|getName
argument_list|(
name|WRITING_MODE
argument_list|,
name|WRITING_MODE_LRTB
argument_list|)
return|;
block|}
comment|/**      * Sets the writing mode (WritingMode). The value should be one of:      *<ul>      *<li>{@link #WRITING_MODE_LRTB},</li>      *<li>{@link #WRITING_MODE_RLTB},</li>      *<li>{@link #WRITING_MODE_TBRL}.</li>      *</ul>      *       * @param writingMode the writing mode      */
specifier|public
name|void
name|setWritingMode
parameter_list|(
name|String
name|writingMode
parameter_list|)
block|{
name|this
operator|.
name|setName
argument_list|(
name|WRITING_MODE
argument_list|,
name|writingMode
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the background colour (BackgroundColor).      *       * @return the background colour      */
specifier|public
name|PDGamma
name|getBackgroundColor
parameter_list|()
block|{
return|return
name|this
operator|.
name|getColor
argument_list|(
name|BACKGROUND_COLOR
argument_list|)
return|;
block|}
comment|/**      * Sets the background colour (BackgroundColor).      *       * @param backgroundColor the background colour      */
specifier|public
name|void
name|setBackgroundColor
parameter_list|(
name|PDGamma
name|backgroundColor
parameter_list|)
block|{
name|this
operator|.
name|setColor
argument_list|(
name|BACKGROUND_COLOR
argument_list|,
name|backgroundColor
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the border colour (BorderColor).      *       * @return a single border colour ({@link PDGamma}) or four border colours      *  ({@link PDFourColours})      */
specifier|public
name|Object
name|getBorderColors
parameter_list|()
block|{
return|return
name|this
operator|.
name|getColorOrFourColors
argument_list|(
name|BORDER_COLOR
argument_list|)
return|;
block|}
comment|/**      * Sets the same border colour for all four sides (BorderColor).      *       * @param borderColor the border colour      */
specifier|public
name|void
name|setAllBorderColors
parameter_list|(
name|PDGamma
name|borderColor
parameter_list|)
block|{
name|this
operator|.
name|setColor
argument_list|(
name|BORDER_COLOR
argument_list|,
name|borderColor
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the border colours for four sides separately (BorderColor).      *       * @param borderColors the border colours      */
specifier|public
name|void
name|setBorderColors
parameter_list|(
name|PDFourColours
name|borderColors
parameter_list|)
block|{
name|this
operator|.
name|setFourColors
argument_list|(
name|BORDER_COLOR
argument_list|,
name|borderColors
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the border style (BorderStyle). The default value is      * {@link #BORDER_STYLE_NONE}.      *       * @return the border styles (a String or an array of four Strings)      */
specifier|public
name|Object
name|getBorderStyle
parameter_list|()
block|{
return|return
name|this
operator|.
name|getNameOrArrayOfName
argument_list|(
name|BORDER_STYLE
argument_list|,
name|BORDER_STYLE_NONE
argument_list|)
return|;
block|}
comment|/**      * Sets the same border style for all four sides (BorderStyle). The value      * should be one of:      *<ul>      *<li>{@link #BORDER_STYLE_NONE},</li>      *<li>{@link #BORDER_STYLE_HIDDEN},</li>      *<li>{@link #BORDER_STYLE_DOTTED},</li>      *<li>{@link #BORDER_STYLE_DASHED},</li>      *<li>{@link #BORDER_STYLE_SOLID},</li>      *<li>{@link #BORDER_STYLE_DOUBLE},</li>      *<li>{@link #BORDER_STYLE_GROOVE},</li>      *<li>{@link #BORDER_STYLE_RIDGE},</li>      *<li>{@link #BORDER_STYLE_INSET},</li>      *<li>{@link #BORDER_STYLE_OUTSET}.</li>      *</ul>      *       * @param borderStyle the border style      */
specifier|public
name|void
name|setAllBorderStyles
parameter_list|(
name|String
name|borderStyle
parameter_list|)
block|{
name|this
operator|.
name|setName
argument_list|(
name|BORDER_STYLE
argument_list|,
name|borderStyle
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the border styles for four sides separately (BorderStyle). The      * values should be of:      *<ul>      *<li>{@link #BORDER_STYLE_NONE},</li>      *<li>{@link #BORDER_STYLE_HIDDEN},</li>      *<li>{@link #BORDER_STYLE_DOTTED},</li>      *<li>{@link #BORDER_STYLE_DASHED},</li>      *<li>{@link #BORDER_STYLE_SOLID},</li>      *<li>{@link #BORDER_STYLE_DOUBLE},</li>      *<li>{@link #BORDER_STYLE_GROOVE},</li>      *<li>{@link #BORDER_STYLE_RIDGE},</li>      *<li>{@link #BORDER_STYLE_INSET},</li>      *<li>{@link #BORDER_STYLE_OUTSET}.</li>      *</ul>      *       * @param borderStyles the border styles (an array of four Strings)      */
specifier|public
name|void
name|setBorderStyles
parameter_list|(
name|String
index|[]
name|borderStyles
parameter_list|)
block|{
name|this
operator|.
name|setArrayOfName
argument_list|(
name|BORDER_STYLE
argument_list|,
name|borderStyles
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the border thickness (BorderThickness).      *       * @return the border thickness (a Float or an array of four floats)      */
specifier|public
name|Object
name|getBorderThickness
parameter_list|()
block|{
return|return
name|this
operator|.
name|getNumberOrArrayOfNumber
argument_list|(
name|BORDER_THICKNESS
argument_list|,
name|UNSPECIFIED
argument_list|)
return|;
block|}
comment|/**      * Sets the same border thickness for all four sides (BorderThickness).      *       * @param borderThickness the border thickness      */
specifier|public
name|void
name|setAllBorderThicknesses
parameter_list|(
name|float
name|borderThickness
parameter_list|)
block|{
name|this
operator|.
name|setNumber
argument_list|(
name|BORDER_THICKNESS
argument_list|,
name|borderThickness
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the same border thickness for all four sides (BorderThickness).      *       * @param borderThickness the border thickness      */
specifier|public
name|void
name|setAllBorderThicknesses
parameter_list|(
name|int
name|borderThickness
parameter_list|)
block|{
name|this
operator|.
name|setNumber
argument_list|(
name|BORDER_THICKNESS
argument_list|,
name|borderThickness
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the border thicknesses for four sides separately (BorderThickness).      *       * @param borderThicknesses the border thickness (an array of four floats)      */
specifier|public
name|void
name|setBorderThicknesses
parameter_list|(
name|float
index|[]
name|borderThicknesses
parameter_list|)
block|{
name|this
operator|.
name|setArrayOfNumber
argument_list|(
name|BORDER_THICKNESS
argument_list|,
name|borderThicknesses
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the padding (Padding). The default value is 0.      *       * @return the padding (a Float or an array of float)      */
specifier|public
name|Object
name|getPadding
parameter_list|()
block|{
return|return
name|this
operator|.
name|getNumberOrArrayOfNumber
argument_list|(
name|PADDING
argument_list|,
literal|0.f
argument_list|)
return|;
block|}
comment|/**      * Sets the same padding for all four sides (Padding).      *       * @param padding the padding      */
specifier|public
name|void
name|setAllPaddings
parameter_list|(
name|float
name|padding
parameter_list|)
block|{
name|this
operator|.
name|setNumber
argument_list|(
name|PADDING
argument_list|,
name|padding
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the same padding for all four sides (Padding).      *       * @param padding the padding      */
specifier|public
name|void
name|setAllPaddings
parameter_list|(
name|int
name|padding
parameter_list|)
block|{
name|this
operator|.
name|setNumber
argument_list|(
name|PADDING
argument_list|,
name|padding
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the paddings for four sides separately (Padding).      *       * @param paddings the paddings (an array of four floats)      */
specifier|public
name|void
name|setPaddings
parameter_list|(
name|float
index|[]
name|paddings
parameter_list|)
block|{
name|this
operator|.
name|setArrayOfNumber
argument_list|(
name|PADDING
argument_list|,
name|paddings
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the color to be used for drawing text and the default value for the      * colour of table borders and text decorations (Color).      *       * @return the colour      */
specifier|public
name|PDGamma
name|getColor
parameter_list|()
block|{
return|return
name|this
operator|.
name|getColor
argument_list|(
name|COLOR
argument_list|)
return|;
block|}
comment|/**      * Sets the color to be used for drawing text and the default value for the      * colour of table borders and text decorations (Color).      *       * @param color the colour      */
specifier|public
name|void
name|setColor
parameter_list|(
name|PDGamma
name|color
parameter_list|)
block|{
name|this
operator|.
name|setColor
argument_list|(
name|COLOR
argument_list|,
name|color
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the amount of extra space preceding the before edge of the BLSE in      * the block-progression direction (SpaceBefore). The default value is 0.      *       * @return the space before      */
specifier|public
name|float
name|getSpaceBefore
parameter_list|()
block|{
return|return
name|this
operator|.
name|getNumber
argument_list|(
name|SPACE_BEFORE
argument_list|,
literal|0.f
argument_list|)
return|;
block|}
comment|/**      * Sets the amount of extra space preceding the before edge of the BLSE in      * the block-progression direction (SpaceBefore).      *       * @param spaceBefore the space before      */
specifier|public
name|void
name|setSpaceBefore
parameter_list|(
name|float
name|spaceBefore
parameter_list|)
block|{
name|this
operator|.
name|setNumber
argument_list|(
name|SPACE_BEFORE
argument_list|,
name|spaceBefore
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the amount of extra space preceding the before edge of the BLSE in      * the block-progression direction (SpaceBefore).      *       * @param spaceBefore the space before      */
specifier|public
name|void
name|setSpaceBefore
parameter_list|(
name|int
name|spaceBefore
parameter_list|)
block|{
name|this
operator|.
name|setNumber
argument_list|(
name|SPACE_BEFORE
argument_list|,
name|spaceBefore
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the amount of extra space following the after edge of the BLSE in      * the block-progression direction (SpaceAfter). The default value is 0.      *       * @return the space after      */
specifier|public
name|float
name|getSpaceAfter
parameter_list|()
block|{
return|return
name|this
operator|.
name|getNumber
argument_list|(
name|SPACE_AFTER
argument_list|,
literal|0.f
argument_list|)
return|;
block|}
comment|/**      * Sets the amount of extra space following the after edge of the BLSE in      * the block-progression direction (SpaceAfter).      *       * @param spaceAfter the space after      */
specifier|public
name|void
name|setSpaceAfter
parameter_list|(
name|float
name|spaceAfter
parameter_list|)
block|{
name|this
operator|.
name|setNumber
argument_list|(
name|SPACE_AFTER
argument_list|,
name|spaceAfter
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the amount of extra space following the after edge of the BLSE in      * the block-progression direction (SpaceAfter).      *       * @param spaceAfter the space after      */
specifier|public
name|void
name|setSpaceAfter
parameter_list|(
name|int
name|spaceAfter
parameter_list|)
block|{
name|this
operator|.
name|setNumber
argument_list|(
name|SPACE_AFTER
argument_list|,
name|spaceAfter
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the distance from the start edge of the reference area to that of      * the BLSE in the inline-progression direction (StartIndent). The default value is 0.      *       * @return the start indent      */
specifier|public
name|float
name|getStartIndent
parameter_list|()
block|{
return|return
name|this
operator|.
name|getNumber
argument_list|(
name|START_INDENT
argument_list|,
literal|0.f
argument_list|)
return|;
block|}
comment|/**      * Sets the distance from the start edge of the reference area to that of      * the BLSE in the inline-progression direction (StartIndent).      *       * @param startIndent the start indent      */
specifier|public
name|void
name|setStartIndent
parameter_list|(
name|float
name|startIndent
parameter_list|)
block|{
name|this
operator|.
name|setNumber
argument_list|(
name|START_INDENT
argument_list|,
name|startIndent
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the distance from the start edge of the reference area to that of      * the BLSE in the inline-progression direction (StartIndent).      *       * @param startIndent the start indent      */
specifier|public
name|void
name|setStartIndent
parameter_list|(
name|int
name|startIndent
parameter_list|)
block|{
name|this
operator|.
name|setNumber
argument_list|(
name|START_INDENT
argument_list|,
name|startIndent
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the distance from the end edge of the BLSE to that of the reference      * area in the inline-progression direction (EndIndent). The default value      * is 0.      *       * @return the end indent      */
specifier|public
name|float
name|getEndIndent
parameter_list|()
block|{
return|return
name|this
operator|.
name|getNumber
argument_list|(
name|END_INDENT
argument_list|,
literal|0.f
argument_list|)
return|;
block|}
comment|/**      * Sets the distance from the end edge of the BLSE to that of the reference      * area in the inline-progression direction (EndIndent).      *       * @param endIndent the end indent      */
specifier|public
name|void
name|setEndIndent
parameter_list|(
name|float
name|endIndent
parameter_list|)
block|{
name|this
operator|.
name|setNumber
argument_list|(
name|END_INDENT
argument_list|,
name|endIndent
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the distance from the end edge of the BLSE to that of the reference      * area in the inline-progression direction (EndIndent).      *       * @param endIndent the end indent      */
specifier|public
name|void
name|setEndIndent
parameter_list|(
name|int
name|endIndent
parameter_list|)
block|{
name|this
operator|.
name|setNumber
argument_list|(
name|END_INDENT
argument_list|,
name|endIndent
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the additional distance in the inline-progression direction from the      * start edge of the BLSE, as specified by StartIndent, to that of the first      * line of text (TextIndent). The default value is 0.      *       * @return the text indent      */
specifier|public
name|float
name|getTextIndent
parameter_list|()
block|{
return|return
name|this
operator|.
name|getNumber
argument_list|(
name|TEXT_INDENT
argument_list|,
literal|0.f
argument_list|)
return|;
block|}
comment|/**      * Sets the additional distance in the inline-progression direction from the      * start edge of the BLSE, as specified by StartIndent, to that of the first      * line of text (TextIndent).      *       * @param textIndent the text indent      */
specifier|public
name|void
name|setTextIndent
parameter_list|(
name|float
name|textIndent
parameter_list|)
block|{
name|this
operator|.
name|setNumber
argument_list|(
name|TEXT_INDENT
argument_list|,
name|textIndent
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the additional distance in the inline-progression direction from the      * start edge of the BLSE, as specified by StartIndent, to that of the first      * line of text (TextIndent).      *       * @param textIndent the text indent      */
specifier|public
name|void
name|setTextIndent
parameter_list|(
name|int
name|textIndent
parameter_list|)
block|{
name|this
operator|.
name|setNumber
argument_list|(
name|TEXT_INDENT
argument_list|,
name|textIndent
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the alignment, in the inline-progression direction, of text and      * other content within lines of the BLSE (TextAlign). The default value is      * {@link #TEXT_ALIGN_START}.      *       * @return the text alignment      */
specifier|public
name|String
name|getTextAlign
parameter_list|()
block|{
return|return
name|this
operator|.
name|getName
argument_list|(
name|TEXT_ALIGN
argument_list|,
name|TEXT_ALIGN_START
argument_list|)
return|;
block|}
comment|/**      * Sets the alignment, in the inline-progression direction, of text and      * other content within lines of the BLSE (TextAlign). The value should be      * one of:      *<ul>      *<li>{@link #TEXT_ALIGN_START},</li>      *<li>{@link #TEXT_ALIGN_CENTER},</li>      *<li>{@link #TEXT_ALIGN_END},</li>      *<li>{@link #TEXT_ALIGN_JUSTIFY}.</li>      *</ul>      *       * @param textIndent the text alignment      */
specifier|public
name|void
name|setTextAlign
parameter_list|(
name|String
name|textIndent
parameter_list|)
block|{
name|this
operator|.
name|setName
argument_list|(
name|TEXT_ALIGN
argument_list|,
name|textIndent
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the bounding box.      *       * @return the bounding box.      */
specifier|public
name|PDRectangle
name|getBBox
parameter_list|()
block|{
name|COSArray
name|array
init|=
operator|(
name|COSArray
operator|)
name|this
operator|.
name|getCOSDictionary
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|BBOX
argument_list|)
decl_stmt|;
if|if
condition|(
name|array
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|PDRectangle
argument_list|(
name|array
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Sets the bounding box.      *       * @param bbox the bounding box      */
specifier|public
name|void
name|setBBox
parameter_list|(
name|PDRectangle
name|bbox
parameter_list|)
block|{
name|String
name|name
init|=
name|BBOX
decl_stmt|;
name|COSBase
name|oldValue
init|=
name|this
operator|.
name|getCOSDictionary
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|this
operator|.
name|getCOSDictionary
argument_list|()
operator|.
name|setItem
argument_list|(
name|name
argument_list|,
name|bbox
argument_list|)
expr_stmt|;
name|COSBase
name|newValue
init|=
name|bbox
operator|==
literal|null
condition|?
literal|null
else|:
name|bbox
operator|.
name|getCOSObject
argument_list|()
decl_stmt|;
name|this
operator|.
name|potentiallyNotifyChanged
argument_list|(
name|oldValue
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the width of the element’s content rectangle in the      * inline-progression direction (Width). The default value is      * {@link #WIDTH_AUTO}.      *       * @return the width (a Float or a String)      */
specifier|public
name|Object
name|getWidth
parameter_list|()
block|{
return|return
name|this
operator|.
name|getNumberOrName
argument_list|(
name|WIDTH
argument_list|,
name|WIDTH_AUTO
argument_list|)
return|;
block|}
comment|/**      * Sets the width of the element’s content rectangle in the      * inline-progression direction (Width) to {@link #WIDTH_AUTO}.      */
specifier|public
name|void
name|setWidthAuto
parameter_list|()
block|{
name|this
operator|.
name|setName
argument_list|(
name|WIDTH
argument_list|,
name|WIDTH_AUTO
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the width of the element’s content rectangle in the      * inline-progression direction (Width).      *       * @param width the width      */
specifier|public
name|void
name|setWidth
parameter_list|(
name|float
name|width
parameter_list|)
block|{
name|this
operator|.
name|setNumber
argument_list|(
name|WIDTH
argument_list|,
name|width
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the width of the element’s content rectangle in the      * inline-progression direction (Width).      *       * @param width the width      */
specifier|public
name|void
name|setWidth
parameter_list|(
name|int
name|width
parameter_list|)
block|{
name|this
operator|.
name|setNumber
argument_list|(
name|WIDTH
argument_list|,
name|width
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the height of the element’s content rectangle in the      * block-progression direction (Height). The default value is      * {@link #HEIGHT_AUTO}.      *       * @return the height (a Float or a String)      */
specifier|public
name|Object
name|getHeight
parameter_list|()
block|{
return|return
name|this
operator|.
name|getNumberOrName
argument_list|(
name|HEIGHT
argument_list|,
name|HEIGHT_AUTO
argument_list|)
return|;
block|}
comment|/**      * Sets the height of the element’s content rectangle in the      * block-progression direction (Height) to {@link #HEIGHT_AUTO}.      */
specifier|public
name|void
name|setHeightAuto
parameter_list|()
block|{
name|this
operator|.
name|setName
argument_list|(
name|HEIGHT
argument_list|,
name|HEIGHT_AUTO
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the height of the element’s content rectangle in the      * block-progression direction (Height).      *       * @param height the height      */
specifier|public
name|void
name|setHeight
parameter_list|(
name|float
name|height
parameter_list|)
block|{
name|this
operator|.
name|setNumber
argument_list|(
name|HEIGHT
argument_list|,
name|height
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the height of the element’s content rectangle in the      * block-progression direction (Height).      *       * @param height the height      */
specifier|public
name|void
name|setHeight
parameter_list|(
name|int
name|height
parameter_list|)
block|{
name|this
operator|.
name|setNumber
argument_list|(
name|HEIGHT
argument_list|,
name|height
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the alignment, in the block-progression direction, of content within      * the table cell (BlockAlign). The default value is      * {@link #BLOCK_ALIGN_BEFORE}.      *       * @return the block alignment      */
specifier|public
name|String
name|getBlockAlign
parameter_list|()
block|{
return|return
name|this
operator|.
name|getName
argument_list|(
name|BLOCK_ALIGN
argument_list|,
name|BLOCK_ALIGN_BEFORE
argument_list|)
return|;
block|}
comment|/**      * Sets the alignment, in the block-progression direction, of content within      * the table cell (BlockAlign). The value should be one of:      *<ul>      *<li>{@link #BLOCK_ALIGN_BEFORE},</li>      *<li>{@link #BLOCK_ALIGN_MIDDLE},</li>      *<li>{@link #BLOCK_ALIGN_AFTER},</li>      *<li>{@link #BLOCK_ALIGN_JUSTIFY}.</li>      *</ul>      *       * @param blockAlign the block alignment      */
specifier|public
name|void
name|setBlockAlign
parameter_list|(
name|String
name|blockAlign
parameter_list|)
block|{
name|this
operator|.
name|setName
argument_list|(
name|BLOCK_ALIGN
argument_list|,
name|blockAlign
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the alignment, in the inline-progression direction, of content      * within the table cell (InlineAlign). The default value is      * {@link #INLINE_ALIGN_START}.      *       * @return the inline alignment      */
specifier|public
name|String
name|getInlineAlign
parameter_list|()
block|{
return|return
name|this
operator|.
name|getName
argument_list|(
name|INLINE_ALIGN
argument_list|,
name|INLINE_ALIGN_START
argument_list|)
return|;
block|}
comment|/**      * Sets the alignment, in the inline-progression direction, of content      * within the table cell (InlineAlign). The value should be one of      *<ul>      *<li>{@link #INLINE_ALIGN_START},</li>      *<li>{@link #INLINE_ALIGN_CENTER},</li>      *<li>{@link #INLINE_ALIGN_END}.</li>      *</ul>      *       * @param inlineAlign the inline alignment      */
specifier|public
name|void
name|setInlineAlign
parameter_list|(
name|String
name|inlineAlign
parameter_list|)
block|{
name|this
operator|.
name|setName
argument_list|(
name|INLINE_ALIGN
argument_list|,
name|inlineAlign
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the style of the border drawn on each edge of a table cell      * (TBorderStyle).      *       * @return      */
specifier|public
name|Object
name|getTBorderStyle
parameter_list|()
block|{
return|return
name|this
operator|.
name|getNameOrArrayOfName
argument_list|(
name|T_BORDER_STYLE
argument_list|,
name|BORDER_STYLE_NONE
argument_list|)
return|;
block|}
comment|/**      * Sets the same table border style for all four sides (TBorderStyle). The      * value should be one of:      *<ul>      *<li>{@link #BORDER_STYLE_NONE},</li>      *<li>{@link #BORDER_STYLE_HIDDEN},</li>      *<li>{@link #BORDER_STYLE_DOTTED},</li>      *<li>{@link #BORDER_STYLE_DASHED},</li>      *<li>{@link #BORDER_STYLE_SOLID},</li>      *<li>{@link #BORDER_STYLE_DOUBLE},</li>      *<li>{@link #BORDER_STYLE_GROOVE},</li>      *<li>{@link #BORDER_STYLE_RIDGE},</li>      *<li>{@link #BORDER_STYLE_INSET},</li>      *<li>{@link #BORDER_STYLE_OUTSET}.</li>      *</ul>      *       * @param tBorderStyle the table border style      */
specifier|public
name|void
name|setAllTBorderStyles
parameter_list|(
name|String
name|tBorderStyle
parameter_list|)
block|{
name|this
operator|.
name|setName
argument_list|(
name|T_BORDER_STYLE
argument_list|,
name|tBorderStyle
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the style of the border drawn on each edge of a table cell      * (TBorderStyle). The values should be of:      *<ul>      *<li>{@link #BORDER_STYLE_NONE},</li>      *<li>{@link #BORDER_STYLE_HIDDEN},</li>      *<li>{@link #BORDER_STYLE_DOTTED},</li>      *<li>{@link #BORDER_STYLE_DASHED},</li>      *<li>{@link #BORDER_STYLE_SOLID},</li>      *<li>{@link #BORDER_STYLE_DOUBLE},</li>      *<li>{@link #BORDER_STYLE_GROOVE},</li>      *<li>{@link #BORDER_STYLE_RIDGE},</li>      *<li>{@link #BORDER_STYLE_INSET},</li>      *<li>{@link #BORDER_STYLE_OUTSET}.</li>      *</ul>      *       * @param tBorderStyles      */
specifier|public
name|void
name|setTBorderStyles
parameter_list|(
name|String
index|[]
name|tBorderStyles
parameter_list|)
block|{
name|this
operator|.
name|setArrayOfName
argument_list|(
name|T_BORDER_STYLE
argument_list|,
name|tBorderStyles
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the offset to account for the separation between the table cell’s      * content rectangle and the surrounding border (TPadding). The default      * value is 0.      *       * @return the table padding (a Float or an array of float)      */
specifier|public
name|Object
name|getTPadding
parameter_list|()
block|{
return|return
name|this
operator|.
name|getNumberOrArrayOfNumber
argument_list|(
name|T_PADDING
argument_list|,
literal|0.f
argument_list|)
return|;
block|}
comment|/**      * Sets the same table padding for all four sides (TPadding).      *       * @param tPadding the table padding      */
specifier|public
name|void
name|setAllTPaddings
parameter_list|(
name|float
name|tPadding
parameter_list|)
block|{
name|this
operator|.
name|setNumber
argument_list|(
name|T_PADDING
argument_list|,
name|tPadding
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the same table padding for all four sides (TPadding).      *       * @param tPadding the table padding      */
specifier|public
name|void
name|setAllTPaddings
parameter_list|(
name|int
name|tPadding
parameter_list|)
block|{
name|this
operator|.
name|setNumber
argument_list|(
name|T_PADDING
argument_list|,
name|tPadding
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the table paddings for four sides separately (TPadding).      *       * @param tPaddings the table paddings (an array of four floats)      */
specifier|public
name|void
name|setTPaddings
parameter_list|(
name|float
index|[]
name|tPaddings
parameter_list|)
block|{
name|this
operator|.
name|setArrayOfNumber
argument_list|(
name|T_PADDING
argument_list|,
name|tPaddings
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the distance by which the element’s baseline shall be shifted      * relative to that of its parent element (BaselineShift). The default value      * is 0.      *       * @return the baseline shift      */
specifier|public
name|float
name|getBaselineShift
parameter_list|()
block|{
return|return
name|this
operator|.
name|getNumber
argument_list|(
name|BASELINE_SHIFT
argument_list|,
literal|0.f
argument_list|)
return|;
block|}
comment|/**      * Sets the distance by which the element’s baseline shall be shifted      * relative to that of its parent element (BaselineShift).      *       * @param baselineShift the baseline shift      */
specifier|public
name|void
name|setBaselineShift
parameter_list|(
name|float
name|baselineShift
parameter_list|)
block|{
name|this
operator|.
name|setNumber
argument_list|(
name|BASELINE_SHIFT
argument_list|,
name|baselineShift
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the distance by which the element’s baseline shall be shifted      * relative to that of its parent element (BaselineShift).      *       * @param baselineShift the baseline shift      */
specifier|public
name|void
name|setBaselineShift
parameter_list|(
name|int
name|baselineShift
parameter_list|)
block|{
name|this
operator|.
name|setNumber
argument_list|(
name|BASELINE_SHIFT
argument_list|,
name|baselineShift
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the element’s preferred height in the block-progression direction      * (LineHeight). The default value is {@link #LINE_HEIGHT_NORMAL}.      *       * @return the line height (a Float or a String)      */
specifier|public
name|Object
name|getLineHeight
parameter_list|()
block|{
return|return
name|this
operator|.
name|getNumberOrName
argument_list|(
name|LINE_HEIGHT
argument_list|,
name|LINE_HEIGHT_NORMAL
argument_list|)
return|;
block|}
comment|/**      * Sets the element’s preferred height in the block-progression direction      * (LineHeight) to {@link #LINE_HEIGHT_NORMAL}.      */
specifier|public
name|void
name|setLineHeightNormal
parameter_list|()
block|{
name|this
operator|.
name|setName
argument_list|(
name|LINE_HEIGHT
argument_list|,
name|LINE_HEIGHT_NORMAL
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the element’s preferred height in the block-progression direction      * (LineHeight) to {@link #LINE_HEIGHT_AUTO}.      */
specifier|public
name|void
name|setLineHeightAuto
parameter_list|()
block|{
name|this
operator|.
name|setName
argument_list|(
name|LINE_HEIGHT
argument_list|,
name|LINE_HEIGHT_AUTO
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the element’s preferred height in the block-progression direction      * (LineHeight).      *       * @param lineHeight the line height      */
specifier|public
name|void
name|setLineHeight
parameter_list|(
name|float
name|lineHeight
parameter_list|)
block|{
name|this
operator|.
name|setNumber
argument_list|(
name|LINE_HEIGHT
argument_list|,
name|lineHeight
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the element’s preferred height in the block-progression direction      * (LineHeight).      *       * @param lineHeight the line height      */
specifier|public
name|void
name|setLineHeight
parameter_list|(
name|int
name|lineHeight
parameter_list|)
block|{
name|this
operator|.
name|setNumber
argument_list|(
name|LINE_HEIGHT
argument_list|,
name|lineHeight
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the colour to be used for drawing text decorations      * (TextDecorationColor).      *       * @return the text decoration colour      */
specifier|public
name|PDGamma
name|getTextDecorationColor
parameter_list|()
block|{
return|return
name|this
operator|.
name|getColor
argument_list|(
name|TEXT_DECORATION_COLOR
argument_list|)
return|;
block|}
comment|/**      * Sets the colour to be used for drawing text decorations      * (TextDecorationColor).      *       * @param textDecorationColor the text decoration colour      */
specifier|public
name|void
name|setTextDecorationColor
parameter_list|(
name|PDGamma
name|textDecorationColor
parameter_list|)
block|{
name|this
operator|.
name|setColor
argument_list|(
name|TEXT_DECORATION_COLOR
argument_list|,
name|textDecorationColor
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the thickness of each line drawn as part of the text decoration      * (TextDecorationThickness).      *       * @return the text decoration thickness      */
specifier|public
name|float
name|getTextDecorationThickness
parameter_list|()
block|{
return|return
name|this
operator|.
name|getNumber
argument_list|(
name|TEXT_DECORATION_THICKNESS
argument_list|)
return|;
block|}
comment|/**      * Sets the thickness of each line drawn as part of the text decoration      * (TextDecorationThickness).      *       * @param textDecorationThickness the text decoration thickness      */
specifier|public
name|void
name|setTextDecorationThickness
parameter_list|(
name|float
name|textDecorationThickness
parameter_list|)
block|{
name|this
operator|.
name|setNumber
argument_list|(
name|TEXT_DECORATION_THICKNESS
argument_list|,
name|textDecorationThickness
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the thickness of each line drawn as part of the text decoration      * (TextDecorationThickness).      *       * @param textDecorationThickness the text decoration thickness      */
specifier|public
name|void
name|setTextDecorationThickness
parameter_list|(
name|int
name|textDecorationThickness
parameter_list|)
block|{
name|this
operator|.
name|setNumber
argument_list|(
name|TEXT_DECORATION_THICKNESS
argument_list|,
name|textDecorationThickness
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the type of text decoration (TextDecorationType). The default value      * is {@link #TEXT_DECORATION_TYPE_NONE}.      *       * @return the type of text decoration      */
specifier|public
name|String
name|getTextDecorationType
parameter_list|()
block|{
return|return
name|this
operator|.
name|getName
argument_list|(
name|TEXT_DECORATION_TYPE
argument_list|,
name|TEXT_DECORATION_TYPE_NONE
argument_list|)
return|;
block|}
comment|/**      * Sets the type of text decoration (TextDecorationType). The value should      * be one of:      *<ul>      *<li>{@link #TEXT_DECORATION_TYPE_NONE},</li>      *<li>{@link #TEXT_DECORATION_TYPE_UNDERLINE},</li>      *<li>{@link #TEXT_DECORATION_TYPE_OVERLINE},</li>      *<li>{@link #TEXT_DECORATION_TYPE_LINE_THROUGH}.</li>      *</ul>      *       * @param textDecorationType the type of text decoration      */
specifier|public
name|void
name|setTextDecorationType
parameter_list|(
name|String
name|textDecorationType
parameter_list|)
block|{
name|this
operator|.
name|setName
argument_list|(
name|TEXT_DECORATION_TYPE
argument_list|,
name|textDecorationType
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the justification of the lines within a ruby assembly (RubyAlign).      * The default value is {@link #RUBY_ALIGN_DISTRIBUTE}.      *       * @return the ruby alignment      */
specifier|public
name|String
name|getRubyAlign
parameter_list|()
block|{
return|return
name|this
operator|.
name|getName
argument_list|(
name|RUBY_ALIGN
argument_list|,
name|RUBY_ALIGN_DISTRIBUTE
argument_list|)
return|;
block|}
comment|/**      * Sets the justification of the lines within a ruby assembly (RubyAlign).      * The value should be one of:      *<ul>      *<li>{@link #RUBY_ALIGN_START},</li>      *<li>{@link #RUBY_ALIGN_CENTER},</li>      *<li>{@link #RUBY_ALIGN_END},</li>      *<li>{@link #RUBY_ALIGN_JUSTIFY},</li>      *<li>{@link #RUBY_ALIGN_DISTRIBUTE},</li>      *</ul>      *       * @param rubyAlign the ruby alignment      */
specifier|public
name|void
name|setRubyAlign
parameter_list|(
name|String
name|rubyAlign
parameter_list|)
block|{
name|this
operator|.
name|setName
argument_list|(
name|RUBY_ALIGN
argument_list|,
name|rubyAlign
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the placement of the RT structure element relative to the RB element      * in a ruby assembly (RubyPosition). The default value is      * {@link #RUBY_POSITION_BEFORE}.      *       * @return the ruby position      */
specifier|public
name|String
name|getRubyPosition
parameter_list|()
block|{
return|return
name|this
operator|.
name|getName
argument_list|(
name|RUBY_POSITION
argument_list|,
name|RUBY_POSITION_BEFORE
argument_list|)
return|;
block|}
comment|/**      * Sets the placement of the RT structure element relative to the RB element      * in a ruby assembly (RubyPosition). The value should be one of:      *<ul>      *<li>{@link #RUBY_POSITION_BEFORE},</li>      *<li>{@link #RUBY_POSITION_AFTER},</li>      *<li>{@link #RUBY_POSITION_WARICHU},</li>      *<li>{@link #RUBY_POSITION_INLINE}.</li>      *</ul>      *       * @param rubyPosition the ruby position      */
specifier|public
name|void
name|setRubyPosition
parameter_list|(
name|String
name|rubyPosition
parameter_list|)
block|{
name|this
operator|.
name|setName
argument_list|(
name|RUBY_POSITION
argument_list|,
name|rubyPosition
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the orientation of glyphs when the inline-progression direction is      * top to bottom or bottom to top (GlyphOrientationVertical). The default      * value is {@link #GLYPH_ORIENTATION_VERTICAL_AUTO}.      *       * @return the vertical glyph orientation      */
specifier|public
name|String
name|getGlyphOrientationVertical
parameter_list|()
block|{
return|return
name|this
operator|.
name|getName
argument_list|(
name|GLYPH_ORIENTATION_VERTICAL
argument_list|,
name|GLYPH_ORIENTATION_VERTICAL_AUTO
argument_list|)
return|;
block|}
comment|/**      * Sets the orientation of glyphs when the inline-progression direction is      * top to bottom or bottom to top (GlyphOrientationVertical). The value      * should be one of:      *<ul>      *<li>{@link #GLYPH_ORIENTATION_VERTICAL_AUTO},</li>      *<li>{@link #GLYPH_ORIENTATION_VERTICAL_MINUS_180_DEGREES},</li>      *<li>{@link #GLYPH_ORIENTATION_VERTICAL_MINUS_90_DEGREES},</li>      *<li>{@link #GLYPH_ORIENTATION_VERTICAL_ZERO_DEGREES},</li>      *<li>{@link #GLYPH_ORIENTATION_VERTICAL_90_DEGREES},</li>      *<li>{@link #GLYPH_ORIENTATION_VERTICAL_180_DEGREES},</li>      *<li>{@link #GLYPH_ORIENTATION_VERTICAL_270_DEGREES},</li>      *<li>{@link #GLYPH_ORIENTATION_VERTICAL_360_DEGREES}.</li>      *</ul>      *       * @param glyphOrientationVertical the vertical glyph orientation      */
specifier|public
name|void
name|setGlyphOrientationVertical
parameter_list|(
name|String
name|glyphOrientationVertical
parameter_list|)
block|{
name|this
operator|.
name|setName
argument_list|(
name|GLYPH_ORIENTATION_VERTICAL
argument_list|,
name|glyphOrientationVertical
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the number of columns in the content of the grouping element      * (ColumnCount). The default value is 1.      *       * @return the column count      */
specifier|public
name|int
name|getColumnCount
parameter_list|()
block|{
return|return
name|this
operator|.
name|getInteger
argument_list|(
name|COLUMN_COUNT
argument_list|,
literal|1
argument_list|)
return|;
block|}
comment|/**      * Sets the number of columns in the content of the grouping element      * (ColumnCount).      *       * @param columnCount the column count      */
specifier|public
name|void
name|setColumnCount
parameter_list|(
name|int
name|columnCount
parameter_list|)
block|{
name|this
operator|.
name|setInteger
argument_list|(
name|COLUMN_COUNT
argument_list|,
name|columnCount
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the desired space between adjacent columns in the inline-progression      * direction (ColumnGap).      *       * @return the column gap (FLoat or array of floats)      */
specifier|public
name|Object
name|getColumnGap
parameter_list|()
block|{
return|return
name|this
operator|.
name|getNumberOrArrayOfNumber
argument_list|(
name|COLUMN_GAP
argument_list|,
name|UNSPECIFIED
argument_list|)
return|;
block|}
comment|/**      * Sets the desired space between all columns in the inline-progression      * direction (ColumnGap).      *       * @param columnGap the column gap      */
specifier|public
name|void
name|setColumnGap
parameter_list|(
name|float
name|columnGap
parameter_list|)
block|{
name|this
operator|.
name|setNumber
argument_list|(
name|COLUMN_GAP
argument_list|,
name|columnGap
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the desired space between all columns in the inline-progression      * direction (ColumnGap).      *       * @param columnGap the column gap      */
specifier|public
name|void
name|setColumnGap
parameter_list|(
name|int
name|columnGap
parameter_list|)
block|{
name|this
operator|.
name|setNumber
argument_list|(
name|COLUMN_GAP
argument_list|,
name|columnGap
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the desired space between adjacent columns in the inline-progression      * direction (ColumnGap), the first element specifying the space between the      * first and second columns, the second specifying the space between the      * second and third columns, and so on.      *       * @param columnGaps the column gaps      */
specifier|public
name|void
name|setColumnGaps
parameter_list|(
name|float
index|[]
name|columnGaps
parameter_list|)
block|{
name|this
operator|.
name|setArrayOfNumber
argument_list|(
name|COLUMN_GAP
argument_list|,
name|columnGaps
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the desired width of the columns, measured in default user space      * units in the inline-progression direction (ColumnWidths).      *       * @return the column widths (Float or array of floats)      */
specifier|public
name|Object
name|getColumnWidths
parameter_list|()
block|{
return|return
name|this
operator|.
name|getNumberOrArrayOfNumber
argument_list|(
name|COLUMN_WIDTHS
argument_list|,
name|UNSPECIFIED
argument_list|)
return|;
block|}
comment|/**      * Sets the same column width for all columns (ColumnWidths).      *       * @param columnWidth the column width      */
specifier|public
name|void
name|setAllColumnWidths
parameter_list|(
name|float
name|columnWidth
parameter_list|)
block|{
name|this
operator|.
name|setNumber
argument_list|(
name|COLUMN_WIDTHS
argument_list|,
name|columnWidth
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the same column width for all columns (ColumnWidths).      *       * @param columnWidth the column width      */
specifier|public
name|void
name|setAllColumnWidths
parameter_list|(
name|int
name|columnWidth
parameter_list|)
block|{
name|this
operator|.
name|setNumber
argument_list|(
name|COLUMN_WIDTHS
argument_list|,
name|columnWidth
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the column widths for the columns separately (ColumnWidths).      *       * @param columnWidths the column widths      */
specifier|public
name|void
name|setColumnWidths
parameter_list|(
name|float
index|[]
name|columnWidths
parameter_list|)
block|{
name|this
operator|.
name|setArrayOfNumber
argument_list|(
name|COLUMN_WIDTHS
argument_list|,
name|columnWidths
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|super
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|isSpecified
argument_list|(
name|PLACEMENT
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", Placement="
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|getPlacement
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|isSpecified
argument_list|(
name|WRITING_MODE
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", WritingMode="
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|getWritingMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|isSpecified
argument_list|(
name|BACKGROUND_COLOR
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", BackgroundColor="
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|getBackgroundColor
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|isSpecified
argument_list|(
name|BORDER_COLOR
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", BorderColor="
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|getBorderColors
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|isSpecified
argument_list|(
name|BORDER_STYLE
argument_list|)
condition|)
block|{
name|Object
name|borderStyle
init|=
name|this
operator|.
name|getBorderStyle
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", BorderStyle="
argument_list|)
expr_stmt|;
if|if
condition|(
name|borderStyle
operator|instanceof
name|String
index|[]
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|arrayToString
argument_list|(
operator|(
name|String
index|[]
operator|)
name|borderStyle
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|borderStyle
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|this
operator|.
name|isSpecified
argument_list|(
name|BORDER_THICKNESS
argument_list|)
condition|)
block|{
name|Object
name|borderThickness
init|=
name|this
operator|.
name|getBorderThickness
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", BorderThickness="
argument_list|)
expr_stmt|;
if|if
condition|(
name|borderThickness
operator|instanceof
name|float
index|[]
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|arrayToString
argument_list|(
operator|(
name|float
index|[]
operator|)
name|borderThickness
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
operator|(
name|Float
operator|)
name|borderThickness
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|this
operator|.
name|isSpecified
argument_list|(
name|PADDING
argument_list|)
condition|)
block|{
name|Object
name|padding
init|=
name|this
operator|.
name|getPadding
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", Padding="
argument_list|)
expr_stmt|;
if|if
condition|(
name|padding
operator|instanceof
name|float
index|[]
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|arrayToString
argument_list|(
operator|(
name|float
index|[]
operator|)
name|padding
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
operator|(
name|Float
operator|)
name|padding
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|this
operator|.
name|isSpecified
argument_list|(
name|COLOR
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", Color="
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|isSpecified
argument_list|(
name|SPACE_BEFORE
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", SpaceBefore="
argument_list|)
operator|.
name|append
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|getSpaceBefore
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|isSpecified
argument_list|(
name|SPACE_AFTER
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", SpaceAfter="
argument_list|)
operator|.
name|append
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|getSpaceAfter
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|isSpecified
argument_list|(
name|START_INDENT
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", StartIndent="
argument_list|)
operator|.
name|append
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|getStartIndent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|isSpecified
argument_list|(
name|END_INDENT
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", EndIndent="
argument_list|)
operator|.
name|append
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|getEndIndent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|isSpecified
argument_list|(
name|TEXT_INDENT
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", TextIndent="
argument_list|)
operator|.
name|append
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|getTextIndent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|isSpecified
argument_list|(
name|TEXT_ALIGN
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", TextAlign="
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|getTextAlign
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|isSpecified
argument_list|(
name|BBOX
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", BBox="
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|getBBox
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|isSpecified
argument_list|(
name|WIDTH
argument_list|)
condition|)
block|{
name|Object
name|width
init|=
name|this
operator|.
name|getWidth
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", Width="
argument_list|)
expr_stmt|;
if|if
condition|(
name|width
operator|instanceof
name|Float
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
operator|(
name|Float
operator|)
name|width
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|width
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|this
operator|.
name|isSpecified
argument_list|(
name|HEIGHT
argument_list|)
condition|)
block|{
name|Object
name|height
init|=
name|this
operator|.
name|getHeight
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", Height="
argument_list|)
expr_stmt|;
if|if
condition|(
name|height
operator|instanceof
name|Float
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
operator|(
name|Float
operator|)
name|height
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|height
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|this
operator|.
name|isSpecified
argument_list|(
name|BLOCK_ALIGN
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", BlockAlign="
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|getBlockAlign
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|isSpecified
argument_list|(
name|INLINE_ALIGN
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", InlineAlign="
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|getInlineAlign
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|isSpecified
argument_list|(
name|T_BORDER_STYLE
argument_list|)
condition|)
block|{
name|Object
name|tBorderStyle
init|=
name|this
operator|.
name|getTBorderStyle
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", TBorderStyle="
argument_list|)
expr_stmt|;
if|if
condition|(
name|tBorderStyle
operator|instanceof
name|String
index|[]
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|arrayToString
argument_list|(
operator|(
name|String
index|[]
operator|)
name|tBorderStyle
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|tBorderStyle
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|this
operator|.
name|isSpecified
argument_list|(
name|T_PADDING
argument_list|)
condition|)
block|{
name|Object
name|tPadding
init|=
name|this
operator|.
name|getTPadding
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", TPadding="
argument_list|)
expr_stmt|;
if|if
condition|(
name|tPadding
operator|instanceof
name|float
index|[]
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|arrayToString
argument_list|(
operator|(
name|float
index|[]
operator|)
name|tPadding
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
operator|(
name|Float
operator|)
name|tPadding
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|this
operator|.
name|isSpecified
argument_list|(
name|BASELINE_SHIFT
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", BaselineShift="
argument_list|)
operator|.
name|append
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|getBaselineShift
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|isSpecified
argument_list|(
name|LINE_HEIGHT
argument_list|)
condition|)
block|{
name|Object
name|lineHeight
init|=
name|this
operator|.
name|getLineHeight
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", LineHeight="
argument_list|)
expr_stmt|;
if|if
condition|(
name|lineHeight
operator|instanceof
name|Float
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
operator|(
name|Float
operator|)
name|lineHeight
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|lineHeight
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|this
operator|.
name|isSpecified
argument_list|(
name|TEXT_DECORATION_COLOR
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", TextDecorationColor="
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|getTextDecorationColor
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|isSpecified
argument_list|(
name|TEXT_DECORATION_THICKNESS
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", TextDecorationThickness="
argument_list|)
operator|.
name|append
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|getTextDecorationThickness
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|isSpecified
argument_list|(
name|TEXT_DECORATION_TYPE
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", TextDecorationType="
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|getTextDecorationType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|isSpecified
argument_list|(
name|RUBY_ALIGN
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", RubyAlign="
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|getRubyAlign
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|isSpecified
argument_list|(
name|RUBY_POSITION
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", RubyPosition="
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|getRubyPosition
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|isSpecified
argument_list|(
name|GLYPH_ORIENTATION_VERTICAL
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", GlyphOrientationVertical="
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|getGlyphOrientationVertical
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|isSpecified
argument_list|(
name|COLUMN_COUNT
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", ColumnCount="
argument_list|)
operator|.
name|append
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|getColumnCount
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|isSpecified
argument_list|(
name|COLUMN_GAP
argument_list|)
condition|)
block|{
name|Object
name|columnGap
init|=
name|this
operator|.
name|getColumnGap
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", ColumnGap="
argument_list|)
expr_stmt|;
if|if
condition|(
name|columnGap
operator|instanceof
name|float
index|[]
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|arrayToString
argument_list|(
operator|(
name|float
index|[]
operator|)
name|columnGap
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
operator|(
name|Float
operator|)
name|columnGap
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|this
operator|.
name|isSpecified
argument_list|(
name|COLUMN_WIDTHS
argument_list|)
condition|)
block|{
name|Object
name|columnWidth
init|=
name|this
operator|.
name|getColumnWidths
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", ColumnWidths="
argument_list|)
expr_stmt|;
if|if
condition|(
name|columnWidth
operator|instanceof
name|float
index|[]
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|arrayToString
argument_list|(
operator|(
name|float
index|[]
operator|)
name|columnWidth
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
operator|(
name|Float
operator|)
name|columnWidth
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

