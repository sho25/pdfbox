begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|image
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDColorSpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDDeviceCMYK
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDDeviceGray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDDeviceRGB
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|color
operator|.
name|ColorSpace
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|color
operator|.
name|ICC_ColorSpace
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|BufferedImage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|ColorConvertOp
import|;
end_import

begin_comment
comment|/**  * An image factory.  *  * @author John Hewson  * @author Brigitte Mathiak  */
end_comment

begin_class
class|class
name|ImageFactory
block|{
specifier|protected
name|ImageFactory
parameter_list|()
block|{     }
comment|// sets Image XObject properties from an AWT buffered image
specifier|protected
specifier|static
name|void
name|setPropertiesFromAWT
parameter_list|(
name|BufferedImage
name|awtImage
parameter_list|,
name|PDImageXObject
name|pdImage
parameter_list|)
block|{
if|if
condition|(
name|awtImage
operator|.
name|getColorModel
argument_list|()
operator|.
name|getNumComponents
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// 256 color (gray) JPEG
name|pdImage
operator|.
name|setColorSpace
argument_list|(
name|PDDeviceGray
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pdImage
operator|.
name|setColorSpace
argument_list|(
name|toPDColorSpace
argument_list|(
name|awtImage
operator|.
name|getColorModel
argument_list|()
operator|.
name|getColorSpace
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|pdImage
operator|.
name|setBitsPerComponent
argument_list|(
name|awtImage
operator|.
name|getColorModel
argument_list|()
operator|.
name|getComponentSize
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|pdImage
operator|.
name|setHeight
argument_list|(
name|awtImage
operator|.
name|getHeight
argument_list|()
argument_list|)
expr_stmt|;
name|pdImage
operator|.
name|setWidth
argument_list|(
name|awtImage
operator|.
name|getWidth
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// returns a PDColorSpace for a given AWT ColorSpace
specifier|protected
specifier|static
name|PDColorSpace
name|toPDColorSpace
parameter_list|(
name|ColorSpace
name|awtColorSpace
parameter_list|)
block|{
if|if
condition|(
name|awtColorSpace
operator|instanceof
name|ICC_ColorSpace
operator|&&
operator|!
name|awtColorSpace
operator|.
name|isCS_sRGB
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"ICC color spaces not implemented"
argument_list|)
throw|;
block|}
else|else
block|{
switch|switch
condition|(
name|awtColorSpace
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|ColorSpace
operator|.
name|TYPE_RGB
case|:
return|return
name|PDDeviceRGB
operator|.
name|INSTANCE
return|;
case|case
name|ColorSpace
operator|.
name|TYPE_GRAY
case|:
return|return
name|PDDeviceGray
operator|.
name|INSTANCE
return|;
case|case
name|ColorSpace
operator|.
name|TYPE_CMYK
case|:
return|return
name|PDDeviceCMYK
operator|.
name|INSTANCE
return|;
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"color space not implemented: "
operator|+
name|awtColorSpace
operator|.
name|getType
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
comment|// returns the color channels of an image
specifier|protected
specifier|static
name|BufferedImage
name|getColorImage
parameter_list|(
name|BufferedImage
name|image
parameter_list|)
block|{
if|if
condition|(
operator|!
name|image
operator|.
name|getColorModel
argument_list|()
operator|.
name|hasAlpha
argument_list|()
condition|)
block|{
return|return
name|image
return|;
block|}
if|if
condition|(
name|image
operator|.
name|getColorModel
argument_list|()
operator|.
name|getColorSpace
argument_list|()
operator|.
name|getType
argument_list|()
operator|!=
name|ColorSpace
operator|.
name|TYPE_RGB
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"only RGB color spaces are implemented"
argument_list|)
throw|;
block|}
comment|// create an RGB image without alpha
comment|//BEWARE: the previous solution in the history
comment|// g.setComposite(AlphaComposite.Src) and g.drawImage()
comment|// didn't work properly for TYPE_4BYTE_ABGR.
comment|// alpha values of 0 result in a black dest pixel!!!
name|BufferedImage
name|rgbImage
init|=
operator|new
name|BufferedImage
argument_list|(
name|image
operator|.
name|getWidth
argument_list|()
argument_list|,
name|image
operator|.
name|getHeight
argument_list|()
argument_list|,
name|BufferedImage
operator|.
name|TYPE_3BYTE_BGR
argument_list|)
decl_stmt|;
return|return
operator|new
name|ColorConvertOp
argument_list|(
literal|null
argument_list|)
operator|.
name|filter
argument_list|(
name|image
argument_list|,
name|rgbImage
argument_list|)
return|;
block|}
block|}
end_class

end_unit

