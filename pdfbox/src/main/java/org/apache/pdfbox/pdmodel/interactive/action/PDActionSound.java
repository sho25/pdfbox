begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|action
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSNumber
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSStream
import|;
end_import

begin_comment
comment|/**  * This represents a Sound action that can be executed in a PDF document.  *  * @author Timur Kamalov  * @author Tilman Hausherr  */
end_comment

begin_class
specifier|public
class|class
name|PDActionSound
extends|extends
name|PDAction
block|{
comment|/**      * This type of action this object represents.      */
specifier|public
specifier|static
specifier|final
name|String
name|SUB_TYPE
init|=
literal|"Sound"
decl_stmt|;
comment|/**      * Default constructor.      */
specifier|public
name|PDActionSound
parameter_list|()
block|{
name|action
operator|=
operator|new
name|COSDictionary
argument_list|()
expr_stmt|;
name|setSubType
argument_list|(
name|SUB_TYPE
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor.      *      * @param a The action dictionary.      */
specifier|public
name|PDActionSound
parameter_list|(
name|COSDictionary
name|a
parameter_list|)
block|{
name|super
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the sound object.      *       * @param sound the sound object defining the sound that shall be played.      */
specifier|public
name|void
name|setSound
parameter_list|(
name|COSStream
name|sound
parameter_list|)
block|{
name|action
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|SOUND
argument_list|,
name|sound
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the sound object.      *       * @return The sound object defining the sound that shall be played.      */
specifier|public
name|COSStream
name|getSound
parameter_list|()
block|{
name|COSBase
name|base
init|=
name|action
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|SOUND
argument_list|)
decl_stmt|;
if|if
condition|(
name|base
operator|instanceof
name|COSStream
condition|)
block|{
return|return
operator|(
name|COSStream
operator|)
name|base
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Gets the volume at which to play the sound, in the range −1.0 to 1.0.      *      * @param volume The volume at which to play the sound, in the range −1.0 to 1.0.      *       * @throws IllegalArgumentException if the volume parameter is outside of the range −1.0 to 1.0.      */
specifier|public
name|void
name|setVolume
parameter_list|(
name|float
name|volume
parameter_list|)
block|{
if|if
condition|(
name|volume
argument_list|<
operator|-
literal|1
operator|||
name|volume
argument_list|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"volume outside of the range −1.0 to 1.0"
argument_list|)
throw|;
block|}
name|action
operator|.
name|setFloat
argument_list|(
name|COSName
operator|.
name|VOLUME
argument_list|,
name|volume
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the volume.      *      * @return The volume at which to play the sound, in the range −1.0 to 1.0. Default value: 1.0.      */
specifier|public
name|float
name|getVolume
parameter_list|()
block|{
name|COSBase
name|base
init|=
name|action
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|VOLUME
argument_list|)
decl_stmt|;
if|if
condition|(
name|base
operator|instanceof
name|COSNumber
condition|)
block|{
name|float
name|volume
init|=
operator|(
operator|(
name|COSNumber
operator|)
name|base
operator|)
operator|.
name|floatValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|volume
argument_list|<
operator|-
literal|1
operator|||
name|volume
argument_list|>
literal|1
condition|)
block|{
name|volume
operator|=
literal|1
expr_stmt|;
block|}
return|return
name|volume
return|;
block|}
return|return
literal|1
return|;
block|}
comment|/**      * A flag specifying whether to play the sound synchronously or asynchronously. When true, the      * reader allows no further user interaction other than canceling the sound until the sound has      * been completely played.      *      * @param synchronous Whether to play the sound synchronously (true) or asynchronously (false).      */
specifier|public
name|void
name|setSynchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|action
operator|.
name|setBoolean
argument_list|(
name|COSName
operator|.
name|SYNCHRONOUS
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the synchronous flag. It specifyes whether to play the sound synchronously or      * asynchronously. When true, the reader allows no further user interaction other than canceling      * the sound until the sound has been completely played.      *      * @return Whether to play the sound synchronously (true) or asynchronously (false, also the      * default).      */
specifier|public
name|boolean
name|getSynchronous
parameter_list|()
block|{
name|COSBase
name|base
init|=
name|action
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|SYNCHRONOUS
argument_list|)
decl_stmt|;
if|if
condition|(
name|base
operator|instanceof
name|COSBoolean
condition|)
block|{
return|return
operator|(
operator|(
name|COSBoolean
operator|)
name|base
operator|)
operator|.
name|getValue
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * A flag specifying whether to repeat the sound indefinitely.      *      * @param repeat Whether to repeat the sound indefinitely.      */
specifier|public
name|void
name|setRepeat
parameter_list|(
name|boolean
name|repeat
parameter_list|)
block|{
name|action
operator|.
name|setBoolean
argument_list|(
name|COSName
operator|.
name|REPEAT
argument_list|,
name|repeat
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets whether to repeat the sound indefinitely.      *      * @return Whether to repeat the sound indefinitely (default: false).      */
specifier|public
name|boolean
name|getRepeat
parameter_list|()
block|{
name|COSBase
name|base
init|=
name|action
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|REPEAT
argument_list|)
decl_stmt|;
if|if
condition|(
name|base
operator|instanceof
name|COSBoolean
condition|)
block|{
return|return
operator|(
operator|(
name|COSBoolean
operator|)
name|base
operator|)
operator|.
name|getValue
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * The flag specifying whether to mix this sound with any other sound already playing. If this      * flag is false, any previously playing sound shall be stopped before starting this sound; this      * can be used to stop a repeating sound (see Repeat). Default value: false.      *      * @param mix whether to mix this sound with any other sound already playing.      * (false).      */
specifier|public
name|void
name|setMix
parameter_list|(
name|boolean
name|mix
parameter_list|)
block|{
name|action
operator|.
name|setBoolean
argument_list|(
name|COSName
operator|.
name|MIX
argument_list|,
name|mix
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the flag specifying whether to mix this sound with any other sound already playing. If      * this flag is false, any previously playing sound shall be stopped before starting this sound;      * this can be used to stop a repeating sound (see Repeat).      *      * @return whether to mix this sound with any other sound already playing (default: false).      */
specifier|public
name|boolean
name|getMix
parameter_list|()
block|{
name|COSBase
name|base
init|=
name|action
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|MIX
argument_list|)
decl_stmt|;
if|if
condition|(
name|base
operator|instanceof
name|COSBoolean
condition|)
block|{
return|return
operator|(
operator|(
name|COSBoolean
operator|)
name|base
operator|)
operator|.
name|getValue
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

