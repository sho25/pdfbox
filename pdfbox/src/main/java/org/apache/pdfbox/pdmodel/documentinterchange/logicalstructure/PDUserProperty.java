begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|documentinterchange
operator|.
name|logicalstructure
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDDictionaryWrapper
import|;
end_import

begin_comment
comment|/**  * A user property.  *   * @author Johannes Koch  */
end_comment

begin_class
specifier|public
class|class
name|PDUserProperty
extends|extends
name|PDDictionaryWrapper
block|{
specifier|private
specifier|final
name|PDUserAttributeObject
name|userAttributeObject
decl_stmt|;
comment|/**      * Creates a new user property.      *       * @param userAttributeObject the user attribute object      */
specifier|public
name|PDUserProperty
parameter_list|(
name|PDUserAttributeObject
name|userAttributeObject
parameter_list|)
block|{
name|this
operator|.
name|userAttributeObject
operator|=
name|userAttributeObject
expr_stmt|;
block|}
comment|/**      * Creates a user property with a given dictionary.      *       * @param dictionary the dictionary      * @param userAttributeObject the user attribute object      */
specifier|public
name|PDUserProperty
parameter_list|(
name|COSDictionary
name|dictionary
parameter_list|,
name|PDUserAttributeObject
name|userAttributeObject
parameter_list|)
block|{
name|super
argument_list|(
name|dictionary
argument_list|)
expr_stmt|;
name|this
operator|.
name|userAttributeObject
operator|=
name|userAttributeObject
expr_stmt|;
block|}
comment|/**      * Returns the property name.      *       * @return the property name      */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|this
operator|.
name|getCOSObject
argument_list|()
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|N
argument_list|)
return|;
block|}
comment|/**      * Sets the property name.      *       * @param name the property name      */
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|potentiallyNotifyChanged
argument_list|(
name|this
operator|.
name|getName
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|getCOSObject
argument_list|()
operator|.
name|setName
argument_list|(
name|COSName
operator|.
name|N
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the property value.      *       * @return the property value      */
specifier|public
name|COSBase
name|getValue
parameter_list|()
block|{
return|return
name|this
operator|.
name|getCOSObject
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|V
argument_list|)
return|;
block|}
comment|/**      * Sets the property value.      *       * @param value the property value      */
specifier|public
name|void
name|setValue
parameter_list|(
name|COSBase
name|value
parameter_list|)
block|{
name|this
operator|.
name|potentiallyNotifyChanged
argument_list|(
name|this
operator|.
name|getValue
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|this
operator|.
name|getCOSObject
argument_list|()
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|V
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the string for the property value.      *       * @return the string for the property value      */
specifier|public
name|String
name|getFormattedValue
parameter_list|()
block|{
return|return
name|this
operator|.
name|getCOSObject
argument_list|()
operator|.
name|getString
argument_list|(
name|COSName
operator|.
name|F
argument_list|)
return|;
block|}
comment|/**      * Sets the string for the property value.      *       * @param formattedValue the string for the property value      */
specifier|public
name|void
name|setFormattedValue
parameter_list|(
name|String
name|formattedValue
parameter_list|)
block|{
name|this
operator|.
name|potentiallyNotifyChanged
argument_list|(
name|this
operator|.
name|getFormattedValue
argument_list|()
argument_list|,
name|formattedValue
argument_list|)
expr_stmt|;
name|this
operator|.
name|getCOSObject
argument_list|()
operator|.
name|setString
argument_list|(
name|COSName
operator|.
name|F
argument_list|,
name|formattedValue
argument_list|)
expr_stmt|;
block|}
comment|/**      * Shall the property be hidden?      *       * @return<code>true</code> if the property shall be hidden,      *<code>false</code> otherwise      */
specifier|public
name|boolean
name|isHidden
parameter_list|()
block|{
return|return
name|this
operator|.
name|getCOSObject
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|COSName
operator|.
name|H
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Specifies whether the property shall be hidden.      *       * @param hidden<code>true</code> if the property shall be hidden,      *<code>false</code> otherwise      */
specifier|public
name|void
name|setHidden
parameter_list|(
name|boolean
name|hidden
parameter_list|)
block|{
name|this
operator|.
name|potentiallyNotifyChanged
argument_list|(
name|this
operator|.
name|isHidden
argument_list|()
argument_list|,
name|hidden
argument_list|)
expr_stmt|;
name|this
operator|.
name|getCOSObject
argument_list|()
operator|.
name|setBoolean
argument_list|(
name|COSName
operator|.
name|H
argument_list|,
name|hidden
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|new
name|StringBuilder
argument_list|(
literal|"Name="
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", Value="
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", FormattedValue="
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|getFormattedValue
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", Hidden="
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|isHidden
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Notifies the user attribute object if the user property is changed.      *       * @param oldEntry old entry      * @param newEntry new entry      */
specifier|private
name|void
name|potentiallyNotifyChanged
parameter_list|(
name|Object
name|oldEntry
parameter_list|,
name|Object
name|newEntry
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|isEntryChanged
argument_list|(
name|oldEntry
argument_list|,
name|newEntry
argument_list|)
condition|)
block|{
name|this
operator|.
name|userAttributeObject
operator|.
name|userPropertyChanged
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Is the value changed?      *       * @param oldEntry old entry      * @param newEntry new entry      * @return<code>true</code> if the entry is changed,<code>false</code>      * otherwise      */
specifier|private
name|boolean
name|isEntryChanged
parameter_list|(
name|Object
name|oldEntry
parameter_list|,
name|Object
name|newEntry
parameter_list|)
block|{
if|if
condition|(
name|oldEntry
operator|==
literal|null
condition|)
block|{
return|return
name|newEntry
operator|!=
literal|null
return|;
block|}
return|return
operator|!
name|oldEntry
operator|.
name|equals
argument_list|(
name|newEntry
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
name|super
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|userAttributeObject
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|userAttributeObject
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
name|super
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|PDUserProperty
name|other
init|=
operator|(
name|PDUserProperty
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|userAttributeObject
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|userAttributeObject
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|userAttributeObject
operator|.
name|equals
argument_list|(
name|other
operator|.
name|userAttributeObject
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

