begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|form
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|contentstream
operator|.
name|operator
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSNumber
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdfparser
operator|.
name|PDFStreamParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDColor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDColorSpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDDeviceColorSpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDDeviceRGB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAppearanceContentStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAppearanceStream
import|;
end_import

begin_comment
comment|/**  * Represents a default appearance string, as found in the /DA entry of free text annotations.  *   *<p>The default appearance string (DA) contains any graphics state or text state operators needed  * to establish the graphics state parameters, such as text size and colour, for displaying the  * fieldâ€™s variable text. Only operators that are allowed within text objects shall occur in this  * string.  *   * Note: This class is not yet public, as its API is still unstable.  */
end_comment

begin_class
class|class
name|PDDefaultAppearanceString
block|{
comment|/**      * The default font size used by Acrobat.      */
specifier|private
specifier|static
specifier|final
name|float
name|DEFAULT_FONT_SIZE
init|=
literal|12
decl_stmt|;
specifier|private
specifier|final
name|PDResources
name|defaultResources
decl_stmt|;
specifier|private
name|COSName
name|fontName
decl_stmt|;
specifier|private
name|PDFont
name|font
decl_stmt|;
specifier|private
name|float
name|fontSize
init|=
name|DEFAULT_FONT_SIZE
decl_stmt|;
specifier|private
name|PDColor
name|fontColor
decl_stmt|;
comment|/**      * Constructor for reading an existing DA string.      *       * @param defaultResources DR entry      * @param defaultAppearance DA entry      * @throws IOException If the DA could not be parsed      */
name|PDDefaultAppearanceString
parameter_list|(
name|COSString
name|defaultAppearance
parameter_list|,
name|PDResources
name|defaultResources
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|defaultAppearance
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"/DA is a required entry"
argument_list|)
throw|;
block|}
if|if
condition|(
name|defaultResources
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"/DR is a required entry"
argument_list|)
throw|;
block|}
name|this
operator|.
name|defaultResources
operator|=
name|defaultResources
expr_stmt|;
name|processAppearanceStringOperators
argument_list|(
name|defaultAppearance
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Processes the operators of the given content stream.      *      * @param content the content to parse.      * @throws IOException if there is an error reading or parsing the content stream.      */
specifier|private
name|void
name|processAppearanceStringOperators
parameter_list|(
name|byte
index|[]
name|content
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|COSBase
argument_list|>
name|arguments
init|=
operator|new
name|ArrayList
argument_list|<
name|COSBase
argument_list|>
argument_list|()
decl_stmt|;
name|PDFStreamParser
name|parser
init|=
operator|new
name|PDFStreamParser
argument_list|(
name|content
argument_list|)
decl_stmt|;
name|Object
name|token
init|=
name|parser
operator|.
name|parseNextToken
argument_list|()
decl_stmt|;
while|while
condition|(
name|token
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|token
operator|instanceof
name|COSObject
condition|)
block|{
name|arguments
operator|.
name|add
argument_list|(
operator|(
operator|(
name|COSObject
operator|)
name|token
operator|)
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|instanceof
name|Operator
condition|)
block|{
name|processOperator
argument_list|(
operator|(
name|Operator
operator|)
name|token
argument_list|,
name|arguments
argument_list|)
expr_stmt|;
name|arguments
operator|=
operator|new
name|ArrayList
argument_list|<
name|COSBase
argument_list|>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|arguments
operator|.
name|add
argument_list|(
operator|(
name|COSBase
operator|)
name|token
argument_list|)
expr_stmt|;
block|}
name|token
operator|=
name|parser
operator|.
name|parseNextToken
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * This is used to handle an operation.      *       * @param operator The operation to perform.      * @param operands The list of arguments.      * @throws IOException If there is an error processing the operation.      */
specifier|private
name|void
name|processOperator
parameter_list|(
name|Operator
name|operator
parameter_list|,
name|List
argument_list|<
name|COSBase
argument_list|>
name|operands
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|name
init|=
name|operator
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"Tf"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|processSetFont
argument_list|(
name|operands
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"rg"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|processSetFontColor
argument_list|(
name|operands
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Process the set font and font size operator.      *       * @param operands the font name and size      * @throws IOException in case there are missing operators or the font is not within the resources      */
specifier|private
name|void
name|processSetFont
parameter_list|(
name|List
argument_list|<
name|COSBase
argument_list|>
name|operands
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|operands
operator|.
name|size
argument_list|()
operator|<
literal|2
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Missing operands for set font operator "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|operands
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|COSBase
name|base0
init|=
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|COSBase
name|base1
init|=
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|base0
operator|instanceof
name|COSName
operator|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
operator|(
name|base1
operator|instanceof
name|COSNumber
operator|)
condition|)
block|{
return|return;
block|}
name|COSName
name|fontName
init|=
operator|(
name|COSName
operator|)
name|base0
decl_stmt|;
name|PDFont
name|font
init|=
name|defaultResources
operator|.
name|getFont
argument_list|(
name|fontName
argument_list|)
decl_stmt|;
name|float
name|fontSize
init|=
operator|(
operator|(
name|COSNumber
operator|)
name|base1
operator|)
operator|.
name|floatValue
argument_list|()
decl_stmt|;
comment|// todo: handle cases where font == null with special mapping logic (see PDFBOX-2661)
if|if
condition|(
name|font
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not find font: /"
operator|+
name|fontName
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|setFontName
argument_list|(
name|fontName
argument_list|)
expr_stmt|;
name|setFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
name|setFontSize
argument_list|(
name|fontSize
argument_list|)
expr_stmt|;
block|}
comment|/**      * Process the font color operator.      *       * This is assumed to be an RGB color.      *       * @param operands the color components      * @throws IOException in case of the color components not matching      */
specifier|private
name|void
name|processSetFontColor
parameter_list|(
name|List
argument_list|<
name|COSBase
argument_list|>
name|operands
parameter_list|)
throws|throws
name|IOException
block|{
name|PDColorSpace
name|colorSpace
init|=
name|PDDeviceRGB
operator|.
name|INSTANCE
decl_stmt|;
if|if
condition|(
name|colorSpace
operator|instanceof
name|PDDeviceColorSpace
operator|&&
name|operands
operator|.
name|size
argument_list|()
operator|<
name|colorSpace
operator|.
name|getNumberOfComponents
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Missing operands for set non stroking color operator "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|operands
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|COSArray
name|array
init|=
operator|new
name|COSArray
argument_list|()
decl_stmt|;
name|array
operator|.
name|addAll
argument_list|(
name|operands
argument_list|)
expr_stmt|;
name|setFontColor
argument_list|(
operator|new
name|PDColor
argument_list|(
name|array
argument_list|,
name|colorSpace
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the font name      *       * @return the font name to use for resource lookup      */
name|COSName
name|getFontName
parameter_list|()
block|{
return|return
name|fontName
return|;
block|}
comment|/**      * Set the font name.      *       * @param fontName the font name to use for resource lookup      */
name|void
name|setFontName
parameter_list|(
name|COSName
name|fontName
parameter_list|)
block|{
name|this
operator|.
name|fontName
operator|=
name|fontName
expr_stmt|;
block|}
comment|/**      * Returns the font.      */
name|PDFont
name|getFont
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|font
return|;
block|}
comment|/**      * Set the font.      *       * @param font the font to use.      */
name|void
name|setFont
parameter_list|(
name|PDFont
name|font
parameter_list|)
block|{
name|this
operator|.
name|font
operator|=
name|font
expr_stmt|;
block|}
comment|/**      * Returns the font size.      */
specifier|public
name|float
name|getFontSize
parameter_list|()
block|{
return|return
name|fontSize
return|;
block|}
comment|/**      * Set the font size.      *       * @param fontSize the font size.      */
name|void
name|setFontSize
parameter_list|(
name|float
name|fontSize
parameter_list|)
block|{
name|this
operator|.
name|fontSize
operator|=
name|fontSize
expr_stmt|;
block|}
comment|/**      * Returns the font color      */
name|PDColor
name|getFontColor
parameter_list|()
block|{
return|return
name|fontColor
return|;
block|}
comment|/**      * Set the font color.      *       * @param fontColor the fontColor to use.      */
name|void
name|setFontColor
parameter_list|(
name|PDColor
name|fontColor
parameter_list|)
block|{
name|this
operator|.
name|fontColor
operator|=
name|fontColor
expr_stmt|;
block|}
comment|/**      * Writes the DA string to the given content stream.      */
name|void
name|writeTo
parameter_list|(
name|PDAppearanceContentStream
name|contents
parameter_list|,
name|float
name|zeroFontSize
parameter_list|)
throws|throws
name|IOException
block|{
name|float
name|fontSize
init|=
name|getFontSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|fontSize
operator|==
literal|0
condition|)
block|{
name|fontSize
operator|=
name|zeroFontSize
expr_stmt|;
block|}
name|contents
operator|.
name|setFont
argument_list|(
name|getFont
argument_list|()
argument_list|,
name|fontSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|getFontColor
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|contents
operator|.
name|setNonStrokingColor
argument_list|(
name|getFontColor
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Copies any needed resources from the documentâ€™s DR dictionary into the streamâ€™s Resources      * dictionary. Resources with the same name shall be left intact.      */
name|void
name|copyNeededResourcesTo
parameter_list|(
name|PDAppearanceStream
name|appearanceStream
parameter_list|)
throws|throws
name|IOException
block|{
comment|// make sure we have resources
name|PDResources
name|streamResources
init|=
name|appearanceStream
operator|.
name|getResources
argument_list|()
decl_stmt|;
if|if
condition|(
name|streamResources
operator|==
literal|null
condition|)
block|{
name|streamResources
operator|=
operator|new
name|PDResources
argument_list|()
expr_stmt|;
name|appearanceStream
operator|.
name|setResources
argument_list|(
name|streamResources
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|streamResources
operator|.
name|getFont
argument_list|(
name|getFontName
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
name|streamResources
operator|.
name|put
argument_list|(
name|fontName
argument_list|,
name|getFont
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// todo: other kinds of resource...
block|}
block|}
end_class

end_unit

