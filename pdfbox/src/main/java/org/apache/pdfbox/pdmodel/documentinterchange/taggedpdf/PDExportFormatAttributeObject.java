begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|documentinterchange
operator|.
name|taggedpdf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|documentinterchange
operator|.
name|logicalstructure
operator|.
name|PDStructureElement
import|;
end_import

begin_comment
comment|/**  * An Export Format attribute object.  *   * @author<a href="mailto:Johannes%20Koch%20%3Ckoch@apache.org%3E">Johannes Koch</a>  * @version $Revision: $  */
end_comment

begin_class
specifier|public
class|class
name|PDExportFormatAttributeObject
extends|extends
name|PDLayoutAttributeObject
block|{
comment|/**      *  standard attribute owner: XML-1.00      */
specifier|public
specifier|static
specifier|final
name|String
name|OWNER_XML_1_00
init|=
literal|"XML-1.00"
decl_stmt|;
comment|/**      *  standard attribute owner: HTML-3.2      */
specifier|public
specifier|static
specifier|final
name|String
name|OWNER_HTML_3_20
init|=
literal|"HTML-3.2"
decl_stmt|;
comment|/**      *  standard attribute owner: HTML-4.01      */
specifier|public
specifier|static
specifier|final
name|String
name|OWNER_HTML_4_01
init|=
literal|"HTML-4.01"
decl_stmt|;
comment|/**      *  standard attribute owner: OEB-1.00      */
specifier|public
specifier|static
specifier|final
name|String
name|OWNER_OEB_1_00
init|=
literal|"OEB-1.00"
decl_stmt|;
comment|/**      *  standard attribute owner: RTF-1.05      */
specifier|public
specifier|static
specifier|final
name|String
name|OWNER_RTF_1_05
init|=
literal|"RTF-1.05"
decl_stmt|;
comment|/**      *  standard attribute owner: CSS-1.00      */
specifier|public
specifier|static
specifier|final
name|String
name|OWNER_CSS_1_00
init|=
literal|"CSS-1.00"
decl_stmt|;
comment|/**      *  standard attribute owner: CSS-2.00      */
specifier|public
specifier|static
specifier|final
name|String
name|OWNER_CSS_2_00
init|=
literal|"CSS-2.00"
decl_stmt|;
comment|/**      * Default constructor.      */
specifier|public
name|PDExportFormatAttributeObject
parameter_list|(
name|String
name|owner
parameter_list|)
block|{
name|this
operator|.
name|setOwner
argument_list|(
name|owner
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new ExportFormat attribute object with a given dictionary.      *       * @param dictionary the dictionary      */
specifier|public
name|PDExportFormatAttributeObject
parameter_list|(
name|COSDictionary
name|dictionary
parameter_list|)
block|{
name|super
argument_list|(
name|dictionary
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the list numbering (ListNumbering). The default value is      * {@link PDListAttributeObject#LIST_NUMBERING_NONE}.      *       * @return the list numbering      */
specifier|public
name|String
name|getListNumbering
parameter_list|()
block|{
return|return
name|this
operator|.
name|getName
argument_list|(
name|PDListAttributeObject
operator|.
name|LIST_NUMBERING
argument_list|,
name|PDListAttributeObject
operator|.
name|LIST_NUMBERING_NONE
argument_list|)
return|;
block|}
comment|/**      * Sets the list numbering (ListNumbering). The value shall be one of the      * following:      *<ul>      *<li>{@link PDListAttributeObject#LIST_NUMBERING_NONE},</li>      *<li>{@link PDListAttributeObject#LIST_NUMBERING_DISC},</li>      *<li>{@link PDListAttributeObject#LIST_NUMBERING_CIRCLE},</li>      *<li>{@link PDListAttributeObject#LIST_NUMBERING_SQUARE},</li>      *<li>{@link PDListAttributeObject#LIST_NUMBERING_DECIMAL},</li>      *<li>{@link PDListAttributeObject#LIST_NUMBERING_UPPER_ROMAN},</li>      *<li>{@link PDListAttributeObject#LIST_NUMBERING_LOWER_ROMAN},</li>      *<li>{@link PDListAttributeObject#LIST_NUMBERING_UPPER_ALPHA},</li>      *<li>{@link PDListAttributeObject#LIST_NUMBERING_LOWER_ALPHA}.</li>      *</ul>      *       * @param listNumbering the list numbering      */
specifier|public
name|void
name|setListNumbering
parameter_list|(
name|String
name|listNumbering
parameter_list|)
block|{
name|this
operator|.
name|setName
argument_list|(
name|PDListAttributeObject
operator|.
name|LIST_NUMBERING
argument_list|,
name|listNumbering
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the number of rows in the enclosing table that shall be spanned by      * the cell (RowSpan). The default value is 1.      *       * @return the row span      */
specifier|public
name|int
name|getRowSpan
parameter_list|()
block|{
return|return
name|this
operator|.
name|getInteger
argument_list|(
name|PDTableAttributeObject
operator|.
name|ROW_SPAN
argument_list|,
literal|1
argument_list|)
return|;
block|}
comment|/**      * Sets the number of rows in the enclosing table that shall be spanned by      * the cell (RowSpan).      *       * @param rowSpan the row span      */
specifier|public
name|void
name|setRowSpan
parameter_list|(
name|int
name|rowSpan
parameter_list|)
block|{
name|this
operator|.
name|setInteger
argument_list|(
name|PDTableAttributeObject
operator|.
name|ROW_SPAN
argument_list|,
name|rowSpan
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the number of columns in the enclosing table that shall be spanned      * by the cell (ColSpan). The default value is 1.      *       * @return the column span      */
specifier|public
name|int
name|getColSpan
parameter_list|()
block|{
return|return
name|this
operator|.
name|getInteger
argument_list|(
name|PDTableAttributeObject
operator|.
name|COL_SPAN
argument_list|,
literal|1
argument_list|)
return|;
block|}
comment|/**      * Sets the number of columns in the enclosing table that shall be spanned      * by the cell (ColSpan).      *       * @param colSpan the column span      */
specifier|public
name|void
name|setColSpan
parameter_list|(
name|int
name|colSpan
parameter_list|)
block|{
name|this
operator|.
name|setInteger
argument_list|(
name|PDTableAttributeObject
operator|.
name|COL_SPAN
argument_list|,
name|colSpan
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the headers (Headers). An array of byte strings, where each string      * shall be the element identifier (see the      * {@link PDStructureElement#getElementIdentifier()}) for a TH structure      * element that shall be used as a header associated with this cell.      *       * @return the headers.      */
specifier|public
name|String
index|[]
name|getHeaders
parameter_list|()
block|{
return|return
name|this
operator|.
name|getArrayOfString
argument_list|(
name|PDTableAttributeObject
operator|.
name|HEADERS
argument_list|)
return|;
block|}
comment|/**      * Sets the headers (Headers). An array of byte strings, where each string      * shall be the element identifier (see the      * {@link PDStructureElement#getElementIdentifier()}) for a TH structure      * element that shall be used as a header associated with this cell.      *       * @param headers the headers      */
specifier|public
name|void
name|setHeaders
parameter_list|(
name|String
index|[]
name|headers
parameter_list|)
block|{
name|this
operator|.
name|setArrayOfString
argument_list|(
name|PDTableAttributeObject
operator|.
name|HEADERS
argument_list|,
name|headers
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the scope (Scope). It shall reflect whether the header cell applies      * to the rest of the cells in the row that contains it, the column that      * contains it, or both the row and the column that contain it.      *       * @return the scope      */
specifier|public
name|String
name|getScope
parameter_list|()
block|{
return|return
name|this
operator|.
name|getName
argument_list|(
name|PDTableAttributeObject
operator|.
name|SCOPE
argument_list|)
return|;
block|}
comment|/**      * Sets the scope (Scope). It shall reflect whether the header cell applies      * to the rest of the cells in the row that contains it, the column that      * contains it, or both the row and the column that contain it. The value      * shall be one of the following:      *<ul>      *<li>{@link PDTableAttributeObject#SCOPE_ROW},</li>      *<li>{@link PDTableAttributeObject#SCOPE_COLUMN}, or</li>      *<li>{@link PDTableAttributeObject#SCOPE_BOTH}.</li>      *</ul>      *       * @param scope the scope      */
specifier|public
name|void
name|setScope
parameter_list|(
name|String
name|scope
parameter_list|)
block|{
name|this
operator|.
name|setName
argument_list|(
name|PDTableAttributeObject
operator|.
name|SCOPE
argument_list|,
name|scope
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the summary of the table’s purpose and structure.      *       * @return the summary      */
specifier|public
name|String
name|getSummary
parameter_list|()
block|{
return|return
name|this
operator|.
name|getString
argument_list|(
name|PDTableAttributeObject
operator|.
name|SUMMARY
argument_list|)
return|;
block|}
comment|/**      * Sets the summary of the table’s purpose and structure.      *       * @param summary the summary      */
specifier|public
name|void
name|setSummary
parameter_list|(
name|String
name|summary
parameter_list|)
block|{
name|this
operator|.
name|setString
argument_list|(
name|PDTableAttributeObject
operator|.
name|SUMMARY
argument_list|,
name|summary
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|super
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|isSpecified
argument_list|(
name|PDListAttributeObject
operator|.
name|LIST_NUMBERING
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", ListNumbering="
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|getListNumbering
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|isSpecified
argument_list|(
name|PDTableAttributeObject
operator|.
name|ROW_SPAN
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", RowSpan="
argument_list|)
operator|.
name|append
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|getRowSpan
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|isSpecified
argument_list|(
name|PDTableAttributeObject
operator|.
name|COL_SPAN
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", ColSpan="
argument_list|)
operator|.
name|append
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|getColSpan
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|isSpecified
argument_list|(
name|PDTableAttributeObject
operator|.
name|HEADERS
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", Headers="
argument_list|)
operator|.
name|append
argument_list|(
name|arrayToString
argument_list|(
name|this
operator|.
name|getHeaders
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|isSpecified
argument_list|(
name|PDTableAttributeObject
operator|.
name|SCOPE
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", Scope="
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|getScope
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|isSpecified
argument_list|(
name|PDTableAttributeObject
operator|.
name|SUMMARY
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", Summary="
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|getSummary
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

