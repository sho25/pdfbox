begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|digitalsignature
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|COSObjectable
import|;
end_import

begin_comment
comment|/**  * This represents a digital signature that can be attached to a document.  *  * @author Ben Litchfield  * @author Thomas Chojecki  */
end_comment

begin_class
specifier|public
class|class
name|PDSignature
implements|implements
name|COSObjectable
block|{
specifier|private
specifier|final
name|COSDictionary
name|dictionary
decl_stmt|;
comment|/**      * A signature filter value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|FILTER_ADOBE_PPKLITE
init|=
name|COSName
operator|.
name|ADOBE_PPKLITE
decl_stmt|;
comment|/**      * A signature filter value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|FILTER_ENTRUST_PPKEF
init|=
name|COSName
operator|.
name|ENTRUST_PPKEF
decl_stmt|;
comment|/**      * A signature filter value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|FILTER_CICI_SIGNIT
init|=
name|COSName
operator|.
name|CICI_SIGNIT
decl_stmt|;
comment|/**      * A signature filter value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|FILTER_VERISIGN_PPKVS
init|=
name|COSName
operator|.
name|VERISIGN_PPKVS
decl_stmt|;
comment|/**      * A signature subfilter value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|SUBFILTER_ADBE_X509_RSA_SHA1
init|=
name|COSName
operator|.
name|ADBE_X509_RSA_SHA1
decl_stmt|;
comment|/**      * A signature subfilter value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|SUBFILTER_ADBE_PKCS7_DETACHED
init|=
name|COSName
operator|.
name|ADBE_PKCS7_DETACHED
decl_stmt|;
comment|/**      * A signature subfilter value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|SUBFILTER_ETSI_CADES_DETACHED
init|=
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"ETSI.CAdES.detached"
argument_list|)
decl_stmt|;
comment|/**      * A signature subfilter value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|SUBFILTER_ADBE_PKCS7_SHA1
init|=
name|COSName
operator|.
name|ADBE_PKCS7_SHA1
decl_stmt|;
comment|/**      * Default constructor.      */
specifier|public
name|PDSignature
parameter_list|()
block|{
name|dictionary
operator|=
operator|new
name|COSDictionary
argument_list|()
expr_stmt|;
name|dictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|TYPE
argument_list|,
name|COSName
operator|.
name|SIG
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor.      *      * @param dict The signature dictionary.      */
specifier|public
name|PDSignature
parameter_list|(
name|COSDictionary
name|dict
parameter_list|)
block|{
name|dictionary
operator|=
name|dict
expr_stmt|;
block|}
comment|/**      * Convert this standard java object to a COS object.      *      * @return The cos object that matches this Java object.      */
annotation|@
name|Override
specifier|public
name|COSBase
name|getCOSObject
parameter_list|()
block|{
return|return
name|getDictionary
argument_list|()
return|;
block|}
comment|/**      * Convert this standard java object to a COS dictionary.      *      * @return The COS dictionary that matches this Java object.      */
specifier|public
name|COSDictionary
name|getDictionary
parameter_list|()
block|{
return|return
name|dictionary
return|;
block|}
comment|/**      * Set the dictionary type.      *      * @param type is the dictionary type.      */
specifier|public
name|void
name|setType
parameter_list|(
name|COSName
name|type
parameter_list|)
block|{
name|dictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|TYPE
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the filter.      *      * @param filter the filter to be used      */
specifier|public
name|void
name|setFilter
parameter_list|(
name|COSName
name|filter
parameter_list|)
block|{
name|dictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|FILTER
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set a subfilter that specify the signature that should be used.      *      * @param subfilter the subfilter that shall be used.      */
specifier|public
name|void
name|setSubFilter
parameter_list|(
name|COSName
name|subfilter
parameter_list|)
block|{
name|dictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|SUB_FILTER
argument_list|,
name|subfilter
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the name.      * @param name the name to be used      */
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|dictionary
operator|.
name|setString
argument_list|(
name|COSName
operator|.
name|NAME
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the location.      * @param location the location to be used      */
specifier|public
name|void
name|setLocation
parameter_list|(
name|String
name|location
parameter_list|)
block|{
name|dictionary
operator|.
name|setString
argument_list|(
name|COSName
operator|.
name|LOCATION
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the reason.      *      * @param reason the reason to be used      */
specifier|public
name|void
name|setReason
parameter_list|(
name|String
name|reason
parameter_list|)
block|{
name|dictionary
operator|.
name|setString
argument_list|(
name|COSName
operator|.
name|REASON
argument_list|,
name|reason
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the contact info.      *      * @param contactInfo the contact info to be used      */
specifier|public
name|void
name|setContactInfo
parameter_list|(
name|String
name|contactInfo
parameter_list|)
block|{
name|dictionary
operator|.
name|setString
argument_list|(
name|COSName
operator|.
name|CONTACT_INFO
argument_list|,
name|contactInfo
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the sign date.      *      * @param cal the date to be used as sign date      */
specifier|public
name|void
name|setSignDate
parameter_list|(
name|Calendar
name|cal
parameter_list|)
block|{
name|dictionary
operator|.
name|setDate
argument_list|(
name|COSName
operator|.
name|M
argument_list|,
name|cal
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the filter.      * @return the filter      */
specifier|public
name|String
name|getFilter
parameter_list|()
block|{
return|return
name|dictionary
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|FILTER
argument_list|)
return|;
block|}
comment|/**      * Returns the subfilter.      *      * @return the subfilter      */
specifier|public
name|String
name|getSubFilter
parameter_list|()
block|{
return|return
name|dictionary
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|SUB_FILTER
argument_list|)
return|;
block|}
comment|/**      * Returns the name.      *      * @return the name      */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|dictionary
operator|.
name|getString
argument_list|(
name|COSName
operator|.
name|NAME
argument_list|)
return|;
block|}
comment|/**      * Returns the location.      *      * @return the location      */
specifier|public
name|String
name|getLocation
parameter_list|()
block|{
return|return
name|dictionary
operator|.
name|getString
argument_list|(
name|COSName
operator|.
name|LOCATION
argument_list|)
return|;
block|}
comment|/**      * Returns the reason.      *      * @return the reason      */
specifier|public
name|String
name|getReason
parameter_list|()
block|{
return|return
name|dictionary
operator|.
name|getString
argument_list|(
name|COSName
operator|.
name|REASON
argument_list|)
return|;
block|}
comment|/**      * Returns the contact info.      *      * @return teh contact info      */
specifier|public
name|String
name|getContactInfo
parameter_list|()
block|{
return|return
name|dictionary
operator|.
name|getString
argument_list|(
name|COSName
operator|.
name|CONTACT_INFO
argument_list|)
return|;
block|}
comment|/**      * Returns the sign date.      *      * @return the sign date      */
specifier|public
name|Calendar
name|getSignDate
parameter_list|()
block|{
return|return
name|dictionary
operator|.
name|getDate
argument_list|(
name|COSName
operator|.
name|M
argument_list|)
return|;
block|}
comment|/**      * Sets the byte range.      *      * @param range the byte range to be used      */
specifier|public
name|void
name|setByteRange
parameter_list|(
name|int
index|[]
name|range
parameter_list|)
block|{
if|if
condition|(
name|range
operator|.
name|length
operator|!=
literal|4
condition|)
block|{
return|return;
block|}
name|COSArray
name|ary
init|=
operator|new
name|COSArray
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
range|:
name|range
control|)
block|{
name|ary
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|dictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|BYTERANGE
argument_list|,
name|ary
argument_list|)
expr_stmt|;
block|}
comment|/**      * Read out the byterange from the file.      *      * @return a integer array with the byterange      */
specifier|public
name|int
index|[]
name|getByteRange
parameter_list|()
block|{
name|COSArray
name|byteRange
init|=
operator|(
name|COSArray
operator|)
name|dictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|BYTERANGE
argument_list|)
decl_stmt|;
name|int
index|[]
name|ary
init|=
operator|new
name|int
index|[
name|byteRange
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ary
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|ary
index|[
name|i
index|]
operator|=
name|byteRange
operator|.
name|getInt
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|ary
return|;
block|}
comment|/**      * Will return the embedded signature between the byterange gap.      *      * @param pdfFile The signed pdf file as InputStream      * @return a byte array containing the signature      * @throws IOException if the pdfFile can't be read      */
specifier|public
name|byte
index|[]
name|getContents
parameter_list|(
name|InputStream
name|pdfFile
parameter_list|)
throws|throws
name|IOException
block|{
name|int
index|[]
name|byteRange
init|=
name|getByteRange
argument_list|()
decl_stmt|;
name|int
name|begin
init|=
name|byteRange
index|[
literal|0
index|]
operator|+
name|byteRange
index|[
literal|1
index|]
operator|+
literal|1
decl_stmt|;
name|int
name|end
init|=
name|byteRange
index|[
literal|2
index|]
operator|-
name|begin
decl_stmt|;
return|return
name|getContents
argument_list|(
operator|new
name|COSFilterInputStream
argument_list|(
name|pdfFile
argument_list|,
operator|new
name|int
index|[]
block|{
name|begin
block|,
name|end
block|}
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Will return the embedded signature between the byterange gap.      *      * @param pdfFile The signed pdf file as byte array      * @return a byte array containing the signature      * @throws IOException if the pdfFile can't be read      */
specifier|public
name|byte
index|[]
name|getContents
parameter_list|(
name|byte
index|[]
name|pdfFile
parameter_list|)
throws|throws
name|IOException
block|{
name|int
index|[]
name|byteRange
init|=
name|getByteRange
argument_list|()
decl_stmt|;
name|int
name|begin
init|=
name|byteRange
index|[
literal|0
index|]
operator|+
name|byteRange
index|[
literal|1
index|]
operator|+
literal|1
decl_stmt|;
name|int
name|end
init|=
name|byteRange
index|[
literal|2
index|]
operator|-
name|begin
decl_stmt|;
return|return
name|getContents
argument_list|(
operator|new
name|COSFilterInputStream
argument_list|(
name|pdfFile
argument_list|,
operator|new
name|int
index|[]
block|{
name|begin
block|,
name|end
block|}
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|byte
index|[]
name|getContents
parameter_list|(
name|COSFilterInputStream
name|fis
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|byteOS
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|int
name|c
decl_stmt|;
while|while
condition|(
operator|(
name|c
operator|=
name|fis
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// Filter< and (
if|if
condition|(
name|buffer
index|[
literal|0
index|]
operator|==
literal|0x3C
operator|||
name|buffer
index|[
literal|0
index|]
operator|==
literal|0x28
condition|)
block|{
name|byteOS
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|1
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
comment|// Filter> and )
elseif|else
if|if
condition|(
name|buffer
index|[
name|c
operator|-
literal|1
index|]
operator|==
literal|0x3E
operator|||
name|buffer
index|[
name|c
operator|-
literal|1
index|]
operator|==
literal|0x29
condition|)
block|{
name|byteOS
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|c
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|byteOS
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
block|}
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|COSString
operator|.
name|parseHex
argument_list|(
name|byteOS
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getBytes
argument_list|()
return|;
block|}
comment|/**      * Sets the contents.      *      * @param bytes contents to be used      */
specifier|public
name|void
name|setContents
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
name|COSString
name|string
init|=
operator|new
name|COSString
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|string
operator|.
name|setForceHexForm
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|CONTENTS
argument_list|,
name|string
argument_list|)
expr_stmt|;
block|}
comment|/**      * Will return the signed content of the document.      *      * @param pdfFile The signed pdf file as InputStream      * @return a byte array containing only the signed part of the content      * @throws IOException if the pdfFile can't be read      */
specifier|public
name|byte
index|[]
name|getSignedContent
parameter_list|(
name|InputStream
name|pdfFile
parameter_list|)
throws|throws
name|IOException
block|{
name|COSFilterInputStream
name|fis
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fis
operator|=
operator|new
name|COSFilterInputStream
argument_list|(
name|pdfFile
argument_list|,
name|getByteRange
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|fis
operator|.
name|toByteArray
argument_list|()
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|fis
operator|!=
literal|null
condition|)
block|{
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Will return the signed content of the document.      *      * @param pdfFile The signed pdf file as byte array      * @return a byte array containing only the signed part of the content      * @throws IOException if the pdfFile can't be read      */
specifier|public
name|byte
index|[]
name|getSignedContent
parameter_list|(
name|byte
index|[]
name|pdfFile
parameter_list|)
throws|throws
name|IOException
block|{
name|COSFilterInputStream
name|fis
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fis
operator|=
operator|new
name|COSFilterInputStream
argument_list|(
name|pdfFile
argument_list|,
name|getByteRange
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|fis
operator|.
name|toByteArray
argument_list|()
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|fis
operator|!=
literal|null
condition|)
block|{
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * PDF signature build dictionary. Provides informations about the signature handler.      *      * @return the pdf signature build dictionary.      */
specifier|public
name|PDPropBuild
name|getPropBuild
parameter_list|()
block|{
name|PDPropBuild
name|propBuild
init|=
literal|null
decl_stmt|;
name|COSDictionary
name|propBuildDic
init|=
operator|(
name|COSDictionary
operator|)
name|dictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|PROP_BUILD
argument_list|)
decl_stmt|;
if|if
condition|(
name|propBuildDic
operator|!=
literal|null
condition|)
block|{
name|propBuild
operator|=
operator|new
name|PDPropBuild
argument_list|(
name|propBuildDic
argument_list|)
expr_stmt|;
block|}
return|return
name|propBuild
return|;
block|}
comment|/**      * PDF signature build dictionary. Provides informations about the signature handler.      *      * @param propBuild the prop build      */
specifier|public
name|void
name|setPropBuild
parameter_list|(
name|PDPropBuild
name|propBuild
parameter_list|)
block|{
name|dictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|PROP_BUILD
argument_list|,
name|propBuild
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

