begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|function
operator|.
name|type4
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * This class provides all the supported operators.  */
end_comment

begin_class
specifier|public
class|class
name|Operators
block|{
comment|//Arithmetic operators
specifier|private
specifier|static
specifier|final
name|Operator
name|ABS
init|=
operator|new
name|ArithmeticOperators
operator|.
name|Abs
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Operator
name|ADD
init|=
operator|new
name|ArithmeticOperators
operator|.
name|Add
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Operator
name|ATAN
init|=
operator|new
name|ArithmeticOperators
operator|.
name|Atan
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Operator
name|CEILING
init|=
operator|new
name|ArithmeticOperators
operator|.
name|Ceiling
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Operator
name|COS
init|=
operator|new
name|ArithmeticOperators
operator|.
name|Cos
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Operator
name|CVI
init|=
operator|new
name|ArithmeticOperators
operator|.
name|Cvi
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Operator
name|CVR
init|=
operator|new
name|ArithmeticOperators
operator|.
name|Cvr
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Operator
name|DIV
init|=
operator|new
name|ArithmeticOperators
operator|.
name|Div
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Operator
name|EXP
init|=
operator|new
name|ArithmeticOperators
operator|.
name|Exp
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Operator
name|FLOOR
init|=
operator|new
name|ArithmeticOperators
operator|.
name|Floor
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Operator
name|IDIV
init|=
operator|new
name|ArithmeticOperators
operator|.
name|IDiv
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Operator
name|LN
init|=
operator|new
name|ArithmeticOperators
operator|.
name|Ln
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Operator
name|LOG
init|=
operator|new
name|ArithmeticOperators
operator|.
name|Log
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Operator
name|MOD
init|=
operator|new
name|ArithmeticOperators
operator|.
name|Mod
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Operator
name|MUL
init|=
operator|new
name|ArithmeticOperators
operator|.
name|Mul
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Operator
name|NEG
init|=
operator|new
name|ArithmeticOperators
operator|.
name|Neg
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Operator
name|ROUND
init|=
operator|new
name|ArithmeticOperators
operator|.
name|Round
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Operator
name|SIN
init|=
operator|new
name|ArithmeticOperators
operator|.
name|Sin
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Operator
name|SQRT
init|=
operator|new
name|ArithmeticOperators
operator|.
name|Sqrt
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Operator
name|SUB
init|=
operator|new
name|ArithmeticOperators
operator|.
name|Sub
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Operator
name|TRUNCATE
init|=
operator|new
name|ArithmeticOperators
operator|.
name|Truncate
argument_list|()
decl_stmt|;
comment|//Relational, boolean and bitwise operators
specifier|private
specifier|static
specifier|final
name|Operator
name|AND
init|=
operator|new
name|BitwiseOperators
operator|.
name|And
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Operator
name|BITSHIFT
init|=
operator|new
name|BitwiseOperators
operator|.
name|Bitshift
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Operator
name|EQ
init|=
operator|new
name|RelationalOperators
operator|.
name|Eq
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Operator
name|FALSE
init|=
operator|new
name|BitwiseOperators
operator|.
name|False
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Operator
name|GE
init|=
operator|new
name|RelationalOperators
operator|.
name|Ge
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Operator
name|GT
init|=
operator|new
name|RelationalOperators
operator|.
name|Gt
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Operator
name|LE
init|=
operator|new
name|RelationalOperators
operator|.
name|Le
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Operator
name|LT
init|=
operator|new
name|RelationalOperators
operator|.
name|Lt
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Operator
name|NE
init|=
operator|new
name|RelationalOperators
operator|.
name|Ne
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Operator
name|NOT
init|=
operator|new
name|BitwiseOperators
operator|.
name|Not
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Operator
name|OR
init|=
operator|new
name|BitwiseOperators
operator|.
name|Or
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Operator
name|TRUE
init|=
operator|new
name|BitwiseOperators
operator|.
name|True
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Operator
name|XOR
init|=
operator|new
name|BitwiseOperators
operator|.
name|Xor
argument_list|()
decl_stmt|;
comment|//Conditional operators
specifier|private
specifier|static
specifier|final
name|Operator
name|IF
init|=
operator|new
name|ConditionalOperators
operator|.
name|If
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Operator
name|IFELSE
init|=
operator|new
name|ConditionalOperators
operator|.
name|IfElse
argument_list|()
decl_stmt|;
comment|//Stack operators
specifier|private
specifier|static
specifier|final
name|Operator
name|COPY
init|=
operator|new
name|StackOperators
operator|.
name|Copy
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Operator
name|DUP
init|=
operator|new
name|StackOperators
operator|.
name|Dup
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Operator
name|EXCH
init|=
operator|new
name|StackOperators
operator|.
name|Exch
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Operator
name|INDEX
init|=
operator|new
name|StackOperators
operator|.
name|Index
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Operator
name|POP
init|=
operator|new
name|StackOperators
operator|.
name|Pop
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Operator
name|ROLL
init|=
operator|new
name|StackOperators
operator|.
name|Roll
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Operator
argument_list|>
name|operators
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * Creates a new Operators object with the default set of operators.      */
specifier|public
name|Operators
parameter_list|()
block|{
name|operators
operator|.
name|put
argument_list|(
literal|"add"
argument_list|,
name|ADD
argument_list|)
expr_stmt|;
name|operators
operator|.
name|put
argument_list|(
literal|"abs"
argument_list|,
name|ABS
argument_list|)
expr_stmt|;
name|operators
operator|.
name|put
argument_list|(
literal|"atan"
argument_list|,
name|ATAN
argument_list|)
expr_stmt|;
name|operators
operator|.
name|put
argument_list|(
literal|"ceiling"
argument_list|,
name|CEILING
argument_list|)
expr_stmt|;
name|operators
operator|.
name|put
argument_list|(
literal|"cos"
argument_list|,
name|COS
argument_list|)
expr_stmt|;
name|operators
operator|.
name|put
argument_list|(
literal|"cvi"
argument_list|,
name|CVI
argument_list|)
expr_stmt|;
name|operators
operator|.
name|put
argument_list|(
literal|"cvr"
argument_list|,
name|CVR
argument_list|)
expr_stmt|;
name|operators
operator|.
name|put
argument_list|(
literal|"div"
argument_list|,
name|DIV
argument_list|)
expr_stmt|;
name|operators
operator|.
name|put
argument_list|(
literal|"exp"
argument_list|,
name|EXP
argument_list|)
expr_stmt|;
name|operators
operator|.
name|put
argument_list|(
literal|"floor"
argument_list|,
name|FLOOR
argument_list|)
expr_stmt|;
name|operators
operator|.
name|put
argument_list|(
literal|"idiv"
argument_list|,
name|IDIV
argument_list|)
expr_stmt|;
name|operators
operator|.
name|put
argument_list|(
literal|"ln"
argument_list|,
name|LN
argument_list|)
expr_stmt|;
name|operators
operator|.
name|put
argument_list|(
literal|"log"
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
name|operators
operator|.
name|put
argument_list|(
literal|"mod"
argument_list|,
name|MOD
argument_list|)
expr_stmt|;
name|operators
operator|.
name|put
argument_list|(
literal|"mul"
argument_list|,
name|MUL
argument_list|)
expr_stmt|;
name|operators
operator|.
name|put
argument_list|(
literal|"neg"
argument_list|,
name|NEG
argument_list|)
expr_stmt|;
name|operators
operator|.
name|put
argument_list|(
literal|"round"
argument_list|,
name|ROUND
argument_list|)
expr_stmt|;
name|operators
operator|.
name|put
argument_list|(
literal|"sin"
argument_list|,
name|SIN
argument_list|)
expr_stmt|;
name|operators
operator|.
name|put
argument_list|(
literal|"sqrt"
argument_list|,
name|SQRT
argument_list|)
expr_stmt|;
name|operators
operator|.
name|put
argument_list|(
literal|"sub"
argument_list|,
name|SUB
argument_list|)
expr_stmt|;
name|operators
operator|.
name|put
argument_list|(
literal|"truncate"
argument_list|,
name|TRUNCATE
argument_list|)
expr_stmt|;
name|operators
operator|.
name|put
argument_list|(
literal|"and"
argument_list|,
name|AND
argument_list|)
expr_stmt|;
name|operators
operator|.
name|put
argument_list|(
literal|"bitshift"
argument_list|,
name|BITSHIFT
argument_list|)
expr_stmt|;
name|operators
operator|.
name|put
argument_list|(
literal|"eq"
argument_list|,
name|EQ
argument_list|)
expr_stmt|;
name|operators
operator|.
name|put
argument_list|(
literal|"false"
argument_list|,
name|FALSE
argument_list|)
expr_stmt|;
name|operators
operator|.
name|put
argument_list|(
literal|"ge"
argument_list|,
name|GE
argument_list|)
expr_stmt|;
name|operators
operator|.
name|put
argument_list|(
literal|"gt"
argument_list|,
name|GT
argument_list|)
expr_stmt|;
name|operators
operator|.
name|put
argument_list|(
literal|"le"
argument_list|,
name|LE
argument_list|)
expr_stmt|;
name|operators
operator|.
name|put
argument_list|(
literal|"lt"
argument_list|,
name|LT
argument_list|)
expr_stmt|;
name|operators
operator|.
name|put
argument_list|(
literal|"ne"
argument_list|,
name|NE
argument_list|)
expr_stmt|;
name|operators
operator|.
name|put
argument_list|(
literal|"not"
argument_list|,
name|NOT
argument_list|)
expr_stmt|;
name|operators
operator|.
name|put
argument_list|(
literal|"or"
argument_list|,
name|OR
argument_list|)
expr_stmt|;
name|operators
operator|.
name|put
argument_list|(
literal|"true"
argument_list|,
name|TRUE
argument_list|)
expr_stmt|;
name|operators
operator|.
name|put
argument_list|(
literal|"xor"
argument_list|,
name|XOR
argument_list|)
expr_stmt|;
name|operators
operator|.
name|put
argument_list|(
literal|"if"
argument_list|,
name|IF
argument_list|)
expr_stmt|;
name|operators
operator|.
name|put
argument_list|(
literal|"ifelse"
argument_list|,
name|IFELSE
argument_list|)
expr_stmt|;
name|operators
operator|.
name|put
argument_list|(
literal|"copy"
argument_list|,
name|COPY
argument_list|)
expr_stmt|;
name|operators
operator|.
name|put
argument_list|(
literal|"dup"
argument_list|,
name|DUP
argument_list|)
expr_stmt|;
name|operators
operator|.
name|put
argument_list|(
literal|"exch"
argument_list|,
name|EXCH
argument_list|)
expr_stmt|;
name|operators
operator|.
name|put
argument_list|(
literal|"index"
argument_list|,
name|INDEX
argument_list|)
expr_stmt|;
name|operators
operator|.
name|put
argument_list|(
literal|"pop"
argument_list|,
name|POP
argument_list|)
expr_stmt|;
name|operators
operator|.
name|put
argument_list|(
literal|"roll"
argument_list|,
name|ROLL
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the operator for the given operator name.      * @param operatorName the operator name      * @return the operator (or null if there's no such operator      */
specifier|public
name|Operator
name|getOperator
parameter_list|(
name|String
name|operatorName
parameter_list|)
block|{
return|return
name|this
operator|.
name|operators
operator|.
name|get
argument_list|(
name|operatorName
argument_list|)
return|;
block|}
block|}
end_class

end_unit

