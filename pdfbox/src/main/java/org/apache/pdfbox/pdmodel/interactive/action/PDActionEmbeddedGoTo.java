begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|filespecification
operator|.
name|PDFileSpecification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|documentnavigation
operator|.
name|destination
operator|.
name|PDDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|documentnavigation
operator|.
name|destination
operator|.
name|PDPageDestination
import|;
end_import

begin_comment
comment|/**  * This represents a embedded go-to action that can be executed in a PDF document.  *  * @author Ben Litchfield  * @author Panagiotis Toumasis  * @author Tilman Hausherr  */
end_comment

begin_class
specifier|public
class|class
name|PDActionEmbeddedGoTo
extends|extends
name|PDAction
block|{
comment|/**      * This type of action this object represents.      */
specifier|public
specifier|static
specifier|final
name|String
name|SUB_TYPE
init|=
literal|"GoToE"
decl_stmt|;
comment|/**      * Default constructor.      */
specifier|public
name|PDActionEmbeddedGoTo
parameter_list|()
block|{
name|setSubType
argument_list|(
name|SUB_TYPE
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor.      *      * @param a The action dictionary.      */
specifier|public
name|PDActionEmbeddedGoTo
parameter_list|(
name|COSDictionary
name|a
parameter_list|)
block|{
name|super
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the destination to jump to.      *      * @return The D entry of the specific go-to action dictionary.      *      * @throws IOException If there is an error creating the destination.      */
specifier|public
name|PDDestination
name|getDestination
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|PDDestination
operator|.
name|create
argument_list|(
name|getCOSObject
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|D
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * This will set the destination to jump to.      *      * @param d The destination.      *      * @throws IllegalArgumentException if the destination is not a page dictionary object.      */
specifier|public
name|void
name|setDestination
parameter_list|(
name|PDDestination
name|d
parameter_list|)
block|{
if|if
condition|(
name|d
operator|instanceof
name|PDPageDestination
condition|)
block|{
name|PDPageDestination
name|pageDest
init|=
operator|(
name|PDPageDestination
operator|)
name|d
decl_stmt|;
name|COSArray
name|destArray
init|=
name|pageDest
operator|.
name|getCOSObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|destArray
operator|.
name|size
argument_list|()
operator|>=
literal|1
condition|)
block|{
name|COSBase
name|page
init|=
name|destArray
operator|.
name|getObject
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|page
operator|instanceof
name|COSDictionary
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Destination of a GoToE action must be "
operator|+
literal|"a page dictionary object"
argument_list|)
throw|;
block|}
block|}
block|}
name|getCOSObject
argument_list|()
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|D
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the file in which the destination is located.      *      * @return The F entry of the specific embedded go-to action dictionary.      *      * @throws IOException If there is an error creating the file spec.      */
specifier|public
name|PDFileSpecification
name|getFile
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|PDFileSpecification
operator|.
name|createFS
argument_list|(
name|getCOSObject
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|F
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * This will set the file in which the destination is located.      *      * @param fs The file specification.      */
specifier|public
name|void
name|setFile
parameter_list|(
name|PDFileSpecification
name|fs
parameter_list|)
block|{
name|getCOSObject
argument_list|()
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|F
argument_list|,
name|fs
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will specify whether to open the destination document in a new window, in the same      * window, or behave in accordance with the current user preference.      *      * @return A flag specifying how to open the destination document.      */
specifier|public
name|OpenMode
name|getOpenInNewWindow
parameter_list|()
block|{
if|if
condition|(
name|getCOSObject
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|NEW_WINDOW
argument_list|)
operator|instanceof
name|COSBoolean
condition|)
block|{
name|COSBoolean
name|b
init|=
operator|(
name|COSBoolean
operator|)
name|getCOSObject
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|NEW_WINDOW
argument_list|)
decl_stmt|;
return|return
name|b
operator|.
name|getValue
argument_list|()
condition|?
name|OpenMode
operator|.
name|NEW_WINDOW
else|:
name|OpenMode
operator|.
name|SAME_WINDOW
return|;
block|}
return|return
name|OpenMode
operator|.
name|USER_PREFERENCE
return|;
block|}
comment|/**      * This will specify whether to open the destination document in a new window.      *      * @param value The flag value.      */
specifier|public
name|void
name|setOpenInNewWindow
parameter_list|(
name|OpenMode
name|value
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|value
condition|)
block|{
name|getCOSObject
argument_list|()
operator|.
name|removeItem
argument_list|(
name|COSName
operator|.
name|NEW_WINDOW
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|value
condition|)
block|{
case|case
name|USER_PREFERENCE
case|:
name|getCOSObject
argument_list|()
operator|.
name|removeItem
argument_list|(
name|COSName
operator|.
name|NEW_WINDOW
argument_list|)
expr_stmt|;
break|break;
case|case
name|SAME_WINDOW
case|:
name|getCOSObject
argument_list|()
operator|.
name|setBoolean
argument_list|(
name|COSName
operator|.
name|NEW_WINDOW
argument_list|,
literal|false
argument_list|)
expr_stmt|;
break|break;
case|case
name|NEW_WINDOW
case|:
name|getCOSObject
argument_list|()
operator|.
name|setBoolean
argument_list|(
name|COSName
operator|.
name|NEW_WINDOW
argument_list|,
literal|true
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|// shouldn't happen unless the enum type is changed
break|break;
block|}
block|}
comment|/**      * Get the target directory.      *      * @return the target directory or null if there is none.      */
specifier|public
name|PDTargetDirectory
name|getTargetDirectory
parameter_list|()
block|{
name|COSBase
name|base
init|=
name|getCOSObject
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|T
argument_list|)
decl_stmt|;
if|if
condition|(
name|base
operator|instanceof
name|COSDictionary
condition|)
block|{
return|return
operator|new
name|PDTargetDirectory
argument_list|(
operator|(
name|COSDictionary
operator|)
name|base
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Sets the target directory.      *       * @param targetDirectory      */
specifier|public
name|void
name|setTargetDirectory
parameter_list|(
name|PDTargetDirectory
name|targetDirectory
parameter_list|)
block|{
name|getCOSObject
argument_list|()
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|T
argument_list|,
name|targetDirectory
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

