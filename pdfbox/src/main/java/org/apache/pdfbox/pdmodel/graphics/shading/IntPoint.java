begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|shading
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Point
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|Point2D
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Point class with faster hashCode() to speed up the rendering of Gouraud shadings. Should only be  * used for maps or sets when all elements are of this type, because the hashCode() method violates  * its general contract "If two objects are equal according to the equals(Object) method, then  * calling the hashCode method on each of the two objects must produce the same" when IntPoint is  * mixed with Point, because IntPoint(x,y) would have a different hashCode than Point(x,y).  *  * @author Tilman Hausherr  */
end_comment

begin_class
class|class
name|IntPoint
extends|extends
name|Point
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|IntPoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|IntPoint
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
block|{
name|super
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|89
operator|*
operator|(
literal|623
operator|+
name|this
operator|.
name|x
operator|)
operator|+
name|this
operator|.
name|y
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|Point2D
condition|)
block|{
comment|// hitting this branch means that the warning on top of the class wasn't read
name|LOG
operator|.
name|error
argument_list|(
literal|"IntPoint should not be used together with its base class"
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|final
name|IntPoint
name|other
init|=
operator|(
name|IntPoint
operator|)
name|obj
decl_stmt|;
return|return
name|this
operator|.
name|x
operator|==
name|other
operator|.
name|x
operator|&&
name|this
operator|.
name|y
operator|==
name|other
operator|.
name|y
return|;
block|}
block|}
end_class

end_unit

