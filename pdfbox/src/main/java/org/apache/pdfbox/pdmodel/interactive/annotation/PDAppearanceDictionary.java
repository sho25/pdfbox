begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|COSObjectable
import|;
end_import

begin_comment
comment|/**  * An appearance dictionary specifying how the annotation shall be presented visually on the page.  *  * @author Ben Litchfield  */
end_comment

begin_class
specifier|public
class|class
name|PDAppearanceDictionary
implements|implements
name|COSObjectable
block|{
specifier|private
specifier|final
name|COSDictionary
name|dictionary
decl_stmt|;
comment|/**      * Constructor for embedding.      */
specifier|public
name|PDAppearanceDictionary
parameter_list|()
block|{
name|dictionary
operator|=
operator|new
name|COSDictionary
argument_list|()
expr_stmt|;
comment|// the N entry is required.
name|dictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|N
argument_list|,
operator|new
name|COSDictionary
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor for reading.      *      * @param dictionary The annotations dictionary.      */
specifier|public
name|PDAppearanceDictionary
parameter_list|(
name|COSDictionary
name|dictionary
parameter_list|)
block|{
name|this
operator|.
name|dictionary
operator|=
name|dictionary
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|COSDictionary
name|getCOSObject
parameter_list|()
block|{
return|return
name|dictionary
return|;
block|}
comment|/**      * This will return a list of appearances. In the case where there is only one appearance the map will contain one      * entry whose key is the string "default".      *      * @return A list of key(java.lang.String) value(PDAppearanceStream) pairs      */
specifier|public
name|PDAppearanceEntry
name|getNormalAppearance
parameter_list|()
block|{
name|COSBase
name|entry
init|=
name|dictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|N
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|new
name|PDAppearanceEntry
argument_list|(
name|entry
argument_list|)
return|;
block|}
block|}
comment|/**      * This will set a list of appearances. If you would like to set the single appearance then you should use the key      * "default", and when the PDF is written back to the filesystem then there will only be one stream.      *      * @param entry appearance stream or subdictionary      */
specifier|public
name|void
name|setNormalAppearance
parameter_list|(
name|PDAppearanceEntry
name|entry
parameter_list|)
block|{
name|dictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|N
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will set the normal appearance when there is only one appearance to be shown.      *      * @param ap The appearance stream to show.      */
specifier|public
name|void
name|setNormalAppearance
parameter_list|(
name|PDAppearanceStream
name|ap
parameter_list|)
block|{
name|dictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|N
argument_list|,
name|ap
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will return a list of appearances. In the case where there is only one appearance the map will contain one      * entry whose key is the string "default". If there is no rollover appearance then the normal appearance will be      * returned. Which means that this method will never return null.      *      * @return A list of key(java.lang.String) value(PDAppearanceStream) pairs      */
specifier|public
name|PDAppearanceEntry
name|getRolloverAppearance
parameter_list|()
block|{
name|COSBase
name|entry
init|=
name|dictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|R
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return
name|getNormalAppearance
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|new
name|PDAppearanceEntry
argument_list|(
name|entry
argument_list|)
return|;
block|}
block|}
comment|/**      * This will set a list of appearances. If you would like to set the single appearance then you should use the key      * "default", and when the PDF is written back to the filesystem then there will only be one stream.      *      * @param entry appearance stream or subdictionary      */
specifier|public
name|void
name|setRolloverAppearance
parameter_list|(
name|PDAppearanceEntry
name|entry
parameter_list|)
block|{
name|dictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|R
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will set the rollover appearance when there is rollover appearance to be shown.      *      * @param ap The appearance stream to show.      */
specifier|public
name|void
name|setRolloverAppearance
parameter_list|(
name|PDAppearanceStream
name|ap
parameter_list|)
block|{
name|dictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|R
argument_list|,
name|ap
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will return a list of appearances. In the case where there is only one appearance the map will contain one      * entry whose key is the string "default". If there is no rollover appearance then the normal appearance will be      * returned. Which means that this method will never return null.      *      * @return A list of key(java.lang.String) value(PDAppearanceStream) pairs      */
specifier|public
name|PDAppearanceEntry
name|getDownAppearance
parameter_list|()
block|{
name|COSBase
name|entry
init|=
name|dictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|D
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return
name|getNormalAppearance
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|new
name|PDAppearanceEntry
argument_list|(
name|entry
argument_list|)
return|;
block|}
block|}
comment|/**      * This will set a list of appearances. If you would like to set the single appearance then you should use the key      * "default", and when the PDF is written back to the filesystem then there will only be one stream.      *      * @param entry appearance stream or subdictionary      */
specifier|public
name|void
name|setDownAppearance
parameter_list|(
name|PDAppearanceEntry
name|entry
parameter_list|)
block|{
name|dictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|D
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will set the down appearance when there is down appearance to be shown.      *      * @param ap The appearance stream to show.      */
specifier|public
name|void
name|setDownAppearance
parameter_list|(
name|PDAppearanceStream
name|ap
parameter_list|)
block|{
name|dictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|D
argument_list|,
name|ap
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

