begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|form
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|AffineTransform
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|Point2D
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|contentstream
operator|.
name|operator
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdfparser
operator|.
name|PDFStreamParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdfwriter
operator|.
name|ContentStreamWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDRectangle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDColor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|action
operator|.
name|PDFormFieldAdditionalActions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAnnotationWidget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAppearanceCharacteristicsDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAppearanceContentStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAppearanceDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAppearanceEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAppearanceStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDBorderStyleDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|Matrix
import|;
end_import

begin_comment
comment|/**  * Create the AcroForms field appearance helper.  *   * @author Stephan Gerhard  * @author Ben Litchfield  */
end_comment

begin_class
class|class
name|AppearanceGeneratorHelper
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AppearanceGeneratorHelper
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Operator
name|BMC
init|=
name|Operator
operator|.
name|getOperator
argument_list|(
literal|"BMC"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Operator
name|EMC
init|=
name|Operator
operator|.
name|getOperator
argument_list|(
literal|"EMC"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|PDVariableText
name|field
decl_stmt|;
specifier|private
specifier|final
name|PDDefaultAppearanceString
name|defaultAppearance
decl_stmt|;
specifier|private
name|String
name|value
decl_stmt|;
comment|/**      * The highlight color      *      * The color setting is used by Adobe to display the highlight box for selected entries in a list box.      *      * Regardless of other settings in an existing appearance stream Adobe will always use this value.      */
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|HIGHLIGHT_COLOR
init|=
block|{
literal|153
block|,
literal|193
block|,
literal|215
block|}
decl_stmt|;
comment|/**      * The scaling factor for font units to PDF units      */
specifier|private
specifier|static
specifier|final
name|int
name|FONTSCALE
init|=
literal|1000
decl_stmt|;
comment|/**      * The default font size used for multiline text      */
specifier|private
specifier|static
specifier|final
name|float
name|DEFAULT_FONT_SIZE
init|=
literal|12
decl_stmt|;
comment|/**      * The default padding applied by Acrobat to the fields bbox.      */
specifier|private
specifier|static
specifier|final
name|float
name|DEFAULT_PADDING
init|=
literal|0.5f
decl_stmt|;
comment|/**      * Constructs a COSAppearance from the given field.      *      * @param field the field which you wish to control the appearance of      * @throws IOException       */
name|AppearanceGeneratorHelper
parameter_list|(
name|PDVariableText
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|defaultAppearance
operator|=
name|field
operator|.
name|getDefaultAppearanceString
argument_list|()
expr_stmt|;
block|}
comment|/**      * This is the public method for setting the appearance stream.      *      * @param apValue the String value which the appearance should represent      * @throws IOException If there is an error creating the stream.      */
specifier|public
name|void
name|setAppearanceValue
parameter_list|(
name|String
name|apValue
parameter_list|)
throws|throws
name|IOException
block|{
name|value
operator|=
name|apValue
expr_stmt|;
for|for
control|(
name|PDAnnotationWidget
name|widget
range|:
name|field
operator|.
name|getWidgets
argument_list|()
control|)
block|{
name|PDRectangle
name|rect
init|=
name|widget
operator|.
name|getRectangle
argument_list|()
decl_stmt|;
if|if
condition|(
name|rect
operator|==
literal|null
condition|)
block|{
name|widget
operator|.
name|getCOSObject
argument_list|()
operator|.
name|removeItem
argument_list|(
name|COSName
operator|.
name|AP
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"widget of field "
operator|+
name|field
operator|.
name|getFullyQualifiedName
argument_list|()
operator|+
literal|" has no rectangle, no appearance stream created"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|PDFormFieldAdditionalActions
name|actions
init|=
name|field
operator|.
name|getActions
argument_list|()
decl_stmt|;
comment|// in case all tests fail the field will be formatted by acrobat
comment|// when it is opened. See FreedomExpressions.pdf for an example of this.
if|if
condition|(
name|actions
operator|==
literal|null
operator|||
name|actions
operator|.
name|getF
argument_list|()
operator|==
literal|null
operator|||
name|widget
operator|.
name|getCOSObject
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|AP
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|PDAppearanceDictionary
name|appearanceDict
init|=
name|widget
operator|.
name|getAppearance
argument_list|()
decl_stmt|;
if|if
condition|(
name|appearanceDict
operator|==
literal|null
condition|)
block|{
name|appearanceDict
operator|=
operator|new
name|PDAppearanceDictionary
argument_list|()
expr_stmt|;
name|widget
operator|.
name|setAppearance
argument_list|(
name|appearanceDict
argument_list|)
expr_stmt|;
block|}
name|PDAppearanceEntry
name|appearance
init|=
name|appearanceDict
operator|.
name|getNormalAppearance
argument_list|()
decl_stmt|;
comment|// TODO support appearances other than "normal"
name|PDAppearanceStream
name|appearanceStream
decl_stmt|;
if|if
condition|(
name|appearance
operator|.
name|isStream
argument_list|()
condition|)
block|{
name|appearanceStream
operator|=
name|appearance
operator|.
name|getAppearanceStream
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|appearanceStream
operator|=
operator|new
name|PDAppearanceStream
argument_list|(
name|field
operator|.
name|getAcroForm
argument_list|()
operator|.
name|getDocument
argument_list|()
argument_list|)
expr_stmt|;
comment|// Calculate the entries for the bounding box and the transformation matrix
comment|// settings for the appearance stream
name|int
name|rotation
init|=
name|resolveRotation
argument_list|(
name|widget
argument_list|)
decl_stmt|;
name|Matrix
name|matrix
init|=
name|Matrix
operator|.
name|getRotateInstance
argument_list|(
name|Math
operator|.
name|toRadians
argument_list|(
name|rotation
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Point2D
operator|.
name|Float
name|point2D
init|=
name|matrix
operator|.
name|transformPoint
argument_list|(
name|rect
operator|.
name|getWidth
argument_list|()
argument_list|,
name|rect
operator|.
name|getHeight
argument_list|()
argument_list|)
decl_stmt|;
name|PDRectangle
name|bbox
init|=
operator|new
name|PDRectangle
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
operator|(
name|float
operator|)
name|point2D
operator|.
name|getX
argument_list|()
argument_list|)
argument_list|,
name|Math
operator|.
name|abs
argument_list|(
operator|(
name|float
operator|)
name|point2D
operator|.
name|getY
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|appearanceStream
operator|.
name|setBBox
argument_list|(
name|bbox
argument_list|)
expr_stmt|;
name|appearanceStream
operator|.
name|setMatrix
argument_list|(
name|calculateMatrix
argument_list|(
name|bbox
argument_list|,
name|rotation
argument_list|)
argument_list|)
expr_stmt|;
name|appearanceStream
operator|.
name|setFormType
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|appearanceStream
operator|.
name|setResources
argument_list|(
operator|new
name|PDResources
argument_list|()
argument_list|)
expr_stmt|;
name|appearanceDict
operator|.
name|setNormalAppearance
argument_list|(
name|appearanceStream
argument_list|)
expr_stmt|;
comment|// TODO support appearances other than "normal"
block|}
comment|/*                  * Adobe Acrobat always recreates the complete appearance stream if there is an appearance characteristics                  * entry (the widget dictionaries MK entry). In addition if there is no content yet also create the appearance                  * stream from the entries.                  *                   */
if|if
condition|(
name|widget
operator|.
name|getAppearanceCharacteristics
argument_list|()
operator|!=
literal|null
operator|||
name|appearanceStream
operator|.
name|getContentStream
argument_list|()
operator|.
name|getLength
argument_list|()
operator|==
literal|0
condition|)
block|{
name|initializeAppearanceContent
argument_list|(
name|widget
argument_list|,
name|appearanceStream
argument_list|)
expr_stmt|;
block|}
name|setAppearanceContent
argument_list|(
name|widget
argument_list|,
name|appearanceStream
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|int
name|resolveRotation
parameter_list|(
name|PDAnnotationWidget
name|widget
parameter_list|)
block|{
name|PDAppearanceCharacteristicsDictionary
name|characteristicsDictionary
init|=
name|widget
operator|.
name|getAppearanceCharacteristics
argument_list|()
decl_stmt|;
if|if
condition|(
name|characteristicsDictionary
operator|!=
literal|null
condition|)
block|{
comment|// 0 is the default value if the R key doesn't exist
return|return
name|characteristicsDictionary
operator|.
name|getRotation
argument_list|()
return|;
block|}
return|return
literal|0
return|;
block|}
comment|/**      * Initialize the content of the appearance stream.      *       * Get settings like border style, border width and colors to be used to draw a rectangle and background color       * around the widget      *       * @param widget the field widget      * @param appearanceStream the appearance stream to be used      * @throws IOException in case we can't write to the appearance stream      */
specifier|private
name|void
name|initializeAppearanceContent
parameter_list|(
name|PDAnnotationWidget
name|widget
parameter_list|,
name|PDAppearanceStream
name|appearanceStream
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|output
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PDAppearanceContentStream
name|contents
init|=
operator|new
name|PDAppearanceContentStream
argument_list|(
name|appearanceStream
argument_list|,
name|output
argument_list|)
decl_stmt|;
name|PDAppearanceCharacteristicsDictionary
name|appearanceCharacteristics
init|=
name|widget
operator|.
name|getAppearanceCharacteristics
argument_list|()
decl_stmt|;
comment|// TODO: support more entries like patterns, etc.
if|if
condition|(
name|appearanceCharacteristics
operator|!=
literal|null
condition|)
block|{
name|PDColor
name|backgroundColour
init|=
name|appearanceCharacteristics
operator|.
name|getBackground
argument_list|()
decl_stmt|;
if|if
condition|(
name|backgroundColour
operator|!=
literal|null
condition|)
block|{
name|contents
operator|.
name|setNonStrokingColor
argument_list|(
name|backgroundColour
argument_list|)
expr_stmt|;
name|PDRectangle
name|bbox
init|=
name|resolveBoundingBox
argument_list|(
name|widget
argument_list|,
name|appearanceStream
argument_list|)
decl_stmt|;
name|contents
operator|.
name|addRect
argument_list|(
name|bbox
operator|.
name|getLowerLeftX
argument_list|()
argument_list|,
name|bbox
operator|.
name|getLowerLeftY
argument_list|()
argument_list|,
name|bbox
operator|.
name|getWidth
argument_list|()
argument_list|,
name|bbox
operator|.
name|getHeight
argument_list|()
argument_list|)
expr_stmt|;
name|contents
operator|.
name|fill
argument_list|()
expr_stmt|;
block|}
name|float
name|lineWidth
init|=
literal|0f
decl_stmt|;
name|PDColor
name|borderColour
init|=
name|appearanceCharacteristics
operator|.
name|getBorderColour
argument_list|()
decl_stmt|;
if|if
condition|(
name|borderColour
operator|!=
literal|null
condition|)
block|{
name|contents
operator|.
name|setStrokingColor
argument_list|(
name|borderColour
argument_list|)
expr_stmt|;
name|lineWidth
operator|=
literal|1f
expr_stmt|;
block|}
name|PDBorderStyleDictionary
name|borderStyle
init|=
name|widget
operator|.
name|getBorderStyle
argument_list|()
decl_stmt|;
if|if
condition|(
name|borderStyle
operator|!=
literal|null
operator|&&
name|borderStyle
operator|.
name|getWidth
argument_list|()
operator|>
literal|0
condition|)
block|{
name|lineWidth
operator|=
name|borderStyle
operator|.
name|getWidth
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|lineWidth
operator|>
literal|0
operator|&&
name|borderColour
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|lineWidth
operator|!=
literal|1
condition|)
block|{
name|contents
operator|.
name|setLineWidth
argument_list|(
name|lineWidth
argument_list|)
expr_stmt|;
block|}
name|PDRectangle
name|bbox
init|=
name|resolveBoundingBox
argument_list|(
name|widget
argument_list|,
name|appearanceStream
argument_list|)
decl_stmt|;
name|PDRectangle
name|clipRect
init|=
name|applyPadding
argument_list|(
name|bbox
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|DEFAULT_PADDING
argument_list|,
name|lineWidth
operator|/
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|contents
operator|.
name|addRect
argument_list|(
name|clipRect
operator|.
name|getLowerLeftX
argument_list|()
argument_list|,
name|clipRect
operator|.
name|getLowerLeftY
argument_list|()
argument_list|,
name|clipRect
operator|.
name|getWidth
argument_list|()
argument_list|,
name|clipRect
operator|.
name|getHeight
argument_list|()
argument_list|)
expr_stmt|;
name|contents
operator|.
name|closeAndStroke
argument_list|()
expr_stmt|;
block|}
block|}
name|contents
operator|.
name|close
argument_list|()
expr_stmt|;
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
name|writeToStream
argument_list|(
name|output
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|appearanceStream
argument_list|)
expr_stmt|;
block|}
comment|/**      * Parses an appearance stream into tokens.      */
specifier|private
name|List
argument_list|<
name|Object
argument_list|>
name|tokenize
parameter_list|(
name|PDAppearanceStream
name|appearanceStream
parameter_list|)
throws|throws
name|IOException
block|{
name|PDFStreamParser
name|parser
init|=
operator|new
name|PDFStreamParser
argument_list|(
name|appearanceStream
argument_list|)
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|()
expr_stmt|;
return|return
name|parser
operator|.
name|getTokens
argument_list|()
return|;
block|}
comment|/**      * Constructs and sets new contents for given appearance stream.      */
specifier|private
name|void
name|setAppearanceContent
parameter_list|(
name|PDAnnotationWidget
name|widget
parameter_list|,
name|PDAppearanceStream
name|appearanceStream
parameter_list|)
throws|throws
name|IOException
block|{
comment|// first copy any needed resources from the document’s DR dictionary into
comment|// the stream’s Resources dictionary
name|defaultAppearance
operator|.
name|copyNeededResourcesTo
argument_list|(
name|appearanceStream
argument_list|)
expr_stmt|;
comment|// then replace the existing contents of the appearance stream from /Tx BMC
comment|// to the matching EMC
name|ByteArrayOutputStream
name|output
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|ContentStreamWriter
name|writer
init|=
operator|new
name|ContentStreamWriter
argument_list|(
name|output
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|tokens
init|=
name|tokenize
argument_list|(
name|appearanceStream
argument_list|)
decl_stmt|;
name|int
name|bmcIndex
init|=
name|tokens
operator|.
name|indexOf
argument_list|(
name|BMC
argument_list|)
decl_stmt|;
if|if
condition|(
name|bmcIndex
operator|==
operator|-
literal|1
condition|)
block|{
comment|// append to existing stream
name|writer
operator|.
name|writeTokens
argument_list|(
name|tokens
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeTokens
argument_list|(
name|COSName
operator|.
name|TX
argument_list|,
name|BMC
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// prepend content before BMC
name|writer
operator|.
name|writeTokens
argument_list|(
name|tokens
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|bmcIndex
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// insert field contents
name|insertGeneratedAppearance
argument_list|(
name|widget
argument_list|,
name|appearanceStream
argument_list|,
name|output
argument_list|)
expr_stmt|;
name|int
name|emcIndex
init|=
name|tokens
operator|.
name|indexOf
argument_list|(
name|EMC
argument_list|)
decl_stmt|;
if|if
condition|(
name|emcIndex
operator|==
operator|-
literal|1
condition|)
block|{
comment|// append EMC
name|writer
operator|.
name|writeTokens
argument_list|(
name|EMC
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// append contents after EMC
name|writer
operator|.
name|writeTokens
argument_list|(
name|tokens
operator|.
name|subList
argument_list|(
name|emcIndex
argument_list|,
name|tokens
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
name|writeToStream
argument_list|(
name|output
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|appearanceStream
argument_list|)
expr_stmt|;
block|}
comment|/**      * Generate and insert text content and clipping around it.         */
specifier|private
name|void
name|insertGeneratedAppearance
parameter_list|(
name|PDAnnotationWidget
name|widget
parameter_list|,
name|PDAppearanceStream
name|appearanceStream
parameter_list|,
name|OutputStream
name|output
parameter_list|)
throws|throws
name|IOException
block|{
name|PDAppearanceContentStream
name|contents
init|=
operator|new
name|PDAppearanceContentStream
argument_list|(
name|appearanceStream
argument_list|,
name|output
argument_list|)
decl_stmt|;
name|PDRectangle
name|bbox
init|=
name|resolveBoundingBox
argument_list|(
name|widget
argument_list|,
name|appearanceStream
argument_list|)
decl_stmt|;
comment|// Acrobat calculates the left and right padding dependent on the offset of the border edge
comment|// This calculation works for forms having been generated by Acrobat.
comment|// The minimum distance is always 1f even if there is no rectangle being drawn around.
name|float
name|borderWidth
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|widget
operator|.
name|getBorderStyle
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|borderWidth
operator|=
name|widget
operator|.
name|getBorderStyle
argument_list|()
operator|.
name|getWidth
argument_list|()
expr_stmt|;
block|}
name|PDRectangle
name|clipRect
init|=
name|applyPadding
argument_list|(
name|bbox
argument_list|,
name|Math
operator|.
name|max
argument_list|(
literal|1f
argument_list|,
name|borderWidth
argument_list|)
argument_list|)
decl_stmt|;
name|PDRectangle
name|contentRect
init|=
name|applyPadding
argument_list|(
name|clipRect
argument_list|,
name|Math
operator|.
name|max
argument_list|(
literal|1f
argument_list|,
name|borderWidth
argument_list|)
argument_list|)
decl_stmt|;
name|contents
operator|.
name|saveGraphicsState
argument_list|()
expr_stmt|;
comment|// Acrobat always adds a clipping path
name|contents
operator|.
name|addRect
argument_list|(
name|clipRect
operator|.
name|getLowerLeftX
argument_list|()
argument_list|,
name|clipRect
operator|.
name|getLowerLeftY
argument_list|()
argument_list|,
name|clipRect
operator|.
name|getWidth
argument_list|()
argument_list|,
name|clipRect
operator|.
name|getHeight
argument_list|()
argument_list|)
expr_stmt|;
name|contents
operator|.
name|clip
argument_list|()
expr_stmt|;
comment|// get the font
name|PDFont
name|font
init|=
name|field
operator|.
name|getDefaultAppearanceString
argument_list|()
operator|.
name|getFont
argument_list|()
decl_stmt|;
comment|// calculate the fontSize (because 0 = autosize)
name|float
name|fontSize
init|=
name|calculateFontSize
argument_list|(
name|font
argument_list|,
name|contentRect
argument_list|)
decl_stmt|;
comment|// for a listbox generate the highlight rectangle for the selected
comment|// options
if|if
condition|(
name|field
operator|instanceof
name|PDListBox
condition|)
block|{
name|insertGeneratedSelectionHighlight
argument_list|(
name|contents
argument_list|,
name|appearanceStream
argument_list|,
name|font
argument_list|,
name|fontSize
argument_list|)
expr_stmt|;
block|}
comment|// start the text output
name|contents
operator|.
name|beginText
argument_list|()
expr_stmt|;
comment|// write the /DA string
name|field
operator|.
name|getDefaultAppearanceString
argument_list|()
operator|.
name|writeTo
argument_list|(
name|contents
argument_list|,
name|fontSize
argument_list|)
expr_stmt|;
comment|// calculate the y-position of the baseline
name|float
name|y
decl_stmt|;
comment|// calculate font metrics at font size
name|float
name|fontScaleY
init|=
name|fontSize
operator|/
name|FONTSCALE
decl_stmt|;
name|float
name|fontBoundingBoxAtSize
init|=
name|font
operator|.
name|getBoundingBox
argument_list|()
operator|.
name|getHeight
argument_list|()
operator|*
name|fontScaleY
decl_stmt|;
name|float
name|fontCapAtSize
init|=
name|font
operator|.
name|getFontDescriptor
argument_list|()
operator|.
name|getCapHeight
argument_list|()
operator|*
name|fontScaleY
decl_stmt|;
name|float
name|fontDescentAtSize
init|=
name|font
operator|.
name|getFontDescriptor
argument_list|()
operator|.
name|getDescent
argument_list|()
operator|*
name|fontScaleY
decl_stmt|;
if|if
condition|(
name|field
operator|instanceof
name|PDTextField
operator|&&
operator|(
operator|(
name|PDTextField
operator|)
name|field
operator|)
operator|.
name|isMultiline
argument_list|()
condition|)
block|{
name|y
operator|=
name|contentRect
operator|.
name|getUpperRightY
argument_list|()
operator|-
name|fontBoundingBoxAtSize
expr_stmt|;
block|}
else|else
block|{
comment|// Adobe shows the text 'shiftet up' in case the caps don't fit into the clipping area
if|if
condition|(
name|fontCapAtSize
operator|>
name|clipRect
operator|.
name|getHeight
argument_list|()
condition|)
block|{
name|y
operator|=
name|clipRect
operator|.
name|getLowerLeftY
argument_list|()
operator|+
operator|-
name|fontDescentAtSize
expr_stmt|;
block|}
else|else
block|{
comment|// calculate the position based on the content rectangle
name|y
operator|=
name|clipRect
operator|.
name|getLowerLeftY
argument_list|()
operator|+
operator|(
name|clipRect
operator|.
name|getHeight
argument_list|()
operator|-
name|fontCapAtSize
operator|)
operator|/
literal|2
expr_stmt|;
comment|// check to ensure that ascents and descents fit
if|if
condition|(
name|y
operator|-
name|clipRect
operator|.
name|getLowerLeftY
argument_list|()
operator|<
operator|-
name|fontDescentAtSize
condition|)
block|{
name|float
name|fontDescentBased
init|=
operator|-
name|fontDescentAtSize
operator|+
name|contentRect
operator|.
name|getLowerLeftY
argument_list|()
decl_stmt|;
name|float
name|fontCapBased
init|=
name|contentRect
operator|.
name|getHeight
argument_list|()
operator|-
name|contentRect
operator|.
name|getLowerLeftY
argument_list|()
operator|-
name|fontCapAtSize
decl_stmt|;
name|y
operator|=
name|Math
operator|.
name|min
argument_list|(
name|fontDescentBased
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|y
argument_list|,
name|fontCapBased
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// show the text
name|float
name|x
init|=
name|contentRect
operator|.
name|getLowerLeftX
argument_list|()
decl_stmt|;
comment|// special handling for comb boxes as these are like table cells with individual
comment|// chars
if|if
condition|(
name|shallComb
argument_list|()
condition|)
block|{
name|insertGeneratedCombAppearance
argument_list|(
name|contents
argument_list|,
name|appearanceStream
argument_list|,
name|font
argument_list|,
name|fontSize
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|field
operator|instanceof
name|PDListBox
condition|)
block|{
name|insertGeneratedListboxAppearance
argument_list|(
name|contents
argument_list|,
name|appearanceStream
argument_list|,
name|contentRect
argument_list|,
name|font
argument_list|,
name|fontSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PlainText
name|textContent
init|=
operator|new
name|PlainText
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|AppearanceStyle
name|appearanceStyle
init|=
operator|new
name|AppearanceStyle
argument_list|()
decl_stmt|;
name|appearanceStyle
operator|.
name|setFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
name|appearanceStyle
operator|.
name|setFontSize
argument_list|(
name|fontSize
argument_list|)
expr_stmt|;
comment|// Adobe Acrobat uses the font's bounding box for the leading between the lines
name|appearanceStyle
operator|.
name|setLeading
argument_list|(
name|font
operator|.
name|getBoundingBox
argument_list|()
operator|.
name|getHeight
argument_list|()
operator|*
name|fontScaleY
argument_list|)
expr_stmt|;
name|PlainTextFormatter
name|formatter
init|=
operator|new
name|PlainTextFormatter
operator|.
name|Builder
argument_list|(
name|contents
argument_list|)
operator|.
name|style
argument_list|(
name|appearanceStyle
argument_list|)
operator|.
name|text
argument_list|(
name|textContent
argument_list|)
operator|.
name|width
argument_list|(
name|contentRect
operator|.
name|getWidth
argument_list|()
argument_list|)
operator|.
name|wrapLines
argument_list|(
name|isMultiLine
argument_list|()
argument_list|)
operator|.
name|initialOffset
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|.
name|textAlign
argument_list|(
name|field
operator|.
name|getQ
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|formatter
operator|.
name|format
argument_list|()
expr_stmt|;
block|}
name|contents
operator|.
name|endText
argument_list|()
expr_stmt|;
name|contents
operator|.
name|restoreGraphicsState
argument_list|()
expr_stmt|;
name|contents
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|AffineTransform
name|calculateMatrix
parameter_list|(
name|PDRectangle
name|bbox
parameter_list|,
name|int
name|rotation
parameter_list|)
block|{
if|if
condition|(
name|rotation
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|AffineTransform
argument_list|()
return|;
block|}
else|else
block|{
name|float
name|tx
init|=
literal|0
decl_stmt|,
name|ty
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|rotation
operator|==
literal|90
condition|)
block|{
name|tx
operator|=
name|bbox
operator|.
name|getUpperRightY
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rotation
operator|==
literal|180
condition|)
block|{
name|tx
operator|=
name|bbox
operator|.
name|getUpperRightY
argument_list|()
expr_stmt|;
name|ty
operator|=
name|bbox
operator|.
name|getUpperRightX
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rotation
operator|==
literal|270
condition|)
block|{
name|ty
operator|=
name|bbox
operator|.
name|getUpperRightX
argument_list|()
expr_stmt|;
block|}
name|Matrix
name|matrix
init|=
name|Matrix
operator|.
name|getRotateInstance
argument_list|(
name|Math
operator|.
name|toRadians
argument_list|(
name|rotation
argument_list|)
argument_list|,
name|tx
argument_list|,
name|ty
argument_list|)
decl_stmt|;
return|return
name|matrix
operator|.
name|createAffineTransform
argument_list|()
return|;
block|}
block|}
specifier|private
name|boolean
name|isMultiLine
parameter_list|()
block|{
return|return
name|field
operator|instanceof
name|PDTextField
operator|&&
operator|(
operator|(
name|PDTextField
operator|)
name|field
operator|)
operator|.
name|isMultiline
argument_list|()
return|;
block|}
comment|/**      * Determine if the appearance shall provide a comb output.      *       *<p>      * May be set only if the MaxLen entry is present in the text field dictionary      * and if the Multiline, Password, and FileSelect flags are clear.      * If set, the field shall be automatically divided into as many equally spaced positions,      * or combs, as the value of MaxLen, and the text is laid out into those combs.      *</p>      *       * @return the comb state      */
specifier|private
name|boolean
name|shallComb
parameter_list|()
block|{
return|return
name|field
operator|instanceof
name|PDTextField
operator|&&
operator|(
operator|(
name|PDTextField
operator|)
name|field
operator|)
operator|.
name|isComb
argument_list|()
operator|&&
operator|!
operator|(
operator|(
name|PDTextField
operator|)
name|field
operator|)
operator|.
name|isMultiline
argument_list|()
operator|&&
operator|!
operator|(
operator|(
name|PDTextField
operator|)
name|field
operator|)
operator|.
name|isPassword
argument_list|()
operator|&&
operator|!
operator|(
operator|(
name|PDTextField
operator|)
name|field
operator|)
operator|.
name|isFileSelect
argument_list|()
return|;
block|}
comment|/**      * Generate the appearance for comb fields.      *       * @param contents the content stream to write to      * @param appearanceStream the appearance stream used      * @param font the font to be used      * @param fontSize the font size to be used      * @throws IOException      */
specifier|private
name|void
name|insertGeneratedCombAppearance
parameter_list|(
name|PDAppearanceContentStream
name|contents
parameter_list|,
name|PDAppearanceStream
name|appearanceStream
parameter_list|,
name|PDFont
name|font
parameter_list|,
name|float
name|fontSize
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO:    Currently the quadding is not taken into account
comment|//          so the comb is always filled from left to right.
name|int
name|maxLen
init|=
operator|(
operator|(
name|PDTextField
operator|)
name|field
operator|)
operator|.
name|getMaxLen
argument_list|()
decl_stmt|;
name|int
name|numChars
init|=
name|Math
operator|.
name|min
argument_list|(
name|value
operator|.
name|length
argument_list|()
argument_list|,
name|maxLen
argument_list|)
decl_stmt|;
name|PDRectangle
name|paddingEdge
init|=
name|applyPadding
argument_list|(
name|appearanceStream
operator|.
name|getBBox
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|float
name|combWidth
init|=
name|appearanceStream
operator|.
name|getBBox
argument_list|()
operator|.
name|getWidth
argument_list|()
operator|/
name|maxLen
decl_stmt|;
name|float
name|ascentAtFontSize
init|=
name|font
operator|.
name|getFontDescriptor
argument_list|()
operator|.
name|getAscent
argument_list|()
operator|/
name|FONTSCALE
operator|*
name|fontSize
decl_stmt|;
name|float
name|baselineOffset
init|=
name|paddingEdge
operator|.
name|getLowerLeftY
argument_list|()
operator|+
operator|(
name|appearanceStream
operator|.
name|getBBox
argument_list|()
operator|.
name|getHeight
argument_list|()
operator|-
name|ascentAtFontSize
operator|)
operator|/
literal|2
decl_stmt|;
name|float
name|prevCharWidth
init|=
literal|0f
decl_stmt|;
name|float
name|currCharWidth
init|=
literal|0f
decl_stmt|;
name|float
name|xOffset
init|=
name|combWidth
operator|/
literal|2
decl_stmt|;
name|String
name|combString
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numChars
condition|;
name|i
operator|++
control|)
block|{
name|combString
operator|=
name|value
operator|.
name|substring
argument_list|(
name|i
argument_list|,
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|currCharWidth
operator|=
name|font
operator|.
name|getStringWidth
argument_list|(
name|combString
argument_list|)
operator|/
name|FONTSCALE
operator|*
name|fontSize
operator|/
literal|2
expr_stmt|;
name|xOffset
operator|=
name|xOffset
operator|+
name|prevCharWidth
operator|/
literal|2
operator|-
name|currCharWidth
operator|/
literal|2
expr_stmt|;
name|contents
operator|.
name|newLineAtOffset
argument_list|(
name|xOffset
argument_list|,
name|baselineOffset
argument_list|)
expr_stmt|;
name|contents
operator|.
name|showText
argument_list|(
name|combString
argument_list|)
expr_stmt|;
name|baselineOffset
operator|=
literal|0
expr_stmt|;
name|prevCharWidth
operator|=
name|currCharWidth
expr_stmt|;
name|xOffset
operator|=
name|combWidth
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|insertGeneratedSelectionHighlight
parameter_list|(
name|PDAppearanceContentStream
name|contents
parameter_list|,
name|PDAppearanceStream
name|appearanceStream
parameter_list|,
name|PDFont
name|font
parameter_list|,
name|float
name|fontSize
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|indexEntries
init|=
operator|(
operator|(
name|PDListBox
operator|)
name|field
operator|)
operator|.
name|getSelectedOptionsIndex
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
operator|(
operator|(
name|PDListBox
operator|)
name|field
operator|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|options
init|=
operator|(
operator|(
name|PDListBox
operator|)
name|field
operator|)
operator|.
name|getOptionsExportValues
argument_list|()
decl_stmt|;
comment|// TODO: support highlighting multiple items if multiselect is set
name|int
name|selectedIndex
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|values
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|options
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|indexEntries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|selectedIndex
operator|=
name|indexEntries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|selectedIndex
operator|=
name|options
operator|.
name|indexOf
argument_list|(
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// The first entry which shall be presented might be adjusted by the optional TI key
comment|// If this entry is present the first entry to be displayed is the keys value otherwise
comment|// display starts with the first entry in Opt.
name|int
name|topIndex
init|=
operator|(
operator|(
name|PDListBox
operator|)
name|field
operator|)
operator|.
name|getTopIndex
argument_list|()
decl_stmt|;
name|float
name|highlightBoxHeight
init|=
name|font
operator|.
name|getBoundingBox
argument_list|()
operator|.
name|getHeight
argument_list|()
operator|*
name|fontSize
operator|/
name|FONTSCALE
operator|-
literal|2f
decl_stmt|;
comment|// the padding area
name|PDRectangle
name|paddingEdge
init|=
name|applyPadding
argument_list|(
name|appearanceStream
operator|.
name|getBBox
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|contents
operator|.
name|setNonStrokingColor
argument_list|(
name|HIGHLIGHT_COLOR
index|[
literal|0
index|]
argument_list|,
name|HIGHLIGHT_COLOR
index|[
literal|1
index|]
argument_list|,
name|HIGHLIGHT_COLOR
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|contents
operator|.
name|addRect
argument_list|(
name|paddingEdge
operator|.
name|getLowerLeftX
argument_list|()
argument_list|,
name|paddingEdge
operator|.
name|getUpperRightY
argument_list|()
operator|-
name|highlightBoxHeight
operator|*
operator|(
name|selectedIndex
operator|-
name|topIndex
operator|+
literal|1
operator|)
argument_list|,
name|paddingEdge
operator|.
name|getWidth
argument_list|()
argument_list|,
name|highlightBoxHeight
argument_list|)
expr_stmt|;
name|contents
operator|.
name|fill
argument_list|()
expr_stmt|;
name|contents
operator|.
name|setNonStrokingColor
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|insertGeneratedListboxAppearance
parameter_list|(
name|PDAppearanceContentStream
name|contents
parameter_list|,
name|PDAppearanceStream
name|appearanceStream
parameter_list|,
name|PDRectangle
name|contentRect
parameter_list|,
name|PDFont
name|font
parameter_list|,
name|float
name|fontSize
parameter_list|)
throws|throws
name|IOException
block|{
name|contents
operator|.
name|setNonStrokingColor
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|int
name|q
init|=
name|field
operator|.
name|getQ
argument_list|()
decl_stmt|;
if|if
condition|(
name|q
operator|==
name|PDVariableText
operator|.
name|QUADDING_CENTERED
operator|||
name|q
operator|==
name|PDVariableText
operator|.
name|QUADDING_RIGHT
condition|)
block|{
name|float
name|fieldWidth
init|=
name|appearanceStream
operator|.
name|getBBox
argument_list|()
operator|.
name|getWidth
argument_list|()
decl_stmt|;
name|float
name|stringWidth
init|=
operator|(
name|font
operator|.
name|getStringWidth
argument_list|(
name|value
argument_list|)
operator|/
name|FONTSCALE
operator|)
operator|*
name|fontSize
decl_stmt|;
name|float
name|adjustAmount
init|=
name|fieldWidth
operator|-
name|stringWidth
operator|-
literal|4
decl_stmt|;
if|if
condition|(
name|q
operator|==
name|PDVariableText
operator|.
name|QUADDING_CENTERED
condition|)
block|{
name|adjustAmount
operator|=
name|adjustAmount
operator|/
literal|2.0f
expr_stmt|;
block|}
name|contents
operator|.
name|newLineAtOffset
argument_list|(
name|adjustAmount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|q
operator|!=
name|PDVariableText
operator|.
name|QUADDING_LEFT
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error: Unknown justification value:"
operator|+
name|q
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|options
init|=
operator|(
operator|(
name|PDListBox
operator|)
name|field
operator|)
operator|.
name|getOptionsDisplayValues
argument_list|()
decl_stmt|;
name|int
name|numOptions
init|=
name|options
operator|.
name|size
argument_list|()
decl_stmt|;
name|float
name|yTextPos
init|=
name|contentRect
operator|.
name|getUpperRightY
argument_list|()
decl_stmt|;
name|int
name|topIndex
init|=
operator|(
operator|(
name|PDListBox
operator|)
name|field
operator|)
operator|.
name|getTopIndex
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|topIndex
init|;
name|i
operator|<
name|numOptions
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
name|topIndex
condition|)
block|{
name|yTextPos
operator|=
name|yTextPos
operator|-
name|font
operator|.
name|getFontDescriptor
argument_list|()
operator|.
name|getAscent
argument_list|()
operator|/
name|FONTSCALE
operator|*
name|fontSize
expr_stmt|;
block|}
else|else
block|{
name|yTextPos
operator|=
name|yTextPos
operator|-
name|font
operator|.
name|getBoundingBox
argument_list|()
operator|.
name|getHeight
argument_list|()
operator|/
name|FONTSCALE
operator|*
name|fontSize
expr_stmt|;
name|contents
operator|.
name|beginText
argument_list|()
expr_stmt|;
block|}
name|contents
operator|.
name|newLineAtOffset
argument_list|(
name|contentRect
operator|.
name|getLowerLeftX
argument_list|()
argument_list|,
name|yTextPos
argument_list|)
expr_stmt|;
name|contents
operator|.
name|showText
argument_list|(
name|options
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|-
name|topIndex
operator|!=
operator|(
name|numOptions
operator|-
literal|1
operator|)
condition|)
block|{
name|contents
operator|.
name|endText
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Writes the stream to the actual stream in the COSStream.      *      * @throws IOException If there is an error writing to the stream      */
specifier|private
name|void
name|writeToStream
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|PDAppearanceStream
name|appearanceStream
parameter_list|)
throws|throws
name|IOException
block|{
name|OutputStream
name|out
init|=
name|appearanceStream
operator|.
name|getCOSObject
argument_list|()
operator|.
name|createOutputStream
argument_list|()
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * My "not so great" method for calculating the fontsize. It does not work superb, but it      * handles ok.      *       * @return the calculated font-size      * @throws IOException If there is an error getting the font information.      */
specifier|private
name|float
name|calculateFontSize
parameter_list|(
name|PDFont
name|font
parameter_list|,
name|PDRectangle
name|contentRect
parameter_list|)
throws|throws
name|IOException
block|{
name|float
name|fontSize
init|=
name|defaultAppearance
operator|.
name|getFontSize
argument_list|()
decl_stmt|;
comment|// zero is special, it means the text is auto-sized
if|if
condition|(
name|fontSize
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|isMultiLine
argument_list|()
condition|)
block|{
comment|// Acrobat defaults to 12 for multiline text with size 0
return|return
name|DEFAULT_FONT_SIZE
return|;
block|}
else|else
block|{
name|float
name|yScalingFactor
init|=
name|FONTSCALE
operator|*
name|font
operator|.
name|getFontMatrix
argument_list|()
operator|.
name|getScaleY
argument_list|()
decl_stmt|;
name|float
name|xScalingFactor
init|=
name|FONTSCALE
operator|*
name|font
operator|.
name|getFontMatrix
argument_list|()
operator|.
name|getScaleX
argument_list|()
decl_stmt|;
comment|// fit width
name|float
name|width
init|=
name|font
operator|.
name|getStringWidth
argument_list|(
name|value
argument_list|)
operator|*
name|font
operator|.
name|getFontMatrix
argument_list|()
operator|.
name|getScaleX
argument_list|()
decl_stmt|;
name|float
name|widthBasedFontSize
init|=
name|contentRect
operator|.
name|getWidth
argument_list|()
operator|/
name|width
operator|*
name|xScalingFactor
decl_stmt|;
comment|// fit height
name|float
name|height
init|=
operator|(
name|font
operator|.
name|getFontDescriptor
argument_list|()
operator|.
name|getCapHeight
argument_list|()
operator|+
operator|-
name|font
operator|.
name|getFontDescriptor
argument_list|()
operator|.
name|getDescent
argument_list|()
operator|)
operator|*
name|font
operator|.
name|getFontMatrix
argument_list|()
operator|.
name|getScaleY
argument_list|()
decl_stmt|;
if|if
condition|(
name|height
operator|<=
literal|0
condition|)
block|{
name|height
operator|=
name|font
operator|.
name|getBoundingBox
argument_list|()
operator|.
name|getHeight
argument_list|()
operator|*
name|font
operator|.
name|getFontMatrix
argument_list|()
operator|.
name|getScaleY
argument_list|()
expr_stmt|;
block|}
name|float
name|heightBasedFontSize
init|=
name|contentRect
operator|.
name|getHeight
argument_list|()
operator|/
name|height
operator|*
name|yScalingFactor
decl_stmt|;
return|return
name|Math
operator|.
name|min
argument_list|(
name|heightBasedFontSize
argument_list|,
name|widthBasedFontSize
argument_list|)
return|;
block|}
block|}
return|return
name|fontSize
return|;
block|}
comment|/**      * Resolve the bounding box.      *       * @param fieldWidget the annotation widget.      * @param appearanceStream the annotations appearance stream.      * @return the resolved boundingBox.      */
specifier|private
name|PDRectangle
name|resolveBoundingBox
parameter_list|(
name|PDAnnotationWidget
name|fieldWidget
parameter_list|,
name|PDAppearanceStream
name|appearanceStream
parameter_list|)
block|{
name|PDRectangle
name|boundingBox
init|=
name|appearanceStream
operator|.
name|getBBox
argument_list|()
decl_stmt|;
if|if
condition|(
name|boundingBox
operator|==
literal|null
condition|)
block|{
name|boundingBox
operator|=
name|fieldWidget
operator|.
name|getRectangle
argument_list|()
operator|.
name|createRetranslatedRectangle
argument_list|()
expr_stmt|;
block|}
return|return
name|boundingBox
return|;
block|}
comment|/**      * Apply padding to a box.      *       * @param box box      * @return the padded box.      */
specifier|private
name|PDRectangle
name|applyPadding
parameter_list|(
name|PDRectangle
name|box
parameter_list|,
name|float
name|padding
parameter_list|)
block|{
return|return
operator|new
name|PDRectangle
argument_list|(
name|box
operator|.
name|getLowerLeftX
argument_list|()
operator|+
name|padding
argument_list|,
name|box
operator|.
name|getLowerLeftY
argument_list|()
operator|+
name|padding
argument_list|,
name|box
operator|.
name|getWidth
argument_list|()
operator|-
literal|2
operator|*
name|padding
argument_list|,
name|box
operator|.
name|getHeight
argument_list|()
operator|-
literal|2
operator|*
name|padding
argument_list|)
return|;
block|}
block|}
end_class

end_unit

