begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSNumber
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDRectangle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|form
operator|.
name|PDFormXObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|Matrix
import|;
end_import

begin_comment
comment|/**  * An appearance stream is a form XObject, a self-contained content stream that shall be rendered  * inside the annotation rectangle.  *  * @author Ben Litchfield  * @author John Hewson  */
end_comment

begin_class
specifier|public
class|class
name|PDAppearanceStream
extends|extends
name|PDFormXObject
block|{
specifier|private
specifier|final
name|PDAnnotation
name|parent
decl_stmt|;
comment|/**      * Creates a Form XObject for reading.      * @param stream The XObject stream      */
specifier|public
name|PDAppearanceStream
parameter_list|(
name|COSStream
name|stream
parameter_list|,
name|PDAnnotation
name|parent
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|PDStream
argument_list|(
name|stream
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
block|}
comment|/**      * Creates a Form Image XObject for writing, in the given document.      * @param document The current document      */
specifier|public
name|PDAppearanceStream
parameter_list|(
name|PDDocument
name|document
parameter_list|,
name|PDAnnotation
name|parent
parameter_list|)
block|{
name|super
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
block|}
comment|/**      * Returns the matrix "A", which transforms the appearance box to align with the edges of the      * annotation?s rectangle.      */
annotation|@
name|Override
specifier|public
name|Matrix
name|getMatrix
parameter_list|()
block|{
name|PDRectangle
name|bbox
init|=
name|getBBox
argument_list|()
decl_stmt|;
name|PDRectangle
name|rect
init|=
name|parent
operator|.
name|getRectangle
argument_list|()
decl_stmt|;
name|Matrix
name|matrix
init|=
name|getActualMatrix
argument_list|()
decl_stmt|;
comment|// transformed appearance box
name|PDRectangle
name|transformedBox
init|=
name|bbox
operator|.
name|transform
argument_list|(
name|matrix
argument_list|)
decl_stmt|;
comment|// compute a matrix which scales and translates the transformed appearance box to align
comment|// with the edges of the annotation's rectangle
name|Matrix
name|a
init|=
name|Matrix
operator|.
name|getTranslatingInstance
argument_list|(
name|rect
operator|.
name|getLowerLeftX
argument_list|()
argument_list|,
name|rect
operator|.
name|getLowerLeftY
argument_list|()
argument_list|)
decl_stmt|;
name|a
operator|.
name|concatenate
argument_list|(
name|Matrix
operator|.
name|getScaleInstance
argument_list|(
name|rect
operator|.
name|getWidth
argument_list|()
operator|/
name|transformedBox
operator|.
name|getWidth
argument_list|()
argument_list|,
name|rect
operator|.
name|getHeight
argument_list|()
operator|/
name|transformedBox
operator|.
name|getHeight
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|concatenate
argument_list|(
name|Matrix
operator|.
name|getTranslatingInstance
argument_list|(
operator|-
name|transformedBox
operator|.
name|getLowerLeftX
argument_list|()
argument_list|,
operator|-
name|transformedBox
operator|.
name|getLowerLeftY
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|a
return|;
block|}
comment|/**      * Returns the actual /Matrix entry, unlike other forms this needs to be transformed using      * the parent annotation's /Rect before it can be used to render the content stream.      */
specifier|private
name|Matrix
name|getActualMatrix
parameter_list|()
block|{
name|COSArray
name|array
init|=
operator|(
name|COSArray
operator|)
name|getContentStream
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|MATRIX
argument_list|)
decl_stmt|;
if|if
condition|(
name|array
operator|!=
literal|null
condition|)
block|{
name|Matrix
name|matrix
init|=
operator|new
name|Matrix
argument_list|()
decl_stmt|;
name|matrix
operator|.
name|setValue
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|(
operator|(
name|COSNumber
operator|)
name|array
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
name|matrix
operator|.
name|setValue
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
operator|(
operator|(
name|COSNumber
operator|)
name|array
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
name|matrix
operator|.
name|setValue
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
operator|(
operator|(
name|COSNumber
operator|)
name|array
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
name|matrix
operator|.
name|setValue
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
operator|(
operator|(
name|COSNumber
operator|)
name|array
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|)
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
name|matrix
operator|.
name|setValue
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
operator|(
operator|(
name|COSNumber
operator|)
name|array
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|)
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
name|matrix
operator|.
name|setValue
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
operator|(
operator|(
name|COSNumber
operator|)
name|array
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|)
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|matrix
return|;
block|}
else|else
block|{
comment|// the default value is the identity matrix
return|return
operator|new
name|Matrix
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

