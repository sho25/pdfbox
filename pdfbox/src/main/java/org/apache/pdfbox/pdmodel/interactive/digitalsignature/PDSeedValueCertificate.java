begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2017 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|digitalsignature
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|COSArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|COSObjectable
import|;
end_import

begin_comment
comment|/**  * This class represents a certificate seed value dictionary that is in the seed value which puts  * constraints on certificates when signing documents.  *  * @author Hossam Hazem  */
end_comment

begin_class
specifier|public
class|class
name|PDSeedValueCertificate
implements|implements
name|COSObjectable
block|{
comment|/**      * A Ff flag.      */
specifier|public
specifier|static
specifier|final
name|int
name|FLAG_SUBJECT
init|=
literal|1
decl_stmt|;
comment|/**      * A Ff flag.      */
specifier|public
specifier|static
specifier|final
name|int
name|FLAG_ISSUER
init|=
literal|1
operator|<<
literal|1
decl_stmt|;
comment|/**      * A Ff flag.      */
specifier|public
specifier|static
specifier|final
name|int
name|FLAG_OID
init|=
literal|1
operator|<<
literal|2
decl_stmt|;
comment|/**      * A Ff flag.      */
specifier|public
specifier|static
specifier|final
name|int
name|FLAG_SUBJECT_DN
init|=
literal|1
operator|<<
literal|3
decl_stmt|;
comment|/**      * A Ff flag.      */
specifier|public
specifier|static
specifier|final
name|int
name|FLAG_KEY_USAGE
init|=
literal|1
operator|<<
literal|5
decl_stmt|;
comment|/**      * A Ff flag.      */
specifier|public
specifier|static
specifier|final
name|int
name|FLAG_URL
init|=
literal|1
operator|<<
literal|6
decl_stmt|;
specifier|private
specifier|final
name|COSDictionary
name|dictionary
decl_stmt|;
comment|/**      * Default constructor.      */
specifier|public
name|PDSeedValueCertificate
parameter_list|()
block|{
name|this
operator|.
name|dictionary
operator|=
operator|new
name|COSDictionary
argument_list|()
expr_stmt|;
name|this
operator|.
name|dictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|TYPE
argument_list|,
name|COSName
operator|.
name|SV_CERT
argument_list|)
expr_stmt|;
name|this
operator|.
name|dictionary
operator|.
name|setDirect
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor.      *      * @param dict The certificate seed value dictionary.      */
specifier|public
name|PDSeedValueCertificate
parameter_list|(
name|COSDictionary
name|dict
parameter_list|)
block|{
name|this
operator|.
name|dictionary
operator|=
name|dict
expr_stmt|;
name|this
operator|.
name|dictionary
operator|.
name|setDirect
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Convert this standard java object to a COS dictionary.      *      * @return The COS dictionary that matches this Java object.      */
annotation|@
name|Override
specifier|public
name|COSDictionary
name|getCOSObject
parameter_list|()
block|{
return|return
name|dictionary
return|;
block|}
comment|/**      *      * @return true if the Subject is required      */
specifier|public
name|boolean
name|isSubjectRequired
parameter_list|()
block|{
return|return
name|this
operator|.
name|getCOSObject
argument_list|()
operator|.
name|getFlag
argument_list|(
name|COSName
operator|.
name|FF
argument_list|,
name|FLAG_SUBJECT
argument_list|)
return|;
block|}
comment|/**      * set true if subject shall be required as a constraint on signature.      *      * @param flag if true, the specified Subject shall be enforced as a constraint.      */
specifier|public
name|void
name|setSubjectRequired
parameter_list|(
name|boolean
name|flag
parameter_list|)
block|{
name|this
operator|.
name|getCOSObject
argument_list|()
operator|.
name|setFlag
argument_list|(
name|COSName
operator|.
name|FF
argument_list|,
name|FLAG_SUBJECT
argument_list|,
name|flag
argument_list|)
expr_stmt|;
block|}
comment|/**      *      * @return true if the Issuer is required      */
specifier|public
name|boolean
name|isIssuerRequired
parameter_list|()
block|{
return|return
name|this
operator|.
name|getCOSObject
argument_list|()
operator|.
name|getFlag
argument_list|(
name|COSName
operator|.
name|FF
argument_list|,
name|FLAG_ISSUER
argument_list|)
return|;
block|}
comment|/**      * set true if Issuer shall be required as a constraint on signature.      *      * @param flag if true, the specified Issuer shall be enforced as a constraint.      */
specifier|public
name|void
name|setIssuerRequired
parameter_list|(
name|boolean
name|flag
parameter_list|)
block|{
name|this
operator|.
name|getCOSObject
argument_list|()
operator|.
name|setFlag
argument_list|(
name|COSName
operator|.
name|FF
argument_list|,
name|FLAG_ISSUER
argument_list|,
name|flag
argument_list|)
expr_stmt|;
block|}
comment|/**      *      * @return true if the OID is required      */
specifier|public
name|boolean
name|isOIDRequired
parameter_list|()
block|{
return|return
name|this
operator|.
name|getCOSObject
argument_list|()
operator|.
name|getFlag
argument_list|(
name|COSName
operator|.
name|FF
argument_list|,
name|FLAG_OID
argument_list|)
return|;
block|}
comment|/**      * set true if OID shall be required as a constraint on signature.      *      * @param flag if true, the specified OID shall be enforced as a constraint.      */
specifier|public
name|void
name|setOIDRequired
parameter_list|(
name|boolean
name|flag
parameter_list|)
block|{
name|this
operator|.
name|getCOSObject
argument_list|()
operator|.
name|setFlag
argument_list|(
name|COSName
operator|.
name|FF
argument_list|,
name|FLAG_OID
argument_list|,
name|flag
argument_list|)
expr_stmt|;
block|}
comment|/**      *      * @return true if the Subject DN is required      */
specifier|public
name|boolean
name|isSubjectDNRequired
parameter_list|()
block|{
return|return
name|this
operator|.
name|getCOSObject
argument_list|()
operator|.
name|getFlag
argument_list|(
name|COSName
operator|.
name|FF
argument_list|,
name|FLAG_SUBJECT_DN
argument_list|)
return|;
block|}
comment|/**      * set true if subject DN shall be required as a constraint on signature.      *      * @param flag if true, the specified Subject DN shall be enforced as a constraint.      */
specifier|public
name|void
name|setSubjectDNRequired
parameter_list|(
name|boolean
name|flag
parameter_list|)
block|{
name|this
operator|.
name|getCOSObject
argument_list|()
operator|.
name|setFlag
argument_list|(
name|COSName
operator|.
name|FF
argument_list|,
name|FLAG_SUBJECT_DN
argument_list|,
name|flag
argument_list|)
expr_stmt|;
block|}
comment|/**      *      * @return true if the KeyUsage is required      */
specifier|public
name|boolean
name|isKeyUsageRequired
parameter_list|()
block|{
return|return
name|this
operator|.
name|getCOSObject
argument_list|()
operator|.
name|getFlag
argument_list|(
name|COSName
operator|.
name|FF
argument_list|,
name|FLAG_KEY_USAGE
argument_list|)
return|;
block|}
comment|/**      * set true if KeyUsage shall be required as a constraint on signature.      *      * @param flag if true, the specified KeyUsage shall be enforced as a constraint.      */
specifier|public
name|void
name|setKeyUsageRequired
parameter_list|(
name|boolean
name|flag
parameter_list|)
block|{
name|this
operator|.
name|getCOSObject
argument_list|()
operator|.
name|setFlag
argument_list|(
name|COSName
operator|.
name|FF
argument_list|,
name|FLAG_KEY_USAGE
argument_list|,
name|flag
argument_list|)
expr_stmt|;
block|}
comment|/**      *      * @return true if the URL is required      */
specifier|public
name|boolean
name|isURLRequired
parameter_list|()
block|{
return|return
name|this
operator|.
name|getCOSObject
argument_list|()
operator|.
name|getFlag
argument_list|(
name|COSName
operator|.
name|FF
argument_list|,
name|FLAG_URL
argument_list|)
return|;
block|}
comment|/**      * set true if URL shall be required as a constraint on signature.      *      * @param flag if true, the specified URL shall be enforced as a constraint.      */
specifier|public
name|void
name|setURLRequired
parameter_list|(
name|boolean
name|flag
parameter_list|)
block|{
name|this
operator|.
name|getCOSObject
argument_list|()
operator|.
name|setFlag
argument_list|(
name|COSName
operator|.
name|FF
argument_list|,
name|FLAG_URL
argument_list|,
name|flag
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns list of byte arrays that contains DER-encoded X.509v3 certificates      */
specifier|public
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|getSubject
parameter_list|()
block|{
name|COSBase
name|base
init|=
name|this
operator|.
name|dictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|SUBJECT
argument_list|)
decl_stmt|;
if|if
condition|(
name|base
operator|instanceof
name|COSArray
condition|)
block|{
name|COSArray
name|array
init|=
operator|(
name|COSArray
operator|)
name|base
decl_stmt|;
return|return
name|getListOfByteArraysFromCOSArray
argument_list|(
name|array
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * (Optional) A list of byte arrays containing DER-encoded X.509v3 certificates that are      * acceptable for signing. if      *<b>Subject</b> is not null and {@link #isSubjectRequired()} is true then the subject      * constraint is enforced on the subjects in this array subjects.      *      * @param subjects list of byte arrays containing DER-encoded X.509v3 certificates that are      * acceptable for signing.      */
specifier|public
name|void
name|setSubject
parameter_list|(
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|subjects
parameter_list|)
block|{
name|COSArray
name|array
init|=
operator|new
name|COSArray
argument_list|()
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|subject
range|:
name|subjects
control|)
block|{
name|array
operator|.
name|add
argument_list|(
operator|new
name|COSString
argument_list|(
name|subject
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|dictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|SUBJECT
argument_list|,
name|array
argument_list|)
expr_stmt|;
block|}
comment|/**      * (Optional) byte array containing DER-encoded X.509v3 certificate that is acceptable for      * signing. works like {@link #setSubject(List)} but one byte array      *      * @param subject byte array containing DER-encoded X.509v3 certificate      */
specifier|public
name|void
name|addSubject
parameter_list|(
name|byte
index|[]
name|subject
parameter_list|)
block|{
name|COSBase
name|base
init|=
name|this
operator|.
name|dictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|SUBJECT
argument_list|)
decl_stmt|;
name|COSArray
name|array
decl_stmt|;
if|if
condition|(
name|base
operator|instanceof
name|COSArray
condition|)
block|{
name|array
operator|=
operator|(
name|COSArray
operator|)
name|base
expr_stmt|;
block|}
else|else
block|{
name|array
operator|=
operator|new
name|COSArray
argument_list|()
expr_stmt|;
block|}
name|COSString
name|string
init|=
operator|new
name|COSString
argument_list|(
name|subject
argument_list|)
decl_stmt|;
name|array
operator|.
name|add
argument_list|(
name|string
argument_list|)
expr_stmt|;
name|this
operator|.
name|dictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|SUBJECT
argument_list|,
name|array
argument_list|)
expr_stmt|;
block|}
comment|/**      * removes a subject from the list      *      * @param subject byte array containing DER-encoded X.509v3 certificate      */
specifier|public
name|void
name|removeSubject
parameter_list|(
name|byte
index|[]
name|subject
parameter_list|)
block|{
name|COSBase
name|base
init|=
name|this
operator|.
name|dictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|SUBJECT
argument_list|)
decl_stmt|;
if|if
condition|(
name|base
operator|instanceof
name|COSArray
condition|)
block|{
name|COSArray
name|array
init|=
operator|(
name|COSArray
operator|)
name|base
decl_stmt|;
name|array
operator|.
name|remove
argument_list|(
operator|new
name|COSString
argument_list|(
name|subject
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns list of maps that contains subject distinguished names like [(cn: John Doe, o: Doe),      * (cn: John Smith)] both keys are typically of the form 'cn', 'o', 'email', '2.5.4.43'; and      * values are text strings.      */
specifier|public
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|getSubjectDN
parameter_list|()
block|{
name|COSBase
name|base
init|=
name|this
operator|.
name|dictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|SUBJECT_DN
argument_list|)
decl_stmt|;
if|if
condition|(
name|base
operator|instanceof
name|COSArray
condition|)
block|{
name|COSArray
name|cosArray
init|=
operator|(
name|COSArray
operator|)
name|base
decl_stmt|;
name|List
name|subjectDNList
init|=
name|cosArray
operator|.
name|toList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|subjectDNItem
range|:
name|subjectDNList
control|)
block|{
if|if
condition|(
name|subjectDNItem
operator|instanceof
name|COSDictionary
condition|)
block|{
name|COSDictionary
name|subjectDNItemDict
init|=
operator|(
name|COSDictionary
operator|)
name|subjectDNItem
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|subjectDNMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|COSName
name|key
range|:
name|subjectDNItemDict
operator|.
name|keySet
argument_list|()
control|)
block|{
name|subjectDNMap
operator|.
name|put
argument_list|(
name|key
operator|.
name|getName
argument_list|()
argument_list|,
name|subjectDNItemDict
operator|.
name|getString
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|add
argument_list|(
name|subjectDNMap
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * (Optional; PDF 1.7) A list of maps, where each map contains key value pairs, that specify the      * Subject Distinguished Name (DN) that must be present within the certificate for it to be      * acceptable for signing. The certificate must at a minimum contain all the attributes      * specified in one of the maps entered.      *      * @param subjectDN list of maps that contains subject distinguished names      */
specifier|public
name|void
name|setSubjectDN
parameter_list|(
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|subjectDN
parameter_list|)
block|{
name|List
argument_list|<
name|COSDictionary
argument_list|>
name|subjectDNDict
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|subjectDNItem
range|:
name|subjectDN
control|)
block|{
name|COSDictionary
name|dict
init|=
operator|new
name|COSDictionary
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|subjectDNItem
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|dict
operator|.
name|setItem
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|COSString
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|subjectDNDict
operator|.
name|add
argument_list|(
name|dict
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|dictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|SUBJECT_DN
argument_list|,
name|COSArrayList
operator|.
name|converterToCOSArray
argument_list|(
name|subjectDNDict
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns list of key usages of certificate strings where each string is 9 characters long and      * each character is one of these values {0, 1, X} 0 for must not set, 1 for must set, X for      * don't care. each index in the string represents a key usage:      *<ol>      *<li>digitalSignature</li>      *<li>non-Repudiation</li>      *<li>keyEncipherment</li>      *<li>dataEncipherment</li>      *<li>keyAgreement</li>      *<li>keyCertSign</li>      *<li>cRLSign</li>      *<li>encipherOnly</li>      *<li>decipherOnly</li>      *</ol>      */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getKeyUsage
parameter_list|()
block|{
name|COSBase
name|base
init|=
name|this
operator|.
name|dictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|KEY_USAGE
argument_list|)
decl_stmt|;
if|if
condition|(
name|base
operator|instanceof
name|COSArray
condition|)
block|{
name|COSArray
name|array
init|=
operator|(
name|COSArray
operator|)
name|base
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|keyUsageExtensions
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|COSBase
name|item
range|:
name|array
control|)
block|{
if|if
condition|(
name|item
operator|instanceof
name|COSString
condition|)
block|{
name|keyUsageExtensions
operator|.
name|add
argument_list|(
operator|(
operator|(
name|COSString
operator|)
name|item
operator|)
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|keyUsageExtensions
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * (Optional; PDF 1.7) A List of ASCII strings, where each string specifies an acceptable      * key-usage extension that must be present in the signing certificate. Multiple strings specify      * a range of acceptable key-usage extensions; where each string 9 characters long and each      * character is one of these values {0, 1, X} 0 for must not set, 1 for must set, X for don't      * care. each index in the string represents a key usage:      *<ol>      *<li>digitalSignature</li>      *<li>non-Repudiation</li>      *<li>keyEncipherment</li>      *<li>dataEncipherment</li>      *<li>keyAgreement</li>      *<li>keyCertSign</li>      *<li>cRLSign</li>      *<li>encipherOnly</li>      *<li>decipherOnly</li>      *</ol>      *      * @param keyUsageExtensions list of ASCII strings that consists only of {0, 1, X}      */
specifier|public
name|void
name|setKeyUsage
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|keyUsageExtensions
parameter_list|)
block|{
name|this
operator|.
name|dictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|KEY_USAGE
argument_list|,
name|COSArrayList
operator|.
name|converterToCOSArray
argument_list|(
name|keyUsageExtensions
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * (Optional; PDF 1.7) specifies an acceptable key-usage extension that must be presennt in the      * signing certificate for works like {@link #setKeyUsage(List)} but takes only one string      *      * @param keyUsageExtension String that consist only of {0, 1, X}      */
specifier|public
name|void
name|addKeyUsage
parameter_list|(
name|String
name|keyUsageExtension
parameter_list|)
block|{
name|String
name|allowedChars
init|=
literal|"01X"
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|keyUsageExtension
operator|.
name|length
argument_list|()
condition|;
name|c
operator|++
control|)
block|{
if|if
condition|(
name|allowedChars
operator|.
name|indexOf
argument_list|(
name|keyUsageExtension
operator|.
name|charAt
argument_list|(
name|c
argument_list|)
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"characters can only be 0, 1, X"
argument_list|)
throw|;
block|}
block|}
name|COSBase
name|base
init|=
name|this
operator|.
name|dictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|KEY_USAGE
argument_list|)
decl_stmt|;
name|COSArray
name|array
decl_stmt|;
if|if
condition|(
name|base
operator|instanceof
name|COSArray
condition|)
block|{
name|array
operator|=
operator|(
name|COSArray
operator|)
name|base
expr_stmt|;
block|}
else|else
block|{
name|array
operator|=
operator|new
name|COSArray
argument_list|()
expr_stmt|;
block|}
name|COSString
name|string
init|=
operator|new
name|COSString
argument_list|(
name|keyUsageExtension
argument_list|)
decl_stmt|;
name|array
operator|.
name|add
argument_list|(
name|string
argument_list|)
expr_stmt|;
name|this
operator|.
name|dictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|KEY_USAGE
argument_list|,
name|array
argument_list|)
expr_stmt|;
block|}
comment|/**      * works like {@link #addKeyUsage(String)} but enters each character separately      *      * @param digitalSignature char that is one of {0, 1, X}      * @param nonRepudiation char that is one of {0, 1, X}      * @param keyEncipherment char that is one of {0, 1, X}      * @param dataEncipherment char that is one of {0, 1, X}      * @param keyAgreement char that is one of {0, 1, X}      * @param keyCertSign char that is one of {0, 1, X}      * @param cRLSign char that is one of {0, 1, X}      * @param encipherOnly char that is one of {0, 1, X}      * @param decipherOnly char that is one of {0, 1, X}      */
specifier|public
name|void
name|addKeyUsage
parameter_list|(
name|char
name|digitalSignature
parameter_list|,
name|char
name|nonRepudiation
parameter_list|,
name|char
name|keyEncipherment
parameter_list|,
name|char
name|dataEncipherment
parameter_list|,
name|char
name|keyAgreement
parameter_list|,
name|char
name|keyCertSign
parameter_list|,
name|char
name|cRLSign
parameter_list|,
name|char
name|encipherOnly
parameter_list|,
name|char
name|decipherOnly
parameter_list|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|digitalSignature
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|nonRepudiation
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|keyEncipherment
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|dataEncipherment
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|keyAgreement
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|keyCertSign
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|cRLSign
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|encipherOnly
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|decipherOnly
argument_list|)
expr_stmt|;
name|addKeyUsage
argument_list|(
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Removes a key usage extension      *      * @param keyUsageExtension ASCII string that consists of {0, 1, X}      */
specifier|public
name|void
name|removeKeyUsage
parameter_list|(
name|String
name|keyUsageExtension
parameter_list|)
block|{
name|COSBase
name|base
init|=
name|this
operator|.
name|dictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|KEY_USAGE
argument_list|)
decl_stmt|;
if|if
condition|(
name|base
operator|instanceof
name|COSArray
condition|)
block|{
name|COSArray
name|array
init|=
operator|(
name|COSArray
operator|)
name|base
decl_stmt|;
name|array
operator|.
name|remove
argument_list|(
operator|new
name|COSString
argument_list|(
name|keyUsageExtension
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns list of array of bytes of DER-encoded X.509v3 certificates      */
specifier|public
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|getIssuer
parameter_list|()
block|{
name|COSBase
name|base
init|=
name|this
operator|.
name|dictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|ISSUER
argument_list|)
decl_stmt|;
if|if
condition|(
name|base
operator|instanceof
name|COSArray
condition|)
block|{
name|COSArray
name|array
init|=
operator|(
name|COSArray
operator|)
name|base
decl_stmt|;
return|return
name|getListOfByteArraysFromCOSArray
argument_list|(
name|array
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * (Optional) A list of array of bytes containing DER-encoded X.509v3 certificates of acceptable      * issuers. If the signer’s certificate chains up to any of the specified issuers (either      * directly or indirectly), the certificate is considered acceptable for signing.      *      * @param issuers A list of byte array containing DER-encoded X.509v3 certificates      */
specifier|public
name|void
name|setIssuer
parameter_list|(
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|issuers
parameter_list|)
block|{
name|COSArray
name|array
init|=
operator|new
name|COSArray
argument_list|()
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|issuer
range|:
name|issuers
control|)
block|{
name|array
operator|.
name|add
argument_list|(
operator|new
name|COSString
argument_list|(
name|issuer
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|dictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|ISSUER
argument_list|,
name|array
argument_list|)
expr_stmt|;
block|}
comment|/**      * array of bytes containing DER-encoded X.509v3 certificates of acceptable issuers. If the      * signer’s certificate chains up to any of the specified issuers (either directly or      * indirectly), the certificate is considered acceptable for signing.      *      * @param issuer A byte array containing DER-encoded X.509v3 certificate      */
specifier|public
name|void
name|addIssuer
parameter_list|(
name|byte
index|[]
name|issuer
parameter_list|)
block|{
name|COSBase
name|base
init|=
name|this
operator|.
name|dictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|ISSUER
argument_list|)
decl_stmt|;
name|COSArray
name|array
decl_stmt|;
if|if
condition|(
name|base
operator|instanceof
name|COSArray
condition|)
block|{
name|array
operator|=
operator|(
name|COSArray
operator|)
name|base
expr_stmt|;
block|}
else|else
block|{
name|array
operator|=
operator|new
name|COSArray
argument_list|()
expr_stmt|;
block|}
name|COSString
name|string
init|=
operator|new
name|COSString
argument_list|(
name|issuer
argument_list|)
decl_stmt|;
name|array
operator|.
name|add
argument_list|(
name|string
argument_list|)
expr_stmt|;
name|this
operator|.
name|dictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|ISSUER
argument_list|,
name|array
argument_list|)
expr_stmt|;
block|}
comment|/**      * Removes an issuer from the issuers list      *      * @param issuer A byte array containing DER-encoded X.509v3 certificate      */
specifier|public
name|void
name|removeIssuer
parameter_list|(
name|byte
index|[]
name|issuer
parameter_list|)
block|{
name|COSBase
name|base
init|=
name|this
operator|.
name|dictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|ISSUER
argument_list|)
decl_stmt|;
if|if
condition|(
name|base
operator|instanceof
name|COSArray
condition|)
block|{
name|COSArray
name|array
init|=
operator|(
name|COSArray
operator|)
name|base
decl_stmt|;
name|array
operator|.
name|remove
argument_list|(
operator|new
name|COSString
argument_list|(
name|issuer
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns A list of array of bytes that contain Object Identifiers (OIDs) of the certificate      * policies that must be present in the signing certificate      */
specifier|public
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|getOID
parameter_list|()
block|{
name|COSBase
name|base
init|=
name|this
operator|.
name|dictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|OID
argument_list|)
decl_stmt|;
if|if
condition|(
name|base
operator|instanceof
name|COSArray
condition|)
block|{
name|COSArray
name|array
init|=
operator|(
name|COSArray
operator|)
name|base
decl_stmt|;
return|return
name|getListOfByteArraysFromCOSArray
argument_list|(
name|array
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * (Optional) A list of byte arrays that contain Object Identifiers (OIDs) of the certificate      * policies that must be present in the signing certificate. This field is only applicable if      * the value of Issuer is not empty.      *      * @param oidByteStrings list of byte arrays that contain OIDs      */
specifier|public
name|void
name|setOID
parameter_list|(
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|oidByteStrings
parameter_list|)
block|{
name|COSArray
name|array
init|=
operator|new
name|COSArray
argument_list|()
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|oid
range|:
name|oidByteStrings
control|)
block|{
name|array
operator|.
name|add
argument_list|(
operator|new
name|COSString
argument_list|(
name|oid
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|dictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|OID
argument_list|,
name|array
argument_list|)
expr_stmt|;
block|}
comment|/**      * works like {@link #setOID(List)} but for one object      *      * @param oid      */
specifier|public
name|void
name|addOID
parameter_list|(
name|byte
index|[]
name|oid
parameter_list|)
block|{
name|COSBase
name|base
init|=
name|this
operator|.
name|dictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|OID
argument_list|)
decl_stmt|;
name|COSArray
name|array
decl_stmt|;
if|if
condition|(
name|base
operator|instanceof
name|COSArray
condition|)
block|{
name|array
operator|=
operator|(
name|COSArray
operator|)
name|base
expr_stmt|;
block|}
else|else
block|{
name|array
operator|=
operator|new
name|COSArray
argument_list|()
expr_stmt|;
block|}
name|COSString
name|string
init|=
operator|new
name|COSString
argument_list|(
name|oid
argument_list|)
decl_stmt|;
name|array
operator|.
name|add
argument_list|(
name|string
argument_list|)
expr_stmt|;
name|this
operator|.
name|dictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|OID
argument_list|,
name|array
argument_list|)
expr_stmt|;
block|}
comment|/**      * removes an OID from the list      *      * @param oid      */
specifier|public
name|void
name|removeOID
parameter_list|(
name|byte
index|[]
name|oid
parameter_list|)
block|{
name|COSBase
name|base
init|=
name|this
operator|.
name|dictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|OID
argument_list|)
decl_stmt|;
if|if
condition|(
name|base
operator|instanceof
name|COSArray
condition|)
block|{
name|COSArray
name|array
init|=
operator|(
name|COSArray
operator|)
name|base
decl_stmt|;
name|array
operator|.
name|remove
argument_list|(
operator|new
name|COSString
argument_list|(
name|oid
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * returns String of the URL      */
specifier|public
name|String
name|getURL
parameter_list|()
block|{
return|return
name|this
operator|.
name|dictionary
operator|.
name|getString
argument_list|(
name|COSName
operator|.
name|URL
argument_list|)
return|;
block|}
comment|/**      * (Optional) A URL, the use for which is defined by the URLType entry.      *      * @param url String of the URL      */
specifier|public
name|void
name|setURL
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|this
operator|.
name|dictionary
operator|.
name|setString
argument_list|(
name|COSName
operator|.
name|URL
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
comment|/**      * A name indicating the usage of the URL entry. There are standard uses and there can be      * implementation-specific use for this URL. The following value specifies a valid standard      * usage:      *<ul>      *<li>Browser, The URL references content that should be displayed in a web browser to allow      * enrolling for a new credential if a matching credential is not found. The Ff attribute’s URL      * bit is ignored for this usage.</li>      *<li>ASSP, The URL references a signature web service that can be used for server-based      * signing. If the Ff attribute’s URL bit indicates that this is a required constraint, this      * implies that the credential used when signing must come from this server.</li>      *</ul>      *      * @return string of URL type      */
specifier|public
name|String
name|getURLType
parameter_list|()
block|{
return|return
name|this
operator|.
name|dictionary
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|URL_TYPE
argument_list|)
return|;
block|}
comment|/**      * (Optional; PDF 1.7) A name indicating the usage of the URL entry. There are standard uses and      * there can be implementation-specific uses for this URL. The following value specifies a valid      * standard usage:      *<ul>      *<li>Browser, The URL references content that should be displayed in a web browser to allow      * enrolling for a new credential if a matching credential is not found. The Ff attribute’s URL      * bit is ignored for this usage.</li>      *<li>ASSP, The URL references a signature web service that can be used for server-based      * signing. If the Ff attribute’s URL bit indicates that this is a required constraint, this      * implies that the credential used when signing must come from this server.</li>      *</ul>      * Third parties can extend the use of this attribute with their own attribute values, which      * must conform to the guidelines specified in      *<a href="http://www.adobe.com/content/dam/acom/en/devnet/pdf/PDF32000_2008.pdf#page=681">PDF      * Spec 1.7 Appendix E (PDF Name Registry)</a>      * if urlType is not set the default is Browser for URL      *      * @param urlType String of the urlType      */
specifier|public
name|void
name|setURLType
parameter_list|(
name|String
name|urlType
parameter_list|)
block|{
name|this
operator|.
name|dictionary
operator|.
name|setName
argument_list|(
name|COSName
operator|.
name|URL_TYPE
argument_list|,
name|urlType
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|getListOfByteArraysFromCOSArray
parameter_list|(
name|COSArray
name|array
parameter_list|)
block|{
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|result
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|COSBase
name|item
range|:
name|array
control|)
block|{
if|if
condition|(
name|item
operator|instanceof
name|COSString
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|(
operator|(
name|COSString
operator|)
name|item
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

