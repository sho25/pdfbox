begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|COSObjectable
import|;
end_import

begin_comment
comment|/**  * This class holds all of the name trees that are available at the document level.  *  * @author Ben Litchfield  */
end_comment

begin_class
specifier|public
class|class
name|PDDocumentNameDictionary
implements|implements
name|COSObjectable
block|{
specifier|private
specifier|final
name|COSDictionary
name|nameDictionary
decl_stmt|;
specifier|private
specifier|final
name|PDDocumentCatalog
name|catalog
decl_stmt|;
comment|/**      * Constructor.      *      * @param cat The document catalog that this dictionary is part of.      */
specifier|public
name|PDDocumentNameDictionary
parameter_list|(
name|PDDocumentCatalog
name|cat
parameter_list|)
block|{
name|COSBase
name|names
init|=
name|cat
operator|.
name|getCOSObject
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|NAMES
argument_list|)
decl_stmt|;
if|if
condition|(
name|names
operator|!=
literal|null
condition|)
block|{
name|nameDictionary
operator|=
operator|(
name|COSDictionary
operator|)
name|names
expr_stmt|;
block|}
else|else
block|{
name|nameDictionary
operator|=
operator|new
name|COSDictionary
argument_list|()
expr_stmt|;
name|cat
operator|.
name|getCOSObject
argument_list|()
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|NAMES
argument_list|,
name|nameDictionary
argument_list|)
expr_stmt|;
block|}
name|catalog
operator|=
name|cat
expr_stmt|;
block|}
comment|/**      * Constructor.      *      * @param cat The document that this dictionary is part of.      * @param names The names dictionary.      */
specifier|public
name|PDDocumentNameDictionary
parameter_list|(
name|PDDocumentCatalog
name|cat
parameter_list|,
name|COSDictionary
name|names
parameter_list|)
block|{
name|catalog
operator|=
name|cat
expr_stmt|;
name|nameDictionary
operator|=
name|names
expr_stmt|;
block|}
comment|/**      * Convert this standard java object to a COS object.      *      * @return The cos dictionary for this object.      */
annotation|@
name|Override
specifier|public
name|COSDictionary
name|getCOSObject
parameter_list|()
block|{
return|return
name|nameDictionary
return|;
block|}
comment|/**      * Get the destination named tree node. The values in this name tree will be      * PDPageDestination objects.      *      * @return The destination name tree node.      */
specifier|public
name|PDDestinationNameTreeNode
name|getDests
parameter_list|()
block|{
name|PDDestinationNameTreeNode
name|dests
init|=
literal|null
decl_stmt|;
name|COSDictionary
name|dic
init|=
operator|(
name|COSDictionary
operator|)
name|nameDictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|DESTS
argument_list|)
decl_stmt|;
comment|//The document catalog also contains the Dests entry sometimes
comment|//so check there as well.
if|if
condition|(
name|dic
operator|==
literal|null
condition|)
block|{
name|dic
operator|=
operator|(
name|COSDictionary
operator|)
name|catalog
operator|.
name|getCOSObject
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|DESTS
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dic
operator|!=
literal|null
condition|)
block|{
name|dests
operator|=
operator|new
name|PDDestinationNameTreeNode
argument_list|(
name|dic
argument_list|)
expr_stmt|;
block|}
return|return
name|dests
return|;
block|}
comment|/**      * Set the named destinations that are associated with this document.      *      * @param dests The destination names.      */
specifier|public
name|void
name|setDests
parameter_list|(
name|PDDestinationNameTreeNode
name|dests
parameter_list|)
block|{
name|nameDictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|DESTS
argument_list|,
name|dests
argument_list|)
expr_stmt|;
comment|//The dests can either be in the document catalog or in the
comment|//names dictionary, PDFBox will just maintain the one in the
comment|//names dictionary for now unless there is a reason to do
comment|//something else.
comment|//clear the potentially out of date Dests reference.
name|catalog
operator|.
name|getCOSObject
argument_list|()
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|DESTS
argument_list|,
operator|(
name|COSObjectable
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the embedded files named tree node. The values in this name tree will      * be PDComplexFileSpecification objects.      *      * @return The embedded files name tree node.      */
specifier|public
name|PDEmbeddedFilesNameTreeNode
name|getEmbeddedFiles
parameter_list|()
block|{
name|PDEmbeddedFilesNameTreeNode
name|retval
init|=
literal|null
decl_stmt|;
name|COSDictionary
name|dic
init|=
operator|(
name|COSDictionary
operator|)
name|nameDictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|EMBEDDED_FILES
argument_list|)
decl_stmt|;
if|if
condition|(
name|dic
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
operator|new
name|PDEmbeddedFilesNameTreeNode
argument_list|(
name|dic
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * Set the named embedded files that are associated with this document.      *      * @param ef The new embedded files      */
specifier|public
name|void
name|setEmbeddedFiles
parameter_list|(
name|PDEmbeddedFilesNameTreeNode
name|ef
parameter_list|)
block|{
name|nameDictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|EMBEDDED_FILES
argument_list|,
name|ef
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the document level javascript entries. The values in this name tree      * will be PDTextStream objects.      *      * @return The document level named javascript.      */
specifier|public
name|PDJavascriptNameTreeNode
name|getJavaScript
parameter_list|()
block|{
name|PDJavascriptNameTreeNode
name|retval
init|=
literal|null
decl_stmt|;
name|COSDictionary
name|dic
init|=
operator|(
name|COSDictionary
operator|)
name|nameDictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|JAVA_SCRIPT
argument_list|)
decl_stmt|;
if|if
condition|(
name|dic
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
operator|new
name|PDJavascriptNameTreeNode
argument_list|(
name|dic
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * Set the named javascript entries that are associated with this document.      *      * @param js The new Javascript entries.      */
specifier|public
name|void
name|setJavascript
parameter_list|(
name|PDJavascriptNameTreeNode
name|js
parameter_list|)
block|{
name|nameDictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|JAVA_SCRIPT
argument_list|,
name|js
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

