begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSNumber
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|COSArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|COSObjectable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * This class represents the line dash pattern for a graphics state.  See PDF  * Reference 1.5 section 4.3.2  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.7 $  */
end_comment

begin_class
specifier|public
class|class
name|PDLineDashPattern
implements|implements
name|COSObjectable
implements|,
name|Cloneable
block|{
specifier|private
name|COSArray
name|lineDashPattern
init|=
literal|null
decl_stmt|;
comment|/**      * Creates a blank line dash pattern.  With no dashes and a phase of 0.      */
specifier|public
name|PDLineDashPattern
parameter_list|()
block|{
name|lineDashPattern
operator|=
operator|new
name|COSArray
argument_list|()
expr_stmt|;
name|lineDashPattern
operator|.
name|add
argument_list|(
operator|new
name|COSArray
argument_list|()
argument_list|)
expr_stmt|;
name|lineDashPattern
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|ZERO
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs a line dash pattern from an existing array.      *      * @param ldp The existing line dash pattern.      */
specifier|public
name|PDLineDashPattern
parameter_list|(
name|COSArray
name|ldp
parameter_list|)
block|{
name|lineDashPattern
operator|=
name|ldp
expr_stmt|;
block|}
comment|/**      * Constructs a line dash pattern from an existing array.      *      * @param ldp The existing line dash pattern.      * @param phase The phase for the line dash pattern.      */
specifier|public
name|PDLineDashPattern
parameter_list|(
name|COSArray
name|ldp
parameter_list|,
name|int
name|phase
parameter_list|)
block|{
name|lineDashPattern
operator|=
operator|new
name|COSArray
argument_list|()
expr_stmt|;
name|lineDashPattern
operator|.
name|add
argument_list|(
name|ldp
argument_list|)
expr_stmt|;
name|lineDashPattern
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
name|phase
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|Object
name|clone
parameter_list|()
block|{
name|PDLineDashPattern
name|pattern
init|=
literal|null
decl_stmt|;
try|try
block|{
name|pattern
operator|=
operator|(
name|PDLineDashPattern
operator|)
name|super
operator|.
name|clone
argument_list|()
expr_stmt|;
name|pattern
operator|.
name|setDashPattern
argument_list|(
name|getDashPattern
argument_list|()
argument_list|)
expr_stmt|;
name|pattern
operator|.
name|setPhaseStart
argument_list|(
name|getPhaseStart
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|exception
parameter_list|)
block|{
name|exception
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
name|pattern
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|COSBase
name|getCOSObject
parameter_list|()
block|{
return|return
name|lineDashPattern
return|;
block|}
comment|/**      * This will get the line dash pattern phase.  The dash phase specifies the      * distance into the dash pattern at which to start the dash.      *      * @return The line dash pattern phase.      */
specifier|public
name|int
name|getPhaseStart
parameter_list|()
block|{
name|COSNumber
name|phase
init|=
operator|(
name|COSNumber
operator|)
name|lineDashPattern
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
return|return
name|phase
operator|.
name|intValue
argument_list|()
return|;
block|}
comment|/**      * This will set the line dash pattern phase.      *      * @param phase The new line dash patter phase.      */
specifier|public
name|void
name|setPhaseStart
parameter_list|(
name|int
name|phase
parameter_list|)
block|{
name|lineDashPattern
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|phase
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will return a list of java.lang.Integer objects that represent the line      * dash pattern appearance.      *      * @return The line dash pattern.      */
specifier|public
name|List
name|getDashPattern
parameter_list|()
block|{
name|COSArray
name|dashPatterns
init|=
operator|(
name|COSArray
operator|)
name|lineDashPattern
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
return|return
name|COSArrayList
operator|.
name|convertIntegerCOSArrayToList
argument_list|(
name|dashPatterns
argument_list|)
return|;
block|}
comment|/**      * Get the line dash pattern as a COS object.      *      * @return The cos array line dash pattern.      */
specifier|public
name|COSArray
name|getCOSDashPattern
parameter_list|()
block|{
return|return
operator|(
name|COSArray
operator|)
name|lineDashPattern
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|/**      * This will replace the existing line dash pattern.      *      * @param dashPattern A list of java.lang.Integer objects.      */
specifier|public
name|void
name|setDashPattern
parameter_list|(
name|List
name|dashPattern
parameter_list|)
block|{
name|lineDashPattern
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|COSArrayList
operator|.
name|converterToCOSArray
argument_list|(
name|dashPattern
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Checks if the dashPattern is empty or all values equals 0.      *       * @return true if the dashPattern is empty or all values equals 0        */
specifier|public
name|boolean
name|isDashPatternEmpty
parameter_list|()
block|{
name|float
index|[]
name|dashPattern
init|=
name|getCOSDashPattern
argument_list|()
operator|.
name|toFloatArray
argument_list|()
decl_stmt|;
name|boolean
name|dashPatternEmpty
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|dashPattern
operator|!=
literal|null
condition|)
block|{
name|int
name|arraySize
init|=
name|dashPattern
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arraySize
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|dashPattern
index|[
name|i
index|]
operator|>
literal|0
condition|)
block|{
name|dashPatternEmpty
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|dashPatternEmpty
return|;
block|}
block|}
end_class

end_unit

