begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2018 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|action
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|COSObjectable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|documentnavigation
operator|.
name|destination
operator|.
name|PDNamedDestination
import|;
end_import

begin_comment
comment|/**  * A target dictionary specifying path information to the target document. Each target dictionary  * specifies one element in the full path to the target and may have nested target dictionaries  * specifying additional elements.  *  * @author Tilman Hausherr  */
end_comment

begin_class
specifier|public
class|class
name|PDTargetDirectory
implements|implements
name|COSObjectable
block|{
specifier|private
specifier|final
name|COSDictionary
name|dict
decl_stmt|;
comment|/**      * Default constructor, creates target directory.      */
specifier|public
name|PDTargetDirectory
parameter_list|()
block|{
name|dict
operator|=
operator|new
name|COSDictionary
argument_list|()
expr_stmt|;
block|}
comment|/**      * Create a target directory from an existing dictionary.      *      * @param dictionary The existing graphics state.      */
specifier|public
name|PDTargetDirectory
parameter_list|(
name|COSDictionary
name|dictionary
parameter_list|)
block|{
name|dict
operator|=
name|dictionary
expr_stmt|;
block|}
comment|/**      * This will get the underlying dictionary that this class acts on.      *      * @return The underlying dictionary for this class.      */
annotation|@
name|Override
specifier|public
name|COSDictionary
name|getCOSObject
parameter_list|()
block|{
return|return
name|dict
return|;
block|}
comment|/**      * Get the relationship between the current document and the target (which may be an      * intermediate target).      *      * @return the relationship as a name. Valid values are P (the target is the parent of the      * current document) and C (the target is a child of the current document). Invalid values or      * null are also returned.      */
specifier|public
name|COSName
name|getRelationship
parameter_list|()
block|{
name|COSBase
name|base
init|=
name|dict
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|R
argument_list|)
decl_stmt|;
if|if
condition|(
name|base
operator|instanceof
name|COSName
condition|)
block|{
return|return
operator|(
name|COSName
operator|)
name|base
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Set the relationship between the current document and the target (which may be an      * intermediate target).      *      * @param relationship Valid values are P (the target is the parent of the current document) and      * C (the target is a child of the current document).      *      * throws IllegalArgumentException if the parameter is not P or C.      */
specifier|public
name|void
name|setRelationship
parameter_list|(
name|COSName
name|relationship
parameter_list|)
block|{
if|if
condition|(
operator|!
name|COSName
operator|.
name|P
operator|.
name|equals
argument_list|(
name|relationship
argument_list|)
operator|&&
operator|!
name|COSName
operator|.
name|C
operator|.
name|equals
argument_list|(
name|relationship
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The only valid are P or C, not "
operator|+
name|relationship
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|dict
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|R
argument_list|,
name|relationship
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the name of the file as found in the EmbeddedFiles name tree. This is only to be used if      * the target is a child of the current document.      *      * @return a filename or null if there is none.      */
specifier|public
name|String
name|getFilename
parameter_list|()
block|{
return|return
name|dict
operator|.
name|getString
argument_list|(
name|COSName
operator|.
name|N
argument_list|)
return|;
block|}
comment|/**      * Sets the name of the file as found in the EmbeddedFiles name tree. This is only to be used if      * the target is a child of the current document.      *      * @param filename a filename or null if the entry is to be deleted.      */
specifier|public
name|void
name|setFilename
parameter_list|(
name|String
name|filename
parameter_list|)
block|{
name|dict
operator|.
name|setString
argument_list|(
name|COSName
operator|.
name|N
argument_list|,
name|filename
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the target directory. If this entry is absent, the current document is the target file      * containing the destination.      *      * @return the target directory or null if the current document is the target file containing      * the destination.      */
specifier|public
name|PDTargetDirectory
name|getTargetDirectory
parameter_list|()
block|{
name|COSBase
name|base
init|=
name|dict
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|T
argument_list|)
decl_stmt|;
if|if
condition|(
name|base
operator|instanceof
name|COSDictionary
condition|)
block|{
return|return
operator|new
name|PDTargetDirectory
argument_list|(
operator|(
name|COSDictionary
operator|)
name|base
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Sets the target directory.      *      * @param targetDirectory the target directory or null if the current document is the target      * file containing the destination.      */
specifier|public
name|void
name|setTargetDirectory
parameter_list|(
name|PDTargetDirectory
name|targetDirectory
parameter_list|)
block|{
name|dict
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|T
argument_list|,
name|targetDirectory
argument_list|)
expr_stmt|;
block|}
comment|/**      * If the value in the /P entry is an integer, this will get the page number (zero-based) in the      * current document containing the file attachment annotation.      *      * @return the zero based page number or -1 if the /P entry value is missing or not a number.      */
specifier|public
name|int
name|getPageNumber
parameter_list|()
block|{
name|COSBase
name|base
init|=
name|dict
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|P
argument_list|)
decl_stmt|;
if|if
condition|(
name|base
operator|instanceof
name|COSInteger
condition|)
block|{
return|return
operator|(
operator|(
name|COSInteger
operator|)
name|base
operator|)
operator|.
name|intValue
argument_list|()
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**      * Set the page number (zero-based) in the current document containing the file attachment      * annotation.      *      * @param pageNumber the zero based page number. If this is&lt; 0 then the entry is removed.      */
specifier|public
name|void
name|setPageNumber
parameter_list|(
name|int
name|pageNumber
parameter_list|)
block|{
if|if
condition|(
name|pageNumber
operator|<
literal|0
condition|)
block|{
name|dict
operator|.
name|removeItem
argument_list|(
name|COSName
operator|.
name|P
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dict
operator|.
name|setInt
argument_list|(
name|COSName
operator|.
name|P
argument_list|,
name|pageNumber
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * If the value in the /P entry is a string, this will get a named destination in the current      * document that provides the page number of the file attachment annotation.      *      * @return a named destination or null if the /P entry value is missing or not a string.      */
specifier|public
name|PDNamedDestination
name|getNamedDestination
parameter_list|()
block|{
name|COSBase
name|base
init|=
name|dict
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|P
argument_list|)
decl_stmt|;
if|if
condition|(
name|base
operator|instanceof
name|COSString
condition|)
block|{
return|return
operator|new
name|PDNamedDestination
argument_list|(
operator|(
name|COSString
operator|)
name|base
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * This will set a named destination in the current document that provides the page number of      * the file attachment annotation.      *      * @param dest a named destination or null if the entry is to be removed.      */
specifier|public
name|void
name|setNamedDestination
parameter_list|(
name|PDNamedDestination
name|dest
parameter_list|)
block|{
if|if
condition|(
name|dest
operator|==
literal|null
condition|)
block|{
name|dict
operator|.
name|removeItem
argument_list|(
name|COSName
operator|.
name|P
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dict
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|P
argument_list|,
name|dest
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * If the value in the /A entry is an integer, this will get the index (zero-based) of the      * annotation in the /Annots array of the page specified by the /P entry.      *      * @return the zero based page number or -1 if the /P entry value is missing or not a number.      */
specifier|public
name|int
name|getAnnotationIndex
parameter_list|()
block|{
name|COSBase
name|base
init|=
name|dict
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|A
argument_list|)
decl_stmt|;
if|if
condition|(
name|base
operator|instanceof
name|COSInteger
condition|)
block|{
return|return
operator|(
operator|(
name|COSInteger
operator|)
name|base
operator|)
operator|.
name|intValue
argument_list|()
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**      * This will set the index (zero-based) of the annotation in the /Annots array of the page      * specified by the /P entry.      *      * @param index the zero based index. If this is&lt; 0 then the entry is removed.      */
specifier|public
name|void
name|setAnnotationIndex
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
name|dict
operator|.
name|removeItem
argument_list|(
name|COSName
operator|.
name|A
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dict
operator|.
name|setInt
argument_list|(
name|COSName
operator|.
name|A
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * If the value in the /A entry is a string, this will get the value of the /NM entry in the      * annotation dictionary.      *      * @return the /NM value of an annotation dictionary or null if the /A entry value is missing or      * not a string.      */
specifier|public
name|String
name|getAnnotationName
parameter_list|()
block|{
name|COSBase
name|base
init|=
name|dict
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|A
argument_list|)
decl_stmt|;
if|if
condition|(
name|base
operator|instanceof
name|COSString
condition|)
block|{
return|return
operator|(
operator|(
name|COSString
operator|)
name|base
operator|)
operator|.
name|getString
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * This will get the value of the /NM entry in the annotation dictionary.      *      * @param name the /NM value of an annotation dictionary or null if the entry is to be removed.      */
specifier|public
name|void
name|setAnnotationName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|dict
operator|.
name|setString
argument_list|(
name|COSName
operator|.
name|A
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

