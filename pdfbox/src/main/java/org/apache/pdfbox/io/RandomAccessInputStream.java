begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * An InputStream which reads from a RandomAccessRead.  *   * @author Ben Litchfield  * @author John Hewson  */
end_comment

begin_class
specifier|public
class|class
name|RandomAccessInputStream
extends|extends
name|InputStream
block|{
specifier|private
specifier|final
name|RandomAccessRead
name|input
decl_stmt|;
specifier|private
name|long
name|position
decl_stmt|;
comment|/**      * Creates a new RandomAccessInputStream, with a position of zero. The InputStream will maintain      * its own position independent of the RandomAccessRead.      *      * @param randomAccessRead The RandomAccessRead to read from.      */
specifier|public
name|RandomAccessInputStream
parameter_list|(
name|RandomAccessRead
name|randomAccessRead
parameter_list|)
block|{
name|input
operator|=
name|randomAccessRead
expr_stmt|;
name|position
operator|=
literal|0
expr_stmt|;
block|}
name|void
name|restorePosition
parameter_list|()
throws|throws
name|IOException
block|{
name|input
operator|.
name|seek
argument_list|(
name|position
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|available
parameter_list|()
throws|throws
name|IOException
block|{
name|restorePosition
argument_list|()
expr_stmt|;
name|long
name|available
init|=
name|input
operator|.
name|length
argument_list|()
operator|-
name|input
operator|.
name|getPosition
argument_list|()
decl_stmt|;
if|if
condition|(
name|available
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
return|return
name|Integer
operator|.
name|MAX_VALUE
return|;
block|}
return|return
operator|(
name|int
operator|)
name|available
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|restorePosition
argument_list|()
expr_stmt|;
if|if
condition|(
name|input
operator|.
name|isEOF
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|int
name|b
init|=
name|input
operator|.
name|read
argument_list|()
decl_stmt|;
name|position
operator|+=
literal|1
expr_stmt|;
return|return
name|b
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|restorePosition
argument_list|()
expr_stmt|;
if|if
condition|(
name|input
operator|.
name|isEOF
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|int
name|n
init|=
name|input
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|position
operator|+=
name|n
expr_stmt|;
return|return
name|n
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|skip
parameter_list|(
name|long
name|n
parameter_list|)
throws|throws
name|IOException
block|{
name|restorePosition
argument_list|()
expr_stmt|;
name|input
operator|.
name|seek
argument_list|(
name|position
operator|+
name|n
argument_list|)
expr_stmt|;
name|position
operator|+=
name|n
expr_stmt|;
return|return
name|n
return|;
block|}
block|}
end_class

end_unit

