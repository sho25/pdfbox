begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_comment
comment|/**  * An implementation of the RandomAccess interface to store a pdf in memory.  * The data will be stored in 16kb chunks organized in an ArrayList.    *  */
end_comment

begin_class
specifier|public
class|class
name|RandomAccessBuffer
implements|implements
name|RandomAccess
block|{
comment|// chunk size is 16kb
specifier|private
specifier|static
specifier|final
name|int
name|BUFFER_SIZE
init|=
literal|16384
decl_stmt|;
comment|// list containing all chunks
specifier|private
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|bufferList
init|=
literal|null
decl_stmt|;
comment|// current chunk
specifier|private
name|byte
index|[]
name|currentBuffer
decl_stmt|;
comment|// current pointer to the whole buffer
specifier|private
name|long
name|pointer
decl_stmt|;
comment|// current pointer for the current chunk
specifier|private
name|long
name|currentBufferPointer
decl_stmt|;
comment|// size of the whole buffer
specifier|private
name|long
name|size
decl_stmt|;
comment|// current chunk list index
specifier|private
name|int
name|bufferListIndex
decl_stmt|;
comment|// maximum chunk list index
specifier|private
name|int
name|bufferListMaxIndex
decl_stmt|;
comment|/**      * Default constructor.      */
specifier|public
name|RandomAccessBuffer
parameter_list|()
block|{
comment|// starting with one chunk
name|bufferList
operator|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
expr_stmt|;
name|currentBuffer
operator|=
operator|new
name|byte
index|[
name|BUFFER_SIZE
index|]
expr_stmt|;
name|bufferList
operator|.
name|add
argument_list|(
name|currentBuffer
argument_list|)
expr_stmt|;
name|pointer
operator|=
literal|0
expr_stmt|;
name|currentBufferPointer
operator|=
literal|0
expr_stmt|;
name|size
operator|=
literal|0
expr_stmt|;
name|bufferListIndex
operator|=
literal|0
expr_stmt|;
name|bufferListMaxIndex
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RandomAccessBuffer
name|clone
parameter_list|()
block|{
name|RandomAccessBuffer
name|copy
init|=
operator|new
name|RandomAccessBuffer
argument_list|()
decl_stmt|;
name|copy
operator|.
name|bufferList
operator|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|bufferList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|byte
index|[]
name|buffer
range|:
name|bufferList
control|)
block|{
name|byte
index|[]
name|newBuffer
init|=
operator|new
name|byte
index|[
name|buffer
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|newBuffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
expr_stmt|;
name|copy
operator|.
name|bufferList
operator|.
name|add
argument_list|(
name|newBuffer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|currentBuffer
operator|!=
literal|null
condition|)
block|{
name|copy
operator|.
name|currentBuffer
operator|=
name|copy
operator|.
name|bufferList
operator|.
name|get
argument_list|(
name|copy
operator|.
name|bufferList
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|copy
operator|.
name|currentBuffer
operator|=
literal|null
expr_stmt|;
block|}
name|copy
operator|.
name|pointer
operator|=
name|pointer
expr_stmt|;
name|copy
operator|.
name|currentBufferPointer
operator|=
name|currentBufferPointer
expr_stmt|;
name|copy
operator|.
name|size
operator|=
name|size
expr_stmt|;
name|copy
operator|.
name|bufferListIndex
operator|=
name|bufferListIndex
expr_stmt|;
name|copy
operator|.
name|bufferListMaxIndex
operator|=
name|bufferListMaxIndex
expr_stmt|;
return|return
name|copy
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|currentBuffer
operator|=
literal|null
expr_stmt|;
name|bufferList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|pointer
operator|=
literal|0
expr_stmt|;
name|currentBufferPointer
operator|=
literal|0
expr_stmt|;
name|size
operator|=
literal|0
expr_stmt|;
name|bufferListIndex
operator|=
literal|0
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|void
name|seek
parameter_list|(
name|long
name|position
parameter_list|)
throws|throws
name|IOException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
name|pointer
operator|=
name|position
expr_stmt|;
comment|// calculate the chunk list index
name|bufferListIndex
operator|=
call|(
name|int
call|)
argument_list|(
name|position
operator|/
name|BUFFER_SIZE
argument_list|)
expr_stmt|;
name|currentBufferPointer
operator|=
name|position
operator|%
name|BUFFER_SIZE
expr_stmt|;
name|currentBuffer
operator|=
name|bufferList
operator|.
name|get
argument_list|(
name|bufferListIndex
argument_list|)
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|long
name|getPosition
parameter_list|()
throws|throws
name|IOException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
return|return
name|pointer
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
if|if
condition|(
name|pointer
operator|>=
name|this
operator|.
name|size
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|currentBufferPointer
operator|>=
name|BUFFER_SIZE
condition|)
block|{
if|if
condition|(
name|bufferListIndex
operator|>=
name|bufferListMaxIndex
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
name|currentBuffer
operator|=
name|bufferList
operator|.
name|get
argument_list|(
operator|++
name|bufferListIndex
argument_list|)
expr_stmt|;
name|currentBufferPointer
operator|=
literal|0
expr_stmt|;
block|}
block|}
name|pointer
operator|++
expr_stmt|;
return|return
name|currentBuffer
index|[
operator|(
name|int
operator|)
name|currentBufferPointer
operator|++
index|]
operator|&
literal|0xff
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
if|if
condition|(
name|pointer
operator|>=
name|this
operator|.
name|size
condition|)
block|{
return|return
literal|0
return|;
block|}
name|int
name|maxLength
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|length
argument_list|,
name|this
operator|.
name|size
operator|-
name|pointer
argument_list|)
decl_stmt|;
name|long
name|remainingBytes
init|=
name|BUFFER_SIZE
operator|-
name|currentBufferPointer
decl_stmt|;
if|if
condition|(
name|maxLength
operator|>=
name|remainingBytes
condition|)
block|{
comment|// copy the first bytes from the current buffer
name|System
operator|.
name|arraycopy
argument_list|(
name|currentBuffer
argument_list|,
operator|(
name|int
operator|)
name|currentBufferPointer
argument_list|,
name|b
argument_list|,
name|offset
argument_list|,
operator|(
name|int
operator|)
name|remainingBytes
argument_list|)
expr_stmt|;
name|int
name|newOffset
init|=
name|offset
operator|+
operator|(
name|int
operator|)
name|remainingBytes
decl_stmt|;
name|long
name|remainingBytes2Read
init|=
name|length
operator|-
name|remainingBytes
decl_stmt|;
comment|// determine how many buffers are needed to get the remaining amount bytes
name|int
name|numberOfArrays
init|=
operator|(
name|int
operator|)
name|remainingBytes2Read
operator|/
name|BUFFER_SIZE
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfArrays
condition|;
name|i
operator|++
control|)
block|{
name|nextBuffer
argument_list|()
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|currentBuffer
argument_list|,
literal|0
argument_list|,
name|b
argument_list|,
name|newOffset
argument_list|,
name|BUFFER_SIZE
argument_list|)
expr_stmt|;
name|newOffset
operator|+=
name|BUFFER_SIZE
expr_stmt|;
block|}
name|remainingBytes2Read
operator|=
name|remainingBytes2Read
operator|%
name|BUFFER_SIZE
expr_stmt|;
comment|// are there still some bytes to be read?
if|if
condition|(
name|remainingBytes2Read
operator|>
literal|0
condition|)
block|{
name|nextBuffer
argument_list|()
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|currentBuffer
argument_list|,
literal|0
argument_list|,
name|b
argument_list|,
name|newOffset
argument_list|,
operator|(
name|int
operator|)
name|remainingBytes2Read
argument_list|)
expr_stmt|;
name|currentBufferPointer
operator|+=
name|remainingBytes2Read
expr_stmt|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|currentBuffer
argument_list|,
operator|(
name|int
operator|)
name|currentBufferPointer
argument_list|,
name|b
argument_list|,
name|offset
argument_list|,
name|maxLength
argument_list|)
expr_stmt|;
name|currentBufferPointer
operator|+=
name|maxLength
expr_stmt|;
block|}
name|pointer
operator|+=
name|maxLength
expr_stmt|;
return|return
name|maxLength
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|long
name|length
parameter_list|()
throws|throws
name|IOException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
return|return
name|size
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
comment|// end of buffer reached?
if|if
condition|(
name|currentBufferPointer
operator|>=
name|BUFFER_SIZE
condition|)
block|{
if|if
condition|(
name|pointer
operator|+
name|BUFFER_SIZE
operator|>=
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"RandomAccessBuffer overflow"
argument_list|)
throw|;
block|}
name|expandBuffer
argument_list|()
expr_stmt|;
block|}
name|currentBuffer
index|[
operator|(
name|int
operator|)
name|currentBufferPointer
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
name|b
expr_stmt|;
name|pointer
operator|++
expr_stmt|;
if|if
condition|(
name|pointer
operator|>
name|this
operator|.
name|size
condition|)
block|{
name|this
operator|.
name|size
operator|=
name|pointer
expr_stmt|;
block|}
comment|// end of buffer reached now?
if|if
condition|(
name|currentBufferPointer
operator|>=
name|BUFFER_SIZE
condition|)
block|{
if|if
condition|(
name|pointer
operator|+
name|BUFFER_SIZE
operator|>=
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"RandomAccessBuffer overflow"
argument_list|)
throw|;
block|}
name|expandBuffer
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
name|long
name|newSize
init|=
name|pointer
operator|+
name|length
decl_stmt|;
name|long
name|remainingBytes
init|=
name|BUFFER_SIZE
operator|-
name|currentBufferPointer
decl_stmt|;
if|if
condition|(
name|length
operator|>=
name|remainingBytes
condition|)
block|{
if|if
condition|(
name|newSize
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"RandomAccessBuffer overflow"
argument_list|)
throw|;
block|}
comment|// copy the first bytes to the current buffer
name|System
operator|.
name|arraycopy
argument_list|(
name|b
argument_list|,
name|offset
argument_list|,
name|currentBuffer
argument_list|,
operator|(
name|int
operator|)
name|currentBufferPointer
argument_list|,
operator|(
name|int
operator|)
name|remainingBytes
argument_list|)
expr_stmt|;
name|int
name|newOffset
init|=
name|offset
operator|+
operator|(
name|int
operator|)
name|remainingBytes
decl_stmt|;
name|long
name|remainingBytes2Write
init|=
name|length
operator|-
name|remainingBytes
decl_stmt|;
comment|// determine how many buffers are needed for the remaining bytes
name|int
name|numberOfNewArrays
init|=
operator|(
name|int
operator|)
name|remainingBytes2Write
operator|/
name|BUFFER_SIZE
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfNewArrays
condition|;
name|i
operator|++
control|)
block|{
name|expandBuffer
argument_list|()
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|b
argument_list|,
name|newOffset
argument_list|,
name|currentBuffer
argument_list|,
operator|(
name|int
operator|)
name|currentBufferPointer
argument_list|,
name|BUFFER_SIZE
argument_list|)
expr_stmt|;
name|newOffset
operator|+=
name|BUFFER_SIZE
expr_stmt|;
block|}
comment|// are there still some bytes to be written?
name|remainingBytes2Write
operator|-=
name|numberOfNewArrays
operator|*
name|BUFFER_SIZE
expr_stmt|;
if|if
condition|(
name|remainingBytes2Write
operator|>=
literal|0
condition|)
block|{
name|expandBuffer
argument_list|()
expr_stmt|;
if|if
condition|(
name|remainingBytes2Write
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|b
argument_list|,
name|newOffset
argument_list|,
name|currentBuffer
argument_list|,
operator|(
name|int
operator|)
name|currentBufferPointer
argument_list|,
operator|(
name|int
operator|)
name|remainingBytes2Write
argument_list|)
expr_stmt|;
block|}
name|currentBufferPointer
operator|=
name|remainingBytes2Write
expr_stmt|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|b
argument_list|,
name|offset
argument_list|,
name|currentBuffer
argument_list|,
operator|(
name|int
operator|)
name|currentBufferPointer
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|currentBufferPointer
operator|+=
name|length
expr_stmt|;
block|}
name|pointer
operator|+=
name|length
expr_stmt|;
if|if
condition|(
name|pointer
operator|>
name|this
operator|.
name|size
condition|)
block|{
name|this
operator|.
name|size
operator|=
name|pointer
expr_stmt|;
block|}
block|}
comment|/**      * create a new buffer chunk and adjust all pointers and indices.      */
specifier|private
name|void
name|expandBuffer
parameter_list|()
block|{
if|if
condition|(
name|bufferListMaxIndex
operator|>
name|bufferListIndex
condition|)
block|{
comment|// there is already an existing chunk
name|nextBuffer
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// create a new chunk and add it to the buffer
name|currentBuffer
operator|=
operator|new
name|byte
index|[
name|BUFFER_SIZE
index|]
expr_stmt|;
name|bufferList
operator|.
name|add
argument_list|(
name|currentBuffer
argument_list|)
expr_stmt|;
name|currentBufferPointer
operator|=
literal|0
expr_stmt|;
name|bufferListMaxIndex
operator|++
expr_stmt|;
name|bufferListIndex
operator|++
expr_stmt|;
block|}
block|}
comment|/**      * switch to the next buffer chunk and reset the buffer pointer.      */
specifier|private
name|void
name|nextBuffer
parameter_list|()
block|{
name|currentBufferPointer
operator|=
literal|0
expr_stmt|;
name|currentBuffer
operator|=
name|bufferList
operator|.
name|get
argument_list|(
operator|++
name|bufferListIndex
argument_list|)
expr_stmt|;
block|}
comment|/**      * Ensure that the RandomAccessBuffer is not closed      * @throws IOException      */
specifier|private
name|void
name|checkClosed
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|currentBuffer
operator|==
literal|null
condition|)
block|{
comment|// consider that the rab is closed if there is no current buffer
throw|throw
operator|new
name|IOException
argument_list|(
literal|"RandomAccessBuffer already closed"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

