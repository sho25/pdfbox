begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/* $Id$ */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * This class contains various I/O-related methods.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|IOUtils
block|{
comment|//TODO PDFBox should really use Apache Commons IO.
comment|/**      * Log instance.      */
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|IOUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|IOUtils
parameter_list|()
block|{
comment|//Utility class. Don't instantiate.
block|}
comment|/**      * Reads the input stream and returns its contents as a byte array.      * @param in the input stream to read from.      * @return the byte array      * @throws IOException if an I/O error occurs      */
specifier|public
specifier|static
name|byte
index|[]
name|toByteArray
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|baout
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|copy
argument_list|(
name|in
argument_list|,
name|baout
argument_list|)
expr_stmt|;
return|return
name|baout
operator|.
name|toByteArray
argument_list|()
return|;
block|}
comment|/**      * Copies all the contents from the given input stream to the given output stream.      * @param input the input stream      * @param output the output stream      * @return the number of bytes that have been copied      * @throws IOException if an I/O error occurs      */
specifier|public
specifier|static
name|long
name|copy
parameter_list|(
name|InputStream
name|input
parameter_list|,
name|OutputStream
name|output
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|4096
index|]
decl_stmt|;
name|long
name|count
init|=
literal|0
decl_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|-
literal|1
operator|!=
operator|(
name|n
operator|=
name|input
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|count
operator|+=
name|n
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
comment|/**      * Populates the given buffer with data read from the input stream. If the data doesn't      * fit the buffer, only the data that fits in the buffer is read. If the data is less than      * fits in the buffer, the buffer is not completely filled.      * @param in the input stream to read from      * @param buffer the buffer to fill      * @return the number of bytes written to the buffer      * @throws IOException if an I/O error occurs      */
specifier|public
specifier|static
name|long
name|populateBuffer
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|remaining
init|=
name|buffer
operator|.
name|length
decl_stmt|;
while|while
condition|(
name|remaining
operator|>
literal|0
condition|)
block|{
name|int
name|bufferWritePos
init|=
name|buffer
operator|.
name|length
operator|-
name|remaining
decl_stmt|;
name|int
name|bytesRead
init|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
name|bufferWritePos
argument_list|,
name|remaining
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytesRead
operator|<
literal|0
condition|)
block|{
break|break;
comment|//EOD
block|}
name|remaining
operator|-=
name|bytesRead
expr_stmt|;
block|}
return|return
name|buffer
operator|.
name|length
operator|-
name|remaining
return|;
block|}
comment|/**      * Null safe close of the given {@link Closeable} suppressing any exception.      *      * @param closeable to be closed      */
specifier|public
specifier|static
name|void
name|closeQuietly
parameter_list|(
name|Closeable
name|closeable
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|closeable
operator|!=
literal|null
condition|)
block|{
name|closeable
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"An exception occured while trying to close - ignoring"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
comment|// ignore
block|}
block|}
comment|/**      * Try to close an IO resource and log and return if there was an exception.      *        *<p>An exception is only returned if the IOException passed in is null.      *       * @param closeable to be closed      * @param logger the logger to be used so that logging appears under that log instance      * @param resourceName the name to appear in the log output      * @param initialException to be closed      * @return the IOException is there was any but only if initialException is null      */
specifier|public
specifier|static
name|IOException
name|closeAndLogException
parameter_list|(
name|Closeable
name|closeable
parameter_list|,
name|Log
name|logger
parameter_list|,
name|String
name|resourceName
parameter_list|,
name|IOException
name|initialException
parameter_list|)
block|{
try|try
block|{
name|closeable
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Error closing "
operator|+
name|resourceName
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
if|if
condition|(
name|initialException
operator|==
literal|null
condition|)
block|{
return|return
name|ioe
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

