begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Provides {@link InputStream} access to portions of a file combined with  * buffered reading of content. Start of next bytes to read can be set via seek  * method.  *   * File is accessed via {@link RandomAccessFile} and is read in byte chunks  * which are cached.  *   * @author Timo Boehme  */
end_comment

begin_class
specifier|public
class|class
name|RandomAccessBufferedFileInputStream
extends|extends
name|InputStream
implements|implements
name|RandomAccessRead
block|{
comment|/**      * The prefix for the temp file being used.       */
specifier|private
specifier|static
specifier|final
name|String
name|TMP_FILE_PREFIX
init|=
literal|"tmpPDFBox"
decl_stmt|;
specifier|private
name|int
name|pageSizeShift
init|=
literal|12
decl_stmt|;
specifier|private
name|int
name|pageSize
init|=
literal|1
operator|<<
name|pageSizeShift
decl_stmt|;
specifier|private
name|long
name|pageOffsetMask
init|=
operator|-
literal|1L
operator|<<
name|pageSizeShift
decl_stmt|;
specifier|private
name|int
name|maxCachedPages
init|=
literal|1000
decl_stmt|;
specifier|private
name|File
name|tempFile
decl_stmt|;
specifier|private
name|byte
index|[]
name|lastRemovedCachePage
init|=
literal|null
decl_stmt|;
comment|/** Create a LRU page cache. */
specifier|private
specifier|final
name|Map
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
name|pageCache
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|(
name|maxCachedPages
argument_list|,
literal|0.75f
argument_list|,
literal|true
argument_list|)
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|6302488539257741101L
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|boolean
name|removeEldestEntry
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
name|eldest
parameter_list|)
block|{
specifier|final
name|boolean
name|doRemove
init|=
name|size
argument_list|()
operator|>
name|maxCachedPages
decl_stmt|;
if|if
condition|(
name|doRemove
condition|)
block|{
name|lastRemovedCachePage
operator|=
name|eldest
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
return|return
name|doRemove
return|;
block|}
block|}
decl_stmt|;
specifier|private
name|long
name|curPageOffset
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|byte
index|[]
name|curPage
init|=
operator|new
name|byte
index|[
name|pageSize
index|]
decl_stmt|;
specifier|private
name|int
name|offsetWithinPage
init|=
literal|0
decl_stmt|;
specifier|private
specifier|final
name|RandomAccessFile
name|raFile
decl_stmt|;
specifier|private
specifier|final
name|long
name|fileLength
decl_stmt|;
specifier|private
name|long
name|fileOffset
init|=
literal|0
decl_stmt|;
specifier|private
name|boolean
name|isClosed
decl_stmt|;
comment|/**       * Create a random access input stream instance for the file with the given name.      *      * @param the filename of the file to be read      * @exception if the given file can't be found      */
specifier|public
name|RandomAccessBufferedFileInputStream
parameter_list|(
name|String
name|filename
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|raFile
operator|=
operator|new
name|RandomAccessFile
argument_list|(
name|file
argument_list|,
literal|"r"
argument_list|)
expr_stmt|;
name|fileLength
operator|=
name|file
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
comment|/**       * Create a random access input stream instance for the given file.      *      * @param the file to be read      * @exception if the given file can't be found      */
specifier|public
name|RandomAccessBufferedFileInputStream
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
name|raFile
operator|=
operator|new
name|RandomAccessFile
argument_list|(
name|file
argument_list|,
literal|"r"
argument_list|)
expr_stmt|;
name|fileLength
operator|=
name|file
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
comment|/**       * Create a random access input stream for the given input stream       * by copying the data to a temporary file.      *       * @param the input stream to be read      * @exception if something went wrong while creating the temporary file      */
specifier|public
name|RandomAccessBufferedFileInputStream
parameter_list|(
name|InputStream
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|tempFile
operator|=
name|createTmpFile
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|fileLength
operator|=
name|tempFile
operator|.
name|length
argument_list|()
expr_stmt|;
name|raFile
operator|=
operator|new
name|RandomAccessFile
argument_list|(
name|tempFile
argument_list|,
literal|"r"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|File
name|createTmpFile
parameter_list|(
name|InputStream
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|FileOutputStream
name|fos
init|=
literal|null
decl_stmt|;
try|try
block|{
name|File
name|tmpFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
name|TMP_FILE_PREFIX
argument_list|,
literal|".pdf"
argument_list|)
decl_stmt|;
name|fos
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|tmpFile
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|copy
argument_list|(
name|input
argument_list|,
name|fos
argument_list|)
expr_stmt|;
return|return
name|tmpFile
return|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|fos
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Remove the temporary file. A temporary file is created if this class is instantiated with an InputStream      */
specifier|private
name|void
name|deleteTempFile
parameter_list|()
block|{
if|if
condition|(
name|tempFile
operator|!=
literal|null
condition|)
block|{
name|tempFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Returns offset in file at which next byte would be read. */
annotation|@
name|Override
specifier|public
name|long
name|getPosition
parameter_list|()
block|{
return|return
name|fileOffset
return|;
block|}
comment|/**      * Seeks to new position. If new position is outside of current page the new      * page is either taken from cache or read from file and added to cache.      */
annotation|@
name|Override
specifier|public
name|void
name|seek
parameter_list|(
specifier|final
name|long
name|newOffset
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|long
name|newPageOffset
init|=
name|newOffset
operator|&
name|pageOffsetMask
decl_stmt|;
if|if
condition|(
name|newPageOffset
operator|!=
name|curPageOffset
condition|)
block|{
name|byte
index|[]
name|newPage
init|=
name|pageCache
operator|.
name|get
argument_list|(
name|newPageOffset
argument_list|)
decl_stmt|;
if|if
condition|(
name|newPage
operator|==
literal|null
condition|)
block|{
name|raFile
operator|.
name|seek
argument_list|(
name|newPageOffset
argument_list|)
expr_stmt|;
name|newPage
operator|=
name|readPage
argument_list|()
expr_stmt|;
name|pageCache
operator|.
name|put
argument_list|(
name|newPageOffset
argument_list|,
name|newPage
argument_list|)
expr_stmt|;
block|}
name|curPageOffset
operator|=
name|newPageOffset
expr_stmt|;
name|curPage
operator|=
name|newPage
expr_stmt|;
block|}
name|offsetWithinPage
operator|=
call|(
name|int
call|)
argument_list|(
name|newOffset
operator|-
name|curPageOffset
argument_list|)
expr_stmt|;
name|fileOffset
operator|=
name|newOffset
expr_stmt|;
block|}
comment|/**      * Reads a page with data from current file position. If we have a      * previously removed page from cache the buffer of this page is reused.      * Otherwise a new byte buffer is created.      */
specifier|private
name|byte
index|[]
name|readPage
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|page
decl_stmt|;
if|if
condition|(
name|lastRemovedCachePage
operator|!=
literal|null
condition|)
block|{
name|page
operator|=
name|lastRemovedCachePage
expr_stmt|;
name|lastRemovedCachePage
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|page
operator|=
operator|new
name|byte
index|[
name|pageSize
index|]
expr_stmt|;
block|}
name|int
name|readBytes
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|readBytes
operator|<
name|pageSize
condition|)
block|{
name|int
name|curBytesRead
init|=
name|raFile
operator|.
name|read
argument_list|(
name|page
argument_list|,
name|readBytes
argument_list|,
name|pageSize
operator|-
name|readBytes
argument_list|)
decl_stmt|;
if|if
condition|(
name|curBytesRead
operator|<
literal|0
condition|)
block|{
comment|// EOF
break|break;
block|}
name|readBytes
operator|+=
name|curBytesRead
expr_stmt|;
block|}
return|return
name|page
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|fileOffset
operator|>=
name|fileLength
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|offsetWithinPage
operator|==
name|pageSize
condition|)
block|{
name|seek
argument_list|(
name|fileOffset
argument_list|)
expr_stmt|;
block|}
name|fileOffset
operator|++
expr_stmt|;
return|return
name|curPage
index|[
name|offsetWithinPage
operator|++
index|]
operator|&
literal|0xff
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|read
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fileOffset
operator|>=
name|fileLength
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|offsetWithinPage
operator|==
name|pageSize
condition|)
block|{
name|seek
argument_list|(
name|fileOffset
argument_list|)
expr_stmt|;
block|}
name|int
name|commonLen
init|=
name|Math
operator|.
name|min
argument_list|(
name|pageSize
operator|-
name|offsetWithinPage
argument_list|,
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|fileLength
operator|-
name|fileOffset
operator|)
operator|<
name|pageSize
condition|)
block|{
name|commonLen
operator|=
name|Math
operator|.
name|min
argument_list|(
name|commonLen
argument_list|,
call|(
name|int
call|)
argument_list|(
name|fileLength
operator|-
name|fileOffset
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|curPage
argument_list|,
name|offsetWithinPage
argument_list|,
name|b
argument_list|,
name|off
argument_list|,
name|commonLen
argument_list|)
expr_stmt|;
name|offsetWithinPage
operator|+=
name|commonLen
expr_stmt|;
name|fileOffset
operator|+=
name|commonLen
expr_stmt|;
return|return
name|commonLen
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|available
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|fileLength
operator|-
name|fileOffset
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|skip
parameter_list|(
name|long
name|n
parameter_list|)
throws|throws
name|IOException
block|{
comment|// test if we have to reduce skip count because of EOF
name|long
name|toSkip
init|=
name|n
decl_stmt|;
if|if
condition|(
name|fileLength
operator|-
name|fileOffset
operator|<
name|toSkip
condition|)
block|{
name|toSkip
operator|=
name|fileLength
operator|-
name|fileOffset
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|toSkip
operator|<
name|pageSize
operator|)
operator|&&
operator|(
operator|(
name|offsetWithinPage
operator|+
name|toSkip
operator|)
operator|<=
name|pageSize
operator|)
condition|)
block|{
comment|// we can skip within current page
name|offsetWithinPage
operator|+=
name|toSkip
expr_stmt|;
name|fileOffset
operator|+=
name|toSkip
expr_stmt|;
block|}
else|else
block|{
comment|// seek to the page we will get after skipping
name|seek
argument_list|(
name|fileOffset
operator|+
name|toSkip
argument_list|)
expr_stmt|;
block|}
return|return
name|toSkip
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|length
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|fileLength
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|raFile
operator|.
name|close
argument_list|()
expr_stmt|;
name|deleteTempFile
argument_list|()
expr_stmt|;
name|pageCache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|isClosed
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isClosed
parameter_list|()
block|{
return|return
name|isClosed
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|peek
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|result
init|=
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|!=
operator|-
literal|1
condition|)
block|{
name|rewind
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|rewind
parameter_list|(
name|int
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
name|seek
argument_list|(
name|getPosition
argument_list|()
operator|-
name|bytes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readFully
parameter_list|(
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|int
name|bytesRead
init|=
name|read
argument_list|(
name|b
argument_list|)
decl_stmt|;
while|while
condition|(
name|bytesRead
operator|<
name|length
condition|)
block|{
name|bytesRead
operator|+=
name|read
argument_list|(
name|b
argument_list|,
name|bytesRead
argument_list|,
name|length
operator|-
name|bytesRead
argument_list|)
expr_stmt|;
block|}
return|return
name|b
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEOF
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|peek
init|=
name|peek
argument_list|()
decl_stmt|;
return|return
name|peek
operator|==
operator|-
literal|1
return|;
block|}
block|}
end_class

end_unit

