begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSStream
import|;
end_import

begin_comment
comment|/**  * A temporary file which can hold multiple buffers of temporary data. A new temporary file is created for each new  * {@link ScratchFile} instance, and is deleted when the {@link ScratchFile} is closed.  *<p>  * Multiple buffers can be creating by calling the {@link #createBuffer()} method.  *<p>  * The file is split into pages, each page containing a pointer to the previous and next pages. This allows for  * multiple, separate streams in the same file.  *  * @author Jesse Long  */
end_comment

begin_class
specifier|public
class|class
name|ScratchFile
implements|implements
name|Closeable
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|COSStream
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|File
name|file
decl_stmt|;
specifier|private
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
name|raf
decl_stmt|;
comment|/**      * Creates a new scratch file. If a {code scratchFileDirectory} is supplied, then the scratch file is created in      * that directory.      *       * @param scratchFileDirectory The directory in which to create the scratch file, or {code null} if the scratch      * should be created in the default temporary directory.      * @throws IOException If there was a problem creating a temporary file.      */
specifier|public
name|ScratchFile
parameter_list|(
name|File
name|scratchFileDirectory
parameter_list|)
throws|throws
name|IOException
block|{
name|file
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"PDFBox"
argument_list|,
literal|".tmp"
argument_list|,
name|scratchFileDirectory
argument_list|)
expr_stmt|;
try|try
block|{
name|raf
operator|=
operator|new
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
argument_list|(
name|file
argument_list|,
literal|"rw"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|delete
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error deleting scratch file: "
operator|+
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
comment|/**      * Returns the underlying {@link java.io.RandomAccessFile}.      *       * @return The underlying {@link java.io.RandomAccessFile}.      */
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
name|getRandomAccessFile
parameter_list|()
block|{
return|return
name|raf
return|;
block|}
comment|/**      * Checks if this scratch file has already been closed. If the file has been closed, an {@link IOException} is      * thrown.      *       * @throws IOException If the file has already been closed.      */
name|void
name|checkClosed
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|raf
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Scratch file already closed"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Creates a new buffer in the scratch file.      *       * @return A new buffer.      * @throws IOException If an error occurred.      */
specifier|public
name|RandomAccess
name|createBuffer
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|ScratchFileBuffer
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**      * Closes and deletes the temporary file. No further interaction with the scratch file or associated buffers can      * happen after this method is called.      *       * @throws IOException If there was a problem closing or deleting the temporary file.      */
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|raf
operator|!=
literal|null
condition|)
block|{
name|raf
operator|.
name|close
argument_list|()
expr_stmt|;
name|raf
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|file
operator|.
name|delete
argument_list|()
condition|)
block|{
name|file
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error deleting scratch file: "
operator|+
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

