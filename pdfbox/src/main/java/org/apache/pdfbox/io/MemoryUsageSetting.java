begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_comment
comment|/**  * Controls how memory/temporary files are used for  * buffering streams etc.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|MemoryUsageSetting
block|{
specifier|private
specifier|final
name|boolean
name|useMainMemory
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|useTempFile
decl_stmt|;
comment|/** maximum number of main-memory bytes allowed to be used;      *<code>-1</code> means 'unrestricted' */
specifier|private
specifier|final
name|long
name|maxMainMemoryBytes
decl_stmt|;
comment|/** maximum number of bytes allowed for storage at all (main-memory+file);      *<code>-1</code> means 'unrestricted' */
specifier|private
specifier|final
name|long
name|maxStorageBytes
decl_stmt|;
comment|/** directory to be used for scratch file */
specifier|private
name|File
name|tempDir
decl_stmt|;
comment|/**      * Private constructor for setup buffering memory usage called by one of the setup methods.      *       * @param useMainMemory if<code>true</code> main memory usage is enabled; in case of      *<code>false</code> and<code>useTempFile</code> is<code>false</code> too      *                      we set this to<code>true</code>      * @param useTempFile if<code>true</code> using of temporary file(s) is enabled      * @param maxMainMemoryBytes maximum number of main-memory to be used;      *                           if<code>-1</code> means 'unrestricted';      *                           if<code>0</code> we only use temporary file if<code>useTempFile</code>      *                           is<code>true</code> otherwise main-memory usage will have restriction      *                           defined by maxStorageBytes      * @param maxStorageBytes maximum size the main-memory and temporary file(s) may have all together;      *<code>0</code>  or less will be ignored; if it is less than      *                        maxMainMemoryBytes we use maxMainMemoryBytes value instead       */
specifier|private
name|MemoryUsageSetting
parameter_list|(
name|boolean
name|useMainMemory
parameter_list|,
name|boolean
name|useTempFile
parameter_list|,
name|long
name|maxMainMemoryBytes
parameter_list|,
name|long
name|maxStorageBytes
parameter_list|)
block|{
comment|// do some checks; adjust values as needed to get consistent setting
name|boolean
name|locUseMainMemory
init|=
name|useTempFile
condition|?
name|useMainMemory
else|:
literal|true
decl_stmt|;
name|long
name|locMaxMainMemoryBytes
init|=
name|useMainMemory
condition|?
name|maxMainMemoryBytes
else|:
operator|-
literal|1
decl_stmt|;
name|long
name|locMaxStorageBytes
init|=
name|maxStorageBytes
operator|>
literal|0
condition|?
name|maxStorageBytes
else|:
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|locMaxMainMemoryBytes
operator|<
operator|-
literal|1
condition|)
block|{
name|locMaxMainMemoryBytes
operator|=
operator|-
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|locUseMainMemory
operator|&&
operator|(
name|locMaxMainMemoryBytes
operator|==
literal|0
operator|)
condition|)
block|{
if|if
condition|(
name|useTempFile
condition|)
block|{
name|locUseMainMemory
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|locMaxMainMemoryBytes
operator|=
name|locMaxStorageBytes
expr_stmt|;
block|}
block|}
if|if
condition|(
name|locUseMainMemory
operator|&&
operator|(
name|locMaxStorageBytes
operator|>
operator|-
literal|1
operator|)
operator|&&
operator|(
operator|(
name|locMaxMainMemoryBytes
operator|==
operator|-
literal|1
operator|)
operator|||
operator|(
name|locMaxMainMemoryBytes
operator|>
name|locMaxStorageBytes
operator|)
operator|)
condition|)
block|{
name|locMaxStorageBytes
operator|=
name|locMaxMainMemoryBytes
expr_stmt|;
block|}
name|this
operator|.
name|useMainMemory
operator|=
name|locUseMainMemory
expr_stmt|;
name|this
operator|.
name|useTempFile
operator|=
name|useTempFile
expr_stmt|;
name|this
operator|.
name|maxMainMemoryBytes
operator|=
name|locMaxMainMemoryBytes
expr_stmt|;
name|this
operator|.
name|maxStorageBytes
operator|=
name|locMaxStorageBytes
expr_stmt|;
block|}
comment|/**      * Setups buffering memory usage to only use main-memory (no temporary file)      * which is not restricted in size.      */
specifier|public
specifier|static
name|MemoryUsageSetting
name|setupMainMemoryOnly
parameter_list|()
block|{
return|return
name|setupMainMemoryOnly
argument_list|(
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/**      * Setups buffering memory usage to only use main-memory with the defined maximum.      *       * @param maxMainMemoryBytes maximum number of main-memory to be used;      *<code>-1</code> for no restriction;      *<code>0</code> will also be interpreted here as no restriction      */
specifier|public
specifier|static
name|MemoryUsageSetting
name|setupMainMemoryOnly
parameter_list|(
name|long
name|maxMainMemoryBytes
parameter_list|)
block|{
return|return
operator|new
name|MemoryUsageSetting
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|maxMainMemoryBytes
argument_list|,
name|maxMainMemoryBytes
argument_list|)
return|;
block|}
comment|/**      * Setups buffering memory usage to only use temporary file(s) (no main-memory)      * with not restricted size.      */
specifier|public
specifier|static
name|MemoryUsageSetting
name|setupTempFileOnly
parameter_list|()
block|{
return|return
name|setupTempFileOnly
argument_list|(
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/**      * Setups buffering memory usage to only use temporary file(s) (no main-memory)      * with the specified maximum size.      *       * @param maxStorageBytes maximum size the temporary file(s) may have all together;      *<code>-1</code> for no restriction;      *<code>0</code> will also be interpreted here as no restriction      */
specifier|public
specifier|static
name|MemoryUsageSetting
name|setupTempFileOnly
parameter_list|(
name|long
name|maxStorageBytes
parameter_list|)
block|{
return|return
operator|new
name|MemoryUsageSetting
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
name|maxStorageBytes
argument_list|)
return|;
block|}
comment|/**      * Setups buffering memory usage to use a portion of main-memory and additionally      * temporary file(s) in case the specified portion is exceeded.      *       * @param maxMainMemoryBytes maximum number of main-memory to be used;      *                           if<code>-1</code> this is the same as {@link #setupMainMemoryOnly()};      *                           if<code>0</code> this is the same as {@link #setupTempFileOnly()}      */
specifier|public
specifier|static
name|MemoryUsageSetting
name|setupMixed
parameter_list|(
name|long
name|maxMainMemoryBytes
parameter_list|)
block|{
return|return
name|setupMixed
argument_list|(
name|maxMainMemoryBytes
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/**      * Setups buffering memory usage to use a portion of main-memory and additionally      * temporary file(s) in case the specified portion is exceeded.      *       * @param maxMainMemoryBytes maximum number of main-memory to be used;      *                           if<code>-1</code> this is the same as {@link #setupMainMemoryOnly()};      *                           if<code>0</code> this is the same as {@link #setupTempFileOnly()}      * @param maxStorageBytes maximum size the main-memory and temporary file(s) may have all together;      *<code>0</code>  or less will be ignored; if it is less than      *                        maxMainMemoryBytes we use maxMainMemoryBytes value instead       */
specifier|public
specifier|static
name|MemoryUsageSetting
name|setupMixed
parameter_list|(
name|long
name|maxMainMemoryBytes
parameter_list|,
name|long
name|maxStorageBytes
parameter_list|)
block|{
return|return
operator|new
name|MemoryUsageSetting
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|maxMainMemoryBytes
argument_list|,
name|maxStorageBytes
argument_list|)
return|;
block|}
comment|/**      * Sets directory to be used for temporary files.      *       * @param tempDir directory for temporary files      *       * @return this instance      */
specifier|public
name|MemoryUsageSetting
name|setTempDir
parameter_list|(
name|File
name|tempDir
parameter_list|)
block|{
name|this
operator|.
name|tempDir
operator|=
name|tempDir
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Returns<code>true</code> if main-memory is to be used.      *       *<p>If this returns<code>false</code> it is ensured {@link #useTempFile()}      * returns<code>true</code>.</p>      */
specifier|public
name|boolean
name|useMainMemory
parameter_list|()
block|{
return|return
name|useMainMemory
return|;
block|}
comment|/**      * Returns<code>true</code> if temporary file is to be used.      *       *<p>If this returns<code>false</code> it is ensured {@link #useMainMemory}      * returns<code>true</code>.</p>      */
specifier|public
name|boolean
name|useTempFile
parameter_list|()
block|{
return|return
name|useTempFile
return|;
block|}
comment|/**      * Returns<code>true</code> if maximum main memory is restricted to a specific      * number of bytes.      */
specifier|public
name|boolean
name|isMainMemoryRestricted
parameter_list|()
block|{
return|return
name|maxMainMemoryBytes
operator|>=
literal|0
return|;
block|}
comment|/**      * Returns<code>true</code> if maximum amount of storage is restricted to a specific      * number of bytes.      */
specifier|public
name|boolean
name|isStorageRestricted
parameter_list|()
block|{
return|return
name|maxStorageBytes
operator|>
literal|0
return|;
block|}
comment|/**      * Returns maximum size of main-memory in bytes to be used.      */
specifier|public
name|long
name|getMaxMainMemoryBytes
parameter_list|()
block|{
return|return
name|maxMainMemoryBytes
return|;
block|}
comment|/**      * Returns maximum size of storage bytes to be used      * (main-memory in temporary files all together).      */
specifier|public
name|long
name|getMaxStorageBytes
parameter_list|()
block|{
return|return
name|maxStorageBytes
return|;
block|}
comment|/**      * Returns directory to be used for temporary files or<code>null</code>      * if it was not set.      */
specifier|public
name|File
name|getTempDir
parameter_list|()
block|{
return|return
name|tempDir
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|useMainMemory
condition|?
operator|(
name|useTempFile
condition|?
literal|"Mixed mode with max. of "
operator|+
name|maxMainMemoryBytes
operator|+
literal|" main memory bytes"
operator|+
operator|(
name|isStorageRestricted
argument_list|()
condition|?
literal|" and max. of "
operator|+
name|maxStorageBytes
operator|+
literal|" storage bytes"
else|:
literal|" and unrestricted scratch file size"
operator|)
else|:
operator|(
name|isMainMemoryRestricted
argument_list|()
condition|?
literal|"Main memory only with max. of "
operator|+
name|maxMainMemoryBytes
operator|+
literal|" bytes"
else|:
literal|"Main memory only with no size restriction"
operator|)
operator|)
else|:
operator|(
name|isStorageRestricted
argument_list|()
condition|?
literal|"Scratch file only with max. of "
operator|+
name|maxStorageBytes
operator|+
literal|" bytes"
else|:
literal|"Scratch file only with no size restriction"
operator|)
return|;
block|}
block|}
end_class

end_unit

