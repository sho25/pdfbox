begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_comment
comment|/**  * A {@link RandomAccess} implemented as a doubly linked list over multiple pages in a {@link java.io.RandomAccessFile}.  *<p>  * Each page is {@link #PAGE_SIZE} bytes, with the first 8 bytes being a pointer to page index (  * {@code pageOffset / PAGE_SIZE}) of the previous page in the buffer, and the last 8 bytes being a pointer to the page  * index of the next page in the buffer.  *   * @author Jesse Long  */
end_comment

begin_class
class|class
name|ScratchFileBuffer
implements|implements
name|RandomAccess
block|{
comment|/**      * The size of each page.      */
specifier|private
specifier|static
specifier|final
name|int
name|PAGE_SIZE
init|=
literal|4096
decl_stmt|;
comment|/**      * The underlying scratch file.      */
specifier|private
name|ScratchFile
name|scratchFile
decl_stmt|;
comment|/**      * The random access file of the scratch file.      */
specifier|private
name|RandomAccessFile
name|raFile
decl_stmt|;
comment|/**      * The first page in this buffer.      */
specifier|private
specifier|final
name|long
name|firstPage
decl_stmt|;
comment|/**      * The number of bytes of content in this buffer.      */
specifier|private
name|long
name|length
init|=
literal|0
decl_stmt|;
comment|/**      * The index of the page in which the current position of this buffer is in.      */
specifier|private
name|long
name|currentPage
decl_stmt|;
comment|/**      * The current position of the buffer as an offset in the current page.      */
specifier|private
name|int
name|positionInPage
decl_stmt|;
comment|/**      * The current position in the space of the whole buffer.      */
specifier|private
name|long
name|positionInBuffer
decl_stmt|;
comment|/**      * Creates a new buffer in the provided {@link ScratchFile}.      *       * @param scratchFile The {@link ScratchFile} in which to create the new buffer.      * @throws IOException If there was an error writing to the file.      */
name|ScratchFileBuffer
parameter_list|(
name|ScratchFile
name|scratchFile
parameter_list|)
throws|throws
name|IOException
block|{
name|scratchFile
operator|.
name|checkClosed
argument_list|()
expr_stmt|;
name|this
operator|.
name|scratchFile
operator|=
name|scratchFile
expr_stmt|;
name|raFile
operator|=
name|scratchFile
operator|.
name|getRandomAccessFile
argument_list|()
expr_stmt|;
comment|/*          * We must allocate a new first page for each new buffer, in case multiple buffers are created at the same time,          * and use the same space.          */
name|firstPage
operator|=
name|createNewPage
argument_list|()
expr_stmt|;
comment|/*          * Mark the first page back pointer to -1 to indicate start of buffer.          */
name|raFile
operator|.
name|seek
argument_list|(
name|firstPage
operator|*
name|PAGE_SIZE
argument_list|)
expr_stmt|;
name|raFile
operator|.
name|writeLong
argument_list|(
operator|-
literal|1L
argument_list|)
expr_stmt|;
comment|/*          * Reset variables to beginning of empty buffer.          */
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**      * Checks if this buffer, or the underlying {@link ScratchFile} have been closed, throwing {@link IOException} if      * so.      *       * @throws IOException If either this buffer, or the underlying {@link ScratchFile} have been closed.      */
specifier|private
name|void
name|checkClosed
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|scratchFile
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Scratch file buffer already closed"
argument_list|)
throw|;
block|}
name|scratchFile
operator|.
name|checkClosed
argument_list|()
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|long
name|length
parameter_list|()
throws|throws
name|IOException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
return|return
name|length
return|;
block|}
comment|/**      * Allocates a new page, and links the current and the new page.      *       * @throws IOException If there was an error writing to the file.      */
specifier|private
name|void
name|growToNewPage
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|newPage
init|=
name|createNewPage
argument_list|()
decl_stmt|;
comment|/*          * We should only grow to a new page when previous pages are full. If not, links won't work.          */
if|if
condition|(
name|positionInPage
operator|!=
name|PAGE_SIZE
operator|-
literal|8
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Corruption detected in scratch file"
argument_list|)
throw|;
block|}
name|seekToCurrentPositionInFile
argument_list|()
expr_stmt|;
name|raFile
operator|.
name|writeLong
argument_list|(
name|newPage
argument_list|)
expr_stmt|;
name|long
name|previousPage
init|=
name|currentPage
decl_stmt|;
name|currentPage
operator|=
name|newPage
expr_stmt|;
name|positionInPage
operator|=
literal|0
expr_stmt|;
comment|/*          * write back link to previous page.          */
name|seekToCurrentPositionInFile
argument_list|()
expr_stmt|;
name|raFile
operator|.
name|writeLong
argument_list|(
name|previousPage
argument_list|)
expr_stmt|;
name|positionInPage
operator|=
literal|8
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
name|seekToCurrentPositionInFile
argument_list|()
expr_stmt|;
if|if
condition|(
name|positionInPage
operator|==
name|PAGE_SIZE
operator|-
literal|8
condition|)
block|{
name|growToNewPage
argument_list|()
expr_stmt|;
block|}
name|raFile
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|positionInPage
operator|++
expr_stmt|;
name|positionInBuffer
operator|++
expr_stmt|;
if|if
condition|(
name|positionInBuffer
operator|>
name|length
condition|)
block|{
name|length
operator|=
name|positionInBuffer
expr_stmt|;
block|}
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|write
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
name|seekToCurrentPositionInFile
argument_list|()
expr_stmt|;
while|while
condition|(
name|len
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|positionInPage
operator|==
name|PAGE_SIZE
operator|-
literal|8
condition|)
block|{
name|growToNewPage
argument_list|()
expr_stmt|;
block|}
name|int
name|availableSpaceInCurrentPage
init|=
operator|(
name|PAGE_SIZE
operator|-
literal|8
operator|)
operator|-
name|positionInPage
decl_stmt|;
name|int
name|bytesToWrite
init|=
name|Math
operator|.
name|min
argument_list|(
name|len
argument_list|,
name|availableSpaceInCurrentPage
argument_list|)
decl_stmt|;
name|raFile
operator|.
name|write
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|bytesToWrite
argument_list|)
expr_stmt|;
name|off
operator|+=
name|bytesToWrite
expr_stmt|;
name|len
operator|-=
name|bytesToWrite
expr_stmt|;
name|positionInPage
operator|+=
name|bytesToWrite
expr_stmt|;
name|positionInBuffer
operator|+=
name|bytesToWrite
expr_stmt|;
if|if
condition|(
name|positionInBuffer
operator|>
name|length
condition|)
block|{
name|length
operator|=
name|positionInBuffer
expr_stmt|;
block|}
block|}
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
specifier|final
name|void
name|clear
parameter_list|()
throws|throws
name|IOException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
name|length
operator|=
literal|0
expr_stmt|;
name|currentPage
operator|=
name|firstPage
expr_stmt|;
name|positionInBuffer
operator|=
literal|0
expr_stmt|;
name|positionInPage
operator|=
literal|8
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|long
name|getPosition
parameter_list|()
throws|throws
name|IOException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
return|return
name|positionInBuffer
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|void
name|seek
parameter_list|(
name|long
name|seekToPosition
parameter_list|)
throws|throws
name|IOException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
comment|/*          * Can't seek past end of file. If you want to change implementation, seek to end of file, write zero bytes for          * remaining seek distance.          */
if|if
condition|(
name|seekToPosition
operator|>
name|length
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
if|if
condition|(
name|seekToPosition
operator|<
name|positionInBuffer
condition|)
block|{
if|if
condition|(
name|currentPage
operator|!=
name|firstPage
operator|&&
name|seekToPosition
operator|<
operator|(
name|positionInBuffer
operator|/
literal|2
operator|)
condition|)
block|{
comment|/*                  * If we are seeking backwards, and the seek to position is closer to the beginning of the buffer than                  * our current position, just go to the start of the buffer and seek forward from there. Recurse exactly                  * once.                  */
name|currentPage
operator|=
name|firstPage
expr_stmt|;
name|positionInPage
operator|=
literal|8
expr_stmt|;
name|positionInBuffer
operator|=
literal|0
expr_stmt|;
name|seek
argument_list|(
name|seekToPosition
argument_list|)
expr_stmt|;
block|}
else|else
block|{
while|while
condition|(
name|positionInBuffer
operator|-
name|seekToPosition
operator|>
name|positionInPage
operator|-
literal|8
condition|)
block|{
name|raFile
operator|.
name|seek
argument_list|(
name|currentPage
operator|*
name|PAGE_SIZE
argument_list|)
expr_stmt|;
name|long
name|previousPage
init|=
name|raFile
operator|.
name|readLong
argument_list|()
decl_stmt|;
name|currentPage
operator|=
name|previousPage
expr_stmt|;
name|positionInBuffer
operator|-=
operator|(
name|positionInPage
operator|-
literal|8
operator|)
expr_stmt|;
name|positionInPage
operator|=
name|PAGE_SIZE
operator|-
literal|8
expr_stmt|;
block|}
name|positionInPage
operator|-=
operator|(
name|positionInBuffer
operator|-
name|seekToPosition
operator|)
expr_stmt|;
name|positionInBuffer
operator|=
name|seekToPosition
expr_stmt|;
block|}
block|}
else|else
block|{
while|while
condition|(
name|seekToPosition
operator|-
name|positionInBuffer
operator|>
operator|(
name|PAGE_SIZE
operator|-
literal|8
operator|)
operator|-
name|positionInPage
condition|)
block|{
comment|// seek to 8 bytes from end of current page, to read next page pointer.
name|raFile
operator|.
name|seek
argument_list|(
operator|(
operator|(
name|currentPage
operator|+
literal|1
operator|)
operator|*
name|PAGE_SIZE
operator|)
operator|-
literal|8
argument_list|)
expr_stmt|;
name|long
name|nextPage
init|=
name|raFile
operator|.
name|readLong
argument_list|()
decl_stmt|;
name|positionInBuffer
operator|+=
operator|(
name|PAGE_SIZE
operator|-
literal|8
operator|)
operator|-
name|positionInPage
expr_stmt|;
name|currentPage
operator|=
name|nextPage
expr_stmt|;
name|positionInPage
operator|=
literal|8
expr_stmt|;
block|}
name|positionInPage
operator|+=
name|seekToPosition
operator|-
name|positionInBuffer
expr_stmt|;
name|positionInBuffer
operator|=
name|seekToPosition
expr_stmt|;
block|}
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|boolean
name|isClosed
parameter_list|()
block|{
return|return
name|scratchFile
operator|==
literal|null
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|int
name|peek
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|result
init|=
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|!=
operator|-
literal|1
condition|)
block|{
name|rewind
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|void
name|rewind
parameter_list|(
name|int
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
name|seek
argument_list|(
name|positionInBuffer
operator|-
name|bytes
argument_list|)
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readFully
parameter_list|(
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
do|do
block|{
name|int
name|count
init|=
name|read
argument_list|(
name|b
argument_list|,
name|n
argument_list|,
name|len
operator|-
name|n
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
name|n
operator|+=
name|count
expr_stmt|;
block|}
do|while
condition|(
name|n
operator|<
name|len
condition|)
do|;
return|return
name|b
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|boolean
name|isEOF
parameter_list|()
throws|throws
name|IOException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
return|return
name|positionInBuffer
operator|>=
name|length
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|int
name|available
parameter_list|()
throws|throws
name|IOException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
return|return
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|length
operator|-
name|positionInBuffer
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
if|if
condition|(
name|positionInBuffer
operator|>=
name|length
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|seekToCurrentPositionInFile
argument_list|()
expr_stmt|;
if|if
condition|(
name|positionInPage
operator|==
name|PAGE_SIZE
operator|-
literal|8
condition|)
block|{
name|currentPage
operator|=
name|raFile
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|positionInPage
operator|=
literal|8
expr_stmt|;
name|seekToCurrentPositionInFile
argument_list|()
expr_stmt|;
block|}
name|int
name|retv
init|=
name|raFile
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|retv
operator|>=
literal|0
condition|)
block|{
name|positionInPage
operator|++
expr_stmt|;
name|positionInBuffer
operator|++
expr_stmt|;
block|}
return|return
name|retv
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|read
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
if|if
condition|(
name|positionInBuffer
operator|>=
name|length
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|seekToCurrentPositionInFile
argument_list|()
expr_stmt|;
if|if
condition|(
name|positionInPage
operator|==
name|PAGE_SIZE
operator|-
literal|8
condition|)
block|{
name|currentPage
operator|=
name|raFile
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|positionInPage
operator|=
literal|8
expr_stmt|;
name|seekToCurrentPositionInFile
argument_list|()
expr_stmt|;
block|}
name|len
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|len
argument_list|,
name|length
operator|-
name|positionInBuffer
argument_list|)
expr_stmt|;
name|int
name|totalBytesRead
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|int
name|availableInThisPage
init|=
operator|(
name|PAGE_SIZE
operator|-
literal|8
operator|)
operator|-
name|positionInPage
decl_stmt|;
name|int
name|rdbytes
init|=
name|raFile
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|len
argument_list|,
name|availableInThisPage
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|rdbytes
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"EOF reached before end of scratch file stream"
argument_list|)
throw|;
block|}
if|if
condition|(
name|rdbytes
operator|==
name|availableInThisPage
condition|)
block|{
name|currentPage
operator|=
name|raFile
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|positionInPage
operator|=
literal|8
expr_stmt|;
name|seekToCurrentPositionInFile
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|positionInPage
operator|+=
name|rdbytes
expr_stmt|;
block|}
name|totalBytesRead
operator|+=
name|rdbytes
expr_stmt|;
name|positionInBuffer
operator|+=
name|rdbytes
expr_stmt|;
name|off
operator|+=
name|rdbytes
expr_stmt|;
name|len
operator|-=
name|rdbytes
expr_stmt|;
block|}
return|return
name|totalBytesRead
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|scratchFile
operator|=
literal|null
expr_stmt|;
name|raFile
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Positions the underlying {@link java.io.RandomAccessFile} to the correct position for use by this buffer.      *       * @throws IOException If there was a problem seeking in the {@link java.io.RandomAccessFile}.      */
specifier|private
name|void
name|seekToCurrentPositionInFile
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|positionInFile
init|=
operator|(
name|currentPage
operator|*
name|PAGE_SIZE
operator|)
operator|+
name|positionInPage
decl_stmt|;
if|if
condition|(
name|raFile
operator|.
name|getFilePointer
argument_list|()
operator|!=
name|positionInFile
condition|)
block|{
name|raFile
operator|.
name|seek
argument_list|(
name|positionInFile
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Allocates a new page in the temporary file by growing the file, returning the page index of the new page.      *       * @return The index of the new page.      * @throws IOException If there was an error growing the file.      */
specifier|private
name|long
name|createNewPage
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|fileLen
init|=
name|raFile
operator|.
name|length
argument_list|()
decl_stmt|;
name|fileLen
operator|+=
name|PAGE_SIZE
expr_stmt|;
if|if
condition|(
name|fileLen
operator|%
name|PAGE_SIZE
operator|>
literal|0
condition|)
block|{
name|fileLen
operator|+=
name|PAGE_SIZE
operator|-
operator|(
name|fileLen
operator|%
name|PAGE_SIZE
operator|)
expr_stmt|;
block|}
name|raFile
operator|.
name|setLength
argument_list|(
name|fileLen
argument_list|)
expr_stmt|;
return|return
operator|(
name|fileLen
operator|/
name|PAGE_SIZE
operator|)
operator|-
literal|1
return|;
block|}
block|}
end_class

end_unit

