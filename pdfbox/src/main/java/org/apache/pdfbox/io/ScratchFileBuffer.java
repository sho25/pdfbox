begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link RandomAccess} as sequence of multiple fixed size pages handled  * by {@link ScratchFile}.  */
end_comment

begin_class
class|class
name|ScratchFileBuffer
implements|implements
name|RandomAccess
block|{
specifier|private
specifier|final
name|int
name|pageSize
decl_stmt|;
comment|/**      * The underlying page handler.      */
specifier|private
name|ScratchFile
name|pageHandler
decl_stmt|;
comment|/**      * The number of bytes of content in this buffer.      */
specifier|private
name|long
name|size
init|=
literal|0
decl_stmt|;
comment|/**      * Index of current page in {@link #pageIndexes} (the nth page within this buffer).      */
specifier|private
name|int
name|currentPagePositionInPageIndexes
decl_stmt|;
comment|/**      * The offset of the current page within this buffer.      */
specifier|private
name|long
name|currentPageOffset
decl_stmt|;
comment|/**      * The current page data.      */
specifier|private
name|byte
index|[]
name|currentPage
decl_stmt|;
comment|/**      * The current position (for next read/write) of the buffer as an offset in the current page.      */
specifier|private
name|int
name|positionInPage
decl_stmt|;
comment|/**       *<code>true</code> if current page was changed by a write method      */
specifier|private
name|boolean
name|currentPageContentChanged
init|=
literal|false
decl_stmt|;
comment|/** contains ordered list of pages with the index the page is known by page handler ({@link ScratchFile}) */
specifier|private
name|int
index|[]
name|pageIndexes
init|=
operator|new
name|int
index|[
literal|16
index|]
decl_stmt|;
comment|/** number of pages held by this buffer */
specifier|private
name|int
name|pageCount
init|=
literal|0
decl_stmt|;
comment|/**      * Creates a new buffer using pages handled by provided {@link ScratchFile}.      *       * @param pageHandler The {@link ScratchFile} managing the pages to be used by this buffer.      *       * @throws IOException If getting first page failed.      */
name|ScratchFileBuffer
parameter_list|(
name|ScratchFile
name|pageHandler
parameter_list|)
throws|throws
name|IOException
block|{
name|pageHandler
operator|.
name|checkClosed
argument_list|()
expr_stmt|;
name|this
operator|.
name|pageHandler
operator|=
name|pageHandler
expr_stmt|;
name|pageSize
operator|=
name|this
operator|.
name|pageHandler
operator|.
name|getPageSize
argument_list|()
expr_stmt|;
name|addPage
argument_list|()
expr_stmt|;
block|}
comment|/**      * Checks if this buffer, or the underlying {@link ScratchFile} have been closed,      * throwing {@link IOException} if so.      *       * @throws IOException If either this buffer, or the underlying {@link ScratchFile} have been closed.      */
specifier|private
name|void
name|checkClosed
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|pageHandler
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Buffer already closed"
argument_list|)
throw|;
block|}
name|pageHandler
operator|.
name|checkClosed
argument_list|()
expr_stmt|;
block|}
comment|/**      * Adds a new page and positions all pointers to start of new page.      *       * @throws IOException if requesting a new page fails      */
specifier|private
name|void
name|addPage
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|pageCount
operator|+
literal|1
operator|>=
name|pageIndexes
operator|.
name|length
condition|)
block|{
name|int
name|newSize
init|=
name|pageIndexes
operator|.
name|length
operator|*
literal|2
decl_stmt|;
comment|// check overflow
if|if
condition|(
name|newSize
operator|<
name|pageIndexes
operator|.
name|length
condition|)
block|{
if|if
condition|(
name|pageIndexes
operator|.
name|length
operator|==
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Maximum buffer size reached."
argument_list|)
throw|;
block|}
name|newSize
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
name|int
index|[]
name|newPageIndexes
init|=
operator|new
name|int
index|[
name|newSize
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|pageIndexes
argument_list|,
literal|0
argument_list|,
name|newPageIndexes
argument_list|,
literal|0
argument_list|,
name|pageCount
argument_list|)
expr_stmt|;
name|pageIndexes
operator|=
name|newPageIndexes
expr_stmt|;
block|}
name|int
name|newPageIdx
init|=
name|pageHandler
operator|.
name|getNewPage
argument_list|()
decl_stmt|;
name|pageIndexes
index|[
name|pageCount
index|]
operator|=
name|newPageIdx
expr_stmt|;
name|currentPagePositionInPageIndexes
operator|=
name|pageCount
expr_stmt|;
name|currentPageOffset
operator|=
operator|(
operator|(
name|long
operator|)
name|pageCount
operator|)
operator|*
name|pageSize
expr_stmt|;
name|pageCount
operator|++
expr_stmt|;
name|currentPage
operator|=
operator|new
name|byte
index|[
name|pageSize
index|]
expr_stmt|;
name|positionInPage
operator|=
literal|0
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|long
name|length
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|size
return|;
block|}
comment|/**      * Ensures the current page has at least one byte left      * ({@link #positionInPage} in&lt; {@link #pageSize}).      *       *<p>If this is not the case we go to next page (writing      * current one if changed). If current buffer has no more      * pages we add a new one.</p>      *       * @param addNewPageIfNeeded if<code>true</code> it is allowed to add a new page in case      *                           we are currently at end of last buffer page      *       * @return<code>true</code> if we were successful positioning pointer before end of page;      *         we might return<code>false</code> if it is not allowed to add another page      *         and current pointer points at end of last page      *       * @throws IOException      */
specifier|private
name|boolean
name|ensureAvailableBytesInPage
parameter_list|(
name|boolean
name|addNewPageIfNeeded
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|positionInPage
operator|>=
name|pageSize
condition|)
block|{
comment|// page full
if|if
condition|(
name|currentPageContentChanged
condition|)
block|{
comment|// write page
name|pageHandler
operator|.
name|writePage
argument_list|(
name|pageIndexes
index|[
name|currentPagePositionInPageIndexes
index|]
argument_list|,
name|currentPage
argument_list|)
expr_stmt|;
name|currentPageContentChanged
operator|=
literal|false
expr_stmt|;
block|}
comment|// get new page
if|if
condition|(
name|currentPagePositionInPageIndexes
operator|+
literal|1
operator|<
name|pageCount
condition|)
block|{
comment|// we already have more pages assigned (there was a backward seek before)
name|currentPage
operator|=
name|pageHandler
operator|.
name|readPage
argument_list|(
name|pageIndexes
index|[
operator|++
name|currentPagePositionInPageIndexes
index|]
argument_list|)
expr_stmt|;
name|currentPageOffset
operator|=
operator|(
operator|(
name|long
operator|)
name|currentPagePositionInPageIndexes
operator|)
operator|*
name|pageSize
expr_stmt|;
name|positionInPage
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|addNewPageIfNeeded
condition|)
block|{
comment|// need new page
name|addPage
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// we are at last page and are not allowed to add new page
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
name|ensureAvailableBytesInPage
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|currentPage
index|[
name|positionInPage
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
name|b
expr_stmt|;
name|currentPageContentChanged
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|currentPageOffset
operator|+
name|positionInPage
operator|>
name|size
condition|)
block|{
name|size
operator|=
name|currentPageOffset
operator|+
name|positionInPage
expr_stmt|;
block|}
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|write
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
name|int
name|remain
init|=
name|len
decl_stmt|;
name|int
name|bOff
init|=
name|off
decl_stmt|;
while|while
condition|(
name|remain
operator|>
literal|0
condition|)
block|{
name|ensureAvailableBytesInPage
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|int
name|bytesToWrite
init|=
name|Math
operator|.
name|min
argument_list|(
name|remain
argument_list|,
name|pageSize
operator|-
name|positionInPage
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|b
argument_list|,
name|bOff
argument_list|,
name|currentPage
argument_list|,
name|positionInPage
argument_list|,
name|bytesToWrite
argument_list|)
expr_stmt|;
name|positionInPage
operator|+=
name|bytesToWrite
expr_stmt|;
name|currentPageContentChanged
operator|=
literal|true
expr_stmt|;
name|bOff
operator|+=
name|bytesToWrite
expr_stmt|;
name|remain
operator|-=
name|bytesToWrite
expr_stmt|;
block|}
if|if
condition|(
name|currentPageOffset
operator|+
name|positionInPage
operator|>
name|size
condition|)
block|{
name|size
operator|=
name|currentPageOffset
operator|+
name|positionInPage
expr_stmt|;
block|}
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
specifier|final
name|void
name|clear
parameter_list|()
throws|throws
name|IOException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
comment|// keep only the first page, discard all other pages
name|pageHandler
operator|.
name|markPagesAsFree
argument_list|(
name|pageIndexes
argument_list|,
literal|1
argument_list|,
name|pageCount
operator|-
literal|1
argument_list|)
expr_stmt|;
name|pageCount
operator|=
literal|1
expr_stmt|;
comment|// change to first page if we are not already there
if|if
condition|(
name|currentPagePositionInPageIndexes
operator|>
literal|0
condition|)
block|{
name|currentPage
operator|=
name|pageHandler
operator|.
name|readPage
argument_list|(
name|pageIndexes
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|currentPagePositionInPageIndexes
operator|=
literal|0
expr_stmt|;
name|currentPageOffset
operator|=
literal|0
expr_stmt|;
block|}
name|positionInPage
operator|=
literal|0
expr_stmt|;
name|size
operator|=
literal|0
expr_stmt|;
name|currentPageContentChanged
operator|=
literal|false
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|long
name|getPosition
parameter_list|()
throws|throws
name|IOException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
return|return
name|currentPageOffset
operator|+
name|positionInPage
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|void
name|seek
parameter_list|(
name|long
name|seekToPosition
parameter_list|)
throws|throws
name|IOException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
comment|/*          * for now we won't allow to seek past end of buffer; this can be changed by adding new pages as needed          */
if|if
condition|(
name|seekToPosition
operator|>
name|size
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
if|if
condition|(
name|seekToPosition
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Negative seek offset: "
operator|+
name|seekToPosition
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|seekToPosition
operator|>=
name|currentPageOffset
operator|)
operator|&&
operator|(
name|seekToPosition
operator|<=
name|currentPageOffset
operator|+
name|pageSize
operator|)
condition|)
block|{
comment|// within same page
name|positionInPage
operator|=
call|(
name|int
call|)
argument_list|(
name|seekToPosition
operator|-
name|currentPageOffset
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// have to go to another page
comment|// check if current page needs to be written to file
if|if
condition|(
name|currentPageContentChanged
condition|)
block|{
name|pageHandler
operator|.
name|writePage
argument_list|(
name|pageIndexes
index|[
name|currentPagePositionInPageIndexes
index|]
argument_list|,
name|currentPage
argument_list|)
expr_stmt|;
name|currentPageContentChanged
operator|=
literal|false
expr_stmt|;
block|}
name|int
name|newPagePosition
init|=
call|(
name|int
call|)
argument_list|(
name|seekToPosition
operator|/
name|pageSize
argument_list|)
decl_stmt|;
name|currentPage
operator|=
name|pageHandler
operator|.
name|readPage
argument_list|(
name|pageIndexes
index|[
name|newPagePosition
index|]
argument_list|)
expr_stmt|;
name|currentPagePositionInPageIndexes
operator|=
name|newPagePosition
expr_stmt|;
name|currentPageOffset
operator|=
operator|(
operator|(
name|long
operator|)
name|currentPagePositionInPageIndexes
operator|)
operator|*
name|pageSize
expr_stmt|;
name|positionInPage
operator|=
call|(
name|int
call|)
argument_list|(
name|seekToPosition
operator|-
name|currentPageOffset
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|boolean
name|isClosed
parameter_list|()
block|{
return|return
name|pageHandler
operator|==
literal|null
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|int
name|peek
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|result
init|=
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|!=
operator|-
literal|1
condition|)
block|{
name|rewind
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|void
name|rewind
parameter_list|(
name|int
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
name|seek
argument_list|(
name|currentPageOffset
operator|+
name|positionInPage
operator|-
name|bytes
argument_list|)
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|readFully
parameter_list|(
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
do|do
block|{
name|int
name|count
init|=
name|read
argument_list|(
name|b
argument_list|,
name|n
argument_list|,
name|len
operator|-
name|n
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
name|n
operator|+=
name|count
expr_stmt|;
block|}
do|while
condition|(
name|n
operator|<
name|len
condition|)
do|;
return|return
name|b
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|boolean
name|isEOF
parameter_list|()
throws|throws
name|IOException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
return|return
name|currentPageOffset
operator|+
name|positionInPage
operator|>=
name|size
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|int
name|available
parameter_list|()
throws|throws
name|IOException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
return|return
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|size
operator|-
operator|(
name|currentPageOffset
operator|+
name|positionInPage
operator|)
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentPageOffset
operator|+
name|positionInPage
operator|>=
name|size
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
operator|!
name|ensureAvailableBytesInPage
argument_list|(
literal|false
argument_list|)
condition|)
block|{
comment|// should not happen, we checked it before
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpectedly no bytes available for read in buffer."
argument_list|)
throw|;
block|}
return|return
name|currentPage
index|[
name|positionInPage
operator|++
index|]
operator|&
literal|0xff
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|read
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentPageOffset
operator|+
name|positionInPage
operator|>=
name|size
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|int
name|remain
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|len
argument_list|,
name|size
operator|-
operator|(
name|currentPageOffset
operator|+
name|positionInPage
operator|)
argument_list|)
decl_stmt|;
name|int
name|totalBytesRead
init|=
literal|0
decl_stmt|;
name|int
name|bOff
init|=
name|off
decl_stmt|;
while|while
condition|(
name|remain
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|ensureAvailableBytesInPage
argument_list|(
literal|false
argument_list|)
condition|)
block|{
comment|// should not happen, we checked it before
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpectedly no bytes available for read in buffer."
argument_list|)
throw|;
block|}
name|int
name|readBytes
init|=
name|Math
operator|.
name|min
argument_list|(
name|remain
argument_list|,
name|pageSize
operator|-
name|positionInPage
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|currentPage
argument_list|,
name|positionInPage
argument_list|,
name|b
argument_list|,
name|bOff
argument_list|,
name|readBytes
argument_list|)
expr_stmt|;
name|positionInPage
operator|+=
name|readBytes
expr_stmt|;
name|totalBytesRead
operator|+=
name|readBytes
expr_stmt|;
name|bOff
operator|+=
name|readBytes
expr_stmt|;
name|remain
operator|-=
name|readBytes
expr_stmt|;
block|}
return|return
name|totalBytesRead
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|pageHandler
operator|!=
literal|null
condition|)
block|{
name|pageHandler
operator|.
name|markPagesAsFree
argument_list|(
name|pageIndexes
argument_list|,
literal|0
argument_list|,
name|pageCount
argument_list|)
expr_stmt|;
name|pageHandler
operator|=
literal|null
expr_stmt|;
name|pageIndexes
operator|=
literal|null
expr_stmt|;
name|currentPage
operator|=
literal|null
expr_stmt|;
name|currentPageOffset
operator|=
literal|0
expr_stmt|;
name|currentPagePositionInPageIndexes
operator|=
operator|-
literal|1
expr_stmt|;
name|positionInPage
operator|=
literal|0
expr_stmt|;
name|size
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

