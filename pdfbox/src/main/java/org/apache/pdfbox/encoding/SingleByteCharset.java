begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|encoding
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|CharBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CharsetDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CharsetEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CoderResult
import|;
end_import

begin_comment
comment|/**  * {@link Charset} implementation for the single-byte encodings.  * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|SingleByteCharset
extends|extends
name|Charset
block|{
comment|/** Unicode replacement character 0xFFFD. */
specifier|protected
specifier|static
specifier|final
name|char
name|REPLACEMENT_CHARACTER
init|=
literal|'\uFFFD'
decl_stmt|;
specifier|private
specifier|final
name|char
index|[]
name|toUnicodeMap
decl_stmt|;
specifier|private
name|byte
index|[]
index|[]
name|toByteMap
decl_stmt|;
comment|/**      * Creates a new single-byte charset using an array of unicode characters.      * @param canonicalName the canonical name      * @param aliases An array of this charset's aliases, or null if it has no aliases      * @param toUnicodeMap the array of unicode characters (may have a maximum of 256 characters,      *          first character must be 0x0000)      */
specifier|protected
name|SingleByteCharset
parameter_list|(
name|String
name|canonicalName
parameter_list|,
name|String
index|[]
name|aliases
parameter_list|,
name|char
index|[]
name|toUnicodeMap
parameter_list|)
block|{
name|super
argument_list|(
name|canonicalName
argument_list|,
name|aliases
argument_list|)
expr_stmt|;
if|if
condition|(
name|toUnicodeMap
operator|.
name|length
operator|>
literal|256
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Single-byte encodings may have at most 256 characters."
argument_list|)
throw|;
block|}
comment|//Copy array so it cannot be changed accidentally from the outside
name|this
operator|.
name|toUnicodeMap
operator|=
operator|new
name|char
index|[
literal|256
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|toUnicodeMap
argument_list|,
literal|0
argument_list|,
name|this
operator|.
name|toUnicodeMap
argument_list|,
literal|0
argument_list|,
name|toUnicodeMap
operator|.
name|length
argument_list|)
expr_stmt|;
comment|//build the inverse lookup table
name|initInverseMap
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|initInverseMap
parameter_list|()
block|{
name|toByteMap
operator|=
operator|new
name|byte
index|[
literal|256
index|]
index|[]
expr_stmt|;
if|if
condition|(
name|toUnicodeMap
index|[
literal|0
index|]
operator|!=
literal|'\u0000'
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"First character in map must be a NUL (0x0000) character."
argument_list|)
throw|;
comment|//because we're using 0x00 for encoding otherwise unmapped characters
block|}
comment|//we're building a kind of sparse lookup table in which not all subranges are covered.
for|for
control|(
name|int
name|i
init|=
literal|1
init|,
name|len
init|=
name|toUnicodeMap
operator|.
name|length
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|char
name|ch
init|=
name|toUnicodeMap
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|ch
operator|==
name|REPLACEMENT_CHARACTER
condition|)
block|{
continue|continue;
comment|//skip
block|}
name|int
name|upper
init|=
name|ch
operator|>>
literal|8
decl_stmt|;
name|int
name|lower
init|=
name|ch
operator|&
literal|0xFF
decl_stmt|;
if|if
condition|(
name|upper
operator|>
literal|0xFF
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Not a compatible character: "
operator|+
name|ch
operator|+
literal|" ("
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|ch
argument_list|)
operator|+
literal|")"
argument_list|)
throw|;
block|}
name|byte
index|[]
name|map
init|=
name|toByteMap
index|[
name|upper
index|]
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
name|map
operator|=
operator|new
name|byte
index|[
literal|256
index|]
expr_stmt|;
name|toByteMap
index|[
name|upper
index|]
operator|=
name|map
expr_stmt|;
block|}
name|map
index|[
name|lower
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|i
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
name|Charset
name|cs
parameter_list|)
block|{
return|return
operator|(
name|cs
operator|.
name|getClass
argument_list|()
operator|==
name|getClass
argument_list|()
operator|)
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|CharsetDecoder
name|newDecoder
parameter_list|()
block|{
return|return
operator|new
name|Decoder
argument_list|()
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|CharsetEncoder
name|newEncoder
parameter_list|()
block|{
return|return
operator|new
name|Encoder
argument_list|()
return|;
block|}
comment|/** The decoder. */
specifier|private
class|class
name|Decoder
extends|extends
name|CharsetDecoder
block|{
specifier|protected
name|Decoder
parameter_list|()
block|{
name|super
argument_list|(
name|SingleByteCharset
operator|.
name|this
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|CoderResult
name|decodeLoop
parameter_list|(
name|ByteBuffer
name|in
parameter_list|,
name|CharBuffer
name|out
parameter_list|)
block|{
while|while
condition|(
name|in
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|byte
name|b
init|=
name|in
operator|.
name|get
argument_list|()
decl_stmt|;
name|char
name|ch
decl_stmt|;
if|if
condition|(
operator|!
name|out
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|in
operator|.
name|position
argument_list|(
name|in
operator|.
name|position
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
name|CoderResult
operator|.
name|OVERFLOW
return|;
block|}
name|ch
operator|=
name|toUnicodeMap
index|[
name|b
operator|&
literal|0xFF
index|]
expr_stmt|;
if|if
condition|(
name|ch
operator|==
name|REPLACEMENT_CHARACTER
condition|)
block|{
return|return
name|CoderResult
operator|.
name|unmappableForLength
argument_list|(
literal|1
argument_list|)
return|;
block|}
name|out
operator|.
name|put
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
return|return
name|CoderResult
operator|.
name|UNDERFLOW
return|;
block|}
block|}
comment|/** The encoder. */
specifier|private
class|class
name|Encoder
extends|extends
name|CharsetEncoder
block|{
specifier|protected
name|Encoder
parameter_list|()
block|{
name|super
argument_list|(
name|SingleByteCharset
operator|.
name|this
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|CoderResult
name|encodeLoop
parameter_list|(
name|CharBuffer
name|in
parameter_list|,
name|ByteBuffer
name|out
parameter_list|)
block|{
while|while
condition|(
name|in
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|int
name|ch
init|=
name|in
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|out
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|in
operator|.
name|position
argument_list|(
name|in
operator|.
name|position
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
name|CoderResult
operator|.
name|OVERFLOW
return|;
block|}
name|int
name|upper
init|=
name|ch
operator|>>
literal|8
decl_stmt|;
name|int
name|lower
init|=
name|ch
operator|&
literal|0xFF
decl_stmt|;
if|if
condition|(
name|upper
operator|>
literal|0xFF
condition|)
block|{
name|in
operator|.
name|position
argument_list|(
name|in
operator|.
name|position
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
name|CoderResult
operator|.
name|unmappableForLength
argument_list|(
literal|1
argument_list|)
return|;
block|}
name|byte
index|[]
name|map
init|=
name|toByteMap
index|[
name|upper
index|]
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
name|in
operator|.
name|position
argument_list|(
name|in
operator|.
name|position
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
name|CoderResult
operator|.
name|unmappableForLength
argument_list|(
literal|1
argument_list|)
return|;
block|}
name|byte
name|b
init|=
name|map
index|[
name|lower
index|]
decl_stmt|;
if|if
condition|(
name|b
operator|==
literal|0x00
condition|)
block|{
name|in
operator|.
name|position
argument_list|(
name|in
operator|.
name|position
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
name|CoderResult
operator|.
name|unmappableForLength
argument_list|(
literal|1
argument_list|)
return|;
block|}
name|out
operator|.
name|put
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
return|return
name|CoderResult
operator|.
name|UNDERFLOW
return|;
block|}
block|}
block|}
end_class

end_unit

