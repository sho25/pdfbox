begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|text
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_comment
comment|/**  * This class is a comparator for TextPosition operators.  It handles  * pages with text in different directions by grouping the text based  * on direction and sorting in that direction. This allows continuous text  * in a given direction to be more easily grouped together.    *  * @author Ben Litchfield  */
end_comment

begin_class
specifier|public
class|class
name|TextPositionComparator
implements|implements
name|Comparator
argument_list|<
name|TextPosition
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|TextPosition
name|pos1
parameter_list|,
name|TextPosition
name|pos2
parameter_list|)
block|{
comment|// only compare text that is in the same direction
if|if
condition|(
name|pos1
operator|.
name|getDir
argument_list|()
operator|<
name|pos2
operator|.
name|getDir
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|pos1
operator|.
name|getDir
argument_list|()
operator|>
name|pos2
operator|.
name|getDir
argument_list|()
condition|)
block|{
return|return
literal|1
return|;
block|}
comment|// get the text direction adjusted coordinates
name|float
name|x1
init|=
name|pos1
operator|.
name|getXDirAdj
argument_list|()
decl_stmt|;
name|float
name|x2
init|=
name|pos2
operator|.
name|getXDirAdj
argument_list|()
decl_stmt|;
name|float
name|pos1YBottom
init|=
name|pos1
operator|.
name|getYDirAdj
argument_list|()
decl_stmt|;
name|float
name|pos2YBottom
init|=
name|pos2
operator|.
name|getYDirAdj
argument_list|()
decl_stmt|;
comment|// note that the coordinates have been adjusted so 0,0 is in upper left
name|float
name|pos1YTop
init|=
name|pos1YBottom
operator|-
name|pos1
operator|.
name|getHeightDir
argument_list|()
decl_stmt|;
name|float
name|pos2YTop
init|=
name|pos2YBottom
operator|-
name|pos2
operator|.
name|getHeightDir
argument_list|()
decl_stmt|;
name|float
name|yDifference
init|=
name|Math
operator|.
name|abs
argument_list|(
name|pos1YBottom
operator|-
name|pos2YBottom
argument_list|)
decl_stmt|;
comment|// we will do a simple tolerance comparison
if|if
condition|(
name|yDifference
operator|<
literal|.1
operator|||
name|pos2YBottom
operator|>=
name|pos1YTop
operator|&&
name|pos2YBottom
operator|<=
name|pos1YBottom
operator|||
name|pos1YBottom
operator|>=
name|pos2YTop
operator|&&
name|pos1YBottom
operator|<=
name|pos2YBottom
condition|)
block|{
if|if
condition|(
name|x1
operator|<
name|x2
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|x1
operator|>
name|x2
condition|)
block|{
return|return
literal|1
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|pos1YBottom
operator|<
name|pos2YBottom
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
literal|1
return|;
block|}
block|}
block|}
end_class

end_unit

