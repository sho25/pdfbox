begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|text
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|contentstream
operator|.
name|PDFStreamEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|encoding
operator|.
name|GlyphList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDRectangle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDCIDFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDCIDFontType2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDSimpleFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDTrueTypeFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDType0Font
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDType3Font
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|state
operator|.
name|PDGraphicsState
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|ttf
operator|.
name|TrueTypeFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|util
operator|.
name|BoundingBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|Matrix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|contentstream
operator|.
name|operator
operator|.
name|DrawObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|contentstream
operator|.
name|operator
operator|.
name|state
operator|.
name|Concatenate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|contentstream
operator|.
name|operator
operator|.
name|state
operator|.
name|Restore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|contentstream
operator|.
name|operator
operator|.
name|state
operator|.
name|Save
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|contentstream
operator|.
name|operator
operator|.
name|state
operator|.
name|SetGraphicsStateParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|contentstream
operator|.
name|operator
operator|.
name|state
operator|.
name|SetMatrix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|contentstream
operator|.
name|operator
operator|.
name|text
operator|.
name|BeginText
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|contentstream
operator|.
name|operator
operator|.
name|text
operator|.
name|EndText
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|contentstream
operator|.
name|operator
operator|.
name|text
operator|.
name|SetFontAndSize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|contentstream
operator|.
name|operator
operator|.
name|text
operator|.
name|SetTextHorizontalScaling
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|contentstream
operator|.
name|operator
operator|.
name|text
operator|.
name|ShowTextAdjusted
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|contentstream
operator|.
name|operator
operator|.
name|text
operator|.
name|ShowTextLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|contentstream
operator|.
name|operator
operator|.
name|text
operator|.
name|ShowTextLineAndSpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|contentstream
operator|.
name|operator
operator|.
name|text
operator|.
name|MoveText
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|contentstream
operator|.
name|operator
operator|.
name|text
operator|.
name|MoveTextSetLeading
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|contentstream
operator|.
name|operator
operator|.
name|text
operator|.
name|NextLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|contentstream
operator|.
name|operator
operator|.
name|text
operator|.
name|SetCharSpacing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|contentstream
operator|.
name|operator
operator|.
name|text
operator|.
name|SetTextLeading
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|contentstream
operator|.
name|operator
operator|.
name|text
operator|.
name|SetTextRenderingMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|contentstream
operator|.
name|operator
operator|.
name|text
operator|.
name|SetTextRise
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|contentstream
operator|.
name|operator
operator|.
name|text
operator|.
name|SetWordSpacing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|contentstream
operator|.
name|operator
operator|.
name|text
operator|.
name|ShowText
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDFontDescriptor
import|;
end_import

begin_comment
comment|/**  * LEGACY text calculations which are known to be incorrect but are depended on by PDFTextStripper.  *   * This class exists only so that we don't break the code of users who have their own subclasses  * of PDFTextStripper. It replaces the good implementation of showGlyph in PDFStreamEngine, with  * a bad implementation which is backwards compatible.  *   * DO NOT USE THIS CODE UNLESS YOU ARE WORKING WITH PDFTextStripper.  * THIS CODE IS DELIBERATELY INCORRECT, USE PDFStreamEngine INSTEAD.  */
end_comment

begin_class
class|class
name|LegacyPDFStreamEngine
extends|extends
name|PDFStreamEngine
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|LegacyPDFStreamEngine
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|int
name|pageRotation
decl_stmt|;
specifier|private
name|PDRectangle
name|pageSize
decl_stmt|;
specifier|private
name|Matrix
name|translateMatrix
decl_stmt|;
specifier|private
specifier|final
name|GlyphList
name|glyphList
decl_stmt|;
comment|/**      * Constructor.      */
name|LegacyPDFStreamEngine
parameter_list|()
throws|throws
name|IOException
block|{
name|addOperator
argument_list|(
operator|new
name|BeginText
argument_list|()
argument_list|)
expr_stmt|;
name|addOperator
argument_list|(
operator|new
name|Concatenate
argument_list|()
argument_list|)
expr_stmt|;
name|addOperator
argument_list|(
operator|new
name|DrawObject
argument_list|()
argument_list|)
expr_stmt|;
comment|// special text version
name|addOperator
argument_list|(
operator|new
name|EndText
argument_list|()
argument_list|)
expr_stmt|;
name|addOperator
argument_list|(
operator|new
name|SetGraphicsStateParameters
argument_list|()
argument_list|)
expr_stmt|;
name|addOperator
argument_list|(
operator|new
name|Save
argument_list|()
argument_list|)
expr_stmt|;
name|addOperator
argument_list|(
operator|new
name|Restore
argument_list|()
argument_list|)
expr_stmt|;
name|addOperator
argument_list|(
operator|new
name|NextLine
argument_list|()
argument_list|)
expr_stmt|;
name|addOperator
argument_list|(
operator|new
name|SetCharSpacing
argument_list|()
argument_list|)
expr_stmt|;
name|addOperator
argument_list|(
operator|new
name|MoveText
argument_list|()
argument_list|)
expr_stmt|;
name|addOperator
argument_list|(
operator|new
name|MoveTextSetLeading
argument_list|()
argument_list|)
expr_stmt|;
name|addOperator
argument_list|(
operator|new
name|SetFontAndSize
argument_list|()
argument_list|)
expr_stmt|;
name|addOperator
argument_list|(
operator|new
name|ShowText
argument_list|()
argument_list|)
expr_stmt|;
name|addOperator
argument_list|(
operator|new
name|ShowTextAdjusted
argument_list|()
argument_list|)
expr_stmt|;
name|addOperator
argument_list|(
operator|new
name|SetTextLeading
argument_list|()
argument_list|)
expr_stmt|;
name|addOperator
argument_list|(
operator|new
name|SetMatrix
argument_list|()
argument_list|)
expr_stmt|;
name|addOperator
argument_list|(
operator|new
name|SetTextRenderingMode
argument_list|()
argument_list|)
expr_stmt|;
name|addOperator
argument_list|(
operator|new
name|SetTextRise
argument_list|()
argument_list|)
expr_stmt|;
name|addOperator
argument_list|(
operator|new
name|SetWordSpacing
argument_list|()
argument_list|)
expr_stmt|;
name|addOperator
argument_list|(
operator|new
name|SetTextHorizontalScaling
argument_list|()
argument_list|)
expr_stmt|;
name|addOperator
argument_list|(
operator|new
name|ShowTextLine
argument_list|()
argument_list|)
expr_stmt|;
name|addOperator
argument_list|(
operator|new
name|ShowTextLineAndSpace
argument_list|()
argument_list|)
expr_stmt|;
comment|// load additional glyph list for Unicode mapping
name|String
name|path
init|=
literal|"/org/apache/pdfbox/resources/glyphlist/additional.txt"
decl_stmt|;
try|try
init|(
name|InputStream
name|input
init|=
name|GlyphList
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|path
argument_list|)
init|)
block|{
name|glyphList
operator|=
operator|new
name|GlyphList
argument_list|(
name|GlyphList
operator|.
name|getAdobeGlyphList
argument_list|()
argument_list|,
name|input
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This will initialize and process the contents of the stream.      *      * @param page the page to process      * @throws java.io.IOException if there is an error accessing the stream.      */
annotation|@
name|Override
specifier|public
name|void
name|processPage
parameter_list|(
name|PDPage
name|page
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|pageRotation
operator|=
name|page
operator|.
name|getRotation
argument_list|()
expr_stmt|;
name|this
operator|.
name|pageSize
operator|=
name|page
operator|.
name|getCropBox
argument_list|()
expr_stmt|;
if|if
condition|(
name|Float
operator|.
name|compare
argument_list|(
name|pageSize
operator|.
name|getLowerLeftX
argument_list|()
argument_list|,
literal|0
argument_list|)
operator|==
literal|0
operator|&&
name|Float
operator|.
name|compare
argument_list|(
name|pageSize
operator|.
name|getLowerLeftY
argument_list|()
argument_list|,
literal|0
argument_list|)
operator|==
literal|0
condition|)
block|{
name|translateMatrix
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
comment|// translation matrix for cropbox
name|translateMatrix
operator|=
name|Matrix
operator|.
name|getTranslateInstance
argument_list|(
operator|-
name|pageSize
operator|.
name|getLowerLeftX
argument_list|()
argument_list|,
operator|-
name|pageSize
operator|.
name|getLowerLeftY
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|processPage
argument_list|(
name|page
argument_list|)
expr_stmt|;
block|}
comment|/**      * This method was originally written by Ben Litchfield for PDFStreamEngine.      */
annotation|@
name|Override
specifier|protected
name|void
name|showGlyph
parameter_list|(
name|Matrix
name|textRenderingMatrix
parameter_list|,
name|PDFont
name|font
parameter_list|,
name|int
name|code
parameter_list|,
name|String
name|unicode
parameter_list|,
name|Vector
name|displacement
parameter_list|)
throws|throws
name|IOException
block|{
comment|//
comment|// legacy calculations which were previously in PDFStreamEngine
comment|//
comment|//  DO NOT USE THIS CODE UNLESS YOU ARE WORKING WITH PDFTextStripper.
comment|//  THIS CODE IS DELIBERATELY INCORRECT
comment|//
name|PDGraphicsState
name|state
init|=
name|getGraphicsState
argument_list|()
decl_stmt|;
name|Matrix
name|ctm
init|=
name|state
operator|.
name|getCurrentTransformationMatrix
argument_list|()
decl_stmt|;
name|float
name|fontSize
init|=
name|state
operator|.
name|getTextState
argument_list|()
operator|.
name|getFontSize
argument_list|()
decl_stmt|;
name|float
name|horizontalScaling
init|=
name|state
operator|.
name|getTextState
argument_list|()
operator|.
name|getHorizontalScaling
argument_list|()
operator|/
literal|100f
decl_stmt|;
name|Matrix
name|textMatrix
init|=
name|getTextMatrix
argument_list|()
decl_stmt|;
name|BoundingBox
name|bbox
init|=
name|font
operator|.
name|getBoundingBox
argument_list|()
decl_stmt|;
if|if
condition|(
name|bbox
operator|.
name|getLowerLeftY
argument_list|()
operator|<
name|Short
operator|.
name|MIN_VALUE
condition|)
block|{
comment|// PDFBOX-2158 and PDFBOX-3130
comment|// files by Salmat eSolutions / ClibPDF Library
name|bbox
operator|.
name|setLowerLeftY
argument_list|(
operator|-
operator|(
name|bbox
operator|.
name|getLowerLeftY
argument_list|()
operator|+
literal|65536
operator|)
argument_list|)
expr_stmt|;
block|}
comment|// 1/2 the bbox is used as the height todo: why?
name|float
name|glyphHeight
init|=
name|bbox
operator|.
name|getHeight
argument_list|()
operator|/
literal|2
decl_stmt|;
comment|// sometimes the bbox has very high values, but CapHeight is OK
name|PDFontDescriptor
name|fontDescriptor
init|=
name|font
operator|.
name|getFontDescriptor
argument_list|()
decl_stmt|;
if|if
condition|(
name|fontDescriptor
operator|!=
literal|null
condition|)
block|{
name|float
name|capHeight
init|=
name|fontDescriptor
operator|.
name|getCapHeight
argument_list|()
decl_stmt|;
if|if
condition|(
name|Float
operator|.
name|compare
argument_list|(
name|capHeight
argument_list|,
literal|0
argument_list|)
operator|!=
literal|0
operator|&&
operator|(
name|capHeight
operator|<
name|glyphHeight
operator|||
name|Float
operator|.
name|compare
argument_list|(
name|glyphHeight
argument_list|,
literal|0
argument_list|)
operator|==
literal|0
operator|)
condition|)
block|{
name|glyphHeight
operator|=
name|capHeight
expr_stmt|;
block|}
comment|// PDFBOX-3464, PDFBOX-4480, PDFBOX-4553:
comment|// sometimes even CapHeight has very high value, but Ascent and Descent are ok
name|float
name|ascent
init|=
name|fontDescriptor
operator|.
name|getAscent
argument_list|()
decl_stmt|;
name|float
name|descent
init|=
name|fontDescriptor
operator|.
name|getDescent
argument_list|()
decl_stmt|;
if|if
condition|(
name|capHeight
operator|>
name|ascent
operator|&&
name|ascent
operator|>
literal|0
operator|&&
name|descent
operator|<
literal|0
operator|&&
operator|(
operator|(
name|ascent
operator|-
name|descent
operator|)
operator|/
literal|2
operator|<
name|glyphHeight
operator|||
name|Float
operator|.
name|compare
argument_list|(
name|glyphHeight
argument_list|,
literal|0
argument_list|)
operator|==
literal|0
operator|)
condition|)
block|{
name|glyphHeight
operator|=
operator|(
name|ascent
operator|-
name|descent
operator|)
operator|/
literal|2
expr_stmt|;
block|}
block|}
comment|// transformPoint from glyph space -> text space
name|float
name|height
decl_stmt|;
if|if
condition|(
name|font
operator|instanceof
name|PDType3Font
condition|)
block|{
name|height
operator|=
name|font
operator|.
name|getFontMatrix
argument_list|()
operator|.
name|transformPoint
argument_list|(
literal|0
argument_list|,
name|glyphHeight
argument_list|)
operator|.
name|y
expr_stmt|;
block|}
else|else
block|{
name|height
operator|=
name|glyphHeight
operator|/
literal|1000
expr_stmt|;
block|}
name|float
name|displacementX
init|=
name|displacement
operator|.
name|getX
argument_list|()
decl_stmt|;
comment|// the sorting algorithm is based on the width of the character. As the displacement
comment|// for vertical characters doesn't provide any suitable value for it, we have to
comment|// calculate our own
if|if
condition|(
name|font
operator|.
name|isVertical
argument_list|()
condition|)
block|{
name|displacementX
operator|=
name|font
operator|.
name|getWidth
argument_list|(
name|code
argument_list|)
operator|/
literal|1000
expr_stmt|;
comment|// there may be an additional scaling factor for true type fonts
name|TrueTypeFont
name|ttf
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|font
operator|instanceof
name|PDTrueTypeFont
condition|)
block|{
name|ttf
operator|=
operator|(
operator|(
name|PDTrueTypeFont
operator|)
name|font
operator|)
operator|.
name|getTrueTypeFont
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|font
operator|instanceof
name|PDType0Font
condition|)
block|{
name|PDCIDFont
name|cidFont
init|=
operator|(
operator|(
name|PDType0Font
operator|)
name|font
operator|)
operator|.
name|getDescendantFont
argument_list|()
decl_stmt|;
if|if
condition|(
name|cidFont
operator|instanceof
name|PDCIDFontType2
condition|)
block|{
name|ttf
operator|=
operator|(
operator|(
name|PDCIDFontType2
operator|)
name|cidFont
operator|)
operator|.
name|getTrueTypeFont
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ttf
operator|!=
literal|null
operator|&&
name|ttf
operator|.
name|getUnitsPerEm
argument_list|()
operator|!=
literal|1000
condition|)
block|{
name|displacementX
operator|*=
literal|1000f
operator|/
name|ttf
operator|.
name|getUnitsPerEm
argument_list|()
expr_stmt|;
block|}
block|}
comment|//
comment|// legacy calculations which were previously in PDFStreamEngine
comment|//
comment|//  DO NOT USE THIS CODE UNLESS YOU ARE WORKING WITH PDFTextStripper.
comment|//  THIS CODE IS DELIBERATELY INCORRECT
comment|//
comment|// (modified) combined displacement, this is calculated *without* taking the character
comment|// spacing and word spacing into account, due to legacy code in TextStripper
name|float
name|tx
init|=
name|displacementX
operator|*
name|fontSize
operator|*
name|horizontalScaling
decl_stmt|;
name|float
name|ty
init|=
name|displacement
operator|.
name|getY
argument_list|()
operator|*
name|fontSize
decl_stmt|;
comment|// (modified) combined displacement matrix
name|Matrix
name|td
init|=
name|Matrix
operator|.
name|getTranslateInstance
argument_list|(
name|tx
argument_list|,
name|ty
argument_list|)
decl_stmt|;
comment|// (modified) text rendering matrix
name|Matrix
name|nextTextRenderingMatrix
init|=
name|td
operator|.
name|multiply
argument_list|(
name|textMatrix
argument_list|)
operator|.
name|multiply
argument_list|(
name|ctm
argument_list|)
decl_stmt|;
comment|// text space -> device space
name|float
name|nextX
init|=
name|nextTextRenderingMatrix
operator|.
name|getTranslateX
argument_list|()
decl_stmt|;
name|float
name|nextY
init|=
name|nextTextRenderingMatrix
operator|.
name|getTranslateY
argument_list|()
decl_stmt|;
comment|// (modified) width and height calculations
name|float
name|dxDisplay
init|=
name|nextX
operator|-
name|textRenderingMatrix
operator|.
name|getTranslateX
argument_list|()
decl_stmt|;
name|float
name|dyDisplay
init|=
name|height
operator|*
name|textRenderingMatrix
operator|.
name|getScalingFactorY
argument_list|()
decl_stmt|;
comment|//
comment|// start of the original method
comment|//
comment|// Note on variable names. There are three different units being used in this code.
comment|// Character sizes are given in glyph units, text locations are initially given in text
comment|// units, and we want to save the data in display units. The variable names should end with
comment|// Text or Disp to represent if the values are in text or disp units (no glyph units are
comment|// saved).
name|float
name|glyphSpaceToTextSpaceFactor
init|=
literal|1
operator|/
literal|1000f
decl_stmt|;
if|if
condition|(
name|font
operator|instanceof
name|PDType3Font
condition|)
block|{
name|glyphSpaceToTextSpaceFactor
operator|=
name|font
operator|.
name|getFontMatrix
argument_list|()
operator|.
name|getScaleX
argument_list|()
expr_stmt|;
block|}
name|float
name|spaceWidthText
init|=
literal|0
decl_stmt|;
try|try
block|{
comment|// to avoid crash as described in PDFBOX-614, see what the space displacement should be
name|spaceWidthText
operator|=
name|font
operator|.
name|getSpaceWidth
argument_list|()
operator|*
name|glyphSpaceToTextSpaceFactor
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|exception
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Float
operator|.
name|compare
argument_list|(
name|spaceWidthText
argument_list|,
literal|0
argument_list|)
operator|==
literal|0
condition|)
block|{
name|spaceWidthText
operator|=
name|font
operator|.
name|getAverageFontWidth
argument_list|()
operator|*
name|glyphSpaceToTextSpaceFactor
expr_stmt|;
comment|// the average space width appears to be higher than necessary so make it smaller
name|spaceWidthText
operator|*=
literal|.80f
expr_stmt|;
block|}
if|if
condition|(
name|Float
operator|.
name|compare
argument_list|(
name|spaceWidthText
argument_list|,
literal|0
argument_list|)
operator|==
literal|0
condition|)
block|{
name|spaceWidthText
operator|=
literal|1.0f
expr_stmt|;
comment|// if could not find font, use a generic value
block|}
comment|// the space width has to be transformed into display units
name|float
name|spaceWidthDisplay
init|=
name|spaceWidthText
operator|*
name|textRenderingMatrix
operator|.
name|getScalingFactorX
argument_list|()
decl_stmt|;
comment|// use our additional glyph list for Unicode mapping
name|unicode
operator|=
name|font
operator|.
name|toUnicode
argument_list|(
name|code
argument_list|,
name|glyphList
argument_list|)
expr_stmt|;
comment|// when there is no Unicode mapping available, Acrobat simply coerces the character code
comment|// into Unicode, so we do the same. Subclasses of PDFStreamEngine don't necessarily want
comment|// this, which is why we leave it until this point in PDFTextStreamEngine.
if|if
condition|(
name|unicode
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|font
operator|instanceof
name|PDSimpleFont
condition|)
block|{
name|char
name|c
init|=
operator|(
name|char
operator|)
name|code
decl_stmt|;
name|unicode
operator|=
operator|new
name|String
argument_list|(
operator|new
name|char
index|[]
block|{
name|c
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Acrobat doesn't seem to coerce composite font's character codes, instead it
comment|// skips them. See the "allah2.pdf" TestTextStripper file.
return|return;
block|}
block|}
comment|// adjust for cropbox if needed
name|Matrix
name|translatedTextRenderingMatrix
decl_stmt|;
if|if
condition|(
name|translateMatrix
operator|==
literal|null
condition|)
block|{
name|translatedTextRenderingMatrix
operator|=
name|textRenderingMatrix
expr_stmt|;
block|}
else|else
block|{
name|translatedTextRenderingMatrix
operator|=
name|Matrix
operator|.
name|concatenate
argument_list|(
name|translateMatrix
argument_list|,
name|textRenderingMatrix
argument_list|)
expr_stmt|;
name|nextX
operator|-=
name|pageSize
operator|.
name|getLowerLeftX
argument_list|()
expr_stmt|;
name|nextY
operator|-=
name|pageSize
operator|.
name|getLowerLeftY
argument_list|()
expr_stmt|;
block|}
name|processTextPosition
argument_list|(
operator|new
name|TextPosition
argument_list|(
name|pageRotation
argument_list|,
name|pageSize
operator|.
name|getWidth
argument_list|()
argument_list|,
name|pageSize
operator|.
name|getHeight
argument_list|()
argument_list|,
name|translatedTextRenderingMatrix
argument_list|,
name|nextX
argument_list|,
name|nextY
argument_list|,
name|Math
operator|.
name|abs
argument_list|(
name|dyDisplay
argument_list|)
argument_list|,
name|dxDisplay
argument_list|,
name|Math
operator|.
name|abs
argument_list|(
name|spaceWidthDisplay
argument_list|)
argument_list|,
name|unicode
argument_list|,
operator|new
name|int
index|[]
block|{
name|code
block|}
argument_list|,
name|font
argument_list|,
name|fontSize
argument_list|,
call|(
name|int
call|)
argument_list|(
name|fontSize
operator|*
name|textMatrix
operator|.
name|getScalingFactorX
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * A method provided as an event interface to allow a subclass to perform some specific      * functionality when text needs to be processed.      *      * @param text The text to be processed.      */
specifier|protected
name|void
name|processTextPosition
parameter_list|(
name|TextPosition
name|text
parameter_list|)
block|{
comment|// subclasses can override to provide specific functionality
block|}
block|}
end_class

end_unit

