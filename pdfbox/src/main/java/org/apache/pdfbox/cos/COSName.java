begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|exceptions
operator|.
name|COSVisitorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|persistence
operator|.
name|util
operator|.
name|COSHEXTable
import|;
end_import

begin_comment
comment|/**  * This class represents a PDF named object.  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.42 $  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|COSName
extends|extends
name|COSBase
implements|implements
name|Comparable
argument_list|<
name|COSName
argument_list|>
block|{
comment|/**      * Note: This is a ConcurrentHashMap because a HashMap must be synchronized if accessed by      * multiple threads.      */
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|COSName
argument_list|>
name|nameMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|COSName
argument_list|>
argument_list|(
literal|8192
argument_list|)
decl_stmt|;
comment|/**      * All common COSName values are stored in a simple HashMap. They are already defined as      * static constants and don't need to be synchronized for multithreaded environments.      */
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|COSName
argument_list|>
name|commonNameMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|COSName
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|A
init|=
operator|new
name|COSName
argument_list|(
literal|"A"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|AA
init|=
operator|new
name|COSName
argument_list|(
literal|"AA"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|ACRO_FORM
init|=
operator|new
name|COSName
argument_list|(
literal|"AcroForm"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|ACTUAL_TEXT
init|=
operator|new
name|COSName
argument_list|(
literal|"ActualText"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|AIS
init|=
operator|new
name|COSName
argument_list|(
literal|"AIS"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|ALT
init|=
operator|new
name|COSName
argument_list|(
literal|"Alt"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|ALTERNATE
init|=
operator|new
name|COSName
argument_list|(
literal|"Alternate"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|ANNOT
init|=
operator|new
name|COSName
argument_list|(
literal|"Annot"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|ANNOTS
init|=
operator|new
name|COSName
argument_list|(
literal|"Annots"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|ANTI_ALIAS
init|=
operator|new
name|COSName
argument_list|(
literal|"AntiAlias"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|AP_REF
init|=
operator|new
name|COSName
argument_list|(
literal|"APRef"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|ARTIFACT
init|=
operator|new
name|COSName
argument_list|(
literal|"Artifact"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|ART_BOX
init|=
operator|new
name|COSName
argument_list|(
literal|"ArtBox"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|AS
init|=
operator|new
name|COSName
argument_list|(
literal|"AS"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|ASCII85_DECODE
init|=
operator|new
name|COSName
argument_list|(
literal|"ASCII85Decode"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|ASCII85_DECODE_ABBREVIATION
init|=
operator|new
name|COSName
argument_list|(
literal|"A85"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|ATTACHED
init|=
operator|new
name|COSName
argument_list|(
literal|"Attached"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|ASCENT
init|=
operator|new
name|COSName
argument_list|(
literal|"Ascent"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|ASCII_HEX_DECODE
init|=
operator|new
name|COSName
argument_list|(
literal|"ASCIIHexDecode"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|ASCII_HEX_DECODE_ABBREVIATION
init|=
operator|new
name|COSName
argument_list|(
literal|"AHx"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|AP
init|=
operator|new
name|COSName
argument_list|(
literal|"AP"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|AUTHOR
init|=
operator|new
name|COSName
argument_list|(
literal|"Author"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|AVG_WIDTH
init|=
operator|new
name|COSName
argument_list|(
literal|"AvgWidth"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|B
init|=
operator|new
name|COSName
argument_list|(
literal|"B"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|BACKGROUND
init|=
operator|new
name|COSName
argument_list|(
literal|"Background"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|BASE_ENCODING
init|=
operator|new
name|COSName
argument_list|(
literal|"BaseEncoding"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|BASE_FONT
init|=
operator|new
name|COSName
argument_list|(
literal|"BaseFont"
argument_list|)
decl_stmt|;
comment|/** the COSName for "BaseState". */
specifier|public
specifier|static
specifier|final
name|COSName
name|BASE_STATE
init|=
operator|new
name|COSName
argument_list|(
literal|"BaseState"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|BBOX
init|=
operator|new
name|COSName
argument_list|(
literal|"BBox"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|BLACK_IS_1
init|=
operator|new
name|COSName
argument_list|(
literal|"BlackIs1"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|BLACK_POINT
init|=
operator|new
name|COSName
argument_list|(
literal|"BlackPoint"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|BLEED_BOX
init|=
operator|new
name|COSName
argument_list|(
literal|"BleedBox"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|BITS_PER_COMPONENT
init|=
operator|new
name|COSName
argument_list|(
literal|"BitsPerComponent"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|BITS_PER_COORDINATE
init|=
operator|new
name|COSName
argument_list|(
literal|"BitsPerCoordinate"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|BITS_PER_FLAG
init|=
operator|new
name|COSName
argument_list|(
literal|"BitsPerFlag"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|BITS_PER_SAMPLE
init|=
operator|new
name|COSName
argument_list|(
literal|"BitsPerSample"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|BOUNDS
init|=
operator|new
name|COSName
argument_list|(
literal|"Bounds"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|BPC
init|=
operator|new
name|COSName
argument_list|(
literal|"BPC"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|CATALOG
init|=
operator|new
name|COSName
argument_list|(
literal|"Catalog"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|C
init|=
operator|new
name|COSName
argument_list|(
literal|"C"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|C0
init|=
operator|new
name|COSName
argument_list|(
literal|"C0"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|C1
init|=
operator|new
name|COSName
argument_list|(
literal|"C1"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|CA
init|=
operator|new
name|COSName
argument_list|(
literal|"CA"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|CA_NS
init|=
operator|new
name|COSName
argument_list|(
literal|"ca"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|CALGRAY
init|=
operator|new
name|COSName
argument_list|(
literal|"CalGray"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|CALRGB
init|=
operator|new
name|COSName
argument_list|(
literal|"CalRGB"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|CAP_HEIGHT
init|=
operator|new
name|COSName
argument_list|(
literal|"CapHeight"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|CCITTFAX_DECODE
init|=
operator|new
name|COSName
argument_list|(
literal|"CCITTFaxDecode"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|CCITTFAX_DECODE_ABBREVIATION
init|=
operator|new
name|COSName
argument_list|(
literal|"CCF"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|CENTER_WINDOW
init|=
operator|new
name|COSName
argument_list|(
literal|"CenterWindow"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|CF
init|=
operator|new
name|COSName
argument_list|(
literal|"CF"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|CFM
init|=
operator|new
name|COSName
argument_list|(
literal|"CFM"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|CHAR_PROCS
init|=
operator|new
name|COSName
argument_list|(
literal|"CharProcs"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|CHAR_SET
init|=
operator|new
name|COSName
argument_list|(
literal|"CharSet"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|CID_FONT_TYPE0
init|=
operator|new
name|COSName
argument_list|(
literal|"CIDFontType0"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|CID_FONT_TYPE2
init|=
operator|new
name|COSName
argument_list|(
literal|"CIDFontType2"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|CIDSYSTEMINFO
init|=
operator|new
name|COSName
argument_list|(
literal|"CIDSystemInfo"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|CID_TO_GID_MAP
init|=
operator|new
name|COSName
argument_list|(
literal|"CIDToGIDMap"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|COLORANTS
init|=
operator|new
name|COSName
argument_list|(
literal|"Colorants"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|COLORS
init|=
operator|new
name|COSName
argument_list|(
literal|"Colors"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|COLORSPACE
init|=
operator|new
name|COSName
argument_list|(
literal|"ColorSpace"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|COLUMNS
init|=
operator|new
name|COSName
argument_list|(
literal|"Columns"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|CONTENTS
init|=
operator|new
name|COSName
argument_list|(
literal|"Contents"
argument_list|)
decl_stmt|;
comment|/**       * A common COSName value.       */
specifier|public
specifier|static
specifier|final
name|COSName
name|COORDS
init|=
operator|new
name|COSName
argument_list|(
literal|"Coords"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|COUNT
init|=
operator|new
name|COSName
argument_list|(
literal|"Count"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|CLR_F
init|=
operator|new
name|COSName
argument_list|(
literal|"ClrF"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|CLR_FF
init|=
operator|new
name|COSName
argument_list|(
literal|"ClrFf"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|CREATION_DATE
init|=
operator|new
name|COSName
argument_list|(
literal|"CreationDate"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|CREATOR
init|=
operator|new
name|COSName
argument_list|(
literal|"Creator"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|CROP_BOX
init|=
operator|new
name|COSName
argument_list|(
literal|"CropBox"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|CRYPT
init|=
operator|new
name|COSName
argument_list|(
literal|"Crypt"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|CS
init|=
operator|new
name|COSName
argument_list|(
literal|"CS"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|D
init|=
operator|new
name|COSName
argument_list|(
literal|"D"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|DA
init|=
operator|new
name|COSName
argument_list|(
literal|"DA"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|DCT_DECODE
init|=
operator|new
name|COSName
argument_list|(
literal|"DCTDecode"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|DCT_DECODE_ABBREVIATION
init|=
operator|new
name|COSName
argument_list|(
literal|"DCT"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|DECODE
init|=
operator|new
name|COSName
argument_list|(
literal|"Decode"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|DECODE_PARMS
init|=
operator|new
name|COSName
argument_list|(
literal|"DecodeParms"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|DESCENT
init|=
operator|new
name|COSName
argument_list|(
literal|"Descent"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|DESCENDANT_FONTS
init|=
operator|new
name|COSName
argument_list|(
literal|"DescendantFonts"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|DEST
init|=
operator|new
name|COSName
argument_list|(
literal|"Dest"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|DESTS
init|=
operator|new
name|COSName
argument_list|(
literal|"Dests"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|DEVICECMYK
init|=
operator|new
name|COSName
argument_list|(
literal|"DeviceCMYK"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|DEVICEGRAY
init|=
operator|new
name|COSName
argument_list|(
literal|"DeviceGray"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|DEVICEN
init|=
operator|new
name|COSName
argument_list|(
literal|"DeviceN"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|DEVICERGB
init|=
operator|new
name|COSName
argument_list|(
literal|"DeviceRGB"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|DIFFERENCES
init|=
operator|new
name|COSName
argument_list|(
literal|"Differences"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|DIRECTION
init|=
operator|new
name|COSName
argument_list|(
literal|"Direction"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|DISPLAY_DOC_TITLE
init|=
operator|new
name|COSName
argument_list|(
literal|"DisplayDocTitle"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|DL
init|=
operator|new
name|COSName
argument_list|(
literal|"DL"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|DOC_CHECKSUM
init|=
operator|new
name|COSName
argument_list|(
literal|"DocChecksum"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|DOMAIN
init|=
operator|new
name|COSName
argument_list|(
literal|"Domain"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|DP
init|=
operator|new
name|COSName
argument_list|(
literal|"DP"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|DR
init|=
operator|new
name|COSName
argument_list|(
literal|"DR"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|DUPLEX
init|=
operator|new
name|COSName
argument_list|(
literal|"Duplex"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|DV
init|=
operator|new
name|COSName
argument_list|(
literal|"DV"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|DW
init|=
operator|new
name|COSName
argument_list|(
literal|"DW"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|E
init|=
operator|new
name|COSName
argument_list|(
literal|"E"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|EMBEDDED_FILES
init|=
operator|new
name|COSName
argument_list|(
literal|"EmbeddedFiles"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|EMBEDDED_FDFS
init|=
operator|new
name|COSName
argument_list|(
literal|"EmbeddedFDFs"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|ENCODE
init|=
operator|new
name|COSName
argument_list|(
literal|"Encode"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|ENCODING
init|=
operator|new
name|COSName
argument_list|(
literal|"Encoding"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|ENCODING_90MS_RKSJ_H
init|=
operator|new
name|COSName
argument_list|(
literal|"90ms-RKSJ-H"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|ENCODING_90MS_RKSJ_V
init|=
operator|new
name|COSName
argument_list|(
literal|"90ms-RKSJ-V"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|ENCODING_ETEN_B5_H
init|=
operator|new
name|COSName
argument_list|(
literal|"ETen?B5?H"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|ENCODING_ETEN_B5_V
init|=
operator|new
name|COSName
argument_list|(
literal|"ETen?B5?V"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|ENCRYPT
init|=
operator|new
name|COSName
argument_list|(
literal|"Encrypt"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|ENCRYPT_META_DATA
init|=
operator|new
name|COSName
argument_list|(
literal|"EncryptMetadata"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|EXT_G_STATE
init|=
operator|new
name|COSName
argument_list|(
literal|"ExtGState"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|EXTEND
init|=
operator|new
name|COSName
argument_list|(
literal|"Extend"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|EXTENDS
init|=
operator|new
name|COSName
argument_list|(
literal|"Extends"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|F
init|=
operator|new
name|COSName
argument_list|(
literal|"F"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|F_DECODE_PARMS
init|=
operator|new
name|COSName
argument_list|(
literal|"FDecodeParms"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|F_FILTER
init|=
operator|new
name|COSName
argument_list|(
literal|"FFilter"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|FF
init|=
operator|new
name|COSName
argument_list|(
literal|"Ff"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|FIELDS
init|=
operator|new
name|COSName
argument_list|(
literal|"Fields"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|FILTER
init|=
operator|new
name|COSName
argument_list|(
literal|"Filter"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|FIRST_CHAR
init|=
operator|new
name|COSName
argument_list|(
literal|"FirstChar"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|FIT_WINDOW
init|=
operator|new
name|COSName
argument_list|(
literal|"FitWindow"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|FL
init|=
operator|new
name|COSName
argument_list|(
literal|"FL"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|FLAGS
init|=
operator|new
name|COSName
argument_list|(
literal|"Flags"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|FLATE_DECODE
init|=
operator|new
name|COSName
argument_list|(
literal|"FlateDecode"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|FLATE_DECODE_ABBREVIATION
init|=
operator|new
name|COSName
argument_list|(
literal|"Fl"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|FONT
init|=
operator|new
name|COSName
argument_list|(
literal|"Font"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|FONT_BBOX
init|=
operator|new
name|COSName
argument_list|(
literal|"FontBBox"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|FONT_FAMILY
init|=
operator|new
name|COSName
argument_list|(
literal|"FontFamily"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|FONT_FILE
init|=
operator|new
name|COSName
argument_list|(
literal|"FontFile"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|FONT_FILE2
init|=
operator|new
name|COSName
argument_list|(
literal|"FontFile2"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|FONT_FILE3
init|=
operator|new
name|COSName
argument_list|(
literal|"FontFile3"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|FONT_DESC
init|=
operator|new
name|COSName
argument_list|(
literal|"FontDescriptor"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|FONT_MATRIX
init|=
operator|new
name|COSName
argument_list|(
literal|"FontMatrix"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|FONT_NAME
init|=
operator|new
name|COSName
argument_list|(
literal|"FontName"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|FONT_STRETCH
init|=
operator|new
name|COSName
argument_list|(
literal|"FontStretch"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|FONT_WEIGHT
init|=
operator|new
name|COSName
argument_list|(
literal|"FontWeight"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|FORM
init|=
operator|new
name|COSName
argument_list|(
literal|"Form"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|FORMTYPE
init|=
operator|new
name|COSName
argument_list|(
literal|"FormType"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|FRM
init|=
operator|new
name|COSName
argument_list|(
literal|"FRM"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|FT
init|=
operator|new
name|COSName
argument_list|(
literal|"FT"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|FUNCTION
init|=
operator|new
name|COSName
argument_list|(
literal|"Function"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|FUNCTION_TYPE
init|=
operator|new
name|COSName
argument_list|(
literal|"FunctionType"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|FUNCTIONS
init|=
operator|new
name|COSName
argument_list|(
literal|"Functions"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|GAMMA
init|=
operator|new
name|COSName
argument_list|(
literal|"Gamma"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|H
init|=
operator|new
name|COSName
argument_list|(
literal|"H"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|HEIGHT
init|=
operator|new
name|COSName
argument_list|(
literal|"Height"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|HIDE_MENUBAR
init|=
operator|new
name|COSName
argument_list|(
literal|"HideMenubar"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|HIDE_TOOLBAR
init|=
operator|new
name|COSName
argument_list|(
literal|"HideToolbar"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|HIDE_WINDOWUI
init|=
operator|new
name|COSName
argument_list|(
literal|"HideWindowUI"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|ICCBASED
init|=
operator|new
name|COSName
argument_list|(
literal|"ICCBased"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|I
init|=
operator|new
name|COSName
argument_list|(
literal|"I"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|ID
init|=
operator|new
name|COSName
argument_list|(
literal|"ID"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|ID_TREE
init|=
operator|new
name|COSName
argument_list|(
literal|"IDTree"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|IDENTITY
init|=
operator|new
name|COSName
argument_list|(
literal|"Identity"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|IDENTITY_H
init|=
operator|new
name|COSName
argument_list|(
literal|"Identity-H"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|IMAGE
init|=
operator|new
name|COSName
argument_list|(
literal|"Image"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|IMAGE_MASK
init|=
operator|new
name|COSName
argument_list|(
literal|"ImageMask"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|INDEX
init|=
operator|new
name|COSName
argument_list|(
literal|"Index"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|INDEXED
init|=
operator|new
name|COSName
argument_list|(
literal|"Indexed"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|INFO
init|=
operator|new
name|COSName
argument_list|(
literal|"Info"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|ITALIC_ANGLE
init|=
operator|new
name|COSName
argument_list|(
literal|"ItalicAngle"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|JAVA_SCRIPT
init|=
operator|new
name|COSName
argument_list|(
literal|"JavaScript"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|JBIG2_DECODE
init|=
operator|new
name|COSName
argument_list|(
literal|"JBIG2Decode"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|JPX_DECODE
init|=
operator|new
name|COSName
argument_list|(
literal|"JPXDecode"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|K
init|=
operator|new
name|COSName
argument_list|(
literal|"K"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|KEYWORDS
init|=
operator|new
name|COSName
argument_list|(
literal|"Keywords"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|KIDS
init|=
operator|new
name|COSName
argument_list|(
literal|"Kids"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|LAB
init|=
operator|new
name|COSName
argument_list|(
literal|"Lab"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|LANG
init|=
operator|new
name|COSName
argument_list|(
literal|"Lang"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|LAST_CHAR
init|=
operator|new
name|COSName
argument_list|(
literal|"LastChar"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|LAST_MODIFIED
init|=
operator|new
name|COSName
argument_list|(
literal|"LastModified"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|LC
init|=
operator|new
name|COSName
argument_list|(
literal|"LC"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|L
init|=
operator|new
name|COSName
argument_list|(
literal|"L"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|LEADING
init|=
operator|new
name|COSName
argument_list|(
literal|"Leading"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|LENGTH
init|=
operator|new
name|COSName
argument_list|(
literal|"Length"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|LENGTH1
init|=
operator|new
name|COSName
argument_list|(
literal|"Length1"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|COSName
name|LENGTH2
init|=
operator|new
name|COSName
argument_list|(
literal|"Length2"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|LIMITS
init|=
operator|new
name|COSName
argument_list|(
literal|"Limits"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|LJ
init|=
operator|new
name|COSName
argument_list|(
literal|"LJ"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|LW
init|=
operator|new
name|COSName
argument_list|(
literal|"LW"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|LZW_DECODE
init|=
operator|new
name|COSName
argument_list|(
literal|"LZWDecode"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|LZW_DECODE_ABBREVIATION
init|=
operator|new
name|COSName
argument_list|(
literal|"LZW"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|M
init|=
operator|new
name|COSName
argument_list|(
literal|"M"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|MAC_ROMAN_ENCODING
init|=
operator|new
name|COSName
argument_list|(
literal|"MacRomanEncoding"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|MARK_INFO
init|=
operator|new
name|COSName
argument_list|(
literal|"MarkInfo"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|MASK
init|=
operator|new
name|COSName
argument_list|(
literal|"Mask"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|MATRIX
init|=
operator|new
name|COSName
argument_list|(
literal|"Matrix"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|MAX_WIDTH
init|=
operator|new
name|COSName
argument_list|(
literal|"MaxWidth"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|MCID
init|=
operator|new
name|COSName
argument_list|(
literal|"MCID"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|MEDIA_BOX
init|=
operator|new
name|COSName
argument_list|(
literal|"MediaBox"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|METADATA
init|=
operator|new
name|COSName
argument_list|(
literal|"Metadata"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|MISSING_WIDTH
init|=
operator|new
name|COSName
argument_list|(
literal|"MissingWidth"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|ML
init|=
operator|new
name|COSName
argument_list|(
literal|"ML"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|MM_TYPE1
init|=
operator|new
name|COSName
argument_list|(
literal|"MMType1"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|MOD_DATE
init|=
operator|new
name|COSName
argument_list|(
literal|"ModDate"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|N
init|=
operator|new
name|COSName
argument_list|(
literal|"N"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|NAME
init|=
operator|new
name|COSName
argument_list|(
literal|"Name"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|NAMES
init|=
operator|new
name|COSName
argument_list|(
literal|"Names"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|NEXT
init|=
operator|new
name|COSName
argument_list|(
literal|"Next"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|NM
init|=
operator|new
name|COSName
argument_list|(
literal|"NM"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|NON_FULL_SCREEN_PAGE_MODE
init|=
operator|new
name|COSName
argument_list|(
literal|"NonFullScreenPageMode"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|NUMS
init|=
operator|new
name|COSName
argument_list|(
literal|"Nums"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|O
init|=
operator|new
name|COSName
argument_list|(
literal|"O"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|OBJ
init|=
operator|new
name|COSName
argument_list|(
literal|"Obj"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|OBJ_STM
init|=
operator|new
name|COSName
argument_list|(
literal|"ObjStm"
argument_list|)
decl_stmt|;
comment|/** the COSName for the content group tag. */
specifier|public
specifier|static
specifier|final
name|COSName
name|OC
init|=
operator|new
name|COSName
argument_list|(
literal|"OC"
argument_list|)
decl_stmt|;
comment|/** the COSName for an optional content group. */
specifier|public
specifier|static
specifier|final
name|COSName
name|OCG
init|=
operator|new
name|COSName
argument_list|(
literal|"OCG"
argument_list|)
decl_stmt|;
comment|/** the COSName for the optional content group list. */
specifier|public
specifier|static
specifier|final
name|COSName
name|OCGS
init|=
operator|new
name|COSName
argument_list|(
literal|"OCGs"
argument_list|)
decl_stmt|;
comment|/** the COSName for the optional content properties. */
specifier|public
specifier|static
specifier|final
name|COSName
name|OCPROPERTIES
init|=
operator|new
name|COSName
argument_list|(
literal|"OCProperties"
argument_list|)
decl_stmt|;
comment|/** the COSName for the "OFF" value. */
specifier|public
specifier|static
specifier|final
name|COSName
name|OFF
init|=
operator|new
name|COSName
argument_list|(
literal|"OFF"
argument_list|)
decl_stmt|;
comment|/** the COSName for the "ON" value. */
specifier|public
specifier|static
specifier|final
name|COSName
name|ON
init|=
operator|new
name|COSName
argument_list|(
literal|"ON"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|OP
init|=
operator|new
name|COSName
argument_list|(
literal|"OP"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|OP_NS
init|=
operator|new
name|COSName
argument_list|(
literal|"op"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|OPM
init|=
operator|new
name|COSName
argument_list|(
literal|"OPM"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|OPT
init|=
operator|new
name|COSName
argument_list|(
literal|"Opt"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|OUTLINES
init|=
operator|new
name|COSName
argument_list|(
literal|"Outlines"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|OPEN_ACTION
init|=
operator|new
name|COSName
argument_list|(
literal|"OpenAction"
argument_list|)
decl_stmt|;
comment|/** A common COSName value. */
specifier|public
specifier|static
specifier|final
name|COSName
name|ORDER
init|=
operator|new
name|COSName
argument_list|(
literal|"Order"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|ORDERING
init|=
operator|new
name|COSName
argument_list|(
literal|"Ordering"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|P
init|=
operator|new
name|COSName
argument_list|(
literal|"P"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|PAGE
init|=
operator|new
name|COSName
argument_list|(
literal|"Page"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|PAGE_LABELS
init|=
operator|new
name|COSName
argument_list|(
literal|"PageLabels"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|PAGE_LAYOUT
init|=
operator|new
name|COSName
argument_list|(
literal|"PageLayout"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|PAGE_MODE
init|=
operator|new
name|COSName
argument_list|(
literal|"PageMode"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|PAGES
init|=
operator|new
name|COSName
argument_list|(
literal|"Pages"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|PAINT_TYPE
init|=
operator|new
name|COSName
argument_list|(
literal|"PaintType"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|PARENT
init|=
operator|new
name|COSName
argument_list|(
literal|"Parent"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|PARENT_TREE_NEXT_KEY
init|=
operator|new
name|COSName
argument_list|(
literal|"ParentTreeNextKey"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|PATTERN
init|=
operator|new
name|COSName
argument_list|(
literal|"Pattern"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|PATTERN_TYPE
init|=
operator|new
name|COSName
argument_list|(
literal|"PatternType"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|PDF_DOC_ENCODING
init|=
operator|new
name|COSName
argument_list|(
literal|"PDFDocEncoding"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|PG
init|=
operator|new
name|COSName
argument_list|(
literal|"Pg"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|PREDICTOR
init|=
operator|new
name|COSName
argument_list|(
literal|"Predictor"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|PREV
init|=
operator|new
name|COSName
argument_list|(
literal|"Prev"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|PRINT_AREA
init|=
operator|new
name|COSName
argument_list|(
literal|"PrintArea"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|PRINT_CLIP
init|=
operator|new
name|COSName
argument_list|(
literal|"PrintClip"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|PRINT_SCALING
init|=
operator|new
name|COSName
argument_list|(
literal|"PrintScaling"
argument_list|)
decl_stmt|;
comment|/** The COSName value for "ProcSet". */
specifier|public
specifier|static
specifier|final
name|COSName
name|PROC_SET
init|=
operator|new
name|COSName
argument_list|(
literal|"ProcSet"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|PRODUCER
init|=
operator|new
name|COSName
argument_list|(
literal|"Producer"
argument_list|)
decl_stmt|;
comment|/** The COSName value for "Properties". */
specifier|public
specifier|static
specifier|final
name|COSName
name|PROPERTIES
init|=
operator|new
name|COSName
argument_list|(
literal|"Properties"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|Q
init|=
operator|new
name|COSName
argument_list|(
literal|"Q"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|R
init|=
operator|new
name|COSName
argument_list|(
literal|"R"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|RANGE
init|=
operator|new
name|COSName
argument_list|(
literal|"Range"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|RECIPIENTS
init|=
operator|new
name|COSName
argument_list|(
literal|"Recipients"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|RECT
init|=
operator|new
name|COSName
argument_list|(
literal|"Rect"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|REGISTRY
init|=
operator|new
name|COSName
argument_list|(
literal|"Registry"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|RESOURCES
init|=
operator|new
name|COSName
argument_list|(
literal|"Resources"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|RI
init|=
operator|new
name|COSName
argument_list|(
literal|"RI"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|ROLE_MAP
init|=
operator|new
name|COSName
argument_list|(
literal|"RoleMap"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|ROOT
init|=
operator|new
name|COSName
argument_list|(
literal|"Root"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|ROTATE
init|=
operator|new
name|COSName
argument_list|(
literal|"Rotate"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|ROWS
init|=
operator|new
name|COSName
argument_list|(
literal|"Rows"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|RUN_LENGTH_DECODE
init|=
operator|new
name|COSName
argument_list|(
literal|"RunLengthDecode"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|RUN_LENGTH_DECODE_ABBREVIATION
init|=
operator|new
name|COSName
argument_list|(
literal|"RL"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|RV
init|=
operator|new
name|COSName
argument_list|(
literal|"RV"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|S
init|=
operator|new
name|COSName
argument_list|(
literal|"S"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|SA
init|=
operator|new
name|COSName
argument_list|(
literal|"SA"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|SE
init|=
operator|new
name|COSName
argument_list|(
literal|"SE"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|SEPARATION
init|=
operator|new
name|COSName
argument_list|(
literal|"Separation"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|SET_F
init|=
operator|new
name|COSName
argument_list|(
literal|"SetF"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|SET_FF
init|=
operator|new
name|COSName
argument_list|(
literal|"SetFf"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|SHADING
init|=
operator|new
name|COSName
argument_list|(
literal|"Shading"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|SHADING_TYPE
init|=
operator|new
name|COSName
argument_list|(
literal|"ShadingType"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|SM
init|=
operator|new
name|COSName
argument_list|(
literal|"SM"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|SMASK
init|=
operator|new
name|COSName
argument_list|(
literal|"SMask"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|SIZE
init|=
operator|new
name|COSName
argument_list|(
literal|"Size"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|STANDARD_ENCODING
init|=
operator|new
name|COSName
argument_list|(
literal|"StandardEncoding"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|STATUS
init|=
operator|new
name|COSName
argument_list|(
literal|"Status"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|STD_CF
init|=
operator|new
name|COSName
argument_list|(
literal|"StdCF"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|STEM_H
init|=
operator|new
name|COSName
argument_list|(
literal|"StemH"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|STEM_V
init|=
operator|new
name|COSName
argument_list|(
literal|"StemV"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|STM_F
init|=
operator|new
name|COSName
argument_list|(
literal|"StmF"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|STR_F
init|=
operator|new
name|COSName
argument_list|(
literal|"StrF"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|STRUCT_TREE_ROOT
init|=
operator|new
name|COSName
argument_list|(
literal|"StructTreeRoot"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|SUB_FILTER
init|=
operator|new
name|COSName
argument_list|(
literal|"SubFilter"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|SUBJ
init|=
operator|new
name|COSName
argument_list|(
literal|"Subj"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|SUBJECT
init|=
operator|new
name|COSName
argument_list|(
literal|"Subject"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|SUPPLEMENT
init|=
operator|new
name|COSName
argument_list|(
literal|"Supplement"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|SUBTYPE
init|=
operator|new
name|COSName
argument_list|(
literal|"Subtype"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|T
init|=
operator|new
name|COSName
argument_list|(
literal|"T"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|TARGET
init|=
operator|new
name|COSName
argument_list|(
literal|"Target"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|THREADS
init|=
operator|new
name|COSName
argument_list|(
literal|"Threads"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|TILING_TYPE
init|=
operator|new
name|COSName
argument_list|(
literal|"TilingType"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|TITLE
init|=
operator|new
name|COSName
argument_list|(
literal|"Title"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|TK
init|=
operator|new
name|COSName
argument_list|(
literal|"TK"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|TRAPPED
init|=
operator|new
name|COSName
argument_list|(
literal|"Trapped"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|TRIM_BOX
init|=
operator|new
name|COSName
argument_list|(
literal|"TrimBox"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|TRUE_TYPE
init|=
operator|new
name|COSName
argument_list|(
literal|"TrueType"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|TO_UNICODE
init|=
operator|new
name|COSName
argument_list|(
literal|"ToUnicode"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|TU
init|=
operator|new
name|COSName
argument_list|(
literal|"TU"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|TYPE
init|=
operator|new
name|COSName
argument_list|(
literal|"Type"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|TYPE0
init|=
operator|new
name|COSName
argument_list|(
literal|"Type0"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|TYPE1
init|=
operator|new
name|COSName
argument_list|(
literal|"Type1"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|TYPE3
init|=
operator|new
name|COSName
argument_list|(
literal|"Type3"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|U
init|=
operator|new
name|COSName
argument_list|(
literal|"U"
argument_list|)
decl_stmt|;
comment|/** the COSName for the "Unchanged" value. */
specifier|public
specifier|static
specifier|final
name|COSName
name|UNCHANGED
init|=
operator|new
name|COSName
argument_list|(
literal|"Unchanged"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|URI
init|=
operator|new
name|COSName
argument_list|(
literal|"URI"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|V
init|=
operator|new
name|COSName
argument_list|(
literal|"V"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|VERSION
init|=
operator|new
name|COSName
argument_list|(
literal|"Version"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|VERTICES_PER_ROW
init|=
operator|new
name|COSName
argument_list|(
literal|"VerticesPerRow"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|VIEW_AREA
init|=
operator|new
name|COSName
argument_list|(
literal|"ViewArea"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|VIEW_CLIP
init|=
operator|new
name|COSName
argument_list|(
literal|"ViewClip"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|VIEWER_PREFERENCES
init|=
operator|new
name|COSName
argument_list|(
literal|"ViewerPreferences"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|W
init|=
operator|new
name|COSName
argument_list|(
literal|"W"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|WIDTH
init|=
operator|new
name|COSName
argument_list|(
literal|"Width"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|WIDTHS
init|=
operator|new
name|COSName
argument_list|(
literal|"Widths"
argument_list|)
decl_stmt|;
comment|/**     * A common COSName value.     */
specifier|public
specifier|static
specifier|final
name|COSName
name|WIN_ANSI_ENCODING
init|=
operator|new
name|COSName
argument_list|(
literal|"WinAnsiEncoding"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|WHITE_POINT
init|=
operator|new
name|COSName
argument_list|(
literal|"WhitePoint"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|XHEIGHT
init|=
operator|new
name|COSName
argument_list|(
literal|"XHeight"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|XOBJECT
init|=
operator|new
name|COSName
argument_list|(
literal|"XObject"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|XREF
init|=
operator|new
name|COSName
argument_list|(
literal|"XRef"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|X_STEP
init|=
operator|new
name|COSName
argument_list|(
literal|"XStep"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|Y_STEP
init|=
operator|new
name|COSName
argument_list|(
literal|"YStep"
argument_list|)
decl_stmt|;
comment|/**      * The prefix to a PDF name.      */
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|NAME_PREFIX
init|=
operator|new
name|byte
index|[]
block|{
literal|47
block|}
decl_stmt|;
comment|// The / character
comment|/**      * The escape character for a name.      */
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|NAME_ESCAPE
init|=
operator|new
name|byte
index|[]
block|{
literal|35
block|}
decl_stmt|;
comment|//The # character
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|SUBFILTER
init|=
operator|new
name|COSName
argument_list|(
literal|"SubFilter"
argument_list|)
decl_stmt|;
comment|/**      * A signature filter value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|ADOBE_PPKLITE
init|=
operator|new
name|COSName
argument_list|(
literal|"Adobe.PPKLite"
argument_list|)
decl_stmt|;
comment|/**      * A signature filter value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|ENTRUST_PPKEF
init|=
operator|new
name|COSName
argument_list|(
literal|"Entrust.PPKEF"
argument_list|)
decl_stmt|;
comment|/**      * A signature filter value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|CICI_SIGNIT
init|=
operator|new
name|COSName
argument_list|(
literal|"CICI.SignIt"
argument_list|)
decl_stmt|;
comment|/**      * A signature filter value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|VERISIGN_PPKVS
init|=
operator|new
name|COSName
argument_list|(
literal|"VeriSign.PPKVS"
argument_list|)
decl_stmt|;
comment|/**      * A signature subfilter value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|ADBE_X509_RSA_SHA1
init|=
operator|new
name|COSName
argument_list|(
literal|"adbe.x509.rsa_sha1"
argument_list|)
decl_stmt|;
comment|/**      * A signature subfilter value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|ADBE_PKCS7_DETACHED
init|=
operator|new
name|COSName
argument_list|(
literal|"adbe.pkcs7.detached"
argument_list|)
decl_stmt|;
comment|/**      * A signature subfilter value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|ADBE_PKCS7_SHA1
init|=
operator|new
name|COSName
argument_list|(
literal|"adbe.pkcs7.sha1"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|LOCATION
init|=
operator|new
name|COSName
argument_list|(
literal|"Location"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|REASON
init|=
operator|new
name|COSName
argument_list|(
literal|"Reason"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|BYTERANGE
init|=
operator|new
name|COSName
argument_list|(
literal|"ByteRange"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|SIG
init|=
operator|new
name|COSName
argument_list|(
literal|"Sig"
argument_list|)
decl_stmt|;
comment|/**      * A common COSName value.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|SIG_FLAGS
init|=
operator|new
name|COSName
argument_list|(
literal|"SigFlags"
argument_list|)
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|int
name|hashCode
decl_stmt|;
comment|/**      * This will get a COSName object with that name.      *      * @param aName The name of the object.      *      * @return A COSName with the specified name.      */
specifier|public
specifier|static
specifier|final
name|COSName
name|getPDFName
parameter_list|(
name|String
name|aName
parameter_list|)
block|{
name|COSName
name|name
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|aName
operator|!=
literal|null
condition|)
block|{
comment|// Is it a common COSName ??
name|name
operator|=
name|commonNameMap
operator|.
name|get
argument_list|(
name|aName
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
comment|// It seems to be a document specific COSName
name|name
operator|=
name|nameMap
operator|.
name|get
argument_list|(
name|aName
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
comment|//name is added to the synchronized map in the constructor
name|name
operator|=
operator|new
name|COSName
argument_list|(
name|aName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|name
return|;
block|}
comment|/**      * Private constructor.  This will limit the number of COSName objects.      * that are created.      *      * @param aName The name of the COSName object.      * @param staticValue Indicates if the COSName object is static so that it can      *        be stored in the HashMap without synchronizing.      */
specifier|private
name|COSName
parameter_list|(
name|String
name|aName
parameter_list|,
name|boolean
name|staticValue
parameter_list|)
block|{
name|name
operator|=
name|aName
expr_stmt|;
if|if
condition|(
name|staticValue
condition|)
block|{
name|commonNameMap
operator|.
name|put
argument_list|(
name|aName
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nameMap
operator|.
name|put
argument_list|(
name|aName
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
name|hashCode
operator|=
name|name
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
comment|/**      * Private constructor.  This will limit the number of COSName objects.      * that are created.      *      * @param aName The name of the COSName object.      */
specifier|private
name|COSName
parameter_list|(
name|String
name|aName
parameter_list|)
block|{
name|this
argument_list|(
name|aName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the name of this COSName object.      *      * @return The name of the object.      */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"COSName{"
operator|+
name|name
operator|+
literal|"}"
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|boolean
name|retval
init|=
name|this
operator|==
name|o
decl_stmt|;
if|if
condition|(
operator|!
name|retval
operator|&&
name|o
operator|instanceof
name|COSName
condition|)
block|{
name|COSName
name|other
init|=
operator|(
name|COSName
operator|)
name|o
decl_stmt|;
name|retval
operator|=
name|name
operator|==
name|other
operator|.
name|name
operator|||
name|name
operator|.
name|equals
argument_list|(
name|other
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|hashCode
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|int
name|compareTo
parameter_list|(
name|COSName
name|other
parameter_list|)
block|{
return|return
name|this
operator|.
name|name
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|name
argument_list|)
return|;
block|}
comment|/**      * visitor pattern double dispatch method.      *      * @param visitor The object to notify when visiting this object.      * @return any object, depending on the visitor implementation, or null      * @throws COSVisitorException If an error occurs while visiting this object.      */
specifier|public
name|Object
name|accept
parameter_list|(
name|ICOSVisitor
name|visitor
parameter_list|)
throws|throws
name|COSVisitorException
block|{
return|return
name|visitor
operator|.
name|visitFromName
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**      * This will output this string as a PDF object.      *      * @param output The stream to write to.      * @throws IOException If there is an error writing to the stream.      */
specifier|public
name|void
name|writePDF
parameter_list|(
name|OutputStream
name|output
parameter_list|)
throws|throws
name|IOException
block|{
name|output
operator|.
name|write
argument_list|(
name|NAME_PREFIX
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
name|getName
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"ISO-8859-1"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bytes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|current
init|=
operator|(
operator|(
name|bytes
index|[
name|i
index|]
operator|+
literal|256
operator|)
operator|%
literal|256
operator|)
decl_stmt|;
if|if
condition|(
name|current
operator|<=
literal|32
operator|||
name|current
operator|>=
literal|127
operator|||
name|current
operator|==
literal|'('
operator|||
name|current
operator|==
literal|')'
operator|||
name|current
operator|==
literal|'['
operator|||
name|current
operator|==
literal|']'
operator|||
name|current
operator|==
literal|'/'
operator|||
name|current
operator|==
literal|'%'
operator|||
name|current
operator|==
literal|'<'
operator|||
name|current
operator|==
literal|'>'
operator|||
name|current
operator|==
name|NAME_ESCAPE
index|[
literal|0
index|]
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
name|NAME_ESCAPE
argument_list|)
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
name|COSHEXTable
operator|.
name|TABLE
index|[
name|current
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|output
operator|.
name|write
argument_list|(
name|current
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**       * Not usually needed except if resources need to be reclaimed in a ong       * running process.       * Patch provided by flester@GMail.com       * incorporated 5/23/08, Danielwilson@users.SourceForge.net       */
specifier|public
specifier|static
specifier|synchronized
name|void
name|clearResources
parameter_list|()
block|{
comment|// Clear them all
name|nameMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

