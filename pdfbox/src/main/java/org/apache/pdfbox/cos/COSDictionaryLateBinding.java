begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Copyright 2011 adam.  *   *  Licensed under the Apache License, Version 2.0 (the "License");  *  you may not use this file except in compliance with the License.  *  You may obtain a copy of the License at  *   *       http://www.apache.org/licenses/LICENSE-2.0  *   *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdfparser
operator|.
name|ConformingPDFParser
import|;
end_import

begin_comment
comment|/**  *  * @author adam  */
end_comment

begin_class
specifier|public
class|class
name|COSDictionaryLateBinding
extends|extends
name|COSDictionary
block|{
specifier|public
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|COSDictionaryLateBinding
operator|.
name|class
argument_list|)
decl_stmt|;
name|ConformingPDFParser
name|parser
decl_stmt|;
specifier|public
name|COSDictionaryLateBinding
parameter_list|(
name|ConformingPDFParser
name|parser
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|parser
operator|=
name|parser
expr_stmt|;
block|}
comment|/**      * This will get an object from this dictionary.  If the object is a reference then it will      * dereference it and get it from the document.  If the object is COSNull then      * null will be returned.      * @param key The key to the object that we are getting.      * @return The object that matches the key.      */
annotation|@
name|Override
specifier|public
name|COSBase
name|getDictionaryObject
parameter_list|(
name|COSName
name|key
parameter_list|)
block|{
name|COSBase
name|retval
init|=
name|items
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|retval
operator|instanceof
name|COSObject
condition|)
block|{
name|int
name|objectNumber
init|=
operator|(
operator|(
name|COSObject
operator|)
name|retval
operator|)
operator|.
name|getObjectNumber
argument_list|()
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|int
name|generation
init|=
operator|(
operator|(
name|COSObject
operator|)
name|retval
operator|)
operator|.
name|getGenerationNumber
argument_list|()
operator|.
name|intValue
argument_list|()
decl_stmt|;
try|try
block|{
name|retval
operator|=
name|parser
operator|.
name|getObject
argument_list|(
name|objectNumber
argument_list|,
name|generation
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to read information for object "
operator|+
name|objectNumber
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|retval
operator|instanceof
name|COSNull
condition|)
block|{
name|retval
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
block|}
end_class

end_unit

