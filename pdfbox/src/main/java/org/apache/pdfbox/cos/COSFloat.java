begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_comment
comment|/**  * This class represents a floating point number in a PDF document.  *  * @author Ben Litchfield  *   */
end_comment

begin_class
specifier|public
class|class
name|COSFloat
extends|extends
name|COSNumber
block|{
specifier|private
name|BigDecimal
name|value
decl_stmt|;
specifier|private
name|String
name|valueAsString
decl_stmt|;
comment|/**      * Constructor.      *      * @param aFloat The primitive float object that this object wraps.      */
specifier|public
name|COSFloat
parameter_list|(
name|float
name|aFloat
parameter_list|)
block|{
comment|// use a BigDecimal as intermediate state to avoid
comment|// a floating point string representation of the float value
name|value
operator|=
operator|new
name|BigDecimal
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|aFloat
argument_list|)
argument_list|)
expr_stmt|;
name|valueAsString
operator|=
name|removeNullDigits
argument_list|(
name|value
operator|.
name|toPlainString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor.      *      * @param aFloat The primitive float object that this object wraps.      *      * @throws IOException If aFloat is not a float.      */
specifier|public
name|COSFloat
parameter_list|(
name|String
name|aFloat
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|valueAsString
operator|=
name|aFloat
expr_stmt|;
name|value
operator|=
operator|new
name|BigDecimal
argument_list|(
name|valueAsString
argument_list|)
expr_stmt|;
name|checkMinMaxValues
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
if|if
condition|(
name|aFloat
operator|.
name|matches
argument_list|(
literal|"^0\\.0+\\-\\d+"
argument_list|)
condition|)
block|{
comment|// PDFBOX-2990 has 0.00000-33917698
comment|// PDFBOX-3369 has 0.00-35095424
try|try
block|{
name|valueAsString
operator|=
literal|"-"
operator|+
name|valueAsString
operator|.
name|replaceFirst
argument_list|(
literal|"\\-"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|value
operator|=
operator|new
name|BigDecimal
argument_list|(
name|valueAsString
argument_list|)
expr_stmt|;
name|checkMinMaxValues
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e2
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error expected floating point number actual='"
operator|+
name|aFloat
operator|+
literal|"'"
argument_list|,
name|e2
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error expected floating point number actual='"
operator|+
name|aFloat
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|void
name|checkMinMaxValues
parameter_list|()
block|{
name|float
name|floatValue
init|=
name|value
operator|.
name|floatValue
argument_list|()
decl_stmt|;
name|double
name|doubleValue
init|=
name|value
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
name|boolean
name|valueReplaced
init|=
literal|false
decl_stmt|;
comment|// check for huge values
if|if
condition|(
name|floatValue
operator|==
name|Float
operator|.
name|NEGATIVE_INFINITY
operator|||
name|floatValue
operator|==
name|Float
operator|.
name|POSITIVE_INFINITY
condition|)
block|{
if|if
condition|(
name|Math
operator|.
name|abs
argument_list|(
name|doubleValue
argument_list|)
operator|>
name|Float
operator|.
name|MAX_VALUE
condition|)
block|{
name|floatValue
operator|=
name|Float
operator|.
name|MAX_VALUE
operator|*
operator|(
name|floatValue
operator|==
name|Float
operator|.
name|POSITIVE_INFINITY
condition|?
literal|1
else|:
operator|-
literal|1
operator|)
expr_stmt|;
name|valueReplaced
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// check for very small values
elseif|else
if|if
condition|(
name|floatValue
operator|==
literal|0
operator|&&
name|doubleValue
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|Math
operator|.
name|abs
argument_list|(
name|doubleValue
argument_list|)
operator|<
name|Float
operator|.
name|MIN_NORMAL
condition|)
block|{
name|floatValue
operator|=
name|Float
operator|.
name|MIN_NORMAL
expr_stmt|;
name|floatValue
operator|*=
name|doubleValue
operator|>=
literal|0
condition|?
literal|1
else|:
operator|-
literal|1
expr_stmt|;
name|valueReplaced
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|valueReplaced
condition|)
block|{
name|value
operator|=
operator|new
name|BigDecimal
argument_list|(
name|floatValue
argument_list|)
expr_stmt|;
name|valueAsString
operator|=
name|removeNullDigits
argument_list|(
name|value
operator|.
name|toPlainString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|removeNullDigits
parameter_list|(
name|String
name|plainStringValue
parameter_list|)
block|{
comment|// remove fraction digit "0" only
if|if
condition|(
name|plainStringValue
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
operator|>
operator|-
literal|1
operator|&&
operator|!
name|plainStringValue
operator|.
name|endsWith
argument_list|(
literal|".0"
argument_list|)
condition|)
block|{
while|while
condition|(
name|plainStringValue
operator|.
name|endsWith
argument_list|(
literal|"0"
argument_list|)
operator|&&
operator|!
name|plainStringValue
operator|.
name|endsWith
argument_list|(
literal|".0"
argument_list|)
condition|)
block|{
name|plainStringValue
operator|=
name|plainStringValue
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|plainStringValue
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|plainStringValue
return|;
block|}
comment|/**      * The value of the float object that this one wraps.      *      * @return The value of this object.      */
annotation|@
name|Override
specifier|public
name|float
name|floatValue
parameter_list|()
block|{
return|return
name|value
operator|.
name|floatValue
argument_list|()
return|;
block|}
comment|/**      * The value of the double object that this one wraps.      *      * @return The double of this object.      */
annotation|@
name|Override
specifier|public
name|double
name|doubleValue
parameter_list|()
block|{
return|return
name|value
operator|.
name|doubleValue
argument_list|()
return|;
block|}
comment|/**      * This will get the long value of this object.      *      * @return The long value of this object,      */
annotation|@
name|Override
specifier|public
name|long
name|longValue
parameter_list|()
block|{
return|return
name|value
operator|.
name|longValue
argument_list|()
return|;
block|}
comment|/**      * This will get the integer value of this object.      *      * @return The int value of this object,      */
annotation|@
name|Override
specifier|public
name|int
name|intValue
parameter_list|()
block|{
return|return
name|value
operator|.
name|intValue
argument_list|()
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|instanceof
name|COSFloat
operator|&&
name|Float
operator|.
name|floatToIntBits
argument_list|(
operator|(
operator|(
name|COSFloat
operator|)
name|o
operator|)
operator|.
name|value
operator|.
name|floatValue
argument_list|()
argument_list|)
operator|==
name|Float
operator|.
name|floatToIntBits
argument_list|(
name|value
operator|.
name|floatValue
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|value
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"COSFloat{"
operator|+
name|valueAsString
operator|+
literal|"}"
return|;
block|}
comment|/**      * visitor pattern double dispatch method.      *      * @param visitor The object to notify when visiting this object.      * @return any object, depending on the visitor implementation, or null      * @throws IOException If an error occurs while visiting this object.      */
annotation|@
name|Override
specifier|public
name|Object
name|accept
parameter_list|(
name|ICOSVisitor
name|visitor
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|visitor
operator|.
name|visitFromFloat
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**      * This will output this string as a PDF object.      *      * @param output The stream to write to.      * @throws IOException If there is an error writing to the stream.      */
specifier|public
name|void
name|writePDF
parameter_list|(
name|OutputStream
name|output
parameter_list|)
throws|throws
name|IOException
block|{
name|output
operator|.
name|write
argument_list|(
name|valueAsString
operator|.
name|getBytes
argument_list|(
literal|"ISO-8859-1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

