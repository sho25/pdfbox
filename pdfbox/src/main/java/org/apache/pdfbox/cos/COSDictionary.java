begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|WeakReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|COSObjectable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|DateConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|SmallMap
import|;
end_import

begin_comment
comment|/**  * This class represents a dictionary where name/value pairs reside.  *  * @author Ben Litchfield  *   */
end_comment

begin_class
specifier|public
class|class
name|COSDictionary
extends|extends
name|COSBase
implements|implements
name|COSUpdateInfo
block|{
specifier|private
specifier|static
specifier|final
name|String
name|PATH_SEPARATOR
init|=
literal|"/"
decl_stmt|;
specifier|private
name|boolean
name|needToBeUpdated
decl_stmt|;
comment|/**      * The name-value pairs of this dictionary. The pairs are kept in the order they were added to the dictionary.      */
comment|//    protected Map<COSName, COSBase> items = new LinkedHashMap<COSName, COSBase>();
specifier|protected
name|Map
argument_list|<
name|COSName
argument_list|,
name|COSBase
argument_list|>
name|items
init|=
operator|new
name|SmallMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * Constructor.      */
specifier|public
name|COSDictionary
parameter_list|()
block|{
comment|// default constructor
name|debugInstanceCount
argument_list|()
expr_stmt|;
block|}
comment|/**      * Copy Constructor. This will make a shallow copy of this dictionary.      *      * @param dict The dictionary to copy.      */
specifier|public
name|COSDictionary
parameter_list|(
name|COSDictionary
name|dict
parameter_list|)
block|{
name|items
operator|.
name|putAll
argument_list|(
name|dict
operator|.
name|items
argument_list|)
expr_stmt|;
name|debugInstanceCount
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|boolean
name|DO_DEBUG_INSTANCE_COUNT
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|WeakReference
argument_list|<
name|COSDictionary
argument_list|>
argument_list|>
name|DICT_INSTANCES
init|=
name|DO_DEBUG_INSTANCE_COUNT
condition|?
operator|new
name|ArrayList
argument_list|<
name|WeakReference
argument_list|<
name|COSDictionary
argument_list|>
argument_list|>
argument_list|()
else|:
literal|null
decl_stmt|;
comment|/**      * Only for memory debugging purposes (especially PDFBOX-3284): holds weak      * references to all instances and prints after each 10,000th instance a      * statistic across all instances showing how many instances we have per      * dictionary size (item count).      * This is to show that there can be a large number of COSDictionary instances      * but each having only few items, thus using a {@link LinkedHashMap} is a      * waste of memory resources.      *       *<p>This method should be removed if further testing of COSDictionary uses      * is not needed anymore.</p>      */
specifier|private
name|void
name|debugInstanceCount
parameter_list|()
block|{
if|if
condition|(
name|DO_DEBUG_INSTANCE_COUNT
condition|)
block|{
synchronized|synchronized
init|(
name|DICT_INSTANCES
init|)
block|{
name|DICT_INSTANCES
operator|.
name|add
argument_list|(
operator|new
name|WeakReference
argument_list|<>
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
comment|// print statistics at each 10,000th instance
if|if
condition|(
name|DICT_INSTANCES
operator|.
name|size
argument_list|()
operator|%
literal|10000
operator|==
literal|0
condition|)
block|{
name|int
index|[]
name|sizeCount
init|=
operator|new
name|int
index|[
literal|100
index|]
decl_stmt|;
for|for
control|(
name|WeakReference
argument_list|<
name|COSDictionary
argument_list|>
name|dict
range|:
name|DICT_INSTANCES
control|)
block|{
name|COSDictionary
name|curDict
init|=
name|dict
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|curDict
operator|!=
literal|null
condition|)
block|{
name|int
name|sizeIdx
init|=
name|curDict
operator|.
name|size
argument_list|()
decl_stmt|;
name|sizeCount
index|[
name|sizeIdx
operator|<
name|sizeCount
operator|.
name|length
condition|?
name|sizeIdx
else|:
name|sizeCount
operator|.
name|length
operator|-
literal|1
index|]
operator|++
expr_stmt|;
block|}
block|}
comment|// find biggest
name|int
name|maxIdx
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|max
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|sizeIdx
init|=
literal|0
init|;
name|sizeIdx
operator|<
name|sizeCount
operator|.
name|length
condition|;
operator|++
name|sizeIdx
control|)
block|{
if|if
condition|(
name|max
operator|<
name|sizeCount
index|[
name|sizeIdx
index|]
condition|)
block|{
name|maxIdx
operator|=
name|sizeIdx
expr_stmt|;
name|max
operator|=
name|sizeCount
index|[
name|sizeIdx
index|]
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"COSDictionary: dictionary size occurrences (max idx: "
operator|+
name|maxIdx
operator|+
literal|"): "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|sizeCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * @see java.util.Map#containsValue(java.lang.Object)      *      * @param value The value to find in the map.      *      * @return true if the map contains this value.      */
specifier|public
name|boolean
name|containsValue
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|boolean
name|contains
init|=
name|items
operator|.
name|containsValue
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|contains
operator|&&
name|value
operator|instanceof
name|COSObject
condition|)
block|{
name|contains
operator|=
name|items
operator|.
name|containsValue
argument_list|(
operator|(
operator|(
name|COSObject
operator|)
name|value
operator|)
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|contains
return|;
block|}
comment|/**      * Search in the map for the value that matches the parameter and return the first key that maps to that value.      *      * @param value The value to search for in the map.      * @return The key for the value in the map or null if it does not exist.      */
specifier|public
name|COSName
name|getKeyForValue
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|COSName
argument_list|,
name|COSBase
argument_list|>
name|entry
range|:
name|items
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Object
name|nextValue
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|nextValue
operator|.
name|equals
argument_list|(
name|value
argument_list|)
operator|||
operator|(
name|nextValue
operator|instanceof
name|COSObject
operator|&&
operator|(
operator|(
name|COSObject
operator|)
name|nextValue
operator|)
operator|.
name|getObject
argument_list|()
operator|.
name|equals
argument_list|(
name|value
argument_list|)
operator|)
condition|)
block|{
return|return
name|entry
operator|.
name|getKey
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * This will return the number of elements in this dictionary.      *      * @return The number of elements in the dictionary.      */
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|items
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**      * This will clear all items in the map.      */
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|items
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**      * This will get an object from this dictionary. If the object is a reference then it will dereference it and get it      * from the document. If the object is COSNull then null will be returned.      *      * @param key The key to the object that we are getting.      *      * @return The object that matches the key.      */
specifier|public
name|COSBase
name|getDictionaryObject
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * This is a special case of getDictionaryObject that takes multiple keys, it will handle the situation where      * multiple keys could get the same value, ie if either CS or ColorSpace is used to get the colorspace. This will      * get an object from this dictionary. If the object is a reference then it will dereference it and get it from the      * document. If the object is COSNull then null will be returned.      *      * @param firstKey The first key to try.      * @param secondKey The second key to try.      *      * @return The object that matches the key.      */
specifier|public
name|COSBase
name|getDictionaryObject
parameter_list|(
name|COSName
name|firstKey
parameter_list|,
name|COSName
name|secondKey
parameter_list|)
block|{
name|COSBase
name|retval
init|=
name|getDictionaryObject
argument_list|(
name|firstKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|retval
operator|==
literal|null
operator|&&
name|secondKey
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
name|getDictionaryObject
argument_list|(
name|secondKey
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * This is a special case of getDictionaryObject that takes multiple keys, it will handle the situation where      * multiple keys could get the same value, ie if either CS or ColorSpace is used to get the colorspace. This will      * get an object from this dictionary. If the object is a reference then it will dereference it and get it from the      * document. If the object is COSNull then null will be returned.      *      * @param keyList The list of keys to find a value.      *      * @return The object that matches the key.      */
specifier|public
name|COSBase
name|getDictionaryObject
parameter_list|(
name|String
index|[]
name|keyList
parameter_list|)
block|{
name|COSBase
name|retval
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keyList
operator|.
name|length
operator|&&
name|retval
operator|==
literal|null
condition|;
name|i
operator|++
control|)
block|{
name|retval
operator|=
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|keyList
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * This will get an object from this dictionary. If the object is a reference then it will dereference it and get it      * from the document. If the object is COSNull then null will be returned.      *      * @param key The key to the object that we are getting.      *      * @return The object that matches the key.      */
specifier|public
name|COSBase
name|getDictionaryObject
parameter_list|(
name|COSName
name|key
parameter_list|)
block|{
name|COSBase
name|retval
init|=
name|items
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|retval
operator|instanceof
name|COSObject
condition|)
block|{
name|retval
operator|=
operator|(
operator|(
name|COSObject
operator|)
name|retval
operator|)
operator|.
name|getObject
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|retval
operator|instanceof
name|COSNull
condition|)
block|{
name|retval
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * This will set an item in the dictionary. If value is null then the result will be the same as removeItem( key ).      *      * @param key The key to the dictionary object.      * @param value The value to the dictionary object.      */
specifier|public
name|void
name|setItem
parameter_list|(
name|COSName
name|key
parameter_list|,
name|COSBase
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|removeItem
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|items
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This will set an item in the dictionary. If value is null then the result will be the same as removeItem( key ).      *      * @param key The key to the dictionary object.      * @param value The value to the dictionary object.      */
specifier|public
name|void
name|setItem
parameter_list|(
name|COSName
name|key
parameter_list|,
name|COSObjectable
name|value
parameter_list|)
block|{
name|COSBase
name|base
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|base
operator|=
name|value
operator|.
name|getCOSObject
argument_list|()
expr_stmt|;
block|}
name|setItem
argument_list|(
name|key
argument_list|,
name|base
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will set an item in the dictionary. If value is null then the result will be the same as removeItem( key ).      *      * @param key The key to the dictionary object.      * @param value The value to the dictionary object.      */
specifier|public
name|void
name|setItem
parameter_list|(
name|String
name|key
parameter_list|,
name|COSObjectable
name|value
parameter_list|)
block|{
name|setItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|key
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will set an item in the dictionary.      *      * @param key The key to the dictionary object.      * @param value The value to the dictionary object.      */
specifier|public
name|void
name|setBoolean
parameter_list|(
name|String
name|key
parameter_list|,
name|boolean
name|value
parameter_list|)
block|{
name|setItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|key
argument_list|)
argument_list|,
name|COSBoolean
operator|.
name|getBoolean
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will set an item in the dictionary.      *      * @param key The key to the dictionary object.      * @param value The value to the dictionary object.      */
specifier|public
name|void
name|setBoolean
parameter_list|(
name|COSName
name|key
parameter_list|,
name|boolean
name|value
parameter_list|)
block|{
name|setItem
argument_list|(
name|key
argument_list|,
name|COSBoolean
operator|.
name|getBoolean
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will set an item in the dictionary. If value is null then the result will be the same as removeItem( key ).      *      * @param key The key to the dictionary object.      * @param value The value to the dictionary object.      */
specifier|public
name|void
name|setItem
parameter_list|(
name|String
name|key
parameter_list|,
name|COSBase
name|value
parameter_list|)
block|{
name|setItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|key
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * This is a convenience method that will convert the value to a COSName object. If it is null then the object will      * be removed.      *      * @param key The key to the object,      * @param value The string value for the name.      */
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|setName
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|key
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * This is a convenience method that will convert the value to a COSName object. If it is null then the object will      * be removed.      *      * @param key The key to the object,      * @param value The string value for the name.      */
specifier|public
name|void
name|setName
parameter_list|(
name|COSName
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|COSName
name|name
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|name
operator|=
name|COSName
operator|.
name|getPDFName
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|setItem
argument_list|(
name|key
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the value of a date entry in the dictionary.      *      * @param key The key to the date value.      * @param date The date value.      */
specifier|public
name|void
name|setDate
parameter_list|(
name|String
name|key
parameter_list|,
name|Calendar
name|date
parameter_list|)
block|{
name|setDate
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|key
argument_list|)
argument_list|,
name|date
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the date object.      *      * @param key The key to the date.      * @param date The date to set.      */
specifier|public
name|void
name|setDate
parameter_list|(
name|COSName
name|key
parameter_list|,
name|Calendar
name|date
parameter_list|)
block|{
name|setString
argument_list|(
name|key
argument_list|,
name|DateConverter
operator|.
name|toString
argument_list|(
name|date
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the value of a date entry in the dictionary.      *      * @param embedded The embedded dictionary.      * @param key The key to the date value.      * @param date The date value.      */
specifier|public
name|void
name|setEmbeddedDate
parameter_list|(
name|String
name|embedded
parameter_list|,
name|String
name|key
parameter_list|,
name|Calendar
name|date
parameter_list|)
block|{
name|setEmbeddedDate
argument_list|(
name|embedded
argument_list|,
name|COSName
operator|.
name|getPDFName
argument_list|(
name|key
argument_list|)
argument_list|,
name|date
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the date object.      *      * @param embedded The embedded dictionary.      * @param key The key to the date.      * @param date The date to set.      */
specifier|public
name|void
name|setEmbeddedDate
parameter_list|(
name|String
name|embedded
parameter_list|,
name|COSName
name|key
parameter_list|,
name|Calendar
name|date
parameter_list|)
block|{
name|COSDictionary
name|dic
init|=
operator|(
name|COSDictionary
operator|)
name|getDictionaryObject
argument_list|(
name|embedded
argument_list|)
decl_stmt|;
if|if
condition|(
name|dic
operator|==
literal|null
operator|&&
name|date
operator|!=
literal|null
condition|)
block|{
name|dic
operator|=
operator|new
name|COSDictionary
argument_list|()
expr_stmt|;
name|setItem
argument_list|(
name|embedded
argument_list|,
name|dic
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dic
operator|!=
literal|null
condition|)
block|{
name|dic
operator|.
name|setDate
argument_list|(
name|key
argument_list|,
name|date
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This is a convenience method that will convert the value to a COSString object. If it is null then the object      * will be removed.      *      * @param key The key to the object,      * @param value The string value for the name.      */
specifier|public
name|void
name|setString
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|setString
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|key
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * This is a convenience method that will convert the value to a COSString object. If it is null then the object      * will be removed.      *      * @param key The key to the object,      * @param value The string value for the name.      */
specifier|public
name|void
name|setString
parameter_list|(
name|COSName
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|COSString
name|name
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|name
operator|=
operator|new
name|COSString
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|setItem
argument_list|(
name|key
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**      * This is a convenience method that will convert the value to a COSString object. If it is null then the object      * will be removed.      *      * @param embedded The embedded dictionary to set the item in.      * @param key The key to the object,      * @param value The string value for the name.      */
specifier|public
name|void
name|setEmbeddedString
parameter_list|(
name|String
name|embedded
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|setEmbeddedString
argument_list|(
name|embedded
argument_list|,
name|COSName
operator|.
name|getPDFName
argument_list|(
name|key
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * This is a convenience method that will convert the value to a COSString object. If it is null then the object      * will be removed.      *      * @param embedded The embedded dictionary to set the item in.      * @param key The key to the object,      * @param value The string value for the name.      */
specifier|public
name|void
name|setEmbeddedString
parameter_list|(
name|String
name|embedded
parameter_list|,
name|COSName
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|COSDictionary
name|dic
init|=
operator|(
name|COSDictionary
operator|)
name|getDictionaryObject
argument_list|(
name|embedded
argument_list|)
decl_stmt|;
if|if
condition|(
name|dic
operator|==
literal|null
operator|&&
name|value
operator|!=
literal|null
condition|)
block|{
name|dic
operator|=
operator|new
name|COSDictionary
argument_list|()
expr_stmt|;
name|setItem
argument_list|(
name|embedded
argument_list|,
name|dic
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dic
operator|!=
literal|null
condition|)
block|{
name|dic
operator|.
name|setString
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This is a convenience method that will convert the value to a COSInteger object.      *      * @param key The key to the object,      * @param value The int value for the name.      */
specifier|public
name|void
name|setInt
parameter_list|(
name|String
name|key
parameter_list|,
name|int
name|value
parameter_list|)
block|{
name|setInt
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|key
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * This is a convenience method that will convert the value to a COSInteger object.      *      * @param key The key to the object,      * @param value The int value for the name.      */
specifier|public
name|void
name|setInt
parameter_list|(
name|COSName
name|key
parameter_list|,
name|int
name|value
parameter_list|)
block|{
name|setItem
argument_list|(
name|key
argument_list|,
name|COSInteger
operator|.
name|get
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * This is a convenience method that will convert the value to a COSInteger object.      *      * @param key The key to the object,      * @param value The int value for the name.      */
specifier|public
name|void
name|setLong
parameter_list|(
name|String
name|key
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|setLong
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|key
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * This is a convenience method that will convert the value to a COSInteger object.      *      * @param key The key to the object,      * @param value The int value for the name.      */
specifier|public
name|void
name|setLong
parameter_list|(
name|COSName
name|key
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|COSInteger
name|intVal
init|=
name|COSInteger
operator|.
name|get
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|setItem
argument_list|(
name|key
argument_list|,
name|intVal
argument_list|)
expr_stmt|;
block|}
comment|/**      * This is a convenience method that will convert the value to a COSInteger object.      *      * @param embeddedDictionary The embedded dictionary.      * @param key The key to the object,      * @param value The int value for the name.      */
specifier|public
name|void
name|setEmbeddedInt
parameter_list|(
name|String
name|embeddedDictionary
parameter_list|,
name|String
name|key
parameter_list|,
name|int
name|value
parameter_list|)
block|{
name|setEmbeddedInt
argument_list|(
name|embeddedDictionary
argument_list|,
name|COSName
operator|.
name|getPDFName
argument_list|(
name|key
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * This is a convenience method that will convert the value to a COSInteger object.      *      * @param embeddedDictionary The embedded dictionary.      * @param key The key to the object,      * @param value The int value for the name.      */
specifier|public
name|void
name|setEmbeddedInt
parameter_list|(
name|String
name|embeddedDictionary
parameter_list|,
name|COSName
name|key
parameter_list|,
name|int
name|value
parameter_list|)
block|{
name|COSDictionary
name|embedded
init|=
operator|(
name|COSDictionary
operator|)
name|getDictionaryObject
argument_list|(
name|embeddedDictionary
argument_list|)
decl_stmt|;
if|if
condition|(
name|embedded
operator|==
literal|null
condition|)
block|{
name|embedded
operator|=
operator|new
name|COSDictionary
argument_list|()
expr_stmt|;
name|setItem
argument_list|(
name|embeddedDictionary
argument_list|,
name|embedded
argument_list|)
expr_stmt|;
block|}
name|embedded
operator|.
name|setInt
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * This is a convenience method that will convert the value to a COSFloat object.      *      * @param key The key to the object,      * @param value The int value for the name.      */
specifier|public
name|void
name|setFloat
parameter_list|(
name|String
name|key
parameter_list|,
name|float
name|value
parameter_list|)
block|{
name|setFloat
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|key
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * This is a convenience method that will convert the value to a COSFloat object.      *      * @param key The key to the object,      * @param value The int value for the name.      */
specifier|public
name|void
name|setFloat
parameter_list|(
name|COSName
name|key
parameter_list|,
name|float
name|value
parameter_list|)
block|{
name|COSFloat
name|fltVal
init|=
operator|new
name|COSFloat
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|setItem
argument_list|(
name|key
argument_list|,
name|fltVal
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the given boolean value at bitPos in the flags.      *      * @param field The COSName of the field to set the value into.      * @param bitFlag the bit position to set the value in.      * @param value the value the bit position should have.      */
specifier|public
name|void
name|setFlag
parameter_list|(
name|COSName
name|field
parameter_list|,
name|int
name|bitFlag
parameter_list|,
name|boolean
name|value
parameter_list|)
block|{
name|int
name|currentFlags
init|=
name|getInt
argument_list|(
name|field
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
condition|)
block|{
name|currentFlags
operator|=
name|currentFlags
operator||
name|bitFlag
expr_stmt|;
block|}
else|else
block|{
name|currentFlags
operator|&=
operator|~
name|bitFlag
expr_stmt|;
block|}
name|setInt
argument_list|(
name|field
argument_list|,
name|currentFlags
argument_list|)
expr_stmt|;
block|}
comment|/**      * This is a convenience method that will get the dictionary object that is expected to be a name. Null is returned      * if the entry does not exist in the dictionary.      *      * @param key The key to the item in the dictionary.      * @return The COS name.      */
specifier|public
name|COSName
name|getCOSName
parameter_list|(
name|COSName
name|key
parameter_list|)
block|{
name|COSBase
name|name
init|=
name|getDictionaryObject
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|instanceof
name|COSName
condition|)
block|{
return|return
operator|(
name|COSName
operator|)
name|name
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * This is a convenience method that will get the dictionary object that is expected to be a name. Default is      * returned if the entry does not exist in the dictionary.      *      * @param key The key to the item in the dictionary.      * @param defaultValue The value to return if the dictionary item is null.      * @return The COS name.      */
specifier|public
name|COSName
name|getCOSName
parameter_list|(
name|COSName
name|key
parameter_list|,
name|COSName
name|defaultValue
parameter_list|)
block|{
name|COSBase
name|name
init|=
name|getDictionaryObject
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|instanceof
name|COSName
condition|)
block|{
return|return
operator|(
name|COSName
operator|)
name|name
return|;
block|}
return|return
name|defaultValue
return|;
block|}
comment|/**      * This is a convenience method that will get the dictionary object that is expected to be a name and convert it to      * a string. Null is returned if the entry does not exist in the dictionary.      *      * @param key The key to the item in the dictionary.      * @return The name converted to a string.      */
specifier|public
name|String
name|getNameAsString
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * This is a convenience method that will get the dictionary object that is expected to be a name and convert it to      * a string. Null is returned if the entry does not exist in the dictionary.      *      * @param key The key to the item in the dictionary.      * @return The name converted to a string.      */
specifier|public
name|String
name|getNameAsString
parameter_list|(
name|COSName
name|key
parameter_list|)
block|{
name|String
name|retval
init|=
literal|null
decl_stmt|;
name|COSBase
name|name
init|=
name|getDictionaryObject
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|instanceof
name|COSName
condition|)
block|{
name|retval
operator|=
operator|(
operator|(
name|COSName
operator|)
name|name
operator|)
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|instanceof
name|COSString
condition|)
block|{
name|retval
operator|=
operator|(
operator|(
name|COSString
operator|)
name|name
operator|)
operator|.
name|getString
argument_list|()
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * This is a convenience method that will get the dictionary object that is expected to be a name and convert it to      * a string. Null is returned if the entry does not exist in the dictionary.      *      * @param key The key to the item in the dictionary.      * @param defaultValue The value to return if the dictionary item is null.      * @return The name converted to a string.      */
specifier|public
name|String
name|getNameAsString
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
return|return
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|key
argument_list|)
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
comment|/**      * This is a convenience method that will get the dictionary object that is expected to be a name and convert it to      * a string. Null is returned if the entry does not exist in the dictionary.      *      * @param key The key to the item in the dictionary.      * @param defaultValue The value to return if the dictionary item is null.      * @return The name converted to a string.      */
specifier|public
name|String
name|getNameAsString
parameter_list|(
name|COSName
name|key
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
name|String
name|retval
init|=
name|getNameAsString
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|retval
operator|==
literal|null
condition|)
block|{
name|retval
operator|=
name|defaultValue
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * This is a convenience method that will get the dictionary object that is expected to be a name and convert it to      * a string. Null is returned if the entry does not exist in the dictionary.      *      * @param key The key to the item in the dictionary.      * @return The name converted to a string.      */
specifier|public
name|String
name|getString
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|getString
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * This is a convenience method that will get the dictionary object that is expected to be a name and convert it to      * a string. Null is returned if the entry does not exist in the dictionary.      *      * @param key The key to the item in the dictionary.      * @return The name converted to a string.      */
specifier|public
name|String
name|getString
parameter_list|(
name|COSName
name|key
parameter_list|)
block|{
name|String
name|retval
init|=
literal|null
decl_stmt|;
name|COSBase
name|value
init|=
name|getDictionaryObject
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|COSString
condition|)
block|{
name|retval
operator|=
operator|(
operator|(
name|COSString
operator|)
name|value
operator|)
operator|.
name|getString
argument_list|()
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * This is a convenience method that will get the dictionary object that is expected to be a name and convert it to      * a string. Null is returned if the entry does not exist in the dictionary.      *      * @param key The key to the item in the dictionary.      * @param defaultValue The default value to return.      * @return The name converted to a string.      */
specifier|public
name|String
name|getString
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
return|return
name|getString
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|key
argument_list|)
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
comment|/**      * This is a convenience method that will get the dictionary object that is expected to be a name and convert it to      * a string. Null is returned if the entry does not exist in the dictionary.      *      * @param key The key to the item in the dictionary.      * @param defaultValue The default value to return.      * @return The name converted to a string.      */
specifier|public
name|String
name|getString
parameter_list|(
name|COSName
name|key
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
name|String
name|retval
init|=
name|getString
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|retval
operator|==
literal|null
condition|)
block|{
name|retval
operator|=
name|defaultValue
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * This is a convenience method that will get the dictionary object that is expected to be a name and convert it to      * a string. Null is returned if the entry does not exist in the dictionary.      *      * @param embedded The embedded dictionary.      * @param key The key to the item in the dictionary.      * @return The name converted to a string.      */
specifier|public
name|String
name|getEmbeddedString
parameter_list|(
name|String
name|embedded
parameter_list|,
name|String
name|key
parameter_list|)
block|{
return|return
name|getEmbeddedString
argument_list|(
name|embedded
argument_list|,
name|COSName
operator|.
name|getPDFName
argument_list|(
name|key
argument_list|)
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * This is a convenience method that will get the dictionary object that is expected to be a name and convert it to      * a string. Null is returned if the entry does not exist in the dictionary.      *      * @param embedded The embedded dictionary.      * @param key The key to the item in the dictionary.      * @return The name converted to a string.      */
specifier|public
name|String
name|getEmbeddedString
parameter_list|(
name|String
name|embedded
parameter_list|,
name|COSName
name|key
parameter_list|)
block|{
return|return
name|getEmbeddedString
argument_list|(
name|embedded
argument_list|,
name|key
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * This is a convenience method that will get the dictionary object that is expected to be a name and convert it to      * a string. Null is returned if the entry does not exist in the dictionary.      *      * @param embedded The embedded dictionary.      * @param key The key to the item in the dictionary.      * @param defaultValue The default value to return.      * @return The name converted to a string.      */
specifier|public
name|String
name|getEmbeddedString
parameter_list|(
name|String
name|embedded
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
return|return
name|getEmbeddedString
argument_list|(
name|embedded
argument_list|,
name|COSName
operator|.
name|getPDFName
argument_list|(
name|key
argument_list|)
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
comment|/**      * This is a convenience method that will get the dictionary object that is expected to be a name and convert it to      * a string. Null is returned if the entry does not exist in the dictionary.      *      * @param embedded The embedded dictionary.      * @param key The key to the item in the dictionary.      * @param defaultValue The default value to return.      * @return The name converted to a string.      */
specifier|public
name|String
name|getEmbeddedString
parameter_list|(
name|String
name|embedded
parameter_list|,
name|COSName
name|key
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
name|String
name|retval
init|=
name|defaultValue
decl_stmt|;
name|COSDictionary
name|dic
init|=
operator|(
name|COSDictionary
operator|)
name|getDictionaryObject
argument_list|(
name|embedded
argument_list|)
decl_stmt|;
if|if
condition|(
name|dic
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
name|dic
operator|.
name|getString
argument_list|(
name|key
argument_list|,
name|defaultValue
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * This is a convenience method that will get the dictionary object that is expected to be a name and convert it to      * a string. Null is returned if the entry does not exist in the dictionary or if the date was invalid.      *      * @param key The key to the item in the dictionary.      * @return The name converted to a date.      */
specifier|public
name|Calendar
name|getDate
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|getDate
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * This is a convenience method that will get the dictionary object that is expected to be a name and convert it to      * a string. Null is returned if the entry does not exist in the dictionary or if the date was invalid.      *      * @param key The key to the item in the dictionary.      * @return The name converted to a date.      */
specifier|public
name|Calendar
name|getDate
parameter_list|(
name|COSName
name|key
parameter_list|)
block|{
name|COSBase
name|base
init|=
name|getDictionaryObject
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|base
operator|instanceof
name|COSString
condition|)
block|{
return|return
name|DateConverter
operator|.
name|toCalendar
argument_list|(
operator|(
name|COSString
operator|)
name|base
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * This is a convenience method that will get the dictionary object that is expected to be a date. Null is returned      * if the entry does not exist in the dictionary or if the date was invalid.      *      * @param key The key to the item in the dictionary.      * @param defaultValue The default value to return.      * @return The name converted to a date.      */
specifier|public
name|Calendar
name|getDate
parameter_list|(
name|String
name|key
parameter_list|,
name|Calendar
name|defaultValue
parameter_list|)
block|{
return|return
name|getDate
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|key
argument_list|)
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
comment|/**      * This is a convenience method that will get the dictionary object that is expected to be a date. Null is returned      * if the entry does not exist in the dictionary or if the date was invalid.      *      * @param key The key to the item in the dictionary.      * @param defaultValue The default value to return.      * @return The name converted to a date.      */
specifier|public
name|Calendar
name|getDate
parameter_list|(
name|COSName
name|key
parameter_list|,
name|Calendar
name|defaultValue
parameter_list|)
block|{
name|Calendar
name|retval
init|=
name|getDate
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|retval
operator|==
literal|null
condition|)
block|{
name|retval
operator|=
name|defaultValue
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * This is a convenience method that will get the dictionary object that is expected to be a name and convert it to      * a string. Null is returned if the entry does not exist in the dictionary.      *      * @param embedded The embedded dictionary to get.      * @param key The key to the item in the dictionary.      * @return The name converted to a string.      * @throws IOException If there is an error converting to a date.      */
specifier|public
name|Calendar
name|getEmbeddedDate
parameter_list|(
name|String
name|embedded
parameter_list|,
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getEmbeddedDate
argument_list|(
name|embedded
argument_list|,
name|COSName
operator|.
name|getPDFName
argument_list|(
name|key
argument_list|)
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * This is a convenience method that will get the dictionary object that is expected to be a name and convert it to      * a string. Null is returned if the entry does not exist in the dictionary.      *      * @param embedded The embedded dictionary to get.      * @param key The key to the item in the dictionary.      * @return The name converted to a string.      *      * @throws IOException If there is an error converting to a date.      */
specifier|public
name|Calendar
name|getEmbeddedDate
parameter_list|(
name|String
name|embedded
parameter_list|,
name|COSName
name|key
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getEmbeddedDate
argument_list|(
name|embedded
argument_list|,
name|key
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * This is a convenience method that will get the dictionary object that is expected to be a date. Null is returned      * if the entry does not exist in the dictionary.      *      * @param embedded The embedded dictionary to get.      * @param key The key to the item in the dictionary.      * @param defaultValue The default value to return.      * @return The name converted to a string.      * @throws IOException If there is an error converting to a date.      */
specifier|public
name|Calendar
name|getEmbeddedDate
parameter_list|(
name|String
name|embedded
parameter_list|,
name|String
name|key
parameter_list|,
name|Calendar
name|defaultValue
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getEmbeddedDate
argument_list|(
name|embedded
argument_list|,
name|COSName
operator|.
name|getPDFName
argument_list|(
name|key
argument_list|)
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
comment|/**      * This is a convenience method that will get the dictionary object that is expected to be a date. Null is returned      * if the entry does not exist in the dictionary.      *      * @param embedded The embedded dictionary to get.      * @param key The key to the item in the dictionary.      * @param defaultValue The default value to return.      * @return The name converted to a string.      * @throws IOException If there is an error converting to a date.      */
specifier|public
name|Calendar
name|getEmbeddedDate
parameter_list|(
name|String
name|embedded
parameter_list|,
name|COSName
name|key
parameter_list|,
name|Calendar
name|defaultValue
parameter_list|)
throws|throws
name|IOException
block|{
name|Calendar
name|retval
init|=
name|defaultValue
decl_stmt|;
name|COSDictionary
name|eDic
init|=
operator|(
name|COSDictionary
operator|)
name|getDictionaryObject
argument_list|(
name|embedded
argument_list|)
decl_stmt|;
if|if
condition|(
name|eDic
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
name|eDic
operator|.
name|getDate
argument_list|(
name|key
argument_list|,
name|defaultValue
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * This is a convenience method that will get the dictionary object that is expected to be a cos boolean and convert      * it to a primitive boolean.      *      * @param key The key to the item in the dictionary.      * @param defaultValue The value returned if the entry is null.      *      * @return The value converted to a boolean.      */
specifier|public
name|boolean
name|getBoolean
parameter_list|(
name|String
name|key
parameter_list|,
name|boolean
name|defaultValue
parameter_list|)
block|{
return|return
name|getBoolean
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|key
argument_list|)
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
comment|/**      * This is a convenience method that will get the dictionary object that is expected to be a COSBoolean and convert      * it to a primitive boolean.      *      * @param key The key to the item in the dictionary.      * @param defaultValue The value returned if the entry is null.      *      * @return The entry converted to a boolean.      */
specifier|public
name|boolean
name|getBoolean
parameter_list|(
name|COSName
name|key
parameter_list|,
name|boolean
name|defaultValue
parameter_list|)
block|{
return|return
name|getBoolean
argument_list|(
name|key
argument_list|,
literal|null
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
comment|/**      * This is a convenience method that will get the dictionary object that is expected to be a COSBoolean and convert      * it to a primitive boolean.      *      * @param firstKey The first key to the item in the dictionary.      * @param secondKey The second key to the item in the dictionary.      * @param defaultValue The value returned if the entry is null.      *      * @return The entry converted to a boolean.      */
specifier|public
name|boolean
name|getBoolean
parameter_list|(
name|COSName
name|firstKey
parameter_list|,
name|COSName
name|secondKey
parameter_list|,
name|boolean
name|defaultValue
parameter_list|)
block|{
name|boolean
name|retval
init|=
name|defaultValue
decl_stmt|;
name|COSBase
name|bool
init|=
name|getDictionaryObject
argument_list|(
name|firstKey
argument_list|,
name|secondKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|bool
operator|instanceof
name|COSBoolean
condition|)
block|{
name|retval
operator|=
operator|(
operator|(
name|COSBoolean
operator|)
name|bool
operator|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * Get an integer from an embedded dictionary. Useful for 1-1 mappings. default:-1      *      * @param embeddedDictionary The name of the embedded dictionary.      * @param key The key in the embedded dictionary.      *      * @return The value of the embedded integer.      */
specifier|public
name|int
name|getEmbeddedInt
parameter_list|(
name|String
name|embeddedDictionary
parameter_list|,
name|String
name|key
parameter_list|)
block|{
return|return
name|getEmbeddedInt
argument_list|(
name|embeddedDictionary
argument_list|,
name|COSName
operator|.
name|getPDFName
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Get an integer from an embedded dictionary. Useful for 1-1 mappings. default:-1      *      * @param embeddedDictionary The name of the embedded dictionary.      * @param key The key in the embedded dictionary.      *      * @return The value of the embedded integer.      */
specifier|public
name|int
name|getEmbeddedInt
parameter_list|(
name|String
name|embeddedDictionary
parameter_list|,
name|COSName
name|key
parameter_list|)
block|{
return|return
name|getEmbeddedInt
argument_list|(
name|embeddedDictionary
argument_list|,
name|key
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/**      * Get an integer from an embedded dictionary. Useful for 1-1 mappings.      *      * @param embeddedDictionary The name of the embedded dictionary.      * @param key The key in the embedded dictionary.      * @param defaultValue The value if there is no embedded dictionary or it does not contain the key.      *      * @return The value of the embedded integer.      */
specifier|public
name|int
name|getEmbeddedInt
parameter_list|(
name|String
name|embeddedDictionary
parameter_list|,
name|String
name|key
parameter_list|,
name|int
name|defaultValue
parameter_list|)
block|{
return|return
name|getEmbeddedInt
argument_list|(
name|embeddedDictionary
argument_list|,
name|COSName
operator|.
name|getPDFName
argument_list|(
name|key
argument_list|)
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
comment|/**      * Get an integer from an embedded dictionary. Useful for 1-1 mappings.      *      * @param embeddedDictionary The name of the embedded dictionary.      * @param key The key in the embedded dictionary.      * @param defaultValue The value if there is no embedded dictionary or it does not contain the key.      *      * @return The value of the embedded integer.      */
specifier|public
name|int
name|getEmbeddedInt
parameter_list|(
name|String
name|embeddedDictionary
parameter_list|,
name|COSName
name|key
parameter_list|,
name|int
name|defaultValue
parameter_list|)
block|{
name|int
name|retval
init|=
name|defaultValue
decl_stmt|;
name|COSDictionary
name|embedded
init|=
operator|(
name|COSDictionary
operator|)
name|getDictionaryObject
argument_list|(
name|embeddedDictionary
argument_list|)
decl_stmt|;
if|if
condition|(
name|embedded
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
name|embedded
operator|.
name|getInt
argument_list|(
name|key
argument_list|,
name|defaultValue
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * This is a convenience method that will get the dictionary object that is expected to be an int. -1 is returned if      * there is no value.      *      * @param key The key to the item in the dictionary.      * @return The integer value.      */
specifier|public
name|int
name|getInt
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|getInt
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|key
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/**      * This is a convenience method that will get the dictionary object that is expected to be an int. -1 is returned if      * there is no value.      *      * @param key The key to the item in the dictionary.      * @return The integer value..      */
specifier|public
name|int
name|getInt
parameter_list|(
name|COSName
name|key
parameter_list|)
block|{
return|return
name|getInt
argument_list|(
name|key
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/**      * This is a convenience method that will get the dictionary object that is expected to be an integer. If the      * dictionary value is null then the default Value will be returned.      *      * @param keyList The key to the item in the dictionary.      * @param defaultValue The value to return if the dictionary item is null.      * @return The integer value.      */
specifier|public
name|int
name|getInt
parameter_list|(
name|String
index|[]
name|keyList
parameter_list|,
name|int
name|defaultValue
parameter_list|)
block|{
name|int
name|retval
init|=
name|defaultValue
decl_stmt|;
name|COSBase
name|obj
init|=
name|getDictionaryObject
argument_list|(
name|keyList
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|COSNumber
condition|)
block|{
name|retval
operator|=
operator|(
operator|(
name|COSNumber
operator|)
name|obj
operator|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * This is a convenience method that will get the dictionary object that is expected to be an integer. If the      * dictionary value is null then the default Value will be returned.      *      * @param key The key to the item in the dictionary.      * @param defaultValue The value to return if the dictionary item is null.      * @return The integer value.      */
specifier|public
name|int
name|getInt
parameter_list|(
name|String
name|key
parameter_list|,
name|int
name|defaultValue
parameter_list|)
block|{
return|return
name|getInt
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|key
argument_list|)
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
comment|/**      * This is a convenience method that will get the dictionary object that is expected to be an integer. If the      * dictionary value is null then the default Value will be returned.      *      * @param key The key to the item in the dictionary.      * @param defaultValue The value to return if the dictionary item is null.      * @return The integer value.      */
specifier|public
name|int
name|getInt
parameter_list|(
name|COSName
name|key
parameter_list|,
name|int
name|defaultValue
parameter_list|)
block|{
return|return
name|getInt
argument_list|(
name|key
argument_list|,
literal|null
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
comment|/**      * This is a convenience method that will get the dictionary object that is expected to be an integer. If the      * dictionary value is null then the default Value -1 will be returned.      *      * @param firstKey The first key to the item in the dictionary.      * @param secondKey The second key to the item in the dictionary.      * @return The integer value.      */
specifier|public
name|int
name|getInt
parameter_list|(
name|COSName
name|firstKey
parameter_list|,
name|COSName
name|secondKey
parameter_list|)
block|{
return|return
name|getInt
argument_list|(
name|firstKey
argument_list|,
name|secondKey
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/**      * This is a convenience method that will get the dictionary object that is expected to be an integer. If the      * dictionary value is null then the default Value will be returned.      *      * @param firstKey The first key to the item in the dictionary.      * @param secondKey The second key to the item in the dictionary.      * @param defaultValue The value to return if the dictionary item is null.      * @return The integer value.      */
specifier|public
name|int
name|getInt
parameter_list|(
name|COSName
name|firstKey
parameter_list|,
name|COSName
name|secondKey
parameter_list|,
name|int
name|defaultValue
parameter_list|)
block|{
name|int
name|retval
init|=
name|defaultValue
decl_stmt|;
name|COSBase
name|obj
init|=
name|getDictionaryObject
argument_list|(
name|firstKey
argument_list|,
name|secondKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|COSNumber
condition|)
block|{
name|retval
operator|=
operator|(
operator|(
name|COSNumber
operator|)
name|obj
operator|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * This is a convenience method that will get the dictionary object that is expected to be an long. -1 is returned      * if there is no value.      *      * @param key The key to the item in the dictionary.      *      * @return The long value.      */
specifier|public
name|long
name|getLong
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|getLong
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|key
argument_list|)
argument_list|,
operator|-
literal|1L
argument_list|)
return|;
block|}
comment|/**      * This is a convenience method that will get the dictionary object that is expected to be an long. -1 is returned      * if there is no value.      *      * @param key The key to the item in the dictionary.      * @return The long value.      */
specifier|public
name|long
name|getLong
parameter_list|(
name|COSName
name|key
parameter_list|)
block|{
return|return
name|getLong
argument_list|(
name|key
argument_list|,
operator|-
literal|1L
argument_list|)
return|;
block|}
comment|/**      * This is a convenience method that will get the dictionary object that is expected to be an long. If the      * dictionary value is null then the default Value will be returned.      *      * @param keyList The key to the item in the dictionary.      * @param defaultValue The value to return if the dictionary item is null.      * @return The long value.      */
specifier|public
name|long
name|getLong
parameter_list|(
name|String
index|[]
name|keyList
parameter_list|,
name|long
name|defaultValue
parameter_list|)
block|{
name|long
name|retval
init|=
name|defaultValue
decl_stmt|;
name|COSBase
name|obj
init|=
name|getDictionaryObject
argument_list|(
name|keyList
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|COSNumber
condition|)
block|{
name|retval
operator|=
operator|(
operator|(
name|COSNumber
operator|)
name|obj
operator|)
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * This is a convenience method that will get the dictionary object that is expected to be an integer. If the      * dictionary value is null then the default Value will be returned.      *      * @param key The key to the item in the dictionary.      * @param defaultValue The value to return if the dictionary item is null.      * @return The integer value.      */
specifier|public
name|long
name|getLong
parameter_list|(
name|String
name|key
parameter_list|,
name|long
name|defaultValue
parameter_list|)
block|{
return|return
name|getLong
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|key
argument_list|)
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
comment|/**      * This is a convenience method that will get the dictionary object that is expected to be an integer. If the      * dictionary value is null then the default Value will be returned.      *      * @param key The key to the item in the dictionary.      * @param defaultValue The value to return if the dictionary item is null.      * @return The integer value.      */
specifier|public
name|long
name|getLong
parameter_list|(
name|COSName
name|key
parameter_list|,
name|long
name|defaultValue
parameter_list|)
block|{
name|long
name|retval
init|=
name|defaultValue
decl_stmt|;
name|COSBase
name|obj
init|=
name|getDictionaryObject
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|COSNumber
condition|)
block|{
name|retval
operator|=
operator|(
operator|(
name|COSNumber
operator|)
name|obj
operator|)
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * This is a convenience method that will get the dictionary object that is expected to be an float. -1 is returned      * if there is no value.      *      * @param key The key to the item in the dictionary.      * @return The float value.      */
specifier|public
name|float
name|getFloat
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|getFloat
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|key
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/**      * This is a convenience method that will get the dictionary object that is expected to be an float. -1 is returned      * if there is no value.      *      * @param key The key to the item in the dictionary.      * @return The float value.      */
specifier|public
name|float
name|getFloat
parameter_list|(
name|COSName
name|key
parameter_list|)
block|{
return|return
name|getFloat
argument_list|(
name|key
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/**      * This is a convenience method that will get the dictionary object that is expected to be a float. If the      * dictionary value is null then the default Value will be returned.      *      * @param key The key to the item in the dictionary.      * @param defaultValue The value to return if the dictionary item is null.      * @return The float value.      */
specifier|public
name|float
name|getFloat
parameter_list|(
name|String
name|key
parameter_list|,
name|float
name|defaultValue
parameter_list|)
block|{
return|return
name|getFloat
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|key
argument_list|)
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
comment|/**      * This is a convenience method that will get the dictionary object that is expected to be an float. If the      * dictionary value is null then the default Value will be returned.      *      * @param key The key to the item in the dictionary.      * @param defaultValue The value to return if the dictionary item is null.      * @return The float value.      */
specifier|public
name|float
name|getFloat
parameter_list|(
name|COSName
name|key
parameter_list|,
name|float
name|defaultValue
parameter_list|)
block|{
name|float
name|retval
init|=
name|defaultValue
decl_stmt|;
name|COSBase
name|obj
init|=
name|getDictionaryObject
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|COSNumber
condition|)
block|{
name|retval
operator|=
operator|(
operator|(
name|COSNumber
operator|)
name|obj
operator|)
operator|.
name|floatValue
argument_list|()
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * Gets the boolean value from the flags at the given bit position.      *      * @param field The COSName of the field to get the flag from.      * @param bitFlag the bitPosition to get the value from.      *      * @return true if the number at bitPos is '1'      */
specifier|public
name|boolean
name|getFlag
parameter_list|(
name|COSName
name|field
parameter_list|,
name|int
name|bitFlag
parameter_list|)
block|{
name|int
name|ff
init|=
name|getInt
argument_list|(
name|field
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
operator|(
name|ff
operator|&
name|bitFlag
operator|)
operator|==
name|bitFlag
return|;
block|}
comment|/**      * This will remove an item for the dictionary. This will do nothing of the object does not exist.      *      * @param key The key to the item to remove from the dictionary.      */
specifier|public
name|void
name|removeItem
parameter_list|(
name|COSName
name|key
parameter_list|)
block|{
name|items
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will do a lookup into the dictionary.      *      * @param key The key to the object.      *      * @return The item that matches the key.      */
specifier|public
name|COSBase
name|getItem
parameter_list|(
name|COSName
name|key
parameter_list|)
block|{
return|return
name|items
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/**      * This will do a lookup into the dictionary.      *       * @param key The key to the object.      *      * @return The item that matches the key.      */
specifier|public
name|COSBase
name|getItem
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * This is a special case of getItem that takes multiple keys, it will handle the situation      * where multiple keys could get the same value, ie if either CS or ColorSpace is used to get      * the colorspace. This will get an object from this dictionary.      *      * @param firstKey The first key to try.      * @param secondKey The second key to try.      *      * @return The object that matches the key.      */
specifier|public
name|COSBase
name|getItem
parameter_list|(
name|COSName
name|firstKey
parameter_list|,
name|COSName
name|secondKey
parameter_list|)
block|{
name|COSBase
name|retval
init|=
name|getItem
argument_list|(
name|firstKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|retval
operator|==
literal|null
operator|&&
name|secondKey
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
name|getItem
argument_list|(
name|secondKey
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * Returns the names of the entries in this dictionary. The returned set is in the order the entries were added to      * the dictionary.      *      * @since Apache PDFBox 1.1.0      * @return names of the entries in this dictionary      */
specifier|public
name|Set
argument_list|<
name|COSName
argument_list|>
name|keySet
parameter_list|()
block|{
return|return
name|items
operator|.
name|keySet
argument_list|()
return|;
block|}
comment|/**      * Returns the name-value entries in this dictionary. The returned set is in the order the entries were added to the      * dictionary.      *      * @since Apache PDFBox 1.1.0      * @return name-value entries in this dictionary      */
specifier|public
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|COSName
argument_list|,
name|COSBase
argument_list|>
argument_list|>
name|entrySet
parameter_list|()
block|{
return|return
name|items
operator|.
name|entrySet
argument_list|()
return|;
block|}
comment|/**      * This will get all of the values for the dictionary.      *      * @return All the values for the dictionary.      */
specifier|public
name|Collection
argument_list|<
name|COSBase
argument_list|>
name|getValues
parameter_list|()
block|{
return|return
name|items
operator|.
name|values
argument_list|()
return|;
block|}
comment|/**      * visitor pattern double dispatch method.      *      * @param visitor The object to notify when visiting this object.      * @return The object that the visitor returns.      *      * @throws IOException If there is an error visiting this object.      */
annotation|@
name|Override
specifier|public
name|Object
name|accept
parameter_list|(
name|ICOSVisitor
name|visitor
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|visitor
operator|.
name|visitFromDictionary
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isNeedToBeUpdated
parameter_list|()
block|{
return|return
name|needToBeUpdated
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setNeedToBeUpdated
parameter_list|(
name|boolean
name|flag
parameter_list|)
block|{
name|needToBeUpdated
operator|=
name|flag
expr_stmt|;
block|}
comment|/**      * This will add all of the dictionarys keys/values to this dictionary. Only called when adding keys to a trailer      * that already exists.      *      * @param dic The dic to get the keys from.      */
specifier|public
name|void
name|addAll
parameter_list|(
name|COSDictionary
name|dic
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|COSName
argument_list|,
name|COSBase
argument_list|>
name|entry
range|:
name|dic
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|/*              * If we're at a second trailer, we have a linearized pdf file, meaning that the first Size entry represents              * all of the objects so we don't need to grab the second.              */
if|if
condition|(
operator|!
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Size"
argument_list|)
operator|||
operator|!
name|items
operator|.
name|containsKey
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"Size"
argument_list|)
argument_list|)
condition|)
block|{
name|setItem
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * @see java.util.Map#containsKey(Object)      *      * @param name The key to find in the map.      * @return true if the map contains this key.      */
specifier|public
name|boolean
name|containsKey
parameter_list|(
name|COSName
name|name
parameter_list|)
block|{
return|return
name|this
operator|.
name|items
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**      * @see java.util.Map#containsKey(Object)      *      * @param name The key to find in the map.      * @return true if the map contains this key.      */
specifier|public
name|boolean
name|containsKey
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|containsKey
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Nice method, gives you every object you want Arrays works properly too. Try "P/Annots/[k]/Rect" where k means the      * index of the Annotsarray.      *      * @param objPath the relative path to the object.      * @return the object      */
specifier|public
name|COSBase
name|getObjectFromPath
parameter_list|(
name|String
name|objPath
parameter_list|)
block|{
name|String
index|[]
name|path
init|=
name|objPath
operator|.
name|split
argument_list|(
name|PATH_SEPARATOR
argument_list|)
decl_stmt|;
name|COSBase
name|retval
init|=
name|this
decl_stmt|;
for|for
control|(
name|String
name|pathString
range|:
name|path
control|)
block|{
if|if
condition|(
name|retval
operator|instanceof
name|COSArray
condition|)
block|{
name|int
name|idx
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|pathString
operator|.
name|replaceAll
argument_list|(
literal|"\\["
argument_list|,
literal|""
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\\]"
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|retval
operator|=
operator|(
operator|(
name|COSArray
operator|)
name|retval
operator|)
operator|.
name|getObject
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|retval
operator|instanceof
name|COSDictionary
condition|)
block|{
name|retval
operator|=
operator|(
operator|(
name|COSDictionary
operator|)
name|retval
operator|)
operator|.
name|getDictionaryObject
argument_list|(
name|pathString
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|retval
return|;
block|}
comment|/**      * Returns an unmodifiable view of this dictionary.      *       * @return an unmodifiable view of this dictionary      */
specifier|public
name|COSDictionary
name|asUnmodifiableDictionary
parameter_list|()
block|{
return|return
operator|new
name|UnmodifiableCOSDictionary
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
try|try
block|{
return|return
name|getDictionaryString
argument_list|(
name|this
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|COSBase
argument_list|>
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|"COSDictionary{"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"}"
return|;
block|}
block|}
specifier|private
specifier|static
name|String
name|getDictionaryString
parameter_list|(
name|COSBase
name|base
parameter_list|,
name|List
argument_list|<
name|COSBase
argument_list|>
name|objs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|base
operator|==
literal|null
condition|)
block|{
return|return
literal|"null"
return|;
block|}
if|if
condition|(
name|objs
operator|.
name|contains
argument_list|(
name|base
argument_list|)
condition|)
block|{
comment|// avoid endless recursion
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|base
operator|.
name|hashCode
argument_list|()
argument_list|)
return|;
block|}
name|objs
operator|.
name|add
argument_list|(
name|base
argument_list|)
expr_stmt|;
if|if
condition|(
name|base
operator|instanceof
name|COSDictionary
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"COSDictionary{"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|COSName
argument_list|,
name|COSBase
argument_list|>
name|x
range|:
operator|(
operator|(
name|COSDictionary
operator|)
name|base
operator|)
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|x
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getDictionaryString
argument_list|(
name|x
operator|.
name|getValue
argument_list|()
argument_list|,
name|objs
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
if|if
condition|(
name|base
operator|instanceof
name|COSStream
condition|)
block|{
try|try
init|(
name|InputStream
name|stream
init|=
operator|(
operator|(
name|COSStream
operator|)
name|base
operator|)
operator|.
name|createRawInputStream
argument_list|()
init|)
block|{
name|byte
index|[]
name|b
init|=
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"COSStream{"
argument_list|)
operator|.
name|append
argument_list|(
name|Arrays
operator|.
name|hashCode
argument_list|(
name|b
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
if|if
condition|(
name|base
operator|instanceof
name|COSObject
condition|)
block|{
name|COSObject
name|obj
init|=
operator|(
name|COSObject
operator|)
name|base
decl_stmt|;
return|return
literal|"COSObject{"
operator|+
name|getDictionaryString
argument_list|(
name|obj
operator|.
name|getObject
argument_list|()
argument_list|,
name|objs
argument_list|)
operator|+
literal|"}"
return|;
block|}
return|return
name|base
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

