begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdfwriter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileDescriptor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilterOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|StringUtil
import|;
end_import

begin_comment
comment|/**  * simple output stream with some minor features for generating "pretty"  * pdf files.  *  * @author Michael Traut  * @version $Revision: 1.5 $  */
end_comment

begin_class
specifier|public
class|class
name|COSStandardOutputStream
extends|extends
name|FilterOutputStream
block|{
comment|/**      * To be used when 2 byte sequence is enforced.      */
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|CRLF
init|=
name|StringUtil
operator|.
name|getBytes
argument_list|(
literal|"\r\n"
argument_list|)
decl_stmt|;
comment|/**      * Line feed character.      */
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|LF
init|=
name|StringUtil
operator|.
name|getBytes
argument_list|(
literal|"\n"
argument_list|)
decl_stmt|;
comment|/**      * standard line separator.      */
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|EOL
init|=
name|StringUtil
operator|.
name|getBytes
argument_list|(
literal|"\n"
argument_list|)
decl_stmt|;
comment|// current byte pos in the output stream
specifier|private
name|long
name|pos
init|=
literal|0
decl_stmt|;
comment|// flag to prevent generating two newlines in sequence
specifier|private
name|boolean
name|onNewLine
init|=
literal|false
decl_stmt|;
specifier|private
name|FileChannel
name|fileChannel
init|=
literal|null
decl_stmt|;
specifier|private
name|FileDescriptor
name|fileDescriptor
init|=
literal|null
decl_stmt|;
specifier|private
name|long
name|mark
init|=
operator|-
literal|1
decl_stmt|;
comment|/**      * COSOutputStream constructor comment.      *      * @param out The underlying stream to write to.      */
specifier|public
name|COSStandardOutputStream
parameter_list|(
name|OutputStream
name|out
parameter_list|)
block|{
name|super
argument_list|(
name|out
argument_list|)
expr_stmt|;
if|if
condition|(
name|out
operator|instanceof
name|FileOutputStream
condition|)
block|{
try|try
block|{
name|fileChannel
operator|=
operator|(
operator|(
name|FileOutputStream
operator|)
name|out
operator|)
operator|.
name|getChannel
argument_list|()
expr_stmt|;
name|fileDescriptor
operator|=
operator|(
operator|(
name|FileOutputStream
operator|)
name|out
operator|)
operator|.
name|getFD
argument_list|()
expr_stmt|;
name|pos
operator|=
name|fileChannel
operator|.
name|position
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * This will get the current position in the stream.      *      * @return The current position in the stream.      */
specifier|public
name|long
name|getPos
parameter_list|()
block|{
return|return
name|pos
return|;
block|}
comment|/**      * This will get the current position in the stream.      *      * @return The current position in the stream.      * @throws IOException       */
specifier|public
name|void
name|setPos
parameter_list|(
name|long
name|pos
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fileChannel
operator|!=
literal|null
condition|)
block|{
name|checkPos
argument_list|()
expr_stmt|;
name|this
operator|.
name|pos
operator|=
name|pos
expr_stmt|;
name|fileChannel
operator|.
name|position
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This will tell if we are on a newline.      *      * @return true If we are on a newline.      */
specifier|public
name|boolean
name|isOnNewLine
parameter_list|()
block|{
return|return
name|onNewLine
return|;
block|}
comment|/**      * This will set a flag telling if we are on a newline.      *      * @param newOnNewLine The new value for the onNewLine attribute.      */
specifier|public
name|void
name|setOnNewLine
parameter_list|(
name|boolean
name|newOnNewLine
parameter_list|)
block|{
name|onNewLine
operator|=
name|newOnNewLine
expr_stmt|;
block|}
comment|/**      * This will write some byte to the stream.      *      * @param b The source byte array.      * @param off The offset into the array to start writing.      * @param len The number of bytes to write.      *      * @throws IOException If the underlying stream throws an exception.      */
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|checkPos
argument_list|()
expr_stmt|;
name|setOnNewLine
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|len
expr_stmt|;
block|}
comment|/**      * This will write a single byte to the stream.      *      * @param b The byte to write to the stream.      *      * @throws IOException If there is an error writing to the underlying stream.      */
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|checkPos
argument_list|()
expr_stmt|;
name|setOnNewLine
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|pos
operator|++
expr_stmt|;
block|}
comment|/**      * This will write a CRLF to the stream.      *      * @throws IOException If there is an error writing the data to the stream.      */
specifier|public
name|void
name|writeCRLF
parameter_list|()
throws|throws
name|IOException
block|{
name|write
argument_list|(
name|CRLF
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will write an EOL to the stream.      *      * @throws IOException If there is an error writing to the stream      */
specifier|public
name|void
name|writeEOL
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|isOnNewLine
argument_list|()
condition|)
block|{
name|write
argument_list|(
name|EOL
argument_list|)
expr_stmt|;
name|setOnNewLine
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This will write a Linefeed to the stream.      *      * @throws IOException If there is an error writing to the underlying stream.      */
specifier|public
name|void
name|writeLF
parameter_list|()
throws|throws
name|IOException
block|{
name|write
argument_list|(
name|LF
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|mark
parameter_list|()
throws|throws
name|IOException
block|{
name|checkPos
argument_list|()
expr_stmt|;
name|mark
operator|=
name|getPos
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|mark
operator|<
literal|0
condition|)
return|return;
name|setPos
argument_list|(
name|mark
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkPos
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|fileChannel
operator|.
name|position
argument_list|()
operator|!=
name|getPos
argument_list|()
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"OutputStream has an invalid position"
argument_list|)
throw|;
block|}
specifier|public
name|byte
index|[]
name|getFileInBytes
parameter_list|(
name|int
index|[]
name|byteRange
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|InputStream
name|getFilterInputStream
parameter_list|(
name|int
index|[]
name|byteRange
parameter_list|)
block|{
return|return
operator|new
name|COSFilterInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|fileDescriptor
argument_list|)
argument_list|,
name|byteRange
argument_list|)
return|;
block|}
block|}
end_class

end_unit

