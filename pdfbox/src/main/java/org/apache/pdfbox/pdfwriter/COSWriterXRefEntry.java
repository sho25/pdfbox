begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdfwriter
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSObjectKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_comment
comment|/**  * this is en entry in the xref section of the physical pdf document  * generated by the COSWriter.  *  * @author Michael Traut  */
end_comment

begin_class
specifier|public
class|class
name|COSWriterXRefEntry
implements|implements
name|Comparable
argument_list|<
name|COSWriterXRefEntry
argument_list|>
block|{
specifier|private
name|long
name|offset
decl_stmt|;
specifier|private
name|COSBase
name|object
decl_stmt|;
specifier|private
name|COSObjectKey
name|key
decl_stmt|;
specifier|private
name|boolean
name|free
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|COSWriterXRefEntry
name|NULLENTRY
decl_stmt|;
static|static
block|{
name|NULLENTRY
operator|=
operator|new
name|COSWriterXRefEntry
argument_list|(
literal|0
argument_list|,
literal|null
argument_list|,
operator|new
name|COSObjectKey
argument_list|(
literal|0
argument_list|,
literal|65535
argument_list|)
argument_list|)
expr_stmt|;
name|NULLENTRY
operator|.
name|setFree
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|COSWriterXRefEntry
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|getKey
argument_list|()
operator|.
name|getNumber
argument_list|()
operator|<
name|obj
operator|.
name|getKey
argument_list|()
operator|.
name|getNumber
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|getKey
argument_list|()
operator|.
name|getNumber
argument_list|()
operator|>
name|obj
operator|.
name|getKey
argument_list|()
operator|.
name|getNumber
argument_list|()
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**      * This will return a null entry: 0000000000 65535 f.      *       * @return null COSWriterXRefEntry      */
specifier|public
specifier|static
name|COSWriterXRefEntry
name|getNullEntry
parameter_list|()
block|{
return|return
name|NULLENTRY
return|;
block|}
comment|/**      * This will get the Object key.      *      * @return The object key.      */
specifier|public
name|COSObjectKey
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
comment|/**      * This will get the offset into the document.      *      * @return The offset into the document.      */
specifier|public
name|long
name|getOffset
parameter_list|()
block|{
return|return
name|offset
return|;
block|}
comment|/**      * Gets the xref 'free' attribute.      *      * @return The free attribute.      */
specifier|public
name|boolean
name|isFree
parameter_list|()
block|{
return|return
name|free
return|;
block|}
comment|/**      * This will set the free attribute.      *      * @param newFree The newly freed attribute.      */
specifier|public
name|void
name|setFree
parameter_list|(
name|boolean
name|newFree
parameter_list|)
block|{
name|free
operator|=
name|newFree
expr_stmt|;
block|}
comment|/**      * This will set the object key.      *      * @param newKey The new object key.      */
specifier|private
name|void
name|setKey
parameter_list|(
name|COSObjectKey
name|newKey
parameter_list|)
block|{
name|key
operator|=
name|newKey
expr_stmt|;
block|}
comment|/**      * The offset attribute.      *      * @param newOffset The new value for the offset.      */
specifier|public
specifier|final
name|void
name|setOffset
parameter_list|(
name|long
name|newOffset
parameter_list|)
block|{
name|offset
operator|=
name|newOffset
expr_stmt|;
block|}
comment|/**      * COSWriterXRefEntry constructor comment.      *      * @param start The start attribute.      * @param obj The COS object that this entry represents.      * @param keyValue The key to the COS object.      */
specifier|public
name|COSWriterXRefEntry
parameter_list|(
name|long
name|start
parameter_list|,
name|COSBase
name|obj
parameter_list|,
name|COSObjectKey
name|keyValue
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|setOffset
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|setObject
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|setKey
argument_list|(
name|keyValue
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the object.      *      * @return The object.      */
specifier|public
name|COSBase
name|getObject
parameter_list|()
block|{
return|return
name|object
return|;
block|}
comment|/**      * This will set the object for this xref.      *      * @param newObject The object that is being set.      */
specifier|private
name|void
name|setObject
parameter_list|(
name|COSBase
name|newObject
parameter_list|)
block|{
name|object
operator|=
name|newObject
expr_stmt|;
block|}
block|}
end_class

end_unit

