begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2017 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|rendering
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|AffineTransform
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|WeakReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|WeakHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDColor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDColorSpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|pattern
operator|.
name|PDTilingPattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|Matrix
import|;
end_import

begin_comment
comment|/**  * Factory class to cache TilingPaint generation.  *  * @author Tilman Hausherr  */
end_comment

begin_class
class|class
name|TilingPaintFactory
block|{
specifier|private
specifier|final
name|PageDrawer
name|drawer
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|TilingPaintParameter
argument_list|,
name|WeakReference
argument_list|<
name|TilingPaint
argument_list|>
argument_list|>
name|weakCache
init|=
operator|new
name|WeakHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|TilingPaintFactory
parameter_list|(
name|PageDrawer
name|drawer
parameter_list|)
block|{
name|this
operator|.
name|drawer
operator|=
name|drawer
expr_stmt|;
block|}
name|TilingPaint
name|create
parameter_list|(
name|PDTilingPattern
name|pattern
parameter_list|,
name|PDColorSpace
name|colorSpace
parameter_list|,
name|PDColor
name|color
parameter_list|,
name|AffineTransform
name|xform
parameter_list|)
throws|throws
name|IOException
block|{
name|TilingPaint
name|paint
init|=
literal|null
decl_stmt|;
name|TilingPaintParameter
name|tilingPaintParameter
init|=
operator|new
name|TilingPaintParameter
argument_list|(
name|drawer
operator|.
name|getInitialMatrix
argument_list|()
argument_list|,
name|pattern
operator|.
name|getCOSObject
argument_list|()
argument_list|,
name|colorSpace
argument_list|,
name|color
argument_list|,
name|xform
argument_list|)
decl_stmt|;
name|WeakReference
argument_list|<
name|TilingPaint
argument_list|>
name|weakRef
init|=
name|weakCache
operator|.
name|get
argument_list|(
name|tilingPaintParameter
argument_list|)
decl_stmt|;
if|if
condition|(
name|weakRef
operator|!=
literal|null
condition|)
block|{
comment|// PDFBOX-4058: additional WeakReference makes gc work better
name|paint
operator|=
name|weakRef
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|paint
operator|==
literal|null
condition|)
block|{
name|paint
operator|=
operator|new
name|TilingPaint
argument_list|(
name|drawer
argument_list|,
name|pattern
argument_list|,
name|colorSpace
argument_list|,
name|color
argument_list|,
name|xform
argument_list|)
expr_stmt|;
name|weakCache
operator|.
name|put
argument_list|(
name|tilingPaintParameter
argument_list|,
operator|new
name|WeakReference
argument_list|(
name|paint
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|paint
return|;
block|}
comment|// class to characterize a TilingPaint object. It is important that TilingPaint does not
comment|// keep any objects from this class, so that the weak cache works.
specifier|private
specifier|static
class|class
name|TilingPaintParameter
block|{
specifier|private
specifier|final
name|Matrix
name|matrix
decl_stmt|;
specifier|private
specifier|final
name|COSDictionary
name|patternDict
decl_stmt|;
specifier|private
specifier|final
name|PDColorSpace
name|colorSpace
decl_stmt|;
specifier|private
specifier|final
name|PDColor
name|color
decl_stmt|;
specifier|private
specifier|final
name|AffineTransform
name|xform
decl_stmt|;
specifier|private
name|TilingPaintParameter
parameter_list|(
name|Matrix
name|matrix
parameter_list|,
name|COSDictionary
name|patternDict
parameter_list|,
name|PDColorSpace
name|colorSpace
parameter_list|,
name|PDColor
name|color
parameter_list|,
name|AffineTransform
name|xform
parameter_list|)
block|{
name|this
operator|.
name|matrix
operator|=
name|matrix
operator|.
name|clone
argument_list|()
expr_stmt|;
name|this
operator|.
name|patternDict
operator|=
name|patternDict
expr_stmt|;
name|this
operator|.
name|colorSpace
operator|=
name|colorSpace
expr_stmt|;
name|this
operator|.
name|color
operator|=
name|color
expr_stmt|;
name|this
operator|.
name|xform
operator|=
name|xform
expr_stmt|;
block|}
comment|// this may not catch all equals, but at least those related to one resource dictionary.
comment|// it isn't needed to investigate further because matrix or transform would be different anyway.
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|TilingPaintParameter
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|TilingPaintParameter
name|other
init|=
operator|(
name|TilingPaintParameter
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|matrix
operator|!=
name|other
operator|.
name|matrix
operator|&&
operator|(
name|this
operator|.
name|matrix
operator|==
literal|null
operator|||
operator|!
name|this
operator|.
name|matrix
operator|.
name|equals
argument_list|(
name|other
operator|.
name|matrix
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|this
operator|.
name|patternDict
operator|!=
name|other
operator|.
name|patternDict
operator|&&
operator|(
name|this
operator|.
name|patternDict
operator|==
literal|null
operator|||
operator|!
name|this
operator|.
name|patternDict
operator|.
name|equals
argument_list|(
name|other
operator|.
name|patternDict
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|this
operator|.
name|colorSpace
operator|!=
name|other
operator|.
name|colorSpace
operator|&&
operator|(
name|this
operator|.
name|colorSpace
operator|==
literal|null
operator|||
operator|!
name|this
operator|.
name|colorSpace
operator|.
name|equals
argument_list|(
name|other
operator|.
name|colorSpace
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|this
operator|.
name|color
operator|==
literal|null
operator|&&
name|other
operator|.
name|color
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|this
operator|.
name|color
operator|!=
literal|null
operator|&&
name|other
operator|.
name|color
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|this
operator|.
name|color
operator|!=
literal|null
operator|&&
name|this
operator|.
name|color
operator|.
name|getColorSpace
argument_list|()
operator|!=
name|other
operator|.
name|color
operator|.
name|getColorSpace
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
if|if
condition|(
name|this
operator|.
name|color
operator|!=
name|other
operator|.
name|color
operator|&&
name|this
operator|.
name|color
operator|.
name|toRGB
argument_list|()
operator|!=
name|other
operator|.
name|color
operator|.
name|toRGB
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
return|return
operator|!
operator|(
name|this
operator|.
name|xform
operator|!=
name|other
operator|.
name|xform
operator|&&
operator|(
name|this
operator|.
name|xform
operator|==
literal|null
operator|||
operator|!
name|this
operator|.
name|xform
operator|.
name|equals
argument_list|(
name|other
operator|.
name|xform
argument_list|)
operator|)
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hash
init|=
literal|7
decl_stmt|;
name|hash
operator|=
literal|23
operator|*
name|hash
operator|+
operator|(
name|this
operator|.
name|matrix
operator|!=
literal|null
condition|?
name|this
operator|.
name|matrix
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|hash
operator|=
literal|23
operator|*
name|hash
operator|+
operator|(
name|this
operator|.
name|patternDict
operator|!=
literal|null
condition|?
name|this
operator|.
name|patternDict
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|hash
operator|=
literal|23
operator|*
name|hash
operator|+
operator|(
name|this
operator|.
name|colorSpace
operator|!=
literal|null
condition|?
name|this
operator|.
name|colorSpace
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|hash
operator|=
literal|23
operator|*
name|hash
operator|+
operator|(
name|this
operator|.
name|color
operator|!=
literal|null
condition|?
name|this
operator|.
name|color
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|hash
operator|=
literal|23
operator|*
name|hash
operator|+
operator|(
name|this
operator|.
name|xform
operator|!=
literal|null
condition|?
name|this
operator|.
name|xform
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|hash
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"TilingPaintParameter{"
operator|+
literal|"matrix="
operator|+
name|matrix
operator|+
literal|", pattern="
operator|+
name|patternDict
operator|+
literal|", colorSpace="
operator|+
name|colorSpace
operator|+
literal|", color="
operator|+
name|color
operator|+
literal|", xform="
operator|+
name|xform
operator|+
literal|'}'
return|;
block|}
block|}
block|}
end_class

end_unit

