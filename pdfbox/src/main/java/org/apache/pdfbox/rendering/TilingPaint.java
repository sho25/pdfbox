begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|rendering
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Graphics2D
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Paint
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|PaintContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Rectangle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|RenderingHints
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|TexturePaint
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Transparency
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|color
operator|.
name|ColorSpace
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|AffineTransform
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|Rectangle2D
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|BufferedImage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|ColorModel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|ComponentColorModel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|DataBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|WritableRaster
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|RoundingMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDRectangle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDColor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDColorSpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|pattern
operator|.
name|PDTilingPattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|Matrix
import|;
end_import

begin_comment
comment|/**  * AWT Paint for a tiling pattern, which consists of a small repeating graphical figure.  *  * @author John Hewson  */
end_comment

begin_class
class|class
name|TilingPaint
implements|implements
name|Paint
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TilingPaint
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|PDTilingPattern
name|pattern
decl_stmt|;
specifier|private
specifier|final
name|TexturePaint
name|paint
decl_stmt|;
specifier|private
specifier|final
name|PageDrawer
name|drawer
decl_stmt|;
specifier|private
specifier|final
name|Matrix
name|patternMatrix
decl_stmt|;
comment|/**      * Creates a new colored tiling Paint, i.e. one that has its own colors.      *      * @param drawer renderer to render the page      * @param pattern tiling pattern dictionary      * @param xform device scale transform      *      * @throws java.io.IOException if something goes wrong while drawing the pattern      */
name|TilingPaint
parameter_list|(
name|PageDrawer
name|drawer
parameter_list|,
name|PDTilingPattern
name|pattern
parameter_list|,
name|AffineTransform
name|xform
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|drawer
argument_list|,
name|pattern
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|xform
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new tiling Paint. The parameters color and colorSpace must be null for a colored      * tiling Paint (because it has its own colors), and non null for an uncolored tiling Paint.      *      * @param drawer renderer to render the page      * @param pattern tiling pattern dictionary      * @param colorSpace color space for this tiling      * @param color color for this tiling      * @param xform device scale transform      *      * @throws java.io.IOException if something goes wrong while drawing the pattern      */
name|TilingPaint
parameter_list|(
name|PageDrawer
name|drawer
parameter_list|,
name|PDTilingPattern
name|pattern
parameter_list|,
name|PDColorSpace
name|colorSpace
parameter_list|,
name|PDColor
name|color
parameter_list|,
name|AffineTransform
name|xform
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|drawer
operator|=
name|drawer
expr_stmt|;
name|this
operator|.
name|pattern
operator|=
name|pattern
expr_stmt|;
comment|// pattern space -> user space
name|patternMatrix
operator|=
name|Matrix
operator|.
name|concatenate
argument_list|(
name|drawer
operator|.
name|getInitialMatrix
argument_list|()
argument_list|,
name|pattern
operator|.
name|getMatrix
argument_list|()
argument_list|)
expr_stmt|;
name|Rectangle2D
name|anchorRect
init|=
name|getAnchorRect
argument_list|()
decl_stmt|;
name|this
operator|.
name|paint
operator|=
operator|new
name|TexturePaint
argument_list|(
name|getImage
argument_list|(
name|colorSpace
argument_list|,
name|color
argument_list|,
name|xform
argument_list|,
name|anchorRect
argument_list|)
argument_list|,
name|anchorRect
argument_list|)
expr_stmt|;
block|}
comment|/**      * Not called in TexturePaint subclasses, which is why we wrap TexturePaint.      */
annotation|@
name|Override
specifier|public
name|PaintContext
name|createContext
parameter_list|(
name|ColorModel
name|cm
parameter_list|,
name|Rectangle
name|deviceBounds
parameter_list|,
name|Rectangle2D
name|userBounds
parameter_list|,
name|AffineTransform
name|xform
parameter_list|,
name|RenderingHints
name|hints
parameter_list|)
block|{
name|AffineTransform
name|xformPattern
init|=
operator|(
name|AffineTransform
operator|)
name|xform
operator|.
name|clone
argument_list|()
decl_stmt|;
comment|// applies the pattern matrix with scaling removed
name|AffineTransform
name|patternNoScale
init|=
name|patternMatrix
operator|.
name|createAffineTransform
argument_list|()
decl_stmt|;
name|patternNoScale
operator|.
name|scale
argument_list|(
literal|1
operator|/
name|patternMatrix
operator|.
name|getScalingFactorX
argument_list|()
argument_list|,
literal|1
operator|/
name|patternMatrix
operator|.
name|getScalingFactorY
argument_list|()
argument_list|)
expr_stmt|;
name|xformPattern
operator|.
name|concatenate
argument_list|(
name|patternNoScale
argument_list|)
expr_stmt|;
return|return
name|paint
operator|.
name|createContext
argument_list|(
name|cm
argument_list|,
name|deviceBounds
argument_list|,
name|userBounds
argument_list|,
name|xformPattern
argument_list|,
name|hints
argument_list|)
return|;
block|}
comment|/**      * Returns the pattern image in parent stream coordinates.      */
specifier|private
name|BufferedImage
name|getImage
parameter_list|(
name|PDColorSpace
name|colorSpace
parameter_list|,
name|PDColor
name|color
parameter_list|,
name|AffineTransform
name|xform
parameter_list|,
name|Rectangle2D
name|anchorRect
parameter_list|)
throws|throws
name|IOException
block|{
name|ColorSpace
name|outputCS
init|=
name|ColorSpace
operator|.
name|getInstance
argument_list|(
name|ColorSpace
operator|.
name|CS_sRGB
argument_list|)
decl_stmt|;
name|ColorModel
name|cm
init|=
operator|new
name|ComponentColorModel
argument_list|(
name|outputCS
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|Transparency
operator|.
name|TRANSLUCENT
argument_list|,
name|DataBuffer
operator|.
name|TYPE_BYTE
argument_list|)
decl_stmt|;
name|float
name|width
init|=
operator|(
name|float
operator|)
name|Math
operator|.
name|abs
argument_list|(
name|anchorRect
operator|.
name|getWidth
argument_list|()
argument_list|)
decl_stmt|;
name|float
name|height
init|=
operator|(
name|float
operator|)
name|Math
operator|.
name|abs
argument_list|(
name|anchorRect
operator|.
name|getHeight
argument_list|()
argument_list|)
decl_stmt|;
comment|// device scale transform (i.e. DPI) (see PDFBOX-1466.pdf)
name|Matrix
name|xformMatrix
init|=
operator|new
name|Matrix
argument_list|(
name|xform
argument_list|)
decl_stmt|;
name|float
name|xScale
init|=
name|xformMatrix
operator|.
name|getScalingFactorX
argument_list|()
decl_stmt|;
name|float
name|yScale
init|=
name|xformMatrix
operator|.
name|getScalingFactorY
argument_list|()
decl_stmt|;
name|width
operator|*=
name|xScale
expr_stmt|;
name|height
operator|*=
name|yScale
expr_stmt|;
name|int
name|rasterWidth
init|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|ceiling
argument_list|(
name|width
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|rasterHeight
init|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|ceiling
argument_list|(
name|height
argument_list|)
argument_list|)
decl_stmt|;
comment|// create raster
name|WritableRaster
name|raster
init|=
name|cm
operator|.
name|createCompatibleWritableRaster
argument_list|(
name|rasterWidth
argument_list|,
name|rasterHeight
argument_list|)
decl_stmt|;
name|BufferedImage
name|image
init|=
operator|new
name|BufferedImage
argument_list|(
name|cm
argument_list|,
name|raster
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Graphics2D
name|graphics
init|=
name|image
operator|.
name|createGraphics
argument_list|()
decl_stmt|;
comment|// flip a -ve YStep around its own axis (see gs-bugzilla694385.pdf)
if|if
condition|(
name|pattern
operator|.
name|getYStep
argument_list|()
operator|<
literal|0
condition|)
block|{
name|graphics
operator|.
name|translate
argument_list|(
literal|0
argument_list|,
name|rasterHeight
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|scale
argument_list|(
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// flip a -ve XStep around its own axis
if|if
condition|(
name|pattern
operator|.
name|getXStep
argument_list|()
operator|<
literal|0
condition|)
block|{
name|graphics
operator|.
name|translate
argument_list|(
name|rasterWidth
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|scale
argument_list|(
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// device scale transform (i.e. DPI)
name|graphics
operator|.
name|scale
argument_list|(
name|xScale
argument_list|,
name|yScale
argument_list|)
expr_stmt|;
comment|// apply only the scaling from the pattern transform, doing scaling here improves the
comment|// image quality and prevents large scale-down factors from creating huge tiling cells.
name|Matrix
name|newPatternMatrix
decl_stmt|;
name|newPatternMatrix
operator|=
name|Matrix
operator|.
name|getScaleInstance
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|patternMatrix
operator|.
name|getScalingFactorX
argument_list|()
argument_list|)
argument_list|,
name|Math
operator|.
name|abs
argument_list|(
name|patternMatrix
operator|.
name|getScalingFactorY
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// move origin to (0,0)
name|newPatternMatrix
operator|.
name|concatenate
argument_list|(
name|Matrix
operator|.
name|getTranslateInstance
argument_list|(
operator|-
name|pattern
operator|.
name|getBBox
argument_list|()
operator|.
name|getLowerLeftX
argument_list|()
argument_list|,
operator|-
name|pattern
operator|.
name|getBBox
argument_list|()
operator|.
name|getLowerLeftY
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// render using PageDrawer
name|drawer
operator|.
name|drawTilingPattern
argument_list|(
name|graphics
argument_list|,
name|pattern
argument_list|,
name|colorSpace
argument_list|,
name|color
argument_list|,
name|newPatternMatrix
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|dispose
argument_list|()
expr_stmt|;
return|return
name|image
return|;
block|}
comment|/**      * Returns the closest integer which is larger than the given number.      * Uses BigDecimal to avoid floating point error which would cause gaps in the tiling.      */
specifier|private
specifier|static
name|int
name|ceiling
parameter_list|(
name|double
name|num
parameter_list|)
block|{
name|BigDecimal
name|decimal
init|=
operator|new
name|BigDecimal
argument_list|(
name|num
argument_list|)
decl_stmt|;
name|decimal
operator|=
name|decimal
operator|.
name|setScale
argument_list|(
literal|5
argument_list|,
name|RoundingMode
operator|.
name|CEILING
argument_list|)
expr_stmt|;
comment|// 5 decimal places of accuracy
return|return
name|decimal
operator|.
name|intValue
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getTransparency
parameter_list|()
block|{
return|return
name|Transparency
operator|.
name|TRANSLUCENT
return|;
block|}
comment|/**      * Returns the anchor rectangle, which includes the XStep/YStep and scaling.      */
specifier|private
name|Rectangle2D
name|getAnchorRect
parameter_list|()
block|{
name|float
name|xStep
init|=
name|pattern
operator|.
name|getXStep
argument_list|()
decl_stmt|;
if|if
condition|(
name|xStep
operator|==
literal|0
condition|)
block|{
name|xStep
operator|=
name|pattern
operator|.
name|getBBox
argument_list|()
operator|.
name|getWidth
argument_list|()
expr_stmt|;
block|}
name|float
name|yStep
init|=
name|pattern
operator|.
name|getYStep
argument_list|()
decl_stmt|;
if|if
condition|(
name|yStep
operator|==
literal|0
condition|)
block|{
name|yStep
operator|=
name|pattern
operator|.
name|getBBox
argument_list|()
operator|.
name|getHeight
argument_list|()
expr_stmt|;
block|}
name|float
name|xScale
init|=
name|patternMatrix
operator|.
name|getScalingFactorX
argument_list|()
decl_stmt|;
name|float
name|yScale
init|=
name|patternMatrix
operator|.
name|getScalingFactorY
argument_list|()
decl_stmt|;
name|float
name|width
init|=
name|xStep
operator|*
name|xScale
decl_stmt|;
name|float
name|height
init|=
name|yStep
operator|*
name|yScale
decl_stmt|;
specifier|final
name|int
name|MAX
init|=
literal|5000
decl_stmt|;
if|if
condition|(
name|Math
operator|.
name|abs
argument_list|(
name|width
operator|*
name|height
argument_list|)
operator|>
name|MAX
operator|*
name|MAX
condition|)
block|{
comment|// PDFBOX-3653: prevent huge sizes
name|LOG
operator|.
name|info
argument_list|(
literal|"Pattern surface is too large, will be clipped"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"width: "
operator|+
name|width
operator|+
literal|", height: "
operator|+
name|height
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"XStep: "
operator|+
name|xStep
operator|+
literal|", YStep: "
operator|+
name|yStep
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"bbox: "
operator|+
name|pattern
operator|.
name|getBBox
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"pattern matrix: "
operator|+
name|pattern
operator|.
name|getMatrix
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"concatenated matrix: "
operator|+
name|patternMatrix
argument_list|)
expr_stmt|;
name|width
operator|=
name|Math
operator|.
name|min
argument_list|(
name|MAX
argument_list|,
name|Math
operator|.
name|abs
argument_list|(
name|width
argument_list|)
argument_list|)
operator|*
name|Math
operator|.
name|signum
argument_list|(
name|width
argument_list|)
expr_stmt|;
name|height
operator|=
name|Math
operator|.
name|min
argument_list|(
name|MAX
argument_list|,
name|Math
operator|.
name|abs
argument_list|(
name|height
argument_list|)
argument_list|)
operator|*
name|Math
operator|.
name|signum
argument_list|(
name|height
argument_list|)
expr_stmt|;
comment|//TODO better solution needed
block|}
comment|// returns the anchor rect with scaling applied
name|PDRectangle
name|anchor
init|=
name|pattern
operator|.
name|getBBox
argument_list|()
decl_stmt|;
return|return
operator|new
name|Rectangle2D
operator|.
name|Float
argument_list|(
name|anchor
operator|.
name|getLowerLeftX
argument_list|()
operator|*
name|xScale
argument_list|,
name|anchor
operator|.
name|getLowerLeftY
argument_list|()
operator|*
name|yScale
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
return|;
block|}
block|}
end_class

end_unit

