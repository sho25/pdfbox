begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|rendering
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|BasicStroke
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Font
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Graphics
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Graphics2D
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Image
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Paint
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|RenderingHints
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|font
operator|.
name|FontRenderContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|font
operator|.
name|GlyphVector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|AffineTransform
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|Area
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|GeneralPath
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|NoninvertibleTransformException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|Point2D
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cff
operator|.
name|CFFFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|ttf
operator|.
name|TrueTypeFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|type1
operator|.
name|Type1Font
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdfviewer
operator|.
name|font
operator|.
name|Glyph2D
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdfviewer
operator|.
name|font
operator|.
name|TTFGlyph2D
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdfviewer
operator|.
name|font
operator|.
name|Type1Glyph2D
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDMatrix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDRectangle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|FontManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDCIDFontType0Font
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDCIDFontType2Font
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDFontDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDFontDescriptorDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDSimpleFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDTrueTypeFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDType0Font
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDType1CFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDType1Font
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDType3Font
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|state
operator|.
name|PDGraphicsState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|PDLineDashPattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDColor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDColorSpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|pattern
operator|.
name|PDTilingPattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|shading
operator|.
name|AxialShadingPaint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|shading
operator|.
name|PDShading
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|shading
operator|.
name|PDShadingType2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|shading
operator|.
name|PDShadingType3
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|shading
operator|.
name|RadialShadingPaint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAppearanceDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAppearanceStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|state
operator|.
name|PDTextState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|Matrix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|PDFStreamEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|ResourceLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|TextPosition
import|;
end_import

begin_comment
comment|/**  * This will paint a page in a PDF document to a graphics context.  *   * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  *   */
end_comment

begin_class
specifier|public
class|class
name|PageDrawer
extends|extends
name|PDFStreamEngine
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|PageDrawer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Color
name|COLOR_TRANSPARENT
init|=
operator|new
name|Color
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// parent document renderer
specifier|private
specifier|final
name|PDFRenderer
name|renderer
decl_stmt|;
specifier|private
name|Graphics2D
name|graphics
decl_stmt|;
comment|// clipping winding rule used for the clipping path.
specifier|private
name|int
name|clippingWindingRule
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|GeneralPath
name|linePath
init|=
operator|new
name|GeneralPath
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|PDFont
argument_list|,
name|Glyph2D
argument_list|>
name|fontGlyph2D
init|=
operator|new
name|HashMap
argument_list|<
name|PDFont
argument_list|,
name|Glyph2D
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|PDFont
argument_list|,
name|Font
argument_list|>
name|awtFonts
init|=
operator|new
name|HashMap
argument_list|<
name|PDFont
argument_list|,
name|Font
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|int
name|pageHeight
decl_stmt|;
comment|/**      * Default constructor, loads properties from file.      *       * @throws IOException If there is an error loading properties from the file.      */
specifier|public
name|PageDrawer
parameter_list|(
name|PDFRenderer
name|renderer
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|ResourceLoader
operator|.
name|loadProperties
argument_list|(
literal|"org/apache/pdfbox/resources/PageDrawer.properties"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|renderer
operator|=
name|renderer
expr_stmt|;
block|}
comment|/**      * Returns the parent renderer.      * @return the parent renderer.      */
specifier|public
name|PDFRenderer
name|getRenderer
parameter_list|()
block|{
return|return
name|renderer
return|;
block|}
comment|/**      * This will draw the page to the requested context.      *       * @param g The graphics context to draw onto.      * @param page The page to draw.      * @param pageSize The size of the page to draw.      *       * @throws IOException If there is an IO error while drawing the page.      */
specifier|public
name|void
name|drawPage
parameter_list|(
name|Graphics
name|g
parameter_list|,
name|PDPage
name|page
parameter_list|,
name|PDRectangle
name|pageSize
parameter_list|)
throws|throws
name|IOException
block|{
name|graphics
operator|=
operator|(
name|Graphics2D
operator|)
name|g
expr_stmt|;
name|pageHeight
operator|=
operator|(
name|int
operator|)
name|pageSize
operator|.
name|getHeight
argument_list|()
expr_stmt|;
name|graphics
operator|.
name|setRenderingHint
argument_list|(
name|RenderingHints
operator|.
name|KEY_ANTIALIASING
argument_list|,
name|RenderingHints
operator|.
name|VALUE_ANTIALIAS_ON
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|setRenderingHint
argument_list|(
name|RenderingHints
operator|.
name|KEY_FRACTIONALMETRICS
argument_list|,
name|RenderingHints
operator|.
name|VALUE_FRACTIONALMETRICS_ON
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|translate
argument_list|(
literal|0
argument_list|,
name|pageHeight
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|scale
argument_list|(
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// TODO use getStroke() to set the initial stroke
name|graphics
operator|.
name|setStroke
argument_list|(
operator|new
name|BasicStroke
argument_list|(
literal|1.0f
argument_list|,
name|BasicStroke
operator|.
name|CAP_BUTT
argument_list|,
name|BasicStroke
operator|.
name|JOIN_MITER
argument_list|)
argument_list|)
expr_stmt|;
comment|// Only if there is some content, we have to process it.
comment|// Otherwise we are done here and we will produce an empty page
if|if
condition|(
name|page
operator|.
name|getContents
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|PDResources
name|resources
init|=
name|page
operator|.
name|findResources
argument_list|()
decl_stmt|;
name|processStream
argument_list|(
name|resources
argument_list|,
name|page
operator|.
name|getContents
argument_list|()
operator|.
name|getStream
argument_list|()
argument_list|,
name|page
operator|.
name|findCropBox
argument_list|()
argument_list|,
name|page
operator|.
name|findRotation
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|PDAnnotation
argument_list|>
name|annotations
init|=
name|page
operator|.
name|getAnnotations
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|annotations
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|PDAnnotation
name|annot
init|=
operator|(
name|PDAnnotation
operator|)
name|annotations
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|PDRectangle
name|rect
init|=
name|annot
operator|.
name|getRectangle
argument_list|()
decl_stmt|;
name|String
name|appearanceName
init|=
name|annot
operator|.
name|getAppearanceStream
argument_list|()
decl_stmt|;
name|PDAppearanceDictionary
name|appearDictionary
init|=
name|annot
operator|.
name|getAppearance
argument_list|()
decl_stmt|;
if|if
condition|(
name|appearDictionary
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|appearanceName
operator|==
literal|null
condition|)
block|{
name|appearanceName
operator|=
literal|"default"
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|PDAppearanceStream
argument_list|>
name|appearanceMap
init|=
name|appearDictionary
operator|.
name|getNormalAppearance
argument_list|()
decl_stmt|;
if|if
condition|(
name|appearanceMap
operator|!=
literal|null
condition|)
block|{
name|PDAppearanceStream
name|appearance
init|=
operator|(
name|PDAppearanceStream
operator|)
name|appearanceMap
operator|.
name|get
argument_list|(
name|appearanceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|appearance
operator|!=
literal|null
condition|)
block|{
name|Point2D
name|point
init|=
operator|new
name|Point2D
operator|.
name|Float
argument_list|(
name|rect
operator|.
name|getLowerLeftX
argument_list|()
argument_list|,
name|rect
operator|.
name|getLowerLeftY
argument_list|()
argument_list|)
decl_stmt|;
name|Matrix
name|matrix
init|=
name|appearance
operator|.
name|getMatrix
argument_list|()
decl_stmt|;
if|if
condition|(
name|matrix
operator|!=
literal|null
condition|)
block|{
comment|// transform the rectangle using the given matrix
name|AffineTransform
name|at
init|=
name|matrix
operator|.
name|createAffineTransform
argument_list|()
decl_stmt|;
name|at
operator|.
name|scale
argument_list|(
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|at
operator|.
name|transform
argument_list|(
name|point
argument_list|,
name|point
argument_list|)
expr_stmt|;
block|}
name|graphics
operator|.
name|translate
argument_list|(
operator|(
name|int
operator|)
name|point
operator|.
name|getX
argument_list|()
argument_list|,
operator|-
operator|(
name|int
operator|)
name|point
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
name|processSubStream
argument_list|(
name|appearance
operator|.
name|getResources
argument_list|()
argument_list|,
name|appearance
operator|.
name|getStream
argument_list|()
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|translate
argument_list|(
operator|-
operator|(
name|int
operator|)
name|point
operator|.
name|getX
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|point
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|graphics
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * This will draw the pattern stream to the requested context.      *      * @param g The graphics context to draw onto.      * @param pattern The tiling pattern to be used.      * @param pageDimension The size of the page to draw.      * @throws IOException If there is an IO error while drawing the page.      */
specifier|public
name|void
name|drawTilingPattern
parameter_list|(
name|Graphics2D
name|g
parameter_list|,
name|PDTilingPattern
name|pattern
parameter_list|,
name|PDRectangle
name|pageDimension
parameter_list|,
name|Matrix
name|matrix
parameter_list|,
name|PDColorSpace
name|colorSpace
parameter_list|,
name|PDColor
name|color
parameter_list|)
throws|throws
name|IOException
block|{
name|graphics
operator|=
name|g
expr_stmt|;
name|graphics
operator|.
name|setRenderingHint
argument_list|(
name|RenderingHints
operator|.
name|KEY_ANTIALIASING
argument_list|,
name|RenderingHints
operator|.
name|VALUE_ANTIALIAS_ON
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|setRenderingHint
argument_list|(
name|RenderingHints
operator|.
name|KEY_FRACTIONALMETRICS
argument_list|,
name|RenderingHints
operator|.
name|VALUE_FRACTIONALMETRICS_ON
argument_list|)
expr_stmt|;
name|initStream
argument_list|(
name|pageDimension
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// transform ctm
name|Matrix
name|concat
init|=
name|matrix
operator|.
name|multiply
argument_list|(
name|getGraphicsState
argument_list|()
operator|.
name|getCurrentTransformationMatrix
argument_list|()
argument_list|)
decl_stmt|;
name|getGraphicsState
argument_list|()
operator|.
name|setCurrentTransformationMatrix
argument_list|(
name|concat
argument_list|)
expr_stmt|;
comment|// color
if|if
condition|(
name|colorSpace
operator|!=
literal|null
condition|)
block|{
name|getGraphicsState
argument_list|()
operator|.
name|setNonStrokingColorSpace
argument_list|(
name|colorSpace
argument_list|)
expr_stmt|;
name|getGraphicsState
argument_list|()
operator|.
name|setNonStrokingColor
argument_list|(
name|color
argument_list|)
expr_stmt|;
name|getGraphicsState
argument_list|()
operator|.
name|setStrokingColorSpace
argument_list|(
name|colorSpace
argument_list|)
expr_stmt|;
name|getGraphicsState
argument_list|()
operator|.
name|setStrokingColor
argument_list|(
name|color
argument_list|)
expr_stmt|;
block|}
name|processSubStream
argument_list|(
name|pattern
operator|.
name|getResources
argument_list|()
argument_list|,
operator|(
name|COSStream
operator|)
name|pattern
operator|.
name|getCOSObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Remove all cached resources.      */
specifier|public
name|void
name|dispose
parameter_list|()
block|{
name|super
operator|.
name|dispose
argument_list|()
expr_stmt|;
if|if
condition|(
name|fontGlyph2D
operator|!=
literal|null
condition|)
block|{
name|Iterator
argument_list|<
name|Glyph2D
argument_list|>
name|iter
init|=
name|fontGlyph2D
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|iter
operator|.
name|next
argument_list|()
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
name|fontGlyph2D
operator|.
name|clear
argument_list|()
expr_stmt|;
name|fontGlyph2D
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|awtFonts
operator|!=
literal|null
condition|)
block|{
name|awtFonts
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|graphics
operator|=
literal|null
expr_stmt|;
name|linePath
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * You should override this method if you want to perform an action when a text is being processed.      *       * @param text The text to process      */
specifier|protected
name|void
name|processTextPosition
parameter_list|(
name|TextPosition
name|text
parameter_list|)
block|{
try|try
block|{
name|PDGraphicsState
name|graphicsState
init|=
name|getGraphicsState
argument_list|()
decl_stmt|;
name|Composite
name|composite
decl_stmt|;
name|Paint
name|paint
decl_stmt|;
switch|switch
condition|(
name|graphicsState
operator|.
name|getTextState
argument_list|()
operator|.
name|getRenderingMode
argument_list|()
condition|)
block|{
case|case
name|PDTextState
operator|.
name|RENDERING_MODE_FILL_TEXT
case|:
name|composite
operator|=
name|graphicsState
operator|.
name|getNonStrokeJavaComposite
argument_list|()
expr_stmt|;
name|paint
operator|=
name|getNonStrokingPaint
argument_list|()
expr_stmt|;
break|break;
case|case
name|PDTextState
operator|.
name|RENDERING_MODE_STROKE_TEXT
case|:
name|composite
operator|=
name|graphicsState
operator|.
name|getStrokeJavaComposite
argument_list|()
expr_stmt|;
name|paint
operator|=
name|getStrokingPaint
argument_list|()
expr_stmt|;
break|break;
case|case
name|PDTextState
operator|.
name|RENDERING_MODE_NEITHER_FILL_NOR_STROKE_TEXT
case|:
comment|// basic support for text rendering mode "invisible"
comment|// TODO why are we drawing anything at all?
name|paint
operator|=
name|COLOR_TRANSPARENT
expr_stmt|;
name|composite
operator|=
name|graphicsState
operator|.
name|getStrokeJavaComposite
argument_list|()
expr_stmt|;
break|break;
default|default:
comment|// TODO : need to implement....
name|LOG
operator|.
name|debug
argument_list|(
literal|"Unsupported RenderingMode "
operator|+
name|this
operator|.
name|getGraphicsState
argument_list|()
operator|.
name|getTextState
argument_list|()
operator|.
name|getRenderingMode
argument_list|()
operator|+
literal|" in PageDrawer.processTextPosition()."
operator|+
literal|" Using RenderingMode "
operator|+
name|PDTextState
operator|.
name|RENDERING_MODE_FILL_TEXT
operator|+
literal|" instead"
argument_list|)
expr_stmt|;
name|composite
operator|=
name|graphicsState
operator|.
name|getNonStrokeJavaComposite
argument_list|()
expr_stmt|;
name|paint
operator|=
name|getNonStrokingPaint
argument_list|()
expr_stmt|;
block|}
name|graphics
operator|.
name|setComposite
argument_list|(
name|composite
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|setPaint
argument_list|(
name|paint
argument_list|)
expr_stmt|;
name|PDFont
name|font
init|=
name|text
operator|.
name|getFont
argument_list|()
decl_stmt|;
name|AffineTransform
name|at
init|=
name|text
operator|.
name|getTextPos
argument_list|()
operator|.
name|createAffineTransform
argument_list|()
decl_stmt|;
name|PDMatrix
name|fontMatrix
init|=
name|font
operator|.
name|getFontMatrix
argument_list|()
decl_stmt|;
comment|// TODO setClip() is a massive performance hot spot. Investigate optimization possibilities
name|graphics
operator|.
name|setClip
argument_list|(
name|graphicsState
operator|.
name|getCurrentClippingPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// use different methods to draw the string
if|if
condition|(
name|font
operator|.
name|isType3Font
argument_list|()
condition|)
block|{
comment|// Type3 fonts don't use the same units within the font matrix as all the other fonts
name|at
operator|.
name|scale
argument_list|(
name|fontMatrix
operator|.
name|getValue
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|fontMatrix
operator|.
name|getValue
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Type3 fonts are using streams for each character
name|drawType3String
argument_list|(
operator|(
name|PDType3Font
operator|)
name|font
argument_list|,
name|text
argument_list|,
name|at
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Glyph2D
name|glyph2D
init|=
name|createGlyph2D
argument_list|(
name|font
argument_list|)
decl_stmt|;
if|if
condition|(
name|glyph2D
operator|!=
literal|null
condition|)
block|{
name|AffineTransform
name|fontMatrixAT
init|=
operator|new
name|AffineTransform
argument_list|(
name|fontMatrix
operator|.
name|getValue
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|fontMatrix
operator|.
name|getValue
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
name|fontMatrix
operator|.
name|getValue
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|,
name|fontMatrix
operator|.
name|getValue
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|fontMatrix
operator|.
name|getValue
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
argument_list|,
name|fontMatrix
operator|.
name|getValue
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|at
operator|.
name|concatenate
argument_list|(
name|fontMatrixAT
argument_list|)
expr_stmt|;
comment|// Let PDFBox render the font if supported
name|drawGlyph2D
argument_list|(
name|glyph2D
argument_list|,
name|text
operator|.
name|getCodePoints
argument_list|()
argument_list|,
name|at
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Use AWT to render the font (standard14 fonts, substituted embedded fonts)
comment|// TODO to be removed in the long run
name|drawString
argument_list|(
operator|(
name|PDSimpleFont
operator|)
name|font
argument_list|,
name|text
operator|.
name|getCharacter
argument_list|()
argument_list|,
name|at
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
name|io
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Render the font using the Glyph2d interface.      *       * @param glyph2D the Glyph2D implementation provided a GeneralPath for each glyph      * @param codePoints the string to be rendered      * @param at the transformation      * @throws IOException if something went wrong      */
specifier|private
name|void
name|drawGlyph2D
parameter_list|(
name|Glyph2D
name|glyph2D
parameter_list|,
name|int
index|[]
name|codePoints
parameter_list|,
name|AffineTransform
name|at
parameter_list|)
throws|throws
name|IOException
block|{
name|graphics
operator|.
name|setRenderingHint
argument_list|(
name|RenderingHints
operator|.
name|KEY_ANTIALIASING
argument_list|,
name|RenderingHints
operator|.
name|VALUE_ANTIALIAS_ON
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|codePoints
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|GeneralPath
name|path
init|=
name|glyph2D
operator|.
name|getPathForCharacterCode
argument_list|(
name|codePoints
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|AffineTransform
name|atInverse
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|at
operator|.
name|isIdentity
argument_list|()
condition|)
block|{
try|try
block|{
name|atInverse
operator|=
name|at
operator|.
name|createInverse
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoninvertibleTransformException
name|exception
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't invert the given affine transformation"
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|atInverse
operator|!=
literal|null
condition|)
block|{
name|graphics
operator|.
name|transform
argument_list|(
name|at
argument_list|)
expr_stmt|;
block|}
name|graphics
operator|.
name|fill
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|atInverse
operator|!=
literal|null
condition|)
block|{
name|graphics
operator|.
name|transform
argument_list|(
name|atInverse
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Render the text using a type 3 font.      *       * @param font the type3 font      * @param text the text to be rendered      * @param at the transformation      *       * @throws IOException if something went wrong      */
specifier|private
name|void
name|drawType3String
parameter_list|(
name|PDType3Font
name|font
parameter_list|,
name|TextPosition
name|text
parameter_list|,
name|AffineTransform
name|at
parameter_list|)
throws|throws
name|IOException
block|{
name|int
index|[]
name|codePoints
init|=
name|text
operator|.
name|getCodePoints
argument_list|()
decl_stmt|;
name|int
name|textLength
init|=
name|codePoints
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|textLength
condition|;
name|i
operator|++
control|)
block|{
name|COSStream
name|stream
init|=
name|font
operator|.
name|getCharStream
argument_list|(
operator|(
name|char
operator|)
name|codePoints
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|stream
operator|!=
literal|null
condition|)
block|{
comment|// save the current graphics state
name|getGraphicsStack
argument_list|()
operator|.
name|push
argument_list|(
operator|(
name|PDGraphicsState
operator|)
name|getGraphicsState
argument_list|()
operator|.
name|clone
argument_list|()
argument_list|)
expr_stmt|;
name|Matrix
name|ctm
init|=
operator|new
name|Matrix
argument_list|()
decl_stmt|;
name|ctm
operator|.
name|setFromAffineTransform
argument_list|(
name|at
argument_list|)
expr_stmt|;
name|getGraphicsState
argument_list|()
operator|.
name|setCurrentTransformationMatrix
argument_list|(
name|ctm
argument_list|)
expr_stmt|;
name|processSubStream
argument_list|(
name|font
operator|.
name|getType3Resources
argument_list|()
argument_list|,
name|stream
argument_list|)
expr_stmt|;
comment|// restore the saved graphics state
name|setGraphicsState
argument_list|(
name|getGraphicsStack
argument_list|()
operator|.
name|pop
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"drawType3String: stream for character "
operator|+
operator|(
name|char
operator|)
name|codePoints
index|[
name|i
index|]
operator|+
literal|" not found"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * This will draw a string on a canvas using the font.      *      * @param font the font to be used to draw the string      * @param string The string to draw.      * @param at The transformation matrix with all information for scaling and shearing of the font.      *      * @throws IOException If there is an error drawing the specific string.      */
specifier|private
name|void
name|drawString
parameter_list|(
name|PDSimpleFont
name|font
parameter_list|,
name|String
name|string
parameter_list|,
name|AffineTransform
name|at
parameter_list|)
throws|throws
name|IOException
block|{
name|Font
name|awtFont
init|=
name|createAWTFont
argument_list|(
name|font
argument_list|)
decl_stmt|;
name|FontRenderContext
name|frc
init|=
operator|new
name|FontRenderContext
argument_list|(
operator|new
name|AffineTransform
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|GlyphVector
name|glyphs
init|=
name|awtFont
operator|.
name|createGlyphVector
argument_list|(
name|frc
argument_list|,
name|string
argument_list|)
decl_stmt|;
name|graphics
operator|.
name|setRenderingHint
argument_list|(
name|RenderingHints
operator|.
name|KEY_ANTIALIASING
argument_list|,
name|RenderingHints
operator|.
name|VALUE_ANTIALIAS_ON
argument_list|)
expr_stmt|;
name|writeFont
argument_list|(
name|at
argument_list|,
name|glyphs
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeFont
parameter_list|(
specifier|final
name|AffineTransform
name|at
parameter_list|,
specifier|final
name|GlyphVector
name|glyphs
parameter_list|)
block|{
try|try
block|{
comment|// Convert from PDF, where glyphs are upright when direction is from
comment|// bottom to top, to AWT, where this is the other way around
name|at
operator|.
name|scale
argument_list|(
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|AffineTransform
name|atInverse
init|=
name|at
operator|.
name|createInverse
argument_list|()
decl_stmt|;
name|graphics
operator|.
name|transform
argument_list|(
name|at
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|drawGlyphVector
argument_list|(
name|glyphs
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|transform
argument_list|(
name|atInverse
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoninvertibleTransformException
name|exception
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't invert the given affine transformation"
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Provides an AWT font for the given PDFont.      *       * @param font the font which needs an AWT font      * @return the corresponding AWT font      * @throws IOException if something went wrong      */
specifier|private
name|Font
name|createAWTFont
parameter_list|(
name|PDSimpleFont
name|font
parameter_list|)
throws|throws
name|IOException
block|{
name|Font
name|awtFont
init|=
literal|null
decl_stmt|;
comment|// Is there already a AWTFont for the given font?
if|if
condition|(
name|awtFonts
operator|.
name|containsKey
argument_list|(
name|font
argument_list|)
condition|)
block|{
name|awtFont
operator|=
name|awtFonts
operator|.
name|get
argument_list|(
name|font
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|font
operator|instanceof
name|PDType1Font
condition|)
block|{
name|PDType1Font
name|type1Font
init|=
operator|(
name|PDType1Font
operator|)
name|font
decl_stmt|;
name|PDFontDescriptor
name|fd
init|=
name|type1Font
operator|.
name|getFontDescriptor
argument_list|()
decl_stmt|;
if|if
condition|(
name|fd
operator|instanceof
name|PDFontDescriptorDictionary
condition|)
block|{
name|PDFontDescriptorDictionary
name|fdDictionary
init|=
operator|(
name|PDFontDescriptorDictionary
operator|)
name|fd
decl_stmt|;
if|if
condition|(
name|fdDictionary
operator|.
name|getFontFile
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// check if the font is part of our environment
if|if
condition|(
name|fd
operator|.
name|getFontName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|awtFont
operator|=
name|FontManager
operator|.
name|getAwtFont
argument_list|(
name|fd
operator|.
name|getFontName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|awtFont
operator|!=
literal|null
condition|)
block|{
name|type1Font
operator|.
name|setIsFontSubstituted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Can't find the specified font "
operator|+
name|fd
operator|.
name|getFontName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// check if the font is part of our environment
name|String
name|baseFont
init|=
name|type1Font
operator|.
name|getBaseFont
argument_list|()
decl_stmt|;
name|awtFont
operator|=
name|FontManager
operator|.
name|getAwtFont
argument_list|(
name|baseFont
argument_list|)
expr_stmt|;
if|if
condition|(
name|awtFont
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Can't find the specified basefont "
operator|+
name|baseFont
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Unsupported type of font "
operator|+
name|font
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|awtFont
operator|==
literal|null
condition|)
block|{
comment|// Fallback: we can't find anything, so we have to use the standard font
name|awtFont
operator|=
name|FontManager
operator|.
name|getStandardFont
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Using font "
operator|+
name|awtFont
operator|.
name|getName
argument_list|()
operator|+
literal|" instead of "
operator|+
name|font
operator|.
name|getBaseFont
argument_list|()
argument_list|)
expr_stmt|;
name|font
operator|.
name|setIsFontSubstituted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|awtFonts
operator|.
name|put
argument_list|(
name|font
argument_list|,
name|awtFont
argument_list|)
expr_stmt|;
block|}
return|return
name|awtFont
return|;
block|}
comment|/**      * Provide a Glyph2D for the given font.      *       * @param font the font      * @return the implementation of the Glyph2D interface for the given font      * @throws IOException if something went wrong      */
specifier|private
name|Glyph2D
name|createGlyph2D
parameter_list|(
name|PDFont
name|font
parameter_list|)
throws|throws
name|IOException
block|{
name|Glyph2D
name|glyph2D
init|=
literal|null
decl_stmt|;
comment|// Is there already a Glyph2D for the given font?
if|if
condition|(
name|fontGlyph2D
operator|.
name|containsKey
argument_list|(
name|font
argument_list|)
condition|)
block|{
name|glyph2D
operator|=
name|fontGlyph2D
operator|.
name|get
argument_list|(
name|font
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// check if the given font is supported
if|if
condition|(
name|font
operator|instanceof
name|PDTrueTypeFont
condition|)
block|{
name|PDTrueTypeFont
name|ttfFont
init|=
operator|(
name|PDTrueTypeFont
operator|)
name|font
decl_stmt|;
comment|// get the true type font raw data
name|TrueTypeFont
name|ttf
init|=
name|ttfFont
operator|.
name|getTTFFont
argument_list|()
decl_stmt|;
if|if
condition|(
name|ttf
operator|!=
literal|null
condition|)
block|{
name|glyph2D
operator|=
operator|new
name|TTFGlyph2D
argument_list|(
name|ttf
argument_list|,
name|font
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|font
operator|instanceof
name|PDType1Font
condition|)
block|{
name|PDType1Font
name|pdType1Font
init|=
operator|(
name|PDType1Font
operator|)
name|font
decl_stmt|;
name|PDType1CFont
name|type1CFont
init|=
name|pdType1Font
operator|.
name|getType1CFont
argument_list|()
decl_stmt|;
if|if
condition|(
name|type1CFont
operator|!=
literal|null
condition|)
block|{
comment|// get the cffFont raw data
name|CFFFont
name|cffFont
init|=
name|type1CFont
operator|.
name|getCFFFont
argument_list|()
decl_stmt|;
if|if
condition|(
name|cffFont
operator|!=
literal|null
condition|)
block|{
name|glyph2D
operator|=
operator|new
name|Type1Glyph2D
argument_list|(
name|cffFont
argument_list|,
name|type1CFont
operator|.
name|getFontEncoding
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// get the pfb raw data
name|Type1Font
name|type1Font
init|=
name|pdType1Font
operator|.
name|getType1Font
argument_list|()
decl_stmt|;
if|if
condition|(
name|type1Font
operator|!=
literal|null
condition|)
block|{
name|glyph2D
operator|=
operator|new
name|Type1Glyph2D
argument_list|(
name|type1Font
argument_list|,
name|pdType1Font
operator|.
name|getFontEncoding
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|font
operator|instanceof
name|PDType0Font
condition|)
block|{
name|PDType0Font
name|type0Font
init|=
operator|(
name|PDType0Font
operator|)
name|font
decl_stmt|;
if|if
condition|(
name|type0Font
operator|.
name|getDescendantFont
argument_list|()
operator|instanceof
name|PDCIDFontType2Font
condition|)
block|{
comment|// a CIDFontType2Font contains TTF font
name|PDCIDFontType2Font
name|cidType2Font
init|=
operator|(
name|PDCIDFontType2Font
operator|)
name|type0Font
operator|.
name|getDescendantFont
argument_list|()
decl_stmt|;
comment|// get the true type font raw data
name|TrueTypeFont
name|ttf
init|=
name|cidType2Font
operator|.
name|getTTFFont
argument_list|()
decl_stmt|;
if|if
condition|(
name|ttf
operator|!=
literal|null
condition|)
block|{
name|glyph2D
operator|=
operator|new
name|TTFGlyph2D
argument_list|(
name|ttf
argument_list|,
name|font
argument_list|,
name|cidType2Font
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|type0Font
operator|.
name|getDescendantFont
argument_list|()
operator|instanceof
name|PDCIDFontType0Font
condition|)
block|{
comment|// a CIDFontType2Font contains TTF font
name|PDCIDFontType0Font
name|cidType2Font
init|=
operator|(
name|PDCIDFontType0Font
operator|)
name|type0Font
operator|.
name|getDescendantFont
argument_list|()
decl_stmt|;
name|PDType1CFont
name|type1CFont
init|=
name|cidType2Font
operator|.
name|getType1CFont
argument_list|()
decl_stmt|;
if|if
condition|(
name|type1CFont
operator|!=
literal|null
condition|)
block|{
comment|// get the cffFont raw data
name|CFFFont
name|cffFont
init|=
name|type1CFont
operator|.
name|getCFFFont
argument_list|()
decl_stmt|;
if|if
condition|(
name|cffFont
operator|!=
literal|null
condition|)
block|{
name|glyph2D
operator|=
operator|new
name|Type1Glyph2D
argument_list|(
name|cffFont
argument_list|,
name|type1CFont
operator|.
name|getFontEncoding
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// cache the Glyph2D instance
if|if
condition|(
name|glyph2D
operator|!=
literal|null
condition|)
block|{
name|fontGlyph2D
operator|.
name|put
argument_list|(
name|font
argument_list|,
name|glyph2D
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|glyph2D
return|;
block|}
comment|/**      * Get the current line path to be drawn.      *       * @return The current line path to be drawn.      */
specifier|public
name|GeneralPath
name|getLinePath
parameter_list|()
block|{
return|return
name|linePath
return|;
block|}
comment|// returns the stroking AWT Paint
specifier|private
name|Paint
name|getStrokingPaint
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getGraphicsState
argument_list|()
operator|.
name|getStrokingColorSpace
argument_list|()
operator|.
name|toPaint
argument_list|(
name|renderer
argument_list|,
name|getGraphicsState
argument_list|()
operator|.
name|getStrokingColor
argument_list|()
argument_list|,
name|pageHeight
argument_list|)
return|;
block|}
comment|// returns the non-stroking AWT Paint
specifier|private
name|Paint
name|getNonStrokingPaint
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getGraphicsState
argument_list|()
operator|.
name|getNonStrokingColorSpace
argument_list|()
operator|.
name|toPaint
argument_list|(
name|renderer
argument_list|,
name|getGraphicsState
argument_list|()
operator|.
name|getNonStrokingColor
argument_list|()
argument_list|,
name|pageHeight
argument_list|)
return|;
block|}
comment|// create a new stroke based on the current CTM and the current stroke
specifier|private
name|BasicStroke
name|getStroke
parameter_list|()
block|{
name|PDGraphicsState
name|state
init|=
name|getGraphicsState
argument_list|()
decl_stmt|;
comment|// apply the CTM
name|float
name|lineWidth
init|=
name|transformWidth
argument_list|(
name|state
operator|.
name|getLineWidth
argument_list|()
argument_list|)
decl_stmt|;
comment|// minimum line width as used by Adobe Reader
if|if
condition|(
name|lineWidth
operator|<
literal|0.25
condition|)
block|{
name|lineWidth
operator|=
literal|0.25f
expr_stmt|;
block|}
name|PDLineDashPattern
name|dashPattern
init|=
name|state
operator|.
name|getLineDashPattern
argument_list|()
decl_stmt|;
name|int
name|phaseStart
init|=
name|dashPattern
operator|.
name|getPhase
argument_list|()
decl_stmt|;
name|float
index|[]
name|dashArray
init|=
name|dashPattern
operator|.
name|getDashArray
argument_list|()
decl_stmt|;
if|if
condition|(
name|dashArray
operator|!=
literal|null
condition|)
block|{
comment|// apply the CTM
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dashArray
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|dashArray
index|[
name|i
index|]
operator|=
name|transformWidth
argument_list|(
name|dashArray
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|phaseStart
operator|=
operator|(
name|int
operator|)
name|transformWidth
argument_list|(
name|phaseStart
argument_list|)
expr_stmt|;
comment|// empty dash array is illegal
if|if
condition|(
name|dashArray
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|dashArray
operator|=
literal|null
expr_stmt|;
block|}
block|}
return|return
operator|new
name|BasicStroke
argument_list|(
name|lineWidth
argument_list|,
name|state
operator|.
name|getLineCap
argument_list|()
argument_list|,
name|state
operator|.
name|getLineJoin
argument_list|()
argument_list|,
name|state
operator|.
name|getMiterLimit
argument_list|()
argument_list|,
name|dashArray
argument_list|,
name|phaseStart
argument_list|)
return|;
block|}
comment|/**      * Stroke the path.      *       * @throws IOException If there is an IO error while stroking the path.      */
specifier|public
name|void
name|strokePath
parameter_list|()
throws|throws
name|IOException
block|{
name|graphics
operator|.
name|setComposite
argument_list|(
name|getGraphicsState
argument_list|()
operator|.
name|getStrokeJavaComposite
argument_list|()
argument_list|)
expr_stmt|;
name|Paint
name|strokingPaint
init|=
name|getStrokingPaint
argument_list|()
decl_stmt|;
if|if
condition|(
name|strokingPaint
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"ColorSpace "
operator|+
name|getGraphicsState
argument_list|()
operator|.
name|getStrokingColorSpace
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" doesn't provide a stroking color, using white instead!"
argument_list|)
expr_stmt|;
name|strokingPaint
operator|=
name|Color
operator|.
name|WHITE
expr_stmt|;
comment|// ((PageDrawer)context).strokePath();
block|}
name|graphics
operator|.
name|setPaint
argument_list|(
name|strokingPaint
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|setStroke
argument_list|(
name|getStroke
argument_list|()
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|setRenderingHint
argument_list|(
name|RenderingHints
operator|.
name|KEY_ANTIALIASING
argument_list|,
name|RenderingHints
operator|.
name|VALUE_ANTIALIAS_OFF
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|setClip
argument_list|(
name|getGraphicsState
argument_list|()
operator|.
name|getCurrentClippingPath
argument_list|()
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|draw
argument_list|(
name|linePath
argument_list|)
expr_stmt|;
name|linePath
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
comment|/**      * Fill the path.      *      * @param windingRule The winding rule this path will use.      *      * @throws IOException If there is an IO error while filling the path.      */
specifier|public
name|void
name|fillPath
parameter_list|(
name|int
name|windingRule
parameter_list|)
throws|throws
name|IOException
block|{
name|graphics
operator|.
name|setComposite
argument_list|(
name|getGraphicsState
argument_list|()
operator|.
name|getNonStrokeJavaComposite
argument_list|()
argument_list|)
expr_stmt|;
name|Paint
name|nonStrokingPaint
init|=
name|getNonStrokingPaint
argument_list|()
decl_stmt|;
if|if
condition|(
name|nonStrokingPaint
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"ColorSpace "
operator|+
name|getGraphicsState
argument_list|()
operator|.
name|getNonStrokingColorSpace
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" doesn't provide a non-stroking color, using white instead!"
argument_list|)
expr_stmt|;
name|nonStrokingPaint
operator|=
name|Color
operator|.
name|WHITE
expr_stmt|;
block|}
name|graphics
operator|.
name|setPaint
argument_list|(
name|nonStrokingPaint
argument_list|)
expr_stmt|;
name|linePath
operator|.
name|setWindingRule
argument_list|(
name|windingRule
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|setRenderingHint
argument_list|(
name|RenderingHints
operator|.
name|KEY_ANTIALIASING
argument_list|,
name|RenderingHints
operator|.
name|VALUE_ANTIALIAS_OFF
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|setClip
argument_list|(
name|getGraphicsState
argument_list|()
operator|.
name|getCurrentClippingPath
argument_list|()
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|fill
argument_list|(
name|linePath
argument_list|)
expr_stmt|;
name|linePath
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
comment|/**      * Strokes and fills the path.      *      * @param windingRule The winding rule this path will use.      *      * @throws IOException If there is an IO error while filling the path.      */
specifier|public
name|void
name|strokeAndFillPath
parameter_list|(
name|int
name|windingRule
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO can we avoid cloning the path?
name|GeneralPath
name|path
init|=
operator|(
name|GeneralPath
operator|)
name|linePath
operator|.
name|clone
argument_list|()
decl_stmt|;
name|strokePath
argument_list|()
expr_stmt|;
name|linePath
operator|=
name|path
expr_stmt|;
name|fillPath
argument_list|(
name|windingRule
argument_list|)
expr_stmt|;
block|}
comment|// This code generalizes the code Jim Lynch wrote for AppendRectangleToPath
comment|/**      * use the current transformation matrix to transform a single point.      *      * @param x x-coordinate of the point to be transform      * @param y y-coordinate of the point to be transform      * @return the transformed coordinates as Point2D.Double      */
specifier|public
name|Point2D
operator|.
name|Double
name|transformedPoint
parameter_list|(
name|double
name|x
parameter_list|,
name|double
name|y
parameter_list|)
block|{
name|double
index|[]
name|position
init|=
block|{
name|x
block|,
name|y
block|}
decl_stmt|;
name|getGraphicsState
argument_list|()
operator|.
name|getCurrentTransformationMatrix
argument_list|()
operator|.
name|createAffineTransform
argument_list|()
operator|.
name|transform
argument_list|(
name|position
argument_list|,
literal|0
argument_list|,
name|position
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return
operator|new
name|Point2D
operator|.
name|Double
argument_list|(
name|position
index|[
literal|0
index|]
argument_list|,
name|position
index|[
literal|1
index|]
argument_list|)
return|;
block|}
comment|// transforms a width using the CTM
specifier|private
name|float
name|transformWidth
parameter_list|(
name|float
name|width
parameter_list|)
block|{
name|Matrix
name|ctm
init|=
name|getGraphicsState
argument_list|()
operator|.
name|getCurrentTransformationMatrix
argument_list|()
decl_stmt|;
if|if
condition|(
name|ctm
operator|==
literal|null
condition|)
block|{
comment|// TODO does the CTM really need to use null?
return|return
name|width
return|;
block|}
name|float
name|x
init|=
name|ctm
operator|.
name|getValue
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|+
name|ctm
operator|.
name|getValue
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|float
name|y
init|=
name|ctm
operator|.
name|getValue
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|+
name|ctm
operator|.
name|getValue
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
return|return
name|width
operator|*
operator|(
name|float
operator|)
name|Math
operator|.
name|sqrt
argument_list|(
operator|(
name|x
operator|*
name|x
operator|+
name|y
operator|*
name|y
operator|)
operator|*
literal|0.5
argument_list|)
return|;
block|}
comment|/**      * Set the clipping winding rule.      *       * @param windingRule The winding rule which will be used for clipping.      *       */
specifier|public
name|void
name|setClippingWindingRule
parameter_list|(
name|int
name|windingRule
parameter_list|)
block|{
name|clippingWindingRule
operator|=
name|windingRule
expr_stmt|;
block|}
comment|/**      * Set the clipping Path.      *       */
specifier|public
name|void
name|endPath
parameter_list|()
block|{
if|if
condition|(
name|clippingWindingRule
operator|>
operator|-
literal|1
condition|)
block|{
name|PDGraphicsState
name|graphicsState
init|=
name|getGraphicsState
argument_list|()
decl_stmt|;
name|GeneralPath
name|clippingPath
init|=
operator|(
name|GeneralPath
operator|)
name|linePath
operator|.
name|clone
argument_list|()
decl_stmt|;
comment|// TODO do we really need to clone this? isn't the line path reset anyway?
name|clippingPath
operator|.
name|setWindingRule
argument_list|(
name|clippingWindingRule
argument_list|)
expr_stmt|;
comment|// If there is already set a clipping path, we have to intersect the new with the existing one
if|if
condition|(
name|graphicsState
operator|.
name|getCurrentClippingPath
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Area
name|currentArea
init|=
operator|new
name|Area
argument_list|(
name|getGraphicsState
argument_list|()
operator|.
name|getCurrentClippingPath
argument_list|()
argument_list|)
decl_stmt|;
name|Area
name|newArea
init|=
operator|new
name|Area
argument_list|(
name|clippingPath
argument_list|)
decl_stmt|;
name|currentArea
operator|.
name|intersect
argument_list|(
name|newArea
argument_list|)
expr_stmt|;
name|graphicsState
operator|.
name|setCurrentClippingPath
argument_list|(
name|currentArea
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|graphicsState
operator|.
name|setCurrentClippingPath
argument_list|(
name|clippingPath
argument_list|)
expr_stmt|;
block|}
name|clippingWindingRule
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|linePath
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
comment|/**      * Draw the AWT image. Called by Invoke. Moved into PageDrawer so that Invoke doesn't have to reach in here for      * Graphics as that breaks extensibility.      *       * @param awtImage The image to draw.      * @param at The transformation to use when drawing.      *       */
specifier|public
name|void
name|drawImage
parameter_list|(
name|Image
name|awtImage
parameter_list|,
name|AffineTransform
name|at
parameter_list|)
block|{
name|graphics
operator|.
name|setComposite
argument_list|(
name|getGraphicsState
argument_list|()
operator|.
name|getNonStrokeJavaComposite
argument_list|()
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|setClip
argument_list|(
name|getGraphicsState
argument_list|()
operator|.
name|getCurrentClippingPath
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|width
init|=
name|awtImage
operator|.
name|getWidth
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|int
name|height
init|=
name|awtImage
operator|.
name|getHeight
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|AffineTransform
name|imageTransform
init|=
operator|new
name|AffineTransform
argument_list|(
name|at
argument_list|)
decl_stmt|;
name|imageTransform
operator|.
name|scale
argument_list|(
literal|1.0
operator|/
name|width
argument_list|,
operator|-
literal|1.0
operator|/
name|height
argument_list|)
expr_stmt|;
name|imageTransform
operator|.
name|translate
argument_list|(
literal|0
argument_list|,
operator|-
name|height
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|drawImage
argument_list|(
name|awtImage
argument_list|,
name|imageTransform
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Fill with Shading. Called by SHFill operator.      *       * @param shadingName The name of the Shading Dictionary to use for this fill instruction.      *       * @throws IOException If there is an IO error while shade-filling the clipping area.      */
comment|// TODO would this now be better off using PDPattern?
specifier|public
name|void
name|shFill
parameter_list|(
name|COSName
name|shadingName
parameter_list|)
throws|throws
name|IOException
block|{
name|PDShading
name|shading
init|=
name|getResources
argument_list|()
operator|.
name|getShadings
argument_list|()
operator|.
name|get
argument_list|(
name|shadingName
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Shading = "
operator|+
name|shading
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|shadingType
init|=
name|shading
operator|.
name|getShadingType
argument_list|()
decl_stmt|;
name|Matrix
name|ctm
init|=
name|getGraphicsState
argument_list|()
operator|.
name|getCurrentTransformationMatrix
argument_list|()
decl_stmt|;
name|Paint
name|paint
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|shadingType
condition|)
block|{
case|case
literal|1
case|:
comment|// TODO
name|LOG
operator|.
name|debug
argument_list|(
literal|"Function based shading not yet supported"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|paint
operator|=
operator|new
name|AxialShadingPaint
argument_list|(
operator|(
name|PDShadingType2
operator|)
name|shading
argument_list|,
name|ctm
argument_list|,
name|pageHeight
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|paint
operator|=
operator|new
name|RadialShadingPaint
argument_list|(
operator|(
name|PDShadingType3
operator|)
name|shading
argument_list|,
name|ctm
argument_list|,
name|pageHeight
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
case|case
literal|5
case|:
case|case
literal|6
case|:
case|case
literal|7
case|:
comment|// TODO
name|LOG
operator|.
name|debug
argument_list|(
literal|"Shading type "
operator|+
name|shadingType
operator|+
literal|" not yet supported"
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid ShadingType "
operator|+
name|shadingType
operator|+
literal|" for Shading "
operator|+
name|shadingName
argument_list|)
throw|;
block|}
name|graphics
operator|.
name|setComposite
argument_list|(
name|getGraphicsState
argument_list|()
operator|.
name|getNonStrokeJavaComposite
argument_list|()
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|setPaint
argument_list|(
name|paint
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|setRenderingHint
argument_list|(
name|RenderingHints
operator|.
name|KEY_ANTIALIASING
argument_list|,
name|RenderingHints
operator|.
name|VALUE_ANTIALIAS_OFF
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|fill
argument_list|(
name|getGraphicsState
argument_list|()
operator|.
name|getCurrentClippingPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

