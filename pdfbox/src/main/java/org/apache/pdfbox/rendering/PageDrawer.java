begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|rendering
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|BasicStroke
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Graphics
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Graphics2D
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Paint
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|RenderingHints
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Shape
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|TexturePaint
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|AffineTransform
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|Area
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|GeneralPath
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|NoninvertibleTransformException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|PathIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|Point2D
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|Rectangle2D
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|BufferedImage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|Raster
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|WritableRaster
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDCIDFontType0
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDCIDFontType2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|image
operator|.
name|PDImage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|state
operator|.
name|RenderingMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|rendering
operator|.
name|font
operator|.
name|CIDType0Glyph2D
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|rendering
operator|.
name|font
operator|.
name|Glyph2D
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|rendering
operator|.
name|font
operator|.
name|TTFGlyph2D
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|rendering
operator|.
name|font
operator|.
name|Type1Glyph2D
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDRectangle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDTrueTypeFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDType0Font
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDType1CFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDType1Font
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDType3Font
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|PDLineDashPattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|blend
operator|.
name|BlendMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|state
operator|.
name|PDSoftMask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|blend
operator|.
name|SoftMaskPaint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDColor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDColorSpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|form
operator|.
name|PDFormXObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|pattern
operator|.
name|PDTilingPattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|shading
operator|.
name|PDShading
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|state
operator|.
name|PDGraphicsState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAppearanceDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAppearanceStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|Matrix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|contentstream
operator|.
name|PDFGraphicsStreamEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_comment
comment|/**  * Paints a page in a PDF document to a Graphics context.  *   * @author Ben Litchfield  */
end_comment

begin_class
specifier|public
class|class
name|PageDrawer
extends|extends
name|PDFGraphicsStreamEngine
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|PageDrawer
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// parent document renderer
specifier|private
specifier|final
name|PDFRenderer
name|renderer
decl_stmt|;
specifier|private
name|Graphics2D
name|graphics
decl_stmt|;
comment|// initial transform
specifier|private
name|AffineTransform
name|xform
decl_stmt|;
comment|// clipping winding rule used for the clipping path
specifier|private
name|int
name|clipWindingRule
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|GeneralPath
name|linePath
init|=
operator|new
name|GeneralPath
argument_list|()
decl_stmt|;
comment|// last clipping path
specifier|private
name|Area
name|lastClip
decl_stmt|;
comment|// buffered clipping area for text being drawn
specifier|private
name|Area
name|textClippingArea
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|PDFont
argument_list|,
name|Glyph2D
argument_list|>
name|fontGlyph2D
init|=
operator|new
name|HashMap
argument_list|<
name|PDFont
argument_list|,
name|Glyph2D
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Default constructor, loads properties from file.      *       * @param renderer renderer to render the page.      * @param page the page that is to be rendered.      * @throws IOException If there is an error loading properties from the file.      */
specifier|public
name|PageDrawer
parameter_list|(
name|PDFRenderer
name|renderer
parameter_list|,
name|PDPage
name|page
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|page
argument_list|)
expr_stmt|;
name|this
operator|.
name|renderer
operator|=
name|renderer
expr_stmt|;
block|}
comment|/**      * Tiling pattern constructor, loads properties from file.      *       * @param renderer renderer to render the page      * @throws IOException If there is an error loading properties from the file.      */
name|PageDrawer
parameter_list|(
name|PDFRenderer
name|renderer
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|renderer
operator|=
name|renderer
expr_stmt|;
block|}
comment|/**      * Returns the parent renderer.      */
specifier|public
name|PDFRenderer
name|getRenderer
parameter_list|()
block|{
return|return
name|renderer
return|;
block|}
comment|/**      * Sets high-quality rendering hints on the current Graphics2D.      */
specifier|private
name|void
name|setRenderingHints
parameter_list|()
block|{
name|graphics
operator|.
name|setRenderingHint
argument_list|(
name|RenderingHints
operator|.
name|KEY_INTERPOLATION
argument_list|,
name|RenderingHints
operator|.
name|VALUE_INTERPOLATION_BICUBIC
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|setRenderingHint
argument_list|(
name|RenderingHints
operator|.
name|KEY_RENDERING
argument_list|,
name|RenderingHints
operator|.
name|VALUE_RENDER_QUALITY
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|setRenderingHint
argument_list|(
name|RenderingHints
operator|.
name|KEY_ANTIALIASING
argument_list|,
name|RenderingHints
operator|.
name|VALUE_ANTIALIAS_ON
argument_list|)
expr_stmt|;
block|}
comment|/**      * Draws the page to the requested context.      *       * @param g The graphics context to draw onto.      * @param pageSize The size of the page to draw.      * @throws IOException If there is an IO error while drawing the page.      */
specifier|public
name|void
name|drawPage
parameter_list|(
name|Graphics
name|g
parameter_list|,
name|PDRectangle
name|pageSize
parameter_list|)
throws|throws
name|IOException
block|{
name|graphics
operator|=
operator|(
name|Graphics2D
operator|)
name|g
expr_stmt|;
name|xform
operator|=
name|graphics
operator|.
name|getTransform
argument_list|()
expr_stmt|;
name|setRenderingHints
argument_list|()
expr_stmt|;
name|graphics
operator|.
name|translate
argument_list|(
literal|0
argument_list|,
operator|(
name|int
operator|)
name|pageSize
operator|.
name|getHeight
argument_list|()
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|scale
argument_list|(
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// TODO use getStroke() to set the initial stroke
name|graphics
operator|.
name|setStroke
argument_list|(
operator|new
name|BasicStroke
argument_list|(
literal|1.0f
argument_list|,
name|BasicStroke
operator|.
name|CAP_BUTT
argument_list|,
name|BasicStroke
operator|.
name|JOIN_MITER
argument_list|)
argument_list|)
expr_stmt|;
comment|// Only if there is some content, we have to process it.
comment|// Otherwise we are done here and we will produce an empty page
name|PDPage
name|page
init|=
name|getPage
argument_list|()
decl_stmt|;
if|if
condition|(
name|page
operator|.
name|getContents
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|PDResources
name|resources
init|=
name|page
operator|.
name|findResources
argument_list|()
decl_stmt|;
name|processStream
argument_list|(
name|resources
argument_list|,
name|page
operator|.
name|getContents
argument_list|()
operator|.
name|getStream
argument_list|()
argument_list|,
name|page
operator|.
name|findCropBox
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|initStream
argument_list|(
name|page
operator|.
name|findCropBox
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PDAnnotation
name|annotation
range|:
name|page
operator|.
name|getAnnotations
argument_list|()
control|)
block|{
name|PDRectangle
name|rect
init|=
name|annotation
operator|.
name|getRectangle
argument_list|()
decl_stmt|;
name|String
name|appearanceName
init|=
name|annotation
operator|.
name|getAppearanceStream
argument_list|()
decl_stmt|;
name|PDAppearanceDictionary
name|appearDictionary
init|=
name|annotation
operator|.
name|getAppearance
argument_list|()
decl_stmt|;
if|if
condition|(
name|appearDictionary
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|appearanceName
operator|==
literal|null
condition|)
block|{
name|appearanceName
operator|=
literal|"default"
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|PDAppearanceStream
argument_list|>
name|appearanceMap
init|=
name|appearDictionary
operator|.
name|getNormalAppearance
argument_list|()
decl_stmt|;
if|if
condition|(
name|appearanceMap
operator|!=
literal|null
condition|)
block|{
name|PDAppearanceStream
name|appearance
init|=
name|appearanceMap
operator|.
name|get
argument_list|(
name|appearanceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|appearance
operator|!=
literal|null
condition|)
block|{
name|saveGraphicsState
argument_list|()
expr_stmt|;
name|PDRectangle
name|bBox
init|=
name|appearance
operator|.
name|getBoundingBox
argument_list|()
decl_stmt|;
name|Rectangle2D
name|rect2D
init|=
operator|new
name|Rectangle2D
operator|.
name|Float
argument_list|(
name|rect
operator|.
name|getLowerLeftX
argument_list|()
argument_list|,
name|rect
operator|.
name|getLowerLeftY
argument_list|()
argument_list|,
name|rect
operator|.
name|getWidth
argument_list|()
argument_list|,
name|rect
operator|.
name|getHeight
argument_list|()
argument_list|)
decl_stmt|;
name|Matrix
name|matrix
init|=
name|appearance
operator|.
name|getMatrix
argument_list|()
decl_stmt|;
if|if
condition|(
name|matrix
operator|==
literal|null
condition|)
block|{
name|matrix
operator|=
operator|new
name|Matrix
argument_list|()
expr_stmt|;
block|}
comment|// PDF Spec 12.5.5:
comment|// a) The appearance's bounding box (specified by its BBox entry)
comment|// shall be transformed, using Matrix, to produce a quadrilateral
comment|// with arbitrary orientation.
name|Point2D
name|p1
init|=
operator|new
name|Point2D
operator|.
name|Float
argument_list|(
name|bBox
operator|.
name|getLowerLeftX
argument_list|()
argument_list|,
name|bBox
operator|.
name|getLowerLeftY
argument_list|()
argument_list|)
decl_stmt|;
name|Point2D
name|p2
init|=
operator|new
name|Point2D
operator|.
name|Float
argument_list|(
name|bBox
operator|.
name|getUpperRightX
argument_list|()
argument_list|,
name|bBox
operator|.
name|getUpperRightY
argument_list|()
argument_list|)
decl_stmt|;
name|matrix
operator|.
name|createAffineTransform
argument_list|()
operator|.
name|transform
argument_list|(
name|p1
argument_list|,
name|p1
argument_list|)
expr_stmt|;
name|matrix
operator|.
name|createAffineTransform
argument_list|()
operator|.
name|transform
argument_list|(
name|p2
argument_list|,
name|p2
argument_list|)
expr_stmt|;
name|Rectangle2D
name|transformedBBox
init|=
operator|new
name|Rectangle2D
operator|.
name|Float
argument_list|(
operator|(
name|float
operator|)
name|Math
operator|.
name|min
argument_list|(
name|p1
operator|.
name|getX
argument_list|()
argument_list|,
name|p2
operator|.
name|getX
argument_list|()
argument_list|)
argument_list|,
operator|(
name|float
operator|)
name|Math
operator|.
name|min
argument_list|(
name|p1
operator|.
name|getY
argument_list|()
argument_list|,
name|p2
operator|.
name|getY
argument_list|()
argument_list|)
argument_list|,
operator|(
name|float
operator|)
name|Math
operator|.
name|abs
argument_list|(
name|p2
operator|.
name|getX
argument_list|()
operator|-
name|p1
operator|.
name|getX
argument_list|()
argument_list|)
argument_list|,
operator|(
name|float
operator|)
name|Math
operator|.
name|abs
argument_list|(
name|p2
operator|.
name|getY
argument_list|()
operator|-
name|p1
operator|.
name|getY
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// PDF Spec 12.5.5:
comment|// b) A matrix A shall be computed that scales and translates
comment|// the transformed appearance box to align with the edges
comment|// of the annotation's rectangle
comment|//
comment|// code inspired from
comment|// http://stackoverflow.com/a/14015713/535646
name|AffineTransform
name|at
init|=
operator|new
name|AffineTransform
argument_list|()
decl_stmt|;
name|at
operator|.
name|translate
argument_list|(
name|rect2D
operator|.
name|getMinX
argument_list|()
argument_list|,
name|rect2D
operator|.
name|getMinY
argument_list|()
argument_list|)
expr_stmt|;
name|at
operator|.
name|scale
argument_list|(
name|rect2D
operator|.
name|getWidth
argument_list|()
operator|/
name|transformedBBox
operator|.
name|getWidth
argument_list|()
argument_list|,
name|rect2D
operator|.
name|getHeight
argument_list|()
operator|/
name|transformedBBox
operator|.
name|getHeight
argument_list|()
argument_list|)
expr_stmt|;
name|at
operator|.
name|translate
argument_list|(
operator|-
name|transformedBBox
operator|.
name|getMinX
argument_list|()
argument_list|,
operator|-
name|transformedBBox
operator|.
name|getMinY
argument_list|()
argument_list|)
expr_stmt|;
name|Matrix
name|matrixA
init|=
operator|new
name|Matrix
argument_list|()
decl_stmt|;
name|matrixA
operator|.
name|setFromAffineTransform
argument_list|(
name|at
argument_list|)
expr_stmt|;
comment|// PDF Spec 12.5.5:
comment|// c) Matrix shall be concatenated with A to form a matrix AA
comment|// that maps from the appearance's coordinate system to
comment|// the annotation's rectangle in default user space
name|Matrix
name|matrixAA
init|=
name|matrix
operator|.
name|multiply
argument_list|(
name|matrixA
argument_list|)
decl_stmt|;
name|Point2D
name|point
init|=
operator|new
name|Point2D
operator|.
name|Float
argument_list|(
name|matrixAA
operator|.
name|getXPosition
argument_list|()
argument_list|,
name|matrixAA
operator|.
name|getYPosition
argument_list|()
argument_list|)
decl_stmt|;
name|matrixAA
operator|.
name|setValue
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|matrixAA
operator|.
name|setValue
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|getGraphicsState
argument_list|()
operator|.
name|setCurrentTransformationMatrix
argument_list|(
name|matrixAA
argument_list|)
expr_stmt|;
comment|// Calculate clipping
comment|// PDF Spec 12.5.5:
comment|// a self-contained content stream that shall be rendered
comment|// inside the annotation rectangle
name|Rectangle2D
name|clipRect2D
init|=
operator|new
name|Rectangle2D
operator|.
name|Float
argument_list|(
call|(
name|float
call|)
argument_list|(
name|rect2D
operator|.
name|getMinX
argument_list|()
operator|-
name|point
operator|.
name|getX
argument_list|()
argument_list|)
argument_list|,
call|(
name|float
call|)
argument_list|(
name|rect2D
operator|.
name|getMinY
argument_list|()
operator|-
name|point
operator|.
name|getY
argument_list|()
argument_list|)
argument_list|,
operator|(
name|float
operator|)
name|rect2D
operator|.
name|getWidth
argument_list|()
argument_list|,
operator|(
name|float
operator|)
name|rect2D
operator|.
name|getHeight
argument_list|()
argument_list|)
decl_stmt|;
name|getGraphicsState
argument_list|()
operator|.
name|intersectClippingPath
argument_list|(
operator|new
name|Area
argument_list|(
name|clipRect2D
argument_list|)
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|translate
argument_list|(
operator|(
name|int
operator|)
name|point
operator|.
name|getX
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|point
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
name|lastClip
operator|=
literal|null
expr_stmt|;
name|processSubStream
argument_list|(
name|appearance
operator|.
name|getResources
argument_list|()
argument_list|,
name|appearance
operator|.
name|getStream
argument_list|()
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|translate
argument_list|(
operator|-
operator|(
name|int
operator|)
name|point
operator|.
name|getX
argument_list|()
argument_list|,
operator|-
operator|(
name|int
operator|)
name|point
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
name|restoreGraphicsState
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
name|graphics
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Draws the pattern stream to the requested context.      *      * @param g The graphics context to draw onto.      * @param pattern The tiling pattern to be used.      * @param pageDimension The size of the page to draw.      * @param matrix initial substream transformation matrix.      * @param colorSpace color space for this tiling.      * @param color color for this tiling.      * @throws IOException If there is an IO error while drawing the page.      */
specifier|public
name|void
name|drawTilingPattern
parameter_list|(
name|Graphics2D
name|g
parameter_list|,
name|PDTilingPattern
name|pattern
parameter_list|,
name|PDRectangle
name|pageDimension
parameter_list|,
name|Matrix
name|matrix
parameter_list|,
name|PDColorSpace
name|colorSpace
parameter_list|,
name|PDColor
name|color
parameter_list|)
throws|throws
name|IOException
block|{
name|graphics
operator|=
name|g
expr_stmt|;
name|setRenderingHints
argument_list|()
expr_stmt|;
name|initStream
argument_list|(
name|pageDimension
argument_list|)
expr_stmt|;
comment|// transformPoint ctm
name|Matrix
name|concat
init|=
name|matrix
operator|.
name|multiply
argument_list|(
name|getGraphicsState
argument_list|()
operator|.
name|getCurrentTransformationMatrix
argument_list|()
argument_list|)
decl_stmt|;
name|getGraphicsState
argument_list|()
operator|.
name|setCurrentTransformationMatrix
argument_list|(
name|concat
argument_list|)
expr_stmt|;
comment|// color
if|if
condition|(
name|colorSpace
operator|!=
literal|null
condition|)
block|{
name|getGraphicsState
argument_list|()
operator|.
name|setNonStrokingColorSpace
argument_list|(
name|colorSpace
argument_list|)
expr_stmt|;
name|getGraphicsState
argument_list|()
operator|.
name|setNonStrokingColor
argument_list|(
name|color
argument_list|)
expr_stmt|;
name|getGraphicsState
argument_list|()
operator|.
name|setStrokingColorSpace
argument_list|(
name|colorSpace
argument_list|)
expr_stmt|;
name|getGraphicsState
argument_list|()
operator|.
name|setStrokingColor
argument_list|(
name|color
argument_list|)
expr_stmt|;
block|}
name|processSubStream
argument_list|(
name|pattern
operator|.
name|getResources
argument_list|()
argument_list|,
operator|(
name|COSStream
operator|)
name|pattern
operator|.
name|getCOSObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// sets the clipping path using caching for performance, we track lastClip manually because
comment|// Graphics2D#getClip() returns a new object instead of the same one passed to setClip
specifier|private
name|void
name|setClip
parameter_list|()
block|{
name|Area
name|clippingPath
init|=
name|getGraphicsState
argument_list|()
operator|.
name|getCurrentClippingPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|clippingPath
operator|!=
name|lastClip
condition|)
block|{
name|graphics
operator|.
name|setClip
argument_list|(
name|clippingPath
argument_list|)
expr_stmt|;
name|lastClip
operator|=
name|clippingPath
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|beginText
parameter_list|()
throws|throws
name|IOException
block|{
name|setClip
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|showText
parameter_list|(
name|byte
index|[]
name|string
parameter_list|)
throws|throws
name|IOException
block|{
name|PDGraphicsState
name|state
init|=
name|getGraphicsState
argument_list|()
decl_stmt|;
name|RenderingMode
name|renderingMode
init|=
name|state
operator|.
name|getTextState
argument_list|()
operator|.
name|getRenderingMode
argument_list|()
decl_stmt|;
comment|// buffer the text clip because it represents a single clipping area
if|if
condition|(
name|renderingMode
operator|.
name|isClip
argument_list|()
condition|)
block|{
name|textClippingArea
operator|=
operator|new
name|Area
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|showText
argument_list|(
name|string
argument_list|)
expr_stmt|;
comment|// apply the buffered clip as one area
if|if
condition|(
name|renderingMode
operator|.
name|isClip
argument_list|()
condition|)
block|{
name|state
operator|.
name|intersectClippingPath
argument_list|(
name|textClippingArea
argument_list|)
expr_stmt|;
name|textClippingArea
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|showGlyph
parameter_list|(
name|Matrix
name|textRenderingMatrix
parameter_list|,
name|PDFont
name|font
parameter_list|,
name|int
name|code
parameter_list|,
name|String
name|unicode
parameter_list|,
name|Vector
name|displacement
parameter_list|)
throws|throws
name|IOException
block|{
name|AffineTransform
name|at
init|=
name|textRenderingMatrix
operator|.
name|createAffineTransform
argument_list|()
decl_stmt|;
name|at
operator|.
name|concatenate
argument_list|(
name|font
operator|.
name|getFontMatrix
argument_list|()
operator|.
name|createAffineTransform
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|font
operator|instanceof
name|PDType3Font
condition|)
block|{
comment|// Type3 fonts use PDF streams for each character
name|drawType3String
argument_list|(
operator|(
name|PDType3Font
operator|)
name|font
argument_list|,
name|code
argument_list|,
name|at
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// all other fonts use vectors
name|Glyph2D
name|glyph2D
init|=
name|createGlyph2D
argument_list|(
name|font
argument_list|)
decl_stmt|;
name|drawGlyph2D
argument_list|(
name|glyph2D
argument_list|,
name|font
argument_list|,
name|code
argument_list|,
name|displacement
argument_list|,
name|at
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Render the font using the Glyph2D interface.      *       * @param glyph2D the Glyph2D implementation provided a GeneralPath for each glyph      * @param font the font      * @param code character code      * @param displacement the glyph's displacement (advance)      * @param at the transformation      * @throws IOException if something went wrong      */
specifier|private
name|void
name|drawGlyph2D
parameter_list|(
name|Glyph2D
name|glyph2D
parameter_list|,
name|PDFont
name|font
parameter_list|,
name|int
name|code
parameter_list|,
name|Vector
name|displacement
parameter_list|,
name|AffineTransform
name|at
parameter_list|)
throws|throws
name|IOException
block|{
name|PDGraphicsState
name|state
init|=
name|getGraphicsState
argument_list|()
decl_stmt|;
name|RenderingMode
name|renderingMode
init|=
name|state
operator|.
name|getTextState
argument_list|()
operator|.
name|getRenderingMode
argument_list|()
decl_stmt|;
name|GeneralPath
name|path
init|=
name|glyph2D
operator|.
name|getPathForCharacterCode
argument_list|(
name|code
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
comment|// stretch non-embedded glyph if it does not match the width contained in the PDF
if|if
condition|(
operator|!
name|font
operator|.
name|isEmbedded
argument_list|()
condition|)
block|{
name|float
name|fontWidth
init|=
name|font
operator|.
name|getWidthFromFont
argument_list|(
name|code
argument_list|)
decl_stmt|;
if|if
condition|(
name|fontWidth
operator|>
literal|0
operator|&&
comment|// ignore spaces
name|Math
operator|.
name|abs
argument_list|(
name|fontWidth
operator|-
name|displacement
operator|.
name|getX
argument_list|()
operator|*
literal|1000
argument_list|)
operator|>
literal|0.0001
condition|)
block|{
name|float
name|pdfWidth
init|=
name|displacement
operator|.
name|getX
argument_list|()
operator|*
literal|1000
decl_stmt|;
name|at
operator|.
name|scale
argument_list|(
name|pdfWidth
operator|/
name|fontWidth
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|// render glyph
name|Shape
name|glyph
init|=
name|at
operator|.
name|createTransformedShape
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|renderingMode
operator|.
name|isFill
argument_list|()
condition|)
block|{
name|graphics
operator|.
name|setComposite
argument_list|(
name|state
operator|.
name|getNonStrokingJavaComposite
argument_list|()
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|setPaint
argument_list|(
name|getNonStrokingPaint
argument_list|()
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|fill
argument_list|(
name|glyph
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|renderingMode
operator|.
name|isStroke
argument_list|()
condition|)
block|{
name|graphics
operator|.
name|setComposite
argument_list|(
name|state
operator|.
name|getStrokingJavaComposite
argument_list|()
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|setPaint
argument_list|(
name|getStrokingPaint
argument_list|()
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|setStroke
argument_list|(
name|getStroke
argument_list|()
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|draw
argument_list|(
name|glyph
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|renderingMode
operator|.
name|isClip
argument_list|()
condition|)
block|{
name|textClippingArea
operator|.
name|add
argument_list|(
operator|new
name|Area
argument_list|(
name|glyph
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Render the text using a type 3 font.      *       * @param font the type3 font      * @param code internal PDF character codes of glyph      * @param at the transformation      *       * @throws IOException if something went wrong      */
specifier|private
name|void
name|drawType3String
parameter_list|(
name|PDType3Font
name|font
parameter_list|,
name|int
name|code
parameter_list|,
name|AffineTransform
name|at
parameter_list|)
throws|throws
name|IOException
block|{
name|COSStream
name|stream
init|=
name|font
operator|.
name|getCharStream
argument_list|(
name|code
argument_list|)
decl_stmt|;
if|if
condition|(
name|stream
operator|!=
literal|null
condition|)
block|{
comment|// save the current graphics state and matrices
name|saveGraphicsState
argument_list|()
expr_stmt|;
name|Matrix
name|textMatrix
init|=
name|getTextMatrix
argument_list|()
decl_stmt|;
name|Matrix
name|textLineMatrix
init|=
name|getTextLineMatrix
argument_list|()
decl_stmt|;
name|Matrix
name|ctm
init|=
operator|new
name|Matrix
argument_list|()
decl_stmt|;
name|ctm
operator|.
name|setFromAffineTransform
argument_list|(
name|at
argument_list|)
expr_stmt|;
name|getGraphicsState
argument_list|()
operator|.
name|setCurrentTransformationMatrix
argument_list|(
name|ctm
argument_list|)
expr_stmt|;
name|processSubStream
argument_list|(
name|font
operator|.
name|getType3Resources
argument_list|()
argument_list|,
name|stream
argument_list|)
expr_stmt|;
comment|// restore the saved graphics state and matrices
name|restoreGraphicsState
argument_list|()
expr_stmt|;
name|setTextLineMatrix
argument_list|(
name|textLineMatrix
argument_list|)
expr_stmt|;
name|setTextMatrix
argument_list|(
name|textMatrix
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Stream for Type 3 character "
operator|+
name|code
operator|+
literal|" not found"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Provide a Glyph2D for the given font.      *       * @param font the font      * @return the implementation of the Glyph2D interface for the given font      * @throws IOException if something went wrong      */
specifier|private
name|Glyph2D
name|createGlyph2D
parameter_list|(
name|PDFont
name|font
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Is there already a Glyph2D for the given font?
if|if
condition|(
name|fontGlyph2D
operator|.
name|containsKey
argument_list|(
name|font
argument_list|)
condition|)
block|{
return|return
name|fontGlyph2D
operator|.
name|get
argument_list|(
name|font
argument_list|)
return|;
block|}
name|Glyph2D
name|glyph2D
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|font
operator|instanceof
name|PDTrueTypeFont
condition|)
block|{
name|PDTrueTypeFont
name|ttfFont
init|=
operator|(
name|PDTrueTypeFont
operator|)
name|font
decl_stmt|;
name|glyph2D
operator|=
operator|new
name|TTFGlyph2D
argument_list|(
name|ttfFont
argument_list|)
expr_stmt|;
comment|// TTF is never null
block|}
elseif|else
if|if
condition|(
name|font
operator|instanceof
name|PDType1Font
condition|)
block|{
name|PDType1Font
name|pdType1Font
init|=
operator|(
name|PDType1Font
operator|)
name|font
decl_stmt|;
name|glyph2D
operator|=
operator|new
name|Type1Glyph2D
argument_list|(
name|pdType1Font
argument_list|)
expr_stmt|;
comment|// T1 is never null
block|}
elseif|else
if|if
condition|(
name|font
operator|instanceof
name|PDType1CFont
condition|)
block|{
name|PDType1CFont
name|type1CFont
init|=
operator|(
name|PDType1CFont
operator|)
name|font
decl_stmt|;
if|if
condition|(
name|type1CFont
operator|.
name|getCFFType1Font
argument_list|()
operator|!=
literal|null
condition|)
comment|// todo: could be null (need to incorporate fallback)
block|{
name|glyph2D
operator|=
operator|new
name|Type1Glyph2D
argument_list|(
name|type1CFont
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|font
operator|instanceof
name|PDType0Font
condition|)
block|{
name|PDType0Font
name|type0Font
init|=
operator|(
name|PDType0Font
operator|)
name|font
decl_stmt|;
if|if
condition|(
name|type0Font
operator|.
name|getDescendantFont
argument_list|()
operator|instanceof
name|PDCIDFontType2
condition|)
block|{
name|glyph2D
operator|=
operator|new
name|TTFGlyph2D
argument_list|(
name|type0Font
argument_list|)
expr_stmt|;
comment|// TTF is never null
block|}
elseif|else
if|if
condition|(
name|type0Font
operator|.
name|getDescendantFont
argument_list|()
operator|instanceof
name|PDCIDFontType0
condition|)
block|{
comment|// a Type0 CIDFont contains CFF font
name|PDCIDFontType0
name|cidType0Font
init|=
operator|(
name|PDCIDFontType0
operator|)
name|type0Font
operator|.
name|getDescendantFont
argument_list|()
decl_stmt|;
name|glyph2D
operator|=
operator|new
name|CIDType0Glyph2D
argument_list|(
name|cidType0Font
argument_list|)
expr_stmt|;
comment|// todo: could be null (need incorporate fallback)
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Bad font type: "
operator|+
name|font
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
throw|;
block|}
comment|// cache the Glyph2D instance
if|if
condition|(
name|glyph2D
operator|!=
literal|null
condition|)
block|{
name|fontGlyph2D
operator|.
name|put
argument_list|(
name|font
argument_list|,
name|glyph2D
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|glyph2D
operator|==
literal|null
condition|)
block|{
comment|// todo: make sure this never happens
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"No font for "
operator|+
name|font
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|glyph2D
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|appendRectangle
parameter_list|(
name|Point2D
name|p0
parameter_list|,
name|Point2D
name|p1
parameter_list|,
name|Point2D
name|p2
parameter_list|,
name|Point2D
name|p3
parameter_list|)
block|{
comment|// to ensure that the path is created in the right direction, we have to create
comment|// it by combining single lines instead of creating a simple rectangle
name|linePath
operator|.
name|moveTo
argument_list|(
operator|(
name|float
operator|)
name|p0
operator|.
name|getX
argument_list|()
argument_list|,
operator|(
name|float
operator|)
name|p0
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
name|linePath
operator|.
name|lineTo
argument_list|(
operator|(
name|float
operator|)
name|p1
operator|.
name|getX
argument_list|()
argument_list|,
operator|(
name|float
operator|)
name|p1
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
name|linePath
operator|.
name|lineTo
argument_list|(
operator|(
name|float
operator|)
name|p2
operator|.
name|getX
argument_list|()
argument_list|,
operator|(
name|float
operator|)
name|p2
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
name|linePath
operator|.
name|lineTo
argument_list|(
operator|(
name|float
operator|)
name|p3
operator|.
name|getX
argument_list|()
argument_list|,
operator|(
name|float
operator|)
name|p3
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
comment|// close the subpath instead of adding the last line so that a possible set line
comment|// cap style isn't taken into account at the "beginning" of the rectangle
name|linePath
operator|.
name|closePath
argument_list|()
expr_stmt|;
block|}
comment|/**      * Generates AWT raster for a soft mask      *       * @param softMask soft mask      * @return AWT raster for soft mask      * @throws IOException      */
specifier|private
name|Raster
name|createSoftMaskRaster
parameter_list|(
name|PDSoftMask
name|softMask
parameter_list|)
throws|throws
name|IOException
block|{
name|TransparencyGroup
name|transparencyGroup
init|=
name|createTransparencyGroup
argument_list|(
name|softMask
operator|.
name|getGroup
argument_list|()
argument_list|)
decl_stmt|;
name|COSName
name|subtype
init|=
name|softMask
operator|.
name|getSubType
argument_list|()
decl_stmt|;
if|if
condition|(
name|COSName
operator|.
name|ALPHA
operator|.
name|equals
argument_list|(
name|subtype
argument_list|)
condition|)
block|{
return|return
name|transparencyGroup
operator|.
name|getAlphaRaster
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|COSName
operator|.
name|LUMINOSITY
operator|.
name|equals
argument_list|(
name|subtype
argument_list|)
condition|)
block|{
return|return
name|transparencyGroup
operator|.
name|getLuminosityRaster
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid soft mask subtype."
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Paint
name|applySoftMaskToPaint
parameter_list|(
name|Paint
name|parentPaint
parameter_list|,
name|PDSoftMask
name|softMask
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|softMask
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|SoftMaskPaint
argument_list|(
name|parentPaint
argument_list|,
name|createSoftMaskRaster
argument_list|(
name|softMask
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|parentPaint
return|;
block|}
block|}
comment|// returns the stroking AWT Paint
specifier|private
name|Paint
name|getStrokingPaint
parameter_list|()
throws|throws
name|IOException
block|{
name|PDGraphicsState
name|graphicsState
init|=
name|getGraphicsState
argument_list|()
decl_stmt|;
return|return
name|applySoftMaskToPaint
argument_list|(
name|graphicsState
operator|.
name|getStrokingColorSpace
argument_list|()
operator|.
name|toPaint
argument_list|(
name|renderer
argument_list|,
name|graphicsState
operator|.
name|getStrokingColor
argument_list|()
argument_list|,
name|getSubStreamMatrix
argument_list|()
argument_list|,
name|xform
argument_list|)
argument_list|,
name|graphicsState
operator|.
name|getSoftMask
argument_list|()
argument_list|)
return|;
block|}
comment|// returns the non-stroking AWT Paint
specifier|private
name|Paint
name|getNonStrokingPaint
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getGraphicsState
argument_list|()
operator|.
name|getNonStrokingColorSpace
argument_list|()
operator|.
name|toPaint
argument_list|(
name|renderer
argument_list|,
name|getGraphicsState
argument_list|()
operator|.
name|getNonStrokingColor
argument_list|()
argument_list|,
name|getSubStreamMatrix
argument_list|()
argument_list|,
name|xform
argument_list|)
return|;
block|}
comment|// create a new stroke based on the current CTM and the current stroke
specifier|private
name|BasicStroke
name|getStroke
parameter_list|()
block|{
name|PDGraphicsState
name|state
init|=
name|getGraphicsState
argument_list|()
decl_stmt|;
comment|// apply the CTM
name|float
name|lineWidth
init|=
name|transformWidth
argument_list|(
name|state
operator|.
name|getLineWidth
argument_list|()
argument_list|)
decl_stmt|;
comment|// minimum line width as used by Adobe Reader
if|if
condition|(
name|lineWidth
operator|<
literal|0.25
condition|)
block|{
name|lineWidth
operator|=
literal|0.25f
expr_stmt|;
block|}
name|PDLineDashPattern
name|dashPattern
init|=
name|state
operator|.
name|getLineDashPattern
argument_list|()
decl_stmt|;
name|int
name|phaseStart
init|=
name|dashPattern
operator|.
name|getPhase
argument_list|()
decl_stmt|;
name|float
index|[]
name|dashArray
init|=
name|dashPattern
operator|.
name|getDashArray
argument_list|()
decl_stmt|;
if|if
condition|(
name|dashArray
operator|!=
literal|null
condition|)
block|{
comment|// apply the CTM
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dashArray
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|dashArray
index|[
name|i
index|]
operator|=
name|transformWidth
argument_list|(
name|dashArray
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|phaseStart
operator|=
operator|(
name|int
operator|)
name|transformWidth
argument_list|(
name|phaseStart
argument_list|)
expr_stmt|;
comment|// empty dash array is illegal
if|if
condition|(
name|dashArray
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|dashArray
operator|=
literal|null
expr_stmt|;
block|}
block|}
return|return
operator|new
name|BasicStroke
argument_list|(
name|lineWidth
argument_list|,
name|state
operator|.
name|getLineCap
argument_list|()
argument_list|,
name|state
operator|.
name|getLineJoin
argument_list|()
argument_list|,
name|state
operator|.
name|getMiterLimit
argument_list|()
argument_list|,
name|dashArray
argument_list|,
name|phaseStart
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|strokePath
parameter_list|()
throws|throws
name|IOException
block|{
name|graphics
operator|.
name|setComposite
argument_list|(
name|getGraphicsState
argument_list|()
operator|.
name|getStrokingJavaComposite
argument_list|()
argument_list|)
expr_stmt|;
name|Paint
name|strokingPaint
init|=
name|getStrokingPaint
argument_list|()
decl_stmt|;
name|graphics
operator|.
name|setPaint
argument_list|(
name|strokingPaint
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|setStroke
argument_list|(
name|getStroke
argument_list|()
argument_list|)
expr_stmt|;
name|setClip
argument_list|()
expr_stmt|;
name|graphics
operator|.
name|draw
argument_list|(
name|linePath
argument_list|)
expr_stmt|;
name|linePath
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|fillPath
parameter_list|(
name|int
name|windingRule
parameter_list|)
throws|throws
name|IOException
block|{
name|graphics
operator|.
name|setComposite
argument_list|(
name|getGraphicsState
argument_list|()
operator|.
name|getNonStrokingJavaComposite
argument_list|()
argument_list|)
expr_stmt|;
name|Paint
name|nonStrokingPaint
init|=
name|getNonStrokingPaint
argument_list|()
decl_stmt|;
name|graphics
operator|.
name|setPaint
argument_list|(
name|nonStrokingPaint
argument_list|)
expr_stmt|;
name|setClip
argument_list|()
expr_stmt|;
name|linePath
operator|.
name|setWindingRule
argument_list|(
name|windingRule
argument_list|)
expr_stmt|;
comment|// disable anti-aliasing for rectangular paths, this is a workaround to avoid small stripes
comment|// which occur when solid fills are used to simulate piecewise gradients, see PDFBOX-2302
name|boolean
name|isRectangular
init|=
name|isRectangular
argument_list|(
name|linePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|isRectangular
condition|)
block|{
name|graphics
operator|.
name|setRenderingHint
argument_list|(
name|RenderingHints
operator|.
name|KEY_ANTIALIASING
argument_list|,
name|RenderingHints
operator|.
name|VALUE_ANTIALIAS_OFF
argument_list|)
expr_stmt|;
block|}
name|graphics
operator|.
name|fill
argument_list|(
name|linePath
argument_list|)
expr_stmt|;
name|linePath
operator|.
name|reset
argument_list|()
expr_stmt|;
if|if
condition|(
name|isRectangular
condition|)
block|{
comment|// JDK 1.7 has a bug where rendering hints are reset by the above call to
comment|// the setRenderingHint method, so we re-set all hints, see PDFBOX-2302
name|setRenderingHints
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Returns true if the given path is rectangular.      */
specifier|private
name|boolean
name|isRectangular
parameter_list|(
name|GeneralPath
name|path
parameter_list|)
block|{
name|PathIterator
name|iter
init|=
name|path
operator|.
name|getPathIterator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|double
index|[]
name|coords
init|=
operator|new
name|double
index|[
literal|6
index|]
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|int
index|[]
name|xs
init|=
operator|new
name|int
index|[
literal|4
index|]
decl_stmt|;
name|int
index|[]
name|ys
init|=
operator|new
name|int
index|[
literal|4
index|]
decl_stmt|;
while|while
condition|(
operator|!
name|iter
operator|.
name|isDone
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|iter
operator|.
name|currentSegment
argument_list|(
name|coords
argument_list|)
condition|)
block|{
case|case
name|PathIterator
operator|.
name|SEG_MOVETO
case|:
if|if
condition|(
name|count
operator|==
literal|0
condition|)
block|{
name|xs
index|[
name|count
index|]
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|coords
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|ys
index|[
name|count
index|]
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|coords
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
name|count
operator|++
expr_stmt|;
break|break;
case|case
name|PathIterator
operator|.
name|SEG_LINETO
case|:
if|if
condition|(
name|count
operator|<
literal|4
condition|)
block|{
name|xs
index|[
name|count
index|]
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|coords
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|ys
index|[
name|count
index|]
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|coords
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
name|count
operator|++
expr_stmt|;
break|break;
case|case
name|PathIterator
operator|.
name|SEG_CUBICTO
case|:
return|return
literal|false
return|;
case|case
name|PathIterator
operator|.
name|SEG_CLOSE
case|:
break|break;
block|}
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|count
operator|==
literal|4
condition|)
block|{
return|return
name|xs
index|[
literal|0
index|]
operator|==
name|xs
index|[
literal|1
index|]
operator|||
name|xs
index|[
literal|0
index|]
operator|==
name|xs
index|[
literal|2
index|]
operator|||
name|ys
index|[
literal|0
index|]
operator|==
name|ys
index|[
literal|1
index|]
operator|||
name|ys
index|[
literal|0
index|]
operator|==
name|ys
index|[
literal|3
index|]
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Fills and then strokes the path.      *      * @param windingRule The winding rule this path will use.      * @throws IOException If there is an IO error while filling the path.      */
annotation|@
name|Override
specifier|public
name|void
name|fillAndStrokePath
parameter_list|(
name|int
name|windingRule
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO can we avoid cloning the path?
name|GeneralPath
name|path
init|=
operator|(
name|GeneralPath
operator|)
name|linePath
operator|.
name|clone
argument_list|()
decl_stmt|;
name|fillPath
argument_list|(
name|windingRule
argument_list|)
expr_stmt|;
name|linePath
operator|=
name|path
expr_stmt|;
name|strokePath
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clip
parameter_list|(
name|int
name|windingRule
parameter_list|)
block|{
comment|// the clipping path will not be updated until the succeeding painting operator is called
name|clipWindingRule
operator|=
name|windingRule
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|moveTo
parameter_list|(
name|float
name|x
parameter_list|,
name|float
name|y
parameter_list|)
block|{
name|linePath
operator|.
name|moveTo
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|lineTo
parameter_list|(
name|float
name|x
parameter_list|,
name|float
name|y
parameter_list|)
block|{
name|linePath
operator|.
name|lineTo
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|curveTo
parameter_list|(
name|float
name|x1
parameter_list|,
name|float
name|y1
parameter_list|,
name|float
name|x2
parameter_list|,
name|float
name|y2
parameter_list|,
name|float
name|x3
parameter_list|,
name|float
name|y3
parameter_list|)
block|{
name|linePath
operator|.
name|curveTo
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|x3
argument_list|,
name|y3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Point2D
name|getCurrentPoint
parameter_list|()
block|{
return|return
name|linePath
operator|.
name|getCurrentPoint
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|closePath
parameter_list|()
block|{
name|linePath
operator|.
name|closePath
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|endPath
parameter_list|()
block|{
if|if
condition|(
name|clipWindingRule
operator|!=
operator|-
literal|1
condition|)
block|{
name|linePath
operator|.
name|setWindingRule
argument_list|(
name|clipWindingRule
argument_list|)
expr_stmt|;
name|getGraphicsState
argument_list|()
operator|.
name|intersectClippingPath
argument_list|(
name|linePath
argument_list|)
expr_stmt|;
name|clipWindingRule
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|linePath
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|drawImage
parameter_list|(
name|PDImage
name|pdImage
parameter_list|)
throws|throws
name|IOException
block|{
name|Matrix
name|ctm
init|=
name|getGraphicsState
argument_list|()
operator|.
name|getCurrentTransformationMatrix
argument_list|()
decl_stmt|;
name|AffineTransform
name|at
init|=
name|ctm
operator|.
name|createAffineTransform
argument_list|()
decl_stmt|;
if|if
condition|(
name|pdImage
operator|.
name|isStencil
argument_list|()
condition|)
block|{
comment|// fill the image with paint
name|PDColorSpace
name|colorSpace
init|=
name|getGraphicsState
argument_list|()
operator|.
name|getNonStrokingColorSpace
argument_list|()
decl_stmt|;
name|PDColor
name|color
init|=
name|getGraphicsState
argument_list|()
operator|.
name|getNonStrokingColor
argument_list|()
decl_stmt|;
name|BufferedImage
name|image
init|=
name|pdImage
operator|.
name|getStencilImage
argument_list|(
name|colorSpace
operator|.
name|toPaint
argument_list|(
name|renderer
argument_list|,
name|color
argument_list|,
name|getSubStreamMatrix
argument_list|()
argument_list|,
name|xform
argument_list|)
argument_list|)
decl_stmt|;
comment|// draw the image
name|drawBufferedImage
argument_list|(
name|image
argument_list|,
name|at
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|pdImage
operator|.
name|getInterpolate
argument_list|()
condition|)
block|{
name|boolean
name|isScaledUp
init|=
name|Math
operator|.
name|round
argument_list|(
name|pdImage
operator|.
name|getWidth
argument_list|()
argument_list|)
operator|<
name|Math
operator|.
name|round
argument_list|(
name|at
operator|.
name|getScaleX
argument_list|()
argument_list|)
operator|||
name|Math
operator|.
name|round
argument_list|(
name|pdImage
operator|.
name|getHeight
argument_list|()
argument_list|)
operator|<
name|Math
operator|.
name|round
argument_list|(
name|at
operator|.
name|getScaleY
argument_list|()
argument_list|)
decl_stmt|;
comment|// if the image is scaled down, we use smooth interpolation, eg PDFBOX-2364
comment|// only when scaled up do we use nearest neighbour, eg PDFBOX-2302 / mori-cvpr01.pdf
if|if
condition|(
name|isScaledUp
condition|)
block|{
name|graphics
operator|.
name|setRenderingHint
argument_list|(
name|RenderingHints
operator|.
name|KEY_INTERPOLATION
argument_list|,
name|RenderingHints
operator|.
name|VALUE_INTERPOLATION_NEAREST_NEIGHBOR
argument_list|)
expr_stmt|;
block|}
block|}
comment|// draw the image
name|drawBufferedImage
argument_list|(
name|pdImage
operator|.
name|getImage
argument_list|()
argument_list|,
name|at
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|pdImage
operator|.
name|getInterpolate
argument_list|()
condition|)
block|{
comment|// JDK 1.7 has a bug where rendering hints are reset by the above call to
comment|// the setRenderingHint method, so we re-set all hints, see PDFBOX-2302
name|setRenderingHints
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|drawBufferedImage
parameter_list|(
name|BufferedImage
name|image
parameter_list|,
name|AffineTransform
name|at
parameter_list|)
throws|throws
name|IOException
block|{
name|graphics
operator|.
name|setComposite
argument_list|(
name|getGraphicsState
argument_list|()
operator|.
name|getNonStrokingJavaComposite
argument_list|()
argument_list|)
expr_stmt|;
name|setClip
argument_list|()
expr_stmt|;
name|PDSoftMask
name|softMask
init|=
name|getGraphicsState
argument_list|()
operator|.
name|getSoftMask
argument_list|()
decl_stmt|;
if|if
condition|(
name|softMask
operator|!=
literal|null
condition|)
block|{
name|AffineTransform
name|imageTransform
init|=
operator|new
name|AffineTransform
argument_list|(
name|at
argument_list|)
decl_stmt|;
name|imageTransform
operator|.
name|scale
argument_list|(
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|imageTransform
operator|.
name|translate
argument_list|(
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Paint
name|awtPaint
init|=
operator|new
name|TexturePaint
argument_list|(
name|image
argument_list|,
operator|new
name|Rectangle2D
operator|.
name|Double
argument_list|(
name|imageTransform
operator|.
name|getTranslateX
argument_list|()
argument_list|,
name|imageTransform
operator|.
name|getTranslateY
argument_list|()
argument_list|,
name|imageTransform
operator|.
name|getScaleX
argument_list|()
argument_list|,
name|imageTransform
operator|.
name|getScaleY
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|awtPaint
operator|=
name|applySoftMaskToPaint
argument_list|(
name|awtPaint
argument_list|,
name|softMask
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|setPaint
argument_list|(
name|awtPaint
argument_list|)
expr_stmt|;
name|Rectangle2D
name|unitRect
init|=
operator|new
name|Rectangle2D
operator|.
name|Float
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|graphics
operator|.
name|fill
argument_list|(
name|at
operator|.
name|createTransformedShape
argument_list|(
name|unitRect
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|width
init|=
name|image
operator|.
name|getWidth
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|int
name|height
init|=
name|image
operator|.
name|getHeight
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|AffineTransform
name|imageTransform
init|=
operator|new
name|AffineTransform
argument_list|(
name|at
argument_list|)
decl_stmt|;
name|imageTransform
operator|.
name|scale
argument_list|(
literal|1.0
operator|/
name|width
argument_list|,
operator|-
literal|1.0
operator|/
name|height
argument_list|)
expr_stmt|;
name|imageTransform
operator|.
name|translate
argument_list|(
literal|0
argument_list|,
operator|-
name|height
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|drawImage
argument_list|(
name|image
argument_list|,
name|imageTransform
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|shadingFill
parameter_list|(
name|COSName
name|shadingName
parameter_list|)
throws|throws
name|IOException
block|{
name|PDShading
name|shading
init|=
name|getResources
argument_list|()
operator|.
name|getShadings
argument_list|()
operator|.
name|get
argument_list|(
name|shadingName
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Matrix
name|ctm
init|=
name|getGraphicsState
argument_list|()
operator|.
name|getCurrentTransformationMatrix
argument_list|()
decl_stmt|;
name|Paint
name|paint
init|=
name|shading
operator|.
name|toPaint
argument_list|(
name|ctm
argument_list|)
decl_stmt|;
name|graphics
operator|.
name|setComposite
argument_list|(
name|getGraphicsState
argument_list|()
operator|.
name|getNonStrokingJavaComposite
argument_list|()
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|setPaint
argument_list|(
name|paint
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|setClip
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|lastClip
operator|=
literal|null
expr_stmt|;
name|graphics
operator|.
name|fill
argument_list|(
name|getGraphicsState
argument_list|()
operator|.
name|getCurrentClippingPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|showTransparencyGroup
parameter_list|(
name|PDFormXObject
name|form
parameter_list|)
throws|throws
name|IOException
block|{
name|TransparencyGroup
name|group
init|=
name|createTransparencyGroup
argument_list|(
name|form
argument_list|)
decl_stmt|;
name|group
operator|.
name|draw
argument_list|()
expr_stmt|;
block|}
specifier|private
name|TransparencyGroup
name|createTransparencyGroup
parameter_list|(
name|PDFormXObject
name|form
parameter_list|)
throws|throws
name|IOException
block|{
name|saveGraphicsState
argument_list|()
expr_stmt|;
try|try
block|{
name|PDResources
name|pdResources
init|=
name|form
operator|.
name|getResources
argument_list|()
decl_stmt|;
if|if
condition|(
name|pdResources
operator|==
literal|null
condition|)
block|{
name|pdResources
operator|=
name|getResources
argument_list|()
expr_stmt|;
block|}
comment|// if there is an optional form matrix, we have to map the form space to the user space
name|Matrix
name|matrix
init|=
name|form
operator|.
name|getMatrix
argument_list|()
decl_stmt|;
if|if
condition|(
name|matrix
operator|!=
literal|null
condition|)
block|{
name|Matrix
name|xCTM
init|=
name|matrix
operator|.
name|multiply
argument_list|(
name|getGraphicsState
argument_list|()
operator|.
name|getCurrentTransformationMatrix
argument_list|()
argument_list|)
decl_stmt|;
name|getGraphicsState
argument_list|()
operator|.
name|setCurrentTransformationMatrix
argument_list|(
name|xCTM
argument_list|)
expr_stmt|;
block|}
name|PDRectangle
name|bBox
init|=
name|form
operator|.
name|getBBox
argument_list|()
decl_stmt|;
name|GeneralPath
name|path
init|=
name|transformedPDRectanglePath
argument_list|(
name|bBox
argument_list|)
decl_stmt|;
return|return
operator|new
name|TransparencyGroup
argument_list|(
name|path
argument_list|,
name|pdResources
argument_list|,
name|form
operator|.
name|getCOSStream
argument_list|()
argument_list|)
return|;
block|}
finally|finally
block|{
name|restoreGraphicsState
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Transparency group.      **/
specifier|private
specifier|final
class|class
name|TransparencyGroup
block|{
specifier|private
specifier|final
name|BufferedImage
name|image
decl_stmt|;
specifier|private
specifier|final
name|Matrix
name|matrix
decl_stmt|;
specifier|private
specifier|final
name|int
name|minX
decl_stmt|;
specifier|private
specifier|final
name|int
name|minY
decl_stmt|;
specifier|private
specifier|final
name|int
name|width
decl_stmt|;
specifier|private
specifier|final
name|int
name|height
decl_stmt|;
comment|/**          * Creates a buffered image for a transparency group result.          *          * @param clippingPath clipping path (in current graphics2D coordinates)          * @param resources Global resources          * @param content Content of the transparency group to create          */
specifier|private
name|TransparencyGroup
parameter_list|(
name|GeneralPath
name|clippingPath
parameter_list|,
name|PDResources
name|resources
parameter_list|,
name|COSStream
name|content
parameter_list|)
throws|throws
name|IOException
block|{
name|Graphics2D
name|g2dOriginal
init|=
name|graphics
decl_stmt|;
name|Area
name|lastClipOriginal
init|=
name|lastClip
decl_stmt|;
comment|// check underlying g2d
name|Area
name|groupClip
init|=
operator|new
name|Area
argument_list|(
name|getGraphicsState
argument_list|()
operator|.
name|getCurrentClippingPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|clippingPath
operator|!=
literal|null
condition|)
block|{
name|Area
name|newArea
init|=
operator|new
name|Area
argument_list|(
name|clippingPath
argument_list|)
decl_stmt|;
name|groupClip
operator|.
name|intersect
argument_list|(
name|newArea
argument_list|)
expr_stmt|;
block|}
name|AffineTransform
name|at
init|=
name|g2dOriginal
operator|.
name|getTransform
argument_list|()
decl_stmt|;
name|Shape
name|clippingPathInPixels
init|=
name|at
operator|.
name|createTransformedShape
argument_list|(
name|groupClip
argument_list|)
decl_stmt|;
name|Rectangle2D
name|bounds2D
init|=
name|clippingPathInPixels
operator|.
name|getBounds2D
argument_list|()
decl_stmt|;
name|minX
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|bounds2D
operator|.
name|getMinX
argument_list|()
argument_list|)
expr_stmt|;
name|minY
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|bounds2D
operator|.
name|getMinY
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|maxX
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|bounds2D
operator|.
name|getMaxX
argument_list|()
argument_list|)
operator|+
literal|1
decl_stmt|;
name|int
name|maxY
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|bounds2D
operator|.
name|getMaxY
argument_list|()
argument_list|)
operator|+
literal|1
decl_stmt|;
name|width
operator|=
name|maxX
operator|-
name|minX
expr_stmt|;
name|height
operator|=
name|maxY
operator|-
name|minY
expr_stmt|;
name|image
operator|=
operator|new
name|BufferedImage
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|BufferedImage
operator|.
name|TYPE_INT_ARGB
argument_list|)
expr_stmt|;
comment|// FIXME - color space
name|Graphics2D
name|g
init|=
name|image
operator|.
name|createGraphics
argument_list|()
decl_stmt|;
name|g
operator|.
name|translate
argument_list|(
operator|-
name|minX
argument_list|,
operator|-
name|minY
argument_list|)
expr_stmt|;
name|g
operator|.
name|transform
argument_list|(
name|at
argument_list|)
expr_stmt|;
name|g
operator|.
name|setClip
argument_list|(
name|groupClip
argument_list|)
expr_stmt|;
name|AffineTransform
name|atInv
decl_stmt|;
name|Matrix
name|matrix1
init|=
literal|null
decl_stmt|;
try|try
block|{
name|atInv
operator|=
name|g
operator|.
name|getTransform
argument_list|()
operator|.
name|createInverse
argument_list|()
expr_stmt|;
name|atInv
operator|.
name|scale
argument_list|(
name|width
argument_list|,
operator|-
name|height
argument_list|)
expr_stmt|;
name|atInv
operator|.
name|translate
argument_list|(
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|matrix1
operator|=
operator|new
name|Matrix
argument_list|()
expr_stmt|;
name|matrix1
operator|.
name|setFromAffineTransform
argument_list|(
name|atInv
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoninvertibleTransformException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Non-invertible transform when rendering a transparency group."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|matrix
operator|=
name|matrix1
expr_stmt|;
name|PDGraphicsState
name|state
init|=
name|getGraphicsState
argument_list|()
decl_stmt|;
name|state
operator|.
name|setBlendMode
argument_list|(
name|BlendMode
operator|.
name|NORMAL
argument_list|)
expr_stmt|;
name|state
operator|.
name|setAlphaConstants
argument_list|(
literal|1.0
argument_list|)
expr_stmt|;
name|state
operator|.
name|setNonStrokeAlphaConstants
argument_list|(
literal|1.0
argument_list|)
expr_stmt|;
name|state
operator|.
name|setSoftMask
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|graphics
operator|=
name|g
expr_stmt|;
try|try
block|{
name|processSubStream
argument_list|(
name|resources
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lastClip
operator|=
name|lastClipOriginal
expr_stmt|;
name|graphics
operator|.
name|dispose
argument_list|()
expr_stmt|;
comment|// TODO: BUG: Don't do this!
name|graphics
operator|=
name|g2dOriginal
expr_stmt|;
block|}
block|}
specifier|public
name|BufferedImage
name|getImage
parameter_list|()
block|{
return|return
name|image
return|;
block|}
specifier|public
name|Matrix
name|getMatrix
parameter_list|()
block|{
return|return
name|matrix
return|;
block|}
specifier|public
name|void
name|draw
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|matrix
operator|!=
literal|null
condition|)
block|{
name|saveGraphicsState
argument_list|()
expr_stmt|;
name|drawBufferedImage
argument_list|(
name|image
argument_list|,
name|matrix
operator|.
name|createAffineTransform
argument_list|()
argument_list|)
expr_stmt|;
name|restoreGraphicsState
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|Raster
name|getAlphaRaster
parameter_list|()
block|{
return|return
name|image
operator|.
name|getAlphaRaster
argument_list|()
operator|.
name|createTranslatedChild
argument_list|(
name|minX
argument_list|,
name|minY
argument_list|)
return|;
block|}
specifier|public
name|Raster
name|getLuminosityRaster
parameter_list|()
block|{
name|BufferedImage
name|gray
init|=
operator|new
name|BufferedImage
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|BufferedImage
operator|.
name|TYPE_BYTE_GRAY
argument_list|)
decl_stmt|;
name|Graphics
name|g
init|=
name|gray
operator|.
name|getGraphics
argument_list|()
decl_stmt|;
name|g
operator|.
name|drawImage
argument_list|(
name|image
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|g
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|WritableRaster
name|result
init|=
name|gray
operator|.
name|getRaster
argument_list|()
decl_stmt|;
return|return
name|result
operator|.
name|createTranslatedChild
argument_list|(
name|minX
argument_list|,
name|minY
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

