begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|rendering
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Font
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|FontMetrics
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Graphics
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Graphics2D
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|GraphicsConfiguration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Image
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Paint
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Rectangle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|RenderingHints
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Shape
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Stroke
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|font
operator|.
name|FontRenderContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|font
operator|.
name|GlyphVector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|AffineTransform
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|BufferedImage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|BufferedImageOp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|DataBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|DataBufferInt
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|ImageObserver
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|RenderedImage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|renderable
operator|.
name|RenderableImage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|AttributedCharacterIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Graphics implementation for non-isolated transparency groups.  *<p>  * Non-isolated groups require that the group backdrop (copied from parent group or  * page) is used as the initial contents of the image to which the group is rendered.  * This allows blend modes to blend the group contents with the graphics behind  * the group. Finally when the group rendering is done, backdrop removal must be  * computed (see {@link #removeBackdrop(java.awt.image.BufferedImage, int, int) removeBackdrop}).  * It ensures the backdrop is not rendered twice on the parent but it leaves the  * effects of blend modes.  *<p>  * This class renders the group contents to two images.<code>groupImage</code> is  * initialized with the backdrop and group contents are drawn over it.  *<code>groupAlphaImage</code> is initially fully transparent and it accumulates  * the total alpha of the group contents excluding backdrop.  *<p>  * If a non-isolated group uses only the blend mode Normal, it can be optimized  * and rendered like an isolated group; backdrop usage and removal are not needed.  */
end_comment

begin_class
class|class
name|GroupGraphics
extends|extends
name|Graphics2D
block|{
specifier|private
specifier|final
name|BufferedImage
name|groupImage
decl_stmt|;
specifier|private
specifier|final
name|BufferedImage
name|groupAlphaImage
decl_stmt|;
specifier|private
specifier|final
name|Graphics2D
name|groupGraphics
decl_stmt|;
specifier|private
specifier|final
name|Graphics2D
name|alphaGraphics
decl_stmt|;
name|GroupGraphics
parameter_list|(
name|BufferedImage
name|groupImage
parameter_list|,
name|Graphics2D
name|groupGraphics
parameter_list|)
block|{
name|this
operator|.
name|groupImage
operator|=
name|groupImage
expr_stmt|;
name|this
operator|.
name|groupGraphics
operator|=
name|groupGraphics
expr_stmt|;
name|this
operator|.
name|groupAlphaImage
operator|=
operator|new
name|BufferedImage
argument_list|(
name|groupImage
operator|.
name|getWidth
argument_list|()
argument_list|,
name|groupImage
operator|.
name|getHeight
argument_list|()
argument_list|,
name|BufferedImage
operator|.
name|TYPE_INT_ARGB
argument_list|)
expr_stmt|;
name|this
operator|.
name|alphaGraphics
operator|=
name|groupAlphaImage
operator|.
name|createGraphics
argument_list|()
expr_stmt|;
block|}
specifier|private
name|GroupGraphics
parameter_list|(
name|BufferedImage
name|groupImage
parameter_list|,
name|Graphics2D
name|groupGraphics
parameter_list|,
name|BufferedImage
name|groupAlphaImage
parameter_list|,
name|Graphics2D
name|alphaGraphics
parameter_list|)
block|{
name|this
operator|.
name|groupImage
operator|=
name|groupImage
expr_stmt|;
name|this
operator|.
name|groupGraphics
operator|=
name|groupGraphics
expr_stmt|;
name|this
operator|.
name|groupAlphaImage
operator|=
name|groupAlphaImage
expr_stmt|;
name|this
operator|.
name|alphaGraphics
operator|=
name|alphaGraphics
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clearRect
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|)
block|{
name|groupGraphics
operator|.
name|clearRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|alphaGraphics
operator|.
name|clearRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clipRect
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|)
block|{
name|groupGraphics
operator|.
name|clipRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|alphaGraphics
operator|.
name|clipRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|copyArea
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|)
block|{
name|groupGraphics
operator|.
name|copyArea
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|)
expr_stmt|;
name|alphaGraphics
operator|.
name|copyArea
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Graphics
name|create
parameter_list|()
block|{
name|Graphics
name|g
init|=
name|groupGraphics
operator|.
name|create
argument_list|()
decl_stmt|;
name|Graphics
name|a
init|=
name|alphaGraphics
operator|.
name|create
argument_list|()
decl_stmt|;
if|if
condition|(
name|g
operator|instanceof
name|Graphics2D
operator|&&
name|a
operator|instanceof
name|Graphics2D
condition|)
block|{
return|return
operator|new
name|GroupGraphics
argument_list|(
name|groupImage
argument_list|,
operator|(
name|Graphics2D
operator|)
name|g
argument_list|,
name|groupAlphaImage
argument_list|,
operator|(
name|Graphics2D
operator|)
name|a
argument_list|)
return|;
block|}
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dispose
parameter_list|()
block|{
name|groupGraphics
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|alphaGraphics
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|drawArc
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
name|int
name|startAngle
parameter_list|,
name|int
name|arcAngle
parameter_list|)
block|{
name|groupGraphics
operator|.
name|drawArc
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|startAngle
argument_list|,
name|arcAngle
argument_list|)
expr_stmt|;
name|alphaGraphics
operator|.
name|drawArc
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|startAngle
argument_list|,
name|arcAngle
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|drawImage
parameter_list|(
name|Image
name|img
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|Color
name|bgcolor
parameter_list|,
name|ImageObserver
name|observer
parameter_list|)
block|{
name|groupGraphics
operator|.
name|drawImage
argument_list|(
name|img
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|bgcolor
argument_list|,
name|observer
argument_list|)
expr_stmt|;
return|return
name|alphaGraphics
operator|.
name|drawImage
argument_list|(
name|img
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|bgcolor
argument_list|,
name|observer
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|drawImage
parameter_list|(
name|Image
name|img
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|ImageObserver
name|observer
parameter_list|)
block|{
name|groupGraphics
operator|.
name|drawImage
argument_list|(
name|img
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|observer
argument_list|)
expr_stmt|;
return|return
name|alphaGraphics
operator|.
name|drawImage
argument_list|(
name|img
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|observer
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|drawImage
parameter_list|(
name|Image
name|img
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
name|Color
name|bgcolor
parameter_list|,
name|ImageObserver
name|observer
parameter_list|)
block|{
name|groupGraphics
operator|.
name|drawImage
argument_list|(
name|img
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|bgcolor
argument_list|,
name|observer
argument_list|)
expr_stmt|;
return|return
name|alphaGraphics
operator|.
name|drawImage
argument_list|(
name|img
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|bgcolor
argument_list|,
name|observer
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|drawImage
parameter_list|(
name|Image
name|img
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
name|ImageObserver
name|observer
parameter_list|)
block|{
name|groupGraphics
operator|.
name|drawImage
argument_list|(
name|img
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|observer
argument_list|)
expr_stmt|;
return|return
name|alphaGraphics
operator|.
name|drawImage
argument_list|(
name|img
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|observer
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|drawImage
parameter_list|(
name|Image
name|img
parameter_list|,
name|int
name|dx1
parameter_list|,
name|int
name|dy1
parameter_list|,
name|int
name|dx2
parameter_list|,
name|int
name|dy2
parameter_list|,
name|int
name|sx1
parameter_list|,
name|int
name|sy1
parameter_list|,
name|int
name|sx2
parameter_list|,
name|int
name|sy2
parameter_list|,
name|Color
name|bgcolor
parameter_list|,
name|ImageObserver
name|observer
parameter_list|)
block|{
name|groupGraphics
operator|.
name|drawImage
argument_list|(
name|img
argument_list|,
name|dx1
argument_list|,
name|dy1
argument_list|,
name|dx2
argument_list|,
name|dy2
argument_list|,
name|sx1
argument_list|,
name|sy1
argument_list|,
name|sx2
argument_list|,
name|sy2
argument_list|,
name|bgcolor
argument_list|,
name|observer
argument_list|)
expr_stmt|;
return|return
name|alphaGraphics
operator|.
name|drawImage
argument_list|(
name|img
argument_list|,
name|dx1
argument_list|,
name|dy1
argument_list|,
name|dx2
argument_list|,
name|dy2
argument_list|,
name|sx1
argument_list|,
name|sy1
argument_list|,
name|sx2
argument_list|,
name|sy2
argument_list|,
name|bgcolor
argument_list|,
name|observer
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|drawImage
parameter_list|(
name|Image
name|img
parameter_list|,
name|int
name|dx1
parameter_list|,
name|int
name|dy1
parameter_list|,
name|int
name|dx2
parameter_list|,
name|int
name|dy2
parameter_list|,
name|int
name|sx1
parameter_list|,
name|int
name|sy1
parameter_list|,
name|int
name|sx2
parameter_list|,
name|int
name|sy2
parameter_list|,
name|ImageObserver
name|observer
parameter_list|)
block|{
name|groupGraphics
operator|.
name|drawImage
argument_list|(
name|img
argument_list|,
name|dx1
argument_list|,
name|dy1
argument_list|,
name|dx2
argument_list|,
name|dy2
argument_list|,
name|sx1
argument_list|,
name|sy1
argument_list|,
name|sx2
argument_list|,
name|sy2
argument_list|,
name|observer
argument_list|)
expr_stmt|;
return|return
name|alphaGraphics
operator|.
name|drawImage
argument_list|(
name|img
argument_list|,
name|dx1
argument_list|,
name|dy1
argument_list|,
name|dx2
argument_list|,
name|dy2
argument_list|,
name|sx1
argument_list|,
name|sy1
argument_list|,
name|sx2
argument_list|,
name|sy2
argument_list|,
name|observer
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|drawLine
parameter_list|(
name|int
name|x1
parameter_list|,
name|int
name|y1
parameter_list|,
name|int
name|x2
parameter_list|,
name|int
name|y2
parameter_list|)
block|{
name|groupGraphics
operator|.
name|drawLine
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|alphaGraphics
operator|.
name|drawLine
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|drawOval
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|)
block|{
name|groupGraphics
operator|.
name|drawOval
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|alphaGraphics
operator|.
name|drawOval
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|drawPolygon
parameter_list|(
name|int
index|[]
name|xPoints
parameter_list|,
name|int
index|[]
name|yPoints
parameter_list|,
name|int
name|nPoints
parameter_list|)
block|{
name|groupGraphics
operator|.
name|drawPolygon
argument_list|(
name|xPoints
argument_list|,
name|yPoints
argument_list|,
name|nPoints
argument_list|)
expr_stmt|;
name|alphaGraphics
operator|.
name|drawPolygon
argument_list|(
name|xPoints
argument_list|,
name|yPoints
argument_list|,
name|nPoints
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|drawPolyline
parameter_list|(
name|int
index|[]
name|xPoints
parameter_list|,
name|int
index|[]
name|yPoints
parameter_list|,
name|int
name|nPoints
parameter_list|)
block|{
name|groupGraphics
operator|.
name|drawPolyline
argument_list|(
name|xPoints
argument_list|,
name|yPoints
argument_list|,
name|nPoints
argument_list|)
expr_stmt|;
name|alphaGraphics
operator|.
name|drawPolyline
argument_list|(
name|xPoints
argument_list|,
name|yPoints
argument_list|,
name|nPoints
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|drawRoundRect
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
name|int
name|arcWidth
parameter_list|,
name|int
name|arcHeight
parameter_list|)
block|{
name|groupGraphics
operator|.
name|drawRoundRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|arcWidth
argument_list|,
name|arcHeight
argument_list|)
expr_stmt|;
name|alphaGraphics
operator|.
name|drawRoundRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|arcWidth
argument_list|,
name|arcHeight
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|drawString
parameter_list|(
name|AttributedCharacterIterator
name|iterator
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
block|{
name|groupGraphics
operator|.
name|drawString
argument_list|(
name|iterator
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|alphaGraphics
operator|.
name|drawString
argument_list|(
name|iterator
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|drawString
parameter_list|(
name|String
name|str
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
block|{
name|groupGraphics
operator|.
name|drawString
argument_list|(
name|str
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|alphaGraphics
operator|.
name|drawString
argument_list|(
name|str
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|fillArc
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
name|int
name|startAngle
parameter_list|,
name|int
name|arcAngle
parameter_list|)
block|{
name|groupGraphics
operator|.
name|fillArc
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|startAngle
argument_list|,
name|arcAngle
argument_list|)
expr_stmt|;
name|alphaGraphics
operator|.
name|fillArc
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|startAngle
argument_list|,
name|arcAngle
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|fillOval
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|)
block|{
name|groupGraphics
operator|.
name|fillOval
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|alphaGraphics
operator|.
name|fillOval
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|fillPolygon
parameter_list|(
name|int
index|[]
name|xPoints
parameter_list|,
name|int
index|[]
name|yPoints
parameter_list|,
name|int
name|nPoints
parameter_list|)
block|{
name|groupGraphics
operator|.
name|fillPolygon
argument_list|(
name|xPoints
argument_list|,
name|yPoints
argument_list|,
name|nPoints
argument_list|)
expr_stmt|;
name|alphaGraphics
operator|.
name|fillPolygon
argument_list|(
name|xPoints
argument_list|,
name|yPoints
argument_list|,
name|nPoints
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|fillRect
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|)
block|{
name|groupGraphics
operator|.
name|fillRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|alphaGraphics
operator|.
name|fillRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|fillRoundRect
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
name|int
name|arcWidth
parameter_list|,
name|int
name|arcHeight
parameter_list|)
block|{
name|groupGraphics
operator|.
name|fillRoundRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|arcWidth
argument_list|,
name|arcHeight
argument_list|)
expr_stmt|;
name|alphaGraphics
operator|.
name|fillRoundRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|arcWidth
argument_list|,
name|arcHeight
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Shape
name|getClip
parameter_list|()
block|{
return|return
name|groupGraphics
operator|.
name|getClip
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Rectangle
name|getClipBounds
parameter_list|()
block|{
return|return
name|groupGraphics
operator|.
name|getClipBounds
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Color
name|getColor
parameter_list|()
block|{
return|return
name|groupGraphics
operator|.
name|getColor
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Font
name|getFont
parameter_list|()
block|{
return|return
name|groupGraphics
operator|.
name|getFont
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|FontMetrics
name|getFontMetrics
parameter_list|(
name|Font
name|f
parameter_list|)
block|{
return|return
name|groupGraphics
operator|.
name|getFontMetrics
argument_list|(
name|f
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setClip
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|)
block|{
name|groupGraphics
operator|.
name|setClip
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|alphaGraphics
operator|.
name|setClip
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setClip
parameter_list|(
name|Shape
name|clip
parameter_list|)
block|{
name|groupGraphics
operator|.
name|setClip
argument_list|(
name|clip
argument_list|)
expr_stmt|;
name|alphaGraphics
operator|.
name|setClip
argument_list|(
name|clip
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setColor
parameter_list|(
name|Color
name|c
parameter_list|)
block|{
name|groupGraphics
operator|.
name|setColor
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|alphaGraphics
operator|.
name|setColor
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setFont
parameter_list|(
name|Font
name|font
parameter_list|)
block|{
name|groupGraphics
operator|.
name|setFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
name|alphaGraphics
operator|.
name|setFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setPaintMode
parameter_list|()
block|{
name|groupGraphics
operator|.
name|setPaintMode
argument_list|()
expr_stmt|;
name|alphaGraphics
operator|.
name|setPaintMode
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setXORMode
parameter_list|(
name|Color
name|c1
parameter_list|)
block|{
name|groupGraphics
operator|.
name|setXORMode
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|alphaGraphics
operator|.
name|setXORMode
argument_list|(
name|c1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|translate
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
block|{
name|groupGraphics
operator|.
name|translate
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|alphaGraphics
operator|.
name|translate
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addRenderingHints
parameter_list|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|hints
parameter_list|)
block|{
name|groupGraphics
operator|.
name|addRenderingHints
argument_list|(
name|hints
argument_list|)
expr_stmt|;
name|alphaGraphics
operator|.
name|addRenderingHints
argument_list|(
name|hints
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clip
parameter_list|(
name|Shape
name|s
parameter_list|)
block|{
name|groupGraphics
operator|.
name|clip
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|alphaGraphics
operator|.
name|clip
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|draw
parameter_list|(
name|Shape
name|s
parameter_list|)
block|{
name|groupGraphics
operator|.
name|draw
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|alphaGraphics
operator|.
name|draw
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|drawGlyphVector
parameter_list|(
name|GlyphVector
name|g
parameter_list|,
name|float
name|x
parameter_list|,
name|float
name|y
parameter_list|)
block|{
name|groupGraphics
operator|.
name|drawGlyphVector
argument_list|(
name|g
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|alphaGraphics
operator|.
name|drawGlyphVector
argument_list|(
name|g
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|drawImage
parameter_list|(
name|BufferedImage
name|img
parameter_list|,
name|BufferedImageOp
name|op
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
block|{
name|groupGraphics
operator|.
name|drawImage
argument_list|(
name|img
argument_list|,
name|op
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|alphaGraphics
operator|.
name|drawImage
argument_list|(
name|img
argument_list|,
name|op
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|drawImage
parameter_list|(
name|Image
name|img
parameter_list|,
name|AffineTransform
name|xform
parameter_list|,
name|ImageObserver
name|obs
parameter_list|)
block|{
name|groupGraphics
operator|.
name|drawImage
argument_list|(
name|img
argument_list|,
name|xform
argument_list|,
name|obs
argument_list|)
expr_stmt|;
return|return
name|alphaGraphics
operator|.
name|drawImage
argument_list|(
name|img
argument_list|,
name|xform
argument_list|,
name|obs
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|drawRenderableImage
parameter_list|(
name|RenderableImage
name|img
parameter_list|,
name|AffineTransform
name|xform
parameter_list|)
block|{
name|groupGraphics
operator|.
name|drawRenderableImage
argument_list|(
name|img
argument_list|,
name|xform
argument_list|)
expr_stmt|;
name|alphaGraphics
operator|.
name|drawRenderableImage
argument_list|(
name|img
argument_list|,
name|xform
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|drawRenderedImage
parameter_list|(
name|RenderedImage
name|img
parameter_list|,
name|AffineTransform
name|xform
parameter_list|)
block|{
name|groupGraphics
operator|.
name|drawRenderedImage
argument_list|(
name|img
argument_list|,
name|xform
argument_list|)
expr_stmt|;
name|alphaGraphics
operator|.
name|drawRenderedImage
argument_list|(
name|img
argument_list|,
name|xform
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|drawString
parameter_list|(
name|AttributedCharacterIterator
name|iterator
parameter_list|,
name|float
name|x
parameter_list|,
name|float
name|y
parameter_list|)
block|{
name|groupGraphics
operator|.
name|drawString
argument_list|(
name|iterator
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|alphaGraphics
operator|.
name|drawString
argument_list|(
name|iterator
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|drawString
parameter_list|(
name|String
name|str
parameter_list|,
name|float
name|x
parameter_list|,
name|float
name|y
parameter_list|)
block|{
name|groupGraphics
operator|.
name|drawString
argument_list|(
name|str
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|alphaGraphics
operator|.
name|drawString
argument_list|(
name|str
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|fill
parameter_list|(
name|Shape
name|s
parameter_list|)
block|{
name|groupGraphics
operator|.
name|fill
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|alphaGraphics
operator|.
name|fill
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Color
name|getBackground
parameter_list|()
block|{
return|return
name|groupGraphics
operator|.
name|getBackground
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Composite
name|getComposite
parameter_list|()
block|{
return|return
name|groupGraphics
operator|.
name|getComposite
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|GraphicsConfiguration
name|getDeviceConfiguration
parameter_list|()
block|{
return|return
name|groupGraphics
operator|.
name|getDeviceConfiguration
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|FontRenderContext
name|getFontRenderContext
parameter_list|()
block|{
return|return
name|groupGraphics
operator|.
name|getFontRenderContext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Paint
name|getPaint
parameter_list|()
block|{
return|return
name|groupGraphics
operator|.
name|getPaint
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getRenderingHint
parameter_list|(
name|RenderingHints
operator|.
name|Key
name|hintKey
parameter_list|)
block|{
return|return
name|groupGraphics
operator|.
name|getRenderingHint
argument_list|(
name|hintKey
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RenderingHints
name|getRenderingHints
parameter_list|()
block|{
return|return
name|groupGraphics
operator|.
name|getRenderingHints
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Stroke
name|getStroke
parameter_list|()
block|{
return|return
name|groupGraphics
operator|.
name|getStroke
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|AffineTransform
name|getTransform
parameter_list|()
block|{
return|return
name|groupGraphics
operator|.
name|getTransform
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hit
parameter_list|(
name|Rectangle
name|rect
parameter_list|,
name|Shape
name|s
parameter_list|,
name|boolean
name|onStroke
parameter_list|)
block|{
return|return
name|groupGraphics
operator|.
name|hit
argument_list|(
name|rect
argument_list|,
name|s
argument_list|,
name|onStroke
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|rotate
parameter_list|(
name|double
name|theta
parameter_list|)
block|{
name|groupGraphics
operator|.
name|rotate
argument_list|(
name|theta
argument_list|)
expr_stmt|;
name|alphaGraphics
operator|.
name|rotate
argument_list|(
name|theta
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|rotate
parameter_list|(
name|double
name|theta
parameter_list|,
name|double
name|x
parameter_list|,
name|double
name|y
parameter_list|)
block|{
name|groupGraphics
operator|.
name|rotate
argument_list|(
name|theta
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|alphaGraphics
operator|.
name|rotate
argument_list|(
name|theta
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|scale
parameter_list|(
name|double
name|sx
parameter_list|,
name|double
name|sy
parameter_list|)
block|{
name|groupGraphics
operator|.
name|scale
argument_list|(
name|sx
argument_list|,
name|sy
argument_list|)
expr_stmt|;
name|alphaGraphics
operator|.
name|scale
argument_list|(
name|sx
argument_list|,
name|sy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setBackground
parameter_list|(
name|Color
name|color
parameter_list|)
block|{
name|groupGraphics
operator|.
name|setBackground
argument_list|(
name|color
argument_list|)
expr_stmt|;
name|alphaGraphics
operator|.
name|setBackground
argument_list|(
name|color
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setComposite
parameter_list|(
name|Composite
name|comp
parameter_list|)
block|{
name|groupGraphics
operator|.
name|setComposite
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|alphaGraphics
operator|.
name|setComposite
argument_list|(
name|comp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setPaint
parameter_list|(
name|Paint
name|paint
parameter_list|)
block|{
name|groupGraphics
operator|.
name|setPaint
argument_list|(
name|paint
argument_list|)
expr_stmt|;
name|alphaGraphics
operator|.
name|setPaint
argument_list|(
name|paint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setRenderingHint
parameter_list|(
name|RenderingHints
operator|.
name|Key
name|hintKey
parameter_list|,
name|Object
name|hintValue
parameter_list|)
block|{
name|groupGraphics
operator|.
name|setRenderingHint
argument_list|(
name|hintKey
argument_list|,
name|hintValue
argument_list|)
expr_stmt|;
name|alphaGraphics
operator|.
name|setRenderingHint
argument_list|(
name|hintKey
argument_list|,
name|hintValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setRenderingHints
parameter_list|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|hints
parameter_list|)
block|{
name|groupGraphics
operator|.
name|setRenderingHints
argument_list|(
name|hints
argument_list|)
expr_stmt|;
name|alphaGraphics
operator|.
name|setRenderingHints
argument_list|(
name|hints
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setStroke
parameter_list|(
name|Stroke
name|s
parameter_list|)
block|{
name|groupGraphics
operator|.
name|setStroke
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|alphaGraphics
operator|.
name|setStroke
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setTransform
parameter_list|(
name|AffineTransform
name|tx
parameter_list|)
block|{
name|groupGraphics
operator|.
name|setTransform
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|alphaGraphics
operator|.
name|setTransform
argument_list|(
name|tx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|shear
parameter_list|(
name|double
name|shx
parameter_list|,
name|double
name|shy
parameter_list|)
block|{
name|groupGraphics
operator|.
name|shear
argument_list|(
name|shx
argument_list|,
name|shy
argument_list|)
expr_stmt|;
name|alphaGraphics
operator|.
name|shear
argument_list|(
name|shx
argument_list|,
name|shy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|transform
parameter_list|(
name|AffineTransform
name|tx
parameter_list|)
block|{
name|groupGraphics
operator|.
name|transform
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|alphaGraphics
operator|.
name|transform
argument_list|(
name|tx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|translate
parameter_list|(
name|double
name|tx
parameter_list|,
name|double
name|ty
parameter_list|)
block|{
name|groupGraphics
operator|.
name|translate
argument_list|(
name|tx
argument_list|,
name|ty
argument_list|)
expr_stmt|;
name|alphaGraphics
operator|.
name|translate
argument_list|(
name|tx
argument_list|,
name|ty
argument_list|)
expr_stmt|;
block|}
comment|/**      * Computes backdrop removal.      * The backdrop removal equation is given in section 11.4.4 in the PDF 32000-1:2008      * standard. It returns the final color<code>C</code> for each pixel in the group:<br>      *<code>C = Cn + (Cn - C0) * (alpha0 / alphagn - alpha0)</code><br>      * where<br>      *<code>Cn</code> is the group color including backdrop (read from<code>groupImage</code>),<br>      *<code>C0</code> is the backdrop color,<br>      *<code>alpha0</code> is the backdrop alpha,<br>      *<code>alphagn</code> is the group alpha excluding backdrop (read the      *           alpha channel from<code>groupAlphaImage</code>)<br>      *<p>      * The alpha of the result is equal to<code>alphagn</code>, i.e., the alpha      * channel of<code>groupAlphaImage</code>.      *<p>      * The<code>backdrop</code> image may be much larger than<code>groupImage</code> if,      * for example, the current page is used as the backdrop. Only a specific rectangular      * region of<code>backdrop</code> is used in the backdrop removal: upper-left corner      * is at<code>(offsetX, offsetY)</code>; width and height are equal to those of      *<code>groupImage</code>.      *      * @param backdrop group backdrop      * @param offsetX backdrop left X coordinate      * @param offsetY backdrop upper Y coordinate      */
name|void
name|removeBackdrop
parameter_list|(
name|BufferedImage
name|backdrop
parameter_list|,
name|int
name|offsetX
parameter_list|,
name|int
name|offsetY
parameter_list|)
block|{
name|int
name|groupWidth
init|=
name|groupImage
operator|.
name|getWidth
argument_list|()
decl_stmt|;
name|int
name|groupHeight
init|=
name|groupImage
operator|.
name|getHeight
argument_list|()
decl_stmt|;
name|int
name|backdropWidth
init|=
name|backdrop
operator|.
name|getWidth
argument_list|()
decl_stmt|;
name|int
name|backdropHeight
init|=
name|backdrop
operator|.
name|getHeight
argument_list|()
decl_stmt|;
name|int
name|groupType
init|=
name|groupImage
operator|.
name|getType
argument_list|()
decl_stmt|;
name|int
name|groupAlphaType
init|=
name|groupAlphaImage
operator|.
name|getType
argument_list|()
decl_stmt|;
name|int
name|backdropType
init|=
name|backdrop
operator|.
name|getType
argument_list|()
decl_stmt|;
name|DataBuffer
name|groupDataBuffer
init|=
name|groupImage
operator|.
name|getRaster
argument_list|()
operator|.
name|getDataBuffer
argument_list|()
decl_stmt|;
name|DataBuffer
name|groupAlphaDataBuffer
init|=
name|groupAlphaImage
operator|.
name|getRaster
argument_list|()
operator|.
name|getDataBuffer
argument_list|()
decl_stmt|;
name|DataBuffer
name|backdropDataBuffer
init|=
name|backdrop
operator|.
name|getRaster
argument_list|()
operator|.
name|getDataBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|groupType
operator|==
name|BufferedImage
operator|.
name|TYPE_INT_ARGB
operator|&&
name|groupAlphaType
operator|==
name|BufferedImage
operator|.
name|TYPE_INT_ARGB
operator|&&
operator|(
name|backdropType
operator|==
name|BufferedImage
operator|.
name|TYPE_INT_ARGB
operator|||
name|backdropType
operator|==
name|BufferedImage
operator|.
name|TYPE_INT_RGB
operator|)
operator|&&
name|groupDataBuffer
operator|instanceof
name|DataBufferInt
operator|&&
name|groupAlphaDataBuffer
operator|instanceof
name|DataBufferInt
operator|&&
name|backdropDataBuffer
operator|instanceof
name|DataBufferInt
condition|)
block|{
comment|// Optimized computation for int[] buffers.
name|int
index|[]
name|groupData
init|=
operator|(
operator|(
name|DataBufferInt
operator|)
name|groupDataBuffer
operator|)
operator|.
name|getData
argument_list|()
decl_stmt|;
name|int
index|[]
name|groupAlphaData
init|=
operator|(
operator|(
name|DataBufferInt
operator|)
name|groupAlphaDataBuffer
operator|)
operator|.
name|getData
argument_list|()
decl_stmt|;
name|int
index|[]
name|backdropData
init|=
operator|(
operator|(
name|DataBufferInt
operator|)
name|backdropDataBuffer
operator|)
operator|.
name|getData
argument_list|()
decl_stmt|;
name|boolean
name|backdropHasAlpha
init|=
name|backdropType
operator|==
name|BufferedImage
operator|.
name|TYPE_INT_ARGB
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|groupHeight
condition|;
name|y
operator|++
control|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|groupWidth
condition|;
name|x
operator|++
control|)
block|{
name|int
name|index
init|=
name|x
operator|+
name|y
operator|*
name|groupWidth
decl_stmt|;
comment|// alphagn is the total alpha of the group contents excluding backdrop.
name|int
name|alphagn
init|=
operator|(
name|groupAlphaData
index|[
name|index
index|]
operator|>>
literal|24
operator|)
operator|&
literal|0xFF
decl_stmt|;
if|if
condition|(
name|alphagn
operator|==
literal|0
condition|)
block|{
comment|// Avoid division by 0 and set the result to fully transparent.
name|groupData
index|[
name|index
index|]
operator|=
literal|0
expr_stmt|;
continue|continue;
block|}
name|int
name|backdropX
init|=
name|x
operator|+
name|offsetX
decl_stmt|;
name|int
name|backdropY
init|=
name|y
operator|+
name|offsetY
decl_stmt|;
name|int
name|backdropRGB
decl_stmt|;
comment|// color of backdrop pixel
name|float
name|alpha0
decl_stmt|;
comment|// alpha of backdrop pixel
if|if
condition|(
name|backdropX
operator|>=
literal|0
operator|&&
name|backdropX
operator|<
name|backdropWidth
operator|&&
name|backdropY
operator|>=
literal|0
operator|&&
name|backdropY
operator|<
name|backdropHeight
condition|)
block|{
name|backdropRGB
operator|=
name|backdropData
index|[
name|backdropX
operator|+
name|backdropY
operator|*
name|backdropWidth
index|]
expr_stmt|;
name|alpha0
operator|=
name|backdropHasAlpha
condition|?
operator|(
operator|(
name|backdropRGB
operator|>>
literal|24
operator|)
operator|&
literal|0xFF
operator|)
else|:
literal|255
expr_stmt|;
block|}
else|else
block|{
comment|// Backdrop pixel is out of bounds. Use a transparent value.
name|backdropRGB
operator|=
literal|0
expr_stmt|;
name|alpha0
operator|=
literal|0
expr_stmt|;
block|}
comment|// Alpha factor alpha0 / alphagn - alpha0 is in range 0.0-1.0.
name|float
name|alphaFactor
init|=
name|alpha0
operator|/
operator|(
name|float
operator|)
name|alphagn
operator|-
name|alpha0
operator|/
literal|255.0f
decl_stmt|;
name|int
name|groupRGB
init|=
name|groupData
index|[
name|index
index|]
decl_stmt|;
comment|// color of group pixel
comment|// Compute backdrop removal for RGB components.
name|int
name|r
init|=
name|backdropRemoval
argument_list|(
name|groupRGB
argument_list|,
name|backdropRGB
argument_list|,
literal|16
argument_list|,
name|alphaFactor
argument_list|)
decl_stmt|;
name|int
name|g
init|=
name|backdropRemoval
argument_list|(
name|groupRGB
argument_list|,
name|backdropRGB
argument_list|,
literal|8
argument_list|,
name|alphaFactor
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|backdropRemoval
argument_list|(
name|groupRGB
argument_list|,
name|backdropRGB
argument_list|,
literal|0
argument_list|,
name|alphaFactor
argument_list|)
decl_stmt|;
comment|// Copy the result back to groupImage. The alpha of the result
comment|// is equal to alphagn.
name|groupData
index|[
name|index
index|]
operator|=
operator|(
name|alphagn
operator|<<
literal|24
operator|)
operator||
operator|(
name|r
operator|<<
literal|16
operator|)
operator||
operator|(
name|g
operator|<<
literal|8
operator|)
operator||
name|b
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// Non-optimized computation for other types of color spaces and pixel buffers.
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|groupHeight
condition|;
name|y
operator|++
control|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|groupWidth
condition|;
name|x
operator|++
control|)
block|{
name|int
name|alphagn
init|=
operator|(
name|groupAlphaImage
operator|.
name|getRGB
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|>>
literal|24
operator|)
operator|&
literal|0xFF
decl_stmt|;
if|if
condition|(
name|alphagn
operator|==
literal|0
condition|)
block|{
name|groupImage
operator|.
name|setRGB
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
literal|0
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|int
name|backdropX
init|=
name|x
operator|+
name|offsetX
decl_stmt|;
name|int
name|backdropY
init|=
name|y
operator|+
name|offsetY
decl_stmt|;
name|int
name|backdropRGB
decl_stmt|;
name|float
name|alpha0
decl_stmt|;
if|if
condition|(
name|backdropX
operator|>=
literal|0
operator|&&
name|backdropX
operator|<
name|backdropWidth
operator|&&
name|backdropY
operator|>=
literal|0
operator|&&
name|backdropY
operator|<
name|backdropHeight
condition|)
block|{
name|backdropRGB
operator|=
name|backdrop
operator|.
name|getRGB
argument_list|(
name|backdropX
argument_list|,
name|backdropY
argument_list|)
expr_stmt|;
name|alpha0
operator|=
operator|(
name|backdropRGB
operator|>>
literal|24
operator|)
operator|&
literal|0xFF
expr_stmt|;
block|}
else|else
block|{
name|backdropRGB
operator|=
literal|0
expr_stmt|;
name|alpha0
operator|=
literal|0
expr_stmt|;
block|}
name|int
name|groupRGB
init|=
name|groupImage
operator|.
name|getRGB
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
decl_stmt|;
name|float
name|alphaFactor
init|=
name|alpha0
operator|/
name|alphagn
operator|-
name|alpha0
operator|/
literal|255.0f
decl_stmt|;
name|int
name|r
init|=
name|backdropRemoval
argument_list|(
name|groupRGB
argument_list|,
name|backdropRGB
argument_list|,
literal|16
argument_list|,
name|alphaFactor
argument_list|)
decl_stmt|;
name|int
name|g
init|=
name|backdropRemoval
argument_list|(
name|groupRGB
argument_list|,
name|backdropRGB
argument_list|,
literal|8
argument_list|,
name|alphaFactor
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|backdropRemoval
argument_list|(
name|groupRGB
argument_list|,
name|backdropRGB
argument_list|,
literal|0
argument_list|,
name|alphaFactor
argument_list|)
decl_stmt|;
name|groupImage
operator|.
name|setRGB
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
operator|(
name|alphagn
operator|<<
literal|24
operator|)
operator||
operator|(
name|r
operator|<<
literal|16
operator|)
operator||
operator|(
name|g
operator|<<
literal|8
operator|)
operator||
name|b
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Computes the backdrop removal equation.      *<code>C = Cn + (Cn - C0) * (alpha0 / alphagn - alpha0)</code>      */
specifier|private
name|int
name|backdropRemoval
parameter_list|(
name|int
name|groupRGB
parameter_list|,
name|int
name|backdropRGB
parameter_list|,
name|int
name|shift
parameter_list|,
name|float
name|alphaFactor
parameter_list|)
block|{
name|float
name|cn
init|=
operator|(
name|groupRGB
operator|>>
name|shift
operator|)
operator|&
literal|0xFF
decl_stmt|;
name|float
name|c0
init|=
operator|(
name|backdropRGB
operator|>>
name|shift
operator|)
operator|&
literal|0xFF
decl_stmt|;
name|int
name|c
init|=
name|Math
operator|.
name|round
argument_list|(
name|cn
operator|+
operator|(
name|cn
operator|-
name|c0
operator|)
operator|*
name|alphaFactor
argument_list|)
decl_stmt|;
return|return
operator|(
name|c
operator|<
literal|0
operator|)
condition|?
literal|0
else|:
operator|(
name|c
operator|>
literal|255
condition|?
literal|255
else|:
name|c
operator|)
return|;
block|}
block|}
end_class

end_unit

