begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|rendering
operator|.
name|font
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|GeneralPath
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|encoding
operator|.
name|Encoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|encoding
operator|.
name|GlyphList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDType1Equivalent
import|;
end_import

begin_comment
comment|/**  * Glyph to GeneralPath conversion for Type 1 PFB and CFF, and TrueType fonts with a 'post' table.  */
end_comment

begin_class
specifier|public
class|class
name|Type1Glyph2D
implements|implements
name|Glyph2D
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Type1Glyph2D
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// alternative names for glyphs which are commonly encountered
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ALT_NAMES
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|ALT_NAMES
operator|.
name|put
argument_list|(
literal|"ff"
argument_list|,
literal|"f_f"
argument_list|)
expr_stmt|;
name|ALT_NAMES
operator|.
name|put
argument_list|(
literal|"ffi"
argument_list|,
literal|"f_f_i"
argument_list|)
expr_stmt|;
name|ALT_NAMES
operator|.
name|put
argument_list|(
literal|"ffl"
argument_list|,
literal|"f_f_l"
argument_list|)
expr_stmt|;
name|ALT_NAMES
operator|.
name|put
argument_list|(
literal|"fi"
argument_list|,
literal|"f_i"
argument_list|)
expr_stmt|;
name|ALT_NAMES
operator|.
name|put
argument_list|(
literal|"fl"
argument_list|,
literal|"f_l"
argument_list|)
expr_stmt|;
name|ALT_NAMES
operator|.
name|put
argument_list|(
literal|"st"
argument_list|,
literal|"s_t"
argument_list|)
expr_stmt|;
name|ALT_NAMES
operator|.
name|put
argument_list|(
literal|"IJ"
argument_list|,
literal|"I_J"
argument_list|)
expr_stmt|;
name|ALT_NAMES
operator|.
name|put
argument_list|(
literal|"ij"
argument_list|,
literal|"i_j"
argument_list|)
expr_stmt|;
block|}
comment|// unicode names for ligatures, needed to undo mapping in org.apache.pdfbox.Encoding
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|LIGATURE_UNI_NAMES
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|LIGATURE_UNI_NAMES
operator|.
name|put
argument_list|(
literal|"ff"
argument_list|,
literal|"uniFB00"
argument_list|)
expr_stmt|;
name|LIGATURE_UNI_NAMES
operator|.
name|put
argument_list|(
literal|"fi"
argument_list|,
literal|"uniFB01"
argument_list|)
expr_stmt|;
name|LIGATURE_UNI_NAMES
operator|.
name|put
argument_list|(
literal|"fl"
argument_list|,
literal|"uniFB02"
argument_list|)
expr_stmt|;
name|LIGATURE_UNI_NAMES
operator|.
name|put
argument_list|(
literal|"ffi"
argument_list|,
literal|"uniFB03"
argument_list|)
expr_stmt|;
name|LIGATURE_UNI_NAMES
operator|.
name|put
argument_list|(
literal|"ffl"
argument_list|,
literal|"uniFB04"
argument_list|)
expr_stmt|;
name|LIGATURE_UNI_NAMES
operator|.
name|put
argument_list|(
literal|"pi"
argument_list|,
literal|"uni03C0"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|GeneralPath
argument_list|>
name|cache
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|GeneralPath
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|PDType1Equivalent
name|font
decl_stmt|;
comment|/**      * Constructor.      *      * @param font PDF Type1 font.      */
specifier|public
name|Type1Glyph2D
parameter_list|(
name|PDType1Equivalent
name|font
parameter_list|)
block|{
name|this
operator|.
name|font
operator|=
name|font
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|GeneralPath
name|getPathForCharacterCode
parameter_list|(
name|int
name|code
parameter_list|)
block|{
comment|// cache
if|if
condition|(
name|cache
operator|.
name|containsKey
argument_list|(
name|code
argument_list|)
condition|)
block|{
return|return
name|cache
operator|.
name|get
argument_list|(
name|code
argument_list|)
return|;
block|}
comment|// fetch
try|try
block|{
name|String
name|name
init|=
name|font
operator|.
name|codeToName
argument_list|(
name|code
argument_list|)
decl_stmt|;
name|GeneralPath
name|path
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|name
operator|.
name|equals
argument_list|(
literal|".notdef"
argument_list|)
operator|&&
name|font
operator|.
name|hasGlyph
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|path
operator|=
name|font
operator|.
name|getPath
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// try alternative name
name|String
name|altName
init|=
name|ALT_NAMES
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|altName
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|equals
argument_list|(
literal|".notdef"
argument_list|)
operator|&&
name|font
operator|.
name|hasGlyph
argument_list|(
name|altName
argument_list|)
condition|)
block|{
name|path
operator|=
name|font
operator|.
name|getPath
argument_list|(
name|altName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// try unicode name
name|String
name|unicodes
init|=
name|GlyphList
operator|.
name|toUnicode
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|unicodes
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|unicodes
operator|.
name|length
argument_list|()
operator|==
literal|1
condition|)
block|{
name|String
name|uniName
init|=
name|String
operator|.
name|format
argument_list|(
literal|"uni%04X"
argument_list|,
name|unicodes
operator|.
name|codePointAt
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|path
operator|=
name|font
operator|.
name|getPath
argument_list|(
name|uniName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|unicodes
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|)
block|{
if|if
condition|(
name|LIGATURE_UNI_NAMES
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|path
operator|=
name|font
operator|.
name|getPath
argument_list|(
name|LIGATURE_UNI_NAMES
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No glyph for "
operator|+
name|code
operator|+
literal|" ("
operator|+
name|name
operator|+
literal|") in font "
operator|+
name|font
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|path
operator|=
name|font
operator|.
name|getPath
argument_list|(
literal|".notdef"
argument_list|)
expr_stmt|;
block|}
name|cache
operator|.
name|put
argument_list|(
name|code
argument_list|,
name|path
argument_list|)
expr_stmt|;
return|return
name|path
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Glyph rendering failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// todo: escalate this error?
return|return
operator|new
name|GeneralPath
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|dispose
parameter_list|()
block|{
name|cache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

