begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|io
operator|.
name|MemoryUsageSetting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|io
operator|.
name|RandomAccessBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|io
operator|.
name|RandomAccessBufferedFileInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|io
operator|.
name|RandomAccessRead
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|io
operator|.
name|ScratchFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdfparser
operator|.
name|FDFParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdfparser
operator|.
name|PDFParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|encryption
operator|.
name|InvalidPasswordException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|fdf
operator|.
name|FDFDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|XMLUtil
import|;
end_import

begin_comment
comment|/**  * Utility methods to load different types of documents  *  */
end_comment

begin_class
specifier|public
class|class
name|Loader
block|{
specifier|private
name|Loader
parameter_list|()
block|{     }
comment|/**      * This will load a document from a file.      *      * @param filename The name of the file to load.      *      * @return The document that was loaded.      *      * @throws IOException If there is an error reading from the stream.      */
specifier|public
specifier|static
name|FDFDocument
name|loadFDF
parameter_list|(
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
block|{
name|FDFParser
name|parser
init|=
operator|new
name|FDFParser
argument_list|(
name|filename
argument_list|)
decl_stmt|;
return|return
name|parser
operator|.
name|parse
argument_list|()
return|;
block|}
comment|/**      * This will load a document from a file.      *      * @param file The name of the file to load.      *      * @return The document that was loaded.      *      * @throws IOException If there is an error reading from the stream.      */
specifier|public
specifier|static
name|FDFDocument
name|loadFDF
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|FDFParser
name|parser
init|=
operator|new
name|FDFParser
argument_list|(
name|file
argument_list|)
decl_stmt|;
return|return
name|parser
operator|.
name|parse
argument_list|()
return|;
block|}
comment|/**      * This will load a document from an input stream.      *      * @param input The stream that contains the document.      *      * @return The document that was loaded.      *      * @throws IOException If there is an error reading from the stream.      */
specifier|public
specifier|static
name|FDFDocument
name|loadFDF
parameter_list|(
name|InputStream
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|FDFParser
name|parser
init|=
operator|new
name|FDFParser
argument_list|(
name|input
argument_list|)
decl_stmt|;
return|return
name|parser
operator|.
name|parse
argument_list|()
return|;
block|}
comment|/**      * This will load a document from a file.      *      * @param filename The name of the file to load.      *      * @return The document that was loaded.      *      * @throws IOException If there is an error reading from the stream.      */
specifier|public
specifier|static
name|FDFDocument
name|loadXFDF
parameter_list|(
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|Loader
operator|.
name|loadXFDF
argument_list|(
operator|new
name|BufferedInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|filename
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * This will load a document from a file.      *      * @param file The name of the file to load.      *      * @return The document that was loaded.      *      * @throws IOException If there is an error reading from the stream.      */
specifier|public
specifier|static
name|FDFDocument
name|loadXFDF
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|Loader
operator|.
name|loadXFDF
argument_list|(
operator|new
name|BufferedInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * This will load a document from an input stream.      *      * @param input The stream that contains the document.      *      * @return The document that was loaded.      *      * @throws IOException If there is an error reading from the stream.      */
specifier|public
specifier|static
name|FDFDocument
name|loadXFDF
parameter_list|(
name|InputStream
name|input
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|FDFDocument
argument_list|(
name|XMLUtil
operator|.
name|parse
argument_list|(
name|input
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Parses a PDF. Unrestricted main memory will be used for buffering PDF streams.      *       * @param input byte array that contains the document.      *       * @return loaded document      *       * @throws InvalidPasswordException If the PDF required a non-empty password.      * @throws IOException In case of a reading or parsing error.      */
specifier|public
specifier|static
name|PDDocument
name|loadPDF
parameter_list|(
name|byte
index|[]
name|input
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|Loader
operator|.
name|loadPDF
argument_list|(
name|input
argument_list|,
literal|""
argument_list|)
return|;
block|}
comment|/**      * Parses a PDF. Unrestricted main memory will be used for buffering PDF streams.      *       * @param input byte array that contains the document.      * @param password password to be used for decryption      *       * @return loaded document      *       * @throws InvalidPasswordException If the password is incorrect.      * @throws IOException In case of a reading or parsing error.      */
specifier|public
specifier|static
name|PDDocument
name|loadPDF
parameter_list|(
name|byte
index|[]
name|input
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|Loader
operator|.
name|loadPDF
argument_list|(
name|input
argument_list|,
name|password
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Parses a PDF. Unrestricted main memory will be used for buffering PDF streams.      *       * @param input byte array that contains the document.      * @param password password to be used for decryption      * @param keyStore key store to be used for decryption when using public key security      * @param alias alias to be used for decryption when using public key security      *       * @return loaded document      *       * @throws InvalidPasswordException If the password is incorrect.      * @throws IOException In case of a reading or parsing error.      */
specifier|public
specifier|static
name|PDDocument
name|loadPDF
parameter_list|(
name|byte
index|[]
name|input
parameter_list|,
name|String
name|password
parameter_list|,
name|InputStream
name|keyStore
parameter_list|,
name|String
name|alias
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|Loader
operator|.
name|loadPDF
argument_list|(
name|input
argument_list|,
name|password
argument_list|,
name|keyStore
argument_list|,
name|alias
argument_list|,
name|MemoryUsageSetting
operator|.
name|setupMainMemoryOnly
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Parses a PDF.      *       * @param input byte array that contains the document.      * @param password password to be used for decryption      * @param keyStore key store to be used for decryption when using public key security      * @param alias alias to be used for decryption when using public key security      * @param memUsageSetting defines how memory is used for buffering input stream and PDF streams      *       * @return loaded document      *       * @throws InvalidPasswordException If the password is incorrect.      * @throws IOException In case of a reading or parsing error.      */
specifier|public
specifier|static
name|PDDocument
name|loadPDF
parameter_list|(
name|byte
index|[]
name|input
parameter_list|,
name|String
name|password
parameter_list|,
name|InputStream
name|keyStore
parameter_list|,
name|String
name|alias
parameter_list|,
name|MemoryUsageSetting
name|memUsageSetting
parameter_list|)
throws|throws
name|IOException
block|{
name|ScratchFile
name|scratchFile
init|=
operator|new
name|ScratchFile
argument_list|(
name|memUsageSetting
argument_list|)
decl_stmt|;
name|RandomAccessRead
name|source
init|=
operator|new
name|RandomAccessBuffer
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|PDFParser
name|parser
init|=
operator|new
name|PDFParser
argument_list|(
name|source
argument_list|,
name|password
argument_list|,
name|keyStore
argument_list|,
name|alias
argument_list|,
name|scratchFile
argument_list|)
decl_stmt|;
return|return
name|parser
operator|.
name|parse
argument_list|()
return|;
block|}
comment|/**      * Parses a PDF. Unrestricted main memory will be used for buffering PDF streams.      *       * @param file file to be loaded      *       * @return loaded document      *       * @throws InvalidPasswordException If the file required a non-empty password.      * @throws IOException in case of a file reading or parsing error      */
specifier|public
specifier|static
name|PDDocument
name|loadPDF
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|Loader
operator|.
name|loadPDF
argument_list|(
name|file
argument_list|,
literal|""
argument_list|,
name|MemoryUsageSetting
operator|.
name|setupMainMemoryOnly
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Parses a PDF.      *       * @param file file to be loaded      * @param memUsageSetting defines how memory is used for buffering PDF streams      *       * @return loaded document      *       * @throws InvalidPasswordException If the file required a non-empty password.      * @throws IOException in case of a file reading or parsing error      */
specifier|public
specifier|static
name|PDDocument
name|loadPDF
parameter_list|(
name|File
name|file
parameter_list|,
name|MemoryUsageSetting
name|memUsageSetting
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|Loader
operator|.
name|loadPDF
argument_list|(
name|file
argument_list|,
literal|""
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|memUsageSetting
argument_list|)
return|;
block|}
comment|/**      * Parses a PDF. Unrestricted main memory will be used for buffering PDF streams.      *       * @param file file to be loaded      * @param password password to be used for decryption      *       * @return loaded document      *       * @throws InvalidPasswordException If the password is incorrect.      * @throws IOException in case of a file reading or parsing error      */
specifier|public
specifier|static
name|PDDocument
name|loadPDF
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|Loader
operator|.
name|loadPDF
argument_list|(
name|file
argument_list|,
name|password
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|MemoryUsageSetting
operator|.
name|setupMainMemoryOnly
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Parses a PDF.      *       * @param file file to be loaded      * @param password password to be used for decryption      * @param memUsageSetting defines how memory is used for buffering PDF streams      *       * @return loaded document      *       * @throws InvalidPasswordException If the password is incorrect.      * @throws IOException in case of a file reading or parsing error      */
specifier|public
specifier|static
name|PDDocument
name|loadPDF
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|password
parameter_list|,
name|MemoryUsageSetting
name|memUsageSetting
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|Loader
operator|.
name|loadPDF
argument_list|(
name|file
argument_list|,
name|password
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|memUsageSetting
argument_list|)
return|;
block|}
comment|/**      * Parses a PDF. Unrestricted main memory will be used for buffering PDF streams.      *       * @param file file to be loaded      * @param password password to be used for decryption      * @param keyStore key store to be used for decryption when using public key security      * @param alias alias to be used for decryption when using public key security      *       * @return loaded document      *       * @throws IOException in case of a file reading or parsing error      */
specifier|public
specifier|static
name|PDDocument
name|loadPDF
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|password
parameter_list|,
name|InputStream
name|keyStore
parameter_list|,
name|String
name|alias
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|Loader
operator|.
name|loadPDF
argument_list|(
name|file
argument_list|,
name|password
argument_list|,
name|keyStore
argument_list|,
name|alias
argument_list|,
name|MemoryUsageSetting
operator|.
name|setupMainMemoryOnly
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Parses a PDF.      *       * @param file file to be loaded      * @param password password to be used for decryption      * @param keyStore key store to be used for decryption when using public key security      * @param alias alias to be used for decryption when using public key security      * @param memUsageSetting defines how memory is used for buffering PDF streams      *       * @return loaded document      *       * @throws IOException in case of a file reading or parsing error      */
specifier|public
specifier|static
name|PDDocument
name|loadPDF
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|password
parameter_list|,
name|InputStream
name|keyStore
parameter_list|,
name|String
name|alias
parameter_list|,
name|MemoryUsageSetting
name|memUsageSetting
parameter_list|)
throws|throws
name|IOException
block|{
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"squid:S2095"
block|}
argument_list|)
comment|// raFile not closed here, may be needed for signing
name|RandomAccessBufferedFileInputStream
name|raFile
init|=
operator|new
name|RandomAccessBufferedFileInputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|Loader
operator|.
name|loadPDF
argument_list|(
name|raFile
argument_list|,
name|password
argument_list|,
name|keyStore
argument_list|,
name|alias
argument_list|,
name|memUsageSetting
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|raFile
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
block|}
specifier|public
specifier|static
name|PDDocument
name|loadPDF
parameter_list|(
name|RandomAccessBufferedFileInputStream
name|raFile
parameter_list|,
name|String
name|password
parameter_list|,
name|InputStream
name|keyStore
parameter_list|,
name|String
name|alias
parameter_list|,
name|MemoryUsageSetting
name|memUsageSetting
parameter_list|)
throws|throws
name|IOException
block|{
name|ScratchFile
name|scratchFile
init|=
operator|new
name|ScratchFile
argument_list|(
name|memUsageSetting
argument_list|)
decl_stmt|;
try|try
block|{
name|PDFParser
name|parser
init|=
operator|new
name|PDFParser
argument_list|(
name|raFile
argument_list|,
name|password
argument_list|,
name|keyStore
argument_list|,
name|alias
argument_list|,
name|scratchFile
argument_list|)
decl_stmt|;
return|return
name|parser
operator|.
name|parse
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|scratchFile
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
block|}
comment|/**      * Parses a PDF. The given input stream is copied to the memory to enable random access to the pdf. Unrestricted      * main memory will be used for buffering PDF streams.      *       * @param input stream that contains the document. Don't forget to close it after loading.      *       * @return loaded document      *       * @throws InvalidPasswordException If the PDF required a non-empty password.      * @throws IOException In case of a reading or parsing error.      */
specifier|public
specifier|static
name|PDDocument
name|loadPDF
parameter_list|(
name|InputStream
name|input
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|Loader
operator|.
name|loadPDF
argument_list|(
name|input
argument_list|,
literal|""
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|MemoryUsageSetting
operator|.
name|setupMainMemoryOnly
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Parses a PDF. Depending on the memory settings parameter the given input stream is either copied to main memory      * or to a temporary file to enable random access to the pdf.      *       * @param input stream that contains the document. Don't forget to close it after loading.      * @param memUsageSetting defines how memory is used for buffering input stream and PDF streams      *       * @return loaded document      *       * @throws InvalidPasswordException If the PDF required a non-empty password.      * @throws IOException In case of a reading or parsing error.      */
specifier|public
specifier|static
name|PDDocument
name|loadPDF
parameter_list|(
name|InputStream
name|input
parameter_list|,
name|MemoryUsageSetting
name|memUsageSetting
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|Loader
operator|.
name|loadPDF
argument_list|(
name|input
argument_list|,
literal|""
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|memUsageSetting
argument_list|)
return|;
block|}
comment|/**      * Parses a PDF. The given input stream is copied to the memory to enable random access to the pdf. Unrestricted      * main memory will be used for buffering PDF streams.      *      * @param input stream that contains the document. Don't forget to close it after loading.      * @param password password to be used for decryption      *      * @return loaded document      *       * @throws InvalidPasswordException If the password is incorrect.      * @throws IOException In case of a reading or parsing error.      */
specifier|public
specifier|static
name|PDDocument
name|loadPDF
parameter_list|(
name|InputStream
name|input
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|Loader
operator|.
name|loadPDF
argument_list|(
name|input
argument_list|,
name|password
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|MemoryUsageSetting
operator|.
name|setupMainMemoryOnly
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Parses a PDF. The given input stream is copied to the memory to enable random access to the pdf. Unrestricted      * main memory will be used for buffering PDF streams.      *      * @param input stream that contains the document. Don't forget to close it after loading.      * @param password password to be used for decryption      * @param keyStore key store to be used for decryption when using public key security      * @param alias alias to be used for decryption when using public key security      *       * @return loaded document      *       * @throws IOException In case of a reading or parsing error.      */
specifier|public
specifier|static
name|PDDocument
name|loadPDF
parameter_list|(
name|InputStream
name|input
parameter_list|,
name|String
name|password
parameter_list|,
name|InputStream
name|keyStore
parameter_list|,
name|String
name|alias
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|Loader
operator|.
name|loadPDF
argument_list|(
name|input
argument_list|,
name|password
argument_list|,
name|keyStore
argument_list|,
name|alias
argument_list|,
name|MemoryUsageSetting
operator|.
name|setupMainMemoryOnly
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Parses a PDF. Depending on the memory settings parameter the given input stream is either copied to main memory      * or to a temporary file to enable random access to the pdf.      *      * @param input stream that contains the document. Don't forget to close it after loading.      * @param password password to be used for decryption      * @param memUsageSetting defines how memory is used for buffering input stream and PDF streams      *       * @return loaded document      *       * @throws InvalidPasswordException If the password is incorrect.      * @throws IOException In case of a reading or parsing error.      */
specifier|public
specifier|static
name|PDDocument
name|loadPDF
parameter_list|(
name|InputStream
name|input
parameter_list|,
name|String
name|password
parameter_list|,
name|MemoryUsageSetting
name|memUsageSetting
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|Loader
operator|.
name|loadPDF
argument_list|(
name|input
argument_list|,
name|password
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|memUsageSetting
argument_list|)
return|;
block|}
comment|/**      * Parses a PDF. Depending on the memory settings parameter the given input stream is either copied to memory or to      * a temporary file to enable random access to the pdf.      *      * @param input stream that contains the document. Don't forget to close it after loading.      * @param password password to be used for decryption      * @param keyStore key store to be used for decryption when using public key security      * @param alias alias to be used for decryption when using public key security      * @param memUsageSetting defines how memory is used for buffering input stream and PDF streams      *       * @return loaded document      *       * @throws InvalidPasswordException If the password is incorrect.      * @throws IOException In case of a reading or parsing error.      */
specifier|public
specifier|static
name|PDDocument
name|loadPDF
parameter_list|(
name|InputStream
name|input
parameter_list|,
name|String
name|password
parameter_list|,
name|InputStream
name|keyStore
parameter_list|,
name|String
name|alias
parameter_list|,
name|MemoryUsageSetting
name|memUsageSetting
parameter_list|)
throws|throws
name|IOException
block|{
name|ScratchFile
name|scratchFile
init|=
operator|new
name|ScratchFile
argument_list|(
name|memUsageSetting
argument_list|)
decl_stmt|;
try|try
block|{
name|RandomAccessRead
name|source
init|=
name|scratchFile
operator|.
name|createBuffer
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|PDFParser
name|parser
init|=
operator|new
name|PDFParser
argument_list|(
name|source
argument_list|,
name|password
argument_list|,
name|keyStore
argument_list|,
name|alias
argument_list|,
name|scratchFile
argument_list|)
decl_stmt|;
return|return
name|parser
operator|.
name|parse
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|scratchFile
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
block|}
block|}
end_class

end_unit

