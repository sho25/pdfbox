begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdfviewer
operator|.
name|font
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|GeneralPath
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cff
operator|.
name|CFFFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|type1
operator|.
name|Type1Font
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|type1
operator|.
name|Type1Mapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|encoding
operator|.
name|Encoding
import|;
end_import

begin_comment
comment|/**  * This class provides a glyph to GeneralPath conversion for Type 1 PFB and CFF fonts.  */
end_comment

begin_class
specifier|public
class|class
name|Type1Glyph2D
implements|implements
name|Glyph2D
block|{
comment|/**      * Log instance.      */
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Type1Glyph2D
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|GeneralPath
argument_list|>
name|glyphs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|GeneralPath
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|codeToName
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|String
name|fontName
init|=
literal|null
decl_stmt|;
comment|/**      * Constructs a new Type1Glyph2D object for a CFF/Type2 font.      *      * @param font CFF/Type2 font      * @param encoding PDF Encoding or null      */
specifier|public
name|Type1Glyph2D
parameter_list|(
name|CFFFont
name|font
parameter_list|,
name|Encoding
name|encoding
parameter_list|)
block|{
name|this
argument_list|(
name|font
operator|.
name|getName
argument_list|()
argument_list|,
name|font
operator|.
name|getType1Mappings
argument_list|()
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs a new Type1Glyph2D object for a Type 1 (PFB) font.      *      * @param font Type 1 (PFB) font      * @param encoding PDF Encoding or null      */
specifier|public
name|Type1Glyph2D
parameter_list|(
name|Type1Font
name|font
parameter_list|,
name|Encoding
name|encoding
parameter_list|)
block|{
name|this
argument_list|(
name|font
operator|.
name|getFontName
argument_list|()
argument_list|,
name|font
operator|.
name|getType1Mappings
argument_list|()
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
block|}
comment|/**      * Private constructor.      */
specifier|private
name|Type1Glyph2D
parameter_list|(
name|String
name|fontName
parameter_list|,
name|Collection
argument_list|<
name|?
extends|extends
name|Type1Mapping
argument_list|>
name|mappings
parameter_list|,
name|Encoding
name|encoding
parameter_list|)
block|{
name|this
operator|.
name|fontName
operator|=
name|fontName
expr_stmt|;
comment|// start with built-in encoding
for|for
control|(
name|Type1Mapping
name|mapping
range|:
name|mappings
control|)
block|{
name|codeToName
operator|.
name|put
argument_list|(
name|mapping
operator|.
name|getCode
argument_list|()
argument_list|,
name|mapping
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// override existing entries with an optional PDF Encoding
if|if
condition|(
name|encoding
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|encodingCodeToName
init|=
name|encoding
operator|.
name|getCodeToNameMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Integer
name|key
range|:
name|encodingCodeToName
operator|.
name|keySet
argument_list|()
control|)
block|{
name|codeToName
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|encodingCodeToName
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Type1Mapping
name|mapping
range|:
name|mappings
control|)
block|{
name|GeneralPath
name|path
decl_stmt|;
try|try
block|{
name|path
operator|=
name|mapping
operator|.
name|getType1CharString
argument_list|()
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|glyphs
operator|.
name|put
argument_list|(
name|mapping
operator|.
name|getName
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|exception
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Type 1 glyph rendering failed"
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Returns the path describing the glyph for the given name.      *      * @param name the name of the glyph      * @return the GeneralPath for the given glyph      */
specifier|public
name|GeneralPath
name|getPathForGlyphName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|glyphs
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|GeneralPath
name|getPathForCharacterCode
parameter_list|(
name|int
name|code
parameter_list|)
block|{
if|if
condition|(
name|codeToName
operator|.
name|containsKey
argument_list|(
name|code
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|codeToName
operator|.
name|get
argument_list|(
name|code
argument_list|)
decl_stmt|;
return|return
name|glyphs
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|fontName
operator|+
literal|": glyph mapping for "
operator|+
name|code
operator|+
literal|" not found"
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|int
name|getNumberOfGlyphs
parameter_list|()
block|{
if|if
condition|(
name|glyphs
operator|!=
literal|null
condition|)
block|{
return|return
name|glyphs
operator|.
name|size
argument_list|()
return|;
block|}
return|return
literal|0
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|void
name|dispose
parameter_list|()
block|{
if|if
condition|(
name|glyphs
operator|!=
literal|null
condition|)
block|{
name|glyphs
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|codeToName
operator|!=
literal|null
condition|)
block|{
name|codeToName
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

