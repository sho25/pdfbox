begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|XMPMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestAbstractStructuredType
block|{
specifier|private
specifier|static
class|class
name|MyStructuredType
extends|extends
name|AbstractStructuredType
block|{
annotation|@
name|PropertyType
argument_list|(
name|type
operator|=
name|Types
operator|.
name|Text
argument_list|,
name|card
operator|=
name|Cardinality
operator|.
name|Simple
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|MYTEXT
init|=
literal|"my-text"
decl_stmt|;
annotation|@
name|PropertyType
argument_list|(
name|type
operator|=
name|Types
operator|.
name|Date
argument_list|,
name|card
operator|=
name|Cardinality
operator|.
name|Simple
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|MYDATE
init|=
literal|"my-date"
decl_stmt|;
specifier|public
name|MyStructuredType
parameter_list|(
name|XMPMetadata
name|metadata
parameter_list|,
name|String
name|namespaceURI
parameter_list|,
name|String
name|fieldPrefix
parameter_list|)
block|{
name|super
argument_list|(
name|metadata
argument_list|,
name|namespaceURI
argument_list|,
name|fieldPrefix
argument_list|,
literal|"structuredPN"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|MyStructuredType
name|st
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MY_NS
init|=
literal|"http://www.apache.org/test#"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MY_PREFIX
init|=
literal|"test"
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|XMPMetadata
name|xmp
init|=
name|XMPMetadata
operator|.
name|createXMPMetadata
argument_list|()
decl_stmt|;
name|st
operator|=
operator|new
name|MyStructuredType
argument_list|(
name|xmp
argument_list|,
name|MY_NS
argument_list|,
name|MY_PREFIX
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|MY_NS
argument_list|,
name|st
operator|.
name|getNamespace
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|MY_PREFIX
argument_list|,
name|st
operator|.
name|getPrefix
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|MY_PREFIX
argument_list|,
name|st
operator|.
name|getPrefix
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNonExistingProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|st
operator|.
name|getProperty
argument_list|(
literal|"NOT_EXISTING"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNotValuatedPropertyProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|st
operator|.
name|getProperty
argument_list|(
name|MyStructuredType
operator|.
name|MYTEXT
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testValuatedTextProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|s
init|=
literal|"my value"
decl_stmt|;
name|st
operator|.
name|addSimpleProperty
argument_list|(
name|MyStructuredType
operator|.
name|MYTEXT
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|s
argument_list|,
name|st
operator|.
name|getPropertyValueAsString
argument_list|(
name|MyStructuredType
operator|.
name|MYTEXT
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|st
operator|.
name|getPropertyValueAsString
argument_list|(
name|MyStructuredType
operator|.
name|MYDATE
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|st
operator|.
name|getProperty
argument_list|(
name|MyStructuredType
operator|.
name|MYTEXT
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testValuatedDateProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|st
operator|.
name|addSimpleProperty
argument_list|(
name|MyStructuredType
operator|.
name|MYDATE
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|c
argument_list|,
name|st
operator|.
name|getDatePropertyAsCalendar
argument_list|(
name|MyStructuredType
operator|.
name|MYDATE
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|st
operator|.
name|getDatePropertyAsCalendar
argument_list|(
name|MyStructuredType
operator|.
name|MYTEXT
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|st
operator|.
name|getProperty
argument_list|(
name|MyStructuredType
operator|.
name|MYDATE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

