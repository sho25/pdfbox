begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/***************************************************************************** /*****************************************************************************  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractTypeTester
block|{
specifier|private
specifier|static
specifier|final
name|long
name|COUNTER_SEED
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|MAX_COUNTER
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|RAND_LOOP_COUNT
init|=
literal|50
decl_stmt|;
specifier|private
name|Random
name|counterRandom
init|=
operator|new
name|Random
argument_list|(
name|COUNTER_SEED
argument_list|)
decl_stmt|;
specifier|protected
name|void
name|initializeSeed
parameter_list|(
name|Random
name|rand
parameter_list|)
block|{
name|this
operator|.
name|counterRandom
operator|=
name|rand
expr_stmt|;
block|}
specifier|public
name|String
name|calculateSimpleGetter
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|3
operator|+
name|name
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"get"
argument_list|)
operator|.
name|append
argument_list|(
name|calculateFieldNameForMethod
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|calculateArrayGetter
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|4
operator|+
name|name
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|fn
init|=
name|calculateFieldNameForMethod
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"get"
argument_list|)
operator|.
name|append
argument_list|(
name|fn
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fn
operator|.
name|endsWith
argument_list|(
literal|"s"
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"s"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|calculateSimpleSetter
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|3
operator|+
name|name
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"set"
argument_list|)
operator|.
name|append
argument_list|(
name|calculateFieldNameForMethod
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|calculateFieldNameForMethod
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|name
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|name
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getJavaType
parameter_list|(
name|Types
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|.
name|getImplementingClass
argument_list|()
operator|==
name|TextType
operator|.
name|class
condition|)
block|{
return|return
name|String
operator|.
name|class
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|getImplementingClass
argument_list|()
operator|==
name|DateType
operator|.
name|class
condition|)
block|{
return|return
name|Calendar
operator|.
name|class
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|getImplementingClass
argument_list|()
operator|==
name|IntegerType
operator|.
name|class
condition|)
block|{
return|return
name|Integer
operator|.
name|class
return|;
block|}
elseif|else
if|if
condition|(
name|TextType
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
operator|.
name|getImplementingClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|String
operator|.
name|class
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Type not expected in test : "
operator|+
name|type
operator|.
name|getImplementingClass
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Object
name|getJavaValue
parameter_list|(
name|Types
name|type
parameter_list|)
block|{
if|if
condition|(
name|TextType
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
operator|.
name|getImplementingClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|"Text_String_"
operator|+
name|counterRandom
operator|.
name|nextLong
argument_list|()
operator|%
name|MAX_COUNTER
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|getImplementingClass
argument_list|()
operator|==
name|DateType
operator|.
name|class
condition|)
block|{
name|Calendar
name|calendar
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|calendar
operator|.
name|setTimeInMillis
argument_list|(
name|counterRandom
operator|.
name|nextLong
argument_list|()
operator|%
name|MAX_COUNTER
argument_list|)
expr_stmt|;
return|return
name|calendar
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|getImplementingClass
argument_list|()
operator|==
name|IntegerType
operator|.
name|class
condition|)
block|{
return|return
operator|new
name|Integer
argument_list|(
name|counterRandom
operator|.
name|nextInt
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Type not expected in test : "
operator|+
name|type
operator|.
name|getImplementingClass
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|Field
argument_list|>
name|getXmpFields
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clz
parameter_list|)
block|{
name|Field
index|[]
name|fields
init|=
name|clz
operator|.
name|getFields
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Field
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|Field
argument_list|>
argument_list|(
name|fields
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|Field
name|field
range|:
name|fields
control|)
block|{
if|if
condition|(
name|field
operator|.
name|getAnnotation
argument_list|(
name|PropertyType
operator|.
name|class
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

