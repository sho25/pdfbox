begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|xmpbox
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|GregorianCalendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|DublinCoreSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|XMPBasicSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|XMPSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|xml
operator|.
name|DomXmpParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|xml
operator|.
name|XmpParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|xml
operator|.
name|XmpSerializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_comment
comment|/**  * Test XMP MetaData Transformer  *   * @author a183132  *   */
end_comment

begin_class
specifier|public
class|class
name|XMPMetaDataTest
block|{
specifier|protected
name|XMPMetadata
name|metadata
decl_stmt|;
specifier|protected
name|Document
name|parent
decl_stmt|;
specifier|protected
name|XMPSchema
name|tmp
decl_stmt|,
name|tmp2
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|metadata
operator|=
name|XMPMetadata
operator|.
name|createXMPMetadata
argument_list|()
expr_stmt|;
name|String
name|tmpNsURI
init|=
literal|"http://www.test.org/schem/"
decl_stmt|;
name|tmp
operator|=
operator|new
name|XMPSchema
argument_list|(
name|metadata
argument_list|,
name|tmpNsURI
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|addQualifiedBagValue
argument_list|(
literal|"BagContainer"
argument_list|,
literal|"Value1"
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|addQualifiedBagValue
argument_list|(
literal|"BagContainer"
argument_list|,
literal|"Value2"
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|addQualifiedBagValue
argument_list|(
literal|"BagContainer"
argument_list|,
literal|"Value3"
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|addUnqualifiedSequenceValue
argument_list|(
literal|"SeqContainer"
argument_list|,
literal|"Value1"
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|addUnqualifiedSequenceValue
argument_list|(
literal|"SeqContainer"
argument_list|,
literal|"Value2"
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|addUnqualifiedSequenceValue
argument_list|(
literal|"SeqContainer"
argument_list|,
literal|"Value3"
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|addProperty
argument_list|(
name|metadata
operator|.
name|getTypeMapping
argument_list|()
operator|.
name|createText
argument_list|(
literal|null
argument_list|,
literal|"test"
argument_list|,
literal|"simpleProperty"
argument_list|,
literal|"YEP"
argument_list|)
argument_list|)
expr_stmt|;
name|tmp2
operator|=
operator|new
name|XMPSchema
argument_list|(
name|metadata
argument_list|,
literal|"http://www.space.org/schem/"
argument_list|,
literal|"space"
argument_list|,
literal|"space"
argument_list|)
expr_stmt|;
name|tmp2
operator|.
name|addUnqualifiedSequenceValue
argument_list|(
literal|"SeqSpContainer"
argument_list|,
literal|"ValueSpace1"
argument_list|)
expr_stmt|;
name|tmp2
operator|.
name|addUnqualifiedSequenceValue
argument_list|(
literal|"SeqSpContainer"
argument_list|,
literal|"ValueSpace2"
argument_list|)
expr_stmt|;
name|tmp2
operator|.
name|addUnqualifiedSequenceValue
argument_list|(
literal|"SeqSpContainer"
argument_list|,
literal|"ValueSpace3"
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|addSchema
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|addSchema
argument_list|(
name|tmp2
argument_list|)
expr_stmt|;
comment|// Check schema getting
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tmp
argument_list|,
name|metadata
operator|.
name|getSchema
argument_list|(
name|tmpNsURI
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|metadata
operator|.
name|getSchema
argument_list|(
literal|"THIS URI NOT EXISTS !"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddingSchem
parameter_list|()
block|{
name|List
argument_list|<
name|XMPSchema
argument_list|>
name|vals
init|=
name|metadata
operator|.
name|getAllSchemas
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vals
operator|.
name|contains
argument_list|(
name|tmp
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vals
operator|.
name|contains
argument_list|(
name|tmp2
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*      * @Test public void displayResult() throws TransformException { System.out.println      * ("info used:\n XPacketBegin:"+metadata.getXpacketBegin()+ "\n XPacketID:"+metadata.getXpacketId());      * SaveMetadataHelper.serialize(metadata, true, System.out);      *       * }      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|xml
operator|.
name|XmpSerializationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testTransformerExceptionMessage
parameter_list|()
throws|throws
name|XmpSerializationException
block|{
throw|throw
operator|new
name|XmpSerializationException
argument_list|(
literal|"TEST"
argument_list|)
throw|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|xml
operator|.
name|XmpSerializationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testTransformerExceptionWithCause
parameter_list|()
throws|throws
name|XmpSerializationException
block|{
throw|throw
operator|new
name|XmpSerializationException
argument_list|(
literal|"TEST"
argument_list|,
operator|new
name|Throwable
argument_list|()
argument_list|)
throw|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInitMetaDataWithInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|xpacketBegin
init|=
literal|"TESTBEG"
decl_stmt|,
name|xpacketId
init|=
literal|"TESTID"
decl_stmt|,
name|xpacketBytes
init|=
literal|"TESTBYTES"
decl_stmt|,
name|xpacketEncoding
init|=
literal|"TESTENCOD"
decl_stmt|;
name|metadata
operator|=
name|XMPMetadata
operator|.
name|createXMPMetadata
argument_list|(
name|xpacketBegin
argument_list|,
name|xpacketId
argument_list|,
name|xpacketBytes
argument_list|,
name|xpacketEncoding
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|xpacketBegin
argument_list|,
name|metadata
operator|.
name|getXpacketBegin
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|xpacketId
argument_list|,
name|metadata
operator|.
name|getXpacketId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|xpacketBytes
argument_list|,
name|metadata
operator|.
name|getXpacketBytes
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|xpacketEncoding
argument_list|,
name|metadata
operator|.
name|getXpacketEncoding
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPDFBOX3257
parameter_list|()
throws|throws
name|IOException
throws|,
name|XmpParsingException
block|{
comment|// taken from file test-landscape2.pdf
name|String
name|xmpmeta
init|=
literal|"<?xpacket id=\"W5M0MpCehiHzreSzNTczkc9d\"?>\n"
operator|+
literal|"<x:xmpmeta xmlns:x=\"adobe:ns:meta/\" x:xmptk=\"Adobe XMP Core 4.0-c316 44.253921, Sun Oct 01 2006 17:14:39\">\n"
operator|+
literal|"<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\n"
operator|+
literal|"<rdf:Description rdf:about=\"\"\n"
operator|+
literal|"            xmlns:xap=\"http://ns.adobe.com/xap/1.0/\">\n"
operator|+
literal|"<xap:CreatorTool>Acrobat PDFMaker 8.1 for Word</xap:CreatorTool>\n"
operator|+
literal|"<xap:ModifyDate>2008-11-12T15:29:43+01:00</xap:ModifyDate>\n"
operator|+
literal|"<xap:CreateDate>2008-11-12T15:29:40+01:00</xap:CreateDate>\n"
operator|+
literal|"<xap:MetadataDate>2008-11-12T15:29:43+01:00</xap:MetadataDate>\n"
operator|+
literal|"</rdf:Description>\n"
operator|+
literal|"<rdf:Description rdf:about=\"\"\n"
operator|+
literal|"            xmlns:pdf=\"http://ns.adobe.com/pdf/1.3/\">\n"
operator|+
literal|"<pdf:Producer>Acrobat Distiller 8.1.0 (Windows)</pdf:Producer>\n"
operator|+
literal|"</rdf:Description>\n"
operator|+
literal|"<rdf:Description rdf:about=\"\"\n"
operator|+
literal|"            xmlns:dc=\"http://purl.org/dc/elements/1.1/\">\n"
operator|+
literal|"<dc:format>application/pdf</dc:format>\n"
operator|+
literal|"<dc:creator>\n"
operator|+
literal|"<rdf:Seq>\n"
operator|+
literal|"<rdf:li>R002325</rdf:li>\n"
operator|+
literal|"</rdf:Seq>\n"
operator|+
literal|"</dc:creator>\n"
operator|+
literal|"<dc:subject>\n"
operator|+
literal|"<rdf:Bag>\n"
operator|+
literal|"<rdf:li>one</rdf:li>\n"
operator|+
literal|"<rdf:li>two</rdf:li>\n"
operator|+
literal|"<rdf:li>three</rdf:li>\n"
operator|+
literal|"<rdf:li>four</rdf:li>\n"
operator|+
literal|"</rdf:Bag>\n"
operator|+
literal|"</dc:subject>\n"
operator|+
literal|"<dc:title>\n"
operator|+
literal|"<rdf:Alt>\n"
operator|+
literal|"<rdf:li xml:lang=\"x-default\"></rdf:li>\n"
operator|+
literal|"</rdf:Alt>\n"
operator|+
literal|"</dc:title>\n"
operator|+
literal|"</rdf:Description>\n"
operator|+
literal|"<rdf:Description rdf:about=\"\"\n"
operator|+
literal|"            xmlns:xapMM=\"http://ns.adobe.com/xap/1.0/mm/\">\n"
operator|+
literal|"<xapMM:DocumentID>uuid:31ae92cf-9a27-45e0-9371-0d2741e25919</xapMM:DocumentID>\n"
operator|+
literal|"<xapMM:InstanceID>uuid:2c7eb5da-9210-4666-8cef-e02ef6631c5e</xapMM:InstanceID>\n"
operator|+
literal|"</rdf:Description>\n"
operator|+
literal|"</rdf:RDF>\n"
operator|+
literal|"</x:xmpmeta>\n"
operator|+
literal|"<?xpacket end=\"w\"?>"
decl_stmt|;
name|DomXmpParser
name|xmpParser
init|=
operator|new
name|DomXmpParser
argument_list|()
decl_stmt|;
name|xmpParser
operator|.
name|setStrictParsing
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|//IOUtils.copy(meta.createInputStream(),System.out);
name|XMPMetadata
name|xmp
init|=
name|xmpParser
operator|.
name|parse
argument_list|(
name|xmpmeta
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|XMPBasicSchema
name|basicSchema
init|=
name|xmp
operator|.
name|getXMPBasicSchema
argument_list|()
decl_stmt|;
name|Calendar
name|createDate1
init|=
name|basicSchema
operator|.
name|getCreateDate
argument_list|()
decl_stmt|;
name|basicSchema
operator|.
name|setCreateDate
argument_list|(
operator|new
name|GregorianCalendar
argument_list|()
argument_list|)
expr_stmt|;
name|Calendar
name|createDate2
init|=
name|basicSchema
operator|.
name|getCreateDate
argument_list|()
decl_stmt|;
comment|// activate when bug is fixed
comment|//assertFalse("CreateDate has not been set", createDate1.equals(createDate2));
comment|// check that bugfix does not interfere with lists of properties with same name
name|DublinCoreSchema
name|dublinCoreSchema
init|=
name|xmp
operator|.
name|getDublinCoreSchema
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|subjects
init|=
name|dublinCoreSchema
operator|.
name|getSubjects
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|subjects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

