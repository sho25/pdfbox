begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *  ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|xmpbox
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|XMPSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|XMPSchemaFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|TypeMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestValidatePermitedMetadata
block|{
annotation|@
name|Parameters
argument_list|(
name|name
operator|=
literal|"{0} {1} {2}"
argument_list|)
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|initializeParameters
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
name|TestValidatePermitedMetadata
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/permited_metadata.txt"
argument_list|)
decl_stmt|;
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|is
argument_list|,
literal|"ISO-8859-1"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|"http://"
argument_list|)
condition|)
block|{
comment|// this is a line to handle
name|int
name|pos
init|=
name|line
operator|.
name|lastIndexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
name|int
name|spos
init|=
name|line
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|,
name|pos
argument_list|)
decl_stmt|;
name|String
name|namespace
init|=
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|spos
operator|+
literal|1
argument_list|)
decl_stmt|;
name|String
name|preferred
init|=
name|line
operator|.
name|substring
argument_list|(
name|spos
operator|+
literal|1
argument_list|,
name|pos
argument_list|)
decl_stmt|;
name|String
name|fieldname
init|=
name|line
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
name|namespace
block|,
name|preferred
block|,
name|fieldname
block|}
argument_list|)
expr_stmt|;
block|}
comment|// else skip line
comment|// next line
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
return|return
name|params
return|;
block|}
specifier|private
specifier|final
name|String
name|namespace
decl_stmt|;
specifier|private
specifier|final
name|String
name|fieldname
decl_stmt|;
specifier|private
specifier|final
name|String
name|preferred
decl_stmt|;
specifier|public
name|TestValidatePermitedMetadata
parameter_list|(
name|String
name|ns
parameter_list|,
name|String
name|prf
parameter_list|,
name|String
name|fn
parameter_list|)
block|{
name|this
operator|.
name|namespace
operator|=
name|ns
expr_stmt|;
name|this
operator|.
name|preferred
operator|=
name|prf
expr_stmt|;
name|this
operator|.
name|fieldname
operator|=
name|fn
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|checkExistence
parameter_list|()
throws|throws
name|Exception
block|{
comment|// ensure schema exists
name|XMPMetadata
name|xmpmd
init|=
operator|new
name|XMPMetadata
argument_list|()
decl_stmt|;
name|TypeMapping
name|mapping
init|=
operator|new
name|TypeMapping
argument_list|(
name|xmpmd
argument_list|)
decl_stmt|;
name|XMPSchemaFactory
name|factory
init|=
name|mapping
operator|.
name|getSchemaFactory
argument_list|(
name|namespace
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Schema not existing: "
operator|+
name|namespace
argument_list|,
name|factory
argument_list|)
expr_stmt|;
comment|// ensure preferred is as expected
name|XMPSchema
name|schema
init|=
name|factory
operator|.
name|createXMPSchema
argument_list|(
name|xmpmd
argument_list|,
literal|"aa"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|preferred
argument_list|,
name|schema
operator|.
name|getPreferedPrefix
argument_list|()
argument_list|)
expr_stmt|;
comment|// ensure field is defined
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|clz
init|=
name|schema
operator|.
name|getClass
argument_list|()
decl_stmt|;
for|for
control|(
name|Field
name|dfield
range|:
name|clz
operator|.
name|getDeclaredFields
argument_list|()
control|)
block|{
name|PropertyType
name|ptype
init|=
name|dfield
operator|.
name|getAnnotation
argument_list|(
name|PropertyType
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ptype
operator|!=
literal|null
condition|)
block|{
comment|// is a field definition
if|if
condition|(
name|String
operator|.
name|class
operator|.
name|equals
argument_list|(
name|dfield
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|value
init|=
operator|(
name|String
operator|)
name|dfield
operator|.
name|get
argument_list|(
name|clz
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldname
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
comment|// found the field defining
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
comment|// All field declaration are string
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Should be a string : "
operator|+
name|dfield
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Did not find field definition for '%s' in %s (%s)"
argument_list|,
name|fieldname
argument_list|,
name|clz
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|namespace
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

