begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|DateConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|XMPMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|AdobePDFSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|DublinCoreSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|XMPBasicSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|XMPSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|ThumbnailType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|xml
operator|.
name|DomXmpParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|xml
operator|.
name|XmpParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|xml
operator|.
name|XmpParsingException
operator|.
name|ErrorType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|xml
operator|.
name|XmpSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|DeserializationTest
block|{
specifier|protected
name|ByteArrayOutputStream
name|bos
decl_stmt|;
specifier|protected
name|XmpSerializer
name|serializer
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|bos
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|serializer
operator|=
operator|new
name|XmpSerializer
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStructuredRecursive
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|fis
init|=
name|DomXmpParser
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/org/apache/xmpbox/parser/structured_recursive.xml"
argument_list|)
decl_stmt|;
name|DomXmpParser
name|xdb
init|=
operator|new
name|DomXmpParser
argument_list|()
decl_stmt|;
name|xdb
operator|.
name|parse
argument_list|(
name|fis
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmptyLi
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|fis
init|=
name|DomXmpParser
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/org/apache/xmpbox/parser/empty_list.xml"
argument_list|)
decl_stmt|;
name|DomXmpParser
name|xdb
init|=
operator|new
name|DomXmpParser
argument_list|()
decl_stmt|;
name|xdb
operator|.
name|parse
argument_list|(
name|fis
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmptyLi2
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|fis
init|=
name|DomXmpParser
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/validxmp/emptyli.xml"
argument_list|)
decl_stmt|;
name|DomXmpParser
name|xdb
init|=
operator|new
name|DomXmpParser
argument_list|()
decl_stmt|;
name|XMPMetadata
name|meta
init|=
name|xdb
operator|.
name|parse
argument_list|(
name|fis
argument_list|)
decl_stmt|;
name|DublinCoreSchema
name|dc
init|=
name|meta
operator|.
name|getDublinCoreSchema
argument_list|()
decl_stmt|;
name|dc
operator|.
name|getCreatorsProperty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTitle
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|fis
init|=
name|DomXmpParser
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/validxmp/emptyli.xml"
argument_list|)
decl_stmt|;
name|DomXmpParser
name|xdb
init|=
operator|new
name|DomXmpParser
argument_list|()
decl_stmt|;
name|XMPMetadata
name|meta
init|=
name|xdb
operator|.
name|parse
argument_list|(
name|fis
argument_list|)
decl_stmt|;
name|DublinCoreSchema
name|dc
init|=
name|meta
operator|.
name|getDublinCoreSchema
argument_list|()
decl_stmt|;
name|String
name|s
init|=
name|dc
operator|.
name|getTitle
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"title value"
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAltBagSeq
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|fis
init|=
name|DomXmpParser
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/org/apache/xmpbox/parser/AltBagSeqTest.xml"
argument_list|)
decl_stmt|;
name|DomXmpParser
name|xdb
init|=
operator|new
name|DomXmpParser
argument_list|()
decl_stmt|;
name|xdb
operator|.
name|parse
argument_list|(
name|fis
argument_list|)
expr_stmt|;
comment|// XMPMetadata metadata=xdb.parse(fis);
comment|// SaveMetadataHelper.serialize(metadata, true, System.out);
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsartorStyleWithThumbs
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|fis
init|=
name|DomXmpParser
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/org/apache/xmpbox/parser/ThumbisartorStyle.xml"
argument_list|)
decl_stmt|;
name|DomXmpParser
name|xdb
init|=
operator|new
name|DomXmpParser
argument_list|()
decl_stmt|;
name|XMPMetadata
name|metadata
init|=
name|xdb
operator|.
name|parse
argument_list|(
name|fis
argument_list|)
decl_stmt|;
comment|//<xmpMM:DocumentID>
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"uuid:09C78666-2F91-3A9C-92AF-3691A6D594F7"
argument_list|,
name|metadata
operator|.
name|getXMPMediaManagementSchema
argument_list|()
operator|.
name|getDocumentID
argument_list|()
argument_list|)
expr_stmt|;
comment|//<xmp:CreateDate>
comment|//<xmp:ModifyDate>
comment|//<xmp:MetadataDate>
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DateConverter
operator|.
name|toCalendar
argument_list|(
literal|"2008-01-18T16:59:54+01:00"
argument_list|)
argument_list|,
name|metadata
operator|.
name|getXMPBasicSchema
argument_list|()
operator|.
name|getCreateDate
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DateConverter
operator|.
name|toCalendar
argument_list|(
literal|"2008-01-18T16:59:54+01:00"
argument_list|)
argument_list|,
name|metadata
operator|.
name|getXMPBasicSchema
argument_list|()
operator|.
name|getModifyDate
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DateConverter
operator|.
name|toCalendar
argument_list|(
literal|"2008-01-18T16:59:54+01:00"
argument_list|)
argument_list|,
name|metadata
operator|.
name|getXMPBasicSchema
argument_list|()
operator|.
name|getMetadataDate
argument_list|()
argument_list|)
expr_stmt|;
comment|// THUMBNAILS TEST
name|List
argument_list|<
name|ThumbnailType
argument_list|>
name|thumbs
init|=
name|metadata
operator|.
name|getXMPBasicSchema
argument_list|()
operator|.
name|getThumbnailsProperty
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|thumbs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|thumbs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ThumbnailType
name|thumb
init|=
name|thumbs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|162
argument_list|)
argument_list|,
name|thumb
operator|.
name|getHeight
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|216
argument_list|)
argument_list|,
name|thumb
operator|.
name|getWidth
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"JPEG"
argument_list|,
name|thumb
operator|.
name|getFormat
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"/9j/4AAQSkZJRgABAgEASABIAAD"
argument_list|,
name|thumb
operator|.
name|getImage
argument_list|()
argument_list|)
expr_stmt|;
name|thumb
operator|=
name|thumbs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|162
argument_list|)
argument_list|,
name|thumb
operator|.
name|getHeight
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|216
argument_list|)
argument_list|,
name|thumb
operator|.
name|getWidth
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"JPEG"
argument_list|,
name|thumb
operator|.
name|getFormat
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"/9j/4AAQSkZJRgABAgEASABIAAD"
argument_list|,
name|thumb
operator|.
name|getImage
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWithNoXPacketStart
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|fis
init|=
name|DomXmpParser
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/invalidxmp/noxpacket.xml"
argument_list|)
decl_stmt|;
name|DomXmpParser
name|xdb
init|=
operator|new
name|DomXmpParser
argument_list|()
decl_stmt|;
try|try
block|{
name|xdb
operator|.
name|parse
argument_list|(
name|fis
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should fail during parse"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XmpParsingException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ErrorType
operator|.
name|XpacketBadStart
argument_list|,
name|e
operator|.
name|getErrorType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWithNoXPacketEnd
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|fis
init|=
name|DomXmpParser
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/invalidxmp/noxpacketend.xml"
argument_list|)
decl_stmt|;
name|DomXmpParser
name|xdb
init|=
operator|new
name|DomXmpParser
argument_list|()
decl_stmt|;
try|try
block|{
name|xdb
operator|.
name|parse
argument_list|(
name|fis
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should fail during parse"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XmpParsingException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ErrorType
operator|.
name|XpacketBadEnd
argument_list|,
name|e
operator|.
name|getErrorType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWithNoRDFElement
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|fis
init|=
name|DomXmpParser
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/invalidxmp/noroot.xml"
argument_list|)
decl_stmt|;
name|DomXmpParser
name|xdb
init|=
operator|new
name|DomXmpParser
argument_list|()
decl_stmt|;
try|try
block|{
name|xdb
operator|.
name|parse
argument_list|(
name|fis
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should fail during parse"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XmpParsingException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ErrorType
operator|.
name|Format
argument_list|,
name|e
operator|.
name|getErrorType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWithTwoRDFElement
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|fis
init|=
name|DomXmpParser
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/invalidxmp/tworoot.xml"
argument_list|)
decl_stmt|;
name|DomXmpParser
name|xdb
init|=
operator|new
name|DomXmpParser
argument_list|()
decl_stmt|;
try|try
block|{
name|xdb
operator|.
name|parse
argument_list|(
name|fis
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should fail during parse"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XmpParsingException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ErrorType
operator|.
name|Format
argument_list|,
name|e
operator|.
name|getErrorType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWithInvalidRDFElementPrefix
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|fis
init|=
name|DomXmpParser
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/invalidxmp/invalidroot2.xml"
argument_list|)
decl_stmt|;
name|DomXmpParser
name|xdb
init|=
operator|new
name|DomXmpParser
argument_list|()
decl_stmt|;
try|try
block|{
name|xdb
operator|.
name|parse
argument_list|(
name|fis
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should fail during parse"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XmpParsingException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ErrorType
operator|.
name|Format
argument_list|,
name|e
operator|.
name|getErrorType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWithRDFRootAsText
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|fis
init|=
name|DomXmpParser
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/invalidxmp/invalidroot.xml"
argument_list|)
decl_stmt|;
name|DomXmpParser
name|xdb
init|=
operator|new
name|DomXmpParser
argument_list|()
decl_stmt|;
try|try
block|{
name|xdb
operator|.
name|parse
argument_list|(
name|fis
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should fail during parse"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XmpParsingException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ErrorType
operator|.
name|Format
argument_list|,
name|e
operator|.
name|getErrorType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUndefinedSchema
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|fis
init|=
name|DomXmpParser
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/invalidxmp/undefinedschema.xml"
argument_list|)
decl_stmt|;
name|DomXmpParser
name|xdb
init|=
operator|new
name|DomXmpParser
argument_list|()
decl_stmt|;
try|try
block|{
name|xdb
operator|.
name|parse
argument_list|(
name|fis
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should fail during parse"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XmpParsingException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ErrorType
operator|.
name|NoSchema
argument_list|,
name|e
operator|.
name|getErrorType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUndefinedPropertyWithDefinedSchema
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|fis
init|=
name|DomXmpParser
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/invalidxmp/undefinedpropertyindefinedschema.xml"
argument_list|)
decl_stmt|;
name|DomXmpParser
name|xdb
init|=
operator|new
name|DomXmpParser
argument_list|()
decl_stmt|;
try|try
block|{
name|xdb
operator|.
name|parse
argument_list|(
name|fis
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should fail during parse"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XmpParsingException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ErrorType
operator|.
name|NoType
argument_list|,
name|e
operator|.
name|getErrorType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUndefinedStructuredWithDefinedSchema
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|fis
init|=
name|DomXmpParser
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/invalidxmp/undefinedstructuredindefinedschema.xml"
argument_list|)
decl_stmt|;
name|DomXmpParser
name|xdb
init|=
operator|new
name|DomXmpParser
argument_list|()
decl_stmt|;
try|try
block|{
name|xdb
operator|.
name|parse
argument_list|(
name|fis
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should fail during parse"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XmpParsingException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ErrorType
operator|.
name|NoValueType
argument_list|,
name|e
operator|.
name|getErrorType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRdfAboutFound
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|fis
init|=
name|DomXmpParser
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/validxmp/emptyli.xml"
argument_list|)
decl_stmt|;
name|DomXmpParser
name|xdb
init|=
operator|new
name|DomXmpParser
argument_list|()
decl_stmt|;
name|XMPMetadata
name|meta
init|=
name|xdb
operator|.
name|parse
argument_list|(
name|fis
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|XMPSchema
argument_list|>
name|schemas
init|=
name|meta
operator|.
name|getAllSchemas
argument_list|()
decl_stmt|;
for|for
control|(
name|XMPSchema
name|xmpSchema
range|:
name|schemas
control|)
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|xmpSchema
operator|.
name|getAboutAttribute
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWihtAttributesAsProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|fis
init|=
name|DomXmpParser
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/validxmp/attr_as_props.xml"
argument_list|)
decl_stmt|;
name|DomXmpParser
name|xdb
init|=
operator|new
name|DomXmpParser
argument_list|()
decl_stmt|;
name|XMPMetadata
name|meta
init|=
name|xdb
operator|.
name|parse
argument_list|(
name|fis
argument_list|)
decl_stmt|;
name|AdobePDFSchema
name|pdf
init|=
name|meta
operator|.
name|getAdobePDFSchema
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"GPL Ghostscript 8.64"
argument_list|,
name|pdf
operator|.
name|getProducer
argument_list|()
argument_list|)
expr_stmt|;
name|DublinCoreSchema
name|dc
init|=
name|meta
operator|.
name|getDublinCoreSchema
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"application/pdf"
argument_list|,
name|dc
operator|.
name|getFormat
argument_list|()
argument_list|)
expr_stmt|;
name|XMPBasicSchema
name|basic
init|=
name|meta
operator|.
name|getXMPBasicSchema
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|basic
operator|.
name|getCreateDate
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSpaceTextValues
parameter_list|()
throws|throws
name|Exception
block|{
comment|// check values with spaces at start or end
comment|// in this case, the value should not be trimmed
name|InputStream
name|is
init|=
name|DomXmpParser
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/validxmp/only_space_fields.xmp"
argument_list|)
decl_stmt|;
name|DomXmpParser
name|xdb
init|=
operator|new
name|DomXmpParser
argument_list|()
decl_stmt|;
name|XMPMetadata
name|meta
init|=
name|xdb
operator|.
name|parse
argument_list|(
name|is
argument_list|)
decl_stmt|;
comment|// check producer
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|" "
argument_list|,
name|meta
operator|.
name|getAdobePDFSchema
argument_list|()
operator|.
name|getProducer
argument_list|()
argument_list|)
expr_stmt|;
comment|// check creator tool
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Canon "
argument_list|,
name|meta
operator|.
name|getXMPBasicSchema
argument_list|()
operator|.
name|getCreatorTool
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

