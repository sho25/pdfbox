begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|schema
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|DateConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|XMPMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|XmpConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|AbstractField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|ArrayProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|BadFieldValueException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|BooleanType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|Cardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|DateType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|IntegerType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|TextType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|TypeMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|XMPSchemaTest
block|{
specifier|protected
name|XMPMetadata
name|parent
decl_stmt|;
specifier|protected
name|XMPSchema
name|schem
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|resetDocument
parameter_list|()
throws|throws
name|Exception
block|{
name|parent
operator|=
name|XMPMetadata
operator|.
name|createXMPMetadata
argument_list|()
expr_stmt|;
name|schem
operator|=
operator|new
name|XMPSchema
argument_list|(
name|parent
argument_list|,
literal|"nsURI"
argument_list|,
literal|"nsSchem"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Check if Bag (Unordered Array) management is ok      *       * @throws InappropriateTypeException      */
annotation|@
name|Test
specifier|public
name|void
name|testBagManagement
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|bagName
init|=
literal|"BAGTEST"
decl_stmt|;
name|String
name|value1
init|=
literal|"valueOne"
decl_stmt|;
name|String
name|value2
init|=
literal|"valueTwo"
decl_stmt|;
name|schem
operator|.
name|addBagValue
argument_list|(
name|bagName
argument_list|,
name|schem
operator|.
name|getMetadata
argument_list|()
operator|.
name|getTypeMapping
argument_list|()
operator|.
name|createText
argument_list|(
literal|null
argument_list|,
literal|"rdf"
argument_list|,
literal|"li"
argument_list|,
name|value1
argument_list|)
argument_list|)
expr_stmt|;
name|schem
operator|.
name|addQualifiedBagValue
argument_list|(
name|bagName
argument_list|,
name|value2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|schem
operator|.
name|getUnqualifiedBagValueList
argument_list|(
name|bagName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|value1
argument_list|,
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|value2
argument_list|,
name|values
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|schem
operator|.
name|removeUnqualifiedBagValue
argument_list|(
name|bagName
argument_list|,
name|value1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|values2
init|=
name|schem
operator|.
name|getUnqualifiedBagValueList
argument_list|(
name|bagName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|values2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|value2
argument_list|,
name|values2
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testArrayList
parameter_list|()
throws|throws
name|Exception
block|{
name|XMPMetadata
name|meta
init|=
name|XMPMetadata
operator|.
name|createXMPMetadata
argument_list|()
decl_stmt|;
name|ArrayProperty
name|newSeq
init|=
name|meta
operator|.
name|getTypeMapping
argument_list|()
operator|.
name|createArrayProperty
argument_list|(
literal|null
argument_list|,
literal|"nsSchem"
argument_list|,
literal|"seqType"
argument_list|,
name|Cardinality
operator|.
name|Seq
argument_list|)
decl_stmt|;
name|TypeMapping
name|tm
init|=
name|meta
operator|.
name|getTypeMapping
argument_list|()
decl_stmt|;
name|TextType
name|li1
init|=
name|tm
operator|.
name|createText
argument_list|(
literal|null
argument_list|,
literal|"rdf"
argument_list|,
literal|"li"
argument_list|,
literal|"valeur1"
argument_list|)
decl_stmt|;
name|TextType
name|li2
init|=
name|tm
operator|.
name|createText
argument_list|(
literal|null
argument_list|,
literal|"rdf"
argument_list|,
literal|"li"
argument_list|,
literal|"valeur2"
argument_list|)
decl_stmt|;
name|newSeq
operator|.
name|getContainer
argument_list|()
operator|.
name|addProperty
argument_list|(
name|li1
argument_list|)
expr_stmt|;
name|newSeq
operator|.
name|getContainer
argument_list|()
operator|.
name|addProperty
argument_list|(
name|li2
argument_list|)
expr_stmt|;
name|schem
operator|.
name|addProperty
argument_list|(
name|newSeq
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AbstractField
argument_list|>
name|list
init|=
name|schem
operator|.
name|getUnqualifiedArrayList
argument_list|(
literal|"seqType"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|list
operator|.
name|contains
argument_list|(
name|li1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|list
operator|.
name|contains
argument_list|(
name|li2
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Check if Seq (Ordered Array) management is ok      *       * @throws InappropriateTypeException      * @throws IOException      */
annotation|@
name|Test
specifier|public
name|void
name|testSeqManagement
parameter_list|()
throws|throws
name|Exception
block|{
name|Calendar
name|date
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|BooleanType
name|bool
init|=
name|parent
operator|.
name|getTypeMapping
argument_list|()
operator|.
name|createBoolean
argument_list|(
literal|null
argument_list|,
literal|"rdf"
argument_list|,
literal|"li"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|textVal
init|=
literal|"seqValue"
decl_stmt|;
name|String
name|seqName
init|=
literal|"SEQNAME"
decl_stmt|;
name|schem
operator|.
name|addUnqualifiedSequenceDateValue
argument_list|(
name|seqName
argument_list|,
name|date
argument_list|)
expr_stmt|;
name|schem
operator|.
name|addUnqualifiedSequenceValue
argument_list|(
name|seqName
argument_list|,
name|bool
argument_list|)
expr_stmt|;
name|schem
operator|.
name|addUnqualifiedSequenceValue
argument_list|(
name|seqName
argument_list|,
name|textVal
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Calendar
argument_list|>
name|dates
init|=
name|schem
operator|.
name|getUnqualifiedSequenceDateValueList
argument_list|(
name|seqName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dates
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|date
argument_list|,
name|dates
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|schem
operator|.
name|getUnqualifiedSequenceValueList
argument_list|(
name|seqName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|values
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DateConverter
operator|.
name|toISO8601
argument_list|(
name|date
argument_list|)
argument_list|,
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|bool
operator|.
name|getStringValue
argument_list|()
argument_list|,
name|values
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|textVal
argument_list|,
name|values
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|schem
operator|.
name|removeUnqualifiedSequenceDateValue
argument_list|(
name|seqName
argument_list|,
name|date
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|schem
operator|.
name|getUnqualifiedSequenceDateValueList
argument_list|(
name|seqName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|schem
operator|.
name|removeUnqualifiedSequenceValue
argument_list|(
name|seqName
argument_list|,
name|bool
argument_list|)
expr_stmt|;
name|schem
operator|.
name|removeUnqualifiedSequenceValue
argument_list|(
name|seqName
argument_list|,
name|textVal
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|schem
operator|.
name|getUnqualifiedSequenceValueList
argument_list|(
name|seqName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|rdfAboutTest
parameter_list|()
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|schem
operator|.
name|getAboutValue
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|about
init|=
literal|"about"
decl_stmt|;
name|schem
operator|.
name|setAboutAsSimple
argument_list|(
name|about
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|about
argument_list|,
name|schem
operator|.
name|getAboutValue
argument_list|()
argument_list|)
expr_stmt|;
name|schem
operator|.
name|setAboutAsSimple
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|schem
operator|.
name|getAboutValue
argument_list|()
argument_list|)
expr_stmt|;
name|schem
operator|.
name|setAboutAsSimple
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|schem
operator|.
name|getAboutValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|BadFieldValueException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testBadRdfAbout
parameter_list|()
throws|throws
name|Exception
block|{
name|schem
operator|.
name|setAbout
argument_list|(
operator|new
name|Attribute
argument_list|(
literal|null
argument_list|,
literal|"about"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetSpecifiedSimpleTypeProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|prop
init|=
literal|"testprop"
decl_stmt|;
name|String
name|val
init|=
literal|"value"
decl_stmt|;
name|String
name|val2
init|=
literal|"value2"
decl_stmt|;
name|schem
operator|.
name|setTextPropertyValueAsSimple
argument_list|(
name|prop
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|val
argument_list|,
name|schem
operator|.
name|getUnqualifiedTextPropertyValue
argument_list|(
name|prop
argument_list|)
argument_list|)
expr_stmt|;
name|schem
operator|.
name|setTextPropertyValueAsSimple
argument_list|(
name|prop
argument_list|,
name|val2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|val2
argument_list|,
name|schem
operator|.
name|getUnqualifiedTextPropertyValue
argument_list|(
name|prop
argument_list|)
argument_list|)
expr_stmt|;
name|schem
operator|.
name|setTextPropertyValueAsSimple
argument_list|(
name|prop
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|schem
operator|.
name|getUnqualifiedTextProperty
argument_list|(
name|prop
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSpecifiedSimplePropertyFormer
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|prop
init|=
literal|"testprop"
decl_stmt|;
name|String
name|val
init|=
literal|"value"
decl_stmt|;
name|String
name|val2
init|=
literal|"value2"
decl_stmt|;
name|schem
operator|.
name|setTextPropertyValueAsSimple
argument_list|(
name|prop
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|TextType
name|text
init|=
name|schem
operator|.
name|getMetadata
argument_list|()
operator|.
name|getTypeMapping
argument_list|()
operator|.
name|createText
argument_list|(
literal|null
argument_list|,
name|schem
operator|.
name|getPrefix
argument_list|()
argument_list|,
name|prop
argument_list|,
literal|"value2"
argument_list|)
decl_stmt|;
name|schem
operator|.
name|setTextProperty
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|val2
argument_list|,
name|schem
operator|.
name|getUnqualifiedTextPropertyValue
argument_list|(
name|prop
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|text
argument_list|,
name|schem
operator|.
name|getUnqualifiedTextProperty
argument_list|(
name|prop
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAsSimpleMethods
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|bool
init|=
literal|"bool"
decl_stmt|;
name|boolean
name|boolVal
init|=
literal|true
decl_stmt|;
name|String
name|date
init|=
literal|"date"
decl_stmt|;
name|Calendar
name|dateVal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|String
name|integ
init|=
literal|"integer"
decl_stmt|;
name|Integer
name|i
init|=
literal|1
decl_stmt|;
name|String
name|langprop
init|=
literal|"langprop"
decl_stmt|;
name|String
name|lang
init|=
literal|"x-default"
decl_stmt|;
name|String
name|langVal
init|=
literal|"langVal"
decl_stmt|;
name|String
name|bagprop
init|=
literal|"bagProp"
decl_stmt|;
name|String
name|bagVal
init|=
literal|"bagVal"
decl_stmt|;
name|String
name|seqprop
init|=
literal|"SeqProp"
decl_stmt|;
name|String
name|seqPropVal
init|=
literal|"seqval"
decl_stmt|;
name|String
name|seqdate
init|=
literal|"SeqDate"
decl_stmt|;
name|String
name|prefSchem
init|=
literal|""
decl_stmt|;
name|schem
operator|.
name|setBooleanPropertyValueAsSimple
argument_list|(
name|bool
argument_list|,
name|boolVal
argument_list|)
expr_stmt|;
name|schem
operator|.
name|setDatePropertyValueAsSimple
argument_list|(
name|date
argument_list|,
name|dateVal
argument_list|)
expr_stmt|;
name|schem
operator|.
name|setIntegerPropertyValueAsSimple
argument_list|(
name|integ
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|schem
operator|.
name|setUnqualifiedLanguagePropertyValue
argument_list|(
name|langprop
argument_list|,
name|lang
argument_list|,
name|langVal
argument_list|)
expr_stmt|;
name|schem
operator|.
name|addBagValueAsSimple
argument_list|(
name|bagprop
argument_list|,
name|bagVal
argument_list|)
expr_stmt|;
name|schem
operator|.
name|addUnqualifiedSequenceValue
argument_list|(
name|seqprop
argument_list|,
name|seqPropVal
argument_list|)
expr_stmt|;
name|schem
operator|.
name|addSequenceDateValueAsSimple
argument_list|(
name|seqdate
argument_list|,
name|dateVal
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|boolVal
argument_list|)
argument_list|,
name|schem
operator|.
name|getBooleanProperty
argument_list|(
name|prefSchem
operator|+
name|bool
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dateVal
argument_list|,
name|schem
operator|.
name|getDateProperty
argument_list|(
name|prefSchem
operator|+
name|date
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
operator|+
name|i
argument_list|,
name|schem
operator|.
name|getIntegerProperty
argument_list|(
name|prefSchem
operator|+
name|integ
argument_list|)
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|langVal
argument_list|,
name|schem
operator|.
name|getUnqualifiedLanguagePropertyValue
argument_list|(
name|langprop
argument_list|,
name|lang
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|schem
operator|.
name|getUnqualifiedBagValueList
argument_list|(
name|bagprop
argument_list|)
operator|.
name|contains
argument_list|(
name|bagVal
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|schem
operator|.
name|getUnqualifiedSequenceValueList
argument_list|(
name|seqprop
argument_list|)
operator|.
name|contains
argument_list|(
name|seqPropVal
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|schem
operator|.
name|getUnqualifiedSequenceDateValueList
argument_list|(
name|seqdate
argument_list|)
operator|.
name|contains
argument_list|(
name|dateVal
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|schem
operator|.
name|getUnqualifiedLanguagePropertyLanguagesValue
argument_list|(
name|langprop
argument_list|)
operator|.
name|contains
argument_list|(
name|lang
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|boolVal
argument_list|,
name|schem
operator|.
name|getBooleanPropertyValueAsSimple
argument_list|(
name|bool
argument_list|)
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dateVal
argument_list|,
name|schem
operator|.
name|getDatePropertyValueAsSimple
argument_list|(
name|date
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|i
argument_list|,
name|schem
operator|.
name|getIntegerPropertyValueAsSimple
argument_list|(
name|integ
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|langVal
argument_list|,
name|schem
operator|.
name|getUnqualifiedLanguagePropertyValue
argument_list|(
name|langprop
argument_list|,
name|lang
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|schem
operator|.
name|getUnqualifiedBagValueList
argument_list|(
name|bagprop
argument_list|)
operator|.
name|contains
argument_list|(
name|bagVal
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|schem
operator|.
name|getUnqualifiedSequenceValueList
argument_list|(
name|seqprop
argument_list|)
operator|.
name|contains
argument_list|(
name|seqPropVal
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|schem
operator|.
name|getUnqualifiedSequenceDateValueList
argument_list|(
name|seqdate
argument_list|)
operator|.
name|contains
argument_list|(
name|dateVal
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|schem
operator|.
name|getUnqualifiedLanguagePropertyLanguagesValue
argument_list|(
name|langprop
argument_list|)
operator|.
name|contains
argument_list|(
name|lang
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test All common simple properties management in XMPSchema      *       * @throws InappropriateTypeException      * @throws BadFieldValueException      */
annotation|@
name|Test
specifier|public
name|void
name|testProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"nsURI"
argument_list|,
name|schem
operator|.
name|getNamespace
argument_list|()
argument_list|)
expr_stmt|;
comment|// In real cases, rdf ns will be declared before !
name|schem
operator|.
name|addNamespace
argument_list|(
literal|"http://www.w3.org/1999/02/22-rdf-syntax-ns#"
argument_list|,
literal|"rdf"
argument_list|)
expr_stmt|;
name|String
name|aboutVal
init|=
literal|"aboutTest"
decl_stmt|;
name|schem
operator|.
name|setAboutAsSimple
argument_list|(
name|aboutVal
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|aboutVal
argument_list|,
name|schem
operator|.
name|getAboutValue
argument_list|()
argument_list|)
expr_stmt|;
name|Attribute
name|about
init|=
operator|new
name|Attribute
argument_list|(
name|XmpConstants
operator|.
name|RDF_NAMESPACE
argument_list|,
literal|"about"
argument_list|,
literal|"YEP"
argument_list|)
decl_stmt|;
name|schem
operator|.
name|setAbout
argument_list|(
name|about
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|about
argument_list|,
name|schem
operator|.
name|getAboutAttribute
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|textProp
init|=
literal|"textProp"
decl_stmt|;
name|String
name|textPropVal
init|=
literal|"TextPropTest"
decl_stmt|;
name|schem
operator|.
name|setTextPropertyValue
argument_list|(
name|textProp
argument_list|,
name|textPropVal
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|textPropVal
argument_list|,
name|schem
operator|.
name|getUnqualifiedTextPropertyValue
argument_list|(
name|textProp
argument_list|)
argument_list|)
expr_stmt|;
name|TextType
name|text
init|=
name|parent
operator|.
name|getTypeMapping
argument_list|()
operator|.
name|createText
argument_list|(
literal|null
argument_list|,
literal|"nsSchem"
argument_list|,
literal|"textType"
argument_list|,
literal|"GRINGO"
argument_list|)
decl_stmt|;
name|schem
operator|.
name|setTextProperty
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|text
argument_list|,
name|schem
operator|.
name|getUnqualifiedTextProperty
argument_list|(
literal|"textType"
argument_list|)
argument_list|)
expr_stmt|;
name|Calendar
name|dateVal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|String
name|date
init|=
literal|"nsSchem:dateProp"
decl_stmt|;
name|schem
operator|.
name|setDatePropertyValue
argument_list|(
name|date
argument_list|,
name|dateVal
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dateVal
argument_list|,
name|schem
operator|.
name|getDatePropertyValue
argument_list|(
name|date
argument_list|)
argument_list|)
expr_stmt|;
name|DateType
name|dateType
init|=
name|parent
operator|.
name|getTypeMapping
argument_list|()
operator|.
name|createDate
argument_list|(
literal|null
argument_list|,
literal|"nsSchem"
argument_list|,
literal|"dateType"
argument_list|,
name|Calendar
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
name|schem
operator|.
name|setDateProperty
argument_list|(
name|dateType
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dateType
argument_list|,
name|schem
operator|.
name|getDateProperty
argument_list|(
literal|"dateType"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|bool
init|=
literal|"nsSchem:booleanTestProp"
decl_stmt|;
name|Boolean
name|boolVal
init|=
literal|false
decl_stmt|;
name|schem
operator|.
name|setBooleanPropertyValue
argument_list|(
name|bool
argument_list|,
name|boolVal
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|boolVal
argument_list|,
name|schem
operator|.
name|getBooleanPropertyValue
argument_list|(
name|bool
argument_list|)
argument_list|)
expr_stmt|;
name|BooleanType
name|boolType
init|=
name|parent
operator|.
name|getTypeMapping
argument_list|()
operator|.
name|createBoolean
argument_list|(
literal|null
argument_list|,
literal|"nsSchem"
argument_list|,
literal|"boolType"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|schem
operator|.
name|setBooleanProperty
argument_list|(
name|boolType
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|boolType
argument_list|,
name|schem
operator|.
name|getBooleanProperty
argument_list|(
literal|"boolType"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|intProp
init|=
literal|"nsSchem:IntegerTestProp"
decl_stmt|;
name|Integer
name|intPropVal
init|=
literal|5
decl_stmt|;
name|schem
operator|.
name|setIntegerPropertyValue
argument_list|(
name|intProp
argument_list|,
name|intPropVal
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|intPropVal
argument_list|,
name|schem
operator|.
name|getIntegerPropertyValue
argument_list|(
name|intProp
argument_list|)
argument_list|)
expr_stmt|;
name|IntegerType
name|intType
init|=
name|parent
operator|.
name|getTypeMapping
argument_list|()
operator|.
name|createInteger
argument_list|(
literal|null
argument_list|,
literal|"nsSchem"
argument_list|,
literal|"intType"
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|schem
operator|.
name|setIntegerProperty
argument_list|(
name|intType
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|intType
argument_list|,
name|schem
operator|.
name|getIntegerProperty
argument_list|(
literal|"intType"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check bad type verification
name|boolean
name|ok
init|=
literal|false
decl_stmt|;
try|try
block|{
name|schem
operator|.
name|getIntegerProperty
argument_list|(
literal|"boolType"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|ok
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|schem
operator|.
name|getUnqualifiedTextProperty
argument_list|(
literal|"intType"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|ok
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|schem
operator|.
name|getDateProperty
argument_list|(
literal|"textType"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|ok
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|schem
operator|.
name|getBooleanProperty
argument_list|(
literal|"dateType"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|ok
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAltProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|altProp
init|=
literal|"AltProp"
decl_stmt|;
name|String
name|defaultLang
init|=
literal|"x-default"
decl_stmt|;
name|String
name|defaultVal
init|=
literal|"Default Language"
decl_stmt|;
name|String
name|usLang
init|=
literal|"en-us"
decl_stmt|;
name|String
name|usVal
init|=
literal|"American Language"
decl_stmt|;
name|String
name|frLang
init|=
literal|"fr-fr"
decl_stmt|;
name|String
name|frVal
init|=
literal|"Lang française"
decl_stmt|;
name|schem
operator|.
name|setUnqualifiedLanguagePropertyValue
argument_list|(
name|altProp
argument_list|,
name|usLang
argument_list|,
name|usVal
argument_list|)
expr_stmt|;
name|schem
operator|.
name|setUnqualifiedLanguagePropertyValue
argument_list|(
name|altProp
argument_list|,
name|defaultLang
argument_list|,
name|defaultVal
argument_list|)
expr_stmt|;
name|schem
operator|.
name|setUnqualifiedLanguagePropertyValue
argument_list|(
name|altProp
argument_list|,
name|frLang
argument_list|,
name|frVal
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|defaultVal
argument_list|,
name|schem
operator|.
name|getUnqualifiedLanguagePropertyValue
argument_list|(
name|altProp
argument_list|,
name|defaultLang
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|frVal
argument_list|,
name|schem
operator|.
name|getUnqualifiedLanguagePropertyValue
argument_list|(
name|altProp
argument_list|,
name|frLang
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|usVal
argument_list|,
name|schem
operator|.
name|getUnqualifiedLanguagePropertyValue
argument_list|(
name|altProp
argument_list|,
name|usLang
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|languages
init|=
name|schem
operator|.
name|getUnqualifiedLanguagePropertyLanguagesValue
argument_list|(
name|altProp
argument_list|)
decl_stmt|;
comment|// default language must be in first place
name|Assert
operator|.
name|assertEquals
argument_list|(
name|defaultLang
argument_list|,
name|languages
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|languages
operator|.
name|contains
argument_list|(
name|usLang
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|languages
operator|.
name|contains
argument_list|(
name|frLang
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test replacement/removal
name|frVal
operator|=
literal|"Langue française"
expr_stmt|;
name|schem
operator|.
name|setUnqualifiedLanguagePropertyValue
argument_list|(
name|altProp
argument_list|,
name|frLang
argument_list|,
name|frVal
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|frVal
argument_list|,
name|schem
operator|.
name|getUnqualifiedLanguagePropertyValue
argument_list|(
name|altProp
argument_list|,
name|frLang
argument_list|)
argument_list|)
expr_stmt|;
name|schem
operator|.
name|setUnqualifiedLanguagePropertyValue
argument_list|(
name|altProp
argument_list|,
name|frLang
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|languages
operator|=
name|schem
operator|.
name|getUnqualifiedLanguagePropertyLanguagesValue
argument_list|(
name|altProp
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|languages
operator|.
name|contains
argument_list|(
name|frLang
argument_list|)
argument_list|)
expr_stmt|;
name|schem
operator|.
name|setUnqualifiedLanguagePropertyValue
argument_list|(
name|altProp
argument_list|,
name|frLang
argument_list|,
name|frVal
argument_list|)
expr_stmt|;
block|}
comment|/**      * check if merging is ok      *       * @throws InappropriateTypeException      * @throws IOException      */
annotation|@
name|Test
specifier|public
name|void
name|testMergeSchema
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|bagName
init|=
literal|"bagName"
decl_stmt|;
name|String
name|seqName
init|=
literal|"seqName"
decl_stmt|;
name|String
name|qseqName
init|=
literal|"test:"
operator|+
name|seqName
decl_stmt|;
name|String
name|altName
init|=
literal|"AltProp"
decl_stmt|;
name|String
name|qaltName
init|=
literal|"test:"
operator|+
name|altName
decl_stmt|;
name|String
name|valBagSchem1
init|=
literal|"BagvalSchem1"
decl_stmt|;
name|String
name|valBagSchem2
init|=
literal|"BagvalSchem2"
decl_stmt|;
name|String
name|valSeqSchem1
init|=
literal|"seqvalSchem1"
decl_stmt|;
name|String
name|valSeqSchem2
init|=
literal|"seqvalSchem2"
decl_stmt|;
name|String
name|valAltSchem1
init|=
literal|"altvalSchem1"
decl_stmt|;
name|String
name|langAltSchem1
init|=
literal|"x-default"
decl_stmt|;
name|String
name|valAltSchem2
init|=
literal|"altvalSchem2"
decl_stmt|;
name|String
name|langAltSchem2
init|=
literal|"fr-fr"
decl_stmt|;
name|XMPSchema
name|schem1
init|=
operator|new
name|XMPSchema
argument_list|(
name|parent
argument_list|,
literal|"http://www.test.org/schem/"
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|schem1
operator|.
name|addQualifiedBagValue
argument_list|(
name|bagName
argument_list|,
name|valBagSchem1
argument_list|)
expr_stmt|;
name|schem1
operator|.
name|addUnqualifiedSequenceValue
argument_list|(
name|seqName
argument_list|,
name|valSeqSchem1
argument_list|)
expr_stmt|;
name|schem1
operator|.
name|setUnqualifiedLanguagePropertyValue
argument_list|(
name|altName
argument_list|,
name|langAltSchem1
argument_list|,
name|valAltSchem1
argument_list|)
expr_stmt|;
name|XMPSchema
name|schem2
init|=
operator|new
name|XMPSchema
argument_list|(
name|parent
argument_list|,
literal|"http://www.test.org/schem/"
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|schem2
operator|.
name|addQualifiedBagValue
argument_list|(
name|bagName
argument_list|,
name|valBagSchem2
argument_list|)
expr_stmt|;
name|schem2
operator|.
name|addUnqualifiedSequenceValue
argument_list|(
name|seqName
argument_list|,
name|valSeqSchem2
argument_list|)
expr_stmt|;
name|schem2
operator|.
name|setUnqualifiedLanguagePropertyValue
argument_list|(
name|altName
argument_list|,
name|langAltSchem2
argument_list|,
name|valAltSchem2
argument_list|)
expr_stmt|;
name|schem1
operator|.
name|merge
argument_list|(
name|schem2
argument_list|)
expr_stmt|;
comment|// Check if all values are present
name|Assert
operator|.
name|assertEquals
argument_list|(
name|valAltSchem2
argument_list|,
name|schem1
operator|.
name|getUnqualifiedLanguagePropertyValue
argument_list|(
name|altName
argument_list|,
name|langAltSchem2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|valAltSchem1
argument_list|,
name|schem1
operator|.
name|getUnqualifiedLanguagePropertyValue
argument_list|(
name|altName
argument_list|,
name|langAltSchem1
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|bag
init|=
name|schem1
operator|.
name|getUnqualifiedBagValueList
argument_list|(
name|bagName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|bag
operator|.
name|contains
argument_list|(
name|valBagSchem1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|bag
operator|.
name|contains
argument_list|(
name|valBagSchem2
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|seq
init|=
name|schem1
operator|.
name|getUnqualifiedSequenceValueList
argument_list|(
name|seqName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|seq
operator|.
name|contains
argument_list|(
name|valSeqSchem1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|seq
operator|.
name|contains
argument_list|(
name|valSeqSchem1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListAndContainerAccessor
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|boolname
init|=
literal|"bool"
decl_stmt|;
name|boolean
name|boolVal
init|=
literal|true
decl_stmt|;
name|BooleanType
name|bool
init|=
name|parent
operator|.
name|getTypeMapping
argument_list|()
operator|.
name|createBoolean
argument_list|(
literal|null
argument_list|,
name|schem
operator|.
name|getPrefix
argument_list|()
argument_list|,
name|boolname
argument_list|,
name|boolVal
argument_list|)
decl_stmt|;
name|Attribute
name|att
init|=
operator|new
name|Attribute
argument_list|(
name|XmpConstants
operator|.
name|RDF_NAMESPACE
argument_list|,
literal|"test"
argument_list|,
literal|"vgh"
argument_list|)
decl_stmt|;
name|schem
operator|.
name|setAttribute
argument_list|(
name|att
argument_list|)
expr_stmt|;
name|schem
operator|.
name|setBooleanProperty
argument_list|(
name|bool
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|schem
operator|.
name|getAllProperties
argument_list|()
argument_list|,
name|schem
operator|.
name|getAllProperties
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|schem
operator|.
name|getAllProperties
argument_list|()
operator|.
name|contains
argument_list|(
name|bool
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|schem
operator|.
name|getAllAttributes
argument_list|()
operator|.
name|contains
argument_list|(
name|att
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|bool
argument_list|,
name|schem
operator|.
name|getProperty
argument_list|(
name|boolname
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

