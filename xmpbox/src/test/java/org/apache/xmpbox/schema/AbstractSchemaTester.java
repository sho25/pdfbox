begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|schema
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|XMPMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|AbstractSimpleProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|ArrayProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|Cardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|TypeMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|AbstractTypeTester
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|xml
operator|.
name|DomXmpParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractSchemaTester
extends|extends
name|AbstractTypeTester
block|{
specifier|protected
name|XMPMetadata
name|xmp
decl_stmt|;
specifier|protected
name|String
name|fieldName
decl_stmt|;
specifier|protected
name|Types
name|type
decl_stmt|;
specifier|protected
name|Cardinality
name|cardinality
decl_stmt|;
specifier|protected
name|TypeMapping
name|typeMapping
init|=
literal|null
decl_stmt|;
specifier|protected
name|DomXmpParser
name|builder
decl_stmt|;
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|builder
operator|=
operator|new
name|DomXmpParser
argument_list|()
expr_stmt|;
name|xmp
operator|=
name|XMPMetadata
operator|.
name|createXMPMetadata
argument_list|()
expr_stmt|;
name|typeMapping
operator|=
name|xmp
operator|.
name|getTypeMapping
argument_list|()
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|XMPSchema
name|getSchema
parameter_list|()
function_decl|;
specifier|protected
name|Class
argument_list|<
name|?
extends|extends
name|XMPSchema
argument_list|>
name|getSchemaClass
parameter_list|()
block|{
return|return
name|getSchema
argument_list|()
operator|.
name|getClass
argument_list|()
return|;
block|}
specifier|public
name|AbstractSchemaTester
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Types
name|type
parameter_list|,
name|Cardinality
name|card
parameter_list|)
block|{
name|this
operator|.
name|fieldName
operator|=
name|fieldName
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|cardinality
operator|=
name|card
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInitializedToNull
parameter_list|()
throws|throws
name|Exception
block|{
name|XMPSchema
name|schema
init|=
name|getSchema
argument_list|()
decl_stmt|;
comment|// default method
name|Assert
operator|.
name|assertNull
argument_list|(
name|schema
operator|.
name|getProperty
argument_list|(
name|fieldName
argument_list|)
argument_list|)
expr_stmt|;
comment|// accessor
if|if
condition|(
name|cardinality
operator|==
name|Cardinality
operator|.
name|Simple
condition|)
block|{
name|String
name|getter
init|=
name|calculateSimpleGetter
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
name|Method
name|get
init|=
name|getSchemaClass
argument_list|()
operator|.
name|getMethod
argument_list|(
name|getter
argument_list|,
operator|new
name|Class
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Object
name|result
init|=
name|get
operator|.
name|invoke
argument_list|(
name|schema
argument_list|,
operator|new
name|Object
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// arrays
name|String
name|getter
init|=
name|calculateArrayGetter
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
name|Method
name|get
init|=
name|getSchemaClass
argument_list|()
operator|.
name|getMethod
argument_list|(
name|getter
argument_list|,
operator|new
name|Class
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Object
name|result
init|=
name|get
operator|.
name|invoke
argument_list|(
name|schema
argument_list|,
operator|new
name|Object
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSettingValue
parameter_list|()
throws|throws
name|Exception
block|{
name|internalTestSettingValue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRandomSettingValue
parameter_list|()
throws|throws
name|Exception
block|{
name|initializeSeed
argument_list|(
operator|new
name|Random
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|RAND_LOOP_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|internalTestSettingValue
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|internalTestSettingValue
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cardinality
operator|!=
name|Cardinality
operator|.
name|Simple
condition|)
block|{
return|return;
block|}
name|XMPSchema
name|schema
init|=
name|getSchema
argument_list|()
decl_stmt|;
comment|// only test simple properties
name|Object
name|value
init|=
name|getJavaValue
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|AbstractSimpleProperty
name|property
init|=
name|schema
operator|.
name|instanciateSimple
argument_list|(
name|fieldName
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|schema
operator|.
name|addProperty
argument_list|(
name|property
argument_list|)
expr_stmt|;
name|String
name|qn
init|=
name|getPropertyQualifiedName
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|schema
operator|.
name|getProperty
argument_list|(
name|fieldName
argument_list|)
argument_list|)
expr_stmt|;
comment|// check other properties not modified
name|List
argument_list|<
name|Field
argument_list|>
name|fields
init|=
name|getXmpFields
argument_list|(
name|getSchemaClass
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Field
name|field
range|:
name|fields
control|)
block|{
comment|// do not check the current name
name|String
name|fqn
init|=
name|getPropertyQualifiedName
argument_list|(
name|field
operator|.
name|get
argument_list|(
literal|null
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fqn
operator|.
name|equals
argument_list|(
name|qn
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|schema
operator|.
name|getProperty
argument_list|(
name|fqn
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSettingValueInArray
parameter_list|()
throws|throws
name|Exception
block|{
name|internalTestSettingValueInArray
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRandomSettingValueInArray
parameter_list|()
throws|throws
name|Exception
block|{
name|initializeSeed
argument_list|(
operator|new
name|Random
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|RAND_LOOP_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|internalTestSettingValueInArray
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|internalTestSettingValueInArray
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cardinality
operator|==
name|Cardinality
operator|.
name|Simple
condition|)
block|{
return|return;
block|}
name|XMPSchema
name|schema
init|=
name|getSchema
argument_list|()
decl_stmt|;
comment|// only test array properties
name|Object
name|value
init|=
name|getJavaValue
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|AbstractSimpleProperty
name|property
init|=
name|schema
operator|.
name|instanciateSimple
argument_list|(
name|fieldName
argument_list|,
name|value
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|cardinality
condition|)
block|{
case|case
name|Seq
case|:
name|schema
operator|.
name|addUnqualifiedSequenceValue
argument_list|(
name|property
operator|.
name|getPropertyName
argument_list|()
argument_list|,
name|property
argument_list|)
expr_stmt|;
break|break;
case|case
name|Bag
case|:
name|schema
operator|.
name|addBagValue
argument_list|(
name|property
operator|.
name|getPropertyName
argument_list|()
argument_list|,
name|property
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unexpected case in test : "
operator|+
name|cardinality
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
name|String
name|qn
init|=
name|getPropertyQualifiedName
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|schema
operator|.
name|getProperty
argument_list|(
name|fieldName
argument_list|)
argument_list|)
expr_stmt|;
comment|// check other properties not modified
name|List
argument_list|<
name|Field
argument_list|>
name|fields
init|=
name|getXmpFields
argument_list|(
name|getSchemaClass
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Field
name|field
range|:
name|fields
control|)
block|{
comment|// do not check the current name
name|String
name|fqn
init|=
name|getPropertyQualifiedName
argument_list|(
name|field
operator|.
name|get
argument_list|(
literal|null
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fqn
operator|.
name|equals
argument_list|(
name|qn
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|schema
operator|.
name|getProperty
argument_list|(
name|fqn
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPropertySetterSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|internalTestPropertySetterSimple
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRandomPropertySetterSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|initializeSeed
argument_list|(
operator|new
name|Random
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|RAND_LOOP_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|internalTestPropertySetterSimple
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|internalTestPropertySetterSimple
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cardinality
operator|!=
name|Cardinality
operator|.
name|Simple
condition|)
block|{
return|return;
block|}
name|XMPSchema
name|schema
init|=
name|getSchema
argument_list|()
decl_stmt|;
name|String
name|setter
init|=
name|calculateSimpleSetter
argument_list|(
name|fieldName
argument_list|)
operator|+
literal|"Property"
decl_stmt|;
name|Object
name|value
init|=
name|getJavaValue
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|AbstractSimpleProperty
name|asp
init|=
name|typeMapping
operator|.
name|instanciateSimpleProperty
argument_list|(
name|schema
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|schema
operator|.
name|getPrefix
argument_list|()
argument_list|,
name|fieldName
argument_list|,
name|value
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|Method
name|set
init|=
name|getSchemaClass
argument_list|()
operator|.
name|getMethod
argument_list|(
name|setter
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|type
operator|.
name|getImplementingClass
argument_list|()
block|}
block|)
function|;
name|set
operator|.
name|invoke
argument_list|(
name|schema
argument_list|,
operator|new
name|Object
index|[]
block|{
name|asp
block|}
argument_list|)
expr_stmt|;
comment|// check property set
name|AbstractSimpleProperty
name|stored
init|=
operator|(
name|AbstractSimpleProperty
operator|)
name|schema
operator|.
name|getProperty
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|value
argument_list|,
name|stored
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// check getter
name|String
name|getter
init|=
name|calculateSimpleGetter
argument_list|(
name|fieldName
argument_list|)
operator|+
literal|"Property"
decl_stmt|;
name|Method
name|get
init|=
name|getSchemaClass
argument_list|()
operator|.
name|getMethod
argument_list|(
name|getter
argument_list|,
operator|new
name|Class
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Object
name|result
init|=
name|get
operator|.
name|invoke
argument_list|(
name|schema
argument_list|,
operator|new
name|Object
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|type
operator|.
name|getImplementingClass
argument_list|()
operator|.
name|isAssignableFrom
argument_list|(
name|result
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
parameter_list|(
name|asp
parameter_list|,
name|result
parameter_list|)
constructor_decl|;
block|}
end_class

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testPropertySetterInArray
parameter_list|()
throws|throws
name|Exception
block|{
name|internalTestPropertySetterInArray
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testRandomPropertySetterInArray
parameter_list|()
throws|throws
name|Exception
block|{
name|initializeSeed
argument_list|(
operator|new
name|Random
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|RAND_LOOP_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|internalTestPropertySetterInArray
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|private
name|void
name|internalTestPropertySetterInArray
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cardinality
operator|==
name|Cardinality
operator|.
name|Simple
condition|)
block|{
return|return;
block|}
name|XMPSchema
name|schema
init|=
name|getSchema
argument_list|()
decl_stmt|;
comment|// add value
name|String
name|setter
init|=
literal|"add"
operator|+
name|calculateFieldNameForMethod
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
comment|// TypeDescription<AbstractSimpleProperty> td =
comment|// typeMapping.getSimpleDescription(type);
name|Object
name|value1
init|=
name|getJavaValue
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|Method
name|set
init|=
name|getSchemaClass
argument_list|()
operator|.
name|getMethod
argument_list|(
name|setter
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|getJavaType
argument_list|(
name|type
argument_list|)
block|}
block|)
function|;
end_function

begin_expr_stmt
name|set
operator|.
name|invoke
argument_list|(
name|schema
argument_list|,
operator|new
name|Object
index|[]
block|{
name|value1
block|}
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// retrieve complex property
end_comment

begin_decl_stmt
name|String
name|getter
init|=
name|calculateArrayGetter
argument_list|(
name|fieldName
argument_list|)
operator|+
literal|"Property"
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|Method
name|getcp
init|=
name|getSchemaClass
argument_list|()
operator|.
name|getMethod
argument_list|(
name|getter
argument_list|,
operator|new
name|Class
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|Object
name|ocp
init|=
name|getcp
operator|.
name|invoke
argument_list|(
name|schema
argument_list|,
operator|new
name|Object
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ocp
operator|instanceof
name|ArrayProperty
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|ArrayProperty
name|cp
init|=
operator|(
name|ArrayProperty
operator|)
name|ocp
decl_stmt|;
end_decl_stmt

begin_comment
comment|// check size is ok (1)
end_comment

begin_expr_stmt
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cp
operator|.
name|getContainer
argument_list|()
operator|.
name|getAllProperties
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// add a new one
end_comment

begin_decl_stmt
name|Object
name|value2
init|=
name|getJavaValue
argument_list|(
name|type
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|set
operator|.
name|invoke
argument_list|(
name|schema
argument_list|,
operator|new
name|Object
index|[]
block|{
name|value2
block|}
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cp
operator|.
name|getContainer
argument_list|()
operator|.
name|getAllProperties
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// remove the first
end_comment

begin_decl_stmt
name|String
name|remover
init|=
literal|"remove"
operator|+
name|calculateFieldNameForMethod
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|Method
name|remove
init|=
name|getSchemaClass
argument_list|()
operator|.
name|getMethod
argument_list|(
name|remover
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|getJavaType
argument_list|(
name|type
argument_list|)
block|}
end_decl_stmt

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|remove
operator|.
name|invoke
argument_list|(
name|schema
argument_list|,
name|value1
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cp
operator|.
name|getContainer
argument_list|()
operator|.
name|getAllProperties
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}      protected
name|String
name|getPropertyQualifiedName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getSchema
argument_list|()
operator|.
name|getPrefix
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
end_function

unit|}
end_unit

