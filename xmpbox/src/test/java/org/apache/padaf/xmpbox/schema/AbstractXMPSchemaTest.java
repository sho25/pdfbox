begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|schema
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|XMPMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|XMPSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|BooleanType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|DateType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|IntegerType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|TextType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|ThumbnailType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractXMPSchemaTest
block|{
specifier|protected
name|XMPMetadata
name|metadata
decl_stmt|;
specifier|protected
name|String
name|property
decl_stmt|;
specifier|protected
name|String
name|type
decl_stmt|;
specifier|protected
name|XMPSchema
name|schema
decl_stmt|;
specifier|protected
name|Class
argument_list|<
name|?
argument_list|>
name|schemaClass
decl_stmt|;
specifier|protected
name|Object
name|value
decl_stmt|;
specifier|public
name|AbstractXMPSchemaTest
parameter_list|(
name|String
name|property
parameter_list|,
name|String
name|type
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|this
operator|.
name|property
operator|=
name|property
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
specifier|public
specifier|static
name|Object
index|[]
name|wrapProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|type
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"Boolean"
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|value
operator|instanceof
name|Boolean
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"Text"
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|value
operator|instanceof
name|String
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"Integer"
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|value
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"Date"
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|value
operator|instanceof
name|Calendar
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"URL"
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|value
operator|instanceof
name|String
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Object
index|[]
block|{
name|name
block|,
name|type
block|,
name|value
block|}
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSetValue
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"Text"
argument_list|)
condition|)
block|{
name|testGetSetTextValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"Boolean"
argument_list|)
condition|)
block|{
name|testGetSetBooleanValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"Integer"
argument_list|)
condition|)
block|{
name|testGetSetIntegerValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"Date"
argument_list|)
condition|)
block|{
name|testGetSetDateValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"seq Text"
argument_list|)
condition|)
block|{
comment|// do nothing
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"bag Text"
argument_list|)
condition|)
block|{
comment|// do nothing
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"bag ProperName"
argument_list|)
condition|)
block|{
comment|// do nothing
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"bag Xpath"
argument_list|)
condition|)
block|{
comment|// do nothing
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"seq Date"
argument_list|)
condition|)
block|{
comment|// do nothing
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"Lang Alt"
argument_list|)
condition|)
block|{
comment|// do nothing
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"Alt Thumbnail"
argument_list|)
condition|)
block|{
comment|// do nothing
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"ResourceRef"
argument_list|)
condition|)
block|{
comment|// do nothing
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"URL"
argument_list|)
condition|)
block|{
name|testGetSetTextValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unknown type : "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSetProperty
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
name|testGetSetTextProperty
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"Boolean"
argument_list|)
condition|)
block|{
name|testGetSetBooleanProperty
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"Integer"
argument_list|)
condition|)
block|{
name|testGetSetIntegerProperty
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"Date"
argument_list|)
condition|)
block|{
name|testGetSetDateProperty
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"seq Text"
argument_list|)
condition|)
block|{
name|testGetSetTextListValue
argument_list|(
literal|"seq"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"bag Text"
argument_list|)
condition|)
block|{
name|testGetSetTextListValue
argument_list|(
literal|"bag"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"bag ProperName"
argument_list|)
condition|)
block|{
name|testGetSetTextListValue
argument_list|(
literal|"bag"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"bag Xpath"
argument_list|)
condition|)
block|{
name|testGetSetTextListValue
argument_list|(
literal|"bag"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"seq Date"
argument_list|)
condition|)
block|{
name|testGetSetDateListValue
argument_list|(
literal|"seq"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"Lang Alt"
argument_list|)
condition|)
block|{
name|testGetSetLangAltValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"Alt Thumbnail"
argument_list|)
condition|)
block|{
name|testGetSetThumbnail
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unknown type : "
operator|+
name|value
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
name|Field
index|[]
name|fields
init|=
name|schemaClass
operator|.
name|getFields
argument_list|()
decl_stmt|;
for|for
control|(
name|Field
name|field
range|:
name|fields
control|)
block|{
if|if
condition|(
name|field
operator|.
name|isAnnotationPresent
argument_list|(
name|PropertyType
operator|.
name|class
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|field
operator|.
name|get
argument_list|(
name|schema
argument_list|)
operator|.
name|equals
argument_list|(
name|property
argument_list|)
condition|)
block|{
name|PropertyType
name|pt
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|PropertyType
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|pt
operator|.
name|propertyType
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Lang Alt"
argument_list|)
condition|)
block|{
comment|// do not check method existence
block|}
elseif|else
if|if
condition|(
name|pt
operator|.
name|propertyType
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Alt Thumbnail"
argument_list|)
condition|)
block|{
comment|// do not check method existence
block|}
elseif|else
if|if
condition|(
name|pt
operator|.
name|propertyType
argument_list|()
operator|.
name|equals
argument_list|(
literal|"ResourceRef"
argument_list|)
condition|)
block|{
comment|// do not check method existence
block|}
else|else
block|{
comment|// type test
comment|// TODO use getMethod()
name|String
name|spt
init|=
name|retrievePropertyType
argument_list|(
name|field
operator|.
name|get
argument_list|(
name|schema
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|//						String getNameProperty = getMethod(field.get(schema).toString());
name|String
name|getNameProperty
init|=
literal|"get"
operator|+
name|prepareName
argument_list|(
name|field
operator|.
name|get
argument_list|(
name|schema
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|spt
argument_list|)
operator|+
literal|"Property"
decl_stmt|;
comment|//								+ firstUpper(field.get(schema).toString())+ "Property";
name|Method
name|getMethod
init|=
name|schemaClass
operator|.
name|getMethod
argument_list|(
name|getNameProperty
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|getNameProperty
operator|+
literal|" should return null when testing "
operator|+
name|property
argument_list|,
name|getMethod
operator|.
name|invoke
argument_list|(
name|schema
argument_list|)
argument_list|)
expr_stmt|;
comment|// value test
comment|//						String getNameValue = "get"
comment|//								+ firstUpper(field.get(schema).toString());
name|String
name|getNameValue
init|=
literal|"get"
operator|+
name|prepareName
argument_list|(
name|field
operator|.
name|get
argument_list|(
name|schema
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|spt
argument_list|)
decl_stmt|;
name|getMethod
operator|=
name|schemaClass
operator|.
name|getMethod
argument_list|(
name|getNameValue
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|getNameValue
operator|+
literal|" method should exist"
argument_list|,
name|getMethod
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|getNameValue
operator|+
literal|" should return null when testing "
operator|+
name|property
argument_list|,
name|getMethod
operator|.
name|invoke
argument_list|(
name|schema
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|protected
name|String
name|retrievePropertyType
parameter_list|(
name|String
name|prop
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|IllegalAccessException
block|{
name|Field
index|[]
name|fields
init|=
name|schemaClass
operator|.
name|getFields
argument_list|()
decl_stmt|;
for|for
control|(
name|Field
name|field
range|:
name|fields
control|)
block|{
if|if
condition|(
name|field
operator|.
name|isAnnotationPresent
argument_list|(
name|PropertyType
operator|.
name|class
argument_list|)
condition|)
block|{
name|PropertyType
name|pt
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|PropertyType
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|.
name|get
argument_list|(
name|schema
argument_list|)
operator|.
name|equals
argument_list|(
name|prop
argument_list|)
condition|)
block|{
return|return
name|pt
operator|.
name|propertyType
argument_list|()
return|;
block|}
block|}
block|}
return|return
name|type
return|;
block|}
specifier|protected
name|String
name|firstUpper
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|name
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|name
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
name|String
name|prepareName
parameter_list|(
name|String
name|prop
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|String
name|fu
init|=
name|firstUpper
argument_list|(
name|prop
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|fu
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|fu
argument_list|)
expr_stmt|;
if|if
condition|(
name|fu
operator|.
name|endsWith
argument_list|(
literal|"s"
argument_list|)
condition|)
block|{
comment|// do nothing
block|}
elseif|else
if|if
condition|(
name|fu
operator|.
name|endsWith
argument_list|(
literal|"y"
argument_list|)
condition|)
block|{
comment|// do nothing
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|startsWith
argument_list|(
literal|"bag "
argument_list|)
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"s"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|type
operator|.
name|startsWith
argument_list|(
literal|"seq "
argument_list|)
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"s"
argument_list|)
expr_stmt|;
comment|// TODO others
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
name|String
name|setMethod
parameter_list|(
name|String
name|prop
parameter_list|)
block|{
name|String
name|fu
init|=
name|firstUpper
argument_list|(
name|prop
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|3
operator|+
name|prop
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"set"
argument_list|)
operator|.
name|append
argument_list|(
name|prepareName
argument_list|(
name|prop
argument_list|,
name|type
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"Property"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
name|String
name|addMethod
parameter_list|(
name|String
name|prop
parameter_list|)
block|{
name|String
name|fu
init|=
name|firstUpper
argument_list|(
name|prop
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|3
operator|+
name|prop
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"add"
argument_list|)
operator|.
name|append
argument_list|(
name|fu
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
name|String
name|getMethod
parameter_list|(
name|String
name|prop
parameter_list|)
block|{
name|String
name|fu
init|=
name|firstUpper
argument_list|(
name|prop
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|3
operator|+
name|prop
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"get"
argument_list|)
operator|.
name|append
argument_list|(
name|fu
argument_list|)
operator|.
name|append
argument_list|(
literal|"Property"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
name|String
name|setValueMethod
parameter_list|(
name|String
name|prop
parameter_list|)
block|{
name|String
name|fu
init|=
name|firstUpper
argument_list|(
name|prop
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|8
operator|+
name|prop
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"set"
argument_list|)
operator|.
name|append
argument_list|(
name|fu
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
name|String
name|getValueMethod
parameter_list|(
name|String
name|prop
parameter_list|)
block|{
name|String
name|fu
init|=
name|firstUpper
argument_list|(
name|prop
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|8
operator|+
name|prop
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"get"
argument_list|)
operator|.
name|append
argument_list|(
name|prepareName
argument_list|(
name|prop
argument_list|,
name|type
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
name|String
name|addToValueMethod
parameter_list|(
name|String
name|prop
parameter_list|)
block|{
name|String
name|fu
init|=
name|firstUpper
argument_list|(
name|prop
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|10
operator|+
name|prop
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"add"
argument_list|)
operator|.
name|append
argument_list|(
name|fu
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
name|void
name|testGetSetBooleanProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|setName
init|=
name|setMethod
argument_list|(
name|property
argument_list|)
decl_stmt|;
name|String
name|getName
init|=
name|getMethod
argument_list|(
name|property
argument_list|)
decl_stmt|;
name|BooleanType
name|bt
init|=
operator|new
name|BooleanType
argument_list|(
name|metadata
argument_list|,
name|schema
operator|.
name|getLocalPrefix
argument_list|()
argument_list|,
name|property
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|Method
name|setMethod
init|=
name|schemaClass
operator|.
name|getMethod
argument_list|(
name|setName
argument_list|,
name|BooleanType
operator|.
name|class
argument_list|)
decl_stmt|;
name|Method
name|getMethod
init|=
name|schemaClass
operator|.
name|getMethod
argument_list|(
name|getName
argument_list|)
decl_stmt|;
name|setMethod
operator|.
name|invoke
argument_list|(
name|schema
argument_list|,
name|bt
argument_list|)
expr_stmt|;
name|Boolean
name|found
init|=
operator|(
operator|(
name|BooleanType
operator|)
name|getMethod
operator|.
name|invoke
argument_list|(
name|schema
argument_list|)
operator|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|value
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|testGetSetDateProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|setName
init|=
name|setMethod
argument_list|(
name|property
argument_list|)
decl_stmt|;
name|String
name|getName
init|=
name|getMethod
argument_list|(
name|property
argument_list|)
decl_stmt|;
name|DateType
name|dt
init|=
operator|new
name|DateType
argument_list|(
name|metadata
argument_list|,
name|schema
operator|.
name|getLocalPrefix
argument_list|()
argument_list|,
name|property
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|Method
name|setMethod
init|=
name|schemaClass
operator|.
name|getMethod
argument_list|(
name|setName
argument_list|,
name|DateType
operator|.
name|class
argument_list|)
decl_stmt|;
name|Method
name|getMethod
init|=
name|schemaClass
operator|.
name|getMethod
argument_list|(
name|getName
argument_list|)
decl_stmt|;
name|setMethod
operator|.
name|invoke
argument_list|(
name|schema
argument_list|,
name|dt
argument_list|)
expr_stmt|;
name|Calendar
name|found
init|=
operator|(
operator|(
name|DateType
operator|)
name|getMethod
operator|.
name|invoke
argument_list|(
name|schema
argument_list|)
operator|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|value
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|testGetSetIntegerProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|setName
init|=
name|setMethod
argument_list|(
name|property
argument_list|)
decl_stmt|;
name|String
name|getName
init|=
name|getMethod
argument_list|(
name|property
argument_list|)
decl_stmt|;
name|IntegerType
name|it
init|=
operator|new
name|IntegerType
argument_list|(
name|metadata
argument_list|,
name|schema
operator|.
name|getLocalPrefix
argument_list|()
argument_list|,
name|property
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|Method
name|setMethod
init|=
name|schemaClass
operator|.
name|getMethod
argument_list|(
name|setName
argument_list|,
name|IntegerType
operator|.
name|class
argument_list|)
decl_stmt|;
name|Method
name|getMethod
init|=
name|schemaClass
operator|.
name|getMethod
argument_list|(
name|getName
argument_list|)
decl_stmt|;
name|setMethod
operator|.
name|invoke
argument_list|(
name|schema
argument_list|,
name|it
argument_list|)
expr_stmt|;
name|Integer
name|found
init|=
operator|(
operator|(
name|IntegerType
operator|)
name|getMethod
operator|.
name|invoke
argument_list|(
name|schema
argument_list|)
operator|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|value
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|testGetSetTextProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|setName
init|=
name|setMethod
argument_list|(
name|property
argument_list|)
decl_stmt|;
name|String
name|getName
init|=
name|getMethod
argument_list|(
name|property
argument_list|)
decl_stmt|;
name|TextType
name|tt
init|=
operator|new
name|TextType
argument_list|(
name|metadata
argument_list|,
name|schema
operator|.
name|getLocalPrefix
argument_list|()
argument_list|,
name|property
argument_list|,
operator|(
name|String
operator|)
name|value
argument_list|)
decl_stmt|;
name|Method
name|setMethod
init|=
name|schemaClass
operator|.
name|getMethod
argument_list|(
name|setName
argument_list|,
name|TextType
operator|.
name|class
argument_list|)
decl_stmt|;
name|Method
name|getMethod
init|=
name|schemaClass
operator|.
name|getMethod
argument_list|(
name|getName
argument_list|)
decl_stmt|;
name|setMethod
operator|.
name|invoke
argument_list|(
name|schema
argument_list|,
name|tt
argument_list|)
expr_stmt|;
name|String
name|found
init|=
operator|(
operator|(
name|TextType
operator|)
name|getMethod
operator|.
name|invoke
argument_list|(
name|schema
argument_list|)
operator|)
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|value
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|testGetSetTextListValue
parameter_list|(
name|String
name|tp
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|setName
init|=
name|addToValueMethod
argument_list|(
name|property
argument_list|)
decl_stmt|;
name|String
name|getName
init|=
name|getValueMethod
argument_list|(
name|property
argument_list|)
decl_stmt|;
name|String
index|[]
name|svalue
init|=
operator|(
name|String
index|[]
operator|)
name|value
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|svalue
argument_list|)
expr_stmt|;
comment|// push all
name|Method
name|setMethod
init|=
name|schemaClass
operator|.
name|getMethod
argument_list|(
name|setName
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|string
range|:
name|svalue
control|)
block|{
name|setMethod
operator|.
name|invoke
argument_list|(
name|schema
argument_list|,
name|string
argument_list|)
expr_stmt|;
block|}
comment|// retrieve
name|Method
name|getMethod
init|=
name|schemaClass
operator|.
name|getMethod
argument_list|(
name|getName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fields
init|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|getMethod
operator|.
name|invoke
argument_list|(
name|schema
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|field
range|:
name|fields
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|field
operator|+
literal|" should be found in list"
argument_list|,
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|svalue
argument_list|,
name|field
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|testGetSetDateListValue
parameter_list|(
name|String
name|tp
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|setName
init|=
name|addToValueMethod
argument_list|(
name|property
argument_list|)
decl_stmt|;
name|String
name|getName
init|=
name|getValueMethod
argument_list|(
name|property
argument_list|)
decl_stmt|;
name|Calendar
index|[]
name|svalue
init|=
operator|(
name|Calendar
index|[]
operator|)
name|value
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|svalue
argument_list|)
expr_stmt|;
comment|// push all
name|Method
name|setMethod
init|=
name|schemaClass
operator|.
name|getMethod
argument_list|(
name|setName
argument_list|,
name|Calendar
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|Calendar
name|inst
range|:
name|svalue
control|)
block|{
name|setMethod
operator|.
name|invoke
argument_list|(
name|schema
argument_list|,
name|inst
argument_list|)
expr_stmt|;
block|}
comment|// retrieve
name|Method
name|getMethod
init|=
name|schemaClass
operator|.
name|getMethod
argument_list|(
name|getName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Calendar
argument_list|>
name|fields
init|=
operator|(
name|List
argument_list|<
name|Calendar
argument_list|>
operator|)
name|getMethod
operator|.
name|invoke
argument_list|(
name|schema
argument_list|)
decl_stmt|;
for|for
control|(
name|Calendar
name|field
range|:
name|fields
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|field
operator|+
literal|" should be found in list"
argument_list|,
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|svalue
argument_list|,
name|field
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|testGetSetThumbnail
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|addName
init|=
name|addMethod
argument_list|(
name|property
argument_list|)
decl_stmt|;
name|String
name|getName
init|=
name|getMethod
argument_list|(
name|property
argument_list|)
decl_stmt|;
name|Method
name|setMethod
init|=
name|schemaClass
operator|.
name|getMethod
argument_list|(
name|addName
argument_list|,
name|Integer
operator|.
name|class
argument_list|,
name|Integer
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Method
name|getMethod
init|=
name|schemaClass
operator|.
name|getMethod
argument_list|(
name|getName
argument_list|)
decl_stmt|;
comment|/* 		 *<xapGImg:height>162</xapGImg:height> 		 *<xapGImg:width>216</xapGImg:width> 		 *<xapGImg:format>JPEG</xapGImg:format> 		 *<xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD</xapGImg:image> 		 */
name|Integer
name|height
init|=
literal|162
decl_stmt|;
name|Integer
name|width
init|=
literal|400
decl_stmt|;
name|String
name|format
init|=
literal|"JPEG"
decl_stmt|;
name|String
name|img
init|=
literal|"/9j/4AAQSkZJRgABAgEASABIAAD"
decl_stmt|;
name|setMethod
operator|.
name|invoke
argument_list|(
name|schema
argument_list|,
name|height
argument_list|,
name|width
argument_list|,
name|format
argument_list|,
name|img
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ThumbnailType
argument_list|>
name|found
init|=
operator|(
operator|(
name|List
argument_list|<
name|ThumbnailType
argument_list|>
operator|)
name|getMethod
operator|.
name|invoke
argument_list|(
name|schema
argument_list|)
operator|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|found
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|ThumbnailType
name|t1
init|=
name|found
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|height
argument_list|,
name|t1
operator|.
name|getHeight
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|width
argument_list|,
name|t1
operator|.
name|getWidth
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|format
argument_list|,
name|t1
operator|.
name|getFormat
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|img
argument_list|,
name|t1
operator|.
name|getImg
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|testGetSetLangAltValue
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|setName
init|=
name|addToValueMethod
argument_list|(
name|property
argument_list|)
decl_stmt|;
name|String
name|getName
init|=
name|getValueMethod
argument_list|(
name|property
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|svalue
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|value
decl_stmt|;
comment|// push all
name|Method
name|setMethod
init|=
name|schemaClass
operator|.
name|getMethod
argument_list|(
name|setName
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|inst
range|:
name|svalue
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|setMethod
operator|.
name|invoke
argument_list|(
name|schema
argument_list|,
name|inst
operator|.
name|getKey
argument_list|()
argument_list|,
name|inst
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// retrieve
name|String
name|getLanguagesName
init|=
literal|"get"
operator|+
name|firstUpper
argument_list|(
name|property
argument_list|)
operator|+
literal|"Languages"
decl_stmt|;
name|Method
name|getLanguages
init|=
name|schemaClass
operator|.
name|getMethod
argument_list|(
name|getLanguagesName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|lgs
init|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|getLanguages
operator|.
name|invoke
argument_list|(
name|schema
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|string
range|:
name|lgs
control|)
block|{
name|Method
name|getMethod
init|=
name|schemaClass
operator|.
name|getMethod
argument_list|(
name|getName
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|res
init|=
operator|(
name|String
operator|)
name|getMethod
operator|.
name|invoke
argument_list|(
name|schema
argument_list|,
name|string
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|res
argument_list|,
name|svalue
operator|.
name|get
argument_list|(
name|string
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|testGetSetURLValue
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|setName
init|=
name|addToValueMethod
argument_list|(
name|property
argument_list|)
decl_stmt|;
name|String
name|getName
init|=
name|getValueMethod
argument_list|(
name|property
argument_list|)
decl_stmt|;
name|String
name|svalue
init|=
operator|(
name|String
operator|)
name|value
decl_stmt|;
comment|// push all
name|Method
name|setMethod
init|=
name|schemaClass
operator|.
name|getMethod
argument_list|(
name|setName
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|setMethod
operator|.
name|invoke
argument_list|(
name|schema
argument_list|,
name|property
argument_list|,
name|svalue
argument_list|)
expr_stmt|;
comment|// retrieve
name|String
name|getLanguagesName
init|=
literal|"get"
operator|+
name|firstUpper
argument_list|(
name|property
argument_list|)
operator|+
literal|"Languages"
decl_stmt|;
name|Method
name|getLanguages
init|=
name|schemaClass
operator|.
name|getMethod
argument_list|(
name|getLanguagesName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|lgs
init|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|getLanguages
operator|.
name|invoke
argument_list|(
name|schema
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|string
range|:
name|lgs
control|)
block|{
name|Method
name|getMethod
init|=
name|schemaClass
operator|.
name|getMethod
argument_list|(
name|getName
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|res
init|=
operator|(
name|String
operator|)
name|getMethod
operator|.
name|invoke
argument_list|(
name|schema
argument_list|,
name|string
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|res
argument_list|,
name|svalue
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|testGetSetTextValue
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|setName
init|=
name|setValueMethod
argument_list|(
name|property
argument_list|)
decl_stmt|;
name|String
name|getName
init|=
name|getValueMethod
argument_list|(
name|property
argument_list|)
decl_stmt|;
name|Method
name|setMethod
init|=
name|schemaClass
operator|.
name|getMethod
argument_list|(
name|setName
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Method
name|getMethod
init|=
name|schemaClass
operator|.
name|getMethod
argument_list|(
name|getName
argument_list|)
decl_stmt|;
name|setMethod
operator|.
name|invoke
argument_list|(
name|schema
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|String
name|found
init|=
operator|(
name|String
operator|)
name|getMethod
operator|.
name|invoke
argument_list|(
name|schema
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|value
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|testGetSetBooleanValue
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|setName
init|=
name|setValueMethod
argument_list|(
name|property
argument_list|)
decl_stmt|;
name|String
name|getName
init|=
name|getValueMethod
argument_list|(
name|property
argument_list|)
decl_stmt|;
name|Method
name|setMethod
init|=
name|schemaClass
operator|.
name|getMethod
argument_list|(
name|setName
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|Method
name|getMethod
init|=
name|schemaClass
operator|.
name|getMethod
argument_list|(
name|getName
argument_list|)
decl_stmt|;
name|setMethod
operator|.
name|invoke
argument_list|(
name|schema
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|Boolean
name|found
init|=
operator|(
name|Boolean
operator|)
name|getMethod
operator|.
name|invoke
argument_list|(
name|schema
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|value
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|testGetSetDateValue
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|setName
init|=
name|setValueMethod
argument_list|(
name|property
argument_list|)
decl_stmt|;
name|String
name|getName
init|=
name|getValueMethod
argument_list|(
name|property
argument_list|)
decl_stmt|;
name|Method
name|setMethod
init|=
name|schemaClass
operator|.
name|getMethod
argument_list|(
name|setName
argument_list|,
name|Calendar
operator|.
name|class
argument_list|)
decl_stmt|;
name|Method
name|getMethod
init|=
name|schemaClass
operator|.
name|getMethod
argument_list|(
name|getName
argument_list|)
decl_stmt|;
name|setMethod
operator|.
name|invoke
argument_list|(
name|schema
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|Calendar
name|found
init|=
operator|(
name|Calendar
operator|)
name|getMethod
operator|.
name|invoke
argument_list|(
name|schema
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|value
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|testGetSetIntegerValue
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|setName
init|=
name|setValueMethod
argument_list|(
name|property
argument_list|)
decl_stmt|;
name|String
name|getName
init|=
name|getValueMethod
argument_list|(
name|property
argument_list|)
decl_stmt|;
name|Method
name|setMethod
init|=
name|schemaClass
operator|.
name|getMethod
argument_list|(
name|setName
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Method
name|getMethod
init|=
name|schemaClass
operator|.
name|getMethod
argument_list|(
name|getName
argument_list|)
decl_stmt|;
name|setMethod
operator|.
name|invoke
argument_list|(
name|schema
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|Integer
name|found
init|=
operator|(
name|Integer
operator|)
name|getMethod
operator|.
name|invoke
argument_list|(
name|schema
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|value
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

