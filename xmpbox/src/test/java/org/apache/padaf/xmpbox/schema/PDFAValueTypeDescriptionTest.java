begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|schema
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|XMPMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|PDFAFieldDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|PDFAValueTypeDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|PDFAValueTypeDescriptionTest
block|{
specifier|protected
name|XMPMetadata
name|parent
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|resetDocument
parameter_list|()
throws|throws
name|Exception
block|{
name|parent
operator|=
operator|new
name|XMPMetadata
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateOnePdfaProperty
parameter_list|()
throws|throws
name|TransformerException
block|{
name|PDFAValueTypeDescription
name|pdfvalueType
init|=
operator|new
name|PDFAValueTypeDescription
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|String
name|type
init|=
literal|"value Test"
decl_stmt|;
name|String
name|namespaceURI
init|=
literal|"Text"
decl_stmt|;
name|String
name|prefix
init|=
literal|"test"
decl_stmt|;
name|String
name|description
init|=
literal|"it's a test property"
decl_stmt|;
name|String
name|fieldName1
init|=
literal|"field1"
decl_stmt|;
name|String
name|fieldValueType1
init|=
literal|"Text"
decl_stmt|;
name|String
name|fieldDescription1
init|=
literal|"Field one"
decl_stmt|;
name|String
name|fieldName2
init|=
literal|"field2"
decl_stmt|;
name|String
name|fieldValueType2
init|=
literal|"Text"
decl_stmt|;
name|String
name|fieldDescription2
init|=
literal|"Field two"
decl_stmt|;
name|pdfvalueType
operator|.
name|setTypeNameValue
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|pdfvalueType
operator|.
name|setNamespaceURIValue
argument_list|(
name|namespaceURI
argument_list|)
expr_stmt|;
name|pdfvalueType
operator|.
name|setPrefixValue
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|pdfvalueType
operator|.
name|setDescriptionValue
argument_list|(
name|description
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"pdfaType:type"
argument_list|,
name|pdfvalueType
operator|.
name|getTypeName
argument_list|()
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|type
argument_list|,
name|pdfvalueType
operator|.
name|getTypeNameValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"pdfaType:namespaceURI"
argument_list|,
name|pdfvalueType
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|namespaceURI
argument_list|,
name|pdfvalueType
operator|.
name|getNamespaceURIValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"pdfaType:prefix"
argument_list|,
name|pdfvalueType
operator|.
name|getPrefix
argument_list|()
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|prefix
argument_list|,
name|pdfvalueType
operator|.
name|getPrefixValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"pdfaType:description"
argument_list|,
name|pdfvalueType
operator|.
name|getDescription
argument_list|()
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|description
argument_list|,
name|pdfvalueType
operator|.
name|getDescriptionValue
argument_list|()
argument_list|)
expr_stmt|;
name|pdfvalueType
operator|.
name|addField
argument_list|(
name|fieldName1
argument_list|,
name|fieldValueType1
argument_list|,
name|fieldDescription1
argument_list|)
expr_stmt|;
name|pdfvalueType
operator|.
name|addField
argument_list|(
name|fieldName2
argument_list|,
name|fieldValueType2
argument_list|,
name|fieldDescription2
argument_list|)
expr_stmt|;
name|PDFAFieldDescription
name|field1
decl_stmt|,
name|field2
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|pdfvalueType
operator|.
name|getFields
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|field1
operator|=
name|pdfvalueType
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|field2
operator|=
name|pdfvalueType
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"pdfaField:name"
argument_list|,
name|field1
operator|.
name|getName
argument_list|()
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fieldName1
argument_list|,
name|field1
operator|.
name|getNameValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"pdfaField:valueType"
argument_list|,
name|field1
operator|.
name|getValueType
argument_list|()
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fieldValueType1
argument_list|,
name|field1
operator|.
name|getValueTypeValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"pdfaField:description"
argument_list|,
name|field1
operator|.
name|getDescription
argument_list|()
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fieldDescription1
argument_list|,
name|field1
operator|.
name|getDescriptionValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"pdfaField:name"
argument_list|,
name|field2
operator|.
name|getName
argument_list|()
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fieldName2
argument_list|,
name|field2
operator|.
name|getNameValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"pdfaField:valueType"
argument_list|,
name|field2
operator|.
name|getValueType
argument_list|()
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fieldValueType2
argument_list|,
name|field2
operator|.
name|getValueTypeValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"pdfaField:description"
argument_list|,
name|field2
operator|.
name|getDescription
argument_list|()
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fieldDescription2
argument_list|,
name|field2
operator|.
name|getDescriptionValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// test add same field
name|pdfvalueType
operator|.
name|addField
argument_list|(
name|field1
argument_list|)
expr_stmt|;
comment|/* 		 * Element e=parent.getFuturOwner().createElement("test"); 		 * e.setAttributeNS("http://www.w3.org/2000/xmlns/", "xmlns:rdf", 		 * "http://www.w3.org/1999/02/22-rdf-syntax-ns#"); 		 * e.appendChild(pdfvalueType.getElement()); 		 * parent.getFuturOwner().appendChild(e); 		 * XMLUtil.save(parent.getFuturOwner(), System.out, "UTF-8"); 		 */
block|}
block|}
end_class

end_unit

