begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|FieldDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|ValueTypeDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|XMLValueTypeDescriptionManagerTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testPropDesc
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|types
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|types
operator|.
name|add
argument_list|(
literal|"type1"
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
literal|"type2"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|uris
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|uris
operator|.
name|add
argument_list|(
literal|"nsURI1"
argument_list|)
expr_stmt|;
name|uris
operator|.
name|add
argument_list|(
literal|"nsURI2"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|prefixs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|prefixs
operator|.
name|add
argument_list|(
literal|"pref1"
argument_list|)
expr_stmt|;
name|prefixs
operator|.
name|add
argument_list|(
literal|"pref2"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|descProps
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|descProps
operator|.
name|add
argument_list|(
literal|"descProp1"
argument_list|)
expr_stmt|;
name|descProps
operator|.
name|add
argument_list|(
literal|"descProp2"
argument_list|)
expr_stmt|;
name|XMLValueTypeDescriptionManager
name|xmlParser
init|=
operator|new
name|XMLValueTypeDescriptionManager
argument_list|()
decl_stmt|;
name|xmlParser
operator|.
name|addValueTypeDescription
argument_list|(
name|types
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|uris
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|prefixs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|descProps
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|xmlParser
operator|.
name|addValueTypeDescription
argument_list|(
name|types
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|uris
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|prefixs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|descProps
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|xmlParser
operator|.
name|toXML
argument_list|(
name|bos
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|bos
argument_list|)
expr_stmt|;
name|XMLValueTypeDescriptionManager
name|propRetrieve
init|=
operator|new
name|XMLValueTypeDescriptionManager
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bos
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|propRetrieve
operator|.
name|loadListFromXML
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ValueTypeDescription
argument_list|>
name|vtList
init|=
name|propRetrieve
operator|.
name|getValueTypesDescriptionList
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|types
operator|.
name|size
argument_list|()
argument_list|,
name|vtList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vtList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|types
operator|.
name|contains
argument_list|(
name|vtList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|uris
operator|.
name|contains
argument_list|(
name|vtList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|prefixs
operator|.
name|contains
argument_list|(
name|vtList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getPrefix
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|descProps
operator|.
name|contains
argument_list|(
name|vtList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getDescription
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|vtList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFields
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPropDescWithField
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|type
init|=
literal|"type1"
decl_stmt|;
name|String
name|uri
init|=
literal|"nsURI1"
decl_stmt|;
name|String
name|prefix
init|=
literal|"pref1"
decl_stmt|;
name|String
name|descProp
init|=
literal|"descProp1"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|fieldNames
operator|.
name|add
argument_list|(
literal|"fieldName1"
argument_list|)
expr_stmt|;
name|fieldNames
operator|.
name|add
argument_list|(
literal|"fieldName2"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fieldValueTypes
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|fieldValueTypes
operator|.
name|add
argument_list|(
literal|"fieldVT1"
argument_list|)
expr_stmt|;
name|fieldValueTypes
operator|.
name|add
argument_list|(
literal|"fieldVT2"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fieldDescription
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|fieldDescription
operator|.
name|add
argument_list|(
literal|"FieldDesc1"
argument_list|)
expr_stmt|;
name|fieldDescription
operator|.
name|add
argument_list|(
literal|"FieldDesc2"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldDescription
argument_list|>
name|fieldList
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldDescription
argument_list|>
argument_list|()
decl_stmt|;
name|fieldList
operator|.
name|add
argument_list|(
operator|new
name|FieldDescription
argument_list|(
name|fieldNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|fieldValueTypes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|fieldDescription
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fieldList
operator|.
name|add
argument_list|(
operator|new
name|FieldDescription
argument_list|(
name|fieldNames
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|fieldValueTypes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|fieldDescription
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|XMLValueTypeDescriptionManager
name|xmlParser
init|=
operator|new
name|XMLValueTypeDescriptionManager
argument_list|()
decl_stmt|;
name|xmlParser
operator|.
name|addValueTypeDescription
argument_list|(
name|type
argument_list|,
name|uri
argument_list|,
name|prefix
argument_list|,
name|descProp
argument_list|,
name|fieldList
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|xmlParser
operator|.
name|toXML
argument_list|(
name|bos
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|bos
argument_list|)
expr_stmt|;
name|XMLValueTypeDescriptionManager
name|propRetrieve
init|=
operator|new
name|XMLValueTypeDescriptionManager
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bos
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|propRetrieve
operator|.
name|loadListFromXML
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ValueTypeDescription
argument_list|>
name|vtList
init|=
name|propRetrieve
operator|.
name|getValueTypesDescriptionList
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|vtList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ValueTypeDescription
name|vt
init|=
name|vtList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|type
argument_list|,
name|vt
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|uri
argument_list|,
name|vt
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|prefix
argument_list|,
name|vt
operator|.
name|getPrefix
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|descProp
argument_list|,
name|vt
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldDescription
argument_list|>
name|fieldsFound
init|=
name|vt
operator|.
name|getFields
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|fieldsFound
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldsFound
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
name|fieldsFound
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fieldValueTypes
operator|.
name|contains
argument_list|(
name|fieldsFound
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getValueType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fieldDescription
operator|.
name|contains
argument_list|(
name|fieldsFound
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getDescription
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

