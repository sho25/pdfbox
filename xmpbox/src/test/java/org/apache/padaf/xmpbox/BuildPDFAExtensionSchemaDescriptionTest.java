begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|BuildPDFExtensionSchemaHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|XMPMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|parser
operator|.
name|DateConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|parser
operator|.
name|XMPDocumentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|PDFAExtensionSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|SchemaDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|BuildPDFAExtensionSchemaDescriptionTest
block|{
specifier|protected
name|XMPMetadata
name|metadata
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|metadata
operator|=
operator|new
name|XMPDocumentBuilder
argument_list|()
operator|.
name|createXMPMetadata
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|BirthCertificateSchemaWithXMLDescriptions
name|schema
init|=
operator|new
name|BirthCertificateSchemaWithXMLDescriptions
argument_list|(
name|metadata
argument_list|)
decl_stmt|;
name|schema
operator|.
name|setFirstname
argument_list|(
literal|"Bailleul"
argument_list|)
expr_stmt|;
name|schema
operator|.
name|addLastname
argument_list|(
literal|"Guillaume"
argument_list|)
expr_stmt|;
name|schema
operator|.
name|addLastname
argument_list|(
literal|"Bertin"
argument_list|)
expr_stmt|;
name|schema
operator|.
name|setBirthCountry
argument_list|(
literal|"France"
argument_list|)
expr_stmt|;
name|schema
operator|.
name|setBirthPlace
argument_list|(
literal|"Bethune"
argument_list|)
expr_stmt|;
name|schema
operator|.
name|setBirthDate
argument_list|(
name|DateConverter
operator|.
name|toCalendar
argument_list|(
literal|"1976-09-16"
argument_list|)
argument_list|)
expr_stmt|;
name|schema
operator|.
name|setMailaddr
argument_list|(
literal|"name"
argument_list|,
literal|"domain"
argument_list|)
expr_stmt|;
comment|// birth-certificate PDF/A Extension Schema definition building
name|BuildPDFExtensionSchemaHelper
operator|.
name|includePDFAExtensionDefinition
argument_list|(
name|metadata
argument_list|,
name|schema
argument_list|)
expr_stmt|;
comment|// Values checking is made which what is expected with Schema
comment|// definition and xml files
name|PDFAExtensionSchema
name|ext
init|=
name|metadata
operator|.
name|getPDFExtensionSchema
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ext
operator|.
name|getDescriptionSchema
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|SchemaDescription
name|schemaDescription
init|=
name|ext
operator|.
name|getDescriptionSchema
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|schema
operator|.
name|getNamespaceValue
argument_list|()
argument_list|,
name|schemaDescription
operator|.
name|getNameSpaceURI
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|schema
operator|.
name|getPrefix
argument_list|()
argument_list|,
name|schemaDescription
operator|.
name|getPrefix
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Birth-Certificate Schema"
argument_list|,
name|schemaDescription
operator|.
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|schemaDescription
operator|.
name|getProperties
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|schemaDescription
operator|.
name|getValueTypes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
end_class

end_unit

