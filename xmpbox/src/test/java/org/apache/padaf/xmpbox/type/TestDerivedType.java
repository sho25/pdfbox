begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|type
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|XMPMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestDerivedType
block|{
specifier|public
specifier|static
specifier|final
name|String
name|PREFIX
init|=
literal|"myprefix"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"myname"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|VALUE
init|=
literal|"myvalue"
decl_stmt|;
specifier|protected
name|XMPMetadata
name|xmp
decl_stmt|;
specifier|protected
name|String
name|type
init|=
literal|null
decl_stmt|;
specifier|protected
name|Class
argument_list|<
name|?
extends|extends
name|TextType
argument_list|>
name|clz
init|=
literal|null
decl_stmt|;
specifier|protected
name|Constructor
argument_list|<
name|?
extends|extends
name|TextType
argument_list|>
name|constructor
init|=
literal|null
decl_stmt|;
specifier|public
name|TestDerivedType
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|TextType
argument_list|>
name|clz
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|clz
operator|=
name|clz
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
annotation|@
name|Parameters
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|initializeParameters
parameter_list|()
throws|throws
name|Exception
block|{
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|AgentNameType
operator|.
name|class
block|,
literal|"AgentName"
block|}
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|ChoiceType
operator|.
name|class
block|,
literal|"Choice"
block|}
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|GUIDType
operator|.
name|class
block|,
literal|"GUID"
block|}
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|LocaleType
operator|.
name|class
block|,
literal|"Locale"
block|}
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|MIMEType
operator|.
name|class
block|,
literal|"MIME"
block|}
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|PartType
operator|.
name|class
block|,
literal|"Part"
block|}
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|ProperNameType
operator|.
name|class
block|,
literal|"ProperName"
block|}
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|RenditionClassType
operator|.
name|class
block|,
literal|"RenditionClass"
block|}
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|URIType
operator|.
name|class
block|,
literal|"URI"
block|}
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|URLType
operator|.
name|class
block|,
literal|"URL"
block|}
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|XPathType
operator|.
name|class
block|,
literal|"XPath"
block|}
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|xmp
operator|=
operator|new
name|XMPMetadata
argument_list|()
expr_stmt|;
name|constructor
operator|=
name|clz
operator|.
name|getConstructor
argument_list|(
operator|new
name|Class
index|[]
block|{
name|XMPMetadata
operator|.
name|class
block|,
name|String
operator|.
name|class
block|,
name|String
operator|.
name|class
block|,
name|String
operator|.
name|class
block|,
name|Object
operator|.
name|class
block|}
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|TextType
name|instanciate
parameter_list|(
name|XMPMetadata
name|metadata
parameter_list|,
name|String
name|namespaceURI
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|Exception
block|{
name|Object
index|[]
name|initargs
init|=
operator|new
name|Object
index|[]
block|{
name|metadata
block|,
name|namespaceURI
block|,
name|prefix
block|,
name|propertyName
block|,
name|value
block|}
decl_stmt|;
return|return
name|constructor
operator|.
name|newInstance
argument_list|(
name|initargs
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|test1
parameter_list|()
throws|throws
name|Exception
block|{
name|TextType
name|element
init|=
name|instanciate
argument_list|(
name|xmp
argument_list|,
literal|null
argument_list|,
name|PREFIX
argument_list|,
name|NAME
argument_list|,
name|VALUE
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|element
operator|.
name|getNamespace
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|element
operator|.
name|getObjectValue
argument_list|()
operator|instanceof
name|String
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|VALUE
argument_list|,
name|element
operator|.
name|getObjectValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

