begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|type
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|XMPMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|XMPSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|BadFieldValueException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|ComplexProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|ComplexPropertyContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|TextType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test MetaData Objects for complex properties  *   * @author a183132  *   */
end_comment

begin_class
specifier|public
class|class
name|ComplexMetadataPropertyTest
block|{
specifier|protected
name|XMPMetadata
name|metadata
decl_stmt|;
specifier|protected
name|XMPSchema
name|tmpSchem
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|resetDocument
parameter_list|()
throws|throws
name|Exception
block|{
name|metadata
operator|=
operator|new
name|XMPMetadata
argument_list|()
expr_stmt|;
name|tmpSchem
operator|=
name|metadata
operator|.
name|createAndAddDefaultSchema
argument_list|(
literal|"test"
argument_list|,
literal|"http://www.test.org/test/"
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Check if Array building works (complexproperty) 	 *  	 * @throws Exception 	 */
annotation|@
name|Test
specifier|public
name|void
name|testBuildAndCompareArray
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Build a bag with one rdf:li
name|ComplexProperty
name|bag
init|=
operator|new
name|ComplexProperty
argument_list|(
name|metadata
argument_list|,
literal|"test"
argument_list|,
literal|"TESTBAG"
argument_list|,
name|ComplexProperty
operator|.
name|UNORDERED_ARRAY
argument_list|)
decl_stmt|;
name|TextType
name|litmp
init|=
operator|new
name|TextType
argument_list|(
name|metadata
argument_list|,
literal|"rdf"
argument_list|,
literal|"li"
argument_list|,
literal|"TestValue"
argument_list|)
decl_stmt|;
name|bag
operator|.
name|getContainer
argument_list|()
operator|.
name|addProperty
argument_list|(
name|litmp
argument_list|)
expr_stmt|;
comment|// bag.getContainer().addProperty(new TextType(metadata.getFuturOwner(),
comment|// "rdf", "li", "TestValue"));
name|Assert
operator|.
name|assertTrue
argument_list|(
name|bag
operator|.
name|getContainer
argument_list|()
operator|.
name|getAllProperties
argument_list|()
operator|.
name|contains
argument_list|(
name|litmp
argument_list|)
argument_list|)
expr_stmt|;
comment|// Assert.assertEquals(litmp.getElement(),
comment|// bag.getContainer().getElement().getFirstChild());
comment|// Build a bag with 2 rdf:li
name|ComplexProperty
name|seq
init|=
operator|new
name|ComplexProperty
argument_list|(
name|metadata
argument_list|,
literal|"http://www.test.org/test/"
argument_list|,
literal|"test"
argument_list|,
literal|"TESTSEQNS"
argument_list|,
name|ComplexProperty
operator|.
name|ORDERED_ARRAY
argument_list|)
decl_stmt|;
name|TextType
name|li1
init|=
operator|new
name|TextType
argument_list|(
name|metadata
argument_list|,
literal|"rdf"
argument_list|,
literal|"li"
argument_list|,
literal|"TestValue1"
argument_list|)
decl_stmt|;
name|TextType
name|li2
init|=
operator|new
name|TextType
argument_list|(
name|metadata
argument_list|,
literal|"rdf"
argument_list|,
literal|"li"
argument_list|,
literal|"TestValue2"
argument_list|)
decl_stmt|;
name|seq
operator|.
name|getContainer
argument_list|()
operator|.
name|addProperty
argument_list|(
name|li1
argument_list|)
expr_stmt|;
name|seq
operator|.
name|getContainer
argument_list|()
operator|.
name|addProperty
argument_list|(
name|li2
argument_list|)
expr_stmt|;
comment|// Comparing content
name|Assert
operator|.
name|assertTrue
argument_list|(
name|seq
operator|.
name|isSameProperty
argument_list|(
name|seq
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|seq
operator|.
name|isSameProperty
argument_list|(
name|bag
argument_list|)
argument_list|)
expr_stmt|;
name|ComplexProperty
name|seqBis
init|=
operator|new
name|ComplexProperty
argument_list|(
name|metadata
argument_list|,
literal|"http://www.test.org/test/"
argument_list|,
literal|"test"
argument_list|,
literal|"TESTSEQNS"
argument_list|,
name|ComplexProperty
operator|.
name|ORDERED_ARRAY
argument_list|)
decl_stmt|;
name|TextType
name|lis1
init|=
operator|new
name|TextType
argument_list|(
name|metadata
argument_list|,
literal|"rdf"
argument_list|,
literal|"li"
argument_list|,
literal|"TestValue"
argument_list|)
decl_stmt|;
name|seqBis
operator|.
name|getContainer
argument_list|()
operator|.
name|addProperty
argument_list|(
name|lis1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|seq
operator|.
name|isSameProperty
argument_list|(
name|seqBis
argument_list|)
argument_list|)
expr_stmt|;
name|tmpSchem
operator|.
name|addProperty
argument_list|(
name|bag
argument_list|)
expr_stmt|;
name|tmpSchem
operator|.
name|addProperty
argument_list|(
name|seq
argument_list|)
expr_stmt|;
comment|// SaveMetadataHelper.serialize(metadata, true, System.out);
block|}
comment|/** 	 * Check if Complex property container building works (used directly for 	 * complex rdf:li) 	 *  	 * @throws Exception 	 */
annotation|@
name|Test
specifier|public
name|void
name|testBuildingComplexRDFLi
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Build a bag with one rdf:li
name|ComplexPropertyContainer
name|complexLi
init|=
operator|new
name|ComplexPropertyContainer
argument_list|(
name|metadata
argument_list|,
literal|"http://www.test.org/test/"
argument_list|,
literal|"rdf"
argument_list|,
literal|"li"
argument_list|)
decl_stmt|;
name|TextType
name|li1
init|=
operator|new
name|TextType
argument_list|(
name|metadata
argument_list|,
literal|"test"
argument_list|,
literal|"value1"
argument_list|,
literal|"ValueOne"
argument_list|)
decl_stmt|;
name|TextType
name|li2
init|=
operator|new
name|TextType
argument_list|(
name|metadata
argument_list|,
literal|"test"
argument_list|,
literal|"value2"
argument_list|,
literal|"ValueTwo"
argument_list|)
decl_stmt|;
name|TextType
name|li3
init|=
operator|new
name|TextType
argument_list|(
name|metadata
argument_list|,
literal|"test"
argument_list|,
literal|"value3"
argument_list|,
literal|"ValueThree"
argument_list|)
decl_stmt|;
name|complexLi
operator|.
name|addProperty
argument_list|(
name|li1
argument_list|)
expr_stmt|;
comment|// Test removing during adding
name|complexLi
operator|.
name|addProperty
argument_list|(
name|li1
argument_list|)
expr_stmt|;
name|complexLi
operator|.
name|addProperty
argument_list|(
name|li2
argument_list|)
expr_stmt|;
name|complexLi
operator|.
name|addProperty
argument_list|(
name|li3
argument_list|)
expr_stmt|;
comment|// Test contains checking
name|Assert
operator|.
name|assertTrue
argument_list|(
name|complexLi
operator|.
name|containsProperty
argument_list|(
name|li1
argument_list|)
argument_list|)
expr_stmt|;
name|complexLi
operator|.
name|removeProperty
argument_list|(
name|li1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|complexLi
operator|.
name|containsProperty
argument_list|(
name|li1
argument_list|)
argument_list|)
expr_stmt|;
name|tmpSchem
operator|.
name|addProperty
argument_list|(
name|complexLi
argument_list|)
expr_stmt|;
comment|// SaveMetadataHelper.serialize(metadata, true, System.out);
block|}
comment|/** 	 * Throw BadFieldValueException 	 *  	 * @throws BadFieldValueException 	 */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|BadFieldValueException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testBadFieldValueExceptionWithCause
parameter_list|()
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|BadFieldValueException
argument_list|(
literal|"TEST"
argument_list|,
operator|new
name|Throwable
argument_list|()
argument_list|)
throw|;
block|}
comment|/** 	 * Throw BadFieldValueException 	 *  	 * @throws BadFieldValueException 	 */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|BadFieldValueException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|badFieldValuetestException
parameter_list|()
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|BadFieldValueException
argument_list|(
literal|"TEST"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

