begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|schema
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|XMPMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|parser
operator|.
name|XmpSchemaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|PDFAExtensionSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|PDFAPropertyDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|PDFAValueTypeDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|SchemaDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|PDFAExtensionTest
block|{
specifier|protected
name|XMPMetadata
name|metadata
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|initTempMetaData
parameter_list|()
throws|throws
name|Exception
block|{
name|metadata
operator|=
operator|new
name|XMPMetadata
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNSManualDeclaration
parameter_list|()
throws|throws
name|Exception
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|namespaces
operator|.
name|put
argument_list|(
name|PDFAExtensionSchema
operator|.
name|PDFAEXTENSION
argument_list|,
name|PDFAExtensionSchema
operator|.
name|PDFAEXTENSIONURI
argument_list|)
expr_stmt|;
name|namespaces
operator|.
name|put
argument_list|(
name|PDFAExtensionSchema
operator|.
name|PDFAFIELD
argument_list|,
name|PDFAExtensionSchema
operator|.
name|PDFAFIELDURI
argument_list|)
expr_stmt|;
name|namespaces
operator|.
name|put
argument_list|(
name|PDFAExtensionSchema
operator|.
name|PDFAPROPERTY
argument_list|,
name|PDFAExtensionSchema
operator|.
name|PDFAPROPERTYURI
argument_list|)
expr_stmt|;
name|namespaces
operator|.
name|put
argument_list|(
name|PDFAExtensionSchema
operator|.
name|PDFASCHEMA
argument_list|,
name|PDFAExtensionSchema
operator|.
name|PDFASCHEMAURI
argument_list|)
expr_stmt|;
name|namespaces
operator|.
name|put
argument_list|(
name|PDFAExtensionSchema
operator|.
name|PDFATYPE
argument_list|,
name|PDFAExtensionSchema
operator|.
name|PDFATYPEURI
argument_list|)
expr_stmt|;
name|PDFAExtensionSchema
name|schem
init|=
name|metadata
operator|.
name|createAndAddPDFAExtensionSchemaWithNS
argument_list|(
name|namespaces
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Attribute
argument_list|>
name|att
init|=
name|schem
operator|.
name|getAllAttributes
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
comment|// PDFAExtension is removed during the building of
comment|// PDFAExtensionSchemaWithNS
name|namespaces
operator|.
name|put
argument_list|(
name|PDFAExtensionSchema
operator|.
name|PDFAEXTENSION
argument_list|,
name|PDFAExtensionSchema
operator|.
name|PDFAEXTENSIONURI
argument_list|)
expr_stmt|;
name|Attribute
name|tmp
decl_stmt|;
while|while
condition|(
name|att
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|// System.out.println(att.next().getPropertyName());
name|tmp
operator|=
name|att
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|tmp
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"about"
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|namespaces
operator|.
name|containsKey
argument_list|(
name|tmp
operator|.
name|getLocalName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|XmpSchemaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testNoPdfExtension
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
operator|new
name|PDFAExtensionSchema
argument_list|(
name|metadata
argument_list|,
name|namespaces
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSameSchemaTwice
parameter_list|()
throws|throws
name|Exception
block|{
name|PDFAExtensionSchema
name|schema
init|=
operator|new
name|PDFAExtensionSchema
argument_list|(
name|metadata
argument_list|)
decl_stmt|;
name|SchemaDescription
name|sd1
init|=
name|schema
operator|.
name|createSchemaDescription
argument_list|()
decl_stmt|;
name|sd1
operator|.
name|setPrefixValue
argument_list|(
literal|"pref1"
argument_list|)
expr_stmt|;
name|sd1
operator|.
name|setNameSpaceURIValue
argument_list|(
literal|"http://uri1"
argument_list|)
expr_stmt|;
name|sd1
operator|.
name|setSchemaValue
argument_list|(
literal|"pref 1"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|schema
operator|.
name|addSchemaDescription
argument_list|(
name|sd1
argument_list|)
argument_list|)
expr_stmt|;
name|SchemaDescription
name|sd2
init|=
name|schema
operator|.
name|createSchemaDescription
argument_list|()
decl_stmt|;
name|sd2
operator|.
name|setPrefixValue
argument_list|(
literal|"pref1"
argument_list|)
expr_stmt|;
name|sd2
operator|.
name|setNameSpaceURIValue
argument_list|(
literal|"http://uri1"
argument_list|)
expr_stmt|;
name|sd2
operator|.
name|setSchemaValue
argument_list|(
literal|"pref 1"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|schema
operator|.
name|addSchemaDescription
argument_list|(
name|sd2
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SchemaDescription
argument_list|>
name|lsd
init|=
name|schema
operator|.
name|getDescriptionSchema
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|lsd
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|SchemaDescription
name|sd
init|=
name|lsd
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"pref1"
argument_list|,
name|sd
operator|.
name|getPrefix
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"http://uri1"
argument_list|,
name|sd
operator|.
name|getNameSpaceURI
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"pref 1"
argument_list|,
name|sd
operator|.
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSameNSSchemaDifferentPrefix
parameter_list|()
throws|throws
name|Exception
block|{
name|PDFAExtensionSchema
name|schema
init|=
operator|new
name|PDFAExtensionSchema
argument_list|(
name|metadata
argument_list|)
decl_stmt|;
name|SchemaDescription
name|sd1
init|=
name|schema
operator|.
name|createSchemaDescription
argument_list|()
decl_stmt|;
name|sd1
operator|.
name|setPrefixValue
argument_list|(
literal|"pref1"
argument_list|)
expr_stmt|;
name|sd1
operator|.
name|setNameSpaceURIValue
argument_list|(
literal|"http://uri1"
argument_list|)
expr_stmt|;
name|sd1
operator|.
name|setSchemaValue
argument_list|(
literal|"pref 1"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|schema
operator|.
name|addSchemaDescription
argument_list|(
name|sd1
argument_list|)
argument_list|)
expr_stmt|;
name|SchemaDescription
name|sd2
init|=
name|schema
operator|.
name|createSchemaDescription
argument_list|()
decl_stmt|;
name|sd2
operator|.
name|setPrefixValue
argument_list|(
literal|"pref2"
argument_list|)
expr_stmt|;
name|sd2
operator|.
name|setNameSpaceURIValue
argument_list|(
literal|"http://uri1"
argument_list|)
expr_stmt|;
name|sd2
operator|.
name|setSchemaValue
argument_list|(
literal|"pref 2"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|schema
operator|.
name|addSchemaDescription
argument_list|(
name|sd2
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SchemaDescription
argument_list|>
name|lsd
init|=
name|schema
operator|.
name|getDescriptionSchema
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|lsd
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|SchemaDescription
name|sd
init|=
name|lsd
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"pref1"
argument_list|,
name|sd
operator|.
name|getPrefix
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"http://uri1"
argument_list|,
name|sd
operator|.
name|getNameSpaceURI
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"pref 1"
argument_list|,
name|sd
operator|.
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDifferentSchemaDifferentPrefix
parameter_list|()
throws|throws
name|Exception
block|{
name|PDFAExtensionSchema
name|schema
init|=
operator|new
name|PDFAExtensionSchema
argument_list|(
name|metadata
argument_list|)
decl_stmt|;
name|SchemaDescription
name|sd1
init|=
name|schema
operator|.
name|createSchemaDescription
argument_list|()
decl_stmt|;
name|sd1
operator|.
name|setPrefixValue
argument_list|(
literal|"pref1"
argument_list|)
expr_stmt|;
name|sd1
operator|.
name|setNameSpaceURIValue
argument_list|(
literal|"http://uri1"
argument_list|)
expr_stmt|;
name|sd1
operator|.
name|setSchemaValue
argument_list|(
literal|"pref 1"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|schema
operator|.
name|addSchemaDescription
argument_list|(
name|sd1
argument_list|)
argument_list|)
expr_stmt|;
name|SchemaDescription
name|sd2
init|=
name|schema
operator|.
name|createSchemaDescription
argument_list|()
decl_stmt|;
name|sd2
operator|.
name|setPrefixValue
argument_list|(
literal|"pref2"
argument_list|)
expr_stmt|;
name|sd2
operator|.
name|setNameSpaceURIValue
argument_list|(
literal|"http://uri2"
argument_list|)
expr_stmt|;
name|sd2
operator|.
name|setSchemaValue
argument_list|(
literal|"pref 2"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|schema
operator|.
name|addSchemaDescription
argument_list|(
name|sd2
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SchemaDescription
argument_list|>
name|lsd
init|=
name|schema
operator|.
name|getDescriptionSchema
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|lsd
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|SchemaDescription
name|sd
init|=
name|lsd
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"pref1"
argument_list|,
name|sd
operator|.
name|getPrefix
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"http://uri1"
argument_list|,
name|sd
operator|.
name|getNameSpaceURI
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"pref 1"
argument_list|,
name|sd
operator|.
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPDFExt
parameter_list|()
throws|throws
name|Exception
block|{
name|PDFAExtensionSchema
name|schem
init|=
name|metadata
operator|.
name|createAndAddPDFAExtensionSchemaWithDefaultNS
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"pdfaExtension"
argument_list|,
name|schem
operator|.
name|getPrefix
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"http://www.aiim.org/pdfa/ns/extension/"
argument_list|,
name|schem
operator|.
name|getNamespaceValue
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|schemDesc
init|=
literal|"Schema Acte de naissance"
decl_stmt|;
name|String
name|schemURI
init|=
literal|"http://test.apache.com/xap/adn/"
decl_stmt|;
name|String
name|schemPrefix
init|=
literal|"adn"
decl_stmt|;
name|SchemaDescription
name|desc
init|=
name|schem
operator|.
name|createSchemaDescription
argument_list|()
decl_stmt|;
name|desc
operator|.
name|setSchemaValue
argument_list|(
name|schemDesc
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setNameSpaceURIValue
argument_list|(
name|schemURI
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setPrefixValue
argument_list|(
name|schemPrefix
argument_list|)
expr_stmt|;
name|schem
operator|.
name|addSchemaDescription
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|schemDesc
argument_list|,
name|desc
operator|.
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|schemURI
argument_list|,
name|desc
operator|.
name|getNameSpaceURI
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|schemPrefix
argument_list|,
name|desc
operator|.
name|getPrefix
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|descExpected
init|=
literal|"nom de la personne concernée"
decl_stmt|;
name|desc
operator|.
name|addProperty
argument_list|(
literal|"nom"
argument_list|,
literal|"Text"
argument_list|,
literal|"external"
argument_list|,
literal|"nom de la personne concernee"
argument_list|)
expr_stmt|;
name|desc
operator|.
name|addProperty
argument_list|(
literal|"nom"
argument_list|,
literal|"Text"
argument_list|,
literal|"external"
argument_list|,
name|descExpected
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|desc
operator|.
name|getProperties
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|descExpected
argument_list|,
name|desc
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDescriptionValue
argument_list|()
argument_list|)
expr_stmt|;
name|desc
operator|.
name|addProperty
argument_list|(
literal|"prénom"
argument_list|,
literal|"Text"
argument_list|,
literal|"external"
argument_list|,
literal|"prénom de la personne concernée"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PDFAPropertyDescription
argument_list|>
name|list
init|=
name|desc
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"nom"
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNameValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"prénom"
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getNameValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check retrieve descriptions
name|Assert
operator|.
name|assertEquals
argument_list|(
name|desc
argument_list|,
name|schem
operator|.
name|getIteratorOfDescriptions
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|desc
argument_list|,
name|schem
operator|.
name|getDescriptionSchema
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// check retrieve this schema in metadata
name|Assert
operator|.
name|assertEquals
argument_list|(
name|schem
argument_list|,
name|metadata
operator|.
name|getPDFExtensionSchema
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check if no problem when create 2 description and display result
name|SchemaDescription
name|desc2
init|=
name|schem
operator|.
name|createSchemaDescription
argument_list|()
decl_stmt|;
name|desc2
operator|.
name|setSchemaValue
argument_list|(
literal|"2eme schema de test"
argument_list|)
expr_stmt|;
name|desc2
operator|.
name|setNameSpaceURIValue
argument_list|(
literal|"http://test.apache.com/xap/test/"
argument_list|)
expr_stmt|;
name|desc2
operator|.
name|setPrefixValue
argument_list|(
literal|"tst"
argument_list|)
expr_stmt|;
name|desc2
operator|.
name|addProperty
argument_list|(
literal|"TestText"
argument_list|,
literal|"OwnType"
argument_list|,
literal|"external"
argument_list|,
literal|"just a text property"
argument_list|)
expr_stmt|;
name|schem
operator|.
name|addSchemaDescription
argument_list|(
name|desc2
argument_list|)
expr_stmt|;
comment|// Check value type
name|String
name|valType
init|=
literal|"OwnType"
decl_stmt|;
name|String
name|nsType
init|=
literal|"http://test.apache.com/xap/test/"
decl_stmt|;
name|String
name|prefType
init|=
literal|"tst"
decl_stmt|;
name|String
name|descType
init|=
literal|"Test Own type"
decl_stmt|;
name|desc2
operator|.
name|addValueType
argument_list|(
name|valType
argument_list|,
name|nsType
argument_list|,
name|prefType
argument_list|,
literal|"must be replaced"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|desc2
operator|.
name|addValueType
argument_list|(
name|valType
argument_list|,
name|nsType
argument_list|,
name|prefType
argument_list|,
name|descType
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|desc2
operator|.
name|getValueTypes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|PDFAValueTypeDescription
name|value
init|=
name|desc2
operator|.
name|getValueTypes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|valType
argument_list|,
name|value
operator|.
name|getTypeNameValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nsType
argument_list|,
name|value
operator|.
name|getNamespaceURIValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|prefType
argument_list|,
name|value
operator|.
name|getPrefixValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|descType
argument_list|,
name|value
operator|.
name|getDescriptionValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// SaveMetadataHelper.serialize(metadata, true, System.out);
comment|// valuetype test
block|}
block|}
end_class

end_unit

