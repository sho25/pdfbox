begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|XMPMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|ComplexPropertyContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|JobType
import|;
end_import

begin_class
specifier|public
class|class
name|JobParser
extends|extends
name|StructuredPropertyParser
block|{
specifier|public
name|JobParser
parameter_list|(
name|XMPDocumentBuilder
name|builder
parameter_list|)
block|{
name|super
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|parse
parameter_list|(
name|XMPMetadata
name|metadata
parameter_list|,
name|QName
name|altName
parameter_list|,
name|ComplexPropertyContainer
name|container
parameter_list|)
throws|throws
name|XmpUnexpectedTypeException
throws|,
name|XmpParsingException
throws|,
name|XMLStreamException
throws|,
name|XmpUnknownPropertyTypeException
throws|,
name|XmpPropertyFormatException
block|{
name|builder
operator|.
name|expectCurrentLocalName
argument_list|(
literal|"li"
argument_list|)
expr_stmt|;
name|JobType
name|job
init|=
operator|new
name|JobType
argument_list|(
name|metadata
argument_list|,
name|altName
operator|.
name|getPrefix
argument_list|()
argument_list|,
name|altName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|elmtType
init|=
name|builder
operator|.
name|reader
operator|.
name|get
argument_list|()
operator|.
name|nextTag
argument_list|()
decl_stmt|;
name|QName
name|eltName
decl_stmt|;
name|String
name|eltContent
decl_stmt|;
while|while
condition|(
operator|!
operator|(
operator|(
name|elmtType
operator|==
name|XMLStreamReader
operator|.
name|END_ELEMENT
operator|)
operator|&&
name|builder
operator|.
name|reader
operator|.
name|get
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
literal|"li"
argument_list|)
operator|)
condition|)
block|{
name|eltName
operator|=
name|builder
operator|.
name|reader
operator|.
name|get
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
name|eltContent
operator|=
name|builder
operator|.
name|reader
operator|.
name|get
argument_list|()
operator|.
name|getElementText
argument_list|()
expr_stmt|;
if|if
condition|(
name|eltName
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|JobType
operator|.
name|ID
argument_list|)
condition|)
block|{
name|job
operator|.
name|setId
argument_list|(
name|eltName
operator|.
name|getPrefix
argument_list|()
argument_list|,
name|eltContent
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|eltName
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|JobType
operator|.
name|NAME
argument_list|)
condition|)
block|{
name|job
operator|.
name|setName
argument_list|(
name|eltName
operator|.
name|getPrefix
argument_list|()
argument_list|,
name|eltContent
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|eltName
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|JobType
operator|.
name|URL
argument_list|)
condition|)
block|{
name|job
operator|.
name|setUrl
argument_list|(
name|eltName
operator|.
name|getPrefix
argument_list|()
argument_list|,
name|eltContent
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|XmpParsingException
argument_list|(
literal|"Unknown property name for a job element : "
operator|+
name|eltName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
throw|;
block|}
name|elmtType
operator|=
name|builder
operator|.
name|reader
operator|.
name|get
argument_list|()
operator|.
name|nextTag
argument_list|()
expr_stmt|;
block|}
name|container
operator|.
name|addProperty
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

