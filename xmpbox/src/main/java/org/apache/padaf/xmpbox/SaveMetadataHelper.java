begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|output
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|parser
operator|.
name|XMLUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|XMPSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|ProcessingInstruction
import|;
end_import

begin_comment
comment|/**  * This class represents tools to save metadata and schema in serialized way  * (RDF/XML Format)  *   * @author a183132  *   */
end_comment

begin_class
specifier|public
class|class
name|SaveMetadataHelper
block|{
comment|/** 	 * According to check-style, Utility classes should not have a public or 	 * default constructor. 	 */
specifier|protected
name|SaveMetadataHelper
parameter_list|()
block|{ 	}
empty_stmt|;
comment|/** 	 * Prepare XMP Saving Put data necessary to make a well-formed XMP 	 *  	 * @param metadata 	 *            metadata concerned by the serialization processing 	 * @param intoXPacket 	 *            true if Processing instruction must be embedded 	 * @return The DOM Document which will represent the serialized metadata 	 */
specifier|protected
specifier|static
name|Document
name|prepareSaving
parameter_list|(
name|XMPMetadata
name|metadata
parameter_list|,
name|boolean
name|intoXPacket
parameter_list|)
block|{
name|Document
name|newdoc
init|=
operator|(
name|Document
operator|)
name|metadata
operator|.
name|getFuturOwner
argument_list|()
operator|.
name|cloneNode
argument_list|(
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|intoXPacket
condition|)
block|{
name|ProcessingInstruction
name|beginXPacket
init|=
name|newdoc
operator|.
name|createProcessingInstruction
argument_list|(
literal|"xpacket"
argument_list|,
literal|"begin=\""
operator|+
name|metadata
operator|.
name|getXpacketBegin
argument_list|()
operator|+
literal|"\" id=\""
operator|+
name|metadata
operator|.
name|getXpacketId
argument_list|()
operator|+
literal|"\""
argument_list|)
decl_stmt|;
name|newdoc
operator|.
name|appendChild
argument_list|(
name|beginXPacket
argument_list|)
expr_stmt|;
block|}
name|Element
name|xmpMeta
init|=
name|newdoc
operator|.
name|createElementNS
argument_list|(
literal|"adobe:ns:meta/"
argument_list|,
literal|"x:xmpmeta"
argument_list|)
decl_stmt|;
name|xmpMeta
operator|.
name|setAttributeNS
argument_list|(
name|XMPSchema
operator|.
name|NS_NAMESPACE
argument_list|,
literal|"xmlns:x"
argument_list|,
literal|"adobe:ns:meta/"
argument_list|)
expr_stmt|;
name|newdoc
operator|.
name|appendChild
argument_list|(
name|xmpMeta
argument_list|)
expr_stmt|;
name|Element
name|elem
init|=
operator|(
name|Element
operator|)
name|metadata
operator|.
name|getContainerElement
argument_list|()
operator|.
name|cloneNode
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|newdoc
operator|.
name|adoptNode
argument_list|(
name|elem
argument_list|)
expr_stmt|;
name|xmpMeta
operator|.
name|appendChild
argument_list|(
name|elem
argument_list|)
expr_stmt|;
if|if
condition|(
name|intoXPacket
condition|)
block|{
name|ProcessingInstruction
name|endXPacket
init|=
name|newdoc
operator|.
name|createProcessingInstruction
argument_list|(
literal|"xpacket"
argument_list|,
name|metadata
operator|.
name|getEndXPacket
argument_list|()
argument_list|)
decl_stmt|;
name|newdoc
operator|.
name|appendChild
argument_list|(
name|endXPacket
argument_list|)
expr_stmt|;
block|}
return|return
name|newdoc
return|;
block|}
comment|/** 	 * Serialize metadata into an output stream with XPacket PI 	 *  	 * @param metadata 	 *            Metadata concerned by the serialization processing 	 * @param os 	 *            Stream to save serialized metadata 	 * @throws TransformException 	 *             When couldn't parse data to XML/RDF 	 */
specifier|public
specifier|static
name|void
name|serialize
parameter_list|(
name|XMPMetadata
name|metadata
parameter_list|,
name|OutputStream
name|os
parameter_list|)
throws|throws
name|TransformException
block|{
name|serialize
argument_list|(
name|metadata
argument_list|,
literal|true
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Serialize metadata into an output stream 	 *  	 * @param metadata 	 *            Metadata concerned by the serialization processing 	 * @param intoXPacket 	 *            True to put XPacket Processing Information 	 * @param os 	 *            Stream to save serialized metadata 	 * @throws TransformException 	 *             When couldn't parse data to XML/RDF 	 */
specifier|public
specifier|static
name|void
name|serialize
parameter_list|(
name|XMPMetadata
name|metadata
parameter_list|,
name|boolean
name|intoXPacket
parameter_list|,
name|OutputStream
name|os
parameter_list|)
throws|throws
name|TransformException
block|{
name|Document
name|doc
init|=
name|prepareSaving
argument_list|(
name|metadata
argument_list|,
name|intoXPacket
argument_list|)
decl_stmt|;
try|try
block|{
name|XMLUtil
operator|.
name|save
argument_list|(
name|doc
argument_list|,
name|os
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TransformerException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TransformException
argument_list|(
literal|"Failed to parse defined XMP"
argument_list|)
throw|;
block|}
block|}
comment|/** 	 * Serialize metadata into the byte array returned 	 *  	 * @param metadata 	 *            Metadata concerned by the serialization processing 	 * @param intoXPacket 	 *            True to put XPacket Processing Information 	 * @return ByteArray which contains serialized metadata 	 * @throws TransformException 	 *             When couldn't parse data to XML/RDF 	 */
specifier|public
specifier|static
name|byte
index|[]
name|serialize
parameter_list|(
name|XMPMetadata
name|metadata
parameter_list|,
name|boolean
name|intoXPacket
parameter_list|)
throws|throws
name|TransformException
block|{
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|serialize
argument_list|(
name|metadata
argument_list|,
name|intoXPacket
argument_list|,
name|bos
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|bos
argument_list|)
expr_stmt|;
return|return
name|bos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
comment|/** 	 * Serialize metadata with XPacket PI into the byte array returned 	 *  	 * @param metadata 	 *            Metadata concerned by the serialization processing 	 * @return ByteArray which contains serialized metadata 	 * @throws TransformException 	 *             When couldn't parse data to XML/RDF 	 */
specifier|public
specifier|static
name|byte
index|[]
name|serialize
parameter_list|(
name|XMPMetadata
name|metadata
parameter_list|)
throws|throws
name|TransformException
block|{
return|return
name|serialize
argument_list|(
name|metadata
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/** 	 * Serialize a schema into an Output stream 	 *  	 * @param schema 	 *            Schema concerned by the serialization processing 	 * @param os 	 *            Stream to save serialized schema 	 * @throws TransformException 	 *             When couldn't parse data to XML/RDF 	 */
specifier|public
specifier|static
name|void
name|serialize
parameter_list|(
name|XMPSchema
name|schema
parameter_list|,
name|OutputStream
name|os
parameter_list|)
throws|throws
name|TransformException
block|{
try|try
block|{
name|Document
name|doc
init|=
name|XMLUtil
operator|.
name|newDocument
argument_list|()
decl_stmt|;
name|Element
name|rdf
init|=
name|doc
operator|.
name|createElementNS
argument_list|(
literal|"http://www.w3.org/1999/02/22-rdf-syntax-ns#"
argument_list|,
literal|"rdf:RDF"
argument_list|)
decl_stmt|;
name|Node
name|schemContent
init|=
name|schema
operator|.
name|getElement
argument_list|()
operator|.
name|cloneNode
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|doc
operator|.
name|adoptNode
argument_list|(
name|schemContent
argument_list|)
expr_stmt|;
name|rdf
operator|.
name|appendChild
argument_list|(
name|schemContent
argument_list|)
expr_stmt|;
name|XMLUtil
operator|.
name|save
argument_list|(
name|rdf
argument_list|,
name|os
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TransformerException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TransformException
argument_list|(
literal|"Failed to parse defined XMP"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TransformException
argument_list|(
literal|"Failed to create Document to contain Schema representation "
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/** 	 * Serialize a schema into a Byte Array 	 *  	 * @param schema 	 *            Schema concerned by the serialization processing 	 * @return a ByteArray which contains serialized schema 	 * @throws TransformException 	 *             When couldn't parse data to XML/RDF 	 */
specifier|public
specifier|static
name|byte
index|[]
name|serialize
parameter_list|(
name|XMPSchema
name|schema
parameter_list|)
throws|throws
name|TransformException
block|{
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|serialize
argument_list|(
name|schema
argument_list|,
name|bos
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|bos
argument_list|)
expr_stmt|;
return|return
name|bos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
block|}
end_class

end_unit

