begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|type
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|XMPMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|XmpConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|PropertyType
import|;
end_import

begin_class
specifier|public
class|class
name|LayerType
extends|extends
name|AbstractStructuredType
block|{
specifier|public
specifier|static
specifier|final
name|String
name|PREFERED_PREFIX
init|=
literal|"photoshop"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ELEMENT_NS
init|=
literal|"http://ns.adobe.com/photoshop/1.0/"
decl_stmt|;
annotation|@
name|PropertyType
argument_list|(
name|propertyType
operator|=
literal|"Text"
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|LAYER_NAME
init|=
literal|"LayerName"
decl_stmt|;
annotation|@
name|PropertyType
argument_list|(
name|propertyType
operator|=
literal|"Text"
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|LAYER_TEXT
init|=
literal|"LayerText"
decl_stmt|;
specifier|public
name|LayerType
parameter_list|(
name|XMPMetadata
name|metadata
parameter_list|)
block|{
name|super
argument_list|(
name|metadata
argument_list|,
name|XmpConstants
operator|.
name|RDF_NAMESPACE
argument_list|,
name|PREFERED_PREFIX
argument_list|)
expr_stmt|;
name|setAttribute
argument_list|(
operator|new
name|Attribute
argument_list|(
literal|null
argument_list|,
literal|"rdf"
argument_list|,
literal|"parseType"
argument_list|,
literal|"Resource"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Get The LayerName data 	 *  	 * @return the LayerName 	 */
specifier|public
name|String
name|getLayerName
parameter_list|()
block|{
name|AbstractField
name|absProp
init|=
name|getFirstEquivalentProperty
argument_list|(
name|LAYER_NAME
argument_list|,
name|TextType
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|absProp
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
operator|(
name|TextType
operator|)
name|absProp
operator|)
operator|.
name|getStringValue
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/** 	 * Set LayerName  	 *  	 * @param prefix 	 *            the prefix of LayerName property to set 	 * @param name 	 *            the name of LayerName property to set 	 * @param image 	 *            the value of LayerName property to set 	 */
specifier|public
name|void
name|setLayerName
parameter_list|(
name|String
name|image
parameter_list|)
block|{
name|this
operator|.
name|addProperty
argument_list|(
operator|new
name|TextType
argument_list|(
name|getMetadata
argument_list|()
argument_list|,
literal|null
argument_list|,
name|getFieldPrefix
argument_list|()
argument_list|,
name|LAYER_NAME
argument_list|,
name|image
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Get The LayerText data 	 *  	 * @return the LayerText 	 */
specifier|public
name|String
name|getLayerText
parameter_list|()
block|{
name|AbstractField
name|absProp
init|=
name|getFirstEquivalentProperty
argument_list|(
name|LAYER_TEXT
argument_list|,
name|TextType
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|absProp
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
operator|(
name|TextType
operator|)
name|absProp
operator|)
operator|.
name|getStringValue
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/** 	 * Set LayerText  	 *  	 * @param prefix 	 *            the prefix of LayerText property to set 	 * @param name 	 *            the name of LayerText property to set 	 * @param image 	 *            the value of LayerText property to set 	 */
specifier|public
name|void
name|setLayerText
parameter_list|(
name|String
name|image
parameter_list|)
block|{
name|this
operator|.
name|addProperty
argument_list|(
operator|new
name|TextType
argument_list|(
name|getMetadata
argument_list|()
argument_list|,
literal|null
argument_list|,
name|getFieldPrefix
argument_list|()
argument_list|,
name|LAYER_TEXT
argument_list|,
name|image
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getFieldsNamespace
parameter_list|()
block|{
return|return
name|ELEMENT_NS
return|;
block|}
block|}
end_class

end_unit

