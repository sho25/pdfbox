begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|type
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|XMPMetadata
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractStructuredType
extends|extends
name|ComplexPropertyContainer
block|{
comment|/** The prefix of the fields of the structure */
specifier|private
name|String
name|fieldPrefix
init|=
literal|null
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|STRUCTURE_ARRAY_PREFIX
init|=
literal|"rdf"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|STRUCTURE_ARRAY_NAME
init|=
literal|"li"
decl_stmt|;
specifier|public
name|AbstractStructuredType
parameter_list|(
name|XMPMetadata
name|metadata
parameter_list|,
name|String
name|namespaceURI
parameter_list|,
name|String
name|fieldPrefix
parameter_list|)
block|{
name|super
argument_list|(
name|metadata
argument_list|,
name|namespaceURI
argument_list|,
name|STRUCTURE_ARRAY_PREFIX
argument_list|,
name|STRUCTURE_ARRAY_NAME
argument_list|)
expr_stmt|;
name|this
operator|.
name|fieldPrefix
operator|=
name|fieldPrefix
expr_stmt|;
block|}
specifier|public
specifier|abstract
name|String
name|getFieldsNamespace
parameter_list|()
function_decl|;
specifier|public
name|String
name|getFieldPrefix
parameter_list|()
block|{
return|return
name|this
operator|.
name|fieldPrefix
return|;
block|}
specifier|protected
name|void
name|addSimpleProperty
parameter_list|(
name|String
name|propertyName
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|AbstractSimpleProperty
name|asp
init|=
name|TypeMapping
operator|.
name|instanciateSimpleField
argument_list|(
name|getClass
argument_list|()
argument_list|,
name|getMetadata
argument_list|()
argument_list|,
literal|null
argument_list|,
name|fieldPrefix
argument_list|,
name|propertyName
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|addProperty
argument_list|(
name|asp
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|AbstractSimpleProperty
name|getProperty
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|List
argument_list|<
name|AbstractField
argument_list|>
name|list
init|=
name|getPropertiesByLocalName
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
comment|// return null if no property
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// return the first element of the list
return|return
operator|(
name|AbstractSimpleProperty
operator|)
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getPropertyValueAsString
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|AbstractSimpleProperty
name|absProp
init|=
name|getProperty
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|absProp
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|absProp
operator|.
name|getStringValue
argument_list|()
return|;
block|}
block|}
specifier|protected
name|Calendar
name|getDatePropertyAsCalendar
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|DateType
name|absProp
init|=
operator|(
name|DateType
operator|)
name|getFirstEquivalentProperty
argument_list|(
name|fieldName
argument_list|,
name|DateType
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|absProp
operator|!=
literal|null
condition|)
block|{
return|return
name|absProp
operator|.
name|getValue
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

