begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|type
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|XMPMetadata
import|;
end_import

begin_class
annotation|@
name|StructuredType
argument_list|(
name|preferedPrefix
operator|=
literal|"pdfaProperty"
argument_list|,
name|namespace
operator|=
literal|"http://www.aiim.org/pdfa/ns/property#"
argument_list|)
specifier|public
class|class
name|PDFAPropertyType
extends|extends
name|AbstractStructuredType
block|{
annotation|@
name|PropertyType
argument_list|(
name|type
operator|=
name|Types
operator|.
name|Text
argument_list|,
name|card
operator|=
name|Cardinality
operator|.
name|Simple
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"name"
decl_stmt|;
annotation|@
name|PropertyType
argument_list|(
name|type
operator|=
name|Types
operator|.
name|Choice
argument_list|,
name|card
operator|=
name|Cardinality
operator|.
name|Simple
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|VALUETYPE
init|=
literal|"valueType"
decl_stmt|;
annotation|@
name|PropertyType
argument_list|(
name|type
operator|=
name|Types
operator|.
name|Choice
argument_list|,
name|card
operator|=
name|Cardinality
operator|.
name|Simple
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|CATEGORY
init|=
literal|"category"
decl_stmt|;
annotation|@
name|PropertyType
argument_list|(
name|type
operator|=
name|Types
operator|.
name|Text
argument_list|,
name|card
operator|=
name|Cardinality
operator|.
name|Simple
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|DESCRIPTION
init|=
literal|"description"
decl_stmt|;
specifier|public
name|PDFAPropertyType
parameter_list|(
name|XMPMetadata
name|metadata
parameter_list|)
block|{
name|super
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
name|TextType
name|tt
init|=
operator|(
name|TextType
operator|)
name|getProperty
argument_list|(
name|NAME
argument_list|)
decl_stmt|;
return|return
name|tt
operator|==
literal|null
condition|?
literal|null
else|:
name|tt
operator|.
name|getStringValue
argument_list|()
return|;
block|}
specifier|public
name|String
name|getValueType
parameter_list|()
block|{
name|ChoiceType
name|tt
init|=
operator|(
name|ChoiceType
operator|)
name|getProperty
argument_list|(
name|VALUETYPE
argument_list|)
decl_stmt|;
return|return
name|tt
operator|==
literal|null
condition|?
literal|null
else|:
name|tt
operator|.
name|getStringValue
argument_list|()
return|;
block|}
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
name|TextType
name|tt
init|=
operator|(
name|TextType
operator|)
name|getProperty
argument_list|(
name|DESCRIPTION
argument_list|)
decl_stmt|;
return|return
name|tt
operator|==
literal|null
condition|?
literal|null
else|:
name|tt
operator|.
name|getStringValue
argument_list|()
return|;
block|}
specifier|public
name|String
name|getCategory
parameter_list|()
block|{
name|ChoiceType
name|tt
init|=
operator|(
name|ChoiceType
operator|)
name|getProperty
argument_list|(
name|CATEGORY
argument_list|)
decl_stmt|;
return|return
name|tt
operator|==
literal|null
condition|?
literal|null
else|:
name|tt
operator|.
name|getStringValue
argument_list|()
return|;
block|}
block|}
end_class

end_unit

