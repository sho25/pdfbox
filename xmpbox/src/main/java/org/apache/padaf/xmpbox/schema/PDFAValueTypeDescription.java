begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|schema
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|XMPMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|AbstractField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|ComplexPropertyContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|Elementable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|TextType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_comment
comment|/**  * Representation of a PDF/A Value type schema  *   * @author a183132  *   */
end_comment

begin_class
specifier|public
class|class
name|PDFAValueTypeDescription
implements|implements
name|Elementable
block|{
specifier|public
specifier|static
specifier|final
name|String
name|PDFATYPEPREFIX
init|=
literal|"pdfaType"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PDFATYPEPREFIXSEP
init|=
literal|"pdfaType:"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TYPE
init|=
literal|"type"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NS_URI
init|=
literal|"namespaceURI"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PREFIX
init|=
literal|"prefix"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DESCRIPTION
init|=
literal|"description"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|FIELD
init|=
literal|"field"
decl_stmt|;
specifier|private
name|FieldDescriptionContainer
name|fields
decl_stmt|;
specifier|private
name|XMPMetadata
name|metadata
decl_stmt|;
specifier|private
name|ComplexPropertyContainer
name|content
decl_stmt|;
comment|/** 	 * Build a new valuetype description 	 *  	 * @param metadata 	 *            The metadata to attach this schema 	 */
specifier|public
name|PDFAValueTypeDescription
parameter_list|(
name|XMPMetadata
name|metadata
parameter_list|)
block|{
name|this
operator|.
name|metadata
operator|=
name|metadata
expr_stmt|;
name|content
operator|=
operator|new
name|ComplexPropertyContainer
argument_list|(
name|metadata
argument_list|,
literal|null
argument_list|,
literal|"rdf"
argument_list|,
literal|"li"
argument_list|)
expr_stmt|;
name|content
operator|.
name|setAttribute
argument_list|(
operator|new
name|Attribute
argument_list|(
literal|null
argument_list|,
literal|"rdf"
argument_list|,
literal|"parseType"
argument_list|,
literal|"Resource"
argument_list|)
argument_list|)
expr_stmt|;
name|fields
operator|=
operator|new
name|FieldDescriptionContainer
argument_list|()
expr_stmt|;
name|content
operator|.
name|getElement
argument_list|()
operator|.
name|appendChild
argument_list|(
name|fields
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * set the name of this valuetype 	 *  	 * @param name 	 *            The value to set 	 */
specifier|public
name|void
name|setTypeNameValue
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|content
operator|.
name|addProperty
argument_list|(
operator|new
name|TextType
argument_list|(
name|metadata
argument_list|,
literal|null
argument_list|,
name|PDFATYPEPREFIX
argument_list|,
name|TYPE
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * set the namespaceURI of this valueType 	 *  	 * @param nsURI 	 *            The value to set 	 */
specifier|public
name|void
name|setNamespaceURIValue
parameter_list|(
name|String
name|nsURI
parameter_list|)
block|{
name|content
operator|.
name|addProperty
argument_list|(
operator|new
name|TextType
argument_list|(
name|metadata
argument_list|,
literal|null
argument_list|,
name|PDFATYPEPREFIX
argument_list|,
name|NS_URI
argument_list|,
name|nsURI
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * set the prefix of this valuetype 	 *  	 * @param prefix 	 *            The value to set 	 */
specifier|public
name|void
name|setPrefixValue
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
name|content
operator|.
name|addProperty
argument_list|(
operator|new
name|TextType
argument_list|(
name|metadata
argument_list|,
literal|null
argument_list|,
name|PDFATYPEPREFIX
argument_list|,
name|PREFIX
argument_list|,
name|prefix
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * set the description of this property 	 *  	 * @param desc 	 *            The value to set 	 */
specifier|public
name|void
name|setDescriptionValue
parameter_list|(
name|String
name|desc
parameter_list|)
block|{
name|content
operator|.
name|addProperty
argument_list|(
operator|new
name|TextType
argument_list|(
name|metadata
argument_list|,
literal|null
argument_list|,
name|PDFATYPEPREFIX
argument_list|,
name|DESCRIPTION
argument_list|,
name|desc
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Get value type property value as a string 	 *  	 * @param qualifiedName 	 *            the Name of property wanted 	 * @return value of the property wanted which describe this property 	 */
specifier|private
name|String
name|getValueTypeProperty
parameter_list|(
name|String
name|qualifiedName
parameter_list|)
block|{
name|Iterator
argument_list|<
name|AbstractField
argument_list|>
name|it
init|=
name|content
operator|.
name|getAllProperties
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|AbstractField
name|tmp
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|tmp
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|tmp
operator|.
name|getQualifiedName
argument_list|()
operator|.
name|equals
argument_list|(
name|qualifiedName
argument_list|)
condition|)
block|{
return|return
operator|(
operator|(
name|TextType
operator|)
name|tmp
operator|)
operator|.
name|getStringValue
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/** 	 * Return the current defined type name (in a string) 	 *  	 * @return the type value (so the name) given to this valuetype 	 */
specifier|public
name|String
name|getTypeNameValue
parameter_list|()
block|{
return|return
name|getValueTypeProperty
argument_list|(
name|PDFATYPEPREFIXSEP
operator|+
name|TYPE
argument_list|)
return|;
block|}
comment|/** 	 * Return the current nsURI (in a string) 	 *  	 * @return the namespace URI value 	 */
specifier|public
name|String
name|getNamespaceURIValue
parameter_list|()
block|{
return|return
name|getValueTypeProperty
argument_list|(
name|PDFATYPEPREFIXSEP
operator|+
name|NS_URI
argument_list|)
return|;
block|}
comment|/** 	 * Return the current prefix (in a string) 	 *  	 * @return The prefix value 	 */
specifier|public
name|String
name|getPrefixValue
parameter_list|()
block|{
return|return
name|getValueTypeProperty
argument_list|(
name|PDFATYPEPREFIXSEP
operator|+
name|PREFIX
argument_list|)
return|;
block|}
comment|/** 	 * Return the description of this valueType(in a string) 	 *  	 * @return the description value 	 */
specifier|public
name|String
name|getDescriptionValue
parameter_list|()
block|{
return|return
name|getValueTypeProperty
argument_list|(
name|PDFATYPEPREFIXSEP
operator|+
name|DESCRIPTION
argument_list|)
return|;
block|}
comment|/** 	 * Get value type property value as a TextType 	 *  	 * @param qualifiedName 	 *            the name of the property wanted 	 * @return the property wanted 	 */
specifier|private
name|TextType
name|getTypeProperty
parameter_list|(
name|String
name|qualifiedName
parameter_list|)
block|{
name|Iterator
argument_list|<
name|AbstractField
argument_list|>
name|it
init|=
name|content
operator|.
name|getAllProperties
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|AbstractField
name|tmp
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|tmp
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|tmp
operator|.
name|getQualifiedName
argument_list|()
operator|.
name|equals
argument_list|(
name|qualifiedName
argument_list|)
condition|)
block|{
return|return
operator|(
name|TextType
operator|)
name|tmp
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/** 	 * Return the property corresponding to the type name definition 	 *  	 * @return the type property (or the property that define the name of this 	 *         valuetype) 	 */
specifier|public
name|TextType
name|getTypeName
parameter_list|()
block|{
return|return
name|getTypeProperty
argument_list|(
name|PDFATYPEPREFIXSEP
operator|+
name|TYPE
argument_list|)
return|;
block|}
comment|/** 	 * Return the property corresponding to the Type namespaceURI definition 	 *  	 * @return the namespace URI property 	 */
specifier|public
name|TextType
name|getNamespaceURI
parameter_list|()
block|{
return|return
name|getTypeProperty
argument_list|(
name|PDFATYPEPREFIXSEP
operator|+
name|NS_URI
argument_list|)
return|;
block|}
comment|/** 	 * Return the property corresponding to the type prefix definition 	 *  	 * @return the prefix property 	 */
specifier|public
name|TextType
name|getPrefix
parameter_list|()
block|{
return|return
name|getTypeProperty
argument_list|(
name|PDFATYPEPREFIXSEP
operator|+
name|PREFIX
argument_list|)
return|;
block|}
comment|/** 	 * Return the property corresponding to the type description definition 	 *  	 * @return the description property 	 */
specifier|public
name|TextType
name|getDescription
parameter_list|()
block|{
return|return
name|getTypeProperty
argument_list|(
name|PDFATYPEPREFIXSEP
operator|+
name|DESCRIPTION
argument_list|)
return|;
block|}
comment|/** 	 * Give all Fields description embedded in this valuetype 	 *  	 * @return a list of Field defined for this valuetype 	 */
specifier|public
name|List
argument_list|<
name|PDFAFieldDescription
argument_list|>
name|getFields
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|fields
operator|.
name|fields
argument_list|)
return|;
block|}
comment|/** 	 * Add a field description to this valuetype 	 *  	 * @param name 	 *            name of field 	 * @param valueType 	 *            valueType of field 	 * @param description 	 *            description of field 	 * @return the Field property created 	 */
specifier|public
name|PDFAFieldDescription
name|addField
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|valueType
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|PDFAFieldDescription
name|field
init|=
operator|new
name|PDFAFieldDescription
argument_list|(
name|metadata
argument_list|)
decl_stmt|;
name|field
operator|.
name|setNameValue
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|field
operator|.
name|setValueTypeValue
argument_list|(
name|valueType
argument_list|)
expr_stmt|;
name|field
operator|.
name|setDescriptionValue
argument_list|(
name|description
argument_list|)
expr_stmt|;
name|fields
operator|.
name|addFieldDescription
argument_list|(
name|field
argument_list|)
expr_stmt|;
return|return
name|field
return|;
block|}
comment|/** 	 * Add a Structured Field to this valueType 	 *  	 * @param field 	 *            the field to add to this valueType 	 */
specifier|public
name|void
name|addField
parameter_list|(
name|PDFAFieldDescription
name|field
parameter_list|)
block|{
name|fields
operator|.
name|addFieldDescription
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Get Dom Element for xml/rdf serialization 	 *  	 * @return the DOM element 	 */
specifier|public
name|Element
name|getElement
parameter_list|()
block|{
return|return
name|content
operator|.
name|getElement
argument_list|()
return|;
block|}
specifier|public
name|ComplexPropertyContainer
name|getContent
parameter_list|()
block|{
return|return
name|content
return|;
block|}
comment|/** 	 * Container of Field Description 	 *  	 * @author a183132 	 *  	 */
specifier|public
class|class
name|FieldDescriptionContainer
implements|implements
name|Elementable
block|{
specifier|private
name|Element
name|element
decl_stmt|,
name|content
decl_stmt|;
specifier|private
name|List
argument_list|<
name|PDFAFieldDescription
argument_list|>
name|fields
decl_stmt|;
comment|/** 		 *  		 * PDF/A Field Description Container constructor 		 */
specifier|public
name|FieldDescriptionContainer
parameter_list|()
block|{
name|element
operator|=
name|metadata
operator|.
name|getFuturOwner
argument_list|()
operator|.
name|createElement
argument_list|(
name|PDFAExtensionSchema
operator|.
name|PDFATYPESEP
operator|+
name|FIELD
argument_list|)
expr_stmt|;
name|content
operator|=
name|metadata
operator|.
name|getFuturOwner
argument_list|()
operator|.
name|createElement
argument_list|(
literal|"rdf:Seq"
argument_list|)
expr_stmt|;
name|element
operator|.
name|appendChild
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|fields
operator|=
operator|new
name|ArrayList
argument_list|<
name|PDFAFieldDescription
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/** 		 * Add a PDF/A Field Description to the current structure 		 *  		 * @param obj 		 *            the field to add 		 */
specifier|public
name|void
name|addFieldDescription
parameter_list|(
name|PDFAFieldDescription
name|obj
parameter_list|)
block|{
if|if
condition|(
name|containsFieldDescription
argument_list|(
name|obj
argument_list|)
condition|)
block|{
name|removeFieldDescription
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
name|fields
operator|.
name|add
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|content
operator|.
name|appendChild
argument_list|(
name|obj
operator|.
name|getContent
argument_list|()
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** 		 * access to all PDF/A Field Descriptions 		 *  		 * @return an Iterator on all PDF/A Field Descriptions declared 		 */
specifier|public
name|Iterator
argument_list|<
name|PDFAFieldDescription
argument_list|>
name|getAllFieldDescription
parameter_list|()
block|{
return|return
name|fields
operator|.
name|iterator
argument_list|()
return|;
block|}
comment|/** 		 * Check if two PDF/A Field Descriptions are similar 		 *  		 * @param prop1 		 *            the first PDF/A Field Description 		 * @param prop2 		 *            the second PDF/A Field Description 		 * @return comparison result 		 */
specifier|public
name|boolean
name|isSameFieldDescription
parameter_list|(
name|PDFAFieldDescription
name|prop1
parameter_list|,
name|PDFAFieldDescription
name|prop2
parameter_list|)
block|{
if|if
condition|(
name|prop1
operator|.
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|prop2
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|prop1
operator|.
name|getContent
argument_list|()
operator|.
name|getElement
argument_list|()
operator|.
name|getTextContent
argument_list|()
operator|.
name|equals
argument_list|(
name|prop2
operator|.
name|getContent
argument_list|()
operator|.
name|getElement
argument_list|()
operator|.
name|getTextContent
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/** 		 * Check if a specified PDF/A Field Description is embedded 		 *  		 * @param field 		 *            PDF/A field Description 		 * @return result 		 */
specifier|public
name|boolean
name|containsFieldDescription
parameter_list|(
name|PDFAFieldDescription
name|field
parameter_list|)
block|{
name|Iterator
argument_list|<
name|PDFAFieldDescription
argument_list|>
name|it
init|=
name|getAllFieldDescription
argument_list|()
decl_stmt|;
name|PDFAFieldDescription
name|tmp
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|tmp
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|isSameFieldDescription
argument_list|(
name|tmp
argument_list|,
name|field
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/** 		 * Remove a PDF/A Field description 		 *  		 * @param field 		 *            the PDF/A Field Description 		 */
specifier|public
name|void
name|removeFieldDescription
parameter_list|(
name|PDFAFieldDescription
name|field
parameter_list|)
block|{
if|if
condition|(
name|containsFieldDescription
argument_list|(
name|field
argument_list|)
condition|)
block|{
name|fields
operator|.
name|remove
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|content
operator|.
name|removeChild
argument_list|(
name|field
operator|.
name|getContent
argument_list|()
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 		 * Get Dom Element for xml/rdf serialization 		 *  		 * @return the DOM element 		 */
specifier|public
name|Element
name|getElement
parameter_list|()
block|{
return|return
name|element
return|;
block|}
block|}
block|}
end_class

end_unit

