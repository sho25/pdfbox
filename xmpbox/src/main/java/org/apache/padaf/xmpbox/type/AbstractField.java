begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|type
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|XMPMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_comment
comment|/**  * Astract Object representation of a XMP 'field' (-> Properties and specific  * Schemas)  *   * @author a183132  *   */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractField
implements|implements
name|Elementable
block|{
comment|/** 	 * ALL PROPERTIES MUST NOT BE USED MORE THAN ONE TIME BECAUSE THE SAME 	 * ELEMENT CANNOT BE MORE THAN ONE TIME IN THE SAME DOM DOCUMENT (if you 	 * choose to use the same property in different places in the same document, 	 * the element associated will not appear) 	 */
specifier|protected
name|Element
name|element
decl_stmt|;
specifier|protected
name|Document
name|parent
decl_stmt|;
specifier|private
name|String
name|namespaceURI
decl_stmt|,
name|prefix
decl_stmt|,
name|propertyName
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Attribute
argument_list|>
name|attributes
decl_stmt|;
comment|/** 	 * Constructor of a XMP field without namespaceURI 	 *  	 * @param metadata 	 *            The metadata to attach to this field 	 * @param prefix 	 *            the prefix to set for this field 	 * @param propertyName 	 *            the local name to set for this field 	 */
specifier|public
name|AbstractField
parameter_list|(
name|XMPMetadata
name|metadata
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|propertyName
parameter_list|)
block|{
name|String
name|qualifiedName
decl_stmt|;
name|this
operator|.
name|prefix
operator|=
name|prefix
expr_stmt|;
name|qualifiedName
operator|=
name|prefix
operator|+
literal|":"
operator|+
name|propertyName
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|metadata
operator|.
name|getFuturOwner
argument_list|()
expr_stmt|;
name|this
operator|.
name|propertyName
operator|=
name|propertyName
expr_stmt|;
name|element
operator|=
name|parent
operator|.
name|createElement
argument_list|(
name|qualifiedName
argument_list|)
expr_stmt|;
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Attribute
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Constructor of a XMP Field 	 *  	 * @param metadata 	 *            The metadata to attach to this field 	 * @param namespaceURI 	 *            the namespace URI 	 * @param prefix 	 *            the prefix to set for this field 	 * @param propertyName 	 *            the local name to set for this field 	 */
specifier|public
name|AbstractField
parameter_list|(
name|XMPMetadata
name|metadata
parameter_list|,
name|String
name|namespaceURI
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|propertyName
parameter_list|)
block|{
name|String
name|qualifiedName
decl_stmt|;
name|this
operator|.
name|prefix
operator|=
name|prefix
expr_stmt|;
name|qualifiedName
operator|=
name|prefix
operator|+
literal|":"
operator|+
name|propertyName
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|metadata
operator|.
name|getFuturOwner
argument_list|()
expr_stmt|;
name|this
operator|.
name|namespaceURI
operator|=
name|namespaceURI
expr_stmt|;
name|this
operator|.
name|propertyName
operator|=
name|propertyName
expr_stmt|;
name|element
operator|=
name|parent
operator|.
name|createElementNS
argument_list|(
name|namespaceURI
argument_list|,
name|qualifiedName
argument_list|)
expr_stmt|;
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Attribute
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Get the DOM element for rdf/xml serialization 	 *  	 * @return The DOM Element 	 */
specifier|public
name|Element
name|getElement
parameter_list|()
block|{
return|return
name|element
return|;
block|}
comment|/** 	 * Get the namespace URI of this entity 	 *  	 * @return the namespace URI 	 */
specifier|public
name|String
name|getNamespace
parameter_list|()
block|{
return|return
name|namespaceURI
return|;
block|}
comment|/** 	 * Get the prefix of this entity 	 *  	 * @return the prefix specified 	 */
specifier|public
name|String
name|getPrefix
parameter_list|()
block|{
return|return
name|prefix
return|;
block|}
comment|/** 	 * Get the qualified Name of this entity (prefix+localName) 	 *  	 * @return the full qualified name 	 */
specifier|public
name|String
name|getQualifiedName
parameter_list|()
block|{
return|return
name|prefix
operator|+
literal|":"
operator|+
name|propertyName
return|;
block|}
comment|/** 	 * Get the propertyName (or localName) 	 *  	 * @return the local Name 	 */
specifier|public
name|String
name|getPropertyName
parameter_list|()
block|{
return|return
name|propertyName
return|;
block|}
comment|/** 	 * Set a new attribute for this entity 	 *  	 * @param value 	 *            The Attribute property to add 	 */
specifier|public
name|void
name|setAttribute
parameter_list|(
name|Attribute
name|value
parameter_list|)
block|{
if|if
condition|(
name|attributes
operator|.
name|containsKey
argument_list|(
name|value
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
condition|)
block|{
comment|// if same name in element, attribute will be replaced
name|attributes
operator|.
name|remove
argument_list|(
name|value
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|.
name|getNamespace
argument_list|()
operator|==
literal|null
condition|)
block|{
name|attributes
operator|.
name|put
argument_list|(
name|value
operator|.
name|getQualifiedName
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|element
operator|.
name|setAttribute
argument_list|(
name|value
operator|.
name|getQualifiedName
argument_list|()
argument_list|,
name|value
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|attributes
operator|.
name|put
argument_list|(
name|value
operator|.
name|getQualifiedName
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|element
operator|.
name|setAttributeNS
argument_list|(
name|value
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|value
operator|.
name|getQualifiedName
argument_list|()
argument_list|,
name|value
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Check if an attribute is declared for this entity 	 *  	 * @param qualifiedName 	 *            the full qualified name of the attribute concerned 	 * @return true if attribute is present 	 */
specifier|public
name|boolean
name|containsAttribute
parameter_list|(
name|String
name|qualifiedName
parameter_list|)
block|{
return|return
name|attributes
operator|.
name|containsKey
argument_list|(
name|qualifiedName
argument_list|)
return|;
block|}
comment|/** 	 * Get an attribute with its name in this entity 	 *  	 * @param qualifiedName 	 *            the full qualified name of the attribute wanted 	 * @return The attribute property 	 */
specifier|public
name|Attribute
name|getAttribute
parameter_list|(
name|String
name|qualifiedName
parameter_list|)
block|{
return|return
name|attributes
operator|.
name|get
argument_list|(
name|qualifiedName
argument_list|)
return|;
block|}
comment|/** 	 * Get attributes list defined for this entity 	 *  	 * @return Attributes list 	 */
specifier|public
name|List
argument_list|<
name|Attribute
argument_list|>
name|getAllAttributes
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|Attribute
argument_list|>
argument_list|(
name|attributes
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
comment|/** 	 * Remove an attribute of this entity 	 *  	 * @param qualifiedName 	 *            the full qualified name of the attribute wanted 	 */
specifier|public
name|void
name|removeAttribute
parameter_list|(
name|String
name|qualifiedName
parameter_list|)
block|{
if|if
condition|(
name|containsAttribute
argument_list|(
name|qualifiedName
argument_list|)
condition|)
block|{
name|element
operator|.
name|removeAttribute
argument_list|(
name|qualifiedName
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|remove
argument_list|(
name|qualifiedName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

