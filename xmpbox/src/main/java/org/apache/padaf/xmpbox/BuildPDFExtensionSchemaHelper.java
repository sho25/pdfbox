begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|parser
operator|.
name|XMLPropertiesDescriptionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|parser
operator|.
name|XMLValueTypeDescriptionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|PDFAExtensionSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|PropertyExtensionDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|SchemaDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|SchemaExtensionDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|ValueTypeDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|XMPSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|BadFieldValueException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|PropertyDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|PropertyType
import|;
end_import

begin_comment
comment|/**  *   * This class help you to build a PDF/A extension schema description thanks to  * annotation present in annotations included in the schema class representation  *   * @author a183132  *   */
end_comment

begin_class
specifier|public
class|class
name|BuildPDFExtensionSchemaHelper
block|{
comment|/** 	 * According to check-style, Utility classes should not have a public or 	 * default constructor. 	 */
specifier|protected
name|BuildPDFExtensionSchemaHelper
parameter_list|()
block|{ 	}
empty_stmt|;
comment|/** 	 * Build automatically Schema description with annotations and data present 	 * in schema class and include it in the PDF/A Extension Schema NOTE : If 	 * metadata given not contains a PDF/A Extension Schema, this function add 	 * one automatically. 	 *  	 * @param metadata 	 *            The concerned metadata in which include Schema Description 	 *            inside the PDF/A Extension Schema 	 * @param schema 	 *            The specific schema concerned by the description building 	 * @throws BuildPDFAExtensionSchemaDescriptionException 	 *             When failed to load or treat data from XML Descriptions files 	 *             or in Schema Class 	 */
specifier|public
specifier|static
name|void
name|includePDFAExtensionDefinition
parameter_list|(
name|XMPMetadata
name|metadata
parameter_list|,
name|XMPSchema
name|schema
parameter_list|)
throws|throws
name|BuildPDFAExtensionSchemaDescriptionException
block|{
name|PDFAExtensionSchema
name|ext
init|=
name|metadata
operator|.
name|getPDFExtensionSchema
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|XMPSchema
argument_list|>
name|classSchem
init|=
name|schema
operator|.
name|getClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|ext
operator|==
literal|null
condition|)
block|{
name|ext
operator|=
name|metadata
operator|.
name|createAndAddPDFAExtensionSchemaWithDefaultNS
argument_list|()
expr_stmt|;
block|}
name|Field
index|[]
name|fields
decl_stmt|;
name|fields
operator|=
name|classSchem
operator|.
name|getFields
argument_list|()
expr_stmt|;
name|SchemaExtensionDefinition
name|schemDefAnnot
decl_stmt|;
name|PropertyExtensionDefinition
name|propExtDefAnnot
decl_stmt|;
name|PropertyType
name|propTypeAnnot
decl_stmt|;
name|String
name|propName
init|=
literal|null
decl_stmt|;
name|String
name|propDesc
decl_stmt|;
name|List
argument_list|<
name|PropertyDescription
argument_list|>
name|xmlPropDesc
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|classSchem
operator|.
name|isAnnotationPresent
argument_list|(
name|SchemaExtensionDefinition
operator|.
name|class
argument_list|)
condition|)
block|{
name|schemDefAnnot
operator|=
name|classSchem
operator|.
name|getAnnotation
argument_list|(
name|SchemaExtensionDefinition
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Try to find and load XML Properties Descriptions file path
if|if
condition|(
operator|!
name|schemDefAnnot
operator|.
name|property_descriptions
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|XMLPropertiesDescriptionManager
name|propManag
init|=
operator|new
name|XMLPropertiesDescriptionManager
argument_list|()
decl_stmt|;
name|propManag
operator|.
name|loadListFromXML
argument_list|(
name|classSchem
argument_list|,
name|schemDefAnnot
operator|.
name|property_descriptions
argument_list|()
argument_list|)
expr_stmt|;
name|xmlPropDesc
operator|=
name|propManag
operator|.
name|getPropertiesDescriptionList
argument_list|()
expr_stmt|;
block|}
name|SchemaDescription
name|desc
init|=
name|ext
operator|.
name|createSchemaDescription
argument_list|()
decl_stmt|;
name|desc
operator|.
name|setSchemaValue
argument_list|(
name|schemDefAnnot
operator|.
name|schema
argument_list|()
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setNameSpaceURIValue
argument_list|(
name|schema
operator|.
name|getNamespaceValue
argument_list|()
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setPrefixValue
argument_list|(
name|schema
operator|.
name|getPrefix
argument_list|()
argument_list|)
expr_stmt|;
name|ext
operator|.
name|addSchemaDescription
argument_list|(
name|desc
argument_list|)
expr_stmt|;
comment|// Try to find and load XML ValueType Description file path
if|if
condition|(
operator|!
name|schemDefAnnot
operator|.
name|valueType_description
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|XMLValueTypeDescriptionManager
name|valTypesManag
init|=
operator|new
name|XMLValueTypeDescriptionManager
argument_list|()
decl_stmt|;
name|valTypesManag
operator|.
name|loadListFromXML
argument_list|(
name|classSchem
argument_list|,
name|schemDefAnnot
operator|.
name|valueType_description
argument_list|()
argument_list|)
expr_stmt|;
name|addValueTypesToSchem
argument_list|(
name|metadata
argument_list|,
name|desc
argument_list|,
name|valTypesManag
operator|.
name|getValueTypesDescriptionList
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Field
name|field
range|:
name|fields
control|)
block|{
if|if
condition|(
name|field
operator|.
name|isAnnotationPresent
argument_list|(
name|PropertyExtensionDefinition
operator|.
name|class
argument_list|)
operator|&&
name|field
operator|.
name|isAnnotationPresent
argument_list|(
name|PropertyType
operator|.
name|class
argument_list|)
condition|)
block|{
try|try
block|{
name|propName
operator|=
operator|(
name|String
operator|)
name|field
operator|.
name|get
argument_list|(
name|propName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|propertyDescriptionError
argument_list|(
name|classSchem
operator|.
name|getName
argument_list|()
argument_list|,
name|field
operator|.
name|getName
argument_list|()
argument_list|,
literal|"Couldn't read content, please check accessibility and declaration of field associated"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|propExtDefAnnot
operator|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|PropertyExtensionDefinition
operator|.
name|class
argument_list|)
expr_stmt|;
name|propTypeAnnot
operator|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|PropertyType
operator|.
name|class
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|xmlPropDesc
operator|!=
literal|null
condition|)
block|{
name|Iterator
argument_list|<
name|PropertyDescription
argument_list|>
name|it
init|=
name|xmlPropDesc
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|PropertyDescription
name|tmp
decl_stmt|;
name|propDesc
operator|=
literal|null
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
operator|&&
operator|(
name|propDesc
operator|==
literal|null
operator|)
condition|)
block|{
name|tmp
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|tmp
operator|.
name|getPropertyName
argument_list|()
operator|.
name|equals
argument_list|(
name|propName
argument_list|)
condition|)
block|{
name|propDesc
operator|=
name|tmp
operator|.
name|getDescription
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|propDesc
operator|=
name|propExtDefAnnot
operator|.
name|propertyDescription
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|propDesc
operator|==
literal|null
operator|)
operator|||
name|propDesc
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|propDesc
operator|=
literal|"Not documented description"
expr_stmt|;
block|}
name|desc
operator|.
name|addProperty
argument_list|(
name|propName
argument_list|,
name|propTypeAnnot
operator|.
name|propertyType
argument_list|()
argument_list|,
name|propExtDefAnnot
operator|.
name|propertyCategory
argument_list|()
argument_list|,
name|propDesc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadFieldValueException
name|e
parameter_list|)
block|{
throw|throw
name|propertyDescriptionError
argument_list|(
name|classSchem
operator|.
name|getName
argument_list|()
argument_list|,
name|propName
argument_list|,
literal|"Wrong value for property Category"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
else|else
block|{
throw|throw
name|schemaDescriptionError
argument_list|(
name|classSchem
operator|.
name|getName
argument_list|()
argument_list|,
literal|"Couldn't find SchemaExtensionDefinition annotation."
argument_list|)
throw|;
block|}
comment|/* 		 * try { SaveMetadataHelper.serialize(ext, System.out); } catch 		 * (TransformException e) { e.printStackTrace(); } 		 */
block|}
comment|/** 	 * Add Value Types description which must be associated to the Schema 	 * Description 	 *  	 * @param metadata 	 *            Metadata concerned by this Schema Declaration 	 * @param desc 	 *            The Description Schema under construction 	 * @param vTypes 	 *            The Value Types list which must be added 	 */
specifier|protected
specifier|static
name|void
name|addValueTypesToSchem
parameter_list|(
name|XMPMetadata
name|metadata
parameter_list|,
name|SchemaDescription
name|desc
parameter_list|,
name|List
argument_list|<
name|ValueTypeDescription
argument_list|>
name|vTypes
parameter_list|)
block|{
for|for
control|(
name|ValueTypeDescription
name|valueTypeDescription
range|:
name|vTypes
control|)
block|{
name|desc
operator|.
name|addValueType
argument_list|(
name|valueTypeDescription
operator|.
name|getType
argument_list|()
argument_list|,
name|valueTypeDescription
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|valueTypeDescription
operator|.
name|getPrefix
argument_list|()
argument_list|,
name|valueTypeDescription
operator|.
name|getDescription
argument_list|()
argument_list|,
name|valueTypeDescription
operator|.
name|getPDFAFieldsAssocied
argument_list|(
name|metadata
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * An helper to build a formated error message for schema Description errors 	 *  	 * @param classSchem 	 *            Name of schema where errors are occured 	 * @param details 	 *            Error details 	 * @return Exception with formated error message 	 */
specifier|protected
specifier|static
name|BuildPDFAExtensionSchemaDescriptionException
name|schemaDescriptionError
parameter_list|(
name|String
name|classSchem
parameter_list|,
name|String
name|details
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|80
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Error while building PDF/A Extension Schema description for '"
argument_list|)
operator|.
name|append
argument_list|(
name|classSchem
argument_list|)
operator|.
name|append
argument_list|(
literal|"' schema : "
argument_list|)
operator|.
name|append
argument_list|(
name|details
argument_list|)
expr_stmt|;
return|return
operator|new
name|BuildPDFAExtensionSchemaDescriptionException
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/** 	 * An helper to build a formated error message for properties Description 	 * errors 	 *  	 * @param classSchem 	 *            Name of schema which include the bad property description 	 * @param propName 	 *            Name of property where a problem has occured 	 * @param details 	 *            Error details 	 * @param e 	 *            Original thrown Exception 	 * @return Exception with formated error message 	 */
specifier|protected
specifier|static
name|BuildPDFAExtensionSchemaDescriptionException
name|propertyDescriptionError
parameter_list|(
name|String
name|classSchem
parameter_list|,
name|String
name|propName
parameter_list|,
name|String
name|details
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|80
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Error while building PDF/A Extension Schema description for '"
argument_list|)
operator|.
name|append
argument_list|(
name|classSchem
argument_list|)
operator|.
name|append
argument_list|(
literal|"' schema, Failed to treat '"
argument_list|)
operator|.
name|append
argument_list|(
name|propName
argument_list|)
operator|.
name|append
argument_list|(
literal|"' property : "
argument_list|)
operator|.
name|append
argument_list|(
name|details
argument_list|)
expr_stmt|;
return|return
operator|new
name|BuildPDFAExtensionSchemaDescriptionException
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
return|;
block|}
block|}
end_class

end_unit

