begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|XMPMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|AdobePDFSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|DublinCoreSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|PDFAExtensionSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|PDFAFieldDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|PDFAIdentificationSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|PDFAPropertyDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|PDFAValueTypeDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|PhotoshopSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|PropertyAttributesAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|SchemaDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|XMPBasicSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|XMPMediaManagementSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|XMPRightsManagementSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|XMPSchema
import|;
end_import

begin_comment
comment|/**  * Retrieve information about schemas  *   * @author a183132  *   */
end_comment

begin_class
specifier|public
class|class
name|NSMapping
block|{
specifier|public
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|BASIC_TYPES
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|COMPLEX_BASIC_TYPES
decl_stmt|;
static|static
block|{
name|BASIC_TYPES
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|BASIC_TYPES
operator|.
name|add
argument_list|(
literal|"Text"
argument_list|)
expr_stmt|;
name|BASIC_TYPES
operator|.
name|add
argument_list|(
literal|"ProperName"
argument_list|)
expr_stmt|;
name|BASIC_TYPES
operator|.
name|add
argument_list|(
literal|"Integer"
argument_list|)
expr_stmt|;
name|BASIC_TYPES
operator|.
name|add
argument_list|(
literal|"Boolean"
argument_list|)
expr_stmt|;
name|BASIC_TYPES
operator|.
name|add
argument_list|(
literal|"Date"
argument_list|)
expr_stmt|;
name|BASIC_TYPES
operator|.
name|add
argument_list|(
literal|"URI"
argument_list|)
expr_stmt|;
name|BASIC_TYPES
operator|.
name|add
argument_list|(
literal|"URL"
argument_list|)
expr_stmt|;
name|BASIC_TYPES
operator|.
name|add
argument_list|(
literal|"bag Text"
argument_list|)
expr_stmt|;
name|BASIC_TYPES
operator|.
name|add
argument_list|(
literal|"bag ProperName"
argument_list|)
expr_stmt|;
name|BASIC_TYPES
operator|.
name|add
argument_list|(
literal|"bag Job"
argument_list|)
expr_stmt|;
name|BASIC_TYPES
operator|.
name|add
argument_list|(
literal|"bag Xpath"
argument_list|)
expr_stmt|;
name|BASIC_TYPES
operator|.
name|add
argument_list|(
literal|"seq Text"
argument_list|)
expr_stmt|;
name|BASIC_TYPES
operator|.
name|add
argument_list|(
literal|"seq Field"
argument_list|)
expr_stmt|;
name|BASIC_TYPES
operator|.
name|add
argument_list|(
literal|"seq Date"
argument_list|)
expr_stmt|;
name|BASIC_TYPES
operator|.
name|add
argument_list|(
literal|"Lang Alt"
argument_list|)
expr_stmt|;
name|COMPLEX_BASIC_TYPES
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|COMPLEX_BASIC_TYPES
operator|.
name|put
argument_list|(
literal|"http://ns.adobe.com/xap/1.0/g/img/"
argument_list|,
literal|"Thumbnail"
argument_list|)
expr_stmt|;
name|COMPLEX_BASIC_TYPES
operator|.
name|put
argument_list|(
name|PhotoshopSchema
operator|.
name|PHOTOSHOPURI
argument_list|,
literal|"TextLayers"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|XMPSchemaFactory
argument_list|>
name|nsMaps
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|complexBasicTypesDeclarationEntireXMPLevel
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|complexBasicTypesDeclarationSchemaLevel
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|complexBasicTypesDeclarationPropertyLevel
decl_stmt|;
comment|/** 	 * Constructor of the NameSpace mapping 	 *  	 * @throws XmpSchemaException 	 *             When could not read a property data in a Schema Class given 	 */
specifier|public
name|NSMapping
parameter_list|()
throws|throws
name|XmpSchemaException
block|{
name|nsMaps
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|XMPSchemaFactory
argument_list|>
argument_list|()
expr_stmt|;
name|complexBasicTypesDeclarationEntireXMPLevel
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|complexBasicTypesDeclarationSchemaLevel
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|complexBasicTypesDeclarationPropertyLevel
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Import an NSMapping content. 	 * @param imp 	 */
specifier|public
name|void
name|importNSMapping
parameter_list|(
name|NSMapping
name|imp
parameter_list|)
throws|throws
name|XmpSchemaException
block|{
name|mergeNSMap
argument_list|(
name|imp
operator|.
name|nsMaps
argument_list|)
expr_stmt|;
name|mergeComplexBasicTypesDeclarationEntireXMPLevel
argument_list|(
name|imp
operator|.
name|complexBasicTypesDeclarationEntireXMPLevel
argument_list|)
expr_stmt|;
name|mergeComplexBasicTypesDeclarationSchemaLevel
argument_list|(
name|imp
operator|.
name|complexBasicTypesDeclarationSchemaLevel
argument_list|)
expr_stmt|;
name|mergeComplexBasicTypesDeclarationPropertyLevel
argument_list|(
name|imp
operator|.
name|complexBasicTypesDeclarationPropertyLevel
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|mergeNSMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|XMPSchemaFactory
argument_list|>
name|map
parameter_list|)
throws|throws
name|XmpSchemaException
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|XMPSchemaFactory
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|this
operator|.
name|nsMaps
operator|.
name|containsKey
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|this
operator|.
name|nsMaps
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|importXMPSchemaFactory
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|nsMaps
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|mergeComplexBasicTypesDeclarationEntireXMPLevel
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|external
parameter_list|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|external
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|complexBasicTypesDeclarationEntireXMPLevel
operator|.
name|containsKey
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|complexBasicTypesDeclarationEntireXMPLevel
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|mergeComplexBasicTypesDeclarationSchemaLevel
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|external
parameter_list|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|external
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|complexBasicTypesDeclarationSchemaLevel
operator|.
name|containsKey
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|complexBasicTypesDeclarationSchemaLevel
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|mergeComplexBasicTypesDeclarationPropertyLevel
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|external
parameter_list|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|external
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|complexBasicTypesDeclarationPropertyLevel
operator|.
name|containsKey
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|complexBasicTypesDeclarationPropertyLevel
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** 	 * Add mapping of common schemas 	 *  	 * @throws XmpSchemaException 	 *             When could not read a property data in a Schema Class given 	 */
specifier|private
name|void
name|init
parameter_list|()
throws|throws
name|XmpSchemaException
block|{
name|addNameSpace
argument_list|(
literal|"http://ns.adobe.com/xap/1.0/"
argument_list|,
name|XMPBasicSchema
operator|.
name|class
argument_list|)
expr_stmt|;
name|addNameSpace
argument_list|(
literal|"http://purl.org/dc/elements/1.1/"
argument_list|,
name|DublinCoreSchema
operator|.
name|class
argument_list|)
expr_stmt|;
name|addNameSpace
argument_list|(
literal|"http://www.aiim.org/pdfa/ns/extension/"
argument_list|,
name|PDFAExtensionSchema
operator|.
name|class
argument_list|)
expr_stmt|;
name|addNameSpace
argument_list|(
literal|"http://ns.adobe.com/xap/1.0/mm/"
argument_list|,
name|XMPMediaManagementSchema
operator|.
name|class
argument_list|)
expr_stmt|;
name|addNameSpace
argument_list|(
literal|"http://ns.adobe.com/pdf/1.3/"
argument_list|,
name|AdobePDFSchema
operator|.
name|class
argument_list|)
expr_stmt|;
name|addNameSpace
argument_list|(
literal|"http://www.aiim.org/pdfa/ns/id/"
argument_list|,
name|PDFAIdentificationSchema
operator|.
name|class
argument_list|)
expr_stmt|;
name|addNameSpace
argument_list|(
literal|"http://ns.adobe.com/xap/1.0/rights/"
argument_list|,
name|XMPRightsManagementSchema
operator|.
name|class
argument_list|)
expr_stmt|;
name|addNameSpace
argument_list|(
name|PhotoshopSchema
operator|.
name|PHOTOSHOPURI
argument_list|,
name|PhotoshopSchema
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Add a namespace declaration and Schema factory associated 	 *  	 * @param ns 	 *            the Namespace URI 	 * @param classSchem 	 *            The class representation of the schema linked to the namespace 	 * @throws XmpSchemaException 	 *             When could not read property name in Schema Class given 	 */
specifier|protected
name|void
name|addNameSpace
parameter_list|(
name|String
name|ns
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|XMPSchema
argument_list|>
name|classSchem
parameter_list|)
throws|throws
name|XmpSchemaException
block|{
name|nsMaps
operator|.
name|put
argument_list|(
name|ns
argument_list|,
operator|new
name|XMPSchemaFactory
argument_list|(
name|ns
argument_list|,
name|classSchem
argument_list|,
name|initializePropMapping
argument_list|(
name|ns
argument_list|,
name|classSchem
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Initialize the Property Mapping for a given schema 	 *  	 * @param ns 	 *            Namespace URI 	 * @param classSchem 	 *            The class representation of the schema linked to the namespace 	 * @return Construct expected properties types representation 	 * @throws XmpSchemaException 	 *             When could not read property name in field with properties 	 *             annotations 	 */
specifier|private
name|PropMapping
name|initializePropMapping
parameter_list|(
name|String
name|ns
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|XMPSchema
argument_list|>
name|classSchem
parameter_list|)
throws|throws
name|XmpSchemaException
block|{
name|PropertyType
name|propType
decl_stmt|;
name|PropertyAttributesAnnotation
name|propAtt
decl_stmt|;
name|Field
index|[]
name|fields
decl_stmt|;
name|PropMapping
name|propMap
init|=
operator|new
name|PropMapping
argument_list|(
name|ns
argument_list|)
decl_stmt|;
name|fields
operator|=
name|classSchem
operator|.
name|getFields
argument_list|()
expr_stmt|;
name|String
name|propName
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Field
name|field
range|:
name|fields
control|)
block|{
if|if
condition|(
name|field
operator|.
name|isAnnotationPresent
argument_list|(
name|PropertyType
operator|.
name|class
argument_list|)
condition|)
block|{
try|try
block|{
name|propName
operator|=
operator|(
name|String
operator|)
name|field
operator|.
name|get
argument_list|(
name|propName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XmpSchemaException
argument_list|(
literal|"couldn't read one type declaration, please check accessibility and declaration of fields annoted in "
operator|+
name|classSchem
operator|.
name|getName
argument_list|()
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
comment|// System.out.println("nameField:"+propName);
name|propType
operator|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|PropertyType
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// System.out.println("Type '"+propInfo.propertyType()+"' defined for "+propName);
if|if
condition|(
operator|!
name|field
operator|.
name|isAnnotationPresent
argument_list|(
name|PropertyAttributesAnnotation
operator|.
name|class
argument_list|)
condition|)
block|{
name|propMap
operator|.
name|addNewProperty
argument_list|(
name|propName
argument_list|,
name|propType
operator|.
name|propertyType
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// TODO Case where a special annotation is used to specify
comment|// attributes
comment|// NOT IMPLEMENTED YET, JUST TO GIVE A CLUE TO MAKE THIS
name|propAtt
operator|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|PropertyAttributesAnnotation
operator|.
name|class
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|attributes
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|att
range|:
name|propAtt
operator|.
name|expectedAttributes
argument_list|()
control|)
block|{
name|attributes
operator|.
name|add
argument_list|(
name|att
argument_list|)
expr_stmt|;
block|}
name|propMap
operator|.
name|addNewProperty
argument_list|(
name|propName
argument_list|,
name|propType
operator|.
name|propertyType
argument_list|()
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|propMap
return|;
block|}
comment|/** 	 * see if a specific type is known as a basic XMP type 	 *  	 * @param type 	 *            Type to check 	 * @return True if type is a simple basic type 	 */
specifier|private
name|boolean
name|isBasicType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
return|return
name|BASIC_TYPES
operator|.
name|contains
argument_list|(
name|type
argument_list|)
return|;
block|}
comment|/** 	 * Say if a specific namespace is known 	 *  	 * @param namespace 	 *            The namespace URI checked 	 * @return True if namespace URI is known 	 */
specifier|public
name|boolean
name|isContainedNamespace
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
return|return
name|nsMaps
operator|.
name|containsKey
argument_list|(
name|namespace
argument_list|)
return|;
block|}
comment|/** 	 * Give type of specified property in specified schema (given by its 	 * namespaceURI) 	 *  	 * @param namespace 	 *            The namespaceURI to explore 	 * @param prop 	 *            the property Qualified Name 	 * @return Property type declared for namespace specified, null if unknown 	 */
specifier|public
name|String
name|getSpecifiedPropertyType
parameter_list|(
name|String
name|namespace
parameter_list|,
name|QName
name|prop
parameter_list|)
block|{
if|if
condition|(
name|nsMaps
operator|.
name|containsKey
argument_list|(
name|namespace
argument_list|)
condition|)
block|{
return|return
name|nsMaps
operator|.
name|get
argument_list|(
name|namespace
argument_list|)
operator|.
name|getPropertyType
argument_list|(
name|prop
operator|.
name|getLocalPart
argument_list|()
argument_list|)
return|;
block|}
comment|// check if its a complexbasicValueType and if it's has been declared
return|return
name|getComplexBasicValueTypeEffectiveType
argument_list|(
name|prop
operator|.
name|getPrefix
argument_list|()
argument_list|)
return|;
block|}
comment|/** 	 * Check if a non basic value type used is describes in the schema which 	 * inlude a property with a such type 	 *  	 * @param desc 	 *            The schema description associated to the schema which declare 	 *            a property with specific value type 	 * @param definedValueType 	 *            The value type name to find in value types descriptions 	 * @return The description of this specific value type 	 * @throws XmpUnknownValueTypeException 	 *             If no declaration found 	 */
specifier|private
name|PDFAValueTypeDescription
name|findValueTypeDescription
parameter_list|(
name|SchemaDescription
name|desc
parameter_list|,
name|String
name|definedValueType
parameter_list|)
throws|throws
name|XmpUnknownValueTypeException
block|{
name|List
argument_list|<
name|PDFAValueTypeDescription
argument_list|>
name|values
init|=
name|desc
operator|.
name|getValueTypes
argument_list|()
decl_stmt|;
for|for
control|(
name|PDFAValueTypeDescription
name|val
range|:
name|values
control|)
block|{
if|if
condition|(
name|definedValueType
operator|.
name|equals
argument_list|(
name|val
operator|.
name|getTypeNameValue
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|val
return|;
block|}
block|}
throw|throw
operator|new
name|XmpUnknownValueTypeException
argument_list|(
literal|"ValueType '"
operator|+
name|definedValueType
operator|+
literal|"' is unknown. no declaration found in this schema"
argument_list|)
throw|;
block|}
comment|/** 	 * Check if valueType used for a specified property description is known (in 	 * case where it's a normal value type or if a value type which has been 	 * defined in PDF/A Extension schema) 	 *  	 * @param desc 	 *            The schema description associated to the schema which declare 	 *            a property with specific value type 	 * @param definedValueType 	 *            The value type name to find in value types descriptions 	 * @return value type equivalence (value type which can be treat (orginal 	 *         basic value type or specific value type decomposed to find basic 	 *         types) 	 * @throws XmpUnknownValueTypeException 	 *             When Value Type is unknown 	 *  	 */
specifier|private
name|String
name|getValueTypeEquivalence
parameter_list|(
name|SchemaDescription
name|desc
parameter_list|,
name|String
name|definedValueType
parameter_list|)
throws|throws
name|XmpUnknownValueTypeException
block|{
if|if
condition|(
name|isBasicType
argument_list|(
name|definedValueType
argument_list|)
condition|)
block|{
return|return
name|definedValueType
return|;
block|}
name|PDFAValueTypeDescription
name|val
init|=
name|findValueTypeDescription
argument_list|(
name|desc
argument_list|,
name|definedValueType
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|.
name|getFields
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// if fields value are note defined we suppose the property is a
comment|// Text type
return|return
literal|"Text"
return|;
block|}
return|return
literal|"Field"
return|;
block|}
comment|/** 	 * . For a specific valuetype declared in this schema. This method decompose 	 * it if field are present. and add types expected 	 *  	 * @param desc 	 *            The schema description associated to the schema which declare 	 *            a property with specific value type 	 * @param valueType 	 *            valueType to analyze 	 * @param prop 	 *            Expected properties types representation 	 * @throws XmpUnknownValueTypeException 	 *             When a Value Type associated is unknown 	 */
specifier|private
name|void
name|declareAssociatedFieldType
parameter_list|(
name|SchemaDescription
name|desc
parameter_list|,
name|String
name|valueType
parameter_list|,
name|PropMapping
name|prop
parameter_list|)
throws|throws
name|XmpUnknownValueTypeException
block|{
name|PDFAValueTypeDescription
name|val
init|=
name|findValueTypeDescription
argument_list|(
name|desc
argument_list|,
name|valueType
argument_list|)
decl_stmt|;
for|for
control|(
name|PDFAFieldDescription
name|field
range|:
name|val
operator|.
name|getFields
argument_list|()
control|)
block|{
comment|// TODO case where a field call another nspace property ???
name|String
name|fieldType
init|=
name|getValueTypeEquivalence
argument_list|(
name|desc
argument_list|,
name|field
operator|.
name|getValueTypeValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldType
operator|.
name|equals
argument_list|(
literal|"Field"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XmpUnknownValueTypeException
argument_list|(
literal|"ValueType Field reference a valuetype unknown"
argument_list|)
throw|;
block|}
name|prop
operator|.
name|addNewProperty
argument_list|(
name|field
operator|.
name|getNameValue
argument_list|()
argument_list|,
name|fieldType
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Add a new namespace Mapping for specific schema declared in PDF/A 	 * Extension schema 	 *  	 * @param desc 	 *            The schemaDescription associated to the schema 	 * @throws XmpUnknownValueTypeException 	 *             When a Value Type associated is unknown 	 */
specifier|public
name|void
name|setNamespaceDefinition
parameter_list|(
name|SchemaDescription
name|desc
parameter_list|)
throws|throws
name|XmpUnknownValueTypeException
block|{
name|PropMapping
name|propMap
init|=
operator|new
name|PropMapping
argument_list|(
name|desc
operator|.
name|getNameSpaceURI
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PDFAPropertyDescription
argument_list|>
name|props
init|=
name|desc
operator|.
name|getProperties
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|props
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|type
init|=
name|getValueTypeEquivalence
argument_list|(
name|desc
argument_list|,
name|props
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getValueTypeValue
argument_list|()
argument_list|)
decl_stmt|;
name|propMap
operator|.
name|addNewProperty
argument_list|(
name|props
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getNameValue
argument_list|()
argument_list|,
name|type
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"Field"
argument_list|)
condition|)
block|{
name|declareAssociatedFieldType
argument_list|(
name|desc
argument_list|,
name|props
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getValueTypeValue
argument_list|()
argument_list|,
name|propMap
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|nsName
init|=
name|desc
operator|.
name|getPrefix
argument_list|()
decl_stmt|;
name|String
name|ns
init|=
name|desc
operator|.
name|getNameSpaceURI
argument_list|()
decl_stmt|;
name|nsMaps
operator|.
name|put
argument_list|(
name|ns
argument_list|,
operator|new
name|XMPSchemaFactory
argument_list|(
name|nsName
argument_list|,
name|ns
argument_list|,
name|XMPSchema
operator|.
name|class
argument_list|,
name|propMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Return the specialized schema class representation if it's known (create 	 * and add it to metadata). In other cases, return null 	 *  	 * @param metadata 	 *            Metadata to link the new schema 	 * @param namespace 	 *            The namespace URI 	 * @return Schema representation 	 * @throws XmpSchemaException 	 *             When Instancing specified Object Schema failed 	 */
specifier|public
name|XMPSchema
name|getAssociatedSchemaObject
parameter_list|(
name|XMPMetadata
name|metadata
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|prefix
parameter_list|)
throws|throws
name|XmpSchemaException
block|{
if|if
condition|(
operator|!
name|nsMaps
operator|.
name|containsKey
argument_list|(
name|namespace
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|XMPSchemaFactory
name|factory
init|=
name|nsMaps
operator|.
name|get
argument_list|(
name|namespace
argument_list|)
decl_stmt|;
return|return
name|factory
operator|.
name|createXMPSchema
argument_list|(
name|metadata
argument_list|,
name|prefix
argument_list|)
return|;
block|}
comment|/** 	 * Check if a namespace used reference a complex basic types (like 	 * Thumbnails) 	 *  	 * @param namespace 	 *            The namespace URI to check 	 * @return True if namespace URI is a reference for a complex basic type 	 */
specifier|public
name|boolean
name|isComplexBasicTypes
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
return|return
name|COMPLEX_BASIC_TYPES
operator|.
name|containsKey
argument_list|(
name|namespace
argument_list|)
return|;
block|}
comment|/** 	 * Check if a namespace declaration for a complex basic type has been found 	 * and if its valid for the entire XMP stream 	 *  	 * @param namespace 	 *            the namespace URI 	 * @param prefix 	 *            the prefix associated to this namespace 	 */
specifier|public
name|void
name|setComplexBasicTypesDeclarationForLevelXMP
parameter_list|(
name|String
name|namespace
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
if|if
condition|(
name|isComplexBasicTypes
argument_list|(
name|namespace
argument_list|)
condition|)
block|{
name|complexBasicTypesDeclarationEntireXMPLevel
operator|.
name|put
argument_list|(
name|prefix
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Check if a namespace declaration for a complex basic type has been found 	 * and if its valid for the current schema description (at level of 	 * rdf:Description) 	 *  	 * @param namespace 	 *            the namespace URI 	 * @param prefix 	 *            the prefix associated to this namespace 	 */
specifier|public
name|void
name|setComplexBasicTypesDeclarationForLevelSchema
parameter_list|(
name|String
name|namespace
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
if|if
condition|(
name|isComplexBasicTypes
argument_list|(
name|namespace
argument_list|)
condition|)
block|{
name|complexBasicTypesDeclarationSchemaLevel
operator|.
name|put
argument_list|(
name|prefix
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Check if a namespace declaration for a complex basic type has been found 	 * and if its valid for the current property description 	 *  	 * @param namespace 	 *            the namespace URI 	 * @param prefix 	 *            the prefix associated to this namespace 	 */
specifier|public
name|void
name|setComplexBasicTypesDeclarationForLevelProperty
parameter_list|(
name|String
name|namespace
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
if|if
condition|(
name|isComplexBasicTypes
argument_list|(
name|namespace
argument_list|)
condition|)
block|{
name|complexBasicTypesDeclarationPropertyLevel
operator|.
name|put
argument_list|(
name|prefix
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Check for all XMP level if a complexBasicValueType prefix has been 	 * declared 	 *  	 * @param prefix 	 *            The prefix which may design the namespace URI of the complex 	 *            basic type 	 * @return The type if it is known, else null. 	 */
specifier|public
name|String
name|getComplexBasicValueTypeEffectiveType
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
if|if
condition|(
name|complexBasicTypesDeclarationPropertyLevel
operator|.
name|containsKey
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
return|return
name|COMPLEX_BASIC_TYPES
operator|.
name|get
argument_list|(
name|complexBasicTypesDeclarationPropertyLevel
operator|.
name|get
argument_list|(
name|prefix
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|complexBasicTypesDeclarationSchemaLevel
operator|.
name|containsKey
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
return|return
name|COMPLEX_BASIC_TYPES
operator|.
name|get
argument_list|(
name|complexBasicTypesDeclarationSchemaLevel
operator|.
name|get
argument_list|(
name|prefix
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|complexBasicTypesDeclarationEntireXMPLevel
operator|.
name|containsKey
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
return|return
name|COMPLEX_BASIC_TYPES
operator|.
name|get
argument_list|(
name|complexBasicTypesDeclarationEntireXMPLevel
operator|.
name|get
argument_list|(
name|prefix
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/** 	 * Reset complex Basic types declaration for property level 	 */
specifier|public
name|void
name|resetComplexBasicTypesDeclarationInPropertyLevel
parameter_list|()
block|{
name|complexBasicTypesDeclarationPropertyLevel
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Reset complex Basic types declaration for schema level 	 */
specifier|public
name|void
name|resetComplexBasicTypesDeclarationInSchemaLevel
parameter_list|()
block|{
name|complexBasicTypesDeclarationSchemaLevel
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Reset complex Basic types declaration for Entire XMP level 	 */
specifier|public
name|void
name|resetComplexBasicTypesDeclarationInEntireXMPLevel
parameter_list|()
block|{
name|complexBasicTypesDeclarationEntireXMPLevel
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

