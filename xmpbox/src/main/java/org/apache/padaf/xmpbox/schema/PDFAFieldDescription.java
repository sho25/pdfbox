begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|schema
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|XMPMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|AbstractField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|ComplexPropertyContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|TextType
import|;
end_import

begin_comment
comment|/**  * Representation of a PDF/A Field schema (used in PDFAValueTypeDescription)  *   * @author a183132  *   */
end_comment

begin_class
specifier|public
class|class
name|PDFAFieldDescription
block|{
specifier|public
specifier|static
specifier|final
name|String
name|PDFAFIELDPREFIX
init|=
literal|"pdfaField"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PDFAFIELDPREFIXSEP
init|=
literal|"pdfaField:"
decl_stmt|;
annotation|@
name|PropertyType
argument_list|(
name|propertyType
operator|=
literal|"Text"
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"name"
decl_stmt|;
annotation|@
name|PropertyType
argument_list|(
name|propertyType
operator|=
literal|"Text"
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|VALUETYPE
init|=
literal|"valueType"
decl_stmt|;
annotation|@
name|PropertyType
argument_list|(
name|propertyType
operator|=
literal|"Text"
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|DESCRIPTION
init|=
literal|"description"
decl_stmt|;
specifier|private
name|XMPMetadata
name|metadata
decl_stmt|;
specifier|private
name|ComplexPropertyContainer
name|content
decl_stmt|;
comment|/** 	 * Build a new PDF/A field description 	 *  	 * @param metadata 	 *            The metadata to attach this description 	 */
specifier|public
name|PDFAFieldDescription
parameter_list|(
name|XMPMetadata
name|metadata
parameter_list|)
block|{
name|this
operator|.
name|metadata
operator|=
name|metadata
expr_stmt|;
name|content
operator|=
operator|new
name|ComplexPropertyContainer
argument_list|(
name|metadata
argument_list|,
literal|null
argument_list|,
literal|"rdf"
argument_list|,
literal|"li"
argument_list|)
expr_stmt|;
name|content
operator|.
name|setAttribute
argument_list|(
operator|new
name|Attribute
argument_list|(
literal|null
argument_list|,
literal|"rdf"
argument_list|,
literal|"parseType"
argument_list|,
literal|"Resource"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * set the name of this field 	 *  	 * @param name 	 *            The value to set 	 */
specifier|public
name|void
name|setNameValue
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|content
operator|.
name|addProperty
argument_list|(
operator|new
name|TextType
argument_list|(
name|metadata
argument_list|,
literal|null
argument_list|,
name|PDFAFIELDPREFIX
argument_list|,
name|NAME
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * set the valueType of this field 	 *  	 * @param valueType 	 *            The value to set 	 */
specifier|public
name|void
name|setValueTypeValue
parameter_list|(
name|String
name|valueType
parameter_list|)
block|{
name|content
operator|.
name|addProperty
argument_list|(
operator|new
name|TextType
argument_list|(
name|metadata
argument_list|,
literal|null
argument_list|,
name|PDFAFIELDPREFIX
argument_list|,
name|VALUETYPE
argument_list|,
name|valueType
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * set the description of this field 	 *  	 * @param description 	 *            The value to set 	 */
specifier|public
name|void
name|setDescriptionValue
parameter_list|(
name|String
name|description
parameter_list|)
block|{
name|content
operator|.
name|addProperty
argument_list|(
operator|new
name|TextType
argument_list|(
name|metadata
argument_list|,
literal|null
argument_list|,
name|PDFAFIELDPREFIX
argument_list|,
name|DESCRIPTION
argument_list|,
name|description
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Get value of a specified property field 	 *  	 * @param qualifiedName 	 *            The value to get 	 * @return the Value Type of specified field 	 */
specifier|private
name|String
name|getFieldPropertyValue
parameter_list|(
name|String
name|qualifiedName
parameter_list|)
block|{
name|Iterator
argument_list|<
name|AbstractField
argument_list|>
name|it
init|=
name|content
operator|.
name|getAllProperties
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|AbstractField
name|tmp
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|tmp
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|tmp
operator|.
name|getQualifiedName
argument_list|()
operator|.
name|equals
argument_list|(
name|qualifiedName
argument_list|)
condition|)
block|{
return|return
operator|(
operator|(
name|TextType
operator|)
name|tmp
operator|)
operator|.
name|getStringValue
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/** 	 * Return the current defined field name (in a string) 	 *  	 * @return The declared name of this field 	 */
specifier|public
name|String
name|getNameValue
parameter_list|()
block|{
return|return
name|getFieldPropertyValue
argument_list|(
name|PDFAFIELDPREFIXSEP
operator|+
name|NAME
argument_list|)
return|;
block|}
comment|/** 	 * Return the current defined field valueType (in a string) 	 *  	 * @return the value Type of this field 	 */
specifier|public
name|String
name|getValueTypeValue
parameter_list|()
block|{
return|return
name|getFieldPropertyValue
argument_list|(
name|PDFAFIELDPREFIXSEP
operator|+
name|VALUETYPE
argument_list|)
return|;
block|}
comment|/** 	 * Return the current field description (in a string) 	 *  	 * @return the description of this field 	 */
specifier|public
name|String
name|getDescriptionValue
parameter_list|()
block|{
return|return
name|getFieldPropertyValue
argument_list|(
name|PDFAFIELDPREFIXSEP
operator|+
name|DESCRIPTION
argument_list|)
return|;
block|}
comment|/** 	 * Get one Property which describes the field 	 *  	 * @param qualifiedName 	 *            the nameproperty 	 * @return the property wanted 	 */
specifier|private
name|TextType
name|getFieldProperty
parameter_list|(
name|String
name|qualifiedName
parameter_list|)
block|{
name|Iterator
argument_list|<
name|AbstractField
argument_list|>
name|it
init|=
name|content
operator|.
name|getAllProperties
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|AbstractField
name|tmp
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|tmp
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|tmp
operator|.
name|getQualifiedName
argument_list|()
operator|.
name|equals
argument_list|(
name|qualifiedName
argument_list|)
condition|)
block|{
return|return
operator|(
name|TextType
operator|)
name|tmp
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/** 	 * Return the property corresponding to the field name definition 	 *  	 * @return the name property of this field 	 */
specifier|public
name|TextType
name|getName
parameter_list|()
block|{
return|return
name|getFieldProperty
argument_list|(
name|PDFAFIELDPREFIXSEP
operator|+
name|NAME
argument_list|)
return|;
block|}
comment|/** 	 * Return the property corresponding to the field namespaceURI definition 	 *  	 * @return the valuetype property of this field 	 */
specifier|public
name|TextType
name|getValueType
parameter_list|()
block|{
return|return
name|getFieldProperty
argument_list|(
name|PDFAFIELDPREFIXSEP
operator|+
name|VALUETYPE
argument_list|)
return|;
block|}
comment|/** 	 * Return the property corresponding to the field description definition 	 *  	 * @return the description property of this field 	 */
specifier|public
name|TextType
name|getDescription
parameter_list|()
block|{
return|return
name|getFieldProperty
argument_list|(
name|PDFAFIELDPREFIXSEP
operator|+
name|DESCRIPTION
argument_list|)
return|;
block|}
specifier|protected
name|ComplexPropertyContainer
name|getContent
parameter_list|()
block|{
return|return
name|content
return|;
block|}
block|}
end_class

end_unit

