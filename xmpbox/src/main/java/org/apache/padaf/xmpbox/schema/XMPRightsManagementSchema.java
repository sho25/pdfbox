begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|schema
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|XMPMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|BooleanType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|ArrayProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|TextType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|URLType
import|;
end_import

begin_comment
comment|/**  * Representation of XMP Rights Management Schema  *   * @author a183132  *   */
end_comment

begin_class
specifier|public
class|class
name|XMPRightsManagementSchema
extends|extends
name|XMPSchema
block|{
specifier|public
specifier|static
specifier|final
name|String
name|PREFERRED_XMPRIGHTS_PREFIX
init|=
literal|"xmpRights"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|XMPRIGHTSURI
init|=
literal|"http://ns.adobe.com/xap/1.0/rights/"
decl_stmt|;
annotation|@
name|PropertyType
argument_list|(
name|propertyType
operator|=
literal|"URL"
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|CERTIFICATE
init|=
literal|"Certificate"
decl_stmt|;
annotation|@
name|PropertyType
argument_list|(
name|propertyType
operator|=
literal|"Boolean"
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|MARKED
init|=
literal|"Marked"
decl_stmt|;
annotation|@
name|PropertyType
argument_list|(
name|propertyType
operator|=
literal|"bag ProperName"
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|OWNER
init|=
literal|"Owner"
decl_stmt|;
annotation|@
name|PropertyType
argument_list|(
name|propertyType
operator|=
literal|"Lang Alt"
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|USAGETERMS
init|=
literal|"UsageTerms"
decl_stmt|;
annotation|@
name|PropertyType
argument_list|(
name|propertyType
operator|=
literal|"URL"
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|WEBSTATEMENT
init|=
literal|"WebStatement"
decl_stmt|;
comment|/** 	 * Constructor of XMPRightsManagement Schema with preferred prefix 	 *  	 * @param metadata 	 *            The metadata to attach this schema 	 */
specifier|public
name|XMPRightsManagementSchema
parameter_list|(
name|XMPMetadata
name|metadata
parameter_list|)
block|{
name|super
argument_list|(
name|metadata
argument_list|,
name|PREFERRED_XMPRIGHTS_PREFIX
argument_list|,
name|XMPRIGHTSURI
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Constructor of XMPRightsManagement schema with specified prefix 	 *  	 * @param metadata 	 *            The metadata to attach this schema 	 * @param ownPrefix 	 *            The prefix to assign 	 */
specifier|public
name|XMPRightsManagementSchema
parameter_list|(
name|XMPMetadata
name|metadata
parameter_list|,
name|String
name|ownPrefix
parameter_list|)
block|{
name|super
argument_list|(
name|metadata
argument_list|,
name|ownPrefix
argument_list|,
name|XMPRIGHTSURI
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Add a legal owner for the described resource. 	 *  	 * @param value 	 *            value to add 	 */
specifier|public
name|void
name|addOwner
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|addQualifiedBagValue
argument_list|(
name|OWNER
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeOwner
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|removeUnqualifiedBagValue
argument_list|(
name|OWNER
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Return the Bag of owner(s) 	 *  	 * @return owners property 	 */
specifier|public
name|ArrayProperty
name|getOwnersProperty
parameter_list|()
block|{
return|return
operator|(
name|ArrayProperty
operator|)
name|getUnqualifiedProperty
argument_list|(
name|OWNER
argument_list|)
return|;
block|}
comment|/** 	 * Return a String list of owner(s) 	 *  	 * @return list of defined owners 	 */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getOwners
parameter_list|()
block|{
return|return
name|getUnqualifiedBagValueList
argument_list|(
name|OWNER
argument_list|)
return|;
block|}
comment|/** 	 * Set Marked value 	 *  	 * @param marked 	 *            value to add 	 */
specifier|public
name|void
name|setMarked
parameter_list|(
name|Boolean
name|marked
parameter_list|)
block|{
name|BooleanType
name|tt
init|=
operator|(
name|BooleanType
operator|)
name|instanciateSimple
argument_list|(
name|MARKED
argument_list|,
name|marked
condition|?
name|BooleanType
operator|.
name|TRUE
else|:
name|BooleanType
operator|.
name|FALSE
argument_list|)
decl_stmt|;
name|setMarkedProperty
argument_list|(
name|tt
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Set Marked property 	 *  	 * @param marked 	 *            Marked property to set 	 */
specifier|public
name|void
name|setMarkedProperty
parameter_list|(
name|BooleanType
name|marked
parameter_list|)
block|{
name|addProperty
argument_list|(
name|marked
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Get Marked property 	 *  	 * @return Marked property 	 */
specifier|public
name|BooleanType
name|getMarkedProperty
parameter_list|()
block|{
return|return
operator|(
name|BooleanType
operator|)
name|getUnqualifiedProperty
argument_list|(
name|MARKED
argument_list|)
return|;
block|}
comment|/** 	 * Get Marked value 	 *  	 * @return marked value 	 */
specifier|public
name|Boolean
name|getMarked
parameter_list|()
block|{
name|BooleanType
name|bt
init|=
operator|(
operator|(
name|BooleanType
operator|)
name|getUnqualifiedProperty
argument_list|(
name|MARKED
argument_list|)
operator|)
decl_stmt|;
return|return
name|bt
operator|==
literal|null
condition|?
literal|null
else|:
name|bt
operator|.
name|getValue
argument_list|()
return|;
block|}
comment|/** 	 * Add an usageTerms value 	 *  	 * @param lang 	 *            concerned language 	 * @param value 	 *            value to set 	 */
specifier|public
name|void
name|addUsageTerms
parameter_list|(
name|String
name|lang
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|setUnqualifiedLanguagePropertyValue
argument_list|(
name|USAGETERMS
argument_list|,
name|lang
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the default usage terms for this resource.      *      * @param terms The resource usage terms.       */
specifier|public
name|void
name|setUsageTerms
parameter_list|(
name|String
name|terms
parameter_list|)
block|{
name|addUsageTerms
argument_list|(
literal|null
argument_list|,
name|terms
argument_list|)
expr_stmt|;
block|}
comment|/**      * Convenience method for jempbox signature compatibility      *      * @see XMPRightsManagementSchema#addUsageTerms(String, String)      */
annotation|@
name|Deprecated
specifier|public
name|void
name|setDescription
parameter_list|(
name|String
name|language
parameter_list|,
name|String
name|terms
parameter_list|)
block|{
name|addUsageTerms
argument_list|(
name|language
argument_list|,
name|terms
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Return the Lang alt UsageTerms 	 *  	 * @return usageterms property 	 */
specifier|public
name|ArrayProperty
name|getUsageTermsProperty
parameter_list|()
block|{
return|return
operator|(
name|ArrayProperty
operator|)
name|getUnqualifiedProperty
argument_list|(
name|USAGETERMS
argument_list|)
return|;
block|}
comment|/** 	 * Return a list of languages defined in description property 	 *  	 * @return list of languages defined for usageterms 	 */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getUsageTermsLanguages
parameter_list|()
block|{
return|return
name|getUnqualifiedLanguagePropertyLanguagesValue
argument_list|(
name|USAGETERMS
argument_list|)
return|;
block|}
comment|/** 	 * Return a language value for description property 	 *  	 * @param lang 	 *            concerned language 	 * @return value of specified language 	 */
specifier|public
name|String
name|getUsageTerms
parameter_list|(
name|String
name|lang
parameter_list|)
block|{
return|return
name|getUnqualifiedLanguagePropertyValue
argument_list|(
name|USAGETERMS
argument_list|,
name|lang
argument_list|)
return|;
block|}
comment|/**      * Get the default usage terms for the document.      *      * @return The terms for this resource.      */
specifier|public
name|String
name|getUsageTerms
parameter_list|()
block|{
return|return
name|getUsageTerms
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/** 	 * Return the WebStatement URL as TextType. 	 *  	 * @return Webstatement URL property 	 */
specifier|public
name|TextType
name|getWebStatementProperty
parameter_list|()
block|{
return|return
operator|(
operator|(
name|TextType
operator|)
name|getUnqualifiedProperty
argument_list|(
name|WEBSTATEMENT
argument_list|)
operator|)
return|;
block|}
comment|/** 	 * Return the WebStatement URL as String. 	 *  	 * @return webStatement URL value 	 */
specifier|public
name|String
name|getWebStatement
parameter_list|()
block|{
name|TextType
name|tt
init|=
operator|(
operator|(
name|TextType
operator|)
name|getUnqualifiedProperty
argument_list|(
name|WEBSTATEMENT
argument_list|)
operator|)
decl_stmt|;
return|return
name|tt
operator|==
literal|null
condition|?
literal|null
else|:
name|tt
operator|.
name|getStringValue
argument_list|()
return|;
block|}
comment|/** 	 * Set the WebStatement url 	 *  	 * @param url 	 *            WebStatemen url value to set 	 */
specifier|public
name|void
name|setWebStatement
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|URLType
name|tt
init|=
operator|(
name|URLType
operator|)
name|instanciateSimple
argument_list|(
name|WEBSTATEMENT
argument_list|,
name|url
argument_list|)
decl_stmt|;
name|setWebStatementProperty
argument_list|(
name|tt
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Set the WebStatement url 	 *  	 * @param url 	 *            WebStatemen url property to set 	 */
specifier|public
name|void
name|setWebStatementProperty
parameter_list|(
name|TextType
name|url
parameter_list|)
block|{
name|addProperty
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Return the Certificate URL as TextType. 	 *  	 * @return certificate url property 	 */
specifier|public
name|TextType
name|getCertificateProperty
parameter_list|()
block|{
return|return
operator|(
operator|(
name|TextType
operator|)
name|getUnqualifiedProperty
argument_list|(
name|CERTIFICATE
argument_list|)
operator|)
return|;
block|}
comment|/** 	 * Return the Certificate URL as String. 	 *  	 * @return certificate URL value 	 */
specifier|public
name|String
name|getCertificate
parameter_list|()
block|{
name|TextType
name|tt
init|=
operator|(
operator|(
name|TextType
operator|)
name|getUnqualifiedProperty
argument_list|(
name|CERTIFICATE
argument_list|)
operator|)
decl_stmt|;
return|return
name|tt
operator|==
literal|null
condition|?
literal|null
else|:
name|tt
operator|.
name|getStringValue
argument_list|()
return|;
block|}
comment|/**      * Convenience method for jempbox signature compatibility      *      * @see XMPRightsManagementSchema#getCertificate()      */
annotation|@
name|Deprecated
specifier|public
name|String
name|getCopyright
parameter_list|()
block|{
return|return
name|getCertificate
argument_list|()
return|;
block|}
comment|/**      * Convenience method for jempbox signature compatibility      *      * @see XMPRightsManagementSchema#getCertificate()      */
annotation|@
name|Deprecated
specifier|public
name|String
name|getCertificateURL
parameter_list|()
block|{
return|return
name|getCertificate
argument_list|()
return|;
block|}
comment|/** 	 * Set the Certificate URL. 	 *  	 * @param url 	 *            certficate url value to set 	 */
specifier|public
name|void
name|setCertificate
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|URLType
name|tt
init|=
operator|(
name|URLType
operator|)
name|instanciateSimple
argument_list|(
name|CERTIFICATE
argument_list|,
name|url
argument_list|)
decl_stmt|;
name|setCertificateProperty
argument_list|(
name|tt
argument_list|)
expr_stmt|;
block|}
comment|/**      * Convenience method for jempbox signature compatibility      *      * @see XMPRightsManagementSchema#setCertificate(String)      */
annotation|@
name|Deprecated
specifier|public
name|void
name|setCertificateURL
parameter_list|(
name|String
name|certificate
parameter_list|)
block|{
name|setCertificate
argument_list|(
name|certificate
argument_list|)
expr_stmt|;
block|}
comment|/**      * Convenience method for jempbox signature compatibility      *      * @see XMPRightsManagementSchema#setCertificate(String)      */
annotation|@
name|Deprecated
specifier|public
name|void
name|setCopyright
parameter_list|(
name|String
name|certificate
parameter_list|)
block|{
name|setCertificate
argument_list|(
name|certificate
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Set the Certificate URL. 	 *  	 * @param url 	 *            certificate url property to set 	 */
specifier|public
name|void
name|setCertificateProperty
parameter_list|(
name|TextType
name|url
parameter_list|)
block|{
name|addProperty
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

