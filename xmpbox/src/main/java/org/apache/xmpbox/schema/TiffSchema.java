begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *  ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|schema
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|XMPMetadata
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|ArrayProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|Cardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|ProperNameType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|StructuredType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|Types
import|;
end_import

begin_class
annotation|@
name|StructuredType
argument_list|(
name|preferedPrefix
operator|=
literal|"tiff"
argument_list|,
name|namespace
operator|=
literal|"http://ns.adobe.com/tiff/1.0/"
argument_list|)
specifier|public
class|class
name|TiffSchema
extends|extends
name|XMPSchema
block|{
annotation|@
name|PropertyType
argument_list|(
name|type
operator|=
name|Types
operator|.
name|LangAlt
argument_list|,
name|card
operator|=
name|Cardinality
operator|.
name|Simple
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|IMAGE_DESCRIPTION
init|=
literal|"ImageDescription"
decl_stmt|;
annotation|@
name|PropertyType
argument_list|(
name|type
operator|=
name|Types
operator|.
name|LangAlt
argument_list|,
name|card
operator|=
name|Cardinality
operator|.
name|Simple
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|COPYRIGHT
init|=
literal|"Copyright"
decl_stmt|;
annotation|@
name|PropertyType
argument_list|(
name|type
operator|=
name|Types
operator|.
name|ProperName
argument_list|,
name|card
operator|=
name|Cardinality
operator|.
name|Simple
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|ARTIST
init|=
literal|"Artist"
decl_stmt|;
annotation|@
name|PropertyType
argument_list|(
name|type
operator|=
name|Types
operator|.
name|Integer
argument_list|,
name|card
operator|=
name|Cardinality
operator|.
name|Simple
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|IMAGE_WIDTH
init|=
literal|"ImageWidth"
decl_stmt|;
annotation|@
name|PropertyType
argument_list|(
name|type
operator|=
name|Types
operator|.
name|Integer
argument_list|,
name|card
operator|=
name|Cardinality
operator|.
name|Simple
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|IMAGE_LENGHT
init|=
literal|"ImageLength"
decl_stmt|;
annotation|@
name|PropertyType
argument_list|(
name|type
operator|=
name|Types
operator|.
name|Integer
argument_list|,
name|card
operator|=
name|Cardinality
operator|.
name|Seq
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|BITS_PER_SAMPLE
init|=
literal|"BitsPerSample"
decl_stmt|;
annotation|@
name|PropertyType
argument_list|(
name|type
operator|=
name|Types
operator|.
name|Integer
argument_list|,
name|card
operator|=
name|Cardinality
operator|.
name|Simple
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|COMPRESSION
init|=
literal|"Compression"
decl_stmt|;
annotation|@
name|PropertyType
argument_list|(
name|type
operator|=
name|Types
operator|.
name|Integer
argument_list|,
name|card
operator|=
name|Cardinality
operator|.
name|Simple
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|PHOTOMETRIC_INTERPRETATION
init|=
literal|"PhotometricInterpretation"
decl_stmt|;
annotation|@
name|PropertyType
argument_list|(
name|type
operator|=
name|Types
operator|.
name|Integer
argument_list|,
name|card
operator|=
name|Cardinality
operator|.
name|Simple
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|ORIENTATION
init|=
literal|"Orientation"
decl_stmt|;
annotation|@
name|PropertyType
argument_list|(
name|type
operator|=
name|Types
operator|.
name|Integer
argument_list|,
name|card
operator|=
name|Cardinality
operator|.
name|Simple
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|SAMPLES_PER_PIXEL
init|=
literal|"SamplesPerPixel"
decl_stmt|;
annotation|@
name|PropertyType
argument_list|(
name|type
operator|=
name|Types
operator|.
name|Integer
argument_list|,
name|card
operator|=
name|Cardinality
operator|.
name|Simple
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|PLANAR_CONFIGURATION
init|=
literal|"PlanarConfiguration"
decl_stmt|;
annotation|@
name|PropertyType
argument_list|(
name|type
operator|=
name|Types
operator|.
name|Integer
argument_list|,
name|card
operator|=
name|Cardinality
operator|.
name|Simple
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|YCB_CR_SUB_SAMPLING
init|=
literal|"YCbCrSubSampling"
decl_stmt|;
annotation|@
name|PropertyType
argument_list|(
name|type
operator|=
name|Types
operator|.
name|Integer
argument_list|,
name|card
operator|=
name|Cardinality
operator|.
name|Seq
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|YCB_CR_POSITIONING
init|=
literal|"YCbCrPositioning"
decl_stmt|;
annotation|@
name|PropertyType
argument_list|(
name|type
operator|=
name|Types
operator|.
name|Rational
argument_list|,
name|card
operator|=
name|Cardinality
operator|.
name|Simple
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|XRESOLUTION
init|=
literal|"XResolution"
decl_stmt|;
annotation|@
name|PropertyType
argument_list|(
name|type
operator|=
name|Types
operator|.
name|Rational
argument_list|,
name|card
operator|=
name|Cardinality
operator|.
name|Simple
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|YRESOLUTION
init|=
literal|"YResolution"
decl_stmt|;
annotation|@
name|PropertyType
argument_list|(
name|type
operator|=
name|Types
operator|.
name|Integer
argument_list|,
name|card
operator|=
name|Cardinality
operator|.
name|Simple
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|RESOLUTION_UNIT
init|=
literal|"ResolutionUnit"
decl_stmt|;
annotation|@
name|PropertyType
argument_list|(
name|type
operator|=
name|Types
operator|.
name|Integer
argument_list|,
name|card
operator|=
name|Cardinality
operator|.
name|Seq
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|TRANSFER_FUNCTION
init|=
literal|"TransferFunction"
decl_stmt|;
annotation|@
name|PropertyType
argument_list|(
name|type
operator|=
name|Types
operator|.
name|Rational
argument_list|,
name|card
operator|=
name|Cardinality
operator|.
name|Seq
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|WHITE_POINT
init|=
literal|"WhitePoint"
decl_stmt|;
annotation|@
name|PropertyType
argument_list|(
name|type
operator|=
name|Types
operator|.
name|Rational
argument_list|,
name|card
operator|=
name|Cardinality
operator|.
name|Seq
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|PRIMARY_CHROMATICITIES
init|=
literal|"PrimaryChromaticities"
decl_stmt|;
annotation|@
name|PropertyType
argument_list|(
name|type
operator|=
name|Types
operator|.
name|Rational
argument_list|,
name|card
operator|=
name|Cardinality
operator|.
name|Seq
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|YCB_CR_COEFFICIENTS
init|=
literal|"YCbCrCoefficients"
decl_stmt|;
annotation|@
name|PropertyType
argument_list|(
name|type
operator|=
name|Types
operator|.
name|Rational
argument_list|,
name|card
operator|=
name|Cardinality
operator|.
name|Seq
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|REFERENCE_BLACK_WHITE
init|=
literal|"ReferenceBlackWhite"
decl_stmt|;
annotation|@
name|PropertyType
argument_list|(
name|type
operator|=
name|Types
operator|.
name|Date
argument_list|,
name|card
operator|=
name|Cardinality
operator|.
name|Simple
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|DATE_TIME
init|=
literal|"DateTime"
decl_stmt|;
annotation|@
name|PropertyType
argument_list|(
name|type
operator|=
name|Types
operator|.
name|AgentName
argument_list|,
name|card
operator|=
name|Cardinality
operator|.
name|Simple
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|SOFTWARE
init|=
literal|"Software"
decl_stmt|;
annotation|@
name|PropertyType
argument_list|(
name|type
operator|=
name|Types
operator|.
name|ProperName
argument_list|,
name|card
operator|=
name|Cardinality
operator|.
name|Simple
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|MAKE
init|=
literal|"Make"
decl_stmt|;
annotation|@
name|PropertyType
argument_list|(
name|type
operator|=
name|Types
operator|.
name|ProperName
argument_list|,
name|card
operator|=
name|Cardinality
operator|.
name|Simple
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|MODEL
init|=
literal|"Model"
decl_stmt|;
specifier|public
name|TiffSchema
parameter_list|(
name|XMPMetadata
name|metadata
parameter_list|)
block|{
name|super
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TiffSchema
parameter_list|(
name|XMPMetadata
name|metadata
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|super
argument_list|(
name|metadata
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
comment|/**      * Return the artist property      * @return artist ProperNameType      */
specifier|public
name|ProperNameType
name|getArtistProperty
parameter_list|()
block|{
return|return
operator|(
name|ProperNameType
operator|)
name|getProperty
argument_list|(
name|ARTIST
argument_list|)
return|;
block|}
comment|/**      * Return the artist property as String      * @return string      */
specifier|public
name|String
name|getArtist
parameter_list|()
block|{
name|ProperNameType
name|tt
init|=
operator|(
name|ProperNameType
operator|)
name|getProperty
argument_list|(
name|ARTIST
argument_list|)
decl_stmt|;
return|return
name|tt
operator|==
literal|null
condition|?
literal|null
else|:
name|tt
operator|.
name|getStringValue
argument_list|()
return|;
block|}
comment|/**      * Set the name of the artist      * @param text      */
specifier|public
name|void
name|setArtist
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|addProperty
argument_list|(
name|createTextType
argument_list|(
name|ARTIST
argument_list|,
name|text
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Return the image description property object      * @return the image description property      */
specifier|public
name|ArrayProperty
name|getImageDescriptionProperty
parameter_list|()
block|{
return|return
operator|(
name|ArrayProperty
operator|)
name|getProperty
argument_list|(
name|IMAGE_DESCRIPTION
argument_list|)
return|;
block|}
comment|/**      * Return the list of language existing for image description      * @return a list of languages      */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getImageDescriptionLanguages
parameter_list|()
block|{
return|return
name|getUnqualifiedLanguagePropertyLanguagesValue
argument_list|(
name|IMAGE_DESCRIPTION
argument_list|)
return|;
block|}
comment|/**      * Return the image description value as String in expected language      *      * @param lang expected language      * @return image description value      */
specifier|public
name|String
name|getImageDescription
parameter_list|(
name|String
name|lang
parameter_list|)
block|{
return|return
name|getUnqualifiedLanguagePropertyValue
argument_list|(
name|IMAGE_DESCRIPTION
argument_list|,
name|lang
argument_list|)
return|;
block|}
comment|/**      * Return the image description as String in default language      * @return image description value      */
specifier|public
name|String
name|getImageDescription
parameter_list|()
block|{
return|return
name|getImageDescription
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/**      * Add a image description value for a specified language      * @param lang language of the image description      * @param value image description text      */
specifier|public
name|void
name|addImageDescription
parameter_list|(
name|String
name|lang
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|setUnqualifiedLanguagePropertyValue
argument_list|(
name|IMAGE_DESCRIPTION
argument_list|,
name|lang
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * Return the copyright property object      * @return the copyright property      */
specifier|public
name|ArrayProperty
name|getCopyRightProperty
parameter_list|()
block|{
return|return
operator|(
name|ArrayProperty
operator|)
name|getProperty
argument_list|(
name|COPYRIGHT
argument_list|)
return|;
block|}
comment|/**      * Return the list of language existing for copyright      * @return a list of languages      */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getCopyRightLanguages
parameter_list|()
block|{
return|return
name|getUnqualifiedLanguagePropertyLanguagesValue
argument_list|(
name|COPYRIGHT
argument_list|)
return|;
block|}
comment|/**      * Return the copyright value as String in expected language      *      * @param lang expected language      * @return copyright value      */
specifier|public
name|String
name|getCopyRight
parameter_list|(
name|String
name|lang
parameter_list|)
block|{
return|return
name|getUnqualifiedLanguagePropertyValue
argument_list|(
name|COPYRIGHT
argument_list|,
name|lang
argument_list|)
return|;
block|}
comment|/**      * Return the copyright value as String in default language      * @return copyright value      */
specifier|public
name|String
name|getCopyRight
parameter_list|()
block|{
return|return
name|getCopyRight
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/**      * Add a copyright value for a specified language      * @param lang language of the copyright      * @param value copyright text      */
specifier|public
name|void
name|addCopyright
parameter_list|(
name|String
name|lang
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|setUnqualifiedLanguagePropertyValue
argument_list|(
name|COPYRIGHT
argument_list|,
name|lang
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

