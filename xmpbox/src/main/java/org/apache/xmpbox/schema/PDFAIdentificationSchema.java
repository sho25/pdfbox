begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|schema
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|XMPMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|AbstractField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|BadFieldValueException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|Cardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|IntegerType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|StructuredType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|TextType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|Types
import|;
end_import

begin_comment
comment|/**  * Representation of PDF/A Identification Schema  *   * @author a183132  *   */
end_comment

begin_class
annotation|@
name|StructuredType
argument_list|(
name|preferedPrefix
operator|=
literal|"pdfaid"
argument_list|,
name|namespace
operator|=
literal|"http://www.aiim.org/pdfa/ns/id/"
argument_list|)
specifier|public
class|class
name|PDFAIdentificationSchema
extends|extends
name|XMPSchema
block|{
annotation|@
name|PropertyType
argument_list|(
name|type
operator|=
name|Types
operator|.
name|Integer
argument_list|,
name|card
operator|=
name|Cardinality
operator|.
name|Simple
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|PART
init|=
literal|"part"
decl_stmt|;
annotation|@
name|PropertyType
argument_list|(
name|type
operator|=
name|Types
operator|.
name|Text
argument_list|,
name|card
operator|=
name|Cardinality
operator|.
name|Simple
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|AMD
init|=
literal|"amd"
decl_stmt|;
annotation|@
name|PropertyType
argument_list|(
name|type
operator|=
name|Types
operator|.
name|Text
argument_list|,
name|card
operator|=
name|Cardinality
operator|.
name|Simple
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|CONFORMANCE
init|=
literal|"conformance"
decl_stmt|;
comment|/*      *<rdf:Description rdf:about="" xmlns:pdfaid="http://www.aiim.org/pdfa/ns/id/">      *<pdfaid:conformance>B</pdfaid:conformance><pdfaid:part>1</pdfaid:part></rdf:Description>      */
comment|/**      * Constructor of a PDF/A Identification schema      *       * @param metadata      *            The metadata to attach this schema      */
specifier|public
name|PDFAIdentificationSchema
parameter_list|(
name|XMPMetadata
name|metadata
parameter_list|)
block|{
name|super
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PDFAIdentificationSchema
parameter_list|(
name|XMPMetadata
name|metadata
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|super
argument_list|(
name|metadata
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the PDFA Version identifier (with string)      *       * @param value      *            The version Id value to set      *       */
specifier|public
name|void
name|setPartValueWithString
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|IntegerType
name|part
init|=
operator|(
name|IntegerType
operator|)
name|instanciateSimple
argument_list|(
name|PART
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|addProperty
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the PDFA Version identifier (with an int)      *       * @param value      *            The version Id value to set      */
specifier|public
name|void
name|setPartValueWithInt
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|IntegerType
name|part
init|=
operator|(
name|IntegerType
operator|)
name|instanciateSimple
argument_list|(
name|PART
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|addProperty
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the PDF/A Version identifier (with an int)      *       * @param value      *            The version Id property to set      */
specifier|public
name|void
name|setPart
parameter_list|(
name|Integer
name|value
parameter_list|)
block|{
name|setPartValueWithInt
argument_list|(
name|value
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the PDF/A Version identifier      *       * @param part      *            set the PDF/A Version id property      */
specifier|public
name|void
name|setPartProperty
parameter_list|(
name|IntegerType
name|part
parameter_list|)
block|{
name|addProperty
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the PDF/A amendment identifier      *       * @param value      *            The amendment identifier value to set      */
specifier|public
name|void
name|setAmd
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|TextType
name|amd
init|=
name|createTextType
argument_list|(
name|AMD
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|addProperty
argument_list|(
name|amd
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the PDF/A amendment identifier      *       * @param amd      *            The amendment identifier property to set      */
specifier|public
name|void
name|setAmdProperty
parameter_list|(
name|TextType
name|amd
parameter_list|)
block|{
name|addProperty
argument_list|(
name|amd
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the PDF/A conformance level      *       * @param value      *            The conformance level value to set      * @throws BadFieldValueException      *             If Conformance Value not 'A' or 'B'      */
specifier|public
name|void
name|setConformance
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|BadFieldValueException
block|{
if|if
condition|(
name|value
operator|.
name|equals
argument_list|(
literal|"A"
argument_list|)
operator|||
name|value
operator|.
name|equals
argument_list|(
literal|"B"
argument_list|)
condition|)
block|{
name|TextType
name|conf
init|=
name|createTextType
argument_list|(
name|CONFORMANCE
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|addProperty
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|BadFieldValueException
argument_list|(
literal|"The property given not seems to be a PDF/A conformance level (must be A or B)"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Set the PDF/A conformance level      *       * @param conf      *            The conformance level property to set      * @throws BadFieldValueException      *             If Conformance Value not 'A' or 'B'      */
specifier|public
name|void
name|setConformanceProperty
parameter_list|(
name|TextType
name|conf
parameter_list|)
throws|throws
name|BadFieldValueException
block|{
name|String
name|value
init|=
name|conf
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|equals
argument_list|(
literal|"A"
argument_list|)
operator|||
name|value
operator|.
name|equals
argument_list|(
literal|"B"
argument_list|)
condition|)
block|{
name|addProperty
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|BadFieldValueException
argument_list|(
literal|"The property given not seems to be a PDF/A conformance level (must be A or B)"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Give the PDFAVersionId (as an integer)      *       * @return Part value (Integer)      */
specifier|public
name|Integer
name|getPart
parameter_list|()
block|{
name|AbstractField
name|tmp
init|=
name|getPartProperty
argument_list|()
decl_stmt|;
if|if
condition|(
name|tmp
operator|instanceof
name|IntegerType
condition|)
block|{
return|return
operator|(
operator|(
name|IntegerType
operator|)
name|tmp
operator|)
operator|.
name|getValue
argument_list|()
return|;
block|}
else|else
block|{
for|for
control|(
name|Attribute
name|attribute
range|:
name|getAllAttributes
argument_list|()
control|)
block|{
if|if
condition|(
name|attribute
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|PART
argument_list|)
condition|)
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|attribute
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Give the property corresponding to the PDFA Version id      *       * @return Part property      */
specifier|public
name|IntegerType
name|getPartProperty
parameter_list|()
block|{
name|AbstractField
name|tmp
init|=
name|getProperty
argument_list|(
name|PART
argument_list|)
decl_stmt|;
if|if
condition|(
name|tmp
operator|instanceof
name|IntegerType
condition|)
block|{
return|return
operator|(
name|IntegerType
operator|)
name|tmp
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Give the PDFAAmendmentId (as an String)      *       * @return Amendment value      */
specifier|public
name|String
name|getAmendment
parameter_list|()
block|{
name|AbstractField
name|tmp
init|=
name|getProperty
argument_list|(
name|AMD
argument_list|)
decl_stmt|;
if|if
condition|(
name|tmp
operator|instanceof
name|TextType
condition|)
block|{
return|return
operator|(
operator|(
name|TextType
operator|)
name|tmp
operator|)
operator|.
name|getStringValue
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Give the property corresponding to the PDFA Amendment id      *       * @return Amendment property      */
specifier|public
name|TextType
name|getAmdProperty
parameter_list|()
block|{
name|AbstractField
name|tmp
init|=
name|getProperty
argument_list|(
name|AMD
argument_list|)
decl_stmt|;
if|if
condition|(
name|tmp
operator|instanceof
name|TextType
condition|)
block|{
return|return
operator|(
name|TextType
operator|)
name|tmp
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Give the PDFA Amendment Id (as an String)      *       * @return Amendment Value      */
specifier|public
name|String
name|getAmd
parameter_list|()
block|{
name|TextType
name|tmp
init|=
name|getAmdProperty
argument_list|()
decl_stmt|;
if|if
condition|(
name|tmp
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|Attribute
name|attribute
range|:
name|getAllAttributes
argument_list|()
control|)
block|{
if|if
condition|(
name|attribute
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|AMD
argument_list|)
condition|)
block|{
return|return
name|attribute
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|tmp
operator|.
name|getStringValue
argument_list|()
return|;
block|}
block|}
comment|/**      * Give the property corresponding to the PDFA Conformance id      *       * @return conformance property      */
specifier|public
name|TextType
name|getConformanceProperty
parameter_list|()
block|{
name|AbstractField
name|tmp
init|=
name|getProperty
argument_list|(
name|CONFORMANCE
argument_list|)
decl_stmt|;
if|if
condition|(
name|tmp
operator|instanceof
name|TextType
condition|)
block|{
return|return
operator|(
name|TextType
operator|)
name|tmp
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Give the Conformance id      *       * @return conformance id value      */
specifier|public
name|String
name|getConformance
parameter_list|()
block|{
name|TextType
name|tt
init|=
name|getConformanceProperty
argument_list|()
decl_stmt|;
if|if
condition|(
name|tt
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|Attribute
name|attribute
range|:
name|getAllAttributes
argument_list|()
control|)
block|{
if|if
condition|(
name|attribute
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|CONFORMANCE
argument_list|)
condition|)
block|{
return|return
name|attribute
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|tt
operator|.
name|getStringValue
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

