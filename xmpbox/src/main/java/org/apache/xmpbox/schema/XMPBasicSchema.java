begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|schema
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|XMPMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|AbstractField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|AgentNameType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|ArrayProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|BadFieldValueException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|Cardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|DateType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|IntegerType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|StructuredType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|TextType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|ThumbnailType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|URLType
import|;
end_import

begin_comment
comment|/**  * Representation of XMPBasic Schema  *   * @author a183132  *   */
end_comment

begin_class
annotation|@
name|StructuredType
argument_list|(
name|preferedPrefix
operator|=
literal|"xmp"
argument_list|,
name|namespace
operator|=
literal|"http://ns.adobe.com/xap/1.0/"
argument_list|)
specifier|public
class|class
name|XMPBasicSchema
extends|extends
name|XMPSchema
block|{
annotation|@
name|PropertyType
argument_list|(
name|type
operator|=
name|Types
operator|.
name|XPath
argument_list|,
name|card
operator|=
name|Cardinality
operator|.
name|Bag
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|ADVISORY
init|=
literal|"Advisory"
decl_stmt|;
annotation|@
name|PropertyType
argument_list|(
name|type
operator|=
name|Types
operator|.
name|URL
argument_list|,
name|card
operator|=
name|Cardinality
operator|.
name|Simple
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|BASEURL
init|=
literal|"BaseURL"
decl_stmt|;
annotation|@
name|PropertyType
argument_list|(
name|type
operator|=
name|Types
operator|.
name|Date
argument_list|,
name|card
operator|=
name|Cardinality
operator|.
name|Simple
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|CREATEDATE
init|=
literal|"CreateDate"
decl_stmt|;
annotation|@
name|PropertyType
argument_list|(
name|type
operator|=
name|Types
operator|.
name|AgentName
argument_list|,
name|card
operator|=
name|Cardinality
operator|.
name|Simple
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|CREATORTOOL
init|=
literal|"CreatorTool"
decl_stmt|;
annotation|@
name|PropertyType
argument_list|(
name|type
operator|=
name|Types
operator|.
name|Text
argument_list|,
name|card
operator|=
name|Cardinality
operator|.
name|Bag
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|IDENTIFIER
init|=
literal|"Identifier"
decl_stmt|;
annotation|@
name|PropertyType
argument_list|(
name|type
operator|=
name|Types
operator|.
name|Text
argument_list|,
name|card
operator|=
name|Cardinality
operator|.
name|Simple
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|LABEL
init|=
literal|"Label"
decl_stmt|;
annotation|@
name|PropertyType
argument_list|(
name|type
operator|=
name|Types
operator|.
name|Date
argument_list|,
name|card
operator|=
name|Cardinality
operator|.
name|Simple
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|METADATADATE
init|=
literal|"MetadataDate"
decl_stmt|;
annotation|@
name|PropertyType
argument_list|(
name|type
operator|=
name|Types
operator|.
name|Date
argument_list|,
name|card
operator|=
name|Cardinality
operator|.
name|Simple
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|MODIFYDATE
init|=
literal|"ModifyDate"
decl_stmt|;
annotation|@
name|PropertyType
argument_list|(
name|type
operator|=
name|Types
operator|.
name|Text
argument_list|,
name|card
operator|=
name|Cardinality
operator|.
name|Simple
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|NICKNAME
init|=
literal|"Nickname"
decl_stmt|;
annotation|@
name|PropertyType
argument_list|(
name|type
operator|=
name|Types
operator|.
name|Integer
argument_list|,
name|card
operator|=
name|Cardinality
operator|.
name|Simple
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|RATING
init|=
literal|"Rating"
decl_stmt|;
annotation|@
name|PropertyType
argument_list|(
name|type
operator|=
name|Types
operator|.
name|Thumbnail
argument_list|,
name|card
operator|=
name|Cardinality
operator|.
name|Alt
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|THUMBNAILS
init|=
literal|"Thumbnails"
decl_stmt|;
annotation|@
name|PropertyType
argument_list|(
name|type
operator|=
name|Types
operator|.
name|Date
argument_list|,
name|card
operator|=
name|Cardinality
operator|.
name|Simple
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|MODIFIER_DATE
init|=
literal|"ModifierDate"
decl_stmt|;
specifier|private
name|ArrayProperty
name|altThumbs
decl_stmt|;
comment|/**      * Constructor of XMPBasic schema with preferred prefix      *       * @param metadata      *            The metadata to attach this schema      */
specifier|public
name|XMPBasicSchema
parameter_list|(
name|XMPMetadata
name|metadata
parameter_list|)
block|{
name|super
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor of XMPBasic schema with specified prefix      *       * @param metadata      *            The metadata to attach this schema      * @param ownPrefix      *            The prefix to assign      */
specifier|public
name|XMPBasicSchema
parameter_list|(
name|XMPMetadata
name|metadata
parameter_list|,
name|String
name|ownPrefix
parameter_list|)
block|{
name|super
argument_list|(
name|metadata
argument_list|,
name|ownPrefix
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add thumbnail to thumbnails list      *       * @param height      *            height format      * @param width      *            width format      * @param format      *            thumbnail format      * @param img      *            Image data      */
specifier|public
name|void
name|addThumbnails
parameter_list|(
name|Integer
name|height
parameter_list|,
name|Integer
name|width
parameter_list|,
name|String
name|format
parameter_list|,
name|String
name|img
parameter_list|)
block|{
if|if
condition|(
name|altThumbs
operator|==
literal|null
condition|)
block|{
name|altThumbs
operator|=
name|createArrayProperty
argument_list|(
name|THUMBNAILS
argument_list|,
name|Cardinality
operator|.
name|Alt
argument_list|)
expr_stmt|;
name|addProperty
argument_list|(
name|altThumbs
argument_list|)
expr_stmt|;
block|}
name|ThumbnailType
name|thumb
init|=
operator|new
name|ThumbnailType
argument_list|(
name|getMetadata
argument_list|()
argument_list|)
decl_stmt|;
name|thumb
operator|.
name|setHeight
argument_list|(
name|height
argument_list|)
expr_stmt|;
name|thumb
operator|.
name|setWidth
argument_list|(
name|width
argument_list|)
expr_stmt|;
name|thumb
operator|.
name|setFormat
argument_list|(
name|format
argument_list|)
expr_stmt|;
name|thumb
operator|.
name|setImage
argument_list|(
name|img
argument_list|)
expr_stmt|;
name|altThumbs
operator|.
name|getContainer
argument_list|()
operator|.
name|addProperty
argument_list|(
name|thumb
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add a property specification that were edited outside the authoring application      *       * @param xpath      *            the value to add      */
specifier|public
name|void
name|addAdvisory
parameter_list|(
name|String
name|xpath
parameter_list|)
block|{
name|addQualifiedBagValue
argument_list|(
name|ADVISORY
argument_list|,
name|xpath
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeAdvisory
parameter_list|(
name|String
name|xpath
parameter_list|)
block|{
name|removeUnqualifiedBagValue
argument_list|(
name|ADVISORY
argument_list|,
name|xpath
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the base URL for relative URLs in the document content      *       * @param url      *            the Base url value to set      */
specifier|public
name|void
name|setBaseURL
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|URLType
name|tt
init|=
operator|(
name|URLType
operator|)
name|instanciateSimple
argument_list|(
name|BASEURL
argument_list|,
name|url
argument_list|)
decl_stmt|;
name|setBaseURLProperty
argument_list|(
name|tt
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the base URL property      *       * @param url      *            the Base url property to set      */
specifier|public
name|void
name|setBaseURLProperty
parameter_list|(
name|URLType
name|url
parameter_list|)
block|{
name|addProperty
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the date and time the resource was originally created      *       * @param date      *            the value to set      */
specifier|public
name|void
name|setCreateDate
parameter_list|(
name|Calendar
name|date
parameter_list|)
block|{
name|DateType
name|tt
init|=
operator|(
name|DateType
operator|)
name|instanciateSimple
argument_list|(
name|CREATEDATE
argument_list|,
name|date
argument_list|)
decl_stmt|;
name|setCreateDateProperty
argument_list|(
name|tt
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the create date property      *       * @param date      *            the create date property to set      */
specifier|public
name|void
name|setCreateDateProperty
parameter_list|(
name|DateType
name|date
parameter_list|)
block|{
name|addProperty
argument_list|(
name|date
argument_list|)
expr_stmt|;
block|}
comment|/**      * set the name of the first known tool used to create this resource      *       * @param creatorTool      *            the creator tool value to set      */
specifier|public
name|void
name|setCreatorTool
parameter_list|(
name|String
name|creatorTool
parameter_list|)
block|{
name|AgentNameType
name|tt
init|=
operator|(
name|AgentNameType
operator|)
name|instanciateSimple
argument_list|(
name|CREATORTOOL
argument_list|,
name|creatorTool
argument_list|)
decl_stmt|;
name|setCreatorToolProperty
argument_list|(
name|tt
argument_list|)
expr_stmt|;
block|}
comment|/**      * set the creatorTool property      *       * @param creatorTool      *            the creator tool property to set      */
specifier|public
name|void
name|setCreatorToolProperty
parameter_list|(
name|AgentNameType
name|creatorTool
parameter_list|)
block|{
name|addProperty
argument_list|(
name|creatorTool
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add a text string which unambiguously identify the resource within a given context      *       * @param text      *            the identifier value to add      */
specifier|public
name|void
name|addIdentifier
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|addQualifiedBagValue
argument_list|(
name|IDENTIFIER
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeIdentifier
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|removeUnqualifiedBagValue
argument_list|(
name|IDENTIFIER
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
comment|/**      * set a word or a short phrase which identifies a document as a member of a user-defined collection      *       * @param text      *            the label value to set      */
specifier|public
name|void
name|setLabel
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|TextType
name|tt
init|=
operator|(
name|TextType
operator|)
name|instanciateSimple
argument_list|(
name|LABEL
argument_list|,
name|text
argument_list|)
decl_stmt|;
name|setLabelProperty
argument_list|(
name|tt
argument_list|)
expr_stmt|;
block|}
comment|/**      * set the label property      *       * @param text      *            the label property to set      */
specifier|public
name|void
name|setLabelProperty
parameter_list|(
name|TextType
name|text
parameter_list|)
block|{
name|addProperty
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the date and time that any metadata for this resource was last changed. (should be equals or more recent than      * the createDate)      *       * @param date      *            the Metadata Date value to set      */
specifier|public
name|void
name|setMetadataDate
parameter_list|(
name|Calendar
name|date
parameter_list|)
block|{
name|DateType
name|tt
init|=
operator|(
name|DateType
operator|)
name|instanciateSimple
argument_list|(
name|METADATADATE
argument_list|,
name|date
argument_list|)
decl_stmt|;
name|setMetadataDateProperty
argument_list|(
name|tt
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the MetadataDate property      *       * @param date      *            the Metadata Date property to set      */
specifier|public
name|void
name|setMetadataDateProperty
parameter_list|(
name|DateType
name|date
parameter_list|)
block|{
name|addProperty
argument_list|(
name|date
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the date and time the resource was last modified      *       * @param date      *            the Modify Date value to set      */
specifier|public
name|void
name|setModifyDate
parameter_list|(
name|Calendar
name|date
parameter_list|)
block|{
name|DateType
name|tt
init|=
operator|(
name|DateType
operator|)
name|instanciateSimple
argument_list|(
name|MODIFYDATE
argument_list|,
name|date
argument_list|)
decl_stmt|;
name|setModifyDateProperty
argument_list|(
name|tt
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setModifierDate
parameter_list|(
name|Calendar
name|date
parameter_list|)
block|{
name|DateType
name|tt
init|=
operator|(
name|DateType
operator|)
name|instanciateSimple
argument_list|(
name|MODIFIER_DATE
argument_list|,
name|date
argument_list|)
decl_stmt|;
name|setModifierDateProperty
argument_list|(
name|tt
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the ModifyDate property      *       * @param date      *            the Modify Date property to set      */
specifier|public
name|void
name|setModifyDateProperty
parameter_list|(
name|DateType
name|date
parameter_list|)
block|{
name|addProperty
argument_list|(
name|date
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setModifierDateProperty
parameter_list|(
name|DateType
name|date
parameter_list|)
block|{
name|addProperty
argument_list|(
name|date
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set a short informal name for the resource      *       * @param text      *            the Nickname value to set      */
specifier|public
name|void
name|setNickname
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|TextType
name|tt
init|=
operator|(
name|TextType
operator|)
name|instanciateSimple
argument_list|(
name|NICKNAME
argument_list|,
name|text
argument_list|)
decl_stmt|;
name|setNicknameProperty
argument_list|(
name|tt
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the NickName property      *       * @param text      *            the Nickname property to set      */
specifier|public
name|void
name|setNicknameProperty
parameter_list|(
name|TextType
name|text
parameter_list|)
block|{
name|addProperty
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set a number that indicates a document's status relative to other documents, used to organize documents in a file      * browser (values are user-defined within an application-defined range)      *       * @param rate      *            the rate value to set      */
specifier|public
name|void
name|setRating
parameter_list|(
name|Integer
name|rate
parameter_list|)
block|{
name|IntegerType
name|tt
init|=
operator|(
name|IntegerType
operator|)
name|instanciateSimple
argument_list|(
name|RATING
argument_list|,
name|rate
argument_list|)
decl_stmt|;
name|setRatingProperty
argument_list|(
name|tt
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set Rating Property      *       * @param rate      *            the rate property to set      */
specifier|public
name|void
name|setRatingProperty
parameter_list|(
name|IntegerType
name|rate
parameter_list|)
block|{
name|addProperty
argument_list|(
name|rate
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the Advisory property      *       * @return the advisory property      */
specifier|public
name|ArrayProperty
name|getAdvisoryProperty
parameter_list|()
block|{
return|return
operator|(
name|ArrayProperty
operator|)
name|getProperty
argument_list|(
name|ADVISORY
argument_list|)
return|;
block|}
comment|/**      * Get the Advisory property values      *       * @return list of adivory values      */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAdvisory
parameter_list|()
block|{
return|return
name|getUnqualifiedBagValueList
argument_list|(
name|ADVISORY
argument_list|)
return|;
block|}
comment|/**      * Get the BaseURL property      *       * @return the base url property      */
specifier|public
name|TextType
name|getBaseURLProperty
parameter_list|()
block|{
return|return
operator|(
name|TextType
operator|)
name|getProperty
argument_list|(
name|BASEURL
argument_list|)
return|;
block|}
comment|/**      * Get the BaseURL property value      *       * @return the base url value      */
specifier|public
name|String
name|getBaseURL
parameter_list|()
block|{
name|TextType
name|tt
init|=
operator|(
operator|(
name|TextType
operator|)
name|getProperty
argument_list|(
name|BASEURL
argument_list|)
operator|)
decl_stmt|;
return|return
name|tt
operator|==
literal|null
condition|?
literal|null
else|:
name|tt
operator|.
name|getStringValue
argument_list|()
return|;
block|}
comment|/**      * Get the CreateDate property      *       * @return the CreateDate property      */
specifier|public
name|DateType
name|getCreateDateProperty
parameter_list|()
block|{
return|return
operator|(
name|DateType
operator|)
name|getProperty
argument_list|(
name|CREATEDATE
argument_list|)
return|;
block|}
comment|/**      * Get the CreateDate property value      *       * @return the CreateDate value      */
specifier|public
name|Calendar
name|getCreateDate
parameter_list|()
block|{
name|DateType
name|createDate
init|=
operator|(
name|DateType
operator|)
name|getProperty
argument_list|(
name|CREATEDATE
argument_list|)
decl_stmt|;
if|if
condition|(
name|createDate
operator|!=
literal|null
condition|)
block|{
return|return
name|createDate
operator|.
name|getValue
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Get the CreationTool property      *       * @return the CreationTool property      */
specifier|public
name|TextType
name|getCreatorToolProperty
parameter_list|()
block|{
return|return
operator|(
name|TextType
operator|)
name|getProperty
argument_list|(
name|CREATORTOOL
argument_list|)
return|;
block|}
comment|/**      * Get the CreationTool property value      *       * @return the CreationTool value      */
specifier|public
name|String
name|getCreatorTool
parameter_list|()
block|{
name|TextType
name|tt
init|=
operator|(
operator|(
name|TextType
operator|)
name|getProperty
argument_list|(
name|CREATORTOOL
argument_list|)
operator|)
decl_stmt|;
return|return
name|tt
operator|==
literal|null
condition|?
literal|null
else|:
name|tt
operator|.
name|getStringValue
argument_list|()
return|;
block|}
comment|/**      * Get the Identifier property      *       * @return the Identifier property      */
specifier|public
name|ArrayProperty
name|getIdentifiersProperty
parameter_list|()
block|{
return|return
operator|(
name|ArrayProperty
operator|)
name|getProperty
argument_list|(
name|IDENTIFIER
argument_list|)
return|;
block|}
comment|/**      * Get the Identifier property values      *       * @return list of all identifier values      */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getIdentifiers
parameter_list|()
block|{
return|return
name|getUnqualifiedBagValueList
argument_list|(
name|IDENTIFIER
argument_list|)
return|;
block|}
comment|/**      * Get the label property      *       * @return the label property      */
specifier|public
name|TextType
name|getLabelProperty
parameter_list|()
block|{
return|return
operator|(
name|TextType
operator|)
name|getProperty
argument_list|(
name|LABEL
argument_list|)
return|;
block|}
comment|/**      * Get the label property value      *       * @return the label value      */
specifier|public
name|String
name|getLabel
parameter_list|()
block|{
name|TextType
name|tt
init|=
operator|(
operator|(
name|TextType
operator|)
name|getProperty
argument_list|(
name|LABEL
argument_list|)
operator|)
decl_stmt|;
return|return
name|tt
operator|==
literal|null
condition|?
literal|null
else|:
name|tt
operator|.
name|getStringValue
argument_list|()
return|;
block|}
comment|/**      * Get the MetadataDate property      *       * @return the MetadataDate property      */
specifier|public
name|DateType
name|getMetadataDateProperty
parameter_list|()
block|{
return|return
operator|(
name|DateType
operator|)
name|getProperty
argument_list|(
name|METADATADATE
argument_list|)
return|;
block|}
comment|/**      * Get the MetadataDate property value      *       * @return the MetadataDate value      */
specifier|public
name|Calendar
name|getMetadataDate
parameter_list|()
block|{
name|DateType
name|dt
init|=
operator|(
operator|(
name|DateType
operator|)
name|getProperty
argument_list|(
name|METADATADATE
argument_list|)
operator|)
decl_stmt|;
return|return
name|dt
operator|==
literal|null
condition|?
literal|null
else|:
name|dt
operator|.
name|getValue
argument_list|()
return|;
block|}
comment|/**      * Get the ModifyDate property      *       * @return the ModifyDate property      */
specifier|public
name|DateType
name|getModifyDateProperty
parameter_list|()
block|{
return|return
operator|(
name|DateType
operator|)
name|getProperty
argument_list|(
name|MODIFYDATE
argument_list|)
return|;
block|}
specifier|public
name|DateType
name|getModifierDateProperty
parameter_list|()
block|{
return|return
operator|(
name|DateType
operator|)
name|getProperty
argument_list|(
name|MODIFIER_DATE
argument_list|)
return|;
block|}
comment|/**      * Get the ModifyDate property value      *       * @return the ModifyDate value      */
specifier|public
name|Calendar
name|getModifyDate
parameter_list|()
block|{
name|DateType
name|modifyDate
init|=
operator|(
name|DateType
operator|)
name|getProperty
argument_list|(
name|MODIFYDATE
argument_list|)
decl_stmt|;
if|if
condition|(
name|modifyDate
operator|!=
literal|null
condition|)
block|{
return|return
name|modifyDate
operator|.
name|getValue
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Calendar
name|getModifierDate
parameter_list|()
block|{
name|DateType
name|modifierDate
init|=
operator|(
name|DateType
operator|)
name|getProperty
argument_list|(
name|MODIFIER_DATE
argument_list|)
decl_stmt|;
if|if
condition|(
name|modifierDate
operator|!=
literal|null
condition|)
block|{
return|return
name|modifierDate
operator|.
name|getValue
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Get the Nickname property      *       * @return the Nickname property      */
specifier|public
name|TextType
name|getNicknameProperty
parameter_list|()
block|{
return|return
operator|(
name|TextType
operator|)
name|getProperty
argument_list|(
name|NICKNAME
argument_list|)
return|;
block|}
comment|/**      * Get the Nickname property value      *       * @return the Nickname value      */
specifier|public
name|String
name|getNickname
parameter_list|()
block|{
name|TextType
name|tt
init|=
operator|(
operator|(
name|TextType
operator|)
name|getProperty
argument_list|(
name|NICKNAME
argument_list|)
operator|)
decl_stmt|;
return|return
name|tt
operator|==
literal|null
condition|?
literal|null
else|:
name|tt
operator|.
name|getStringValue
argument_list|()
return|;
block|}
comment|/**      * Get the Rating property      *       * @return the Rating property      */
specifier|public
name|IntegerType
name|getRatingProperty
parameter_list|()
block|{
return|return
operator|(
operator|(
name|IntegerType
operator|)
name|getProperty
argument_list|(
name|RATING
argument_list|)
operator|)
return|;
block|}
comment|/**      * Get the Rating property value      *       * @return the Rating value      */
specifier|public
name|Integer
name|getRating
parameter_list|()
block|{
name|IntegerType
name|it
init|=
operator|(
operator|(
name|IntegerType
operator|)
name|getProperty
argument_list|(
name|RATING
argument_list|)
operator|)
decl_stmt|;
return|return
name|it
operator|==
literal|null
condition|?
literal|null
else|:
name|it
operator|.
name|getValue
argument_list|()
return|;
block|}
comment|/**      * Get list of Thumbnails      *       * @return List of all thumbnails properties defined      * @throws BadFieldValueException      *             if one thumbnail is not thumbnail type      */
specifier|public
name|List
argument_list|<
name|ThumbnailType
argument_list|>
name|getThumbnailsProperty
parameter_list|()
throws|throws
name|BadFieldValueException
block|{
name|List
argument_list|<
name|AbstractField
argument_list|>
name|tmp
init|=
name|getUnqualifiedArrayList
argument_list|(
name|THUMBNAILS
argument_list|)
decl_stmt|;
if|if
condition|(
name|tmp
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|ThumbnailType
argument_list|>
name|thumbs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|AbstractField
name|abstractField
range|:
name|tmp
control|)
block|{
if|if
condition|(
name|abstractField
operator|instanceof
name|ThumbnailType
condition|)
block|{
name|thumbs
operator|.
name|add
argument_list|(
operator|(
name|ThumbnailType
operator|)
name|abstractField
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|BadFieldValueException
argument_list|(
literal|"Thumbnail expected and "
operator|+
name|abstractField
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" found."
argument_list|)
throw|;
block|}
block|}
return|return
name|thumbs
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

