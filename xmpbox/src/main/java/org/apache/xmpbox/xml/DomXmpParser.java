begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|XMPMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|XmpConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|XMPSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|XmpSchemaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|AbstractField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|AbstractSimpleProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|AbstractStructuredType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|ArrayProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|BadFieldValueException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|Cardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|ComplexPropertyContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|PropertiesDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|TypeMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|xml
operator|.
name|XmpParsingException
operator|.
name|ErrorType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Attr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Comment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NamedNodeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|ProcessingInstruction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_class
specifier|public
class|class
name|DomXmpParser
block|{
specifier|private
name|DocumentBuilder
name|dBuilder
decl_stmt|;
specifier|private
name|NamespaceFinder
name|nsFinder
decl_stmt|;
specifier|private
name|boolean
name|strictParsing
init|=
literal|true
decl_stmt|;
specifier|public
name|DomXmpParser
parameter_list|()
throws|throws
name|XmpParsingException
block|{
try|try
block|{
name|DocumentBuilderFactory
name|dbFactory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|dbFactory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dBuilder
operator|=
name|dbFactory
operator|.
name|newDocumentBuilder
argument_list|()
expr_stmt|;
name|nsFinder
operator|=
operator|new
name|NamespaceFinder
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XmpParsingException
argument_list|(
name|ErrorType
operator|.
name|Configuration
argument_list|,
literal|"Failed to initilalize"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|boolean
name|isStrictParsing
parameter_list|()
block|{
return|return
name|strictParsing
return|;
block|}
specifier|public
name|void
name|setStrictParsing
parameter_list|(
name|boolean
name|strictParsing
parameter_list|)
block|{
name|this
operator|.
name|strictParsing
operator|=
name|strictParsing
expr_stmt|;
block|}
specifier|public
name|XMPMetadata
name|parse
parameter_list|(
name|byte
index|[]
name|xmp
parameter_list|)
throws|throws
name|XmpParsingException
block|{
name|ByteArrayInputStream
name|input
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|xmp
argument_list|)
decl_stmt|;
return|return
name|parse
argument_list|(
name|input
argument_list|)
return|;
block|}
specifier|public
name|XMPMetadata
name|parse
parameter_list|(
name|InputStream
name|input
parameter_list|)
throws|throws
name|XmpParsingException
block|{
name|Document
name|document
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// prevents validation messages polluting the console
name|dBuilder
operator|.
name|setErrorHandler
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|document
operator|=
name|dBuilder
operator|.
name|parse
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XmpParsingException
argument_list|(
name|ErrorType
operator|.
name|Undefined
argument_list|,
literal|"Failed to parse"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XmpParsingException
argument_list|(
name|ErrorType
operator|.
name|Undefined
argument_list|,
literal|"Failed to parse"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|XMPMetadata
name|xmp
init|=
literal|null
decl_stmt|;
comment|// Start reading
name|removeComments
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|Node
name|node
init|=
name|document
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
comment|// expect xpacket processing instruction
if|if
condition|(
operator|!
operator|(
name|node
operator|instanceof
name|ProcessingInstruction
operator|)
condition|)
block|{
throw|throw
operator|new
name|XmpParsingException
argument_list|(
name|ErrorType
operator|.
name|XpacketBadStart
argument_list|,
literal|"xmp should start with a processing instruction"
argument_list|)
throw|;
block|}
else|else
block|{
name|xmp
operator|=
name|parseInitialXpacket
argument_list|(
operator|(
name|ProcessingInstruction
operator|)
name|node
argument_list|)
expr_stmt|;
name|node
operator|=
name|node
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
comment|// forget other processing instruction
while|while
condition|(
name|node
operator|instanceof
name|ProcessingInstruction
condition|)
block|{
name|node
operator|=
name|node
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
comment|// expect root element
name|Element
name|root
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|node
operator|instanceof
name|Element
operator|)
condition|)
block|{
throw|throw
operator|new
name|XmpParsingException
argument_list|(
name|ErrorType
operator|.
name|NoRootElement
argument_list|,
literal|"xmp should contain a root element"
argument_list|)
throw|;
block|}
else|else
block|{
comment|// use this element as root
name|root
operator|=
operator|(
name|Element
operator|)
name|node
expr_stmt|;
name|node
operator|=
name|node
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
comment|// expect xpacket end
if|if
condition|(
operator|!
operator|(
name|node
operator|instanceof
name|ProcessingInstruction
operator|)
condition|)
block|{
throw|throw
operator|new
name|XmpParsingException
argument_list|(
name|ErrorType
operator|.
name|XpacketBadEnd
argument_list|,
literal|"xmp should end with a processing instruction"
argument_list|)
throw|;
block|}
else|else
block|{
name|parseEndPacket
argument_list|(
name|xmp
argument_list|,
operator|(
name|ProcessingInstruction
operator|)
name|node
argument_list|)
expr_stmt|;
name|node
operator|=
name|node
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
comment|// should be null
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|XmpParsingException
argument_list|(
name|ErrorType
operator|.
name|XpacketBadEnd
argument_list|,
literal|"xmp should end after xpacket end processing instruction"
argument_list|)
throw|;
block|}
comment|// xpacket is OK and the is no more nodes
comment|// Now, parse the content of root
name|Element
name|rdfRdf
init|=
name|findDescriptionsParent
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Element
argument_list|>
name|descriptions
init|=
name|DomHelper
operator|.
name|getElementChildren
argument_list|(
name|rdfRdf
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Element
argument_list|>
name|dataDescriptions
init|=
operator|new
name|ArrayList
argument_list|<
name|Element
argument_list|>
argument_list|(
name|descriptions
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Element
name|description
range|:
name|descriptions
control|)
block|{
name|Element
name|first
init|=
name|DomHelper
operator|.
name|getFirstChildElement
argument_list|(
name|description
argument_list|)
decl_stmt|;
if|if
condition|(
name|first
operator|!=
literal|null
operator|&&
literal|"pdfaExtension"
operator|.
name|equals
argument_list|(
name|first
operator|.
name|getPrefix
argument_list|()
argument_list|)
condition|)
block|{
name|PdfaExtensionHelper
operator|.
name|validateNaming
argument_list|(
name|xmp
argument_list|,
name|description
argument_list|)
expr_stmt|;
name|parseDescriptionRoot
argument_list|(
name|xmp
argument_list|,
name|description
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dataDescriptions
operator|.
name|add
argument_list|(
name|description
argument_list|)
expr_stmt|;
block|}
block|}
comment|// find schema description
name|PdfaExtensionHelper
operator|.
name|populateSchemaMapping
argument_list|(
name|xmp
argument_list|)
expr_stmt|;
comment|// parse data description
for|for
control|(
name|Element
name|description
range|:
name|dataDescriptions
control|)
block|{
name|parseDescriptionRoot
argument_list|(
name|xmp
argument_list|,
name|description
argument_list|)
expr_stmt|;
block|}
return|return
name|xmp
return|;
block|}
specifier|private
name|void
name|parseDescriptionRoot
parameter_list|(
name|XMPMetadata
name|xmp
parameter_list|,
name|Element
name|description
parameter_list|)
throws|throws
name|XmpParsingException
block|{
name|nsFinder
operator|.
name|push
argument_list|(
name|description
argument_list|)
expr_stmt|;
name|TypeMapping
name|tm
init|=
name|xmp
operator|.
name|getTypeMapping
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|Element
argument_list|>
name|properties
init|=
name|DomHelper
operator|.
name|getElementChildren
argument_list|(
name|description
argument_list|)
decl_stmt|;
comment|// parse attributes as properties
name|NamedNodeMap
name|nnm
init|=
name|description
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nnm
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Attr
name|attr
init|=
operator|(
name|Attr
operator|)
name|nnm
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|XMLConstants
operator|.
name|XMLNS_ATTRIBUTE
operator|.
name|equals
argument_list|(
name|attr
operator|.
name|getPrefix
argument_list|()
argument_list|)
condition|)
block|{
comment|// do nothing
block|}
elseif|else
if|if
condition|(
name|XmpConstants
operator|.
name|DEFAULT_RDF_PREFIX
operator|.
name|equals
argument_list|(
name|attr
operator|.
name|getPrefix
argument_list|()
argument_list|)
operator|&&
name|XmpConstants
operator|.
name|ABOUT_NAME
operator|.
name|equals
argument_list|(
name|attr
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
comment|// do nothing
block|}
elseif|else
if|if
condition|(
name|attr
operator|.
name|getPrefix
argument_list|()
operator|==
literal|null
operator|&&
name|XmpConstants
operator|.
name|ABOUT_NAME
operator|.
name|equals
argument_list|(
name|attr
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
comment|// do nothing
block|}
else|else
block|{
name|parseDescriptionRootAttr
argument_list|(
name|xmp
argument_list|,
name|description
argument_list|,
name|attr
argument_list|,
name|tm
argument_list|)
expr_stmt|;
block|}
block|}
name|parseChildrenAsProperties
argument_list|(
name|xmp
argument_list|,
name|properties
argument_list|,
name|tm
argument_list|,
name|description
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XmpSchemaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XmpParsingException
argument_list|(
name|ErrorType
operator|.
name|Undefined
argument_list|,
literal|"Parsing failed"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|nsFinder
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|parseDescriptionRootAttr
parameter_list|(
name|XMPMetadata
name|xmp
parameter_list|,
name|Element
name|description
parameter_list|,
name|Attr
name|attr
parameter_list|,
name|TypeMapping
name|tm
parameter_list|)
throws|throws
name|XmpSchemaException
throws|,
name|XmpParsingException
block|{
name|String
name|namespace
init|=
name|attr
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|XMPSchema
name|schema
init|=
name|xmp
operator|.
name|getSchema
argument_list|(
name|namespace
argument_list|)
decl_stmt|;
if|if
condition|(
name|schema
operator|==
literal|null
operator|&&
name|tm
operator|.
name|getSchemaFactory
argument_list|(
name|namespace
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|schema
operator|=
name|tm
operator|.
name|getSchemaFactory
argument_list|(
name|namespace
argument_list|)
operator|.
name|createXMPSchema
argument_list|(
name|xmp
argument_list|,
name|attr
operator|.
name|getPrefix
argument_list|()
argument_list|)
expr_stmt|;
name|loadAttributes
argument_list|(
name|schema
argument_list|,
name|description
argument_list|)
expr_stmt|;
block|}
comment|// Only process when a schema was successfully found
if|if
condition|(
name|schema
operator|!=
literal|null
condition|)
block|{
name|ComplexPropertyContainer
name|container
init|=
name|schema
operator|.
name|getContainer
argument_list|()
decl_stmt|;
name|PropertyType
name|type
init|=
name|checkPropertyDefinition
argument_list|(
name|xmp
argument_list|,
operator|new
name|QName
argument_list|(
name|attr
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|attr
operator|.
name|getLocalName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|//Default to text if no type is found
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|type
operator|=
name|TypeMapping
operator|.
name|createPropertyType
argument_list|(
name|Types
operator|.
name|Text
argument_list|,
name|Cardinality
operator|.
name|Simple
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|AbstractSimpleProperty
name|sp
init|=
name|tm
operator|.
name|instanciateSimpleProperty
argument_list|(
name|namespace
argument_list|,
name|schema
operator|.
name|getPrefix
argument_list|()
argument_list|,
name|attr
operator|.
name|getLocalName
argument_list|()
argument_list|,
name|attr
operator|.
name|getValue
argument_list|()
argument_list|,
name|type
operator|.
name|type
argument_list|()
argument_list|)
decl_stmt|;
name|container
operator|.
name|addProperty
argument_list|(
name|sp
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XmpParsingException
argument_list|(
name|ErrorType
operator|.
name|Format
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|" in "
operator|+
name|schema
operator|.
name|getPrefix
argument_list|()
operator|+
literal|":"
operator|+
name|attr
operator|.
name|getLocalName
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|void
name|parseChildrenAsProperties
parameter_list|(
name|XMPMetadata
name|xmp
parameter_list|,
name|List
argument_list|<
name|Element
argument_list|>
name|properties
parameter_list|,
name|TypeMapping
name|tm
parameter_list|,
name|Element
name|description
parameter_list|)
throws|throws
name|XmpParsingException
throws|,
name|XmpSchemaException
block|{
comment|// parse children elements as properties
for|for
control|(
name|Element
name|property
range|:
name|properties
control|)
block|{
name|String
name|namespace
init|=
name|property
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|PropertyType
name|type
init|=
name|checkPropertyDefinition
argument_list|(
name|xmp
argument_list|,
name|DomHelper
operator|.
name|getQName
argument_list|(
name|property
argument_list|)
argument_list|)
decl_stmt|;
comment|// create the container
if|if
condition|(
operator|!
name|tm
operator|.
name|isDefinedSchema
argument_list|(
name|namespace
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XmpParsingException
argument_list|(
name|ErrorType
operator|.
name|NoSchema
argument_list|,
literal|"This namespace is not a schema or a structured type : "
operator|+
name|namespace
argument_list|)
throw|;
block|}
name|XMPSchema
name|schema
init|=
name|xmp
operator|.
name|getSchema
argument_list|(
name|namespace
argument_list|)
decl_stmt|;
if|if
condition|(
name|schema
operator|==
literal|null
condition|)
block|{
name|schema
operator|=
name|tm
operator|.
name|getSchemaFactory
argument_list|(
name|namespace
argument_list|)
operator|.
name|createXMPSchema
argument_list|(
name|xmp
argument_list|,
name|property
operator|.
name|getPrefix
argument_list|()
argument_list|)
expr_stmt|;
name|loadAttributes
argument_list|(
name|schema
argument_list|,
name|description
argument_list|)
expr_stmt|;
block|}
name|ComplexPropertyContainer
name|container
init|=
name|schema
operator|.
name|getContainer
argument_list|()
decl_stmt|;
comment|// create property
name|createProperty
argument_list|(
name|xmp
argument_list|,
name|property
argument_list|,
name|type
argument_list|,
name|container
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|createProperty
parameter_list|(
name|XMPMetadata
name|xmp
parameter_list|,
name|Element
name|property
parameter_list|,
name|PropertyType
name|type
parameter_list|,
name|ComplexPropertyContainer
name|container
parameter_list|)
throws|throws
name|XmpParsingException
block|{
name|String
name|prefix
init|=
name|property
operator|.
name|getPrefix
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|property
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
name|String
name|namespace
init|=
name|property
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
comment|// create property
name|nsFinder
operator|.
name|push
argument_list|(
name|property
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|strictParsing
condition|)
block|{
throw|throw
operator|new
name|XmpParsingException
argument_list|(
name|ErrorType
operator|.
name|InvalidType
argument_list|,
literal|"No type defined for {"
operator|+
name|namespace
operator|+
literal|"}"
operator|+
name|name
argument_list|)
throw|;
block|}
else|else
block|{
comment|// use it as string
name|manageSimpleType
argument_list|(
name|xmp
argument_list|,
name|property
argument_list|,
name|Types
operator|.
name|Text
argument_list|,
name|container
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|type
argument_list|()
operator|==
name|Types
operator|.
name|LangAlt
condition|)
block|{
name|manageLangAlt
argument_list|(
name|xmp
argument_list|,
name|property
argument_list|,
name|container
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|card
argument_list|()
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|manageArray
argument_list|(
name|xmp
argument_list|,
name|property
argument_list|,
name|type
argument_list|,
name|container
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|type
argument_list|()
operator|.
name|isSimple
argument_list|()
condition|)
block|{
name|manageSimpleType
argument_list|(
name|xmp
argument_list|,
name|property
argument_list|,
name|type
operator|.
name|type
argument_list|()
argument_list|,
name|container
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|type
argument_list|()
operator|.
name|isStructured
argument_list|()
condition|)
block|{
name|manageStructuredType
argument_list|(
name|xmp
argument_list|,
name|property
argument_list|,
name|prefix
argument_list|,
name|container
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|type
argument_list|()
operator|==
name|Types
operator|.
name|DefinedType
condition|)
block|{
name|manageDefinedType
argument_list|(
name|xmp
argument_list|,
name|property
argument_list|,
name|prefix
argument_list|,
name|container
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XmpParsingException
argument_list|(
name|ErrorType
operator|.
name|Format
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|" in "
operator|+
name|prefix
operator|+
literal|":"
operator|+
name|name
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|nsFinder
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|manageDefinedType
parameter_list|(
name|XMPMetadata
name|xmp
parameter_list|,
name|Element
name|property
parameter_list|,
name|String
name|prefix
parameter_list|,
name|ComplexPropertyContainer
name|container
parameter_list|)
throws|throws
name|XmpParsingException
block|{
if|if
condition|(
name|DomHelper
operator|.
name|isParseTypeResource
argument_list|(
name|property
argument_list|)
condition|)
block|{
name|AbstractStructuredType
name|ast
init|=
name|parseLiDescription
argument_list|(
name|xmp
argument_list|,
name|DomHelper
operator|.
name|getQName
argument_list|(
name|property
argument_list|)
argument_list|,
name|property
argument_list|)
decl_stmt|;
name|ast
operator|.
name|setPrefix
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|container
operator|.
name|addProperty
argument_list|(
name|ast
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Element
name|inner
init|=
name|DomHelper
operator|.
name|getFirstChildElement
argument_list|(
name|property
argument_list|)
decl_stmt|;
if|if
condition|(
name|inner
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XmpParsingException
argument_list|(
name|ErrorType
operator|.
name|Format
argument_list|,
literal|"property should contain child element : "
operator|+
name|property
argument_list|)
throw|;
block|}
name|AbstractStructuredType
name|ast
init|=
name|parseLiDescription
argument_list|(
name|xmp
argument_list|,
name|DomHelper
operator|.
name|getQName
argument_list|(
name|property
argument_list|)
argument_list|,
name|inner
argument_list|)
decl_stmt|;
name|ast
operator|.
name|setPrefix
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|container
operator|.
name|addProperty
argument_list|(
name|ast
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|manageStructuredType
parameter_list|(
name|XMPMetadata
name|xmp
parameter_list|,
name|Element
name|property
parameter_list|,
name|String
name|prefix
parameter_list|,
name|ComplexPropertyContainer
name|container
parameter_list|)
throws|throws
name|XmpParsingException
block|{
if|if
condition|(
name|DomHelper
operator|.
name|isParseTypeResource
argument_list|(
name|property
argument_list|)
condition|)
block|{
name|AbstractStructuredType
name|ast
init|=
name|parseLiDescription
argument_list|(
name|xmp
argument_list|,
name|DomHelper
operator|.
name|getQName
argument_list|(
name|property
argument_list|)
argument_list|,
name|property
argument_list|)
decl_stmt|;
if|if
condition|(
name|ast
operator|!=
literal|null
condition|)
block|{
name|ast
operator|.
name|setPrefix
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|container
operator|.
name|addProperty
argument_list|(
name|ast
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Element
name|inner
init|=
name|DomHelper
operator|.
name|getFirstChildElement
argument_list|(
name|property
argument_list|)
decl_stmt|;
if|if
condition|(
name|inner
operator|!=
literal|null
condition|)
block|{
name|nsFinder
operator|.
name|push
argument_list|(
name|inner
argument_list|)
expr_stmt|;
name|AbstractStructuredType
name|ast
init|=
name|parseLiDescription
argument_list|(
name|xmp
argument_list|,
name|DomHelper
operator|.
name|getQName
argument_list|(
name|property
argument_list|)
argument_list|,
name|inner
argument_list|)
decl_stmt|;
name|ast
operator|.
name|setPrefix
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|container
operator|.
name|addProperty
argument_list|(
name|ast
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|manageSimpleType
parameter_list|(
name|XMPMetadata
name|xmp
parameter_list|,
name|Element
name|property
parameter_list|,
name|Types
name|type
parameter_list|,
name|ComplexPropertyContainer
name|container
parameter_list|)
throws|throws
name|XmpParsingException
block|{
name|TypeMapping
name|tm
init|=
name|xmp
operator|.
name|getTypeMapping
argument_list|()
decl_stmt|;
name|String
name|prefix
init|=
name|property
operator|.
name|getPrefix
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|property
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
name|String
name|namespace
init|=
name|property
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|AbstractSimpleProperty
name|sp
init|=
name|tm
operator|.
name|instanciateSimpleProperty
argument_list|(
name|namespace
argument_list|,
name|prefix
argument_list|,
name|name
argument_list|,
name|property
operator|.
name|getTextContent
argument_list|()
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|loadAttributes
argument_list|(
name|sp
argument_list|,
name|property
argument_list|)
expr_stmt|;
name|container
operator|.
name|addProperty
argument_list|(
name|sp
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|manageArray
parameter_list|(
name|XMPMetadata
name|xmp
parameter_list|,
name|Element
name|property
parameter_list|,
name|PropertyType
name|type
parameter_list|,
name|ComplexPropertyContainer
name|container
parameter_list|)
throws|throws
name|XmpParsingException
block|{
name|TypeMapping
name|tm
init|=
name|xmp
operator|.
name|getTypeMapping
argument_list|()
decl_stmt|;
name|String
name|prefix
init|=
name|property
operator|.
name|getPrefix
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|property
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
name|String
name|namespace
init|=
name|property
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|Element
name|bagOrSeq
init|=
name|DomHelper
operator|.
name|getUniqueElementChild
argument_list|(
name|property
argument_list|)
decl_stmt|;
comment|// ensure this is the good type of array
if|if
condition|(
name|bagOrSeq
operator|==
literal|null
condition|)
block|{
comment|// not an array
name|String
name|whatFound
init|=
literal|"nothing"
decl_stmt|;
if|if
condition|(
name|property
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|whatFound
operator|=
name|property
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
throw|throw
operator|new
name|XmpParsingException
argument_list|(
name|ErrorType
operator|.
name|Format
argument_list|,
literal|"Invalid array definition, expecting "
operator|+
name|type
operator|.
name|card
argument_list|()
operator|+
literal|" and found "
operator|+
name|whatFound
operator|+
literal|" [prefix="
operator|+
name|prefix
operator|+
literal|"; name="
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|bagOrSeq
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
name|type
operator|.
name|card
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
comment|// not the good array type
throw|throw
operator|new
name|XmpParsingException
argument_list|(
name|ErrorType
operator|.
name|Format
argument_list|,
literal|"Invalid array type, expecting "
operator|+
name|type
operator|.
name|card
argument_list|()
operator|+
literal|" and found "
operator|+
name|bagOrSeq
operator|.
name|getLocalName
argument_list|()
operator|+
literal|" [prefix="
operator|+
name|prefix
operator|+
literal|"; name="
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|ArrayProperty
name|array
init|=
name|tm
operator|.
name|createArrayProperty
argument_list|(
name|namespace
argument_list|,
name|prefix
argument_list|,
name|name
argument_list|,
name|type
operator|.
name|card
argument_list|()
argument_list|)
decl_stmt|;
name|container
operator|.
name|addProperty
argument_list|(
name|array
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Element
argument_list|>
name|lis
init|=
name|DomHelper
operator|.
name|getElementChildren
argument_list|(
name|bagOrSeq
argument_list|)
decl_stmt|;
for|for
control|(
name|Element
name|element
range|:
name|lis
control|)
block|{
name|QName
name|propertyQName
init|=
operator|new
name|QName
argument_list|(
name|element
operator|.
name|getLocalName
argument_list|()
argument_list|)
decl_stmt|;
name|AbstractField
name|ast
init|=
name|parseLiElement
argument_list|(
name|xmp
argument_list|,
name|propertyQName
argument_list|,
name|element
argument_list|)
decl_stmt|;
if|if
condition|(
name|ast
operator|!=
literal|null
condition|)
block|{
name|array
operator|.
name|addProperty
argument_list|(
name|ast
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|manageLangAlt
parameter_list|(
name|XMPMetadata
name|xmp
parameter_list|,
name|Element
name|property
parameter_list|,
name|ComplexPropertyContainer
name|container
parameter_list|)
throws|throws
name|XmpParsingException
block|{
name|manageArray
argument_list|(
name|xmp
argument_list|,
name|property
argument_list|,
name|TypeMapping
operator|.
name|createPropertyType
argument_list|(
name|Types
operator|.
name|LangAlt
argument_list|,
name|Cardinality
operator|.
name|Alt
argument_list|)
argument_list|,
name|container
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|parseDescriptionInner
parameter_list|(
name|XMPMetadata
name|xmp
parameter_list|,
name|Element
name|description
parameter_list|,
name|ComplexPropertyContainer
name|parentContainer
parameter_list|)
throws|throws
name|XmpParsingException
block|{
name|nsFinder
operator|.
name|push
argument_list|(
name|description
argument_list|)
expr_stmt|;
name|TypeMapping
name|tm
init|=
name|xmp
operator|.
name|getTypeMapping
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|Element
argument_list|>
name|properties
init|=
name|DomHelper
operator|.
name|getElementChildren
argument_list|(
name|description
argument_list|)
decl_stmt|;
for|for
control|(
name|Element
name|property
range|:
name|properties
control|)
block|{
name|String
name|name
init|=
name|property
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
name|PropertyType
name|dtype
init|=
name|checkPropertyDefinition
argument_list|(
name|xmp
argument_list|,
name|DomHelper
operator|.
name|getQName
argument_list|(
name|property
argument_list|)
argument_list|)
decl_stmt|;
name|PropertyType
name|ptype
init|=
name|tm
operator|.
name|getStructuredPropMapping
argument_list|(
name|dtype
operator|.
name|type
argument_list|()
argument_list|)
operator|.
name|getPropertyType
argument_list|(
name|name
argument_list|)
decl_stmt|;
comment|// create property
name|createProperty
argument_list|(
name|xmp
argument_list|,
name|property
argument_list|,
name|ptype
argument_list|,
name|parentContainer
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|nsFinder
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|AbstractField
name|parseLiElement
parameter_list|(
name|XMPMetadata
name|xmp
parameter_list|,
name|QName
name|descriptor
parameter_list|,
name|Element
name|liElement
parameter_list|)
throws|throws
name|XmpParsingException
block|{
if|if
condition|(
name|DomHelper
operator|.
name|isParseTypeResource
argument_list|(
name|liElement
argument_list|)
condition|)
block|{
return|return
name|parseLiDescription
argument_list|(
name|xmp
argument_list|,
name|descriptor
argument_list|,
name|liElement
argument_list|)
return|;
block|}
comment|// will find rdf:Description
name|Element
name|liChild
init|=
name|DomHelper
operator|.
name|getUniqueElementChild
argument_list|(
name|liElement
argument_list|)
decl_stmt|;
if|if
condition|(
name|liChild
operator|!=
literal|null
condition|)
block|{
name|nsFinder
operator|.
name|push
argument_list|(
name|liChild
argument_list|)
expr_stmt|;
return|return
name|parseLiDescription
argument_list|(
name|xmp
argument_list|,
name|descriptor
argument_list|,
name|liChild
argument_list|)
return|;
block|}
else|else
block|{
comment|// no child, so consider as simple text
name|String
name|text
init|=
name|liElement
operator|.
name|getTextContent
argument_list|()
decl_stmt|;
name|TypeMapping
name|tm
init|=
name|xmp
operator|.
name|getTypeMapping
argument_list|()
decl_stmt|;
name|AbstractSimpleProperty
name|sp
init|=
name|tm
operator|.
name|instanciateSimpleProperty
argument_list|(
name|descriptor
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|descriptor
operator|.
name|getPrefix
argument_list|()
argument_list|,
name|descriptor
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|text
argument_list|,
name|Types
operator|.
name|Text
argument_list|)
decl_stmt|;
name|loadAttributes
argument_list|(
name|sp
argument_list|,
name|liElement
argument_list|)
expr_stmt|;
return|return
name|sp
return|;
block|}
block|}
specifier|private
name|void
name|loadAttributes
parameter_list|(
name|AbstractField
name|sp
parameter_list|,
name|Element
name|element
parameter_list|)
block|{
name|NamedNodeMap
name|nnm
init|=
name|element
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nnm
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Attr
name|attr
init|=
operator|(
name|Attr
operator|)
name|nnm
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|XMLConstants
operator|.
name|XMLNS_ATTRIBUTE
operator|.
name|equals
argument_list|(
name|attr
operator|.
name|getPrefix
argument_list|()
argument_list|)
condition|)
block|{
comment|// do nothing
block|}
elseif|else
if|if
condition|(
name|XmpConstants
operator|.
name|DEFAULT_RDF_PREFIX
operator|.
name|equals
argument_list|(
name|attr
operator|.
name|getPrefix
argument_list|()
argument_list|)
operator|&&
name|XmpConstants
operator|.
name|ABOUT_NAME
operator|.
name|equals
argument_list|(
name|attr
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
comment|// set about
if|if
condition|(
name|sp
operator|instanceof
name|XMPSchema
condition|)
block|{
operator|(
operator|(
name|XMPSchema
operator|)
name|sp
operator|)
operator|.
name|setAboutAsSimple
argument_list|(
name|attr
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Attribute
name|attribute
init|=
operator|new
name|Attribute
argument_list|(
name|XMLConstants
operator|.
name|XML_NS_URI
argument_list|,
name|attr
operator|.
name|getLocalName
argument_list|()
argument_list|,
name|attr
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|sp
operator|.
name|setAttribute
argument_list|(
name|attribute
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|AbstractStructuredType
name|parseLiDescription
parameter_list|(
name|XMPMetadata
name|xmp
parameter_list|,
name|QName
name|descriptor
parameter_list|,
name|Element
name|liElement
parameter_list|)
throws|throws
name|XmpParsingException
block|{
name|TypeMapping
name|tm
init|=
name|xmp
operator|.
name|getTypeMapping
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Element
argument_list|>
name|elements
init|=
name|DomHelper
operator|.
name|getElementChildren
argument_list|(
name|liElement
argument_list|)
decl_stmt|;
if|if
condition|(
name|elements
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// The list is empty
return|return
literal|null
return|;
block|}
comment|// Instantiate abstract structured type with hint from first element
name|Element
name|first
init|=
name|elements
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|PropertyType
name|ctype
init|=
name|checkPropertyDefinition
argument_list|(
name|xmp
argument_list|,
name|DomHelper
operator|.
name|getQName
argument_list|(
name|first
argument_list|)
argument_list|)
decl_stmt|;
name|Types
name|tt
init|=
name|ctype
operator|.
name|type
argument_list|()
decl_stmt|;
name|AbstractStructuredType
name|ast
init|=
name|instanciateStructured
argument_list|(
name|tm
argument_list|,
name|tt
argument_list|,
name|descriptor
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|first
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
decl_stmt|;
name|ast
operator|.
name|setNamespace
argument_list|(
name|descriptor
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
name|ast
operator|.
name|setPrefix
argument_list|(
name|descriptor
operator|.
name|getPrefix
argument_list|()
argument_list|)
expr_stmt|;
name|PropertiesDescription
name|pm
decl_stmt|;
if|if
condition|(
name|tt
operator|.
name|isStructured
argument_list|()
condition|)
block|{
name|pm
operator|=
name|tm
operator|.
name|getStructuredPropMapping
argument_list|(
name|tt
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pm
operator|=
name|tm
operator|.
name|getDefinedDescriptionByNamespace
argument_list|(
name|first
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Element
name|element
range|:
name|elements
control|)
block|{
name|String
name|prefix
init|=
name|element
operator|.
name|getPrefix
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|element
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
name|String
name|namespace
init|=
name|element
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|PropertyType
name|type
init|=
name|pm
operator|.
name|getPropertyType
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
comment|// not defined
throw|throw
operator|new
name|XmpParsingException
argument_list|(
name|ErrorType
operator|.
name|NoType
argument_list|,
literal|"Type '"
operator|+
name|name
operator|+
literal|"' not defined in "
operator|+
name|element
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|card
argument_list|()
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|ArrayProperty
name|array
init|=
name|tm
operator|.
name|createArrayProperty
argument_list|(
name|namespace
argument_list|,
name|prefix
argument_list|,
name|name
argument_list|,
name|type
operator|.
name|card
argument_list|()
argument_list|)
decl_stmt|;
name|ast
operator|.
name|getContainer
argument_list|()
operator|.
name|addProperty
argument_list|(
name|array
argument_list|)
expr_stmt|;
name|Element
name|bagOrSeq
init|=
name|DomHelper
operator|.
name|getUniqueElementChild
argument_list|(
name|element
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Element
argument_list|>
name|lis
init|=
name|DomHelper
operator|.
name|getElementChildren
argument_list|(
name|bagOrSeq
argument_list|)
decl_stmt|;
for|for
control|(
name|Element
name|element2
range|:
name|lis
control|)
block|{
name|AbstractField
name|ast2
init|=
name|parseLiElement
argument_list|(
name|xmp
argument_list|,
name|descriptor
argument_list|,
name|element2
argument_list|)
decl_stmt|;
if|if
condition|(
name|ast2
operator|!=
literal|null
condition|)
block|{
name|array
operator|.
name|addProperty
argument_list|(
name|ast2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|type
argument_list|()
operator|.
name|isSimple
argument_list|()
condition|)
block|{
name|AbstractSimpleProperty
name|sp
init|=
name|tm
operator|.
name|instanciateSimpleProperty
argument_list|(
name|namespace
argument_list|,
name|prefix
argument_list|,
name|name
argument_list|,
name|element
operator|.
name|getTextContent
argument_list|()
argument_list|,
name|type
operator|.
name|type
argument_list|()
argument_list|)
decl_stmt|;
name|loadAttributes
argument_list|(
name|sp
argument_list|,
name|element
argument_list|)
expr_stmt|;
name|ast
operator|.
name|getContainer
argument_list|()
operator|.
name|addProperty
argument_list|(
name|sp
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|type
argument_list|()
operator|.
name|isStructured
argument_list|()
condition|)
block|{
comment|// create a new structured type
name|AbstractStructuredType
name|inner
init|=
name|instanciateStructured
argument_list|(
name|tm
argument_list|,
name|type
operator|.
name|type
argument_list|()
argument_list|,
name|name
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|inner
operator|.
name|setNamespace
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
name|inner
operator|.
name|setPrefix
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|ast
operator|.
name|getContainer
argument_list|()
operator|.
name|addProperty
argument_list|(
name|inner
argument_list|)
expr_stmt|;
name|ComplexPropertyContainer
name|cpc
init|=
name|inner
operator|.
name|getContainer
argument_list|()
decl_stmt|;
if|if
condition|(
name|DomHelper
operator|.
name|isParseTypeResource
argument_list|(
name|element
argument_list|)
condition|)
block|{
name|parseDescriptionInner
argument_list|(
name|xmp
argument_list|,
name|element
argument_list|,
name|cpc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Element
name|descElement
init|=
name|DomHelper
operator|.
name|getFirstChildElement
argument_list|(
name|element
argument_list|)
decl_stmt|;
if|if
condition|(
name|descElement
operator|!=
literal|null
condition|)
block|{
name|parseDescriptionInner
argument_list|(
name|xmp
argument_list|,
name|descElement
argument_list|,
name|cpc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|XmpParsingException
argument_list|(
name|ErrorType
operator|.
name|NoType
argument_list|,
literal|"Unidentified element to parse "
operator|+
name|element
operator|+
literal|" (type="
operator|+
name|type
operator|+
literal|")"
argument_list|)
throw|;
block|}
block|}
return|return
name|ast
return|;
block|}
specifier|private
name|XMPMetadata
name|parseInitialXpacket
parameter_list|(
name|ProcessingInstruction
name|pi
parameter_list|)
throws|throws
name|XmpParsingException
block|{
if|if
condition|(
operator|!
literal|"xpacket"
operator|.
name|equals
argument_list|(
name|pi
operator|.
name|getNodeName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XmpParsingException
argument_list|(
name|ErrorType
operator|.
name|XpacketBadStart
argument_list|,
literal|"Bad processing instruction name : "
operator|+
name|pi
operator|.
name|getNodeName
argument_list|()
argument_list|)
throw|;
block|}
name|String
name|data
init|=
name|pi
operator|.
name|getData
argument_list|()
decl_stmt|;
name|StringTokenizer
name|tokens
init|=
operator|new
name|StringTokenizer
argument_list|(
name|data
argument_list|,
literal|" "
argument_list|)
decl_stmt|;
name|String
name|id
init|=
literal|null
decl_stmt|;
name|String
name|begin
init|=
literal|null
decl_stmt|;
name|String
name|bytes
init|=
literal|null
decl_stmt|;
name|String
name|encoding
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|tokens
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|token
init|=
name|tokens
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|token
operator|.
name|endsWith
argument_list|(
literal|"\""
argument_list|)
operator|&&
operator|!
name|token
operator|.
name|endsWith
argument_list|(
literal|"\'"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XmpParsingException
argument_list|(
name|ErrorType
operator|.
name|XpacketBadStart
argument_list|,
literal|"Cannot understand PI data part : '"
operator|+
name|token
operator|+
literal|"'"
argument_list|)
throw|;
block|}
name|String
name|quote
init|=
name|token
operator|.
name|substring
argument_list|(
name|token
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
name|token
operator|.
name|indexOf
argument_list|(
literal|"="
operator|+
name|quote
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|XmpParsingException
argument_list|(
name|ErrorType
operator|.
name|XpacketBadStart
argument_list|,
literal|"Cannot understand PI data part : '"
operator|+
name|token
operator|+
literal|"'"
argument_list|)
throw|;
block|}
name|String
name|name
init|=
name|token
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|token
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|2
argument_list|,
name|token
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"id"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|id
operator|=
name|value
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"begin"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|begin
operator|=
name|value
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"bytes"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|bytes
operator|=
name|value
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"encoding"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|encoding
operator|=
name|value
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|XmpParsingException
argument_list|(
name|ErrorType
operator|.
name|XpacketBadStart
argument_list|,
literal|"Unknown attribute in xpacket PI : '"
operator|+
name|token
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
return|return
name|XMPMetadata
operator|.
name|createXMPMetadata
argument_list|(
name|begin
argument_list|,
name|id
argument_list|,
name|bytes
argument_list|,
name|encoding
argument_list|)
return|;
block|}
specifier|private
name|void
name|parseEndPacket
parameter_list|(
name|XMPMetadata
name|metadata
parameter_list|,
name|ProcessingInstruction
name|pi
parameter_list|)
throws|throws
name|XmpParsingException
block|{
name|String
name|xpackData
init|=
name|pi
operator|.
name|getData
argument_list|()
decl_stmt|;
comment|// end attribute must be present and placed in first
comment|// xmp spec says Other unrecognized attributes can follow, but
comment|// should be ignored
if|if
condition|(
name|xpackData
operator|.
name|startsWith
argument_list|(
literal|"end="
argument_list|)
condition|)
block|{
name|char
name|end
init|=
name|xpackData
operator|.
name|charAt
argument_list|(
literal|5
argument_list|)
decl_stmt|;
comment|// check value (5 for end='X')
if|if
condition|(
name|end
operator|!=
literal|'r'
operator|&&
name|end
operator|!=
literal|'w'
condition|)
block|{
throw|throw
operator|new
name|XmpParsingException
argument_list|(
name|ErrorType
operator|.
name|XpacketBadEnd
argument_list|,
literal|"Excepted xpacket 'end' attribute with value 'r' or 'w' "
argument_list|)
throw|;
block|}
else|else
block|{
name|metadata
operator|.
name|setEndXPacket
argument_list|(
name|Character
operator|.
name|toString
argument_list|(
name|end
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// should find end='r/w'
throw|throw
operator|new
name|XmpParsingException
argument_list|(
name|ErrorType
operator|.
name|XpacketBadEnd
argument_list|,
literal|"Excepted xpacket 'end' attribute (must be present and placed in first)"
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Element
name|findDescriptionsParent
parameter_list|(
name|Element
name|root
parameter_list|)
throws|throws
name|XmpParsingException
block|{
comment|// always<x:xmpmeta xmlns:x="adobe:ns:meta/">
name|expectNaming
argument_list|(
name|root
argument_list|,
literal|"adobe:ns:meta/"
argument_list|,
literal|"x"
argument_list|,
literal|"xmpmeta"
argument_list|)
expr_stmt|;
comment|// should only have one child
name|NodeList
name|nl
init|=
name|root
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
if|if
condition|(
name|nl
operator|.
name|getLength
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// empty description
throw|throw
operator|new
name|XmpParsingException
argument_list|(
name|ErrorType
operator|.
name|Format
argument_list|,
literal|"No rdf description found in xmp"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|nl
operator|.
name|getLength
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|// only expect one element
throw|throw
operator|new
name|XmpParsingException
argument_list|(
name|ErrorType
operator|.
name|Format
argument_list|,
literal|"More than one element found in x:xmpmeta"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
operator|!
operator|(
name|root
operator|.
name|getFirstChild
argument_list|()
operator|instanceof
name|Element
operator|)
condition|)
block|{
comment|// should be an element
throw|throw
operator|new
name|XmpParsingException
argument_list|(
name|ErrorType
operator|.
name|Format
argument_list|,
literal|"x:xmpmeta does not contains rdf:RDF element"
argument_list|)
throw|;
block|}
comment|// else let's parse
name|Element
name|rdfRdf
init|=
operator|(
name|Element
operator|)
name|root
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
comment|// always<rdf:RDF
comment|// xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
name|expectNaming
argument_list|(
name|rdfRdf
argument_list|,
name|XmpConstants
operator|.
name|RDF_NAMESPACE
argument_list|,
name|XmpConstants
operator|.
name|DEFAULT_RDF_PREFIX
argument_list|,
name|XmpConstants
operator|.
name|DEFAULT_RDF_LOCAL_NAME
argument_list|)
expr_stmt|;
comment|// return description parent
return|return
name|rdfRdf
return|;
block|}
specifier|private
name|void
name|expectNaming
parameter_list|(
name|Element
name|element
parameter_list|,
name|String
name|ns
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|ln
parameter_list|)
throws|throws
name|XmpParsingException
block|{
if|if
condition|(
operator|(
name|ns
operator|!=
literal|null
operator|)
operator|&&
operator|!
operator|(
name|ns
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|XmpParsingException
argument_list|(
name|ErrorType
operator|.
name|Format
argument_list|,
literal|"Expecting namespace '"
operator|+
name|ns
operator|+
literal|"' and found '"
operator|+
name|element
operator|.
name|getNamespaceURI
argument_list|()
operator|+
literal|"'"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
operator|(
name|prefix
operator|!=
literal|null
operator|)
operator|&&
operator|!
operator|(
name|prefix
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getPrefix
argument_list|()
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|XmpParsingException
argument_list|(
name|ErrorType
operator|.
name|Format
argument_list|,
literal|"Expecting prefix '"
operator|+
name|prefix
operator|+
literal|"' and found '"
operator|+
name|element
operator|.
name|getPrefix
argument_list|()
operator|+
literal|"'"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
operator|(
name|ln
operator|!=
literal|null
operator|)
operator|&&
operator|!
operator|(
name|ln
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getLocalName
argument_list|()
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|XmpParsingException
argument_list|(
name|ErrorType
operator|.
name|Format
argument_list|,
literal|"Expecting local name '"
operator|+
name|ln
operator|+
literal|"' and found '"
operator|+
name|element
operator|.
name|getLocalName
argument_list|()
operator|+
literal|"'"
argument_list|)
throw|;
block|}
comment|// else OK
block|}
comment|/**      * Remove all the comments node in the parent element of the parameter      *       * @param root      *            the first node of an element or document to clear      */
specifier|private
name|void
name|removeComments
parameter_list|(
name|Node
name|root
parameter_list|)
block|{
if|if
condition|(
name|root
operator|.
name|getChildNodes
argument_list|()
operator|.
name|getLength
argument_list|()
operator|<=
literal|1
condition|)
block|{
comment|// There is only one node so we do not remove it
return|return;
block|}
name|NodeList
name|nl
init|=
name|root
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nl
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|node
init|=
name|nl
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|instanceof
name|Comment
condition|)
block|{
comment|// remove the comment
name|root
operator|.
name|removeChild
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|node
operator|instanceof
name|Text
condition|)
block|{
if|if
condition|(
name|node
operator|.
name|getTextContent
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|root
operator|.
name|removeChild
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|node
operator|instanceof
name|Element
condition|)
block|{
comment|// clean child
name|removeComments
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
comment|// else do nothing
block|}
block|}
specifier|private
name|AbstractStructuredType
name|instanciateStructured
parameter_list|(
name|TypeMapping
name|tm
parameter_list|,
name|Types
name|type
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|structuredNamespace
parameter_list|)
throws|throws
name|XmpParsingException
block|{
try|try
block|{
if|if
condition|(
name|type
operator|.
name|isStructured
argument_list|()
condition|)
block|{
return|return
name|tm
operator|.
name|instanciateStructuredType
argument_list|(
name|type
argument_list|,
name|name
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|isDefined
argument_list|()
condition|)
block|{
return|return
name|tm
operator|.
name|instanciateDefinedType
argument_list|(
name|name
argument_list|,
name|structuredNamespace
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|XmpParsingException
argument_list|(
name|ErrorType
operator|.
name|InvalidType
argument_list|,
literal|"Type not structured : "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|BadFieldValueException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XmpParsingException
argument_list|(
name|ErrorType
operator|.
name|InvalidType
argument_list|,
literal|"Parsing failed"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|PropertyType
name|checkPropertyDefinition
parameter_list|(
name|XMPMetadata
name|xmp
parameter_list|,
name|QName
name|prop
parameter_list|)
throws|throws
name|XmpParsingException
block|{
name|TypeMapping
name|tm
init|=
name|xmp
operator|.
name|getTypeMapping
argument_list|()
decl_stmt|;
comment|// test if namespace is set in xml
if|if
condition|(
operator|!
name|nsFinder
operator|.
name|containsNamespace
argument_list|(
name|prop
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XmpParsingException
argument_list|(
name|ErrorType
operator|.
name|NoSchema
argument_list|,
literal|"Schema is not set in this document : "
operator|+
name|prop
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
throw|;
block|}
comment|// test if namespace is defined
name|String
name|nsuri
init|=
name|prop
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|tm
operator|.
name|isDefinedNamespace
argument_list|(
name|nsuri
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XmpParsingException
argument_list|(
name|ErrorType
operator|.
name|NoSchema
argument_list|,
literal|"Cannot find a definition for the namespace "
operator|+
name|prop
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
throw|;
block|}
try|try
block|{
return|return
name|tm
operator|.
name|getSpecifiedPropertyType
argument_list|(
name|prop
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|BadFieldValueException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XmpParsingException
argument_list|(
name|ErrorType
operator|.
name|InvalidType
argument_list|,
literal|"Failed to retreive property definition"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
class|class
name|NamespaceFinder
block|{
specifier|private
specifier|final
name|Stack
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|stack
init|=
operator|new
name|Stack
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|void
name|push
parameter_list|(
name|Element
name|description
parameter_list|)
block|{
name|NamedNodeMap
name|nnm
init|=
name|description
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|nnm
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|nnm
operator|.
name|getLength
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Attr
name|no
init|=
operator|(
name|Attr
operator|)
name|nnm
operator|.
name|item
argument_list|(
name|j
argument_list|)
decl_stmt|;
comment|// if ns definition add it
if|if
condition|(
name|XMLConstants
operator|.
name|XMLNS_ATTRIBUTE_NS_URI
operator|.
name|equals
argument_list|(
name|no
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|no
operator|.
name|getLocalName
argument_list|()
argument_list|,
name|no
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|stack
operator|.
name|push
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|pop
parameter_list|()
block|{
return|return
name|stack
operator|.
name|pop
argument_list|()
return|;
block|}
specifier|protected
name|boolean
name|containsNamespace
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
name|stack
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|stack
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|.
name|containsValue
argument_list|(
name|namespace
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
comment|// else namespace not found
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

