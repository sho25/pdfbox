begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|XMPMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|PDFAExtensionSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|XMPSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|XMPSchemaFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|AbstractField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|AbstractStructuredType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|ArrayProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|Cardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|DefinedStructuredType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|PDFAFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|PDFAPropertyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|PDFASchemaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|PDFATypeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|PropertiesDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|StructuredType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|TypeMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|xml
operator|.
name|XmpParsingException
operator|.
name|ErrorType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Attr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NamedNodeMap
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|PdfaExtensionHelper
block|{
specifier|private
name|PdfaExtensionHelper
parameter_list|()
block|{}
specifier|public
specifier|static
name|void
name|validateNaming
parameter_list|(
name|XMPMetadata
name|meta
parameter_list|,
name|Element
name|description
parameter_list|)
throws|throws
name|XmpParsingException
block|{
name|NamedNodeMap
name|nnm
init|=
name|description
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nnm
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Attr
name|attr
init|=
operator|(
name|Attr
operator|)
name|nnm
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|checkNamespaceDeclaration
argument_list|(
name|attr
argument_list|,
name|PDFAExtensionSchema
operator|.
name|class
argument_list|)
expr_stmt|;
name|checkNamespaceDeclaration
argument_list|(
name|attr
argument_list|,
name|PDFAFieldType
operator|.
name|class
argument_list|)
expr_stmt|;
name|checkNamespaceDeclaration
argument_list|(
name|attr
argument_list|,
name|PDFAPropertyType
operator|.
name|class
argument_list|)
expr_stmt|;
name|checkNamespaceDeclaration
argument_list|(
name|attr
argument_list|,
name|PDFASchemaType
operator|.
name|class
argument_list|)
expr_stmt|;
name|checkNamespaceDeclaration
argument_list|(
name|attr
argument_list|,
name|PDFATypeType
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|checkNamespaceDeclaration
parameter_list|(
name|Attr
name|attr
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|AbstractStructuredType
argument_list|>
name|clz
parameter_list|)
throws|throws
name|XmpParsingException
block|{
name|String
name|prefix
init|=
name|attr
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
name|String
name|namespace
init|=
name|attr
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|cprefix
init|=
name|clz
operator|.
name|getAnnotation
argument_list|(
name|StructuredType
operator|.
name|class
argument_list|)
operator|.
name|preferedPrefix
argument_list|()
decl_stmt|;
name|String
name|cnamespace
init|=
name|clz
operator|.
name|getAnnotation
argument_list|(
name|StructuredType
operator|.
name|class
argument_list|)
operator|.
name|namespace
argument_list|()
decl_stmt|;
comment|// check extension
if|if
condition|(
name|cprefix
operator|.
name|equals
argument_list|(
name|prefix
argument_list|)
operator|&&
operator|!
name|cnamespace
operator|.
name|equals
argument_list|(
name|namespace
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XmpParsingException
argument_list|(
name|ErrorType
operator|.
name|InvalidPdfaSchema
argument_list|,
literal|"Invalid PDF/A namespace definition"
argument_list|)
throw|;
block|}
comment|// else good match
if|if
condition|(
name|cnamespace
operator|.
name|equals
argument_list|(
name|namespace
argument_list|)
operator|&&
operator|!
name|cprefix
operator|.
name|equals
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XmpParsingException
argument_list|(
name|ErrorType
operator|.
name|InvalidPdfaSchema
argument_list|,
literal|"Invalid PDF/A namespace definition"
argument_list|)
throw|;
block|}
comment|// else good match
block|}
specifier|public
specifier|static
name|void
name|populateSchemaMapping
parameter_list|(
name|XMPMetadata
name|meta
parameter_list|)
throws|throws
name|XmpParsingException
block|{
name|List
argument_list|<
name|XMPSchema
argument_list|>
name|schems
init|=
name|meta
operator|.
name|getAllSchemas
argument_list|()
decl_stmt|;
name|TypeMapping
name|tm
init|=
name|meta
operator|.
name|getTypeMapping
argument_list|()
decl_stmt|;
name|StructuredType
name|stPdfaExt
init|=
name|PDFAExtensionSchema
operator|.
name|class
operator|.
name|getAnnotation
argument_list|(
name|StructuredType
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|XMPSchema
name|xmpSchema
range|:
name|schems
control|)
block|{
if|if
condition|(
name|xmpSchema
operator|.
name|getNamespace
argument_list|()
operator|.
name|equals
argument_list|(
name|stPdfaExt
operator|.
name|namespace
argument_list|()
argument_list|)
condition|)
block|{
comment|// ensure the prefix is the preferred one (cannot use other definition)
if|if
condition|(
operator|!
name|xmpSchema
operator|.
name|getPrefix
argument_list|()
operator|.
name|equals
argument_list|(
name|stPdfaExt
operator|.
name|preferedPrefix
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XmpParsingException
argument_list|(
name|ErrorType
operator|.
name|InvalidPrefix
argument_list|,
literal|"Found invalid prefix for PDF/A extension, found '"
operator|+
name|xmpSchema
operator|.
name|getPrefix
argument_list|()
operator|+
literal|"', should be '"
operator|+
name|stPdfaExt
operator|.
name|preferedPrefix
argument_list|()
operator|+
literal|"'"
argument_list|)
throw|;
block|}
comment|// create schema and types
name|PDFAExtensionSchema
name|pes
init|=
operator|(
name|PDFAExtensionSchema
operator|)
name|xmpSchema
decl_stmt|;
name|ArrayProperty
name|sp
init|=
name|pes
operator|.
name|getSchemasProperty
argument_list|()
decl_stmt|;
for|for
control|(
name|AbstractField
name|af
range|:
name|sp
operator|.
name|getAllProperties
argument_list|()
control|)
block|{
if|if
condition|(
name|af
operator|instanceof
name|PDFASchemaType
condition|)
block|{
name|PDFASchemaType
name|st
init|=
operator|(
name|PDFASchemaType
operator|)
name|af
decl_stmt|;
name|String
name|namespaceUri
init|=
name|st
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|String
name|prefix
init|=
name|st
operator|.
name|getPrefixValue
argument_list|()
decl_stmt|;
name|ArrayProperty
name|properties
init|=
name|st
operator|.
name|getProperty
argument_list|()
decl_stmt|;
name|ArrayProperty
name|valueTypes
init|=
name|st
operator|.
name|getValueType
argument_list|()
decl_stmt|;
name|XMPSchemaFactory
name|xsf
init|=
name|tm
operator|.
name|getSchemaFactory
argument_list|(
name|namespaceUri
argument_list|)
decl_stmt|;
comment|// retrieve namespaces
if|if
condition|(
name|xsf
operator|==
literal|null
condition|)
block|{
comment|// create namespace with no field
name|tm
operator|.
name|addNewNameSpace
argument_list|(
name|namespaceUri
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
name|xsf
operator|=
name|tm
operator|.
name|getSchemaFactory
argument_list|(
name|namespaceUri
argument_list|)
expr_stmt|;
block|}
comment|// populate value type
if|if
condition|(
name|valueTypes
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AbstractField
name|af2
range|:
name|valueTypes
operator|.
name|getAllProperties
argument_list|()
control|)
block|{
if|if
condition|(
name|af2
operator|instanceof
name|PDFATypeType
condition|)
block|{
name|PDFATypeType
name|type
init|=
operator|(
name|PDFATypeType
operator|)
name|af2
decl_stmt|;
name|String
name|ttype
init|=
name|type
operator|.
name|getType
argument_list|()
decl_stmt|;
name|String
name|tns
init|=
name|type
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|String
name|tprefix
init|=
name|type
operator|.
name|getPrefixValue
argument_list|()
decl_stmt|;
name|String
name|tdescription
init|=
name|type
operator|.
name|getDescription
argument_list|()
decl_stmt|;
name|ArrayProperty
name|fields
init|=
name|type
operator|.
name|getFields
argument_list|()
decl_stmt|;
if|if
condition|(
name|ttype
operator|==
literal|null
operator|||
name|tns
operator|==
literal|null
operator|||
name|tprefix
operator|==
literal|null
operator|||
name|tdescription
operator|==
literal|null
condition|)
block|{
comment|// all fields are mandatory
throw|throw
operator|new
name|XmpParsingException
argument_list|(
name|ErrorType
operator|.
name|RequiredProperty
argument_list|,
literal|"Missing field in type definition"
argument_list|)
throw|;
block|}
comment|// create the structured type
name|DefinedStructuredType
name|structuredType
init|=
operator|new
name|DefinedStructuredType
argument_list|(
name|meta
argument_list|,
name|tns
argument_list|,
name|tprefix
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// TODO maybe a name exists
if|if
condition|(
name|fields
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|AbstractField
argument_list|>
name|definedFields
init|=
name|fields
operator|.
name|getAllProperties
argument_list|()
decl_stmt|;
for|for
control|(
name|AbstractField
name|af3
range|:
name|definedFields
control|)
block|{
if|if
condition|(
name|af3
operator|instanceof
name|PDFAFieldType
condition|)
block|{
name|PDFAFieldType
name|field
init|=
operator|(
name|PDFAFieldType
operator|)
name|af3
decl_stmt|;
name|String
name|fName
init|=
name|field
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|fDescription
init|=
name|field
operator|.
name|getDescription
argument_list|()
decl_stmt|;
name|String
name|fValueType
init|=
name|field
operator|.
name|getValueType
argument_list|()
decl_stmt|;
if|if
condition|(
name|fName
operator|==
literal|null
operator|||
name|fDescription
operator|==
literal|null
operator|||
name|fValueType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XmpParsingException
argument_list|(
name|ErrorType
operator|.
name|RequiredProperty
argument_list|,
literal|"Missing field in field definition"
argument_list|)
throw|;
block|}
try|try
block|{
name|Types
name|fValue
init|=
name|Types
operator|.
name|valueOf
argument_list|(
name|fValueType
argument_list|)
decl_stmt|;
name|structuredType
operator|.
name|addProperty
argument_list|(
name|fName
argument_list|,
name|TypeMapping
operator|.
name|createPropertyType
argument_list|(
name|fValue
argument_list|,
name|Cardinality
operator|.
name|Simple
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XmpParsingException
argument_list|(
name|ErrorType
operator|.
name|NoValueType
argument_list|,
literal|"Type not defined : "
operator|+
name|fValueType
argument_list|,
name|e
argument_list|)
throw|;
comment|// TODO could fValueType be a structured type ?
block|}
block|}
comment|// else TODO
block|}
block|}
comment|// add the structured type to list
name|PropertiesDescription
name|pm
init|=
operator|new
name|PropertiesDescription
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|PropertyType
argument_list|>
name|entry
range|:
name|structuredType
operator|.
name|getDefinedProperties
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|pm
operator|.
name|addNewProperty
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|tm
operator|.
name|addToDefinedStructuredTypes
argument_list|(
name|ttype
argument_list|,
name|tns
argument_list|,
name|pm
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// populate properties
for|for
control|(
name|AbstractField
name|af2
range|:
name|properties
operator|.
name|getAllProperties
argument_list|()
control|)
block|{
if|if
condition|(
name|af2
operator|instanceof
name|PDFAPropertyType
condition|)
block|{
name|PDFAPropertyType
name|property
init|=
operator|(
name|PDFAPropertyType
operator|)
name|af2
decl_stmt|;
name|String
name|pname
init|=
name|property
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|ptype
init|=
name|property
operator|.
name|getValueType
argument_list|()
decl_stmt|;
name|String
name|pdescription
init|=
name|property
operator|.
name|getDescription
argument_list|()
decl_stmt|;
name|String
name|pCategory
init|=
name|property
operator|.
name|getCategory
argument_list|()
decl_stmt|;
comment|// check all mandatory fields are OK
if|if
condition|(
name|pname
operator|==
literal|null
operator|||
name|ptype
operator|==
literal|null
operator|||
name|pdescription
operator|==
literal|null
operator|||
name|pCategory
operator|==
literal|null
condition|)
block|{
comment|// all fields are mandatory
throw|throw
operator|new
name|XmpParsingException
argument_list|(
name|ErrorType
operator|.
name|RequiredProperty
argument_list|,
literal|"Missing field in property definition"
argument_list|)
throw|;
block|}
comment|// check ptype existance
name|PropertyType
name|pt
init|=
name|transformValueType
argument_list|(
name|tm
argument_list|,
name|ptype
argument_list|)
decl_stmt|;
if|if
condition|(
name|pt
operator|.
name|type
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XmpParsingException
argument_list|(
name|ErrorType
operator|.
name|NoValueType
argument_list|,
literal|"Type not defined : "
operator|+
name|ptype
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|pt
operator|.
name|type
argument_list|()
operator|.
name|isSimple
argument_list|()
operator|||
name|pt
operator|.
name|type
argument_list|()
operator|.
name|isStructured
argument_list|()
operator|||
name|pt
operator|.
name|type
argument_list|()
operator|==
name|Types
operator|.
name|DefinedType
condition|)
block|{
name|xsf
operator|.
name|getPropertyDefinition
argument_list|()
operator|.
name|addNewProperty
argument_list|(
name|pname
argument_list|,
name|pt
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|XmpParsingException
argument_list|(
name|ErrorType
operator|.
name|NoValueType
argument_list|,
literal|"Type not defined : "
operator|+
name|ptype
argument_list|)
throw|;
block|}
block|}
comment|// TODO unmanaged ?
block|}
block|}
comment|// TODO unmanaged ?
block|}
block|}
block|}
block|}
specifier|private
specifier|static
name|PropertyType
name|transformValueType
parameter_list|(
name|TypeMapping
name|tm
parameter_list|,
name|String
name|valueType
parameter_list|)
throws|throws
name|XmpParsingException
block|{
if|if
condition|(
literal|"Lang Alt"
operator|.
name|equals
argument_list|(
name|valueType
argument_list|)
condition|)
block|{
return|return
name|TypeMapping
operator|.
name|createPropertyType
argument_list|(
name|Types
operator|.
name|LangAlt
argument_list|,
name|Cardinality
operator|.
name|Simple
argument_list|)
return|;
block|}
comment|// else all other cases
name|int
name|pos
init|=
name|valueType
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
name|Cardinality
name|card
init|=
name|Cardinality
operator|.
name|Simple
decl_stmt|;
if|if
condition|(
name|pos
operator|>
literal|0
condition|)
block|{
name|String
name|scard
init|=
name|valueType
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"seq"
operator|.
name|equals
argument_list|(
name|scard
argument_list|)
condition|)
block|{
name|card
operator|=
name|Cardinality
operator|.
name|Seq
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"bag"
operator|.
name|equals
argument_list|(
name|scard
argument_list|)
condition|)
block|{
name|card
operator|=
name|Cardinality
operator|.
name|Bag
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"alt"
operator|.
name|equals
argument_list|(
name|scard
argument_list|)
condition|)
block|{
name|card
operator|=
name|Cardinality
operator|.
name|Alt
expr_stmt|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
name|String
name|vt
init|=
name|valueType
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
decl_stmt|;
name|Types
name|type
init|=
literal|null
decl_stmt|;
try|try
block|{
name|type
operator|=
name|pos
operator|<
literal|0
condition|?
name|Types
operator|.
name|valueOf
argument_list|(
name|valueType
argument_list|)
else|:
name|Types
operator|.
name|valueOf
argument_list|(
name|vt
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
if|if
condition|(
name|tm
operator|.
name|isDefinedType
argument_list|(
name|vt
argument_list|)
condition|)
block|{
name|type
operator|=
name|Types
operator|.
name|DefinedType
expr_stmt|;
block|}
block|}
return|return
name|TypeMapping
operator|.
name|createPropertyType
argument_list|(
name|type
argument_list|,
name|card
argument_list|)
return|;
block|}
block|}
end_class

end_unit

