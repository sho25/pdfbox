begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|OutputKeys
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Transformer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|XMPMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|XmpConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|XMPSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|AbstractComplexProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|AbstractField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|AbstractSimpleProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|AbstractStructuredType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|ArrayProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|ProcessingInstruction
import|;
end_import

begin_class
specifier|public
class|class
name|XmpSerializer
block|{
specifier|private
name|DocumentBuilder
name|documentBuilder
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|parseTypeResourceForLi
init|=
literal|true
decl_stmt|;
specifier|public
name|XmpSerializer
parameter_list|()
block|{
comment|// xml init
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"squid:S2755"
block|}
argument_list|)
comment|// self-created XML
name|DocumentBuilderFactory
name|builderFactory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
try|try
block|{
name|documentBuilder
operator|=
name|builderFactory
operator|.
name|newDocumentBuilder
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
comment|// never happens, because we don't call builderFactory#setAttribute
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|serialize
parameter_list|(
name|XMPMetadata
name|metadata
parameter_list|,
name|OutputStream
name|os
parameter_list|,
name|boolean
name|withXpacket
parameter_list|)
throws|throws
name|TransformerException
block|{
name|Document
name|doc
init|=
name|documentBuilder
operator|.
name|newDocument
argument_list|()
decl_stmt|;
comment|// fill document
name|Element
name|rdf
init|=
name|createRdfElement
argument_list|(
name|doc
argument_list|,
name|metadata
argument_list|,
name|withXpacket
argument_list|)
decl_stmt|;
for|for
control|(
name|XMPSchema
name|schema
range|:
name|metadata
operator|.
name|getAllSchemas
argument_list|()
control|)
block|{
name|rdf
operator|.
name|appendChild
argument_list|(
name|serializeSchema
argument_list|(
name|doc
argument_list|,
name|schema
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// save
name|save
argument_list|(
name|doc
argument_list|,
name|os
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Element
name|serializeSchema
parameter_list|(
name|Document
name|doc
parameter_list|,
name|XMPSchema
name|schema
parameter_list|)
block|{
comment|// prepare schema
name|Element
name|selem
init|=
name|doc
operator|.
name|createElementNS
argument_list|(
name|XmpConstants
operator|.
name|RDF_NAMESPACE
argument_list|,
literal|"rdf:Description"
argument_list|)
decl_stmt|;
name|selem
operator|.
name|setAttributeNS
argument_list|(
name|XmpConstants
operator|.
name|RDF_NAMESPACE
argument_list|,
literal|"rdf:about"
argument_list|,
name|schema
operator|.
name|getAboutValue
argument_list|()
argument_list|)
expr_stmt|;
name|selem
operator|.
name|setAttributeNS
argument_list|(
name|XMLConstants
operator|.
name|XMLNS_ATTRIBUTE_NS_URI
argument_list|,
literal|"xmlns:"
operator|+
name|schema
operator|.
name|getPrefix
argument_list|()
argument_list|,
name|schema
operator|.
name|getNamespace
argument_list|()
argument_list|)
expr_stmt|;
comment|// the other attributes
name|fillElementWithAttributes
argument_list|(
name|selem
argument_list|,
name|schema
argument_list|)
expr_stmt|;
comment|// the content
name|List
argument_list|<
name|AbstractField
argument_list|>
name|fields
init|=
name|schema
operator|.
name|getAllProperties
argument_list|()
decl_stmt|;
name|serializeFields
argument_list|(
name|doc
argument_list|,
name|selem
argument_list|,
name|fields
argument_list|,
name|schema
operator|.
name|getPrefix
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// return created schema
return|return
name|selem
return|;
block|}
specifier|public
name|void
name|serializeFields
parameter_list|(
name|Document
name|doc
parameter_list|,
name|Element
name|parent
parameter_list|,
name|List
argument_list|<
name|AbstractField
argument_list|>
name|fields
parameter_list|,
name|String
name|resourceNS
parameter_list|,
name|String
name|prefix
parameter_list|,
name|boolean
name|wrapWithProperty
parameter_list|)
block|{
for|for
control|(
name|AbstractField
name|field
range|:
name|fields
control|)
block|{
if|if
condition|(
name|field
operator|instanceof
name|AbstractSimpleProperty
condition|)
block|{
name|AbstractSimpleProperty
name|simple
init|=
operator|(
name|AbstractSimpleProperty
operator|)
name|field
decl_stmt|;
name|String
name|localPrefix
decl_stmt|;
if|if
condition|(
name|prefix
operator|!=
literal|null
operator|&&
operator|!
name|prefix
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|localPrefix
operator|=
name|prefix
expr_stmt|;
block|}
else|else
block|{
name|localPrefix
operator|=
name|simple
operator|.
name|getPrefix
argument_list|()
expr_stmt|;
block|}
name|Element
name|esimple
init|=
name|doc
operator|.
name|createElement
argument_list|(
name|localPrefix
operator|+
literal|":"
operator|+
name|simple
operator|.
name|getPropertyName
argument_list|()
argument_list|)
decl_stmt|;
name|esimple
operator|.
name|setTextContent
argument_list|(
name|simple
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Attribute
argument_list|>
name|attributes
init|=
name|simple
operator|.
name|getAllAttributes
argument_list|()
decl_stmt|;
for|for
control|(
name|Attribute
name|attribute
range|:
name|attributes
control|)
block|{
name|esimple
operator|.
name|setAttributeNS
argument_list|(
name|attribute
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|attribute
operator|.
name|getName
argument_list|()
argument_list|,
name|attribute
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|parent
operator|.
name|appendChild
argument_list|(
name|esimple
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|field
operator|instanceof
name|ArrayProperty
condition|)
block|{
name|ArrayProperty
name|array
init|=
operator|(
name|ArrayProperty
operator|)
name|field
decl_stmt|;
comment|// property
name|Element
name|asimple
init|=
name|doc
operator|.
name|createElement
argument_list|(
name|array
operator|.
name|getPrefix
argument_list|()
operator|+
literal|":"
operator|+
name|array
operator|.
name|getPropertyName
argument_list|()
argument_list|)
decl_stmt|;
name|parent
operator|.
name|appendChild
argument_list|(
name|asimple
argument_list|)
expr_stmt|;
comment|// attributes
name|fillElementWithAttributes
argument_list|(
name|asimple
argument_list|,
name|array
argument_list|)
expr_stmt|;
comment|// the array definition
name|Element
name|econtainer
init|=
name|doc
operator|.
name|createElement
argument_list|(
name|XmpConstants
operator|.
name|DEFAULT_RDF_PREFIX
operator|+
literal|":"
operator|+
name|array
operator|.
name|getArrayType
argument_list|()
argument_list|)
decl_stmt|;
name|asimple
operator|.
name|appendChild
argument_list|(
name|econtainer
argument_list|)
expr_stmt|;
comment|// for each element of the array
name|List
argument_list|<
name|AbstractField
argument_list|>
name|innerFields
init|=
name|array
operator|.
name|getAllProperties
argument_list|()
decl_stmt|;
name|serializeFields
argument_list|(
name|doc
argument_list|,
name|econtainer
argument_list|,
name|innerFields
argument_list|,
name|resourceNS
argument_list|,
name|XmpConstants
operator|.
name|DEFAULT_RDF_PREFIX
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|field
operator|instanceof
name|AbstractStructuredType
condition|)
block|{
name|AbstractStructuredType
name|structured
init|=
operator|(
name|AbstractStructuredType
operator|)
name|field
decl_stmt|;
name|List
argument_list|<
name|AbstractField
argument_list|>
name|innerFields
init|=
name|structured
operator|.
name|getAllProperties
argument_list|()
decl_stmt|;
comment|// property name attribute
name|Element
name|listParent
init|=
name|parent
decl_stmt|;
if|if
condition|(
name|wrapWithProperty
condition|)
block|{
name|Element
name|nstructured
init|=
name|doc
operator|.
name|createElement
argument_list|(
name|resourceNS
operator|+
literal|":"
operator|+
name|structured
operator|.
name|getPropertyName
argument_list|()
argument_list|)
decl_stmt|;
name|parent
operator|.
name|appendChild
argument_list|(
name|nstructured
argument_list|)
expr_stmt|;
name|listParent
operator|=
name|nstructured
expr_stmt|;
block|}
comment|// element li
name|Element
name|estructured
init|=
name|doc
operator|.
name|createElement
argument_list|(
name|XmpConstants
operator|.
name|DEFAULT_RDF_PREFIX
operator|+
literal|":"
operator|+
name|XmpConstants
operator|.
name|LIST_NAME
argument_list|)
decl_stmt|;
name|listParent
operator|.
name|appendChild
argument_list|(
name|estructured
argument_list|)
expr_stmt|;
if|if
condition|(
name|parseTypeResourceForLi
condition|)
block|{
name|estructured
operator|.
name|setAttribute
argument_list|(
literal|"rdf:parseType"
argument_list|,
literal|"Resource"
argument_list|)
expr_stmt|;
comment|// all properties
name|serializeFields
argument_list|(
name|doc
argument_list|,
name|estructured
argument_list|,
name|innerFields
argument_list|,
name|resourceNS
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// element description
name|Element
name|econtainer
init|=
name|doc
operator|.
name|createElement
argument_list|(
name|XmpConstants
operator|.
name|DEFAULT_RDF_PREFIX
operator|+
literal|":"
operator|+
literal|"Description"
argument_list|)
decl_stmt|;
name|estructured
operator|.
name|appendChild
argument_list|(
name|econtainer
argument_list|)
expr_stmt|;
comment|// all properties
name|serializeFields
argument_list|(
name|doc
argument_list|,
name|econtainer
argument_list|,
name|innerFields
argument_list|,
name|resourceNS
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// XXX finish serialization classes
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|">> TODO>> "
operator|+
name|field
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|fillElementWithAttributes
parameter_list|(
name|Element
name|target
parameter_list|,
name|AbstractComplexProperty
name|property
parameter_list|)
block|{
comment|// normalize the attributes list
name|List
argument_list|<
name|Attribute
argument_list|>
name|toSerialize
init|=
name|normalizeAttributes
argument_list|(
name|property
argument_list|)
decl_stmt|;
for|for
control|(
name|Attribute
name|attribute
range|:
name|toSerialize
control|)
block|{
if|if
condition|(
name|XmpConstants
operator|.
name|RDF_NAMESPACE
operator|.
name|equals
argument_list|(
name|attribute
operator|.
name|getNamespace
argument_list|()
argument_list|)
condition|)
block|{
name|target
operator|.
name|setAttribute
argument_list|(
name|XmpConstants
operator|.
name|DEFAULT_RDF_PREFIX
operator|+
literal|":"
operator|+
name|attribute
operator|.
name|getName
argument_list|()
argument_list|,
name|attribute
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|target
operator|.
name|setAttribute
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|,
name|attribute
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ns
range|:
name|property
operator|.
name|getAllNamespacesWithPrefix
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|target
operator|.
name|setAttribute
argument_list|(
name|XMLConstants
operator|.
name|XMLNS_ATTRIBUTE
operator|+
literal|":"
operator|+
name|ns
operator|.
name|getValue
argument_list|()
argument_list|,
name|ns
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Normalize the list of attributes.      *       * Attributes which match a schema property are serialized as child elements      * so only return the ones which do not match a schema property      *       * @param property the property that needs to be inspected      * @return the list of attributed for serializing      */
specifier|private
name|List
argument_list|<
name|Attribute
argument_list|>
name|normalizeAttributes
parameter_list|(
name|AbstractComplexProperty
name|property
parameter_list|)
block|{
name|List
argument_list|<
name|Attribute
argument_list|>
name|attributes
init|=
name|property
operator|.
name|getAllAttributes
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Attribute
argument_list|>
name|toSerialize
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AbstractField
argument_list|>
name|fields
init|=
name|property
operator|.
name|getAllProperties
argument_list|()
decl_stmt|;
for|for
control|(
name|Attribute
name|attribute
range|:
name|attributes
control|)
block|{
name|boolean
name|matchesField
init|=
literal|false
decl_stmt|;
for|for
control|(
name|AbstractField
name|field
range|:
name|fields
control|)
block|{
if|if
condition|(
name|attribute
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|field
operator|.
name|getPropertyName
argument_list|()
argument_list|)
operator|==
literal|0
condition|)
block|{
name|matchesField
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|matchesField
condition|)
block|{
name|toSerialize
operator|.
name|add
argument_list|(
name|attribute
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|toSerialize
return|;
block|}
specifier|protected
name|Element
name|createRdfElement
parameter_list|(
name|Document
name|doc
parameter_list|,
name|XMPMetadata
name|metadata
parameter_list|,
name|boolean
name|withXpacket
parameter_list|)
block|{
comment|// starting xpacket
if|if
condition|(
name|withXpacket
condition|)
block|{
name|ProcessingInstruction
name|beginXPacket
init|=
name|doc
operator|.
name|createProcessingInstruction
argument_list|(
literal|"xpacket"
argument_list|,
literal|"begin=\""
operator|+
name|metadata
operator|.
name|getXpacketBegin
argument_list|()
operator|+
literal|"\" id=\""
operator|+
name|metadata
operator|.
name|getXpacketId
argument_list|()
operator|+
literal|"\""
argument_list|)
decl_stmt|;
name|doc
operator|.
name|appendChild
argument_list|(
name|beginXPacket
argument_list|)
expr_stmt|;
block|}
comment|// meta element
name|Element
name|xmpmeta
init|=
name|doc
operator|.
name|createElementNS
argument_list|(
literal|"adobe:ns:meta/"
argument_list|,
literal|"x:xmpmeta"
argument_list|)
decl_stmt|;
name|xmpmeta
operator|.
name|setAttributeNS
argument_list|(
name|XMLConstants
operator|.
name|XMLNS_ATTRIBUTE_NS_URI
argument_list|,
literal|"xmlns:x"
argument_list|,
literal|"adobe:ns:meta/"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|appendChild
argument_list|(
name|xmpmeta
argument_list|)
expr_stmt|;
comment|// ending xpacket
if|if
condition|(
name|withXpacket
condition|)
block|{
name|ProcessingInstruction
name|endXPacket
init|=
name|doc
operator|.
name|createProcessingInstruction
argument_list|(
literal|"xpacket"
argument_list|,
literal|"end=\""
operator|+
name|metadata
operator|.
name|getEndXPacket
argument_list|()
operator|+
literal|"\""
argument_list|)
decl_stmt|;
name|doc
operator|.
name|appendChild
argument_list|(
name|endXPacket
argument_list|)
expr_stmt|;
block|}
comment|// rdf element
name|Element
name|rdf
init|=
name|doc
operator|.
name|createElementNS
argument_list|(
name|XmpConstants
operator|.
name|RDF_NAMESPACE
argument_list|,
literal|"rdf:RDF"
argument_list|)
decl_stmt|;
comment|// rdf.setAttributeNS(XMPSchema.NS_NAMESPACE, qualifiedName, value)
name|xmpmeta
operator|.
name|appendChild
argument_list|(
name|rdf
argument_list|)
expr_stmt|;
comment|// return the rdf element where all will be put
return|return
name|rdf
return|;
block|}
comment|/**      * Save the XML document to an output stream.      *       * @param doc      *            The XML document to save.      * @param outStream      *            The stream to save the document to.      * @param encoding      *            The encoding to save the file as.      *       * @throws TransformerException      *             If there is an error while saving the XML.      */
specifier|private
name|void
name|save
parameter_list|(
name|Node
name|doc
parameter_list|,
name|OutputStream
name|outStream
parameter_list|,
name|String
name|encoding
parameter_list|)
throws|throws
name|TransformerException
block|{
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"squid:S4435"
block|}
argument_list|)
comment|// self-created XML
name|Transformer
name|transformer
init|=
name|TransformerFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newTransformer
argument_list|()
decl_stmt|;
comment|// human readable
name|transformer
operator|.
name|setOutputProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
comment|// indent elements
name|transformer
operator|.
name|setOutputProperty
argument_list|(
literal|"{http://xml.apache.org/xslt}indent-amount"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
comment|// encoding
name|transformer
operator|.
name|setOutputProperty
argument_list|(
name|OutputKeys
operator|.
name|ENCODING
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
name|transformer
operator|.
name|setOutputProperty
argument_list|(
name|OutputKeys
operator|.
name|OMIT_XML_DECLARATION
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
comment|// initialize StreamResult with File object to save to file
name|Result
name|result
init|=
operator|new
name|StreamResult
argument_list|(
name|outStream
argument_list|)
decl_stmt|;
name|DOMSource
name|source
init|=
operator|new
name|DOMSource
argument_list|(
name|doc
argument_list|)
decl_stmt|;
comment|// save
name|transformer
operator|.
name|transform
argument_list|(
name|source
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

