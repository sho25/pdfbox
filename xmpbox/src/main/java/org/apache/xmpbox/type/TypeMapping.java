begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|XMPMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|AdobePDFSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|DublinCoreSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|ExifSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|PDFAExtensionSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|PDFAIdentificationSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|PhotoshopSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|TiffSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|XMPBasicJobTicketSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|XMPBasicSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|XMPMediaManagementSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|XMPRightsManagementSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|XMPSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|XMPSchemaFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|XMPageTextSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|schema
operator|.
name|XmpSchemaException
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|TypeMapping
block|{
specifier|private
name|Map
argument_list|<
name|Types
argument_list|,
name|PropertiesDescription
argument_list|>
name|structuredMappings
decl_stmt|;
comment|// ns -> type
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Types
argument_list|>
name|structuredNamespaces
decl_stmt|;
comment|// ns -> type
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|definedStructuredNamespaces
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|PropertiesDescription
argument_list|>
name|definedStructuredMappings
decl_stmt|;
specifier|private
specifier|final
name|XMPMetadata
name|metadata
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|XMPSchemaFactory
argument_list|>
name|schemaMap
decl_stmt|;
specifier|public
name|TypeMapping
parameter_list|(
name|XMPMetadata
name|metadata
parameter_list|)
block|{
name|this
operator|.
name|metadata
operator|=
name|metadata
expr_stmt|;
name|initialize
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|SIMPLEPROPERTYCONSTPARAMS
init|=
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|XMPMetadata
operator|.
name|class
operator|,
name|String
operator|.
name|class
operator|,
name|String
operator|.
name|class
operator|,
name|String
operator|.
name|class
operator|,
name|Object
operator|.
name|class
block|}
empty_stmt|;
specifier|private
name|void
name|initialize
parameter_list|()
block|{
comment|// structured types
name|structuredMappings
operator|=
operator|new
name|EnumMap
argument_list|<>
argument_list|(
name|Types
operator|.
name|class
argument_list|)
expr_stmt|;
name|structuredNamespaces
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|Types
name|type
range|:
name|Types
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|type
operator|.
name|isStructured
argument_list|()
condition|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|AbstractStructuredType
argument_list|>
name|clz
init|=
name|type
operator|.
name|getImplementingClass
argument_list|()
operator|.
name|asSubclass
argument_list|(
name|AbstractStructuredType
operator|.
name|class
argument_list|)
decl_stmt|;
name|StructuredType
name|st
init|=
name|clz
operator|.
name|getAnnotation
argument_list|(
name|StructuredType
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|ns
init|=
name|st
operator|.
name|namespace
argument_list|()
decl_stmt|;
name|PropertiesDescription
name|pm
init|=
name|initializePropMapping
argument_list|(
name|clz
argument_list|)
decl_stmt|;
name|structuredNamespaces
operator|.
name|put
argument_list|(
name|ns
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|structuredMappings
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|pm
argument_list|)
expr_stmt|;
block|}
block|}
comment|// define structured types
name|definedStructuredNamespaces
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|definedStructuredMappings
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
comment|// schema
name|schemaMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|addNameSpace
argument_list|(
name|XMPBasicSchema
operator|.
name|class
argument_list|)
expr_stmt|;
name|addNameSpace
argument_list|(
name|DublinCoreSchema
operator|.
name|class
argument_list|)
expr_stmt|;
name|addNameSpace
argument_list|(
name|PDFAExtensionSchema
operator|.
name|class
argument_list|)
expr_stmt|;
name|addNameSpace
argument_list|(
name|XMPMediaManagementSchema
operator|.
name|class
argument_list|)
expr_stmt|;
name|addNameSpace
argument_list|(
name|AdobePDFSchema
operator|.
name|class
argument_list|)
expr_stmt|;
name|addNameSpace
argument_list|(
name|PDFAIdentificationSchema
operator|.
name|class
argument_list|)
expr_stmt|;
name|addNameSpace
argument_list|(
name|XMPRightsManagementSchema
operator|.
name|class
argument_list|)
expr_stmt|;
name|addNameSpace
argument_list|(
name|PhotoshopSchema
operator|.
name|class
argument_list|)
expr_stmt|;
name|addNameSpace
argument_list|(
name|XMPBasicJobTicketSchema
operator|.
name|class
argument_list|)
expr_stmt|;
name|addNameSpace
argument_list|(
name|ExifSchema
operator|.
name|class
argument_list|)
expr_stmt|;
name|addNameSpace
argument_list|(
name|TiffSchema
operator|.
name|class
argument_list|)
expr_stmt|;
name|addNameSpace
argument_list|(
name|XMPageTextSchema
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addToDefinedStructuredTypes
parameter_list|(
name|String
name|typeName
parameter_list|,
name|String
name|ns
parameter_list|,
name|PropertiesDescription
name|pm
parameter_list|)
block|{
name|definedStructuredNamespaces
operator|.
name|put
argument_list|(
name|ns
argument_list|,
name|typeName
argument_list|)
expr_stmt|;
name|definedStructuredMappings
operator|.
name|put
argument_list|(
name|typeName
argument_list|,
name|pm
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PropertiesDescription
name|getDefinedDescriptionByNamespace
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
name|String
name|dt
init|=
name|definedStructuredNamespaces
operator|.
name|get
argument_list|(
name|namespace
argument_list|)
decl_stmt|;
return|return
name|this
operator|.
name|definedStructuredMappings
operator|.
name|get
argument_list|(
name|dt
argument_list|)
return|;
block|}
specifier|public
name|AbstractStructuredType
name|instanciateStructuredType
parameter_list|(
name|Types
name|type
parameter_list|,
name|String
name|propertyName
parameter_list|)
throws|throws
name|BadFieldValueException
block|{
try|try
block|{
name|Class
argument_list|<
name|?
extends|extends
name|AbstractStructuredType
argument_list|>
name|propertyTypeClass
init|=
name|type
operator|.
name|getImplementingClass
argument_list|()
operator|.
name|asSubclass
argument_list|(
name|AbstractStructuredType
operator|.
name|class
argument_list|)
decl_stmt|;
name|Constructor
argument_list|<
name|?
extends|extends
name|AbstractStructuredType
argument_list|>
name|construct
init|=
name|propertyTypeClass
operator|.
name|getDeclaredConstructor
argument_list|(
name|XMPMetadata
operator|.
name|class
argument_list|)
decl_stmt|;
name|AbstractStructuredType
name|tmp
init|=
name|construct
operator|.
name|newInstance
argument_list|(
name|metadata
argument_list|)
decl_stmt|;
name|tmp
operator|.
name|setPropertyName
argument_list|(
name|propertyName
argument_list|)
expr_stmt|;
return|return
name|tmp
return|;
block|}
catch|catch
parameter_list|(
name|ReflectiveOperationException
decl||
name|IllegalArgumentException
decl||
name|SecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BadFieldValueException
argument_list|(
literal|"Failed to instanciate structured type : "
operator|+
name|type
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|AbstractStructuredType
name|instanciateDefinedType
parameter_list|(
name|String
name|propertyName
parameter_list|,
name|String
name|namespace
parameter_list|)
block|{
return|return
operator|new
name|DefinedStructuredType
argument_list|(
name|metadata
argument_list|,
name|namespace
argument_list|,
literal|null
argument_list|,
name|propertyName
argument_list|)
return|;
block|}
specifier|public
name|AbstractSimpleProperty
name|instanciateSimpleProperty
parameter_list|(
name|String
name|nsuri
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|,
name|Types
name|type
parameter_list|)
block|{
comment|// constructor parameters
name|Object
index|[]
name|params
init|=
operator|new
name|Object
index|[]
block|{
name|metadata
block|,
name|nsuri
block|,
name|prefix
block|,
name|name
block|,
name|value
block|}
decl_stmt|;
comment|// type
name|Class
argument_list|<
name|?
extends|extends
name|AbstractSimpleProperty
argument_list|>
name|clz
init|=
name|type
operator|.
name|getImplementingClass
argument_list|()
operator|.
name|asSubclass
argument_list|(
name|AbstractSimpleProperty
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|Constructor
argument_list|<
name|?
extends|extends
name|AbstractSimpleProperty
argument_list|>
name|cons
init|=
name|clz
operator|.
name|getDeclaredConstructor
argument_list|(
name|SIMPLEPROPERTYCONSTPARAMS
argument_list|)
decl_stmt|;
return|return
name|cons
operator|.
name|newInstance
argument_list|(
name|params
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodError
decl||
name|IllegalArgumentException
decl||
name|InstantiationException
decl||
name|IllegalAccessException
decl||
name|InvocationTargetException
decl||
name|SecurityException
decl||
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Failed to instanciate "
operator|+
name|clz
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" property with value "
operator|+
name|value
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|AbstractSimpleProperty
name|instanciateSimpleField
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clz
parameter_list|,
name|String
name|nsuri
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|PropertiesDescription
name|pm
init|=
name|initializePropMapping
argument_list|(
name|clz
argument_list|)
decl_stmt|;
name|PropertyType
name|simpleType
init|=
name|pm
operator|.
name|getPropertyType
argument_list|(
name|propertyName
argument_list|)
decl_stmt|;
name|Types
name|type
init|=
name|simpleType
operator|.
name|type
argument_list|()
decl_stmt|;
return|return
name|instanciateSimpleProperty
argument_list|(
name|nsuri
argument_list|,
name|prefix
argument_list|,
name|propertyName
argument_list|,
name|value
argument_list|,
name|type
argument_list|)
return|;
block|}
comment|/**      * Check if a namespace used reference a complex basic types (like Thumbnails)      *       * @param namespace      *            The namespace URI to check      * @return True if namespace URI is a reference for a complex basic type      */
specifier|public
name|boolean
name|isStructuredTypeNamespace
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
return|return
name|structuredNamespaces
operator|.
name|containsKey
argument_list|(
name|namespace
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isDefinedTypeNamespace
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
return|return
name|definedStructuredNamespaces
operator|.
name|containsKey
argument_list|(
name|namespace
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isDefinedType
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|this
operator|.
name|definedStructuredMappings
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
name|void
name|addNameSpace
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|XMPSchema
argument_list|>
name|classSchem
parameter_list|)
block|{
name|StructuredType
name|st
init|=
name|classSchem
operator|.
name|getAnnotation
argument_list|(
name|StructuredType
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|ns
init|=
name|st
operator|.
name|namespace
argument_list|()
decl_stmt|;
name|schemaMap
operator|.
name|put
argument_list|(
name|ns
argument_list|,
operator|new
name|XMPSchemaFactory
argument_list|(
name|ns
argument_list|,
name|classSchem
argument_list|,
name|initializePropMapping
argument_list|(
name|classSchem
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addNewNameSpace
parameter_list|(
name|String
name|ns
parameter_list|,
name|String
name|prefered
parameter_list|)
block|{
name|PropertiesDescription
name|mapping
init|=
operator|new
name|PropertiesDescription
argument_list|()
decl_stmt|;
name|schemaMap
operator|.
name|put
argument_list|(
name|ns
argument_list|,
operator|new
name|XMPSchemaFactory
argument_list|(
name|ns
argument_list|,
name|XMPSchema
operator|.
name|class
argument_list|,
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PropertiesDescription
name|getStructuredPropMapping
parameter_list|(
name|Types
name|type
parameter_list|)
block|{
return|return
name|structuredMappings
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
comment|/**      * Return the specialized schema class representation if it's known (create and add it to metadata). In other cases,      * return null      *       * @param metadata      *            Metadata to link the new schema      * @param namespace      *            The namespace URI      * @param prefix The namespace prefix      * @return Schema representation      * @throws XmpSchemaException      *             When Instancing specified Object Schema failed      */
specifier|public
name|XMPSchema
name|getAssociatedSchemaObject
parameter_list|(
name|XMPMetadata
name|metadata
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|prefix
parameter_list|)
throws|throws
name|XmpSchemaException
block|{
if|if
condition|(
name|schemaMap
operator|.
name|containsKey
argument_list|(
name|namespace
argument_list|)
condition|)
block|{
name|XMPSchemaFactory
name|factory
init|=
name|schemaMap
operator|.
name|get
argument_list|(
name|namespace
argument_list|)
decl_stmt|;
return|return
name|factory
operator|.
name|createXMPSchema
argument_list|(
name|metadata
argument_list|,
name|prefix
argument_list|)
return|;
block|}
else|else
block|{
name|XMPSchemaFactory
name|factory
init|=
name|getSchemaFactory
argument_list|(
name|namespace
argument_list|)
decl_stmt|;
return|return
name|factory
operator|!=
literal|null
condition|?
name|factory
operator|.
name|createXMPSchema
argument_list|(
name|metadata
argument_list|,
name|prefix
argument_list|)
else|:
literal|null
return|;
block|}
block|}
specifier|public
name|XMPSchemaFactory
name|getSchemaFactory
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
return|return
name|schemaMap
operator|.
name|get
argument_list|(
name|namespace
argument_list|)
return|;
block|}
comment|/**      * Say if a specific namespace is known      *       * @param namespace      *            The namespace URI checked      * @return True if namespace URI is known      */
specifier|public
name|boolean
name|isDefinedSchema
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
return|return
name|schemaMap
operator|.
name|containsKey
argument_list|(
name|namespace
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isDefinedNamespace
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
return|return
name|isDefinedSchema
argument_list|(
name|namespace
argument_list|)
operator|||
name|isStructuredTypeNamespace
argument_list|(
name|namespace
argument_list|)
operator|||
name|isDefinedTypeNamespace
argument_list|(
name|namespace
argument_list|)
return|;
block|}
comment|/**      * Give type of specified property in specified schema (given by its namespaceURI)      *       * @param name      *            the property Qualified Name      * @return Property type declared for namespace specified, null if unknown      * @throws org.apache.xmpbox.type.BadFieldValueException if the name was not found.      */
specifier|public
name|PropertyType
name|getSpecifiedPropertyType
parameter_list|(
name|QName
name|name
parameter_list|)
throws|throws
name|BadFieldValueException
block|{
name|XMPSchemaFactory
name|factory
init|=
name|getSchemaFactory
argument_list|(
name|name
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|factory
operator|!=
literal|null
condition|)
block|{
comment|// found in schema
return|return
name|factory
operator|.
name|getPropertyType
argument_list|(
name|name
operator|.
name|getLocalPart
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
comment|// try in structured
name|Types
name|st
init|=
name|structuredNamespaces
operator|.
name|get
argument_list|(
name|name
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|st
operator|!=
literal|null
condition|)
block|{
return|return
name|createPropertyType
argument_list|(
name|st
argument_list|,
name|Cardinality
operator|.
name|Simple
argument_list|)
return|;
block|}
else|else
block|{
comment|// try in defined
name|String
name|dt
init|=
name|definedStructuredNamespaces
operator|.
name|get
argument_list|(
name|name
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dt
operator|==
literal|null
condition|)
block|{
comment|// not found
throw|throw
operator|new
name|BadFieldValueException
argument_list|(
literal|"No descriptor found for "
operator|+
name|name
argument_list|)
throw|;
block|}
else|else
block|{
return|return
name|createPropertyType
argument_list|(
name|Types
operator|.
name|DefinedType
argument_list|,
name|Cardinality
operator|.
name|Simple
argument_list|)
return|;
block|}
block|}
block|}
block|}
specifier|public
name|PropertiesDescription
name|initializePropMapping
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|classSchem
parameter_list|)
block|{
name|PropertiesDescription
name|propMap
init|=
operator|new
name|PropertiesDescription
argument_list|()
decl_stmt|;
name|Field
index|[]
name|fields
init|=
name|classSchem
operator|.
name|getFields
argument_list|()
decl_stmt|;
name|String
name|propName
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Field
name|field
range|:
name|fields
control|)
block|{
if|if
condition|(
name|field
operator|.
name|isAnnotationPresent
argument_list|(
name|PropertyType
operator|.
name|class
argument_list|)
condition|)
block|{
try|try
block|{
name|propName
operator|=
operator|(
name|String
operator|)
name|field
operator|.
name|get
argument_list|(
name|propName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"couldn't read one type declaration, please check accessibility and declaration of fields annoted in "
operator|+
name|classSchem
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|PropertyType
name|propType
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|PropertyType
operator|.
name|class
argument_list|)
decl_stmt|;
name|propMap
operator|.
name|addNewProperty
argument_list|(
name|propName
argument_list|,
name|propType
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|propMap
return|;
block|}
specifier|public
name|BooleanType
name|createBoolean
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|boolean
name|value
parameter_list|)
block|{
return|return
operator|new
name|BooleanType
argument_list|(
name|metadata
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|,
name|propertyName
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|DateType
name|createDate
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|Calendar
name|value
parameter_list|)
block|{
return|return
operator|new
name|DateType
argument_list|(
name|metadata
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|,
name|propertyName
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|IntegerType
name|createInteger
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|int
name|value
parameter_list|)
block|{
return|return
operator|new
name|IntegerType
argument_list|(
name|metadata
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|,
name|propertyName
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|RealType
name|createReal
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|float
name|value
parameter_list|)
block|{
return|return
operator|new
name|RealType
argument_list|(
name|metadata
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|,
name|propertyName
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|TextType
name|createText
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|TextType
argument_list|(
name|metadata
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|,
name|propertyName
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|ProperNameType
name|createProperName
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|ProperNameType
argument_list|(
name|metadata
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|,
name|propertyName
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|URIType
name|createURI
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|URIType
argument_list|(
name|metadata
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|,
name|propertyName
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|URLType
name|createURL
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|URLType
argument_list|(
name|metadata
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|,
name|propertyName
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|RenditionClassType
name|createRenditionClass
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|RenditionClassType
argument_list|(
name|metadata
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|,
name|propertyName
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|PartType
name|createPart
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|PartType
argument_list|(
name|metadata
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|,
name|propertyName
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|MIMEType
name|createMIMEType
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|MIMEType
argument_list|(
name|metadata
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|,
name|propertyName
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|LocaleType
name|createLocale
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|LocaleType
argument_list|(
name|metadata
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|,
name|propertyName
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|GUIDType
name|createGUID
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|GUIDType
argument_list|(
name|metadata
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|,
name|propertyName
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|ChoiceType
name|createChoice
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|ChoiceType
argument_list|(
name|metadata
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|,
name|propertyName
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|AgentNameType
name|createAgentName
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|AgentNameType
argument_list|(
name|metadata
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|,
name|propertyName
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|XPathType
name|createXPath
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|XPathType
argument_list|(
name|metadata
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|,
name|propertyName
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|ArrayProperty
name|createArrayProperty
parameter_list|(
name|String
name|namespace
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|Cardinality
name|type
parameter_list|)
block|{
return|return
operator|new
name|ArrayProperty
argument_list|(
name|metadata
argument_list|,
name|namespace
argument_list|,
name|prefix
argument_list|,
name|propertyName
argument_list|,
name|type
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|PropertyType
name|createPropertyType
parameter_list|(
specifier|final
name|Types
name|type
parameter_list|,
specifier|final
name|Cardinality
name|card
parameter_list|)
block|{
return|return
operator|new
name|PropertyType
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|annotationType
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Types
name|type
parameter_list|()
block|{
return|return
name|type
return|;
block|}
annotation|@
name|Override
specifier|public
name|Cardinality
name|card
parameter_list|()
block|{
return|return
name|card
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

