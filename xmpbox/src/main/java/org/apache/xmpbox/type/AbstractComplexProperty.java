begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|type
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmpbox
operator|.
name|XMPMetadata
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractComplexProperty
extends|extends
name|AbstractField
block|{
specifier|private
specifier|final
name|ComplexPropertyContainer
name|container
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaceToPrefix
decl_stmt|;
specifier|public
name|AbstractComplexProperty
parameter_list|(
name|XMPMetadata
name|metadata
parameter_list|,
name|String
name|propertyName
parameter_list|)
block|{
name|super
argument_list|(
name|metadata
argument_list|,
name|propertyName
argument_list|)
expr_stmt|;
name|container
operator|=
operator|new
name|ComplexPropertyContainer
argument_list|()
expr_stmt|;
name|this
operator|.
name|namespaceToPrefix
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|addNamespace
parameter_list|(
name|String
name|namespace
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|this
operator|.
name|namespaceToPrefix
operator|.
name|put
argument_list|(
name|namespace
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getNamespacePrefix
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
return|return
name|this
operator|.
name|namespaceToPrefix
operator|.
name|get
argument_list|(
name|namespace
argument_list|)
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getAllNamespacesWithPrefix
parameter_list|()
block|{
return|return
name|this
operator|.
name|namespaceToPrefix
return|;
block|}
comment|/**      * Add a property to the current structure      *       * @param obj      *            the property to add      */
specifier|public
specifier|final
name|void
name|addProperty
parameter_list|(
name|AbstractField
name|obj
parameter_list|)
block|{
comment|// https://www.adobe.com/content/dam/Adobe/en/devnet/xmp/pdfs/cs6/XMPSpecificationPart1.pdf
comment|// "Each property name in an XMP packet shall be unique within that packet"
comment|// "Multiple values are represented using an XMP array value"
comment|// "The nested element's element content shall consist of zero or more rdf:li elements,
comment|// one for each item in the array"
comment|// thus delete existing elements of a property, except for arrays ("li")
if|if
condition|(
operator|!
operator|(
name|this
operator|instanceof
name|ArrayProperty
operator|)
condition|)
block|{
name|container
operator|.
name|removePropertiesByName
argument_list|(
name|obj
operator|.
name|getPropertyName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|container
operator|.
name|addProperty
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
comment|/**      * Remove a property      *       * @param property      *            The property to remove      */
specifier|public
specifier|final
name|void
name|removeProperty
parameter_list|(
name|AbstractField
name|property
parameter_list|)
block|{
name|container
operator|.
name|removeProperty
argument_list|(
name|property
argument_list|)
expr_stmt|;
block|}
comment|// /**
comment|// * Return the container of this Array
comment|// *
comment|// * @return The complex property container that represents content of this
comment|// * property
comment|// */
specifier|public
specifier|final
name|ComplexPropertyContainer
name|getContainer
parameter_list|()
block|{
return|return
name|container
return|;
block|}
specifier|public
specifier|final
name|List
argument_list|<
name|AbstractField
argument_list|>
name|getAllProperties
parameter_list|()
block|{
return|return
name|container
operator|.
name|getAllProperties
argument_list|()
return|;
block|}
specifier|public
specifier|final
name|AbstractField
name|getProperty
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|List
argument_list|<
name|AbstractField
argument_list|>
name|list
init|=
name|container
operator|.
name|getPropertiesByLocalName
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
comment|// return null if no property
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// return the first element of the list
return|return
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|public
specifier|final
name|ArrayProperty
name|getArrayProperty
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|List
argument_list|<
name|AbstractField
argument_list|>
name|list
init|=
name|container
operator|.
name|getPropertiesByLocalName
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
comment|// return null if no property
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// return the first element of the list
return|return
operator|(
name|ArrayProperty
operator|)
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|protected
specifier|final
name|AbstractField
name|getFirstEquivalentProperty
parameter_list|(
name|String
name|localName
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|AbstractField
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|container
operator|.
name|getFirstEquivalentProperty
argument_list|(
name|localName
argument_list|,
name|type
argument_list|)
return|;
block|}
block|}
end_class

end_unit

