<!--
 ! Licensed to the Apache Software Foundation (ASF) under one or more
 ! contributor license agreements.  See the NOTICE file distributed with
 ! this work for additional information regarding copyright ownership.
 ! The ASF licenses this file to You under the Apache License, Version 2.0
 ! (the "License"); you may not use this file except in compliance with
 ! the License.  You may obtain a copy of the License at
 !
 !      http://www.apache.org/licenses/LICENSE-2.0
 !
 ! Unless required by applicable law or agreed to in writing, software
 ! distributed under the License is distributed on an "AS IS" BASIS,
 ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 ! See the License for the specific language governing permissions and
 ! limitations under the License.
 !-->
<project default="dist" name="PDFBox" basedir=".">

    <!-- Use the following file to alter any of the below properties -->
    <property file="build.properties" />
    <property file="build-local.properties" />
    <property environment="env"/>

    <property name="build.compiler" value="modern" />
    <property name="src.dir" value="src/main/java" />
    <property name="target.dir" value="target" />
    <property name="dest.dir" value="${target.dir}/classes" />
    <property name="test.dir" value="src/test/java" />
    <property name="testfiles.dir" value="test" />
    <property name="bin.dir" value="bin" />
    <property name="website.dir" value="website" />
    <property name="website.build.dir" value="${website.dir}/build/site" />
    <property name="docs.dir" value="${website.dir}/build/site/javadoc" />
    <property name="lib.dir" value="lib" />
    <property name="war.dir" value="pdfbox.war" />
    <property name="licenses.dir" value="licenses" />
    <property name="tool.dir" value="tools" />
    <property name="resources.dir" value="src/main/resources" />
    <property name="download.dir" value="download" />
    <property name="checkstyle.config" value="pdfbox-checkstyle.xml" />

    <property name="project.name" value="pdfbox"/>
    <property name="project.version" value="0.8.0-incubating" />
    <property name="jar.file" value="./lib/${project.name}-${project.version}.jar" />

    <property name="jar.dir" value="external" />

    <property name="ant.jar" value="${jar.dir}/ant.jar" />

    <property name="fontbox.name" value="fontbox-0.8.0-incubating" />
    <property name="fontbox.jar" value="${jar.dir}/${fontbox.name}.jar" />

    <property name="jempbox.name" value="jempbox-0.8.0-incubating" />
    <property name="jempbox.jar" value="${jar.dir}/${jempbox.name}.jar" />

    <property name="lucene.name" value="lucene-core-2.4.1" />
    <property name="lucene.jar" value="${jar.dir}/${lucene.name}.jar" />

    <property name="lucene-demos.name" value="lucene-demos-2.4.1" />
    <property name="lucene-demos.jar" value="${jar.dir}/${lucene-demos.name}.jar" />

    <property name="bcprov.name" value="bcprov-jdk14-132" />
    <property name="bcprov.jar" value="${jar.dir}/${bcprov.name}.jar" />

    <property name="bcmail.name" value="bcmail-jdk14-132" />
    <property name="bcmail.jar" value="${jar.dir}/${bcmail.name}.jar" />

    <property name="junit.jar" value="${jar.dir}/junit.jar" />
    <property name="icu4j.jar" value="${jar.dir}/icu4j-4_0.jar" />

    <property name="maven.repo" value="http://repo2.maven.org/maven2" />

	<property name="checkstyle.url" value="${maven.repo}/checkstyle/checkstyle/4.4/checkstyle-4.4.jar" />
    <property name="checkstyle.jar" value="${tool.dir}/checkstyle.jar" />
    <property name="beanutils.url" value="${maven.repo}/commons-beanutils/commons-beanutils-core/1.7.0/commons-beanutils-core-1.7.0.jar" />
    <property name="beanutils.jar" value="${tool.dir}/commons-beanutils.jar" />
    <property name="logging.url" value="${maven.repo}/commons-logging/commons-logging/1.0.3/commons-logging-1.0.3.jar" />
    <property name="logging.jar" value="${tool.dir}/commons-logging.jar" />
    <property name="antlr.url" value="${maven.repo}/antlr/antlr/2.7.6/antlr-2.7.6.jar" />
    <property name="antlr.jar" value="${tool.dir}/antlr.jar" />

    <property name="testoutput.dir" value="${testfiles.dir}/output"/>
    <property name="testoutput-ext.dir" value="${testfiles.dir}/output-ext"/>
    <property name="jiraattachment.url" value="http://issues.apache.org/jira/secure/attachment"/>
    <property name="testfiles1.url" value="${jiraattachment.url}/12413230/input-ext1.jar"/>
    <property name="testfiles1.jar" value="${download.dir}/input-ext1.jar"/>
    <property name="testfiles2.url" value="${jiraattachment.url}/12413231/input-ext2.jar"/>
    <property name="testfiles2.jar" value="${download.dir}/input-ext2.jar"/>
    <property name="testfiles3.url" value="${jiraattachment.url}/12413232/input-ext3.jar"/>
    <property name="testfiles3.jar" value="${download.dir}/input-ext3.jar"/>
    <property name="testfiles.rendering.url" value="${jiraattachment.url}/12413229/input-ext_rendering.jar"/>
    <property name="testfiles.rendering.jar" value="${download.dir}/input-ext_rendering.jar"/>
    <property name="testfiles.encryption.url" value="${jiraattachment.url}/12413268/input-ext_encryption.jar"/>
    <property name="testfiles.encryption.jar" value="${download.dir}/input-ext_encryption.jar"/>

    <property name="adobefiles.url" value="${maven.repo}/com/adobe/pdf/pcfi/2009.06.14/pcfi-2009.06.14.jar"/>
    <property name="adobefiles.jar" value="${download.dir}/pcfi-2009.06.14.jar"/>

    <property name="file" value=""/>

    <!--.NET properties -->
    <property name="ikvm.dir" value="."/>
    <property name="ikvmc" value="${ikvm.dir}/bin/ikvmc.exe"/>

    <path id="build.classpath">
        <fileset dir="${jar.dir}" >
            <include name="**/*.jar" />
        </fileset>
        <pathelement path="${dest.dir}" />
        <pathelement path="${resources.dir}" />
    </path>

    <path id="checkstyle.classpath">
        <pathelement path="${checkstyle.jar}" />
        <pathelement path="${beanutils.jar}" />
        <pathelement path="${logging.jar}" />
        <pathelement path="${antlr.jar}" />
    </path>

    <target name="clean" description="Remove all generated files">
        <delete dir="${dest.dir}"/>
        <delete dir="${docs.dir}"/>
        <delete dir="${lib.dir}"/>
        <delete dir="${bin.dir}"/>
        <delete file="checkstyle.cache" />
        <delete dir="${testoutput.dir}"/>
        <delete dir="${testoutput-ext.dir}"/>
    </target>

    <target name="pdfbox.init">
        <mkdir dir="${lib.dir}"/>
        <mkdir dir="${dest.dir}"/>
        <mkdir dir="${docs.dir}" />
        <mkdir dir="${bin.dir}" />
        <mkdir dir="${testoutput.dir}" />
        <mkdir dir="${testoutput.dir}/rendering" />
        <mkdir dir="${testoutput-ext.dir}" />
        <mkdir dir="${testoutput-ext.dir}/rendering" />
    </target>

    <target name="compile" depends="pdfbox.init" description="Compile Java source files">
        <!-- required encoding flag to be able to build using ibm-jdk on redhat ES-->
        <javac srcdir="${src.dir}" destdir="${dest.dir}" target="1.4" source="1.4" debug="on" classpathref="build.classpath" deprecation="on" encoding="ISO-8859-1"/>
        <javac srcdir="${test.dir}" destdir="${dest.dir}" target="1.4" source="1.4" debug="on" classpathref="build.classpath" deprecation="on" encoding="ISO-8859-1"/>
    </target>

    <target name="test" depends="testextract,test-junit,testimage" description="Run all the junit tests"/>

	<target name="find.adobefiles">
        <available property="adobefiles.found"
                   file="${resources.dir}/Resources/cmap"
                   type="dir"/>
    </target>

	<target name="get.adobefiles" 
		unless="adobefiles.found" depends="find.adobefiles" 
		description="Download afm and cmap files from adobe">
        <antcall target="downloadfile">
            <param name="sourcefile" value="${adobefiles.url}"/>
            <param name="destfile" value="${adobefiles.jar}"/>
        </antcall>
		<unjar src="${adobefiles.jar}" dest="${download.dir}"/>
		<move todir="${resources.dir}/Resources/afm">
			<fileset dir="${download.dir}/com/adobe/pdf/pcfi/afm" includes="**/*"/>
		</move>
		<move todir="${resources.dir}/Resources/cmap">
			<fileset dir="${download.dir}/com/adobe/pdf/pcfi/chinese_t" includes="**/*"/>
			<fileset dir="${download.dir}/com/adobe/pdf/pcfi/japanese" includes="**/*"/>
			<fileset dir="${download.dir}/com/adobe/pdf/pcfi/korean" includes="**/*"/>
		</move>
		<delete dir="${download.dir}/com"/>
		<delete dir="${download.dir}/META-INF"/>
	</target>
	
	<target name="find.testfiles">
        <available property="testfiles.found"
                   file="${testfiles.dir}/input-ext"
                   type="dir"/>
    </target>

	<target name="get.testfiles" 
		unless="testfiles.found" depends="find.testfiles" 
		description="Download additional testfiles without suitable license to add them to svn">
        <antcall target="downloadfile">
            <param name="sourcefile" value="${testfiles1.url}"/>
            <param name="destfile" value="${testfiles1.jar}"/>
        </antcall>
        <antcall target="downloadfile">
            <param name="sourcefile" value="${testfiles2.url}"/>
            <param name="destfile" value="${testfiles2.jar}"/>
        </antcall>
        <antcall target="downloadfile">
            <param name="sourcefile" value="${testfiles3.url}"/>
            <param name="destfile" value="${testfiles3.jar}"/>
        </antcall>
        <antcall target="downloadfile">
            <param name="sourcefile" value="${testfiles.rendering.url}"/>
            <param name="destfile" value="${testfiles.rendering.jar}"/>
        </antcall>
        <antcall target="downloadfile">
            <param name="sourcefile" value="${testfiles.encryption.url}"/>
            <param name="destfile" value="${testfiles.encryption.jar}"/>
        </antcall>
		<unjar src="${testfiles1.jar}" dest="${testfiles.dir}/input-ext"/>
		<unjar src="${testfiles2.jar}" dest="${testfiles.dir}/input-ext"/>
		<unjar src="${testfiles3.jar}" dest="${testfiles.dir}/input-ext"/>
		<unjar src="${testfiles.rendering.jar}" dest="${testfiles.dir}/input-ext"/>
		<unjar src="${testfiles.encryption.jar}" dest="${testfiles.dir}/input-ext"/>
	</target>

	<target name="testextract" depends="clean,compile,get.adobefiles,get.testfiles" description="Test text extraction">
        <junit printsummary="off" fork="on" dir=".">
            <jvmarg value="-Xmx1024M"/>
            <jvmarg value="-Xms512M"/>
            <sysproperty key="org.apache.pdfbox.util.TextStripper.file" value="${file}"/>
            <classpath>
                <pathelement path="${junit.jar}" />
                <pathelement path="${ant.jar}" />
                <pathelement path="${lucene.jar}" />
                <pathelement path="${lucene-demo.jar}" />
                <pathelement path="${fontbox.jar}" />
                <pathelement path="${jempbox.jar}" />
                <pathelement path="${bcprov.jar}" />
                <pathelement path="${bcmail.jar}" />
                <pathelement path="${icu4j.jar}" />
                <pathelement path="${dest.dir}"/>
                <pathelement path="${resources.dir}" />
            </classpath>
            <formatter usefile="false" type="plain" />
            <test name="org.apache.pdfbox.util.TestTextStripper" />
        </junit>
    </target>

    <target name="testimage" depends="clean,compile,get.adobefiles,get.testfiles" description="Test image rendering">
        <junit printsummary="off" fork="on" dir="."  >
            <jvmarg value="-Xmx1024M"/>
            <jvmarg value="-Xms512M"/>

            <sysproperty key="org.apache.pdfbox.util.TextStripper.file" value="${file}"/>
            <classpath>
                <pathelement path="${junit.jar}" />
                <pathelement path="${ant.jar}" />
                <pathelement path="${lucene.jar}" />
                <pathelement path="${lucene-demo.jar}" />
                <pathelement path="${fontbox.jar}" />
                <pathelement path="${jempbox.jar}" />
                <pathelement path="${bcprov.jar}" />
                <pathelement path="${bcmail.jar}" />
                <pathelement path="${icu4j.jar}" />
                <pathelement path="${dest.dir}"/>
                <pathelement path="${resources.dir}" />
            </classpath>
            <formatter usefile="false" type="plain" />
            <test name="org.apache.pdfbox.util.TestPDFToImage" />
        </junit>
    </target>

    <target name="test-junit" depends="clean,compile,get.adobefiles,get.testfiles" description="run junit tests">
        <junit printsummary="off" fork="on" dir=".">
            <classpath>
                <pathelement path="${junit.jar}" />
                <pathelement path="${ant.jar}" />
                <pathelement path="${lucene.jar}" />
                <pathelement path="${lucene-demo.jar}" />
                <pathelement path="${fontbox.jar}" />
                <pathelement path="${jempbox.jar}" />
                <pathelement path="${bcprov.jar}" />
                <pathelement path="${bcmail.jar}" />
                <pathelement path="${dest.dir}"/>
                <pathelement path="${resources.dir}" />
            </classpath>
            <formatter usefile="false" type="plain" />
            <test name="org.apache.pdfbox.TestAll" />
        </junit>
    </target>

    <target name="indexTestDocuments" depends="compile">
        <java fork="yes" classname="org.apache.pdfbox.searchengine.lucene.IndexFiles" classpathref="build.classpath">
            <arg value="-create" />
            <arg value="-index" />
            <arg value="index" />
            <arg value="test-pdf" />
        </java>
    </target>

    <target name="testPDF2Text" depends="compile">
        <taskdef name="pdf2text" classname="org.apache.pdfbox.ant.PDFToTextTask" classpathref="build.classpath" />
        <pdf2text>
            <fileset dir="test-pdf">
                <include name="**/*.pdf" />
                <include name="**/*.PDF" />
            </fileset>
        </pdf2text>
    </target>

    <target name="testexist">
        <echo message="Testing for ${destfile}" level="debug"/>
        <available file="${destfile}" property="exist"/>
    </target>
    <target name="downloadfile" unless="exist" depends="testexist">
        <dirname property="destdir" file="${destfile}"/>
        <mkdir dir="${destdir}"/>
        <get src="${sourcefile}" dest="${destfile}"/>
    </target>

    <target name="find.checkstyle">
        <available property="checkstyle.found"
                   classname="com.puppycrawl.tools.checkstyle.CheckStyleTask"
                   classpathref="checkstyle.classpath"/>
    </target>

    <target name="get.checkstyle"
            unless="checkstyle.found" depends="find.checkstyle">
        <antcall target="downloadfile">
            <param name="sourcefile" value="${checkstyle.url}"/>
            <param name="destfile" value="${checkstyle.jar}"/>
        </antcall>
        <antcall target="downloadfile">
            <param name="sourcefile" value="${beanutils.url}"/>
            <param name="destfile" value="${beanutils.jar}"/>
        </antcall>
        <antcall target="downloadfile">
            <param name="sourcefile" value="${logging.url}"/>
            <param name="destfile" value="${logging.jar}"/>
        </antcall>
        <antcall target="downloadfile">
            <param name="sourcefile" value="${antlr.url}"/>
            <param name="destfile" value="${antlr.jar}"/>
        </antcall>
    </target>

    <target name="checkstyle" depends="compile,get.checkstyle">
        <!-- This doesn't work when run from netbeans for some reason -->
        <taskdef name="checkstyle"
                 classname="com.puppycrawl.tools.checkstyle.CheckStyleTask"
                 classpathref="checkstyle.classpath" />
        <checkstyle config="${checkstyle.config}"
                    classpathref="checkstyle.classpath"
                    failOnViolation="false">
            <fileset dir="${src.dir}" />
        </checkstyle>
    </target>

    <target name="package" depends="compile" description="Package pdfbox into a jar file">
        <property name="release.name" value="${project.name}-${project.version}" />
        <propertyfile file="${resources.dir}/Resources/pdfbox.version">
            <entry  key="pdfbox.version" value="${release.name}"/>
        </propertyfile>

        <jar jarfile="./lib/${release.name}.jar">
            <fileset dir="${dest.dir}">
                <include name="**/*.class"/>
            </fileset>
            <fileset dir="${resources.dir}"/>
            <metainf dir="." includes="*.txt"/>
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="Implementation-Title" value="Apache PDFBox (incubating)"/>
                <attribute name="Implementation-Version" value="${project.version}"/>
                <attribute name="Implementation-Vendor" value="The Apache Software Foundation"/>
                <attribute name="Implementation-URL" value="http://incubator.apache.org/pdfbox/"/>
            </manifest>
        </jar>
        <zip zipfile="./lib/pdfbox.war">
            <fileset dir="${war.dir}" />
            <zipfileset dir="./lib" prefix="WEB-INF/lib">
                <include name="${release.name}.jar" />
            </zipfileset>
        </zip>
    </target>

    <target name="nightly-dist">
        <tstamp />
        <property name="release.name" value="${project.name}-${project.version}-${DSTAMP}" />
        <antcall target="dist" />
    </target>

    <target name="release-dist">
        <antcall target="dist" />
    </target>

    <target name="dist" depends="clean,package,javadoc,website,build.NET,checkstyle,get.adobefiles" description="Create zip distribution file">

        <jar jarfile="${target.dir}/${release.name}-maven.jar">
            <fileset dir="./lib/">
                <include name="${release.name}.jar"/>
            </fileset>
            <fileset dir=".">
                <include name="pom.xml"/>
            </fileset>
        </jar>

        <zip zipfile="${target.dir}/${release.name}.zip">
            <zipfileset dir="." prefix="${release.name}">
                <include name="${lib.dir}/*.jar"/>
                <include name="${licenses.dir}/**/*"/>
                <include name="${src.dir}/**/*.java"/>
                <include name="${src.dir}/**/*.html"/>
                <include name="${test.dir}/**/*.java"/>
                <include name="${test.dir}/**/*.html"/>
                <include name="${resources.dir}/**/*" />
                <include name="${ant.jar}" />
                <include name="${lucene.jar}" />
                <include name="${lucene-demos.jar}" />
                <include name="${junit.jar}" />
                <include name="${bcprov.jar}" />
                <include name="${bcmail.jar}" />
                <include name="${fontbox.jar}" />
                <include name="${jempbox.jar}" />
                <include name="${checkstyle.jar}" />
                <include name="${icu4j.jar}" />
                <include name="${bin.dir}/**/*" />
                <include name="*.txt" />
                <include name="pom.xml" />
                <include name="build.xml" />
                <include name="build.properties.example" />
                <include name="${checkstyle.config}" />
            </zipfileset>
            <zipfileset dir="${website.build.dir}" prefix="${release.name}/docs">
                <include name="**/*" />
                <exclude name="**/*.zip" />
            </zipfileset>
            <zipfileset dir="." prefix="${release.name}">
                <include name="website/**/*" />
                <exclude name="website/build/**/*" />
            </zipfileset>
            <zipfileset dir="${war.dir}" prefix="${release.name}/${war.dir}">
                <include name="**/*" />
            </zipfileset>
            <zipfileset dir="${ikvm.dir}/bin" prefix="${release.name}/bin" >
                <include name="*.dll" />
            </zipfileset>
        </zip>
    </target>

    <target name="checkForIKVM">
        <condition property="IKVMAvailable">
            <and>
                <os family="windows"/>
                <available file="${ikvmc}" property="ignored" />
            </and>
        </condition>
    </target>

    <target name="build.NET" depends="checkForIKVM,package" if="IKVMAvailable" description="Build PDFBox .NET DLL files">
        <property name="release.name" value="${project.name}-${project.version}" />
        <echo>Building BC Prov</echo>
        <exec executable="${ikvmc}">
            <arg value="-reference:${ikvm.dir}/bin/IKVM.OpenJDK.ClassLibrary.dll" />
            <arg value="-reference:${ikvm.dir}/bin/IKVM.AWT.WinForms.dll" />
            <arg value="-target:library" />
            <arg value="-compressresources" />
            <arg value="-out:${bin.dir}\${bcprov.name}.dll" />
            <arg value="${bcprov.jar}" />
        </exec>
        <echo>Building BC Mail</echo>
        <exec executable="${ikvmc}">
            <arg value="-reference:${ikvm.dir}/bin/IKVM.OpenJDK.ClassLibrary.dll" />
            <arg value="-reference:${ikvm.dir}/bin/IKVM.AWT.WinForms.dll" />
            <arg value="-reference:bin/${bcprov.name}.dll" />
            <arg value="-target:library" />
            <arg value="-compressresources" />
            <arg value="-out:${bin.dir}\${bcmail.name}.dll" />
            <arg value="${bcmail.jar}" />
        </exec>
        <echo>Building FontBox</echo>
        <exec executable="${ikvmc}">
            <arg value="-reference:${ikvm.dir}/bin/IKVM.OpenJDK.ClassLibrary.dll" />
            <arg value="-reference:${ikvm.dir}/bin/IKVM.AWT.WinForms.dll" />
            <arg value="-target:library" />
            <arg value="-compressresources" />
            <arg value="-out:${bin.dir}\${fontbox.name}.dll" />
            <arg value="${fontbox.jar}" />
        </exec>
        <echo>Building JempBox</echo>
        <exec executable="${ikvmc}">
            <arg value="-reference:${ikvm.dir}/bin/IKVM.OpenJDK.ClassLibrary.dll" />
            <arg value="-reference:${ikvm.dir}/bin/IKVM.AWT.WinForms.dll" />
            <arg value="-target:library" />
            <arg value="-compressresources" />
            <arg value="-out:${bin.dir}\${jempbox.name}.dll" />
            <arg value="${jempbox.jar}" />
        </exec>
        <exec executable="${ikvmc}">
            <arg value="-reference:${ikvm.dir}/bin/IKVM.OpenJDK.ClassLibrary.dll" />
            <arg value="-reference:${ikvm.dir}/bin/IKVM.AWT.WinForms.dll" />
            <arg value="-target:library" />
            <arg value="-compressresources" />
            <arg value="-out:${bin.dir}\${lucene.name}.dll" />
            <arg value="${lucene.jar}" />
        </exec>
        <exec executable="${ikvmc}">
            <arg value="-reference:${ikvm.dir}/bin/IKVM.OpenJDK.ClassLibrary.dll" />
            <arg value="-reference:${ikvm.dir}/bin/IKVM.AWT.WinForms.dll" />
            <arg value="-reference:bin/${lucene.name}.dll" />
            <arg value="-target:library" />
            <arg value="-compressresources" />
            <arg value="-out:${bin.dir}\${lucene-demos.name}.dll" />
            <arg value="${lucene-demos.jar}" />
        </exec>
        <echo>Building PDFBox</echo>
        <exec executable="${ikvmc}">
            <arg value="-reference:${ikvm.dir}/bin/IKVM.OpenJDK.ClassLibrary.dll" />
            <arg value="-reference:${ikvm.dir}/bin/IKVM.AWT.WinForms.dll" />
            <arg value="-reference:bin/${fontbox.name}.dll" />
            <arg value="-reference:bin/${jempbox.name}.dll" />
            <arg value="-reference:bin/${lucene.name}.dll" />
            <arg value="-reference:bin/${lucene-demos.name}.dll" />
            <arg value="-reference:bin/${bcprov.name}.dll" />
            <arg value="-reference:bin/${bcmail.name}.dll" />
            <arg value="-target:library" />
            <arg value="-compressresources" />
            <arg value="-out:${bin.dir}\${release.name}.dll" />
            <arg value="lib\${release.name}.jar" />
        </exec>
        <echo>Building Decrypt</echo>
        <exec executable="${ikvmc}">
            <arg value="-reference:${ikvm.dir}/bin/IKVM.OpenJDK.ClassLibrary.dll" />
            <arg value="-reference:${ikvm.dir}/bin/IKVM.AWT.WinForms.dll" />
            <arg value="-reference:bin\${release.name}.dll" />
            <arg value="-out:${bin.dir}\Decrypt.exe" />
            <arg value="${target.dir}\classes\org\apache\pdfbox\Decrypt.class" />
        </exec>
        <exec executable="${ikvmc}">
            <arg value="-reference:${ikvm.dir}/bin/IKVM.OpenJDK.ClassLibrary.dll" />
            <arg value="-reference:${ikvm.dir}/bin/IKVM.AWT.WinForms.dll" />
            <arg value="-reference:bin\${release.name}.dll" />
            <arg value="-out:${bin.dir}\Encrypt.exe" />
            <arg value="${target.dir}\classes\org\apache\pdfbox\Encrypt.class" />
        </exec>
        <exec executable="${ikvmc}">
            <arg value="-reference:${ikvm.dir}/bin/IKVM.OpenJDK.ClassLibrary.dll" />
            <arg value="-reference:${ikvm.dir}/bin/IKVM.AWT.WinForms.dll" />
            <arg value="-reference:bin\${release.name}.dll" />
            <arg value="-out:${bin.dir}\ExportFDF.exe" />
            <arg value="${target.dir}\classes\org\apache\pdfbox\ExportFDF.class" />
        </exec>
        <exec executable="${ikvmc}">
            <arg value="-reference:${ikvm.dir}/bin/IKVM.OpenJDK.ClassLibrary.dll" />
            <arg value="-reference:${ikvm.dir}/bin/IKVM.AWT.WinForms.dll" />
            <arg value="-reference:bin\${release.name}.dll" />
            <arg value="-out:${bin.dir}\ExportXFDF.exe" />
            <arg value="${target.dir}\classes\org\apache\pdfbox\ExportXFDF.class" />
        </exec>
        <exec executable="${ikvmc}">
            <arg value="-reference:${ikvm.dir}/bin/IKVM.OpenJDK.ClassLibrary.dll" />
            <arg value="-reference:${ikvm.dir}/bin/IKVM.AWT.WinForms.dll" />
            <arg value="-reference:bin\${release.name}.dll" />
            <arg value="-out:${bin.dir}\ExtractImages.exe" />
            <arg value="${target.dir}\classes\org\apache\pdfbox\ExtractImages.class" />
        </exec>
        <exec executable="${ikvmc}">
            <arg value="-reference:${ikvm.dir}/bin/IKVM.OpenJDK.ClassLibrary.dll" />
            <arg value="-reference:${ikvm.dir}/bin/IKVM.AWT.WinForms.dll" />
            <arg value="-reference:bin\${release.name}.dll" />
            <arg value="-out:${bin.dir}\ExtractText.exe" />
            <arg value="${target.dir}\classes\org\apache\pdfbox\ExtractText.class" />
        </exec>
        <exec executable="${ikvmc}">
            <arg value="-reference:${ikvm.dir}/bin/IKVM.OpenJDK.ClassLibrary.dll" />
            <arg value="-reference:${ikvm.dir}/bin/IKVM.AWT.WinForms.dll" />
            <arg value="-reference:bin\${release.name}.dll" />
            <arg value="-out:${bin.dir}\ImportFDF.exe" />
            <arg value="${target.dir}\classes\org\apache\pdfbox\ImportFDF.class" />
        </exec>
        <exec executable="${ikvmc}">
            <arg value="-reference:${ikvm.dir}/bin/IKVM.OpenJDK.ClassLibrary.dll" />
            <arg value="-reference:${ikvm.dir}/bin/IKVM.AWT.WinForms.dll" />
            <arg value="-reference:bin\${release.name}.dll" />
            <arg value="-out:${bin.dir}\ImportXFDF.exe" />
            <arg value="${target.dir}\classes\org\apache\pdfbox\ImportXFDF.class" />
        </exec>
        <exec executable="${ikvmc}">
            <arg value="-reference:${ikvm.dir}/bin/IKVM.OpenJDK.ClassLibrary.dll" />
            <arg value="-reference:${ikvm.dir}/bin/IKVM.AWT.WinForms.dll" />
            <arg value="-reference:bin\${release.name}.dll" />
            <arg value="-out:${bin.dir}\Overlay.exe" />
            <arg value="${target.dir}\classes\org\apache\pdfbox\Overlay.class" />
        </exec>
        <exec executable="${ikvmc}">
            <arg value="-reference:${ikvm.dir}/bin/IKVM.OpenJDK.ClassLibrary.dll" />
            <arg value="-reference:${ikvm.dir}/bin/IKVM.AWT.WinForms.dll" />
            <arg value="-reference:bin\${release.name}.dll" />
            <arg value="-out:${bin.dir}\PDFSplit.exe" />
            <arg value="${target.dir}\classes\org\apache\pdfbox\PDFSplit.class" />
        </exec>
        <exec executable="${ikvmc}">
            <arg value="-reference:${ikvm.dir}/bin/IKVM.OpenJDK.ClassLibrary.dll" />
            <arg value="-reference:${ikvm.dir}/bin/IKVM.AWT.WinForms.dll" />
            <arg value="-reference:bin\${release.name}.dll" />
            <arg value="-out:${bin.dir}\PDFReader.exe" />
            <arg value="${target.dir}\classes\org\apache\pdfbox\PDFReader.class" />
        </exec>
        <!--The Swing/AWT support in classpath is not quite good enough to make this
            work, so for now we will just leave blank.-->
        <!--<exec executable="${ikvmc}">
            <arg value="-reference:${ikvm.dir}/bin/IKVM.OpenJDK.ClassLibrary.dll" />
            <arg value="-reference:${ikvm.dir}/bin/IKVM.AWT.WinForms.dll" />
            <arg value="-reference:bin\${release.name}.dll" />
            <arg value="-out:bin\PDFDebugger.exe" />
            <arg value="classes\org\apache\pdfbox\PDFDebugger.class" />
        </exec>-->
    </target>

    <target name="javadoc" depends="compile" description="Create Javadocs">
        <property name="release.name" value="${project.name}-${project.version}" />
        <javadoc packagenames="org.*"
               sourcepath="${src.dir}"
               destdir="${docs.dir}"
               author="true"
               version="true"
               use="true"
               windowtitle="${release.name} API"
               doctitle="${project.name}"
               verbose="no"
               classpathref="build.classpath"
               encoding="ISO-8859-1"
               breakiterator="yes">
            <link href="http://java.sun.com/j2se/1.4.2/docs/api/"/>
            <link href="http://jakarta.apache.org/lucene/docs/api/" />
            <!--<link href="http://jakarta.apache.org/ant/manual/api/" />-->
        </javadoc>
        <!-- PDFBOX-461: Disable javadoc creation timestamp -->
        <replaceregexp match="&lt;!-- Generated by javadoc .* --&gt;"
                       replace="&lt;!-- Generated by javadoc --&gt;"
                       flags="g" byline="true">
            <fileset dir="${docs.dir}" includes="**/*.html" />
        </replaceregexp>
    </target>

    <!-- FORREST_HOME must be set as an environment variable -->
    <property name="project.home" value="${basedir}/website" />
    <property name="forrest.jvmargs" value="-Djava.awt.headless=true" />
    <import file="${env.FORREST_HOME}/main/forrest.build.xml" optional="true"/>
    <target name="website" if="env.FORREST_HOME">
       <antcall target="site"/>
    </target>

</project>
