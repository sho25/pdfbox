begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cff
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|internal
operator|.
name|ArrayComparisonFailure
import|;
end_import

begin_comment
comment|/**  * This class includes some tests for the Type1FontUtil class.  *  * @author Villu Ruusmann  * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|Type1FontUtilTest
extends|extends
name|TestCase
block|{
specifier|static
specifier|final
name|long
name|DEFAULTSEED
init|=
literal|12345
decl_stmt|;
specifier|static
specifier|final
name|long
name|LOOPS
init|=
literal|1000
decl_stmt|;
comment|/**      * Tests the hex encoding/decoding.      */
specifier|public
name|void
name|testHexEncoding
parameter_list|()
block|{
name|long
name|seed
init|=
name|DEFAULTSEED
decl_stmt|;
name|tryHexEncoding
argument_list|(
name|seed
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|LOOPS
condition|;
operator|++
name|i
control|)
block|{
name|tryHexEncoding
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|tryHexEncoding
parameter_list|(
name|long
name|seed
parameter_list|)
throws|throws
name|ArrayComparisonFailure
block|{
name|byte
index|[]
name|bytes
init|=
name|createRandomByteArray
argument_list|(
literal|128
argument_list|,
name|seed
argument_list|)
decl_stmt|;
name|String
name|encodedBytes
init|=
name|Type1FontUtil
operator|.
name|hexEncode
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|byte
index|[]
name|decodedBytes
init|=
name|Type1FontUtil
operator|.
name|hexDecode
argument_list|(
name|encodedBytes
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
literal|"Seed: "
operator|+
name|seed
argument_list|,
name|bytes
argument_list|,
name|decodedBytes
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests the eexec encryption/decryption.      */
specifier|public
name|void
name|testEexecEncryption
parameter_list|()
block|{
name|long
name|seed
init|=
name|DEFAULTSEED
decl_stmt|;
name|tryEexecEncryption
argument_list|(
name|seed
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|LOOPS
condition|;
operator|++
name|i
control|)
block|{
name|tryEexecEncryption
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|tryEexecEncryption
parameter_list|(
name|long
name|seed
parameter_list|)
throws|throws
name|ArrayComparisonFailure
block|{
name|byte
index|[]
name|bytes
init|=
name|createRandomByteArray
argument_list|(
literal|128
argument_list|,
name|seed
argument_list|)
decl_stmt|;
name|byte
index|[]
name|encryptedBytes
init|=
name|Type1FontUtil
operator|.
name|eexecEncrypt
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|byte
index|[]
name|decryptedBytes
init|=
name|Type1FontUtil
operator|.
name|eexecDecrypt
argument_list|(
name|encryptedBytes
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
literal|"Seed: "
operator|+
name|seed
argument_list|,
name|bytes
argument_list|,
name|decryptedBytes
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests the charstring encryption/decryption.      */
specifier|public
name|void
name|testCharstringEncryption
parameter_list|()
block|{
name|long
name|seed
init|=
name|DEFAULTSEED
decl_stmt|;
name|tryCharstringEncryption
argument_list|(
name|seed
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|LOOPS
condition|;
operator|++
name|i
control|)
block|{
name|tryCharstringEncryption
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|tryCharstringEncryption
parameter_list|(
name|long
name|seed
parameter_list|)
throws|throws
name|ArrayComparisonFailure
block|{
name|byte
index|[]
name|bytes
init|=
name|createRandomByteArray
argument_list|(
literal|128
argument_list|,
name|seed
argument_list|)
decl_stmt|;
name|byte
index|[]
name|encryptedBytes
init|=
name|Type1FontUtil
operator|.
name|charstringEncrypt
argument_list|(
name|bytes
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|byte
index|[]
name|decryptedBytes
init|=
name|Type1FontUtil
operator|.
name|charstringDecrypt
argument_list|(
name|encryptedBytes
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
literal|"Seed: "
operator|+
name|seed
argument_list|,
name|bytes
argument_list|,
name|decryptedBytes
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|byte
index|[]
name|createRandomByteArray
parameter_list|(
name|int
name|arrayLength
parameter_list|,
name|long
name|seed
parameter_list|)
block|{
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|arrayLength
index|]
decl_stmt|;
name|Random
name|ramdom
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arrayLength
condition|;
name|i
operator|++
control|)
block|{
name|bytes
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|ramdom
operator|.
name|nextInt
argument_list|(
literal|256
argument_list|)
expr_stmt|;
block|}
return|return
name|bytes
return|;
block|}
block|}
end_class

end_unit

