begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cff
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_comment
comment|/**  * This class includes some test cases for the Type1CharStringFormatter and the Type1CharStringParser.  *   * @author Villu Ruusmann  * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|Type1CharStringTest
block|{
comment|/**      * Tests the encoding and decoding of a command sequence.      * @throws IOException if an error occurs during reading      */
annotation|@
name|Test
specifier|public
name|void
name|commandEncoding
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|commands
init|=
name|createCommandSequence
argument_list|(
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|12
block|,
literal|0
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|31
block|}
argument_list|)
decl_stmt|;
name|byte
index|[]
name|encodedCommands
init|=
operator|new
name|Type1CharStringFormatter
argument_list|()
operator|.
name|format
argument_list|(
name|commands
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|decodedCommands
init|=
operator|new
name|Type1CharStringParser
argument_list|(
literal|"TestFont"
argument_list|,
literal|"TestGlyph"
argument_list|)
operator|.
name|parse
argument_list|(
name|encodedCommands
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|+
literal|2
operator|+
literal|1
argument_list|,
name|encodedCommands
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|commands
argument_list|,
name|decodedCommands
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests the encoding and decoding of a number sequence.       * @throws IOException if an error occurs during reading      */
annotation|@
name|Test
specifier|public
name|void
name|numberEncoding
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|numbers
init|=
name|createNumberSequence
argument_list|(
operator|-
literal|10000
argument_list|,
operator|-
literal|1131
argument_list|,
operator|-
literal|108
argument_list|,
operator|-
literal|107
argument_list|,
literal|0
argument_list|,
literal|107
argument_list|,
literal|108
argument_list|,
literal|1131
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
name|byte
index|[]
name|encodedNumbers
init|=
operator|new
name|Type1CharStringFormatter
argument_list|()
operator|.
name|format
argument_list|(
name|numbers
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|decodedNumbers
init|=
operator|new
name|Type1CharStringParser
argument_list|(
literal|"TestFont"
argument_list|,
literal|"TestGlyph"
argument_list|)
operator|.
name|parse
argument_list|(
name|encodedNumbers
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
operator|+
literal|2
operator|*
literal|2
operator|+
literal|3
operator|*
literal|1
operator|+
literal|2
operator|*
literal|2
operator|+
literal|5
argument_list|,
name|encodedNumbers
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numbers
argument_list|,
name|decodedNumbers
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|Object
argument_list|>
name|createCommandSequence
parameter_list|(
name|int
index|[]
modifier|...
name|values
parameter_list|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|sequence
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
index|[]
name|value
range|:
name|values
control|)
block|{
name|sequence
operator|.
name|add
argument_list|(
name|value
operator|.
name|length
operator|>
literal|1
condition|?
operator|new
name|CharStringCommand
argument_list|(
name|value
index|[
literal|0
index|]
argument_list|,
name|value
index|[
literal|1
index|]
argument_list|)
else|:
operator|new
name|CharStringCommand
argument_list|(
name|value
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sequence
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|Object
argument_list|>
name|createNumberSequence
parameter_list|(
name|int
modifier|...
name|values
parameter_list|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|sequence
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|value
range|:
name|values
control|)
block|{
name|sequence
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|sequence
return|;
block|}
block|}
end_class

end_unit

