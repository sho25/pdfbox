begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|ttf
operator|.
name|gsub
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|CompoundCharacterTokenizerTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testTokenize_happyPath_1
parameter_list|()
block|{
comment|// given
name|CompoundCharacterTokenizer
name|tokenizer
init|=
operator|new
name|CompoundCharacterTokenizer
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"HrkJj"
block|,
literal|"68RetP"
block|,
literal|"Yx!23uyt"
block|}
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|text
init|=
literal|"12345HrkJjxabbcc68RetPxxxcfb1245678Yx!23uyt889000"
decl_stmt|;
comment|// when
name|List
argument_list|<
name|String
argument_list|>
name|tokens
init|=
name|tokenizer
operator|.
name|tokenize
argument_list|(
name|text
argument_list|)
decl_stmt|;
comment|// then
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|tokens
operator|.
name|forEach
argument_list|(
name|token
lambda|->
name|sb
operator|.
name|append
argument_list|(
name|token
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|text
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"12345"
argument_list|,
literal|"HrkJj"
argument_list|,
literal|"xabbcc"
argument_list|,
literal|"68RetP"
argument_list|,
literal|"xxxcfb1245678"
argument_list|,
literal|"Yx!23uyt"
argument_list|,
literal|"889000"
argument_list|)
argument_list|,
name|tokens
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTokenize_happyPath_2
parameter_list|()
block|{
comment|// given
name|CompoundCharacterTokenizer
name|tokenizer
init|=
operator|new
name|CompoundCharacterTokenizer
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"84_93"
block|,
literal|"104_82"
block|,
literal|"104_87"
block|}
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|text
init|=
literal|"84_112_93_104_82_61_96_102_93_104_87_110"
decl_stmt|;
comment|// when
name|List
argument_list|<
name|String
argument_list|>
name|tokens
init|=
name|tokenizer
operator|.
name|tokenize
argument_list|(
name|text
argument_list|)
decl_stmt|;
comment|// then
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|tokens
operator|.
name|forEach
argument_list|(
name|token
lambda|->
name|sb
operator|.
name|append
argument_list|(
name|token
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|text
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"84_112_93_"
argument_list|,
literal|"104_82"
argument_list|,
literal|"_61_96_102_93_"
argument_list|,
literal|"104_87"
argument_list|,
literal|"_110"
argument_list|)
argument_list|,
name|tokens
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTokenize_happyPath_3
parameter_list|()
block|{
comment|// given
name|CompoundCharacterTokenizer
name|tokenizer
init|=
operator|new
name|CompoundCharacterTokenizer
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"67_112_96"
block|,
literal|"74_112_76"
block|}
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|text
init|=
literal|"67_112_96_103_93_108_93"
decl_stmt|;
comment|// when
name|List
argument_list|<
name|String
argument_list|>
name|tokens
init|=
name|tokenizer
operator|.
name|tokenize
argument_list|(
name|text
argument_list|)
decl_stmt|;
comment|// then
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|tokens
operator|.
name|forEach
argument_list|(
name|token
lambda|->
name|sb
operator|.
name|append
argument_list|(
name|token
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|text
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"67_112_96"
argument_list|,
literal|"_103_93_108_93"
argument_list|)
argument_list|,
name|tokens
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTokenize_happyPath_4
parameter_list|()
block|{
comment|// given
name|CompoundCharacterTokenizer
name|tokenizer
init|=
operator|new
name|CompoundCharacterTokenizer
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"67_112_96"
block|,
literal|"74_112_76"
block|}
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|text
init|=
literal|"94_67_112_96_112_91_103"
decl_stmt|;
comment|// when
name|List
argument_list|<
name|String
argument_list|>
name|tokens
init|=
name|tokenizer
operator|.
name|tokenize
argument_list|(
name|text
argument_list|)
decl_stmt|;
comment|// then
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|tokens
operator|.
name|forEach
argument_list|(
name|token
lambda|->
name|sb
operator|.
name|append
argument_list|(
name|token
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|text
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"94_"
argument_list|,
literal|"67_112_96"
argument_list|,
literal|"_112_91_103"
argument_list|)
argument_list|,
name|tokens
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTokenize_happyPath_5
parameter_list|()
block|{
comment|// given
name|CompoundCharacterTokenizer
name|tokenizer
init|=
operator|new
name|CompoundCharacterTokenizer
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"67_112"
block|,
literal|"76_112"
block|}
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|text
init|=
literal|"94_167_112_91_103"
decl_stmt|;
comment|// when
name|List
argument_list|<
name|String
argument_list|>
name|tokens
init|=
name|tokenizer
operator|.
name|tokenize
argument_list|(
name|text
argument_list|)
decl_stmt|;
comment|// then
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|tokens
operator|.
name|forEach
argument_list|(
name|token
lambda|->
name|sb
operator|.
name|append
argument_list|(
name|token
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|text
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"94_1"
argument_list|,
literal|"67_112"
argument_list|,
literal|"_91_103"
argument_list|)
argument_list|,
name|tokens
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTokenize_regexAtStart
parameter_list|()
block|{
comment|// given
name|CompoundCharacterTokenizer
name|tokenizer
init|=
operator|new
name|CompoundCharacterTokenizer
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"HrkJj"
block|,
literal|"68RetP"
block|,
literal|"Yx!23uyt"
block|}
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|text
init|=
literal|"Yx!23uyte12345HrkJjxabbcc68RetPxxxcfb1245678Yx!23uyt889000"
decl_stmt|;
comment|// when
name|List
argument_list|<
name|String
argument_list|>
name|tokens
init|=
name|tokenizer
operator|.
name|tokenize
argument_list|(
name|text
argument_list|)
decl_stmt|;
comment|// then
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|tokens
operator|.
name|forEach
argument_list|(
name|token
lambda|->
name|sb
operator|.
name|append
argument_list|(
name|token
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|text
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|tokenList
init|=
name|tokens
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|tokenList
operator|.
name|indexOf
argument_list|(
literal|"Yx!23uyt"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTokenize_regexAtEnd
parameter_list|()
block|{
comment|// given
name|CompoundCharacterTokenizer
name|tokenizer
init|=
operator|new
name|CompoundCharacterTokenizer
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"HrkJj"
block|,
literal|"68RetP"
block|,
literal|"Yx!23uyt"
block|}
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|text
init|=
literal|"Yx!23uyte12345HrkJjxabbcc68RetPxxxcfb1245678Yx!23uyt889000HrkJj"
decl_stmt|;
comment|// when
name|List
argument_list|<
name|String
argument_list|>
name|tokens
init|=
name|tokenizer
operator|.
name|tokenize
argument_list|(
name|text
argument_list|)
decl_stmt|;
comment|// then
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|tokens
operator|.
name|forEach
argument_list|(
name|token
lambda|->
name|sb
operator|.
name|append
argument_list|(
name|token
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|text
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|tokens
operator|.
name|indexOf
argument_list|(
literal|"Yx!23uyt"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|tokens
operator|.
name|indexOf
argument_list|(
literal|"HrkJj"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tokens
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
name|tokens
operator|.
name|lastIndexOf
argument_list|(
literal|"HrkJj"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTokenize_Bangla
parameter_list|()
block|{
comment|// given
name|CompoundCharacterTokenizer
name|tokenizer
init|=
operator|new
name|CompoundCharacterTokenizer
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"\u0995\u09cd\u09b7"
block|,
literal|"\u09aa\u09c1\u09a4\u09c1"
block|}
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|text
init|=
literal|"\u0986\u09ae\u09bf \u0995\u09cb\u09a8 \u09aa\u09a5\u09c7  \u0995\u09cd\u09b7\u09c0\u09b0\u09c7\u09b0 \u09b7\u09a8\u09cd\u09a1  \u09aa\u09c1\u09a4\u09c1\u09b2 \u09b0\u09c1\u09aa\u09cb  \u0997\u0999\u09cd\u0997\u09be \u098b\u09b7\u09bf"
decl_stmt|;
comment|// when
name|List
argument_list|<
name|String
argument_list|>
name|tokens
init|=
name|tokenizer
operator|.
name|tokenize
argument_list|(
name|text
argument_list|)
decl_stmt|;
comment|// then
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|tokens
operator|.
name|forEach
argument_list|(
name|token
lambda|->
name|sb
operator|.
name|append
argument_list|(
name|token
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|text
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|tokenList
init|=
name|tokens
decl_stmt|;
name|assertTrue
argument_list|(
name|tokenList
operator|.
name|contains
argument_list|(
literal|"\u0995\u09cd\u09b7"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokenList
operator|.
name|contains
argument_list|(
literal|"\u09aa\u09c1\u09a4\u09c1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

