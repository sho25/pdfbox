begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright (c) 2005, www.fontbox.org  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are met:  *  * 1. Redistributions of source code must retain the above copyright notice,  *    this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright notice,  *    this list of conditions and the following disclaimer in the documentation  *    and/or other materials provided with the distribution.  * 3. Neither the name of fontbox; nor the names of its  *    contributors may be used to endorse or promote products derived from this  *    software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * http://www.fontbox.org  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|fontbox
operator|.
name|ttf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * A table in a true type font.  *   * @author Ben Litchfield (ben@benlitchfield.com)  * @version $Revision: 1.1 $  */
end_comment

begin_class
specifier|public
class|class
name|NamingTable
extends|extends
name|TTFTable
block|{
comment|/**      * A tag that identifies this table type.      */
specifier|public
specifier|static
specifier|final
name|String
name|TAG
init|=
literal|"name"
decl_stmt|;
specifier|private
name|List
name|nameRecords
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
comment|/**      * This will read the required data from the stream.      *       * @param ttf The font that is being read.      * @param data The stream to read the data from.      * @throws IOException If there is an error reading the data.      */
specifier|public
name|void
name|initData
parameter_list|(
name|TrueTypeFont
name|ttf
parameter_list|,
name|TTFDataStream
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|formatSelector
init|=
name|data
operator|.
name|readUnsignedShort
argument_list|()
decl_stmt|;
name|int
name|numberOfNameRecords
init|=
name|data
operator|.
name|readUnsignedShort
argument_list|()
decl_stmt|;
name|int
name|offsetToStartOfStringStorage
init|=
name|data
operator|.
name|readUnsignedShort
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfNameRecords
condition|;
name|i
operator|++
control|)
block|{
name|NameRecord
name|nr
init|=
operator|new
name|NameRecord
argument_list|()
decl_stmt|;
name|nr
operator|.
name|initData
argument_list|(
name|ttf
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|nameRecords
operator|.
name|add
argument_list|(
name|nr
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfNameRecords
condition|;
name|i
operator|++
control|)
block|{
name|NameRecord
name|nr
init|=
operator|(
name|NameRecord
operator|)
name|nameRecords
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|data
operator|.
name|seek
argument_list|(
name|getOffset
argument_list|()
operator|+
operator|(
literal|2
operator|*
literal|3
operator|)
operator|+
name|numberOfNameRecords
operator|*
literal|2
operator|*
literal|6
operator|+
name|nr
operator|.
name|getStringOffset
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|platform
init|=
name|nr
operator|.
name|getPlatformId
argument_list|()
decl_stmt|;
name|int
name|encoding
init|=
name|nr
operator|.
name|getPlatformEncodingId
argument_list|()
decl_stmt|;
name|String
name|charset
init|=
literal|"ISO-8859-1"
decl_stmt|;
if|if
condition|(
name|platform
operator|==
literal|3
operator|&&
name|encoding
operator|==
literal|1
condition|)
block|{
name|charset
operator|=
literal|"UTF-16"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|platform
operator|==
literal|2
condition|)
block|{
if|if
condition|(
name|encoding
operator|==
literal|0
condition|)
block|{
name|charset
operator|=
literal|"US-ASCII"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|encoding
operator|==
literal|1
condition|)
block|{
comment|//not sure is this is correct??
name|charset
operator|=
literal|"ISO-10646-1"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|encoding
operator|==
literal|2
condition|)
block|{
name|charset
operator|=
literal|"ISO-8859-1"
expr_stmt|;
block|}
block|}
name|String
name|string
init|=
name|data
operator|.
name|readString
argument_list|(
name|nr
operator|.
name|getStringLength
argument_list|()
argument_list|,
name|charset
argument_list|)
decl_stmt|;
name|nr
operator|.
name|setString
argument_list|(
name|string
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This will get the name records for this naming table.      *       * @return A list of NameRecord objects.      */
specifier|public
name|List
name|getNameRecords
parameter_list|()
block|{
return|return
name|nameRecords
return|;
block|}
block|}
end_class

end_unit

