begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright (c) 2005, www.fontbox.org  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are met:  *  * 1. Redistributions of source code must retain the above copyright notice,  *    this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright notice,  *    this list of conditions and the following disclaimer in the documentation  *    and/or other materials provided with the distribution.  * 3. Neither the name of fontbox; nor the names of its  *    contributors may be used to endorse or promote products derived from this  *    software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * http://www.fontbox.org  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|fontbox
operator|.
name|ttf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * A table in a true type font.  *   * @author Ben Litchfield (ben@benlitchfield.com)  * @version $Revision: 1.1 $  */
end_comment

begin_class
specifier|public
class|class
name|CMAPTable
extends|extends
name|TTFTable
block|{
comment|/**      * A tag used to identify this table.      */
specifier|public
specifier|static
specifier|final
name|String
name|TAG
init|=
literal|"cmap"
decl_stmt|;
comment|/**      * A constant for the platform.      */
specifier|public
specifier|static
specifier|final
name|int
name|PLATFORM_WINDOWS
init|=
literal|3
decl_stmt|;
comment|/**      * An encoding constant.      */
specifier|public
specifier|static
specifier|final
name|int
name|ENCODING_SYMBOL
init|=
literal|0
decl_stmt|;
comment|/**      * An encoding constant.      */
specifier|public
specifier|static
specifier|final
name|int
name|ENCODING_UNICODE
init|=
literal|1
decl_stmt|;
comment|/**      * An encoding constant.      */
specifier|public
specifier|static
specifier|final
name|int
name|ENCODING_SHIFT_JIS
init|=
literal|2
decl_stmt|;
comment|/**      * An encoding constant.      */
specifier|public
specifier|static
specifier|final
name|int
name|ENCODING_BIG5
init|=
literal|3
decl_stmt|;
comment|/**      * An encoding constant.      */
specifier|public
specifier|static
specifier|final
name|int
name|ENCODING_PRC
init|=
literal|4
decl_stmt|;
comment|/**      * An encoding constant.      */
specifier|public
specifier|static
specifier|final
name|int
name|ENCODING_WANSUNG
init|=
literal|5
decl_stmt|;
comment|/**      * An encoding constant.      */
specifier|public
specifier|static
specifier|final
name|int
name|ENCODING_JOHAB
init|=
literal|6
decl_stmt|;
specifier|private
name|CMAPEncodingEntry
index|[]
name|cmaps
decl_stmt|;
comment|/**      * This will read the required data from the stream.      *       * @param ttf The font that is being read.      * @param data The stream to read the data from.      * @throws IOException If there is an error reading the data.      */
specifier|public
name|void
name|initData
parameter_list|(
name|TrueTypeFont
name|ttf
parameter_list|,
name|TTFDataStream
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|version
init|=
name|data
operator|.
name|readUnsignedShort
argument_list|()
decl_stmt|;
name|int
name|numberOfTables
init|=
name|data
operator|.
name|readUnsignedShort
argument_list|()
decl_stmt|;
name|cmaps
operator|=
operator|new
name|CMAPEncodingEntry
index|[
name|numberOfTables
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfTables
condition|;
name|i
operator|++
control|)
block|{
name|CMAPEncodingEntry
name|cmap
init|=
operator|new
name|CMAPEncodingEntry
argument_list|()
decl_stmt|;
name|cmap
operator|.
name|initData
argument_list|(
name|ttf
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|cmaps
index|[
name|i
index|]
operator|=
name|cmap
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfTables
condition|;
name|i
operator|++
control|)
block|{
name|cmaps
index|[
name|i
index|]
operator|.
name|initSubtable
argument_list|(
name|ttf
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @return Returns the cmaps.      */
specifier|public
name|CMAPEncodingEntry
index|[]
name|getCmaps
parameter_list|()
block|{
return|return
name|cmaps
return|;
block|}
comment|/**      * @param cmapsValue The cmaps to set.      */
specifier|public
name|void
name|setCmaps
parameter_list|(
name|CMAPEncodingEntry
index|[]
name|cmapsValue
parameter_list|)
block|{
name|this
operator|.
name|cmaps
operator|=
name|cmapsValue
expr_stmt|;
block|}
block|}
end_class

end_unit

