begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright (c) 2005, www.fontbox.org  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are met:  *  * 1. Redistributions of source code must retain the above copyright notice,  *    this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright notice,  *    this list of conditions and the following disclaimer in the documentation  *    and/or other materials provided with the distribution.  * 3. Neither the name of fontbox; nor the names of its  *    contributors may be used to endorse or promote products derived from this  *    software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * http://www.fontbox.org  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|fontbox
operator|.
name|ttf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * A table in a true type font.  *   * @author Ben Litchfield (ben@benlitchfield.com)  * @version $Revision: 1.1 $  */
end_comment

begin_class
specifier|public
class|class
name|HorizontalMetricsTable
extends|extends
name|TTFTable
block|{
comment|/**      * A tag that identifies this table type.      */
specifier|public
specifier|static
specifier|final
name|String
name|TAG
init|=
literal|"hmtx"
decl_stmt|;
specifier|private
name|int
index|[]
name|advanceWidth
decl_stmt|;
specifier|private
name|short
index|[]
name|leftSideBearing
decl_stmt|;
specifier|private
name|short
index|[]
name|nonHorizontalLeftSideBearing
decl_stmt|;
comment|/**      * This will read the required data from the stream.      *       * @param ttf The font that is being read.      * @param data The stream to read the data from.      * @throws IOException If there is an error reading the data.      */
specifier|public
name|void
name|initData
parameter_list|(
name|TrueTypeFont
name|ttf
parameter_list|,
name|TTFDataStream
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|HorizontalHeaderTable
name|hHeader
init|=
name|ttf
operator|.
name|getHorizontalHeader
argument_list|()
decl_stmt|;
name|MaximumProfileTable
name|maxp
init|=
name|ttf
operator|.
name|getMaximumProfile
argument_list|()
decl_stmt|;
name|int
name|numHMetrics
init|=
name|hHeader
operator|.
name|getNumberOfHMetrics
argument_list|()
decl_stmt|;
name|int
name|numGlyphs
init|=
name|maxp
operator|.
name|getNumGlyphs
argument_list|()
decl_stmt|;
name|advanceWidth
operator|=
operator|new
name|int
index|[
name|numHMetrics
index|]
expr_stmt|;
name|leftSideBearing
operator|=
operator|new
name|short
index|[
name|numHMetrics
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numHMetrics
condition|;
name|i
operator|++
control|)
block|{
name|advanceWidth
index|[
name|i
index|]
operator|=
name|data
operator|.
name|readUnsignedShort
argument_list|()
expr_stmt|;
name|leftSideBearing
index|[
name|i
index|]
operator|=
name|data
operator|.
name|readSignedShort
argument_list|()
expr_stmt|;
block|}
name|int
name|numberNonHorizontal
init|=
name|numGlyphs
operator|-
name|numHMetrics
decl_stmt|;
name|nonHorizontalLeftSideBearing
operator|=
operator|new
name|short
index|[
name|numberNonHorizontal
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberNonHorizontal
condition|;
name|i
operator|++
control|)
block|{
name|nonHorizontalLeftSideBearing
index|[
name|i
index|]
operator|=
name|data
operator|.
name|readSignedShort
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * @return Returns the advanceWidth.      */
specifier|public
name|int
index|[]
name|getAdvanceWidth
parameter_list|()
block|{
return|return
name|advanceWidth
return|;
block|}
comment|/**      * @param advanceWidthValue The advanceWidth to set.      */
specifier|public
name|void
name|setAdvanceWidth
parameter_list|(
name|int
index|[]
name|advanceWidthValue
parameter_list|)
block|{
name|this
operator|.
name|advanceWidth
operator|=
name|advanceWidthValue
expr_stmt|;
block|}
block|}
end_class

end_unit

