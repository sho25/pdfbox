begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright (c) 2005, www.fontbox.org  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are met:  *  * 1. Redistributions of source code must retain the above copyright notice,  *    this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright notice,  *    this list of conditions and the following disclaimer in the documentation  *    and/or other materials provided with the distribution.  * 3. Neither the name of fontbox; nor the names of its  *    contributors may be used to endorse or promote products derived from this  *    software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * http://www.fontbox.org  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|fontbox
operator|.
name|ttf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_comment
comment|/**  * A class to hold true type font information.  *   * @author Ben Litchfield (ben@benlitchfield.com)  * @version $Revision: 1.2 $  */
end_comment

begin_class
specifier|public
class|class
name|TrueTypeFont
block|{
specifier|private
name|float
name|version
decl_stmt|;
specifier|private
name|Map
name|tables
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|private
name|TTFDataStream
name|data
decl_stmt|;
comment|/**      * Constructor.  Clients should use the TTFParser to create a new TrueTypeFont object.      *       * @param fontData The font data.      */
name|TrueTypeFont
parameter_list|(
name|TTFDataStream
name|fontData
parameter_list|)
block|{
name|data
operator|=
name|fontData
expr_stmt|;
block|}
comment|/**      * Close the underlying resources.      *       * @throws IOException If there is an error closing the resources.      */
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|data
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * @return Returns the version.      */
specifier|public
name|float
name|getVersion
parameter_list|()
block|{
return|return
name|version
return|;
block|}
comment|/**      * @param versionValue The version to set.      */
specifier|public
name|void
name|setVersion
parameter_list|(
name|float
name|versionValue
parameter_list|)
block|{
name|version
operator|=
name|versionValue
expr_stmt|;
block|}
comment|/**      * Add a table definition.      *       * @param table The table to add.      */
specifier|public
name|void
name|addTable
parameter_list|(
name|TTFTable
name|table
parameter_list|)
block|{
name|tables
operator|.
name|put
argument_list|(
name|table
operator|.
name|getTag
argument_list|()
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get all of the tables.      *       * @return All of the tables.      */
specifier|public
name|Collection
name|getTables
parameter_list|()
block|{
return|return
name|tables
operator|.
name|values
argument_list|()
return|;
block|}
comment|/**      * This will get the naming table for the true type font.      *       * @return The naming table.      */
specifier|public
name|NamingTable
name|getNaming
parameter_list|()
block|{
return|return
operator|(
name|NamingTable
operator|)
name|tables
operator|.
name|get
argument_list|(
name|NamingTable
operator|.
name|TAG
argument_list|)
return|;
block|}
comment|/**      * Get the postscript table for this TTF.      *       * @return The postscript table.      */
specifier|public
name|PostScriptTable
name|getPostScript
parameter_list|()
block|{
return|return
operator|(
name|PostScriptTable
operator|)
name|tables
operator|.
name|get
argument_list|(
name|PostScriptTable
operator|.
name|TAG
argument_list|)
return|;
block|}
comment|/**      * Get the OS/2 table for this TTF.      *       * @return The OS/2 table.      */
specifier|public
name|OS2WindowsMetricsTable
name|getOS2Windows
parameter_list|()
block|{
return|return
operator|(
name|OS2WindowsMetricsTable
operator|)
name|tables
operator|.
name|get
argument_list|(
name|OS2WindowsMetricsTable
operator|.
name|TAG
argument_list|)
return|;
block|}
comment|/**      * Get the maxp table for this TTF.      *       * @return The maxp table.      */
specifier|public
name|MaximumProfileTable
name|getMaximumProfile
parameter_list|()
block|{
return|return
operator|(
name|MaximumProfileTable
operator|)
name|tables
operator|.
name|get
argument_list|(
name|MaximumProfileTable
operator|.
name|TAG
argument_list|)
return|;
block|}
comment|/**      * Get the head table for this TTF.      *       * @return The head table.      */
specifier|public
name|HeaderTable
name|getHeader
parameter_list|()
block|{
return|return
operator|(
name|HeaderTable
operator|)
name|tables
operator|.
name|get
argument_list|(
name|HeaderTable
operator|.
name|TAG
argument_list|)
return|;
block|}
comment|/**      * Get the hhea table for this TTF.      *       * @return The hhea table.      */
specifier|public
name|HorizontalHeaderTable
name|getHorizontalHeader
parameter_list|()
block|{
return|return
operator|(
name|HorizontalHeaderTable
operator|)
name|tables
operator|.
name|get
argument_list|(
name|HorizontalHeaderTable
operator|.
name|TAG
argument_list|)
return|;
block|}
comment|/**      * Get the hmtx table for this TTF.      *       * @return The hmtx table.      */
specifier|public
name|HorizontalMetricsTable
name|getHorizontalMetrics
parameter_list|()
block|{
return|return
operator|(
name|HorizontalMetricsTable
operator|)
name|tables
operator|.
name|get
argument_list|(
name|HorizontalMetricsTable
operator|.
name|TAG
argument_list|)
return|;
block|}
comment|/**      * Get the loca table for this TTF.      *       * @return The loca table.      */
specifier|public
name|IndexToLocationTable
name|getIndexToLocation
parameter_list|()
block|{
return|return
operator|(
name|IndexToLocationTable
operator|)
name|tables
operator|.
name|get
argument_list|(
name|IndexToLocationTable
operator|.
name|TAG
argument_list|)
return|;
block|}
comment|/**      * Get the glyf table for this TTF.      *       * @return The glyf table.      */
specifier|public
name|GlyphTable
name|getGlyph
parameter_list|()
block|{
return|return
operator|(
name|GlyphTable
operator|)
name|tables
operator|.
name|get
argument_list|(
name|GlyphTable
operator|.
name|TAG
argument_list|)
return|;
block|}
comment|/**      * Get the cmap table for this TTF.      *       * @return The cmap table.      */
specifier|public
name|CMAPTable
name|getCMAP
parameter_list|()
block|{
return|return
operator|(
name|CMAPTable
operator|)
name|tables
operator|.
name|get
argument_list|(
name|CMAPTable
operator|.
name|TAG
argument_list|)
return|;
block|}
comment|/**      * This permit to get the data of the True Type Font      * program representing the stream used to build this       * object (normally from the TTFParser object).      *       * @return COSStream True type font program stream      *       * @throws IOException If there is an error getting the font data.      */
specifier|public
name|InputStream
name|getOriginalData
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|data
operator|.
name|getOriginalData
argument_list|()
return|;
block|}
block|}
end_class

end_unit

