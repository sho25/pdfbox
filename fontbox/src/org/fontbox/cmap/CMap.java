begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|fontbox
operator|.
name|cmap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * This class represents a CMap file.  *  * @author Ben Litchfield (ben@benlitchfield.com)  * @version $Revision: 1.3 $  */
end_comment

begin_class
specifier|public
class|class
name|CMap
block|{
specifier|private
name|List
name|codeSpaceRanges
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|private
name|Map
name|singleByteMappings
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|private
name|Map
name|doubleByteMappings
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|/**      * Creates a new instance of CMap.      */
specifier|public
name|CMap
parameter_list|()
block|{
comment|//default constructor
block|}
comment|/**      * This will tell if this cmap has any one byte mappings.      *       * @return true If there are any one byte mappings, false otherwise.      */
specifier|public
name|boolean
name|hasOneByteMappings
parameter_list|()
block|{
return|return
name|singleByteMappings
operator|.
name|size
argument_list|()
operator|>
literal|0
return|;
block|}
comment|/**      * This will tell if this cmap has any two byte mappings.      *       * @return true If there are any two byte mappings, false otherwise.      */
specifier|public
name|boolean
name|hasTwoByteMappings
parameter_list|()
block|{
return|return
name|doubleByteMappings
operator|.
name|size
argument_list|()
operator|>
literal|0
return|;
block|}
comment|/**      * This will perform a lookup into the map.      *      * @param code The code used to lookup.      * @param offset The offset into the byte array.      * @param length The length of the data we are getting.      *      * @return The string that matches the lookup.      */
specifier|public
name|String
name|lookup
parameter_list|(
name|byte
index|[]
name|code
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|String
name|result
init|=
literal|null
decl_stmt|;
name|Integer
name|key
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|length
operator|==
literal|1
condition|)
block|{
name|key
operator|=
operator|new
name|Integer
argument_list|(
operator|(
name|code
index|[
name|offset
index|]
operator|+
literal|256
operator|)
operator|%
literal|256
argument_list|)
expr_stmt|;
name|result
operator|=
operator|(
name|String
operator|)
name|singleByteMappings
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|length
operator|==
literal|2
condition|)
block|{
name|int
name|intKey
init|=
operator|(
name|code
index|[
name|offset
index|]
operator|+
literal|256
operator|)
operator|%
literal|256
decl_stmt|;
name|intKey
operator|<<=
literal|8
expr_stmt|;
name|intKey
operator|+=
operator|(
name|code
index|[
name|offset
operator|+
literal|1
index|]
operator|+
literal|256
operator|)
operator|%
literal|256
expr_stmt|;
name|key
operator|=
operator|new
name|Integer
argument_list|(
name|intKey
argument_list|)
expr_stmt|;
name|result
operator|=
operator|(
name|String
operator|)
name|doubleByteMappings
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * This will add a mapping.      *      * @param src The src to the mapping.      * @param dest The dest to the mapping.      *      * @throws IOException if the src is invalid.      */
specifier|public
name|void
name|addMapping
parameter_list|(
name|byte
index|[]
name|src
parameter_list|,
name|String
name|dest
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|src
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|singleByteMappings
operator|.
name|put
argument_list|(
operator|new
name|Integer
argument_list|(
name|src
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|dest
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|src
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|int
name|intSrc
init|=
name|src
index|[
literal|0
index|]
operator|&
literal|0xFF
decl_stmt|;
name|intSrc
operator|<<=
literal|8
expr_stmt|;
name|intSrc
operator||=
operator|(
name|src
index|[
literal|1
index|]
operator|&
literal|0xFF
operator|)
expr_stmt|;
name|doubleByteMappings
operator|.
name|put
argument_list|(
operator|new
name|Integer
argument_list|(
name|intSrc
argument_list|)
argument_list|,
name|dest
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Mapping code should be 1 or two bytes and not "
operator|+
name|src
operator|.
name|length
argument_list|)
throw|;
block|}
block|}
comment|/**      * This will add a codespace range.      *      * @param range A single codespace range.      */
specifier|public
name|void
name|addCodespaceRange
parameter_list|(
name|CodespaceRange
name|range
parameter_list|)
block|{
name|codeSpaceRanges
operator|.
name|add
argument_list|(
name|range
argument_list|)
expr_stmt|;
block|}
comment|/**      * Getter for property codeSpaceRanges.      *      * @return Value of property codeSpaceRanges.      */
specifier|public
name|List
name|getCodeSpaceRanges
parameter_list|()
block|{
return|return
name|codeSpaceRanges
return|;
block|}
comment|/**      * Implementation of the usecmap operator.  This will      * copy all of the mappings from one cmap to another.      *       * @param cmap The cmap to load mappings from.      */
specifier|public
name|void
name|useCmap
parameter_list|(
name|CMap
name|cmap
parameter_list|)
block|{
name|this
operator|.
name|codeSpaceRanges
operator|.
name|addAll
argument_list|(
name|cmap
operator|.
name|codeSpaceRanges
argument_list|)
expr_stmt|;
name|this
operator|.
name|singleByteMappings
operator|.
name|putAll
argument_list|(
name|cmap
operator|.
name|singleByteMappings
argument_list|)
expr_stmt|;
name|this
operator|.
name|doubleByteMappings
operator|.
name|putAll
argument_list|(
name|cmap
operator|.
name|doubleByteMappings
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

