begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright (c) 2005, www.fontbox.org  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are met:  *  * 1. Redistributions of source code must retain the above copyright notice,  *    this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright notice,  *    this list of conditions and the following disclaimer in the documentation  *    and/or other materials provided with the distribution.  * 3. Neither the name of fontbox; nor the names of its  *    contributors may be used to endorse or promote products derived from this  *    software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * http://www.fontbox.org  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|fontbox
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Point
import|;
end_import

begin_comment
comment|/**  * This is an implementation of a bounding box.  This was originally written for the  * AMF parser.  *  * @author Ben Litchfield (ben@benlitchfield.com)  * @version $Revision: 1.1 $  */
end_comment

begin_class
specifier|public
class|class
name|BoundingBox
block|{
specifier|private
name|float
name|lowerLeftX
decl_stmt|;
specifier|private
name|float
name|lowerLeftY
decl_stmt|;
specifier|private
name|float
name|upperRightX
decl_stmt|;
specifier|private
name|float
name|upperRightY
decl_stmt|;
comment|/**      * Getter for property lowerLeftX.      *      * @return Value of property lowerLeftX.      */
specifier|public
name|float
name|getLowerLeftX
parameter_list|()
block|{
return|return
name|lowerLeftX
return|;
block|}
comment|/**      * Setter for property lowerLeftX.      *      * @param lowerLeftXValue New value of property lowerLeftX.      */
specifier|public
name|void
name|setLowerLeftX
parameter_list|(
name|float
name|lowerLeftXValue
parameter_list|)
block|{
name|this
operator|.
name|lowerLeftX
operator|=
name|lowerLeftXValue
expr_stmt|;
block|}
comment|/**      * Getter for property lowerLeftY.      *      * @return Value of property lowerLeftY.      */
specifier|public
name|float
name|getLowerLeftY
parameter_list|()
block|{
return|return
name|lowerLeftY
return|;
block|}
comment|/**      * Setter for property lowerLeftY.      *      * @param lowerLeftYValue New value of property lowerLeftY.      */
specifier|public
name|void
name|setLowerLeftY
parameter_list|(
name|float
name|lowerLeftYValue
parameter_list|)
block|{
name|this
operator|.
name|lowerLeftY
operator|=
name|lowerLeftYValue
expr_stmt|;
block|}
comment|/**      * Getter for property upperRightX.      *      * @return Value of property upperRightX.      */
specifier|public
name|float
name|getUpperRightX
parameter_list|()
block|{
return|return
name|upperRightX
return|;
block|}
comment|/**      * Setter for property upperRightX.      *      * @param upperRightXValue New value of property upperRightX.      */
specifier|public
name|void
name|setUpperRightX
parameter_list|(
name|float
name|upperRightXValue
parameter_list|)
block|{
name|this
operator|.
name|upperRightX
operator|=
name|upperRightXValue
expr_stmt|;
block|}
comment|/**      * Getter for property upperRightY.      *      * @return Value of property upperRightY.      */
specifier|public
name|float
name|getUpperRightY
parameter_list|()
block|{
return|return
name|upperRightY
return|;
block|}
comment|/**      * Setter for property upperRightY.      *      * @param upperRightYValue New value of property upperRightY.      */
specifier|public
name|void
name|setUpperRightY
parameter_list|(
name|float
name|upperRightYValue
parameter_list|)
block|{
name|this
operator|.
name|upperRightY
operator|=
name|upperRightYValue
expr_stmt|;
block|}
comment|/**      * This will get the width of this rectangle as calculated by      * upperRightX - lowerLeftX.      *      * @return The width of this rectangle.      */
specifier|public
name|float
name|getWidth
parameter_list|()
block|{
return|return
name|getUpperRightX
argument_list|()
operator|-
name|getLowerLeftX
argument_list|()
return|;
block|}
comment|/**      * This will get the height of this rectangle as calculated by      * upperRightY - lowerLeftY.      *      * @return The height of this rectangle.      */
specifier|public
name|float
name|getHeight
parameter_list|()
block|{
return|return
name|getUpperRightY
argument_list|()
operator|-
name|getLowerLeftY
argument_list|()
return|;
block|}
comment|/**      * Checks if a point is inside this rectangle.      *       * @param x The x coordinate.      * @param y The y coordinate.      *       * @return true If the point is on the edge or inside the rectangle bounds.       */
specifier|public
name|boolean
name|contains
parameter_list|(
name|float
name|x
parameter_list|,
name|float
name|y
parameter_list|)
block|{
return|return
name|x
operator|>=
name|lowerLeftX
operator|&&
name|x
operator|<=
name|upperRightX
operator|&&
name|y
operator|>=
name|lowerLeftY
operator|&&
name|y
operator|<=
name|upperRightY
return|;
block|}
comment|/**      * Checks if a point is inside this rectangle.      *       * @param point The point to check      *       * @return true If the point is on the edge or inside the rectangle bounds.       */
specifier|public
name|boolean
name|contains
parameter_list|(
name|Point
name|point
parameter_list|)
block|{
return|return
name|contains
argument_list|(
operator|(
name|float
operator|)
name|point
operator|.
name|getX
argument_list|()
argument_list|,
operator|(
name|float
operator|)
name|point
operator|.
name|getY
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * This will return a string representation of this rectangle.      *      * @return This object as a string.      */
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"["
operator|+
name|getLowerLeftX
argument_list|()
operator|+
literal|","
operator|+
name|getLowerLeftY
argument_list|()
operator|+
literal|","
operator|+
name|getUpperRightX
argument_list|()
operator|+
literal|","
operator|+
name|getUpperRightY
argument_list|()
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

