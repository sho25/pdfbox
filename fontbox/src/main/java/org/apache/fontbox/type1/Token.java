begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|type1
package|;
end_package

begin_comment
comment|/**  * A lexical token in an Adobe Type 1 font.  *  * @see Type1Lexer  *  * @author John Hewson  */
end_comment

begin_class
class|class
name|Token
block|{
comment|/**      * All different types of tokens.        *      */
specifier|static
enum|enum
name|Kind
block|{
name|NONE
block|,
name|STRING
block|,
name|NAME
block|,
name|LITERAL
block|,
name|REAL
block|,
name|INTEGER
block|,
name|START_ARRAY
block|,
name|END_ARRAY
block|,
name|START_PROC
block|,
name|END_PROC
block|,
name|CHARSTRING
block|}
comment|// exposed statically for convenience
specifier|static
specifier|final
name|Kind
name|STRING
init|=
name|Kind
operator|.
name|STRING
decl_stmt|;
specifier|static
specifier|final
name|Kind
name|NAME
init|=
name|Kind
operator|.
name|NAME
decl_stmt|;
specifier|static
specifier|final
name|Kind
name|LITERAL
init|=
name|Kind
operator|.
name|LITERAL
decl_stmt|;
specifier|static
specifier|final
name|Kind
name|REAL
init|=
name|Kind
operator|.
name|REAL
decl_stmt|;
specifier|static
specifier|final
name|Kind
name|INTEGER
init|=
name|Kind
operator|.
name|INTEGER
decl_stmt|;
specifier|static
specifier|final
name|Kind
name|START_ARRAY
init|=
name|Kind
operator|.
name|START_ARRAY
decl_stmt|;
specifier|static
specifier|final
name|Kind
name|END_ARRAY
init|=
name|Kind
operator|.
name|END_ARRAY
decl_stmt|;
specifier|static
specifier|final
name|Kind
name|START_PROC
init|=
name|Kind
operator|.
name|START_PROC
decl_stmt|;
specifier|static
specifier|final
name|Kind
name|END_PROC
init|=
name|Kind
operator|.
name|END_PROC
decl_stmt|;
specifier|static
specifier|final
name|Kind
name|CHARSTRING
init|=
name|Kind
operator|.
name|CHARSTRING
decl_stmt|;
specifier|private
name|String
name|text
decl_stmt|;
specifier|private
name|byte
index|[]
name|data
decl_stmt|;
specifier|private
name|Kind
name|kind
decl_stmt|;
comment|/**      * Constructs a new Token object given its text and kind.      * @param text      * @param type      */
specifier|public
name|Token
parameter_list|(
name|String
name|text
parameter_list|,
name|Kind
name|type
parameter_list|)
block|{
name|this
operator|.
name|text
operator|=
name|text
expr_stmt|;
name|this
operator|.
name|kind
operator|=
name|type
expr_stmt|;
block|}
comment|/**      * Constructs a new Token object given its single-character text and kind.      * @param character      * @param type      */
specifier|public
name|Token
parameter_list|(
name|char
name|character
parameter_list|,
name|Kind
name|type
parameter_list|)
block|{
name|this
operator|.
name|text
operator|=
name|Character
operator|.
name|toString
argument_list|(
name|character
argument_list|)
expr_stmt|;
name|this
operator|.
name|kind
operator|=
name|type
expr_stmt|;
block|}
comment|/**      * Constructs a new Token object given its raw data and kind.      * This is for CHARSTRING tokens only.      * @param data      * @param type      */
specifier|public
name|Token
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|Kind
name|type
parameter_list|)
block|{
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
name|this
operator|.
name|kind
operator|=
name|type
expr_stmt|;
block|}
specifier|public
name|String
name|getText
parameter_list|()
block|{
return|return
name|text
return|;
block|}
specifier|public
name|Kind
name|getKind
parameter_list|()
block|{
return|return
name|kind
return|;
block|}
specifier|public
name|int
name|intValue
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|text
argument_list|)
return|;
block|}
specifier|public
name|float
name|floatValue
parameter_list|()
block|{
return|return
name|Float
operator|.
name|parseFloat
argument_list|(
name|text
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|booleanValue
parameter_list|()
block|{
return|return
name|text
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
return|;
block|}
specifier|public
name|byte
index|[]
name|getData
parameter_list|()
block|{
return|return
name|data
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|kind
operator|==
name|CHARSTRING
condition|)
block|{
return|return
literal|"Token[kind=CHARSTRING, data="
operator|+
name|data
operator|.
name|length
operator|+
literal|" bytes]"
return|;
block|}
else|else
block|{
return|return
literal|"Token[kind="
operator|+
name|kind
operator|+
literal|", text="
operator|+
name|text
operator|+
literal|"]"
return|;
block|}
block|}
block|}
end_class

end_unit

