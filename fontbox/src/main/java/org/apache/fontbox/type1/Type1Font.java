begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|type1
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cff
operator|.
name|Type1CharString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cff
operator|.
name|Type1CharStringParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|encoding
operator|.
name|Encoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|pfb
operator|.
name|PfbParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|ttf
operator|.
name|Type1Equivalent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|util
operator|.
name|BoundingBox
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|GeneralPath
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_comment
comment|/**  * Represents an Adobe Type 1 (.pfb) font. Thread safe.  *  * @author John Hewson  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|Type1Font
implements|implements
name|Type1CharStringReader
implements|,
name|Type1Equivalent
block|{
comment|/**      * Constructs a new Type1Font object from a .pfb stream.      *      * @param pfbStream .pfb input stream, including headers      * @return a type1 font      *       * @throws IOException if something went wrong      */
specifier|public
specifier|static
name|Type1Font
name|createWithPFB
parameter_list|(
name|InputStream
name|pfbStream
parameter_list|)
throws|throws
name|IOException
block|{
name|PfbParser
name|pfb
init|=
operator|new
name|PfbParser
argument_list|(
name|pfbStream
argument_list|)
decl_stmt|;
name|Type1Parser
name|parser
init|=
operator|new
name|Type1Parser
argument_list|()
decl_stmt|;
return|return
name|parser
operator|.
name|parse
argument_list|(
name|pfb
operator|.
name|getSegment1
argument_list|()
argument_list|,
name|pfb
operator|.
name|getSegment2
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Constructs a new Type1Font object from a .pfb stream.      *      * @param pfbBytes .pfb data, including headers      * @return a type1 font      *      * @throws IOException if something went wrong      */
specifier|public
specifier|static
name|Type1Font
name|createWithPFB
parameter_list|(
name|byte
index|[]
name|pfbBytes
parameter_list|)
throws|throws
name|IOException
block|{
name|PfbParser
name|pfb
init|=
operator|new
name|PfbParser
argument_list|(
name|pfbBytes
argument_list|)
decl_stmt|;
name|Type1Parser
name|parser
init|=
operator|new
name|Type1Parser
argument_list|()
decl_stmt|;
return|return
name|parser
operator|.
name|parse
argument_list|(
name|pfb
operator|.
name|getSegment1
argument_list|()
argument_list|,
name|pfb
operator|.
name|getSegment2
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Constructs a new Type1Font object from two header-less .pfb segments.      *      * @param segment1 The first segment, without header      * @param segment2 The second segment, without header      * @return A new Type1Font instance      * @throws IOException if something went wrong      */
specifier|public
specifier|static
name|Type1Font
name|createWithSegments
parameter_list|(
name|byte
index|[]
name|segment1
parameter_list|,
name|byte
index|[]
name|segment2
parameter_list|)
throws|throws
name|IOException
block|{
name|Type1Parser
name|parser
init|=
operator|new
name|Type1Parser
argument_list|()
decl_stmt|;
return|return
name|parser
operator|.
name|parse
argument_list|(
name|segment1
argument_list|,
name|segment2
argument_list|)
return|;
block|}
comment|// font dictionary
name|String
name|fontName
init|=
literal|""
decl_stmt|;
name|Encoding
name|encoding
init|=
literal|null
decl_stmt|;
name|int
name|paintType
decl_stmt|;
name|int
name|fontType
decl_stmt|;
name|List
argument_list|<
name|Number
argument_list|>
name|fontMatrix
init|=
operator|new
name|ArrayList
argument_list|<
name|Number
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Number
argument_list|>
name|fontBBox
init|=
operator|new
name|ArrayList
argument_list|<
name|Number
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|uniqueID
decl_stmt|;
name|float
name|strokeWidth
decl_stmt|;
name|String
name|fontID
init|=
literal|""
decl_stmt|;
comment|// FontInfo dictionary
name|String
name|version
init|=
literal|""
decl_stmt|;
name|String
name|notice
init|=
literal|""
decl_stmt|;
name|String
name|fullName
init|=
literal|""
decl_stmt|;
name|String
name|familyName
init|=
literal|""
decl_stmt|;
name|String
name|weight
init|=
literal|""
decl_stmt|;
name|float
name|italicAngle
decl_stmt|;
name|boolean
name|isFixedPitch
decl_stmt|;
name|float
name|underlinePosition
decl_stmt|;
name|float
name|underlineThickness
decl_stmt|;
comment|// Private dictionary
name|List
argument_list|<
name|Number
argument_list|>
name|blueValues
init|=
operator|new
name|ArrayList
argument_list|<
name|Number
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Number
argument_list|>
name|otherBlues
init|=
operator|new
name|ArrayList
argument_list|<
name|Number
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Number
argument_list|>
name|familyBlues
init|=
operator|new
name|ArrayList
argument_list|<
name|Number
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Number
argument_list|>
name|familyOtherBlues
init|=
operator|new
name|ArrayList
argument_list|<
name|Number
argument_list|>
argument_list|()
decl_stmt|;
name|float
name|blueScale
decl_stmt|;
name|int
name|blueShift
decl_stmt|,
name|blueFuzz
decl_stmt|;
name|List
argument_list|<
name|Number
argument_list|>
name|stdHW
init|=
operator|new
name|ArrayList
argument_list|<
name|Number
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Number
argument_list|>
name|stdVW
init|=
operator|new
name|ArrayList
argument_list|<
name|Number
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Number
argument_list|>
name|stemSnapH
init|=
operator|new
name|ArrayList
argument_list|<
name|Number
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Number
argument_list|>
name|stemSnapV
init|=
operator|new
name|ArrayList
argument_list|<
name|Number
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|forceBold
decl_stmt|;
name|int
name|languageGroup
decl_stmt|;
comment|// Subrs array, and CharStrings dictionary
specifier|final
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|subrs
init|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|charstrings
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
comment|// private caches
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Type1CharString
argument_list|>
name|charStringCache
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Type1CharString
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Constructs a new Type1Font, called by Type1Parser.      */
name|Type1Font
parameter_list|()
block|{     }
comment|/**      * Returns the /Subrs array as raw bytes.      *      * @return Type 1 char string bytes      */
specifier|public
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|getSubrsArray
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|subrs
argument_list|)
return|;
block|}
comment|/**      * Returns the /CharStrings dictionary as raw bytes.      *      * @return Type 1 char string bytes      */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|getCharStringsDict
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|charstrings
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|fontName
return|;
block|}
annotation|@
name|Override
specifier|public
name|GeneralPath
name|getPath
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getType1CharString
argument_list|(
name|name
argument_list|)
operator|.
name|getPath
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|getWidth
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getType1CharString
argument_list|(
name|name
argument_list|)
operator|.
name|getWidth
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasGlyph
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|charstrings
operator|.
name|get
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Type1CharString
name|getType1CharString
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|Type1CharString
name|type1
init|=
name|charStringCache
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|type1
operator|==
literal|null
condition|)
block|{
name|byte
index|[]
name|bytes
init|=
name|charstrings
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytes
operator|==
literal|null
condition|)
block|{
name|bytes
operator|=
name|charstrings
operator|.
name|get
argument_list|(
literal|".notdef"
argument_list|)
expr_stmt|;
block|}
name|Type1CharStringParser
name|parser
init|=
operator|new
name|Type1CharStringParser
argument_list|(
name|fontName
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|sequence
init|=
name|parser
operator|.
name|parse
argument_list|(
name|bytes
argument_list|,
name|subrs
argument_list|)
decl_stmt|;
name|type1
operator|=
operator|new
name|Type1CharString
argument_list|(
name|this
argument_list|,
name|fontName
argument_list|,
name|name
argument_list|,
name|sequence
argument_list|)
expr_stmt|;
name|charStringCache
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|type1
argument_list|)
expr_stmt|;
block|}
return|return
name|type1
return|;
block|}
comment|// font dictionary
comment|/**      * Returns the font name.      *       * @return the font name      */
specifier|public
name|String
name|getFontName
parameter_list|()
block|{
return|return
name|fontName
return|;
block|}
comment|/**      * Returns the Encoding, if present.      * @return the encoding or null      */
annotation|@
name|Override
specifier|public
name|Encoding
name|getEncoding
parameter_list|()
block|{
return|return
name|encoding
return|;
block|}
comment|/**      * Returns the paint type.      *       * @return the paint type      */
specifier|public
name|int
name|getPaintType
parameter_list|()
block|{
return|return
name|paintType
return|;
block|}
comment|/**      * Returns the font type.      *       * @return the font type      */
specifier|public
name|int
name|getFontType
parameter_list|()
block|{
return|return
name|fontType
return|;
block|}
comment|/**      * Returns the font matrix.      *       * @return the font matrix      */
specifier|public
name|List
argument_list|<
name|Number
argument_list|>
name|getFontMatrix
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|fontMatrix
argument_list|)
return|;
block|}
comment|/**      * Returns the font bounding box.      *       * @return the font bounding box      */
annotation|@
name|Override
specifier|public
name|BoundingBox
name|getFontBBox
parameter_list|()
block|{
return|return
operator|new
name|BoundingBox
argument_list|(
name|fontBBox
argument_list|)
return|;
block|}
comment|/**      * Returns unique ID.      *       * @return the unique ID      */
specifier|public
name|int
name|getUniqueID
parameter_list|()
block|{
return|return
name|uniqueID
return|;
block|}
comment|/**      * Returns the stroke width.      *       * @return the stroke width      */
specifier|public
name|float
name|getStrokeWidth
parameter_list|()
block|{
return|return
name|strokeWidth
return|;
block|}
comment|/**      * Returns the font ID.      *       * @return the font ID      */
specifier|public
name|String
name|getFontID
parameter_list|()
block|{
return|return
name|fontID
return|;
block|}
comment|// FontInfo dictionary
comment|/**      * Returns the version.      *       * @return the version      */
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
return|return
name|version
return|;
block|}
comment|/**      * Returns the notice.      *       * @return the notice      */
specifier|public
name|String
name|getNotice
parameter_list|()
block|{
return|return
name|notice
return|;
block|}
comment|/**      * Returns the full name.      *      * @return the full name      */
specifier|public
name|String
name|getFullName
parameter_list|()
block|{
return|return
name|fullName
return|;
block|}
comment|/**      * Returns the family name.      *       * @return the family name      */
specifier|public
name|String
name|getFamilyName
parameter_list|()
block|{
return|return
name|familyName
return|;
block|}
comment|/**      * Returns the weight.      *       * @return the weight      */
specifier|public
name|String
name|getWeight
parameter_list|()
block|{
return|return
name|weight
return|;
block|}
comment|/**      * Returns the italic angle.      *       * @return the italic angle      */
specifier|public
name|float
name|getItalicAngle
parameter_list|()
block|{
return|return
name|italicAngle
return|;
block|}
comment|/**      * Determines if the font has a fixed pitch.      *       * @return true if the font has a fixed pitch      */
specifier|public
name|boolean
name|isFixedPitch
parameter_list|()
block|{
return|return
name|isFixedPitch
return|;
block|}
comment|/**      * Returns the underline position      *       * @return the underline position      */
specifier|public
name|float
name|getUnderlinePosition
parameter_list|()
block|{
return|return
name|underlinePosition
return|;
block|}
comment|/**      * Returns the underline thickness.      *       * @return the underline thickness      */
specifier|public
name|float
name|getUnderlineThickness
parameter_list|()
block|{
return|return
name|underlineThickness
return|;
block|}
comment|// Private dictionary
comment|/**      * Returns the blues values.      *       * @return the blues values      */
specifier|public
name|List
argument_list|<
name|Number
argument_list|>
name|getBlueValues
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|blueValues
argument_list|)
return|;
block|}
comment|/**      * Returns the other blues values.      *       * @return the other blues values      */
specifier|public
name|List
argument_list|<
name|Number
argument_list|>
name|getOtherBlues
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|otherBlues
argument_list|)
return|;
block|}
comment|/**      * Returns the family blues values.      *       * @return the family blues values      */
specifier|public
name|List
argument_list|<
name|Number
argument_list|>
name|getFamilyBlues
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|familyBlues
argument_list|)
return|;
block|}
comment|/**      * Returns the other family blues values.      *       * @return the other family blues values      */
specifier|public
name|List
argument_list|<
name|Number
argument_list|>
name|getFamilyOtherBlues
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|familyOtherBlues
argument_list|)
return|;
block|}
comment|/**      * Returns the blue scale.      *       * @return the blue scale      */
specifier|public
name|float
name|getBlueScale
parameter_list|()
block|{
return|return
name|blueScale
return|;
block|}
comment|/**      * Returns the blue shift.      *       * @return the blue shift      */
specifier|public
name|int
name|getBlueShift
parameter_list|()
block|{
return|return
name|blueShift
return|;
block|}
comment|/**      * Returns the blue fuzz.      *       * @return the blue fuzz      */
specifier|public
name|int
name|getBlueFuzz
parameter_list|()
block|{
return|return
name|blueFuzz
return|;
block|}
comment|/**      * Returns the StdHW value.      *       * @return the StdHW value      */
specifier|public
name|List
argument_list|<
name|Number
argument_list|>
name|getStdHW
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|stdHW
argument_list|)
return|;
block|}
comment|/**      * Returns the StdVW value.      *       * @return the StdVW value      */
specifier|public
name|List
argument_list|<
name|Number
argument_list|>
name|getStdVW
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|stdVW
argument_list|)
return|;
block|}
comment|/**      * Returns the StemSnapH value.      *       * @return the StemSnapH value      */
specifier|public
name|List
argument_list|<
name|Number
argument_list|>
name|getStemSnapH
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|stemSnapH
argument_list|)
return|;
block|}
comment|/**      * Returns the StemSnapV value.      *       * @return the StemSnapV value      */
specifier|public
name|List
argument_list|<
name|Number
argument_list|>
name|getStemSnapV
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|stemSnapV
argument_list|)
return|;
block|}
comment|/**      * Determines if the font is bold.      *       * @return true if the font is bold      */
specifier|public
name|boolean
name|isForceBold
parameter_list|()
block|{
return|return
name|forceBold
return|;
block|}
comment|/**      * Returns the language group.      *       * @return the language group      */
specifier|public
name|int
name|getLanguageGroup
parameter_list|()
block|{
return|return
name|languageGroup
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"[fontName="
operator|+
name|fontName
operator|+
literal|", fullName="
operator|+
name|fullName
operator|+
literal|", encoding="
operator|+
name|encoding
operator|+
literal|", charStringsDict="
operator|+
name|charstrings
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

