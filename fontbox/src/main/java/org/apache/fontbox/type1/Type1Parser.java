begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|type1
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|encoding
operator|.
name|CustomEncoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|encoding
operator|.
name|StandardEncoding
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Parses an Adobe Type 1 (.pfb) font. It is used exclusively by Type1Font.  *  * The Type 1 font format is a free-text format which is somewhat difficult  * to parse. This is made worse by the fact that many Type 1 font files do  * not conform to the specification, especially those embedded in PDFs. This  * parser therefore tries to be as forgiving as possible.  *  * @see "Adobe Type 1 Font Format, Adobe Systems (1999)"  *  * @author John Hewson  */
end_comment

begin_class
specifier|final
class|class
name|Type1Parser
block|{
comment|// constants for encryption
specifier|private
specifier|static
specifier|final
name|int
name|EEXEC_KEY
init|=
literal|55665
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|CHARSTRING_KEY
init|=
literal|4330
decl_stmt|;
comment|// state
specifier|private
name|Type1Lexer
name|lexer
decl_stmt|;
specifier|private
name|Type1Font
name|font
decl_stmt|;
comment|/**      * Parses a Type 1 font and returns a Type1Font class which represents it.      *      * @param segment1 Segment 1: ASCII      * @param segment2 Segment 2: Binary      * @throws IOException      */
specifier|public
name|Type1Font
name|parse
parameter_list|(
name|byte
index|[]
name|segment1
parameter_list|,
name|byte
index|[]
name|segment2
parameter_list|)
throws|throws
name|IOException
block|{
name|font
operator|=
operator|new
name|Type1Font
argument_list|()
expr_stmt|;
name|parseASCII
argument_list|(
name|segment1
argument_list|)
expr_stmt|;
if|if
condition|(
name|segment2
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|parseBinary
argument_list|(
name|segment2
argument_list|)
expr_stmt|;
block|}
return|return
name|font
return|;
block|}
comment|/**      * Parses the ASCII porition of a Type 1 font.      */
specifier|private
name|void
name|parseASCII
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
comment|// %!FontType1-1.0
comment|// %!PS-AdobeFont-1.0
if|if
condition|(
name|bytes
index|[
literal|0
index|]
operator|!=
literal|'%'
operator|&&
name|bytes
index|[
literal|1
index|]
operator|!=
literal|'!'
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid start of ASCII segment"
argument_list|)
throw|;
block|}
name|lexer
operator|=
operator|new
name|Type1Lexer
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
comment|// (corrupt?) synthetic font
if|if
condition|(
name|lexer
operator|.
name|peekToken
argument_list|()
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
literal|"FontDirectory"
argument_list|)
condition|)
block|{
name|read
argument_list|(
name|Token
operator|.
name|NAME
argument_list|,
literal|"FontDirectory"
argument_list|)
expr_stmt|;
name|read
argument_list|(
name|Token
operator|.
name|LITERAL
argument_list|)
expr_stmt|;
comment|// font name
name|read
argument_list|(
name|Token
operator|.
name|NAME
argument_list|,
literal|"known"
argument_list|)
expr_stmt|;
name|read
argument_list|(
name|Token
operator|.
name|START_PROC
argument_list|)
expr_stmt|;
name|readProc
argument_list|()
expr_stmt|;
name|read
argument_list|(
name|Token
operator|.
name|START_PROC
argument_list|)
expr_stmt|;
name|readProc
argument_list|()
expr_stmt|;
name|read
argument_list|(
name|Token
operator|.
name|NAME
argument_list|,
literal|"ifelse"
argument_list|)
expr_stmt|;
block|}
comment|// font dict
name|int
name|length
init|=
name|read
argument_list|(
name|Token
operator|.
name|INTEGER
argument_list|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|read
argument_list|(
name|Token
operator|.
name|NAME
argument_list|,
literal|"dict"
argument_list|)
expr_stmt|;
name|read
argument_list|(
name|Token
operator|.
name|NAME
argument_list|,
literal|"begin"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// premature end
if|if
condition|(
name|lexer
operator|.
name|peekToken
argument_list|()
operator|.
name|getKind
argument_list|()
operator|==
name|Token
operator|.
name|NAME
operator|&&
name|lexer
operator|.
name|peekToken
argument_list|()
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
literal|"currentdict"
argument_list|)
condition|)
block|{
break|break;
block|}
comment|// key/value
name|String
name|key
init|=
name|read
argument_list|(
name|Token
operator|.
name|LITERAL
argument_list|)
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"FontInfo"
argument_list|)
condition|)
block|{
name|readFontInfo
argument_list|(
name|readSimpleDict
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"Metrics"
argument_list|)
condition|)
block|{
name|readSimpleDict
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"Encoding"
argument_list|)
condition|)
block|{
if|if
condition|(
name|lexer
operator|.
name|peekToken
argument_list|()
operator|.
name|getKind
argument_list|()
operator|==
name|Token
operator|.
name|NAME
condition|)
block|{
name|String
name|name
init|=
name|lexer
operator|.
name|nextToken
argument_list|()
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"StandardEncoding"
argument_list|)
condition|)
block|{
name|font
operator|.
name|encoding
operator|=
name|StandardEncoding
operator|.
name|INSTANCE
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown encoding: "
operator|+
name|name
argument_list|)
throw|;
block|}
name|read
argument_list|(
name|Token
operator|.
name|NAME
argument_list|,
literal|"def"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|read
argument_list|(
name|Token
operator|.
name|INTEGER
argument_list|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
name|readMaybe
argument_list|(
name|Token
operator|.
name|NAME
argument_list|,
literal|"array"
argument_list|)
expr_stmt|;
comment|// 0 1 255 {1 index exch /.notdef put } for
comment|// we have to check "readonly" and "def" too
comment|// as some fonts don't provide any dup-values, see PDFBOX-2134
while|while
condition|(
operator|!
operator|(
name|lexer
operator|.
name|peekToken
argument_list|()
operator|.
name|getKind
argument_list|()
operator|==
name|Token
operator|.
name|NAME
operator|&&
operator|(
name|lexer
operator|.
name|peekToken
argument_list|()
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
literal|"dup"
argument_list|)
operator|||
name|lexer
operator|.
name|peekToken
argument_list|()
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
literal|"readonly"
argument_list|)
operator|||
name|lexer
operator|.
name|peekToken
argument_list|()
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
literal|"def"
argument_list|)
operator|)
operator|)
condition|)
block|{
name|lexer
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|codeToName
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|lexer
operator|.
name|peekToken
argument_list|()
operator|.
name|getKind
argument_list|()
operator|==
name|Token
operator|.
name|NAME
operator|&&
name|lexer
operator|.
name|peekToken
argument_list|()
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
literal|"dup"
argument_list|)
condition|)
block|{
name|read
argument_list|(
name|Token
operator|.
name|NAME
argument_list|,
literal|"dup"
argument_list|)
expr_stmt|;
name|int
name|code
init|=
name|read
argument_list|(
name|Token
operator|.
name|INTEGER
argument_list|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|read
argument_list|(
name|Token
operator|.
name|LITERAL
argument_list|)
operator|.
name|getText
argument_list|()
decl_stmt|;
name|read
argument_list|(
name|Token
operator|.
name|NAME
argument_list|,
literal|"put"
argument_list|)
expr_stmt|;
name|codeToName
operator|.
name|put
argument_list|(
name|code
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
name|font
operator|.
name|encoding
operator|=
operator|new
name|CustomEncoding
argument_list|(
name|codeToName
argument_list|)
expr_stmt|;
name|readMaybe
argument_list|(
name|Token
operator|.
name|NAME
argument_list|,
literal|"readonly"
argument_list|)
expr_stmt|;
name|read
argument_list|(
name|Token
operator|.
name|NAME
argument_list|,
literal|"def"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// simple value
name|List
argument_list|<
name|Token
argument_list|>
name|value
init|=
name|readDictValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"FontName"
argument_list|)
condition|)
block|{
name|font
operator|.
name|fontName
operator|=
name|value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"PaintType"
argument_list|)
condition|)
block|{
name|font
operator|.
name|paintType
operator|=
name|value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"FontType"
argument_list|)
condition|)
block|{
name|font
operator|.
name|fontType
operator|=
name|value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"FontMatrix"
argument_list|)
condition|)
block|{
name|font
operator|.
name|fontMatrix
operator|=
name|arrayToNumbers
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"FontBBox"
argument_list|)
condition|)
block|{
name|font
operator|.
name|fontBBox
operator|=
name|arrayToNumbers
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"UniqueID"
argument_list|)
condition|)
block|{
name|font
operator|.
name|uniqueID
operator|=
name|value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"StrokeWidth"
argument_list|)
condition|)
block|{
name|font
operator|.
name|strokeWidth
operator|=
name|value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|floatValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"FID"
argument_list|)
condition|)
block|{
name|font
operator|.
name|fontID
operator|=
name|value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|read
argument_list|(
name|Token
operator|.
name|NAME
argument_list|,
literal|"currentdict"
argument_list|)
expr_stmt|;
name|read
argument_list|(
name|Token
operator|.
name|NAME
argument_list|,
literal|"end"
argument_list|)
expr_stmt|;
name|read
argument_list|(
name|Token
operator|.
name|NAME
argument_list|,
literal|"currentfile"
argument_list|)
expr_stmt|;
name|read
argument_list|(
name|Token
operator|.
name|NAME
argument_list|,
literal|"eexec"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Extracts values from an array as numbers.      */
specifier|private
name|List
argument_list|<
name|Number
argument_list|>
name|arrayToNumbers
parameter_list|(
name|List
argument_list|<
name|Token
argument_list|>
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Number
argument_list|>
name|numbers
init|=
operator|new
name|ArrayList
argument_list|<
name|Number
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|,
name|size
init|=
name|value
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|Token
name|token
init|=
name|value
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|token
operator|.
name|getKind
argument_list|()
operator|==
name|Token
operator|.
name|REAL
condition|)
block|{
name|numbers
operator|.
name|add
argument_list|(
name|token
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|getKind
argument_list|()
operator|==
name|Token
operator|.
name|INTEGER
condition|)
block|{
name|numbers
operator|.
name|add
argument_list|(
name|token
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Expected INTEGER or REAL but got "
operator|+
name|token
operator|.
name|getKind
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
name|numbers
return|;
block|}
comment|/**      * Extracts values from the /FontInfo dictionary.      */
specifier|private
name|void
name|readFontInfo
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Token
argument_list|>
argument_list|>
name|fontInfo
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Token
argument_list|>
argument_list|>
name|entry
range|:
name|fontInfo
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Token
argument_list|>
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"version"
argument_list|)
condition|)
block|{
name|font
operator|.
name|version
operator|=
name|value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"Notice"
argument_list|)
condition|)
block|{
name|font
operator|.
name|notice
operator|=
name|value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"FullName"
argument_list|)
condition|)
block|{
name|font
operator|.
name|fullName
operator|=
name|value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"FamilyName"
argument_list|)
condition|)
block|{
name|font
operator|.
name|familyName
operator|=
name|value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"Weight"
argument_list|)
condition|)
block|{
name|font
operator|.
name|weight
operator|=
name|value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"ItalicAngle"
argument_list|)
condition|)
block|{
name|font
operator|.
name|italicAngle
operator|=
name|value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|floatValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"isFixedPitch"
argument_list|)
condition|)
block|{
name|font
operator|.
name|isFixedPitch
operator|=
name|value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"UnderlinePosition"
argument_list|)
condition|)
block|{
name|font
operator|.
name|underlinePosition
operator|=
name|value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|floatValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"UnderlineThickness"
argument_list|)
condition|)
block|{
name|font
operator|.
name|underlineThickness
operator|=
name|value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|floatValue
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Reads a dictionary whose values are simple, i.e., do not contain      * nested dictionaries.      */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Token
argument_list|>
argument_list|>
name|readSimpleDict
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Token
argument_list|>
argument_list|>
name|dict
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Token
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|length
init|=
name|read
argument_list|(
name|Token
operator|.
name|INTEGER
argument_list|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|read
argument_list|(
name|Token
operator|.
name|NAME
argument_list|,
literal|"dict"
argument_list|)
expr_stmt|;
name|readMaybe
argument_list|(
name|Token
operator|.
name|NAME
argument_list|,
literal|"dup"
argument_list|)
expr_stmt|;
name|read
argument_list|(
name|Token
operator|.
name|NAME
argument_list|,
literal|"begin"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|lexer
operator|.
name|peekToken
argument_list|()
operator|.
name|getKind
argument_list|()
operator|==
name|Token
operator|.
name|NAME
operator|&&
operator|!
name|lexer
operator|.
name|peekToken
argument_list|()
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
literal|"end"
argument_list|)
condition|)
block|{
name|read
argument_list|(
name|Token
operator|.
name|NAME
argument_list|)
expr_stmt|;
block|}
comment|// premature end
if|if
condition|(
name|lexer
operator|.
name|peekToken
argument_list|()
operator|.
name|getKind
argument_list|()
operator|==
name|Token
operator|.
name|NAME
operator|&&
name|lexer
operator|.
name|peekToken
argument_list|()
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
literal|"end"
argument_list|)
condition|)
block|{
break|break;
block|}
comment|// simple value
name|String
name|key
init|=
name|read
argument_list|(
name|Token
operator|.
name|LITERAL
argument_list|)
operator|.
name|getText
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Token
argument_list|>
name|value
init|=
name|readDictValue
argument_list|()
decl_stmt|;
name|dict
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|read
argument_list|(
name|Token
operator|.
name|NAME
argument_list|,
literal|"end"
argument_list|)
expr_stmt|;
name|readMaybe
argument_list|(
name|Token
operator|.
name|NAME
argument_list|,
literal|"readonly"
argument_list|)
expr_stmt|;
name|read
argument_list|(
name|Token
operator|.
name|NAME
argument_list|,
literal|"def"
argument_list|)
expr_stmt|;
return|return
name|dict
return|;
block|}
comment|/**      * Reads a simple value from a dictionary.      */
specifier|private
name|List
argument_list|<
name|Token
argument_list|>
name|readDictValue
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Token
argument_list|>
name|value
init|=
name|readValue
argument_list|()
decl_stmt|;
name|readDef
argument_list|()
expr_stmt|;
return|return
name|value
return|;
block|}
comment|/**      * Reads a simple value. This is either a number, a string,      * a name, a literal name, an array, a procedure, or a charstring.      * This method does not support reading nested dictionaries.      */
specifier|private
name|List
argument_list|<
name|Token
argument_list|>
name|readValue
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Token
argument_list|>
name|value
init|=
operator|new
name|ArrayList
argument_list|<
name|Token
argument_list|>
argument_list|()
decl_stmt|;
name|Token
name|token
init|=
name|lexer
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|value
operator|.
name|add
argument_list|(
name|token
argument_list|)
expr_stmt|;
if|if
condition|(
name|token
operator|.
name|getKind
argument_list|()
operator|==
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
name|int
name|openArray
init|=
literal|1
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|lexer
operator|.
name|peekToken
argument_list|()
operator|.
name|getKind
argument_list|()
operator|==
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
name|openArray
operator|++
expr_stmt|;
block|}
name|token
operator|=
name|lexer
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|value
operator|.
name|add
argument_list|(
name|token
argument_list|)
expr_stmt|;
if|if
condition|(
name|token
operator|.
name|getKind
argument_list|()
operator|==
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
name|openArray
operator|--
expr_stmt|;
if|if
condition|(
name|openArray
operator|==
literal|0
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|getKind
argument_list|()
operator|==
name|Token
operator|.
name|START_PROC
condition|)
block|{
name|value
operator|.
name|addAll
argument_list|(
name|readProc
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// postscript wrapper (not in the Type 1 spec)
if|if
condition|(
name|lexer
operator|.
name|peekToken
argument_list|()
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
literal|"systemdict"
argument_list|)
condition|)
block|{
name|read
argument_list|(
name|Token
operator|.
name|NAME
argument_list|,
literal|"systemdict"
argument_list|)
expr_stmt|;
name|read
argument_list|(
name|Token
operator|.
name|LITERAL
argument_list|,
literal|"internaldict"
argument_list|)
expr_stmt|;
name|read
argument_list|(
name|Token
operator|.
name|NAME
argument_list|,
literal|"known"
argument_list|)
expr_stmt|;
name|read
argument_list|(
name|Token
operator|.
name|START_PROC
argument_list|)
expr_stmt|;
name|readProc
argument_list|()
expr_stmt|;
name|read
argument_list|(
name|Token
operator|.
name|START_PROC
argument_list|)
expr_stmt|;
name|readProc
argument_list|()
expr_stmt|;
name|read
argument_list|(
name|Token
operator|.
name|NAME
argument_list|,
literal|"ifelse"
argument_list|)
expr_stmt|;
comment|// replace value
name|read
argument_list|(
name|Token
operator|.
name|START_PROC
argument_list|)
expr_stmt|;
name|read
argument_list|(
name|Token
operator|.
name|NAME
argument_list|,
literal|"pop"
argument_list|)
expr_stmt|;
name|value
operator|.
name|clear
argument_list|()
expr_stmt|;
name|value
operator|.
name|addAll
argument_list|(
name|readValue
argument_list|()
argument_list|)
expr_stmt|;
name|read
argument_list|(
name|Token
operator|.
name|END_PROC
argument_list|)
expr_stmt|;
name|read
argument_list|(
name|Token
operator|.
name|NAME
argument_list|,
literal|"if"
argument_list|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
comment|/**      * Reads a procedure.      */
specifier|private
name|List
argument_list|<
name|Token
argument_list|>
name|readProc
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Token
argument_list|>
name|value
init|=
operator|new
name|ArrayList
argument_list|<
name|Token
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|openProc
init|=
literal|1
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|lexer
operator|.
name|peekToken
argument_list|()
operator|.
name|getKind
argument_list|()
operator|==
name|Token
operator|.
name|START_PROC
condition|)
block|{
name|openProc
operator|++
expr_stmt|;
block|}
name|Token
name|token
init|=
name|lexer
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|value
operator|.
name|add
argument_list|(
name|token
argument_list|)
expr_stmt|;
if|if
condition|(
name|token
operator|.
name|getKind
argument_list|()
operator|==
name|Token
operator|.
name|END_PROC
condition|)
block|{
name|openProc
operator|--
expr_stmt|;
if|if
condition|(
name|openProc
operator|==
literal|0
condition|)
block|{
break|break;
block|}
block|}
block|}
name|Token
name|executeonly
init|=
name|readMaybe
argument_list|(
name|Token
operator|.
name|NAME
argument_list|,
literal|"executeonly"
argument_list|)
decl_stmt|;
if|if
condition|(
name|executeonly
operator|!=
literal|null
condition|)
block|{
name|value
operator|.
name|add
argument_list|(
name|executeonly
argument_list|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
comment|/**      * Parses the binary portion of a Type 1 font.      */
specifier|private
name|void
name|parseBinary
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|decrypted
init|=
name|decrypt
argument_list|(
name|bytes
argument_list|,
name|EEXEC_KEY
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|lexer
operator|=
operator|new
name|Type1Lexer
argument_list|(
name|decrypted
argument_list|)
expr_stmt|;
comment|// find /Private dict
while|while
condition|(
operator|!
name|lexer
operator|.
name|peekToken
argument_list|()
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Private"
argument_list|)
condition|)
block|{
name|lexer
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
comment|// Private dict
name|read
argument_list|(
name|Token
operator|.
name|LITERAL
argument_list|,
literal|"Private"
argument_list|)
expr_stmt|;
name|int
name|length
init|=
name|read
argument_list|(
name|Token
operator|.
name|INTEGER
argument_list|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|read
argument_list|(
name|Token
operator|.
name|NAME
argument_list|,
literal|"dict"
argument_list|)
expr_stmt|;
name|readMaybe
argument_list|(
name|Token
operator|.
name|NAME
argument_list|,
literal|"dup"
argument_list|)
expr_stmt|;
name|read
argument_list|(
name|Token
operator|.
name|NAME
argument_list|,
literal|"begin"
argument_list|)
expr_stmt|;
name|int
name|lenIV
init|=
literal|4
decl_stmt|;
comment|// number of random bytes at start of charstring
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// premature end
if|if
condition|(
name|lexer
operator|.
name|peekToken
argument_list|()
operator|.
name|getKind
argument_list|()
operator|!=
name|Token
operator|.
name|LITERAL
condition|)
block|{
break|break;
block|}
comment|// key/value
name|String
name|key
init|=
name|read
argument_list|(
name|Token
operator|.
name|LITERAL
argument_list|)
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"Subrs"
argument_list|)
condition|)
block|{
name|readSubrs
argument_list|(
name|lenIV
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"lenIV"
argument_list|)
condition|)
block|{
name|lenIV
operator|=
name|readDictValue
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"ND"
argument_list|)
condition|)
block|{
name|read
argument_list|(
name|Token
operator|.
name|START_PROC
argument_list|)
expr_stmt|;
name|read
argument_list|(
name|Token
operator|.
name|NAME
argument_list|,
literal|"noaccess"
argument_list|)
expr_stmt|;
name|read
argument_list|(
name|Token
operator|.
name|NAME
argument_list|,
literal|"def"
argument_list|)
expr_stmt|;
name|read
argument_list|(
name|Token
operator|.
name|END_PROC
argument_list|)
expr_stmt|;
name|read
argument_list|(
name|Token
operator|.
name|NAME
argument_list|,
literal|"executeonly"
argument_list|)
expr_stmt|;
name|read
argument_list|(
name|Token
operator|.
name|NAME
argument_list|,
literal|"def"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"NP"
argument_list|)
condition|)
block|{
name|read
argument_list|(
name|Token
operator|.
name|START_PROC
argument_list|)
expr_stmt|;
name|read
argument_list|(
name|Token
operator|.
name|NAME
argument_list|,
literal|"noaccess"
argument_list|)
expr_stmt|;
name|read
argument_list|(
name|Token
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|read
argument_list|(
name|Token
operator|.
name|END_PROC
argument_list|)
expr_stmt|;
name|read
argument_list|(
name|Token
operator|.
name|NAME
argument_list|,
literal|"executeonly"
argument_list|)
expr_stmt|;
name|read
argument_list|(
name|Token
operator|.
name|NAME
argument_list|,
literal|"def"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|readPrivate
argument_list|(
name|key
argument_list|,
name|readDictValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// some fonts have "2 index" here, others have "end noaccess put"
comment|// sometimes followed by "put". Either way, we just skip until
comment|// the /CharStrings dict is found
while|while
condition|(
operator|!
operator|(
name|lexer
operator|.
name|peekToken
argument_list|()
operator|.
name|getKind
argument_list|()
operator|==
name|Token
operator|.
name|LITERAL
operator|&&
name|lexer
operator|.
name|peekToken
argument_list|()
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
literal|"CharStrings"
argument_list|)
operator|)
condition|)
block|{
name|lexer
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
comment|// CharStrings dict
name|read
argument_list|(
name|Token
operator|.
name|LITERAL
argument_list|,
literal|"CharStrings"
argument_list|)
expr_stmt|;
name|readCharStrings
argument_list|(
name|lenIV
argument_list|)
expr_stmt|;
block|}
comment|/**      * Extracts values from the /Private dictionary.      */
specifier|private
name|void
name|readPrivate
parameter_list|(
name|String
name|key
parameter_list|,
name|List
argument_list|<
name|Token
argument_list|>
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"BlueValues"
argument_list|)
condition|)
block|{
name|font
operator|.
name|blueValues
operator|=
name|arrayToNumbers
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"OtherBlues"
argument_list|)
condition|)
block|{
name|font
operator|.
name|otherBlues
operator|=
name|arrayToNumbers
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"FamilyBlues"
argument_list|)
condition|)
block|{
name|font
operator|.
name|familyBlues
operator|=
name|arrayToNumbers
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"FamilyOtherBlues"
argument_list|)
condition|)
block|{
name|font
operator|.
name|familyOtherBlues
operator|=
name|arrayToNumbers
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"BlueScale"
argument_list|)
condition|)
block|{
name|font
operator|.
name|blueScale
operator|=
name|value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|floatValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"BlueShift"
argument_list|)
condition|)
block|{
name|font
operator|.
name|blueShift
operator|=
name|value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"BlueFuzz"
argument_list|)
condition|)
block|{
name|font
operator|.
name|blueScale
operator|=
name|value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"StdHW"
argument_list|)
condition|)
block|{
name|font
operator|.
name|stdHW
operator|=
name|arrayToNumbers
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"StdVW"
argument_list|)
condition|)
block|{
name|font
operator|.
name|stdVW
operator|=
name|arrayToNumbers
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"StemSnapH"
argument_list|)
condition|)
block|{
name|font
operator|.
name|stemSnapH
operator|=
name|arrayToNumbers
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"StemSnapV"
argument_list|)
condition|)
block|{
name|font
operator|.
name|stemSnapV
operator|=
name|arrayToNumbers
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"ForceBold"
argument_list|)
condition|)
block|{
name|font
operator|.
name|forceBold
operator|=
name|value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"LanguageGroup"
argument_list|)
condition|)
block|{
name|font
operator|.
name|languageGroup
operator|=
name|value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Reads the /Subrs array.      * @param lenIV The number of random bytes used in charstring encryption.      */
specifier|private
name|void
name|readSubrs
parameter_list|(
name|int
name|lenIV
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|read
argument_list|(
name|Token
operator|.
name|INTEGER
argument_list|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|read
argument_list|(
name|Token
operator|.
name|NAME
argument_list|,
literal|"array"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// premature end
if|if
condition|(
operator|!
operator|(
name|lexer
operator|.
name|peekToken
argument_list|()
operator|.
name|getKind
argument_list|()
operator|==
name|Token
operator|.
name|NAME
operator|&&
name|lexer
operator|.
name|peekToken
argument_list|()
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
literal|"dup"
argument_list|)
operator|)
condition|)
block|{
break|break;
block|}
name|read
argument_list|(
name|Token
operator|.
name|NAME
argument_list|,
literal|"dup"
argument_list|)
expr_stmt|;
name|read
argument_list|(
name|Token
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
name|read
argument_list|(
name|Token
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
comment|// RD
name|Token
name|charstring
init|=
name|read
argument_list|(
name|Token
operator|.
name|CHARSTRING
argument_list|)
decl_stmt|;
name|font
operator|.
name|subrs
operator|.
name|add
argument_list|(
name|decrypt
argument_list|(
name|charstring
operator|.
name|getData
argument_list|()
argument_list|,
name|CHARSTRING_KEY
argument_list|,
name|lenIV
argument_list|)
argument_list|)
expr_stmt|;
name|readPut
argument_list|()
expr_stmt|;
block|}
name|readDef
argument_list|()
expr_stmt|;
block|}
comment|/**      * Reads the /CharStrings dictionary.      * @param lenIV The number of random bytes used in charstring encryption.      */
specifier|private
name|void
name|readCharStrings
parameter_list|(
name|int
name|lenIV
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|read
argument_list|(
name|Token
operator|.
name|INTEGER
argument_list|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|read
argument_list|(
name|Token
operator|.
name|NAME
argument_list|,
literal|"dict"
argument_list|)
expr_stmt|;
name|read
argument_list|(
name|Token
operator|.
name|NAME
argument_list|,
literal|"dup"
argument_list|)
expr_stmt|;
name|read
argument_list|(
name|Token
operator|.
name|NAME
argument_list|,
literal|"begin"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// premature end
if|if
condition|(
name|lexer
operator|.
name|peekToken
argument_list|()
operator|.
name|getKind
argument_list|()
operator|==
name|Token
operator|.
name|NAME
operator|&&
name|lexer
operator|.
name|peekToken
argument_list|()
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
literal|"end"
argument_list|)
condition|)
block|{
break|break;
block|}
comment|// key/value
name|String
name|name
init|=
name|read
argument_list|(
name|Token
operator|.
name|LITERAL
argument_list|)
operator|.
name|getText
argument_list|()
decl_stmt|;
comment|// RD
name|read
argument_list|(
name|Token
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
name|Token
name|charstring
init|=
name|read
argument_list|(
name|Token
operator|.
name|CHARSTRING
argument_list|)
decl_stmt|;
name|font
operator|.
name|charstrings
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|decrypt
argument_list|(
name|charstring
operator|.
name|getData
argument_list|()
argument_list|,
name|CHARSTRING_KEY
argument_list|,
name|lenIV
argument_list|)
argument_list|)
expr_stmt|;
name|readDef
argument_list|()
expr_stmt|;
block|}
comment|// some fonts have one "end", others two
name|read
argument_list|(
name|Token
operator|.
name|NAME
argument_list|,
literal|"end"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Reads the sequence "noaccess def" or equivalent.      */
specifier|private
name|void
name|readDef
parameter_list|()
throws|throws
name|IOException
block|{
name|readMaybe
argument_list|(
name|Token
operator|.
name|NAME
argument_list|,
literal|"readonly"
argument_list|)
expr_stmt|;
name|Token
name|token
init|=
name|read
argument_list|(
name|Token
operator|.
name|NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|token
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
literal|"ND"
argument_list|)
operator|||
name|token
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
literal|"|-"
argument_list|)
condition|)
block|{
return|return;
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
literal|"noaccess"
argument_list|)
condition|)
block|{
name|token
operator|=
name|read
argument_list|(
name|Token
operator|.
name|NAME
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
literal|"def"
argument_list|)
condition|)
block|{
return|return;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Found "
operator|+
name|token
operator|+
literal|" but expected ND"
argument_list|)
throw|;
block|}
comment|/**      * Reads the sequence "noaccess put" or equivalent.      */
specifier|private
name|void
name|readPut
parameter_list|()
throws|throws
name|IOException
block|{
name|readMaybe
argument_list|(
name|Token
operator|.
name|NAME
argument_list|,
literal|"readonly"
argument_list|)
expr_stmt|;
name|Token
name|token
init|=
name|read
argument_list|(
name|Token
operator|.
name|NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|token
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
literal|"NP"
argument_list|)
operator|||
name|token
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
literal|"|"
argument_list|)
condition|)
block|{
return|return;
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
literal|"noaccess"
argument_list|)
condition|)
block|{
name|token
operator|=
name|read
argument_list|(
name|Token
operator|.
name|NAME
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
literal|"put"
argument_list|)
condition|)
block|{
return|return;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Found "
operator|+
name|token
operator|+
literal|" but expected NP"
argument_list|)
throw|;
block|}
comment|/**      * Reads the next token and throws an error if it is not of the given kind.      */
specifier|private
name|Token
name|read
parameter_list|(
name|Token
operator|.
name|Kind
name|kind
parameter_list|)
throws|throws
name|IOException
block|{
name|Token
name|token
init|=
name|lexer
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|.
name|getKind
argument_list|()
operator|!=
name|kind
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Found "
operator|+
name|token
operator|+
literal|" but expected "
operator|+
name|kind
argument_list|)
throw|;
block|}
return|return
name|token
return|;
block|}
comment|/**      * Reads the next token and throws an error if it is not of the given kind      * and does not have the given value.      */
specifier|private
name|void
name|read
parameter_list|(
name|Token
operator|.
name|Kind
name|kind
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|Token
name|token
init|=
name|read
argument_list|(
name|kind
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|token
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Found "
operator|+
name|token
operator|+
literal|" but expected "
operator|+
name|name
argument_list|)
throw|;
block|}
block|}
comment|/**      * Reads the next token if and only if it is of the given kind and      * has the given value.      */
specifier|private
name|Token
name|readMaybe
parameter_list|(
name|Token
operator|.
name|Kind
name|kind
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|Token
name|token
init|=
name|lexer
operator|.
name|peekToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|.
name|getKind
argument_list|()
operator|==
name|kind
operator|&&
name|token
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|lexer
operator|.
name|nextToken
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Type 1 Decryption (eexec, charstring).      *      * @param cipherBytes cipher text      * @param r key      * @param n number of random bytes (lenIV)      * @return plain text      */
specifier|private
name|byte
index|[]
name|decrypt
parameter_list|(
name|byte
index|[]
name|cipherBytes
parameter_list|,
name|int
name|r
parameter_list|,
name|int
name|n
parameter_list|)
block|{
comment|// lenIV of -1 means no encryption (not documented)
if|if
condition|(
name|n
operator|==
operator|-
literal|1
condition|)
block|{
return|return
name|cipherBytes
return|;
block|}
comment|// empty charstrings and charstrings of insufficient length
if|if
condition|(
name|cipherBytes
operator|.
name|length
operator|==
literal|0
operator|||
name|n
operator|>
name|cipherBytes
operator|.
name|length
condition|)
block|{
return|return
operator|new
name|byte
index|[]
block|{}
return|;
block|}
comment|// decrypt
name|int
name|c1
init|=
literal|52845
decl_stmt|;
name|int
name|c2
init|=
literal|22719
decl_stmt|;
name|byte
index|[]
name|plainBytes
init|=
operator|new
name|byte
index|[
name|cipherBytes
operator|.
name|length
operator|-
name|n
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cipherBytes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|cipher
init|=
name|cipherBytes
index|[
name|i
index|]
operator|&
literal|0xFF
decl_stmt|;
name|int
name|plain
init|=
name|cipher
operator|^
name|r
operator|>>
literal|8
decl_stmt|;
if|if
condition|(
name|i
operator|>=
name|n
condition|)
block|{
name|plainBytes
index|[
name|i
operator|-
name|n
index|]
operator|=
operator|(
name|byte
operator|)
name|plain
expr_stmt|;
block|}
name|r
operator|=
operator|(
name|cipher
operator|+
name|r
operator|)
operator|*
name|c1
operator|+
name|c2
operator|&
literal|0xffff
expr_stmt|;
block|}
return|return
name|plainBytes
return|;
block|}
block|}
end_class

end_unit

