begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|type1
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Lexer for the ASCII portions of an Adobe Type 1 font.  *  * @see Type1Parser  *  * The PostScript language, of which Type 1 fonts are a subset, has a  * somewhat awkward lexical structure. It is neither regular nor  * context-free, and the execution of the program can modify the  * the behaviour of the lexer/parser.  *  * Nevertheless, this class represents an attempt to artificially seperate  * the PostScript parsing process into separate lexing and parsing phases  * in order to reduce the complexity of the parsing phase.  *  * @see "PostScript Language Reference 3rd ed, Adobe Systems (1999)"  *  * @author John Hewson  */
end_comment

begin_class
class|class
name|Type1Lexer
block|{
comment|/**      * Log instance.      */
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Type1Lexer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ByteBuffer
name|buffer
decl_stmt|;
specifier|private
name|Token
name|aheadToken
decl_stmt|;
specifier|private
name|int
name|openParens
init|=
literal|0
decl_stmt|;
comment|/**      * Constructs a new Type1Lexer given a header-less .pfb segment.      * @param bytes Header-less .pfb segment      * @throws IOException      */
name|Type1Lexer
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
name|buffer
operator|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|aheadToken
operator|=
name|readToken
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the next token and consumes it.      * @return The next token.      */
specifier|public
name|Token
name|nextToken
parameter_list|()
throws|throws
name|IOException
block|{
name|Token
name|curToken
init|=
name|aheadToken
decl_stmt|;
comment|//System.out.println(curToken); // for debugging
name|aheadToken
operator|=
name|readToken
argument_list|(
name|curToken
argument_list|)
expr_stmt|;
return|return
name|curToken
return|;
block|}
comment|/**      * Returns the next token without consuming it.      * @return The next token      */
specifier|public
name|Token
name|peekToken
parameter_list|()
block|{
return|return
name|aheadToken
return|;
block|}
comment|/**      * Reads an ASCII char from the buffer.      */
specifier|private
name|char
name|getChar
parameter_list|()
block|{
return|return
operator|(
name|char
operator|)
name|buffer
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**      * Reads a single token.      * @param prevToken the previous token      */
specifier|private
name|Token
name|readToken
parameter_list|(
name|Token
name|prevToken
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|skip
decl_stmt|;
do|do
block|{
name|skip
operator|=
literal|false
expr_stmt|;
while|while
condition|(
name|buffer
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|char
name|c
init|=
name|getChar
argument_list|()
decl_stmt|;
comment|// delimiters
if|if
condition|(
name|c
operator|==
literal|'%'
condition|)
block|{
comment|// comment
name|readComment
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'('
condition|)
block|{
return|return
name|readString
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|')'
condition|)
block|{
comment|// not allowed outside a string context
throw|throw
operator|new
name|IOException
argument_list|(
literal|"unexpected closing parenthesis"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'['
condition|)
block|{
return|return
operator|new
name|Token
argument_list|(
name|c
argument_list|,
name|Token
operator|.
name|START_ARRAY
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'{'
condition|)
block|{
return|return
operator|new
name|Token
argument_list|(
name|c
argument_list|,
name|Token
operator|.
name|START_PROC
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|']'
condition|)
block|{
return|return
operator|new
name|Token
argument_list|(
name|c
argument_list|,
name|Token
operator|.
name|END_ARRAY
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'}'
condition|)
block|{
return|return
operator|new
name|Token
argument_list|(
name|c
argument_list|,
name|Token
operator|.
name|END_PROC
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'/'
condition|)
block|{
return|return
operator|new
name|Token
argument_list|(
name|readRegular
argument_list|()
argument_list|,
name|Token
operator|.
name|LITERAL
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'<'
condition|)
block|{
name|char
name|c2
init|=
name|getChar
argument_list|()
decl_stmt|;
if|if
condition|(
name|c2
operator|==
name|c
condition|)
block|{
return|return
operator|new
name|Token
argument_list|(
literal|"<<"
argument_list|,
name|Token
operator|.
name|START_DICT
argument_list|)
return|;
block|}
else|else
block|{
comment|// code may have to be changed in something better, maybe new token type
name|buffer
operator|.
name|position
argument_list|(
name|buffer
operator|.
name|position
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
operator|new
name|Token
argument_list|(
name|c
argument_list|,
name|Token
operator|.
name|NAME
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'>'
condition|)
block|{
name|char
name|c2
init|=
name|getChar
argument_list|()
decl_stmt|;
if|if
condition|(
name|c2
operator|==
name|c
condition|)
block|{
return|return
operator|new
name|Token
argument_list|(
literal|">>"
argument_list|,
name|Token
operator|.
name|END_DICT
argument_list|)
return|;
block|}
else|else
block|{
comment|// code may have to be changed in something better, maybe new token type
name|buffer
operator|.
name|position
argument_list|(
name|buffer
operator|.
name|position
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
operator|new
name|Token
argument_list|(
name|c
argument_list|,
name|Token
operator|.
name|NAME
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|Character
operator|.
name|isWhitespace
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|skip
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"NULL byte in font, skipped"
argument_list|)
expr_stmt|;
name|skip
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|position
argument_list|(
name|buffer
operator|.
name|position
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// regular character: try parse as number
name|Token
name|number
init|=
name|tryReadNumber
argument_list|()
decl_stmt|;
if|if
condition|(
name|number
operator|!=
literal|null
condition|)
block|{
return|return
name|number
return|;
block|}
else|else
block|{
comment|// otherwise this must be a name
name|String
name|name
init|=
name|readRegular
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
comment|// the stream is corrupt
throw|throw
operator|new
name|DamagedFontException
argument_list|(
literal|"Could not read token at position "
operator|+
name|buffer
operator|.
name|position
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"RD"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"-|"
argument_list|)
condition|)
block|{
comment|// return the next CharString instead
if|if
condition|(
name|prevToken
operator|.
name|getKind
argument_list|()
operator|==
name|Token
operator|.
name|INTEGER
condition|)
block|{
return|return
name|readCharString
argument_list|(
name|prevToken
operator|.
name|intValue
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"expected INTEGER before -| or RD"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
return|return
operator|new
name|Token
argument_list|(
name|name
argument_list|,
name|Token
operator|.
name|NAME
argument_list|)
return|;
block|}
block|}
block|}
block|}
block|}
do|while
condition|(
name|skip
condition|)
do|;
return|return
literal|null
return|;
block|}
comment|/**      * Reads a number or returns null.      */
specifier|private
name|Token
name|tryReadNumber
parameter_list|()
block|{
name|buffer
operator|.
name|mark
argument_list|()
expr_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|StringBuilder
name|radix
init|=
literal|null
decl_stmt|;
name|char
name|c
init|=
name|getChar
argument_list|()
decl_stmt|;
name|boolean
name|hasDigit
init|=
literal|false
decl_stmt|;
comment|// optional + or -
if|if
condition|(
name|c
operator|==
literal|'+'
operator|||
name|c
operator|==
literal|'-'
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
operator|=
name|getChar
argument_list|()
expr_stmt|;
block|}
comment|// optional digits
while|while
condition|(
name|Character
operator|.
name|isDigit
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
operator|=
name|getChar
argument_list|()
expr_stmt|;
name|hasDigit
operator|=
literal|true
expr_stmt|;
block|}
comment|// optional .
if|if
condition|(
name|c
operator|==
literal|'.'
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
operator|=
name|getChar
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'#'
condition|)
block|{
comment|// PostScript radix number takes the form base#number
name|radix
operator|=
name|sb
expr_stmt|;
name|sb
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|c
operator|=
name|getChar
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
operator|!
name|hasDigit
condition|)
block|{
comment|// failure
name|buffer
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
comment|// integer
name|buffer
operator|.
name|position
argument_list|(
name|buffer
operator|.
name|position
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
operator|new
name|Token
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|Token
operator|.
name|INTEGER
argument_list|)
return|;
block|}
comment|// required digit
if|if
condition|(
name|Character
operator|.
name|isDigit
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
operator|=
name|getChar
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// failure
name|buffer
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// optional digits
while|while
condition|(
name|Character
operator|.
name|isDigit
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
operator|=
name|getChar
argument_list|()
expr_stmt|;
block|}
comment|// optional E
if|if
condition|(
name|c
operator|==
literal|'E'
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
operator|=
name|getChar
argument_list|()
expr_stmt|;
comment|// optional minus
if|if
condition|(
name|c
operator|==
literal|'-'
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
operator|=
name|getChar
argument_list|()
expr_stmt|;
block|}
comment|// required digit
if|if
condition|(
name|Character
operator|.
name|isDigit
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
operator|=
name|getChar
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// failure
name|buffer
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// optional digits
while|while
condition|(
name|Character
operator|.
name|isDigit
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
operator|=
name|getChar
argument_list|()
expr_stmt|;
block|}
block|}
name|buffer
operator|.
name|position
argument_list|(
name|buffer
operator|.
name|position
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|radix
operator|!=
literal|null
condition|)
block|{
name|Integer
name|val
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|radix
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|Token
argument_list|(
name|val
operator|.
name|toString
argument_list|()
argument_list|,
name|Token
operator|.
name|INTEGER
argument_list|)
return|;
block|}
return|return
operator|new
name|Token
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|Token
operator|.
name|REAL
argument_list|)
return|;
block|}
comment|/**      * Reads a sequence of regular characters, i.e. not delimiters      * or whitespace      */
specifier|private
name|String
name|readRegular
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
name|buffer
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|buffer
operator|.
name|mark
argument_list|()
expr_stmt|;
name|char
name|c
init|=
name|getChar
argument_list|()
decl_stmt|;
if|if
condition|(
name|Character
operator|.
name|isWhitespace
argument_list|(
name|c
argument_list|)
operator|||
name|c
operator|==
literal|'('
operator|||
name|c
operator|==
literal|')'
operator|||
name|c
operator|==
literal|'<'
operator|||
name|c
operator|==
literal|'>'
operator|||
name|c
operator|==
literal|'['
operator|||
name|c
operator|==
literal|']'
operator|||
name|c
operator|==
literal|'{'
operator|||
name|c
operator|==
literal|'}'
operator|||
name|c
operator|==
literal|'/'
operator|||
name|c
operator|==
literal|'%'
condition|)
block|{
name|buffer
operator|.
name|reset
argument_list|()
expr_stmt|;
break|break;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|regular
init|=
name|sb
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|regular
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|regular
return|;
block|}
comment|/**      * Reads a line comment.      */
specifier|private
name|String
name|readComment
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
name|buffer
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|char
name|c
init|=
name|getChar
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|'\r'
operator|||
name|c
operator|==
literal|'\n'
condition|)
block|{
break|break;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Reads a (string).      */
specifier|private
name|Token
name|readString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
name|buffer
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|char
name|c
init|=
name|getChar
argument_list|()
decl_stmt|;
comment|// string context
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'('
case|:
name|openParens
operator|++
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
break|break;
case|case
literal|')'
case|:
if|if
condition|(
name|openParens
operator|==
literal|0
condition|)
block|{
comment|// end of string
return|return
operator|new
name|Token
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|Token
operator|.
name|STRING
argument_list|)
return|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
name|openParens
operator|--
expr_stmt|;
break|break;
case|case
literal|'\\'
case|:
comment|// escapes: \n \r \t \b \f \\ \( \)
name|char
name|c1
init|=
name|getChar
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|c1
condition|)
block|{
case|case
literal|'n'
case|:
case|case
literal|'r'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'t'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|'\t'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'b'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|'\b'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'f'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|'\f'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'\\'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'('
case|:
name|sb
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
break|break;
case|case
literal|')'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
break|break;
block|}
comment|// octal \ddd
if|if
condition|(
name|Character
operator|.
name|isDigit
argument_list|(
name|c1
argument_list|)
condition|)
block|{
name|String
name|num
init|=
name|String
operator|.
name|valueOf
argument_list|(
operator|new
name|char
index|[]
block|{
name|c1
block|,
name|getChar
argument_list|()
block|,
name|getChar
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|Integer
name|code
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|num
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
call|(
name|char
call|)
argument_list|(
name|int
argument_list|)
name|code
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'\r'
case|:
case|case
literal|'\n'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
break|break;
default|default:
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Reads a binary CharString.      */
specifier|private
name|Token
name|readCharString
parameter_list|(
name|int
name|length
parameter_list|)
block|{
name|buffer
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// space
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|buffer
operator|.
name|get
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
operator|new
name|Token
argument_list|(
name|data
argument_list|,
name|Token
operator|.
name|CHARSTRING
argument_list|)
return|;
block|}
block|}
end_class

end_unit

