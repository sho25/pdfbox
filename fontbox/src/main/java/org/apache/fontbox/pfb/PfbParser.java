begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|pfb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  * Parser for a pfb-file.  *  * @author Ben Litchfield (ben@benlitchfield.com)  * @author<a href="mailto:m.g.n@gmx.de">Michael Niedermair</a>  * @version $Revision: 1.1 $  */
end_comment

begin_class
specifier|public
class|class
name|PfbParser
block|{
comment|/**      * the pdf header length.      * (start-marker (1 byte), ascii-/binary-marker (1 byte), size (4 byte))      * 3*6 == 18      */
specifier|private
specifier|static
specifier|final
name|int
name|PFB_HEADER_LENGTH
init|=
literal|18
decl_stmt|;
comment|/**      * the start marker.      */
specifier|private
specifier|static
specifier|final
name|int
name|START_MARKER
init|=
literal|0x80
decl_stmt|;
comment|/**      * the ascii marker.      */
specifier|private
specifier|static
specifier|final
name|int
name|ASCII_MARKER
init|=
literal|0x01
decl_stmt|;
comment|/**      * the binary marker.      */
specifier|private
specifier|static
specifier|final
name|int
name|BINARY_MARKER
init|=
literal|0x02
decl_stmt|;
comment|/**      * The record types in the pfb-file.      */
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|PFB_RECORDS
init|=
block|{
name|ASCII_MARKER
block|,
name|BINARY_MARKER
block|,
name|ASCII_MARKER
block|}
decl_stmt|;
comment|/**      * buffersize.      */
specifier|private
specifier|static
specifier|final
name|int
name|BUFFER_SIZE
init|=
literal|0xffff
decl_stmt|;
comment|/**      * the parsed pfb-data.      */
specifier|private
name|byte
index|[]
name|pfbdata
decl_stmt|;
comment|/**      * the lengths of the records.      */
specifier|private
name|int
index|[]
name|lengths
decl_stmt|;
comment|// sample (pfb-file)
comment|// 00000000 80 01 8b 15  00 00 25 21  50 53 2d 41  64 6f 62 65
comment|//          ......%!PS-Adobe
comment|/**      * Create a new object.      * @param filename  the file name      * @throws IOException if an IO-error occurs.      */
specifier|public
name|PfbParser
parameter_list|(
specifier|final
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
operator|new
name|BufferedInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|filename
argument_list|)
argument_list|,
name|BUFFER_SIZE
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a new object.      * @param in   The input.      * @throws IOException if an IO-error occurs.      */
specifier|public
name|PfbParser
parameter_list|(
specifier|final
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|pfb
init|=
name|readPfbInput
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|parsePfb
argument_list|(
name|pfb
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a new object.      * @param bytes   The input.      * @throws IOException if an IO-error occurs.      */
specifier|public
name|PfbParser
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
name|parsePfb
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
comment|/**      * Parse the pfb-array.      * @param pfb   The pfb-Array      * @throws IOException in an IO-error occurs.      */
specifier|private
name|void
name|parsePfb
parameter_list|(
specifier|final
name|byte
index|[]
name|pfb
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayInputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|pfb
argument_list|)
decl_stmt|;
name|pfbdata
operator|=
operator|new
name|byte
index|[
name|pfb
operator|.
name|length
operator|-
name|PFB_HEADER_LENGTH
index|]
expr_stmt|;
name|lengths
operator|=
operator|new
name|int
index|[
name|PFB_RECORDS
operator|.
name|length
index|]
expr_stmt|;
name|int
name|pointer
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|records
init|=
literal|0
init|;
name|records
operator|<
name|PFB_RECORDS
operator|.
name|length
condition|;
name|records
operator|++
control|)
block|{
if|if
condition|(
name|in
operator|.
name|read
argument_list|()
operator|!=
name|START_MARKER
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Start marker missing"
argument_list|)
throw|;
block|}
if|if
condition|(
name|in
operator|.
name|read
argument_list|()
operator|!=
name|PFB_RECORDS
index|[
name|records
index|]
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Incorrect record type"
argument_list|)
throw|;
block|}
name|int
name|size
init|=
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
name|size
operator|+=
name|in
operator|.
name|read
argument_list|()
operator|<<
literal|8
expr_stmt|;
name|size
operator|+=
name|in
operator|.
name|read
argument_list|()
operator|<<
literal|16
expr_stmt|;
name|size
operator|+=
name|in
operator|.
name|read
argument_list|()
operator|<<
literal|24
expr_stmt|;
name|lengths
index|[
name|records
index|]
operator|=
name|size
expr_stmt|;
name|int
name|got
init|=
name|in
operator|.
name|read
argument_list|(
name|pfbdata
argument_list|,
name|pointer
argument_list|,
name|size
argument_list|)
decl_stmt|;
if|if
condition|(
name|got
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
name|pointer
operator|+=
name|got
expr_stmt|;
block|}
block|}
comment|/**      * Read the pdf input.      * @param in    The input.      * @return Returns the pdf-array.      * @throws IOException if an IO-error occurs.      */
specifier|private
name|byte
index|[]
name|readPfbInput
parameter_list|(
specifier|final
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
comment|// copy into an array
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|byte
index|[]
name|tmpbuf
init|=
operator|new
name|byte
index|[
name|BUFFER_SIZE
index|]
decl_stmt|;
name|int
name|amountRead
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
operator|(
name|amountRead
operator|=
name|in
operator|.
name|read
argument_list|(
name|tmpbuf
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|tmpbuf
argument_list|,
literal|0
argument_list|,
name|amountRead
argument_list|)
expr_stmt|;
block|}
return|return
name|out
operator|.
name|toByteArray
argument_list|()
return|;
block|}
comment|/**      * Returns the lengths.      * @return Returns the lengths.      */
specifier|public
name|int
index|[]
name|getLengths
parameter_list|()
block|{
return|return
name|lengths
return|;
block|}
comment|/**      * Returns the pfbdata.      * @return Returns the pfbdata.      */
specifier|public
name|byte
index|[]
name|getPfbdata
parameter_list|()
block|{
return|return
name|pfbdata
return|;
block|}
comment|/**      * Returns the pfb data as stream.      * @return Returns the pfb data as stream.      */
specifier|public
name|InputStream
name|getInputStream
parameter_list|()
block|{
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|pfbdata
argument_list|)
return|;
block|}
comment|/**      * Returns the size of the pfb-data.      * @return Returns the size of the pfb-data.      */
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|pfbdata
operator|.
name|length
return|;
block|}
comment|/**      * Returns the first segment      * @return first segment bytes      */
specifier|public
name|byte
index|[]
name|getSegment1
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|pfbdata
argument_list|,
literal|0
argument_list|,
name|lengths
index|[
literal|0
index|]
argument_list|)
return|;
block|}
comment|/**      * Returns the second segment      * @return second segment bytes      */
specifier|public
name|byte
index|[]
name|getSegment2
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|pfbdata
argument_list|,
name|lengths
index|[
literal|0
index|]
argument_list|,
name|lengths
index|[
literal|0
index|]
operator|+
name|lengths
index|[
literal|1
index|]
argument_list|)
return|;
block|}
block|}
end_class

end_unit

