begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cmap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PushbackInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Parses a CMap stream.  *  * @author Ben Litchfield  */
end_comment

begin_class
specifier|public
class|class
name|CMapParser
block|{
specifier|private
specifier|static
specifier|final
name|String
name|MARK_END_OF_DICTIONARY
init|=
literal|">>"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MARK_END_OF_ARRAY
init|=
literal|"]"
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|tokenParserByteBuffer
init|=
operator|new
name|byte
index|[
literal|512
index|]
decl_stmt|;
comment|/**      * Creates a new instance of CMapParser.      */
specifier|public
name|CMapParser
parameter_list|()
block|{     }
comment|/**      * Parse a CMAP file on the file system.      *       * @param file The file to parse.      * @return A parsed CMAP file.      * @throws IOException If there is an issue while parsing the CMAP.      */
specifier|public
name|CMap
name|parse
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|FileInputStream
name|input
init|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
init|)
block|{
return|return
name|parse
argument_list|(
name|input
argument_list|)
return|;
block|}
block|}
comment|/**      * Parses a predefined CMap.      *      * @param name CMap name.      * @return The parsed predefined CMap as a java object, never null.      * @throws IOException If the CMap could not be parsed.      */
specifier|public
name|CMap
name|parsePredefined
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|InputStream
name|input
init|=
name|getExternalCMap
argument_list|(
name|name
argument_list|)
init|)
block|{
return|return
name|parse
argument_list|(
name|input
argument_list|)
return|;
block|}
block|}
comment|/**      * This will parse the stream and create a cmap object.      *      * @param input The CMAP stream to parse.      * @return The parsed stream as a java object, never null.      * @throws IOException If there is an error parsing the stream.      */
specifier|public
name|CMap
name|parse
parameter_list|(
name|InputStream
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|PushbackInputStream
name|cmapStream
init|=
operator|new
name|PushbackInputStream
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|CMap
name|result
init|=
operator|new
name|CMap
argument_list|()
decl_stmt|;
name|Object
name|previousToken
init|=
literal|null
decl_stmt|;
name|Object
name|token
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parseNextToken
argument_list|(
name|cmapStream
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|token
operator|instanceof
name|Operator
condition|)
block|{
name|Operator
name|op
init|=
operator|(
name|Operator
operator|)
name|token
decl_stmt|;
if|if
condition|(
name|op
operator|.
name|op
operator|.
name|equals
argument_list|(
literal|"endcmap"
argument_list|)
condition|)
block|{
comment|// end of CMap reached, stop reading as there isn't any interesting info anymore
break|break;
block|}
if|if
condition|(
name|previousToken
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|op
operator|.
name|op
condition|)
block|{
case|case
literal|"usecmap"
case|:
name|parseUsecmap
argument_list|(
operator|(
name|LiteralName
operator|)
name|previousToken
argument_list|,
name|result
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"begincodespacerange"
case|:
name|parseBegincodespacerange
argument_list|(
operator|(
name|Number
operator|)
name|previousToken
argument_list|,
name|cmapStream
argument_list|,
name|result
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"beginbfchar"
case|:
name|parseBeginbfchar
argument_list|(
operator|(
name|Number
operator|)
name|previousToken
argument_list|,
name|cmapStream
argument_list|,
name|result
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"beginbfrange"
case|:
name|parseBeginbfrange
argument_list|(
operator|(
name|Number
operator|)
name|previousToken
argument_list|,
name|cmapStream
argument_list|,
name|result
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"begincidchar"
case|:
name|parseBegincidchar
argument_list|(
operator|(
name|Number
operator|)
name|previousToken
argument_list|,
name|cmapStream
argument_list|,
name|result
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"begincidrange"
case|:
name|parseBegincidrange
argument_list|(
operator|(
name|Integer
operator|)
name|previousToken
argument_list|,
name|cmapStream
argument_list|,
name|result
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|instanceof
name|LiteralName
condition|)
block|{
name|parseLiteralName
argument_list|(
operator|(
name|LiteralName
operator|)
name|token
argument_list|,
name|cmapStream
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
name|previousToken
operator|=
name|token
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|void
name|parseUsecmap
parameter_list|(
name|LiteralName
name|useCmapName
parameter_list|,
name|CMap
name|result
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|useStream
init|=
name|getExternalCMap
argument_list|(
name|useCmapName
operator|.
name|name
argument_list|)
decl_stmt|;
name|CMap
name|useCMap
init|=
name|parse
argument_list|(
name|useStream
argument_list|)
decl_stmt|;
name|result
operator|.
name|useCmap
argument_list|(
name|useCMap
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|parseLiteralName
parameter_list|(
name|LiteralName
name|literal
parameter_list|,
name|PushbackInputStream
name|cmapStream
parameter_list|,
name|CMap
name|result
parameter_list|)
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|literal
operator|.
name|name
condition|)
block|{
case|case
literal|"WMode"
case|:
block|{
name|Object
name|next
init|=
name|parseNextToken
argument_list|(
name|cmapStream
argument_list|)
decl_stmt|;
if|if
condition|(
name|next
operator|instanceof
name|Integer
condition|)
block|{
name|result
operator|.
name|setWMode
argument_list|(
operator|(
name|Integer
operator|)
name|next
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
literal|"CMapName"
case|:
block|{
name|Object
name|next
init|=
name|parseNextToken
argument_list|(
name|cmapStream
argument_list|)
decl_stmt|;
if|if
condition|(
name|next
operator|instanceof
name|LiteralName
condition|)
block|{
name|result
operator|.
name|setName
argument_list|(
operator|(
operator|(
name|LiteralName
operator|)
name|next
operator|)
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
literal|"CMapVersion"
case|:
block|{
name|Object
name|next
init|=
name|parseNextToken
argument_list|(
name|cmapStream
argument_list|)
decl_stmt|;
if|if
condition|(
name|next
operator|instanceof
name|Number
condition|)
block|{
name|result
operator|.
name|setVersion
argument_list|(
name|next
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|next
operator|instanceof
name|String
condition|)
block|{
name|result
operator|.
name|setVersion
argument_list|(
operator|(
name|String
operator|)
name|next
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
literal|"CMapType"
case|:
block|{
name|Object
name|next
init|=
name|parseNextToken
argument_list|(
name|cmapStream
argument_list|)
decl_stmt|;
if|if
condition|(
name|next
operator|instanceof
name|Integer
condition|)
block|{
name|result
operator|.
name|setType
argument_list|(
operator|(
name|Integer
operator|)
name|next
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
literal|"Registry"
case|:
block|{
name|Object
name|next
init|=
name|parseNextToken
argument_list|(
name|cmapStream
argument_list|)
decl_stmt|;
if|if
condition|(
name|next
operator|instanceof
name|String
condition|)
block|{
name|result
operator|.
name|setRegistry
argument_list|(
operator|(
name|String
operator|)
name|next
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
literal|"Ordering"
case|:
block|{
name|Object
name|next
init|=
name|parseNextToken
argument_list|(
name|cmapStream
argument_list|)
decl_stmt|;
if|if
condition|(
name|next
operator|instanceof
name|String
condition|)
block|{
name|result
operator|.
name|setOrdering
argument_list|(
operator|(
name|String
operator|)
name|next
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
literal|"Supplement"
case|:
block|{
name|Object
name|next
init|=
name|parseNextToken
argument_list|(
name|cmapStream
argument_list|)
decl_stmt|;
if|if
condition|(
name|next
operator|instanceof
name|Integer
condition|)
block|{
name|result
operator|.
name|setSupplement
argument_list|(
operator|(
name|Integer
operator|)
name|next
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
default|default:
break|break;
block|}
block|}
specifier|private
name|void
name|parseBegincodespacerange
parameter_list|(
name|Number
name|cosCount
parameter_list|,
name|PushbackInputStream
name|cmapStream
parameter_list|,
name|CMap
name|result
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|cosCount
operator|.
name|intValue
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Object
name|nextToken
init|=
name|parseNextToken
argument_list|(
name|cmapStream
argument_list|)
decl_stmt|;
if|if
condition|(
name|nextToken
operator|instanceof
name|Operator
condition|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|Operator
operator|)
name|nextToken
operator|)
operator|.
name|op
operator|.
name|equals
argument_list|(
literal|"endcodespacerange"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error : ~codespacerange contains an unexpected operator : "
operator|+
operator|(
operator|(
name|Operator
operator|)
name|nextToken
operator|)
operator|.
name|op
argument_list|)
throw|;
block|}
break|break;
block|}
name|byte
index|[]
name|startRange
init|=
operator|(
name|byte
index|[]
operator|)
name|nextToken
decl_stmt|;
name|byte
index|[]
name|endRange
init|=
operator|(
name|byte
index|[]
operator|)
name|parseNextToken
argument_list|(
name|cmapStream
argument_list|)
decl_stmt|;
name|CodespaceRange
name|range
init|=
operator|new
name|CodespaceRange
argument_list|()
decl_stmt|;
name|range
operator|.
name|setStart
argument_list|(
name|startRange
argument_list|)
expr_stmt|;
name|range
operator|.
name|setEnd
argument_list|(
name|endRange
argument_list|)
expr_stmt|;
name|result
operator|.
name|addCodespaceRange
argument_list|(
name|range
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|parseBeginbfchar
parameter_list|(
name|Number
name|cosCount
parameter_list|,
name|PushbackInputStream
name|cmapStream
parameter_list|,
name|CMap
name|result
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|cosCount
operator|.
name|intValue
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Object
name|nextToken
init|=
name|parseNextToken
argument_list|(
name|cmapStream
argument_list|)
decl_stmt|;
if|if
condition|(
name|nextToken
operator|instanceof
name|Operator
condition|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|Operator
operator|)
name|nextToken
operator|)
operator|.
name|op
operator|.
name|equals
argument_list|(
literal|"endbfchar"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error : ~bfchar contains an unexpected operator : "
operator|+
operator|(
operator|(
name|Operator
operator|)
name|nextToken
operator|)
operator|.
name|op
argument_list|)
throw|;
block|}
break|break;
block|}
name|byte
index|[]
name|inputCode
init|=
operator|(
name|byte
index|[]
operator|)
name|nextToken
decl_stmt|;
name|nextToken
operator|=
name|parseNextToken
argument_list|(
name|cmapStream
argument_list|)
expr_stmt|;
if|if
condition|(
name|nextToken
operator|instanceof
name|byte
index|[]
condition|)
block|{
name|byte
index|[]
name|bytes
init|=
operator|(
name|byte
index|[]
operator|)
name|nextToken
decl_stmt|;
name|String
name|value
init|=
name|createStringFromBytes
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|result
operator|.
name|addCharMapping
argument_list|(
name|inputCode
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nextToken
operator|instanceof
name|LiteralName
condition|)
block|{
name|result
operator|.
name|addCharMapping
argument_list|(
name|inputCode
argument_list|,
operator|(
operator|(
name|LiteralName
operator|)
name|nextToken
operator|)
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error parsing CMap beginbfchar, expected{COSString "
operator|+
literal|"or COSName} and not "
operator|+
name|nextToken
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|void
name|parseBegincidrange
parameter_list|(
name|int
name|numberOfLines
parameter_list|,
name|PushbackInputStream
name|cmapStream
parameter_list|,
name|CMap
name|result
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
name|numberOfLines
condition|;
name|n
operator|++
control|)
block|{
name|Object
name|nextToken
init|=
name|parseNextToken
argument_list|(
name|cmapStream
argument_list|)
decl_stmt|;
if|if
condition|(
name|nextToken
operator|instanceof
name|Operator
condition|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|Operator
operator|)
name|nextToken
operator|)
operator|.
name|op
operator|.
name|equals
argument_list|(
literal|"endcidrange"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error : ~cidrange contains an unexpected operator : "
operator|+
operator|(
operator|(
name|Operator
operator|)
name|nextToken
operator|)
operator|.
name|op
argument_list|)
throw|;
block|}
break|break;
block|}
name|byte
index|[]
name|startCode
init|=
operator|(
name|byte
index|[]
operator|)
name|nextToken
decl_stmt|;
name|int
name|start
init|=
name|createIntFromBytes
argument_list|(
name|startCode
argument_list|)
decl_stmt|;
name|byte
index|[]
name|endCode
init|=
operator|(
name|byte
index|[]
operator|)
name|parseNextToken
argument_list|(
name|cmapStream
argument_list|)
decl_stmt|;
name|int
name|end
init|=
name|createIntFromBytes
argument_list|(
name|endCode
argument_list|)
decl_stmt|;
name|int
name|mappedCode
init|=
operator|(
name|Integer
operator|)
name|parseNextToken
argument_list|(
name|cmapStream
argument_list|)
decl_stmt|;
if|if
condition|(
name|startCode
operator|.
name|length
operator|<=
literal|2
operator|&&
name|endCode
operator|.
name|length
operator|<=
literal|2
condition|)
block|{
comment|// some CMaps are using CID ranges to map single values
if|if
condition|(
name|end
operator|==
name|start
condition|)
block|{
name|result
operator|.
name|addCIDMapping
argument_list|(
name|mappedCode
argument_list|,
name|start
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|addCIDRange
argument_list|(
operator|(
name|char
operator|)
name|start
argument_list|,
operator|(
name|char
operator|)
name|end
argument_list|,
name|mappedCode
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// TODO Is this even possible?
name|int
name|endOfMappings
init|=
name|mappedCode
operator|+
name|end
operator|-
name|start
decl_stmt|;
while|while
condition|(
name|mappedCode
operator|<=
name|endOfMappings
condition|)
block|{
name|int
name|mappedCID
init|=
name|createIntFromBytes
argument_list|(
name|startCode
argument_list|)
decl_stmt|;
name|result
operator|.
name|addCIDMapping
argument_list|(
name|mappedCode
operator|++
argument_list|,
name|mappedCID
argument_list|)
expr_stmt|;
name|increment
argument_list|(
name|startCode
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|parseBegincidchar
parameter_list|(
name|Number
name|cosCount
parameter_list|,
name|PushbackInputStream
name|cmapStream
parameter_list|,
name|CMap
name|result
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|cosCount
operator|.
name|intValue
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Object
name|nextToken
init|=
name|parseNextToken
argument_list|(
name|cmapStream
argument_list|)
decl_stmt|;
if|if
condition|(
name|nextToken
operator|instanceof
name|Operator
condition|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|Operator
operator|)
name|nextToken
operator|)
operator|.
name|op
operator|.
name|equals
argument_list|(
literal|"endcidchar"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error : ~cidchar contains an unexpected operator : "
operator|+
operator|(
operator|(
name|Operator
operator|)
name|nextToken
operator|)
operator|.
name|op
argument_list|)
throw|;
block|}
break|break;
block|}
name|byte
index|[]
name|inputCode
init|=
operator|(
name|byte
index|[]
operator|)
name|nextToken
decl_stmt|;
name|int
name|mappedCode
init|=
operator|(
name|Integer
operator|)
name|parseNextToken
argument_list|(
name|cmapStream
argument_list|)
decl_stmt|;
name|int
name|mappedCID
init|=
name|createIntFromBytes
argument_list|(
name|inputCode
argument_list|)
decl_stmt|;
name|result
operator|.
name|addCIDMapping
argument_list|(
name|mappedCode
argument_list|,
name|mappedCID
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|parseBeginbfrange
parameter_list|(
name|Number
name|cosCount
parameter_list|,
name|PushbackInputStream
name|cmapStream
parameter_list|,
name|CMap
name|result
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|cosCount
operator|.
name|intValue
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Object
name|nextToken
init|=
name|parseNextToken
argument_list|(
name|cmapStream
argument_list|)
decl_stmt|;
if|if
condition|(
name|nextToken
operator|instanceof
name|Operator
condition|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|Operator
operator|)
name|nextToken
operator|)
operator|.
name|op
operator|.
name|equals
argument_list|(
literal|"endbfrange"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error : ~bfrange contains an unexpected operator : "
operator|+
operator|(
operator|(
name|Operator
operator|)
name|nextToken
operator|)
operator|.
name|op
argument_list|)
throw|;
block|}
break|break;
block|}
name|byte
index|[]
name|startCode
init|=
operator|(
name|byte
index|[]
operator|)
name|nextToken
decl_stmt|;
name|byte
index|[]
name|endCode
init|=
operator|(
name|byte
index|[]
operator|)
name|parseNextToken
argument_list|(
name|cmapStream
argument_list|)
decl_stmt|;
name|int
name|start
init|=
name|CMap
operator|.
name|toInt
argument_list|(
name|startCode
argument_list|,
name|startCode
operator|.
name|length
argument_list|)
decl_stmt|;
name|int
name|end
init|=
name|CMap
operator|.
name|toInt
argument_list|(
name|endCode
argument_list|,
name|endCode
operator|.
name|length
argument_list|)
decl_stmt|;
comment|// end has to be bigger than start or equal
if|if
condition|(
name|end
operator|<
name|start
condition|)
block|{
comment|// PDFBOX-4550: likely corrupt stream
break|break;
block|}
name|nextToken
operator|=
name|parseNextToken
argument_list|(
name|cmapStream
argument_list|)
expr_stmt|;
if|if
condition|(
name|nextToken
operator|instanceof
name|List
argument_list|<
name|?
argument_list|>
condition|)
block|{
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|array
init|=
operator|(
name|List
argument_list|<
name|byte
index|[]
argument_list|>
operator|)
name|nextToken
decl_stmt|;
comment|// ignore empty and malformed arrays
if|if
condition|(
operator|!
name|array
operator|.
name|isEmpty
argument_list|()
operator|&&
name|array
operator|.
name|size
argument_list|()
operator|>=
name|end
operator|-
name|start
condition|)
block|{
name|addMappingFrombfrange
argument_list|(
name|result
argument_list|,
name|startCode
argument_list|,
name|array
argument_list|)
expr_stmt|;
block|}
block|}
comment|// PDFBOX-3807: ignore null
elseif|else
if|if
condition|(
name|nextToken
operator|instanceof
name|byte
index|[]
condition|)
block|{
name|byte
index|[]
name|tokenBytes
init|=
operator|(
name|byte
index|[]
operator|)
name|nextToken
decl_stmt|;
comment|// PDFBOX-3450: ignore<>
if|if
condition|(
name|tokenBytes
operator|.
name|length
operator|>
literal|0
condition|)
block|{
comment|// PDFBOX-4661: avoid overflow of the last byte, all following values are undefined
name|int
name|values
init|=
name|Math
operator|.
name|min
argument_list|(
name|end
operator|-
name|start
argument_list|,
literal|255
operator|-
operator|(
name|tokenBytes
index|[
name|tokenBytes
operator|.
name|length
operator|-
literal|1
index|]
operator|&
literal|0xFF
operator|)
argument_list|)
operator|+
literal|1
decl_stmt|;
name|addMappingFrombfrange
argument_list|(
name|result
argument_list|,
name|startCode
argument_list|,
name|values
argument_list|,
name|tokenBytes
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

begin_function
specifier|private
name|void
name|addMappingFrombfrange
parameter_list|(
name|CMap
name|cmap
parameter_list|,
name|byte
index|[]
name|startCode
parameter_list|,
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|tokenBytesList
parameter_list|)
block|{
for|for
control|(
name|byte
index|[]
name|tokenBytes
range|:
name|tokenBytesList
control|)
block|{
name|String
name|value
init|=
name|createStringFromBytes
argument_list|(
name|tokenBytes
argument_list|)
decl_stmt|;
name|cmap
operator|.
name|addCharMapping
argument_list|(
name|startCode
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|increment
argument_list|(
name|startCode
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|private
name|void
name|addMappingFrombfrange
parameter_list|(
name|CMap
name|cmap
parameter_list|,
name|byte
index|[]
name|startCode
parameter_list|,
name|int
name|values
parameter_list|,
name|byte
index|[]
name|tokenBytes
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
condition|;
name|i
operator|++
control|)
block|{
name|String
name|value
init|=
name|createStringFromBytes
argument_list|(
name|tokenBytes
argument_list|)
decl_stmt|;
name|cmap
operator|.
name|addCharMapping
argument_list|(
name|startCode
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|increment
argument_list|(
name|startCode
argument_list|)
expr_stmt|;
name|increment
argument_list|(
name|tokenBytes
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**      * Returns an input stream containing the given "use" CMap.      *      * @param name Name of the given "use" CMap resource.      * @throws IOException if the CMap resource doesn't exist or if there is an error opening its      * stream.      */
end_comment

begin_function
specifier|protected
name|InputStream
name|getExternalCMap
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|is
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error: Could not find referenced cmap stream "
operator|+
name|name
argument_list|)
throw|;
block|}
return|return
name|is
return|;
block|}
end_function

begin_function
specifier|private
name|Object
name|parseNextToken
parameter_list|(
name|PushbackInputStream
name|is
parameter_list|)
throws|throws
name|IOException
block|{
name|Object
name|retval
init|=
literal|null
decl_stmt|;
name|int
name|nextByte
init|=
name|is
operator|.
name|read
argument_list|()
decl_stmt|;
comment|// skip whitespace
while|while
condition|(
name|nextByte
operator|==
literal|0x09
operator|||
name|nextByte
operator|==
literal|0x20
operator|||
name|nextByte
operator|==
literal|0x0D
operator|||
name|nextByte
operator|==
literal|0x0A
condition|)
block|{
name|nextByte
operator|=
name|is
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
switch|switch
condition|(
name|nextByte
condition|)
block|{
case|case
literal|'%'
case|:
block|{
comment|// header operations, for now return the entire line
comment|// may need to smarter in the future
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|nextByte
argument_list|)
expr_stmt|;
name|readUntilEndOfLine
argument_list|(
name|is
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|retval
operator|=
name|buffer
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
literal|'('
case|:
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|stringByte
init|=
name|is
operator|.
name|read
argument_list|()
decl_stmt|;
while|while
condition|(
name|stringByte
operator|!=
operator|-
literal|1
operator|&&
name|stringByte
operator|!=
literal|')'
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|stringByte
argument_list|)
expr_stmt|;
name|stringByte
operator|=
name|is
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
name|retval
operator|=
name|buffer
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
literal|'>'
case|:
block|{
name|int
name|secondCloseBrace
init|=
name|is
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|secondCloseBrace
operator|==
literal|'>'
condition|)
block|{
name|retval
operator|=
name|MARK_END_OF_DICTIONARY
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error: expected the end of a dictionary."
argument_list|)
throw|;
block|}
break|break;
block|}
case|case
literal|']'
case|:
block|{
name|retval
operator|=
name|MARK_END_OF_ARRAY
expr_stmt|;
break|break;
block|}
case|case
literal|'['
case|:
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Object
name|nextToken
init|=
name|parseNextToken
argument_list|(
name|is
argument_list|)
decl_stmt|;
while|while
condition|(
name|nextToken
operator|!=
literal|null
operator|&&
operator|!
name|MARK_END_OF_ARRAY
operator|.
name|equals
argument_list|(
name|nextToken
argument_list|)
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|nextToken
argument_list|)
expr_stmt|;
name|nextToken
operator|=
name|parseNextToken
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
name|retval
operator|=
name|list
expr_stmt|;
break|break;
block|}
case|case
literal|'<'
case|:
block|{
name|int
name|theNextByte
init|=
name|is
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|theNextByte
operator|==
literal|'<'
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// we are reading a dictionary
name|Object
name|key
init|=
name|parseNextToken
argument_list|(
name|is
argument_list|)
decl_stmt|;
while|while
condition|(
name|key
operator|instanceof
name|LiteralName
operator|&&
operator|!
name|MARK_END_OF_DICTIONARY
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|Object
name|value
init|=
name|parseNextToken
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|result
operator|.
name|put
argument_list|(
operator|(
operator|(
name|LiteralName
operator|)
name|key
operator|)
operator|.
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|key
operator|=
name|parseNextToken
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
name|retval
operator|=
name|result
expr_stmt|;
block|}
else|else
block|{
comment|// won't read more than 512 bytes
name|int
name|multiplyer
init|=
literal|16
decl_stmt|;
name|int
name|bufferIndex
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|theNextByte
operator|!=
operator|-
literal|1
operator|&&
name|theNextByte
operator|!=
literal|'>'
condition|)
block|{
name|int
name|intValue
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|theNextByte
operator|>=
literal|'0'
operator|&&
name|theNextByte
operator|<=
literal|'9'
condition|)
block|{
name|intValue
operator|=
name|theNextByte
operator|-
literal|'0'
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|theNextByte
operator|>=
literal|'A'
operator|&&
name|theNextByte
operator|<=
literal|'F'
condition|)
block|{
name|intValue
operator|=
literal|10
operator|+
name|theNextByte
operator|-
literal|'A'
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|theNextByte
operator|>=
literal|'a'
operator|&&
name|theNextByte
operator|<=
literal|'f'
condition|)
block|{
name|intValue
operator|=
literal|10
operator|+
name|theNextByte
operator|-
literal|'a'
expr_stmt|;
block|}
comment|// all kind of whitespaces may occur in malformed CMap files
comment|// see PDFBOX-2035
elseif|else
if|if
condition|(
name|isWhitespaceOrEOF
argument_list|(
name|theNextByte
argument_list|)
condition|)
block|{
comment|// skipping whitespaces
name|theNextByte
operator|=
name|is
operator|.
name|read
argument_list|()
expr_stmt|;
continue|continue;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error: expected hex character and not "
operator|+
operator|(
name|char
operator|)
name|theNextByte
operator|+
literal|":"
operator|+
name|theNextByte
argument_list|)
throw|;
block|}
name|intValue
operator|*=
name|multiplyer
expr_stmt|;
if|if
condition|(
name|multiplyer
operator|==
literal|16
condition|)
block|{
name|bufferIndex
operator|++
expr_stmt|;
name|tokenParserByteBuffer
index|[
name|bufferIndex
index|]
operator|=
literal|0
expr_stmt|;
name|multiplyer
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|multiplyer
operator|=
literal|16
expr_stmt|;
block|}
name|tokenParserByteBuffer
index|[
name|bufferIndex
index|]
operator|+=
name|intValue
expr_stmt|;
name|theNextByte
operator|=
name|is
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
name|byte
index|[]
name|finalResult
init|=
operator|new
name|byte
index|[
name|bufferIndex
operator|+
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|tokenParserByteBuffer
argument_list|,
literal|0
argument_list|,
name|finalResult
argument_list|,
literal|0
argument_list|,
name|bufferIndex
operator|+
literal|1
argument_list|)
expr_stmt|;
name|retval
operator|=
name|finalResult
expr_stmt|;
block|}
break|break;
block|}
case|case
literal|'/'
case|:
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|stringByte
init|=
name|is
operator|.
name|read
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|isWhitespaceOrEOF
argument_list|(
name|stringByte
argument_list|)
operator|&&
operator|!
name|isDelimiter
argument_list|(
name|stringByte
argument_list|)
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|stringByte
argument_list|)
expr_stmt|;
name|stringByte
operator|=
name|is
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|isDelimiter
argument_list|(
name|stringByte
argument_list|)
condition|)
block|{
name|is
operator|.
name|unread
argument_list|(
name|stringByte
argument_list|)
expr_stmt|;
block|}
name|retval
operator|=
operator|new
name|LiteralName
argument_list|(
name|buffer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
operator|-
literal|1
case|:
block|{
comment|// EOF returning null
break|break;
block|}
case|case
literal|'0'
case|:
case|case
literal|'1'
case|:
case|case
literal|'2'
case|:
case|case
literal|'3'
case|:
case|case
literal|'4'
case|:
case|case
literal|'5'
case|:
case|case
literal|'6'
case|:
case|case
literal|'7'
case|:
case|case
literal|'8'
case|:
case|case
literal|'9'
case|:
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|nextByte
argument_list|)
expr_stmt|;
name|nextByte
operator|=
name|is
operator|.
name|read
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|isWhitespaceOrEOF
argument_list|(
name|nextByte
argument_list|)
operator|&&
operator|(
name|Character
operator|.
name|isDigit
argument_list|(
operator|(
name|char
operator|)
name|nextByte
argument_list|)
operator|||
name|nextByte
operator|==
literal|'.'
operator|)
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|nextByte
argument_list|)
expr_stmt|;
name|nextByte
operator|=
name|is
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
name|is
operator|.
name|unread
argument_list|(
name|nextByte
argument_list|)
expr_stmt|;
name|String
name|value
init|=
name|buffer
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|retval
operator|=
name|Double
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|retval
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
default|default:
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|nextByte
argument_list|)
expr_stmt|;
name|nextByte
operator|=
name|is
operator|.
name|read
argument_list|()
expr_stmt|;
comment|// newline separator may be missing in malformed CMap files
comment|// see PDFBOX-2035
while|while
condition|(
operator|!
name|isWhitespaceOrEOF
argument_list|(
name|nextByte
argument_list|)
operator|&&
operator|!
name|isDelimiter
argument_list|(
name|nextByte
argument_list|)
operator|&&
operator|!
name|Character
operator|.
name|isDigit
argument_list|(
name|nextByte
argument_list|)
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|nextByte
argument_list|)
expr_stmt|;
name|nextByte
operator|=
name|is
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|isDelimiter
argument_list|(
name|nextByte
argument_list|)
operator|||
name|Character
operator|.
name|isDigit
argument_list|(
name|nextByte
argument_list|)
condition|)
block|{
name|is
operator|.
name|unread
argument_list|(
name|nextByte
argument_list|)
expr_stmt|;
block|}
name|retval
operator|=
operator|new
name|Operator
argument_list|(
name|buffer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
return|return
name|retval
return|;
block|}
end_function

begin_function
specifier|private
name|void
name|readUntilEndOfLine
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|StringBuilder
name|buf
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|nextByte
init|=
name|is
operator|.
name|read
argument_list|()
decl_stmt|;
while|while
condition|(
name|nextByte
operator|!=
operator|-
literal|1
operator|&&
name|nextByte
operator|!=
literal|0x0D
operator|&&
name|nextByte
operator|!=
literal|0x0A
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|nextByte
argument_list|)
expr_stmt|;
name|nextByte
operator|=
name|is
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|private
name|boolean
name|isWhitespaceOrEOF
parameter_list|(
name|int
name|aByte
parameter_list|)
block|{
return|return
name|aByte
operator|==
operator|-
literal|1
operator|||
name|aByte
operator|==
literal|0x20
operator|||
name|aByte
operator|==
literal|0x0D
operator|||
name|aByte
operator|==
literal|0x0A
return|;
block|}
end_function

begin_comment
comment|/** Is this a standard PDF delimiter character? */
end_comment

begin_function
specifier|private
name|boolean
name|isDelimiter
parameter_list|(
name|int
name|aByte
parameter_list|)
block|{
switch|switch
condition|(
name|aByte
condition|)
block|{
case|case
literal|'('
case|:
case|case
literal|')'
case|:
case|case
literal|'<'
case|:
case|case
literal|'>'
case|:
case|case
literal|'['
case|:
case|case
literal|']'
case|:
case|case
literal|'{'
case|:
case|case
literal|'}'
case|:
case|case
literal|'/'
case|:
case|case
literal|'%'
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
end_function

begin_function
specifier|private
name|void
name|increment
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
name|increment
argument_list|(
name|data
argument_list|,
name|data
operator|.
name|length
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|void
name|increment
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|position
parameter_list|)
block|{
if|if
condition|(
name|position
operator|>
literal|0
operator|&&
operator|(
name|data
index|[
name|position
index|]
operator|&
literal|0xFF
operator|)
operator|==
literal|255
condition|)
block|{
name|data
index|[
name|position
index|]
operator|=
literal|0
expr_stmt|;
name|increment
argument_list|(
name|data
argument_list|,
name|position
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|data
index|[
name|position
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|data
index|[
name|position
index|]
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|private
name|int
name|createIntFromBytes
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
name|int
name|intValue
init|=
name|bytes
index|[
literal|0
index|]
operator|&
literal|0xFF
decl_stmt|;
if|if
condition|(
name|bytes
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|intValue
operator|<<=
literal|8
expr_stmt|;
name|intValue
operator|+=
name|bytes
index|[
literal|1
index|]
operator|&
literal|0xFF
expr_stmt|;
block|}
return|return
name|intValue
return|;
block|}
end_function

begin_function
specifier|private
name|String
name|createStringFromBytes
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
return|return
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
name|bytes
operator|.
name|length
operator|==
literal|1
condition|?
name|StandardCharsets
operator|.
name|ISO_8859_1
else|:
name|StandardCharsets
operator|.
name|UTF_16BE
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**      * Internal class.      */
end_comment

begin_class
specifier|private
specifier|static
specifier|final
class|class
name|LiteralName
block|{
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|LiteralName
parameter_list|(
name|String
name|theName
parameter_list|)
block|{
name|name
operator|=
name|theName
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|/**      * Internal class.      */
end_comment

begin_class
specifier|private
specifier|static
specifier|final
class|class
name|Operator
block|{
specifier|private
name|String
name|op
decl_stmt|;
specifier|private
name|Operator
parameter_list|(
name|String
name|theOp
parameter_list|)
block|{
name|op
operator|=
name|theOp
expr_stmt|;
block|}
block|}
end_class

unit|}
end_unit

