begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cmap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * This represents a single entry in the codespace range.  *  * @author Ben Litchfield  */
end_comment

begin_class
specifier|public
class|class
name|CodespaceRange
block|{
specifier|private
name|byte
index|[]
name|start
decl_stmt|;
specifier|private
name|byte
index|[]
name|end
decl_stmt|;
comment|/**      * Creates a new instance of CodespaceRange.      */
specifier|public
name|CodespaceRange
parameter_list|()
block|{     }
comment|/** Getter for property end.      * @return Value of property end.      *      */
specifier|public
name|byte
index|[]
name|getEnd
parameter_list|()
block|{
return|return
name|this
operator|.
name|end
return|;
block|}
comment|/** Setter for property end.      * @param endBytes New value of property end.      *      */
name|void
name|setEnd
parameter_list|(
name|byte
index|[]
name|endBytes
parameter_list|)
block|{
name|end
operator|=
name|endBytes
expr_stmt|;
block|}
comment|/** Getter for property start.      * @return Value of property start.      *      */
specifier|public
name|byte
index|[]
name|getStart
parameter_list|()
block|{
return|return
name|this
operator|.
name|start
return|;
block|}
comment|/** Setter for property start.      * @param startBytes New value of property start.      *      */
name|void
name|setStart
parameter_list|(
name|byte
index|[]
name|startBytes
parameter_list|)
block|{
name|start
operator|=
name|startBytes
expr_stmt|;
block|}
comment|/**      * Returns true if the given code bytes match this codespace range.      */
specifier|public
name|boolean
name|matches
parameter_list|(
name|byte
index|[]
name|code
parameter_list|)
block|{
comment|// code must be the same length as the bounding codes
if|if
condition|(
name|code
operator|.
name|length
operator|>=
name|start
operator|.
name|length
operator|&&
name|code
operator|.
name|length
operator|<=
name|end
operator|.
name|length
condition|)
block|{
comment|// each of it bytes must lie between the corresponding bytes of the upper& lower bounds
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|code
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|startNum
init|=
name|start
index|[
name|i
index|]
operator|&
literal|0xff
decl_stmt|;
name|int
name|endNum
init|=
name|end
index|[
name|i
index|]
operator|&
literal|0xff
decl_stmt|;
name|int
name|codeNum
init|=
name|code
index|[
name|i
index|]
operator|&
literal|0xff
decl_stmt|;
if|if
condition|(
name|codeNum
operator|>
name|endNum
operator|||
name|codeNum
operator|<
name|startNum
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Returns true if the given code bytes match this codespace range.      */
specifier|public
name|boolean
name|isFullMatch
parameter_list|(
name|List
argument_list|<
name|Byte
argument_list|>
name|code
parameter_list|)
block|{
comment|// code must be the same length as the bounding codes
if|if
condition|(
name|code
operator|.
name|size
argument_list|()
operator|>=
name|start
operator|.
name|length
operator|&&
name|code
operator|.
name|size
argument_list|()
operator|<=
name|end
operator|.
name|length
condition|)
block|{
comment|// each of it bytes must lie between the corresponding bytes of the upper& lower bounds
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|code
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|startNum
init|=
name|start
index|[
name|i
index|]
operator|&
literal|0xff
decl_stmt|;
name|int
name|endNum
init|=
name|end
index|[
name|i
index|]
operator|&
literal|0xff
decl_stmt|;
name|int
name|codeNum
init|=
name|code
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|&
literal|0xff
decl_stmt|;
if|if
condition|(
name|codeNum
operator|>
name|endNum
operator|||
name|codeNum
operator|<
name|startNum
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Returns true if the given byte matches the byte at the given index of this codespace range.      */
specifier|public
name|boolean
name|isPartialMatch
parameter_list|(
name|byte
name|b
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|int
name|startNum
init|=
name|start
index|[
name|index
index|]
operator|&
literal|0xff
decl_stmt|;
name|int
name|endNum
init|=
name|end
index|[
name|index
index|]
operator|&
literal|0xff
decl_stmt|;
name|int
name|codeNum
init|=
name|b
operator|&
literal|0xff
decl_stmt|;
return|return
operator|!
operator|(
name|codeNum
operator|>
name|endNum
operator|||
name|codeNum
operator|<
name|startNum
operator|)
return|;
block|}
block|}
end_class

end_unit

