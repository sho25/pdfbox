begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cmap
package|;
end_package

begin_comment
comment|/**  * Range of continuous CIDs between two Unicode characters.  */
end_comment

begin_class
class|class
name|CIDRange
block|{
specifier|private
specifier|final
name|char
name|from
decl_stmt|;
specifier|private
specifier|final
name|char
name|to
decl_stmt|;
specifier|private
specifier|final
name|int
name|cid
decl_stmt|;
name|CIDRange
parameter_list|(
name|char
name|from
parameter_list|,
name|char
name|to
parameter_list|,
name|int
name|cid
parameter_list|)
block|{
name|this
operator|.
name|from
operator|=
name|from
expr_stmt|;
name|this
operator|.
name|to
operator|=
name|to
expr_stmt|;
name|this
operator|.
name|cid
operator|=
name|cid
expr_stmt|;
block|}
comment|/**      * Maps the given Unicode character to the corresponding CID in this range.      *      * @param ch Unicode character      * @return corresponding CID, or -1 if the character is out of range      */
specifier|public
name|int
name|map
parameter_list|(
name|char
name|ch
parameter_list|)
block|{
if|if
condition|(
name|from
operator|<=
name|ch
operator|&&
name|ch
operator|<=
name|to
condition|)
block|{
return|return
name|cid
operator|+
operator|(
name|ch
operator|-
name|from
operator|)
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**      * Maps the given CID to the corresponding Unicode character in this range.      *      * @param code CID      * @return corresponding Unicode character, or -1 if the CID is out of range      */
specifier|public
name|int
name|unmap
parameter_list|(
name|int
name|code
parameter_list|)
block|{
if|if
condition|(
name|cid
operator|<=
name|code
operator|&&
name|code
operator|<=
name|cid
operator|+
operator|(
name|to
operator|-
name|from
operator|)
condition|)
block|{
return|return
name|from
operator|+
operator|(
name|code
operator|-
name|cid
operator|)
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
block|}
end_class

end_unit

