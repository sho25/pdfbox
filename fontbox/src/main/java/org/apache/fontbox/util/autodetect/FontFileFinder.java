begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|util
operator|.
name|autodetect
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|DirectoryWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|filefilter
operator|.
name|FileFilterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|filefilter
operator|.
name|IOFileFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|filefilter
operator|.
name|WildcardFileFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Helps to autodetect/locate available operating system fonts. This class is based on a class provided by Apache FOP.  * see org.apache.fop.fonts.autodetect.FontFileFinder  */
end_comment

begin_class
specifier|public
class|class
name|FontFileFinder
extends|extends
name|DirectoryWalker
argument_list|<
name|URL
argument_list|>
block|{
comment|/**      * logging instance.      */
specifier|private
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FontFileFinder
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|FontDirFinder
name|fontDirFinder
init|=
literal|null
decl_stmt|;
comment|/**      * default depth limit of recursion when searching for font files.      */
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_DEPTH_LIMIT
init|=
operator|-
literal|1
decl_stmt|;
comment|/**      * Default constructor.      */
specifier|public
name|FontFileFinder
parameter_list|()
block|{
name|this
argument_list|(
name|DEFAULT_DEPTH_LIMIT
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor.      *       * @param depthLimit recursion depth limit      *       */
specifier|public
name|FontFileFinder
parameter_list|(
name|int
name|depthLimit
parameter_list|)
block|{
name|super
argument_list|(
name|getDirectoryFilter
argument_list|()
argument_list|,
name|getFileFilter
argument_list|()
argument_list|,
name|depthLimit
argument_list|)
expr_stmt|;
block|}
specifier|private
name|FontDirFinder
name|determineDirFinder
parameter_list|()
block|{
specifier|final
name|String
name|osName
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|osName
operator|.
name|startsWith
argument_list|(
literal|"Windows"
argument_list|)
condition|)
block|{
return|return
operator|new
name|WindowsFontDirFinder
argument_list|()
return|;
block|}
else|else
block|{
if|if
condition|(
name|osName
operator|.
name|startsWith
argument_list|(
literal|"Mac"
argument_list|)
condition|)
block|{
return|return
operator|new
name|MacFontDirFinder
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|new
name|UnixFontDirFinder
argument_list|()
return|;
block|}
block|}
block|}
comment|/**      * Font directory filter. Currently ignores hidden directories.      *       * @return IOFileFilter font directory filter      */
specifier|protected
specifier|static
name|IOFileFilter
name|getDirectoryFilter
parameter_list|()
block|{
return|return
name|FileFilterUtils
operator|.
name|and
argument_list|(
name|FileFilterUtils
operator|.
name|directoryFileFilter
argument_list|()
argument_list|,
name|FileFilterUtils
operator|.
name|notFileFilter
argument_list|(
name|FileFilterUtils
operator|.
name|prefixFileFilter
argument_list|(
literal|"."
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Font file filter. Currently searches for files with .ttf, .ttc, .otf, and .pfb extensions.      *       * @return IOFileFilter font file filter      */
specifier|protected
specifier|static
name|IOFileFilter
name|getFileFilter
parameter_list|()
block|{
return|return
name|FileFilterUtils
operator|.
name|and
argument_list|(
name|FileFilterUtils
operator|.
name|fileFileFilter
argument_list|()
argument_list|,
operator|new
name|WildcardFileFilter
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"*.ttf"
block|,
literal|"*.otf"
block|,
literal|"*.pfb"
block|,
literal|"*.ttc"
block|}
argument_list|,
name|IOCase
operator|.
name|INSENSITIVE
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * @param directory directory to handle      * @param depth recursion depth      * @param results collection      * @return whether directory should be handled {@inheritDoc}      */
annotation|@
name|Override
specifier|protected
name|boolean
name|handleDirectory
parameter_list|(
name|File
name|directory
parameter_list|,
name|int
name|depth
parameter_list|,
name|Collection
argument_list|<
name|URL
argument_list|>
name|results
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
comment|/**      * @param file file to handle      * @param depth recursion depth      * @param results collection {@inheritDoc}      */
annotation|@
name|Override
specifier|protected
name|void
name|handleFile
parameter_list|(
name|File
name|file
parameter_list|,
name|int
name|depth
parameter_list|,
name|Collection
argument_list|<
name|URL
argument_list|>
name|results
parameter_list|)
block|{
try|try
block|{
comment|// Looks Strange, but is actually recommended over just .URL()
name|results
operator|.
name|add
argument_list|(
name|file
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"MalformedURLException"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @param directory the directory being processed      * @param depth the current directory level      * @param results the collection of results objects {@inheritDoc}      */
annotation|@
name|Override
specifier|protected
name|void
name|handleDirectoryEnd
parameter_list|(
name|File
name|directory
parameter_list|,
name|int
name|depth
parameter_list|,
name|Collection
argument_list|<
name|URL
argument_list|>
name|results
parameter_list|)
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
name|directory
operator|+
literal|": found "
operator|+
name|results
operator|.
name|size
argument_list|()
operator|+
literal|" font"
operator|+
operator|(
operator|(
name|results
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
condition|?
literal|""
else|:
literal|"s"
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Automagically finds a list of font files on local system.      *       * @return List&lt;URL&gt; of font files      * @throws IOException io exception {@inheritDoc}      */
specifier|public
name|List
argument_list|<
name|URL
argument_list|>
name|find
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|fontDirFinder
operator|==
literal|null
condition|)
block|{
name|fontDirFinder
operator|=
name|determineDirFinder
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|File
argument_list|>
name|fontDirs
init|=
name|fontDirFinder
operator|.
name|find
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|URL
argument_list|>
name|results
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|<
name|URL
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|dir
range|:
name|fontDirs
control|)
block|{
name|super
operator|.
name|walk
argument_list|(
name|dir
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
comment|/**      * Searches a given directory for font files.      *       * @param dir directory to search      * @return list of font files      * @throws IOException thrown if an I/O exception of some sort has occurred      */
specifier|public
name|List
argument_list|<
name|URL
argument_list|>
name|find
parameter_list|(
name|String
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|URL
argument_list|>
name|results
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|<
name|URL
argument_list|>
argument_list|()
decl_stmt|;
name|File
name|directory
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|)
decl_stmt|;
if|if
condition|(
name|directory
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|super
operator|.
name|walk
argument_list|(
name|directory
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
comment|/**      * Provides a list of platform specific ttf name mappings.      *       * @return a font name mapping      */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getCommonTTFMapping
parameter_list|()
block|{
if|if
condition|(
name|fontDirFinder
operator|==
literal|null
condition|)
block|{
name|fontDirFinder
operator|=
name|determineDirFinder
argument_list|()
expr_stmt|;
block|}
return|return
name|fontDirFinder
operator|.
name|getCommonTTFMapping
argument_list|()
return|;
block|}
block|}
end_class

end_unit

