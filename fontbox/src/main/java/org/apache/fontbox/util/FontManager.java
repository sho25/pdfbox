begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|ttf
operator|.
name|NamingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|ttf
operator|.
name|TTFParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|ttf
operator|.
name|TrueTypeFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|util
operator|.
name|autodetect
operator|.
name|FontFileFinder
import|;
end_import

begin_comment
comment|/**  * This class is used as manager for local fonts. It's based on the font manager provided by Apache FOP. see  * org.apache.fop.fonts.FontManager.java  */
end_comment

begin_class
specifier|public
class|class
name|FontManager
block|{
comment|/**      * Log instance.      */
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FontManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ttfFontfiles
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|fontsLoaded
init|=
literal|false
decl_stmt|;
comment|// HashMap with all known true type fonts
specifier|private
specifier|static
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fontMappingTTF
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|FontManager
parameter_list|()
block|{     }
comment|/**      * Load all available fonts from the environment.      */
specifier|private
specifier|static
name|void
name|loadFonts
parameter_list|()
block|{
try|try
block|{
name|FontFileFinder
name|fontfinder
init|=
operator|new
name|FontFileFinder
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|URL
argument_list|>
name|fonts
init|=
name|fontfinder
operator|.
name|find
argument_list|()
decl_stmt|;
for|for
control|(
name|URL
name|font
range|:
name|fonts
control|)
block|{
try|try
block|{
comment|// the URL may contain some escaped characters like spaces
comment|// use the URI to decode such escape sequences
name|String
name|fontfilename
init|=
operator|new
name|File
argument_list|(
name|font
operator|.
name|toURI
argument_list|()
argument_list|)
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|fontfilename
operator|.
name|toLowerCase
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".ttf"
argument_list|)
condition|)
block|{
name|analyzeTTF
argument_list|(
name|fontfilename
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Unsupported font format for external font: "
operator|+
name|fontfilename
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|exception
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Can't read external font: "
operator|+
name|font
operator|.
name|getPath
argument_list|()
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|exception
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Can't read external font: "
operator|+
name|font
operator|.
name|getPath
argument_list|()
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
name|addFontMapping
argument_list|(
name|fontfinder
operator|.
name|getCommonTTFMapping
argument_list|()
argument_list|,
name|fontMappingTTF
argument_list|)
expr_stmt|;
name|createFontmapping
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|exception
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"An error occured when collecting external fonts."
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fontsLoaded
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|/**      * Analyze the given true type font.      *       * @param ttfFilename the filename of the true type type      * @throws IOException if something went wrong      */
specifier|private
specifier|static
name|void
name|analyzeTTF
parameter_list|(
name|String
name|ttfFilename
parameter_list|)
throws|throws
name|IOException
block|{
name|TTFParser
name|ttfParser
init|=
operator|new
name|TTFParser
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|TrueTypeFont
name|ttfFont
init|=
name|ttfParser
operator|.
name|parseTTF
argument_list|(
name|ttfFilename
argument_list|)
decl_stmt|;
if|if
condition|(
name|ttfFont
operator|!=
literal|null
condition|)
block|{
name|NamingTable
name|namingTable
init|=
name|ttfFont
operator|.
name|getNaming
argument_list|()
decl_stmt|;
if|if
condition|(
name|namingTable
operator|!=
literal|null
operator|&&
name|namingTable
operator|.
name|getPSName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|normalizedName
init|=
name|normalizeFontname
argument_list|(
name|namingTable
operator|.
name|getPSName
argument_list|()
argument_list|)
decl_stmt|;
name|ttfFontfiles
operator|.
name|put
argument_list|(
name|normalizedName
argument_list|,
name|ttfFilename
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Normalize the fontname.      *       * @param fontname The name of the font.      *       * @return The normalized name of the font.      */
specifier|private
specifier|static
name|String
name|normalizeFontname
parameter_list|(
name|String
name|fontname
parameter_list|)
block|{
comment|// Terminate all whitespaces, commas and hyphens
name|String
name|normalizedFontname
init|=
name|fontname
operator|.
name|toLowerCase
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
literal|""
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|","
argument_list|,
literal|""
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"-"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
comment|// Terminate trailing characters up to the "+".
comment|// As far as I know, these characters are used in names of embedded fonts
comment|// If the embedded font can't be read, we'll try to find it here
if|if
condition|(
name|normalizedFontname
operator|.
name|indexOf
argument_list|(
literal|"+"
argument_list|)
operator|>
operator|-
literal|1
condition|)
block|{
name|normalizedFontname
operator|=
name|normalizedFontname
operator|.
name|substring
argument_list|(
name|normalizedFontname
operator|.
name|indexOf
argument_list|(
literal|"+"
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// normalize all kinds of fonttypes. There are several possible version which have to be normalized
comment|// e.g. Arial,Bold Arial-BoldMT Helevtica-oblique ...
name|boolean
name|isBold
init|=
name|normalizedFontname
operator|.
name|indexOf
argument_list|(
literal|"bold"
argument_list|)
operator|>
operator|-
literal|1
decl_stmt|;
name|boolean
name|isItalic
init|=
name|normalizedFontname
operator|.
name|indexOf
argument_list|(
literal|"italic"
argument_list|)
operator|>
operator|-
literal|1
operator|||
name|normalizedFontname
operator|.
name|indexOf
argument_list|(
literal|"oblique"
argument_list|)
operator|>
operator|-
literal|1
decl_stmt|;
name|normalizedFontname
operator|=
name|normalizedFontname
operator|.
name|toLowerCase
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"bold"
argument_list|,
literal|""
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"italic"
argument_list|,
literal|""
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"oblique"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|isBold
condition|)
block|{
name|normalizedFontname
operator|+=
literal|"bold"
expr_stmt|;
block|}
if|if
condition|(
name|isItalic
condition|)
block|{
name|normalizedFontname
operator|+=
literal|"italic"
expr_stmt|;
block|}
return|return
name|normalizedFontname
return|;
block|}
comment|/**      * Add a font-mapping.      *       * @param font The name of the font.      *       * @param mappedName The name of the mapped font.      */
specifier|private
specifier|static
name|void
name|addFontMapping
parameter_list|(
name|String
name|font
parameter_list|,
name|String
name|mappedName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mapping
parameter_list|)
block|{
name|String
name|fontname
init|=
name|normalizeFontname
argument_list|(
name|font
argument_list|)
decl_stmt|;
comment|// is there already a font mapping ?
if|if
condition|(
name|mapping
operator|.
name|containsKey
argument_list|(
name|fontname
argument_list|)
condition|)
block|{
return|return;
block|}
name|String
name|mappedFontname
init|=
name|normalizeFontname
argument_list|(
name|mappedName
argument_list|)
decl_stmt|;
comment|// is there any font with the mapped name ?
if|if
condition|(
name|ttfFontfiles
operator|.
name|containsKey
argument_list|(
name|mappedFontname
argument_list|)
condition|)
block|{
name|mapping
operator|.
name|put
argument_list|(
name|fontname
argument_list|,
name|mappedFontname
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// is there any recursive mapping ?
if|if
condition|(
name|mapping
operator|.
name|containsKey
argument_list|(
name|mappedFontname
argument_list|)
condition|)
block|{
name|mapping
operator|.
name|put
argument_list|(
name|fontname
argument_list|,
name|mapping
operator|.
name|get
argument_list|(
name|mappedFontname
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Add the given mappings to the font mapping.      *       * @param fontMappingSrc the given mapping      */
specifier|private
specifier|static
name|void
name|addFontMapping
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fontMappingSrc
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fontMappingDest
parameter_list|)
block|{
for|for
control|(
name|String
name|fontname
range|:
name|fontMappingSrc
operator|.
name|keySet
argument_list|()
control|)
block|{
name|addFontMapping
argument_list|(
name|fontname
argument_list|,
name|fontMappingSrc
operator|.
name|get
argument_list|(
name|fontname
argument_list|)
argument_list|,
name|fontMappingDest
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Search for a mapped true type font name.      *       * @param fontname the given font name      * @return the mapped font name      */
specifier|private
specifier|static
name|String
name|getMappedTTFName
parameter_list|(
name|String
name|fontname
parameter_list|)
block|{
name|String
name|normalizedFontname
init|=
name|normalizeFontname
argument_list|(
name|fontname
argument_list|)
decl_stmt|;
if|if
condition|(
name|fontMappingTTF
operator|.
name|containsKey
argument_list|(
name|normalizedFontname
argument_list|)
condition|)
block|{
return|return
name|fontMappingTTF
operator|.
name|get
argument_list|(
name|normalizedFontname
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Create a mapping for the some font families.      */
specifier|private
specifier|static
name|void
name|createFontmapping
parameter_list|()
block|{
name|addFontFamilyMapping
argument_list|(
literal|"ArialNarrow"
argument_list|,
literal|"Arial"
argument_list|,
name|fontMappingTTF
argument_list|)
expr_stmt|;
name|addFontFamilyMapping
argument_list|(
literal|"CourierNew"
argument_list|,
literal|"Courier"
argument_list|,
name|fontMappingTTF
argument_list|)
expr_stmt|;
name|addFontFamilyMapping
argument_list|(
literal|"TimesNewRomanPSMT"
argument_list|,
literal|"TimesNewRoman"
argument_list|,
name|fontMappingTTF
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a mapping for the given font family.      *       * @param fontfamily the font family to be mapped      * @param mappedFontfamily the mapped font family      */
specifier|private
specifier|static
name|void
name|addFontFamilyMapping
parameter_list|(
name|String
name|fontfamily
parameter_list|,
name|String
name|mappedFontfamily
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mapping
parameter_list|)
block|{
name|addFontMapping
argument_list|(
name|fontfamily
operator|+
literal|",BoldItalic"
argument_list|,
name|mappedFontfamily
operator|+
literal|",BoldItalic"
argument_list|,
name|mapping
argument_list|)
expr_stmt|;
name|addFontMapping
argument_list|(
name|fontfamily
operator|+
literal|",Bold"
argument_list|,
name|mappedFontfamily
operator|+
literal|",Bold"
argument_list|,
name|mapping
argument_list|)
expr_stmt|;
name|addFontMapping
argument_list|(
name|fontfamily
operator|+
literal|",Italic"
argument_list|,
name|mappedFontfamily
operator|+
literal|",Italic"
argument_list|,
name|mapping
argument_list|)
expr_stmt|;
name|addFontMapping
argument_list|(
name|fontfamily
argument_list|,
name|mappedFontfamily
argument_list|,
name|mapping
argument_list|)
expr_stmt|;
block|}
comment|/**      * Search for a font for the given font name.      *       * @param fontname the given font name      * @return the name of the mapped font      */
specifier|public
specifier|static
name|String
name|findTTFontname
parameter_list|(
name|String
name|fontname
parameter_list|)
block|{
if|if
condition|(
operator|!
name|fontsLoaded
condition|)
block|{
name|loadFonts
argument_list|()
expr_stmt|;
block|}
name|String
name|fontfile
init|=
literal|null
decl_stmt|;
name|String
name|normalizedFontname
init|=
name|normalizeFontname
argument_list|(
name|fontname
argument_list|)
decl_stmt|;
if|if
condition|(
name|ttfFontfiles
operator|.
name|containsKey
argument_list|(
name|normalizedFontname
argument_list|)
condition|)
block|{
name|fontfile
operator|=
name|ttfFontfiles
operator|.
name|get
argument_list|(
name|normalizedFontname
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fontfile
operator|==
literal|null
condition|)
block|{
name|String
name|mappedFontname
init|=
name|getMappedTTFName
argument_list|(
name|fontname
argument_list|)
decl_stmt|;
if|if
condition|(
name|mappedFontname
operator|!=
literal|null
operator|&&
name|ttfFontfiles
operator|.
name|containsKey
argument_list|(
name|mappedFontname
argument_list|)
condition|)
block|{
name|fontfile
operator|=
name|ttfFontfiles
operator|.
name|get
argument_list|(
name|mappedFontname
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fontfile
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Font not found: "
operator|+
name|fontname
argument_list|)
expr_stmt|;
block|}
return|return
name|fontfile
return|;
block|}
comment|/**      * Search for a true type font for the given font name.      *       * @param fontname the given font name      * @return the mapped true type font      * @throws IOException if something went wrong      */
specifier|public
specifier|static
name|TrueTypeFont
name|findTTFont
parameter_list|(
name|String
name|fontname
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|ttffontname
init|=
name|findTTFontname
argument_list|(
name|fontname
argument_list|)
decl_stmt|;
name|TrueTypeFont
name|ttfFont
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ttffontname
operator|!=
literal|null
condition|)
block|{
name|TTFParser
name|ttfParser
init|=
operator|new
name|TTFParser
argument_list|()
decl_stmt|;
name|InputStream
name|fontStream
init|=
name|ResourceLoader
operator|.
name|loadResource
argument_list|(
name|ttffontname
argument_list|)
decl_stmt|;
if|if
condition|(
name|fontStream
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't load external font: "
operator|+
name|ttffontname
argument_list|)
throw|;
block|}
name|ttfFont
operator|=
name|ttfParser
operator|.
name|parseTTF
argument_list|(
name|fontStream
argument_list|)
expr_stmt|;
block|}
return|return
name|ttfFont
return|;
block|}
block|}
end_class

end_unit

