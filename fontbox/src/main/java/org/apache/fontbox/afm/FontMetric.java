begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|afm
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|util
operator|.
name|BoundingBox
import|;
end_import

begin_comment
comment|/**  * This is the outermost AFM type.  This can be created by the afmparser with a valid  * AFM document.  *  * @author Ben Litchfield (ben@benlitchfield.com)  * @version $Revision: 1.3 $  */
end_comment

begin_class
specifier|public
class|class
name|FontMetric
block|{
comment|/**      * This is the version of the FontMetrics.      */
specifier|private
name|float
name|afmVersion
decl_stmt|;
specifier|private
name|int
name|metricSets
init|=
literal|0
decl_stmt|;
specifier|private
name|String
name|fontName
decl_stmt|;
specifier|private
name|String
name|fullName
decl_stmt|;
specifier|private
name|String
name|familyName
decl_stmt|;
specifier|private
name|String
name|weight
decl_stmt|;
specifier|private
name|BoundingBox
name|fontBBox
decl_stmt|;
specifier|private
name|String
name|fontVersion
decl_stmt|;
specifier|private
name|String
name|notice
decl_stmt|;
specifier|private
name|String
name|encodingScheme
decl_stmt|;
specifier|private
name|int
name|mappingScheme
decl_stmt|;
specifier|private
name|int
name|escChar
decl_stmt|;
specifier|private
name|String
name|characterSet
decl_stmt|;
specifier|private
name|int
name|characters
decl_stmt|;
specifier|private
name|boolean
name|isBaseFont
decl_stmt|;
specifier|private
name|float
index|[]
name|vVector
decl_stmt|;
specifier|private
name|boolean
name|isFixedV
decl_stmt|;
specifier|private
name|float
name|capHeight
decl_stmt|;
specifier|private
name|float
name|xHeight
decl_stmt|;
specifier|private
name|float
name|ascender
decl_stmt|;
specifier|private
name|float
name|descender
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|comments
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|float
name|underlinePosition
decl_stmt|;
specifier|private
name|float
name|underlineThickness
decl_stmt|;
specifier|private
name|float
name|italicAngle
decl_stmt|;
specifier|private
name|float
index|[]
name|charWidth
decl_stmt|;
specifier|private
name|boolean
name|isFixedPitch
decl_stmt|;
specifier|private
name|float
name|standardHorizontalWidth
decl_stmt|;
specifier|private
name|float
name|standardVerticalWidth
decl_stmt|;
specifier|private
name|List
argument_list|<
name|CharMetric
argument_list|>
name|charMetrics
init|=
operator|new
name|ArrayList
argument_list|<
name|CharMetric
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|CharMetric
argument_list|>
name|charMetricsMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CharMetric
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|TrackKern
argument_list|>
name|trackKern
init|=
operator|new
name|ArrayList
argument_list|<
name|TrackKern
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Composite
argument_list|>
name|composites
init|=
operator|new
name|ArrayList
argument_list|<
name|Composite
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|KernPair
argument_list|>
name|kernPairs
init|=
operator|new
name|ArrayList
argument_list|<
name|KernPair
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|KernPair
argument_list|>
name|kernPairs0
init|=
operator|new
name|ArrayList
argument_list|<
name|KernPair
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|KernPair
argument_list|>
name|kernPairs1
init|=
operator|new
name|ArrayList
argument_list|<
name|KernPair
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Constructor.      */
specifier|public
name|FontMetric
parameter_list|()
block|{     }
comment|/**      * This will get the width of a character.      *      * @param name The character to get the width for.      *      * @return The width of the character.      *      * @throws IOException If this AFM file does not handle the character.      */
specifier|public
name|float
name|getCharacterWidth
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|float
name|result
init|=
literal|0
decl_stmt|;
name|CharMetric
name|metric
init|=
name|charMetricsMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|metric
operator|==
literal|null
condition|)
block|{
name|result
operator|=
literal|0
expr_stmt|;
comment|//don't throw an exception right away.
comment|//throw new IOException( "Unknown AFM(" + getFullName() + ") characer '" + name + "'" );
block|}
else|else
block|{
name|result
operator|=
name|metric
operator|.
name|getWx
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * This will get the width of a character.      *      * @param name The character to get the width for.      *      * @return The width of the character.      *      * @throws IOException If this AFM file does not handle the character.      */
specifier|public
name|float
name|getCharacterHeight
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|float
name|result
init|=
literal|0
decl_stmt|;
name|CharMetric
name|metric
init|=
name|charMetricsMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|metric
operator|==
literal|null
condition|)
block|{
name|result
operator|=
literal|0
expr_stmt|;
comment|//don't throw an exception right away.
comment|//throw new IOException( "Unknown AFM(" + getFullName() + ") characer '" + name + "'" );
block|}
else|else
block|{
if|if
condition|(
name|metric
operator|.
name|getWy
argument_list|()
operator|==
literal|0
condition|)
block|{
name|result
operator|=
name|metric
operator|.
name|getBoundingBox
argument_list|()
operator|.
name|getHeight
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|metric
operator|.
name|getWy
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**      * This will get the average width of a character.      *      * @return The width of the character.      *      * @throws IOException If this AFM file does not handle the character.      */
specifier|public
name|float
name|getAverageCharacterWidth
parameter_list|()
throws|throws
name|IOException
block|{
name|float
name|average
init|=
literal|0
decl_stmt|;
name|float
name|totalWidths
init|=
literal|0
decl_stmt|;
name|float
name|characterCount
init|=
literal|0
decl_stmt|;
name|Iterator
argument_list|<
name|CharMetric
argument_list|>
name|iter
init|=
name|charMetricsMap
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CharMetric
name|metric
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|metric
operator|.
name|getWx
argument_list|()
operator|>
literal|0
condition|)
block|{
name|totalWidths
operator|+=
name|metric
operator|.
name|getWx
argument_list|()
expr_stmt|;
name|characterCount
operator|+=
literal|1
expr_stmt|;
block|}
block|}
if|if
condition|(
name|totalWidths
operator|>
literal|0
condition|)
block|{
name|average
operator|=
name|totalWidths
operator|/
name|characterCount
expr_stmt|;
block|}
return|return
name|average
return|;
block|}
comment|/**      * This will add a new comment.      *      * @param comment The comment to add to this metric.      */
specifier|public
name|void
name|addComment
parameter_list|(
name|String
name|comment
parameter_list|)
block|{
name|comments
operator|.
name|add
argument_list|(
name|comment
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get all comments.      *      * @return The list of all comments.      */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getComments
parameter_list|()
block|{
return|return
name|comments
return|;
block|}
comment|/**      * This will get the version of the AFM document.      *      * @return The version of the document.      */
specifier|public
name|float
name|getAFMVersion
parameter_list|()
block|{
return|return
name|afmVersion
return|;
block|}
comment|/**      * This will get the metricSets attribute.      *      * @return The value of the metric sets.      */
specifier|public
name|int
name|getMetricSets
parameter_list|()
block|{
return|return
name|metricSets
return|;
block|}
comment|/**      * This will set the version of the AFM document.      *      * @param afmVersionValue The version of the document.      */
specifier|public
name|void
name|setAFMVersion
parameter_list|(
name|float
name|afmVersionValue
parameter_list|)
block|{
name|afmVersion
operator|=
name|afmVersionValue
expr_stmt|;
block|}
comment|/**      * This will set the metricSets attribute.  This value must be 0,1, or 2.      *      * @param metricSetsValue The new metric sets attribute.      */
specifier|public
name|void
name|setMetricSets
parameter_list|(
name|int
name|metricSetsValue
parameter_list|)
block|{
if|if
condition|(
name|metricSetsValue
argument_list|<
literal|0
operator|||
name|metricSetsValue
argument_list|>
literal|2
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"The metricSets attribute must be in the "
operator|+
literal|"set {0,1,2} and not '"
operator|+
name|metricSetsValue
operator|+
literal|"'"
argument_list|)
throw|;
block|}
name|metricSets
operator|=
name|metricSetsValue
expr_stmt|;
block|}
comment|/**      * Getter for property fontName.      *      * @return Value of property fontName.      */
specifier|public
name|String
name|getFontName
parameter_list|()
block|{
return|return
name|fontName
return|;
block|}
comment|/**      * Setter for property fontName.      *      * @param name New value of property fontName.      */
specifier|public
name|void
name|setFontName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|fontName
operator|=
name|name
expr_stmt|;
block|}
comment|/**      * Getter for property fullName.      *      * @return Value of property fullName.      */
specifier|public
name|String
name|getFullName
parameter_list|()
block|{
return|return
name|fullName
return|;
block|}
comment|/**      * Setter for property fullName.      *      * @param fullNameValue New value of property fullName.      */
specifier|public
name|void
name|setFullName
parameter_list|(
name|String
name|fullNameValue
parameter_list|)
block|{
name|fullName
operator|=
name|fullNameValue
expr_stmt|;
block|}
comment|/**      * Getter for property familyName.      *      * @return Value of property familyName.      */
specifier|public
name|String
name|getFamilyName
parameter_list|()
block|{
return|return
name|familyName
return|;
block|}
comment|/**      * Setter for property familyName.      *      * @param familyNameValue New value of property familyName.      */
specifier|public
name|void
name|setFamilyName
parameter_list|(
name|String
name|familyNameValue
parameter_list|)
block|{
name|familyName
operator|=
name|familyNameValue
expr_stmt|;
block|}
comment|/**      * Getter for property weight.      *      * @return Value of property weight.      */
specifier|public
name|String
name|getWeight
parameter_list|()
block|{
return|return
name|weight
return|;
block|}
comment|/**      * Setter for property weight.      *      * @param weightValue New value of property weight.      */
specifier|public
name|void
name|setWeight
parameter_list|(
name|String
name|weightValue
parameter_list|)
block|{
name|weight
operator|=
name|weightValue
expr_stmt|;
block|}
comment|/**      * Getter for property fontBBox.      *      * @return Value of property fontBBox.      */
specifier|public
name|BoundingBox
name|getFontBBox
parameter_list|()
block|{
return|return
name|fontBBox
return|;
block|}
comment|/**      * Setter for property fontBBox.      *      * @param bBox New value of property fontBBox.      */
specifier|public
name|void
name|setFontBBox
parameter_list|(
name|BoundingBox
name|bBox
parameter_list|)
block|{
name|this
operator|.
name|fontBBox
operator|=
name|bBox
expr_stmt|;
block|}
comment|/**      * Getter for property notice.      *      * @return Value of property notice.      */
specifier|public
name|String
name|getNotice
parameter_list|()
block|{
return|return
name|notice
return|;
block|}
comment|/**      * Setter for property notice.      *      * @param noticeValue New value of property notice.      */
specifier|public
name|void
name|setNotice
parameter_list|(
name|String
name|noticeValue
parameter_list|)
block|{
name|notice
operator|=
name|noticeValue
expr_stmt|;
block|}
comment|/**      * Getter for property encodingScheme.      *      * @return Value of property encodingScheme.      */
specifier|public
name|String
name|getEncodingScheme
parameter_list|()
block|{
return|return
name|encodingScheme
return|;
block|}
comment|/**      * Setter for property encodingScheme.      *      * @param encodingSchemeValue New value of property encodingScheme.      */
specifier|public
name|void
name|setEncodingScheme
parameter_list|(
name|String
name|encodingSchemeValue
parameter_list|)
block|{
name|encodingScheme
operator|=
name|encodingSchemeValue
expr_stmt|;
block|}
comment|/**      * Getter for property mappingScheme.      *      * @return Value of property mappingScheme.      */
specifier|public
name|int
name|getMappingScheme
parameter_list|()
block|{
return|return
name|mappingScheme
return|;
block|}
comment|/**      * Setter for property mappingScheme.      *      * @param mappingSchemeValue New value of property mappingScheme.      */
specifier|public
name|void
name|setMappingScheme
parameter_list|(
name|int
name|mappingSchemeValue
parameter_list|)
block|{
name|mappingScheme
operator|=
name|mappingSchemeValue
expr_stmt|;
block|}
comment|/**      * Getter for property escChar.      *      * @return Value of property escChar.      */
specifier|public
name|int
name|getEscChar
parameter_list|()
block|{
return|return
name|escChar
return|;
block|}
comment|/**      * Setter for property escChar.      *      * @param escCharValue New value of property escChar.      */
specifier|public
name|void
name|setEscChar
parameter_list|(
name|int
name|escCharValue
parameter_list|)
block|{
name|escChar
operator|=
name|escCharValue
expr_stmt|;
block|}
comment|/**      * Getter for property characterSet.      *      * @return Value of property characterSet.      */
specifier|public
name|String
name|getCharacterSet
parameter_list|()
block|{
return|return
name|characterSet
return|;
block|}
comment|/**      * Setter for property characterSet.      *      * @param characterSetValue New value of property characterSet.      */
specifier|public
name|void
name|setCharacterSet
parameter_list|(
name|String
name|characterSetValue
parameter_list|)
block|{
name|characterSet
operator|=
name|characterSetValue
expr_stmt|;
block|}
comment|/**      * Getter for property characters.      *      * @return Value of property characters.      */
specifier|public
name|int
name|getCharacters
parameter_list|()
block|{
return|return
name|characters
return|;
block|}
comment|/**      * Setter for property characters.      *      * @param charactersValue New value of property characters.      */
specifier|public
name|void
name|setCharacters
parameter_list|(
name|int
name|charactersValue
parameter_list|)
block|{
name|characters
operator|=
name|charactersValue
expr_stmt|;
block|}
comment|/**      * Getter for property isBaseFont.      *      * @return Value of property isBaseFont.      */
specifier|public
name|boolean
name|isBaseFont
parameter_list|()
block|{
return|return
name|isBaseFont
return|;
block|}
comment|/**      * Setter for property isBaseFont.      *      * @param isBaseFontValue New value of property isBaseFont.      */
specifier|public
name|void
name|setIsBaseFont
parameter_list|(
name|boolean
name|isBaseFontValue
parameter_list|)
block|{
name|isBaseFont
operator|=
name|isBaseFontValue
expr_stmt|;
block|}
comment|/**      * Getter for property vVector.      *      * @return Value of property vVector.      */
specifier|public
name|float
index|[]
name|getVVector
parameter_list|()
block|{
return|return
name|this
operator|.
name|vVector
return|;
block|}
comment|/**      * Setter for property vVector.      *      * @param vVectorValue New value of property vVector.      */
specifier|public
name|void
name|setVVector
parameter_list|(
name|float
index|[]
name|vVectorValue
parameter_list|)
block|{
name|vVector
operator|=
name|vVectorValue
expr_stmt|;
block|}
comment|/**      * Getter for property isFixedV.      *      * @return Value of property isFixedV.      */
specifier|public
name|boolean
name|isFixedV
parameter_list|()
block|{
return|return
name|isFixedV
return|;
block|}
comment|/**      * Setter for property isFixedV.      *      * @param isFixedVValue New value of property isFixedV.      */
specifier|public
name|void
name|setIsFixedV
parameter_list|(
name|boolean
name|isFixedVValue
parameter_list|)
block|{
name|isFixedV
operator|=
name|isFixedVValue
expr_stmt|;
block|}
comment|/**      * Getter for property capHeight.      *      * @return Value of property capHeight.      */
specifier|public
name|float
name|getCapHeight
parameter_list|()
block|{
return|return
name|capHeight
return|;
block|}
comment|/**      * Setter for property capHeight.      *      * @param capHeightValue New value of property capHeight.      */
specifier|public
name|void
name|setCapHeight
parameter_list|(
name|float
name|capHeightValue
parameter_list|)
block|{
name|capHeight
operator|=
name|capHeightValue
expr_stmt|;
block|}
comment|/**      * Getter for property xHeight.      *      * @return Value of property xHeight.      */
specifier|public
name|float
name|getXHeight
parameter_list|()
block|{
return|return
name|xHeight
return|;
block|}
comment|/**      * Setter for property xHeight.      *      * @param xHeightValue New value of property xHeight.      */
specifier|public
name|void
name|setXHeight
parameter_list|(
name|float
name|xHeightValue
parameter_list|)
block|{
name|xHeight
operator|=
name|xHeightValue
expr_stmt|;
block|}
comment|/**      * Getter for property ascender.      *      * @return Value of property ascender.      */
specifier|public
name|float
name|getAscender
parameter_list|()
block|{
return|return
name|ascender
return|;
block|}
comment|/**      * Setter for property ascender.      *      * @param ascenderValue New value of property ascender.      */
specifier|public
name|void
name|setAscender
parameter_list|(
name|float
name|ascenderValue
parameter_list|)
block|{
name|ascender
operator|=
name|ascenderValue
expr_stmt|;
block|}
comment|/**      * Getter for property descender.      *      * @return Value of property descender.      */
specifier|public
name|float
name|getDescender
parameter_list|()
block|{
return|return
name|descender
return|;
block|}
comment|/**      * Setter for property descender.      *      * @param descenderValue New value of property descender.      */
specifier|public
name|void
name|setDescender
parameter_list|(
name|float
name|descenderValue
parameter_list|)
block|{
name|descender
operator|=
name|descenderValue
expr_stmt|;
block|}
comment|/**      * Getter for property fontVersion.      *      * @return Value of property fontVersion.      */
specifier|public
name|String
name|getFontVersion
parameter_list|()
block|{
return|return
name|fontVersion
return|;
block|}
comment|/**      * Setter for property fontVersion.      *      * @param fontVersionValue New value of property fontVersion.      */
specifier|public
name|void
name|setFontVersion
parameter_list|(
name|String
name|fontVersionValue
parameter_list|)
block|{
name|fontVersion
operator|=
name|fontVersionValue
expr_stmt|;
block|}
comment|/**      * Getter for property underlinePosition.      *      * @return Value of property underlinePosition.      */
specifier|public
name|float
name|getUnderlinePosition
parameter_list|()
block|{
return|return
name|underlinePosition
return|;
block|}
comment|/**      * Setter for property underlinePosition.      *      * @param underlinePositionValue New value of property underlinePosition.      */
specifier|public
name|void
name|setUnderlinePosition
parameter_list|(
name|float
name|underlinePositionValue
parameter_list|)
block|{
name|underlinePosition
operator|=
name|underlinePositionValue
expr_stmt|;
block|}
comment|/**      * Getter for property underlineThickness.      *      * @return Value of property underlineThickness.      */
specifier|public
name|float
name|getUnderlineThickness
parameter_list|()
block|{
return|return
name|underlineThickness
return|;
block|}
comment|/**      * Setter for property underlineThickness.      *      * @param underlineThicknessValue New value of property underlineThickness.      */
specifier|public
name|void
name|setUnderlineThickness
parameter_list|(
name|float
name|underlineThicknessValue
parameter_list|)
block|{
name|underlineThickness
operator|=
name|underlineThicknessValue
expr_stmt|;
block|}
comment|/**      * Getter for property italicAngle.      *      * @return Value of property italicAngle.      */
specifier|public
name|float
name|getItalicAngle
parameter_list|()
block|{
return|return
name|italicAngle
return|;
block|}
comment|/**      * Setter for property italicAngle.      *      * @param italicAngleValue New value of property italicAngle.      */
specifier|public
name|void
name|setItalicAngle
parameter_list|(
name|float
name|italicAngleValue
parameter_list|)
block|{
name|italicAngle
operator|=
name|italicAngleValue
expr_stmt|;
block|}
comment|/**      * Getter for property charWidth.      *      * @return Value of property charWidth.      */
specifier|public
name|float
index|[]
name|getCharWidth
parameter_list|()
block|{
return|return
name|this
operator|.
name|charWidth
return|;
block|}
comment|/**      * Setter for property charWidth.      *      * @param charWidthValue New value of property charWidth.      */
specifier|public
name|void
name|setCharWidth
parameter_list|(
name|float
index|[]
name|charWidthValue
parameter_list|)
block|{
name|charWidth
operator|=
name|charWidthValue
expr_stmt|;
block|}
comment|/**      * Getter for property isFixedPitch.      *      * @return Value of property isFixedPitch.      */
specifier|public
name|boolean
name|isFixedPitch
parameter_list|()
block|{
return|return
name|isFixedPitch
return|;
block|}
comment|/**      * Setter for property isFixedPitch.      *      * @param isFixedPitchValue New value of property isFixedPitch.      */
specifier|public
name|void
name|setFixedPitch
parameter_list|(
name|boolean
name|isFixedPitchValue
parameter_list|)
block|{
name|isFixedPitch
operator|=
name|isFixedPitchValue
expr_stmt|;
block|}
comment|/** Getter for property charMetrics.      * @return Value of property charMetrics.      */
specifier|public
name|List
argument_list|<
name|CharMetric
argument_list|>
name|getCharMetrics
parameter_list|()
block|{
return|return
name|charMetrics
return|;
block|}
comment|/** Setter for property charMetrics.      * @param charMetricsValue New value of property charMetrics.      */
specifier|public
name|void
name|setCharMetrics
parameter_list|(
name|List
argument_list|<
name|CharMetric
argument_list|>
name|charMetricsValue
parameter_list|)
block|{
name|charMetrics
operator|=
name|charMetricsValue
expr_stmt|;
block|}
comment|/**      * This will add another character metric.      *      * @param metric The character metric to add.      */
specifier|public
name|void
name|addCharMetric
parameter_list|(
name|CharMetric
name|metric
parameter_list|)
block|{
name|charMetrics
operator|.
name|add
argument_list|(
name|metric
argument_list|)
expr_stmt|;
name|charMetricsMap
operator|.
name|put
argument_list|(
name|metric
operator|.
name|getName
argument_list|()
argument_list|,
name|metric
argument_list|)
expr_stmt|;
block|}
comment|/** Getter for property trackKern.      * @return Value of property trackKern.      */
specifier|public
name|List
argument_list|<
name|TrackKern
argument_list|>
name|getTrackKern
parameter_list|()
block|{
return|return
name|trackKern
return|;
block|}
comment|/** Setter for property trackKern.      * @param trackKernValue New value of property trackKern.      */
specifier|public
name|void
name|setTrackKern
parameter_list|(
name|List
argument_list|<
name|TrackKern
argument_list|>
name|trackKernValue
parameter_list|)
block|{
name|trackKern
operator|=
name|trackKernValue
expr_stmt|;
block|}
comment|/**      * This will add another track kern.      *      * @param kern The track kerning data.      */
specifier|public
name|void
name|addTrackKern
parameter_list|(
name|TrackKern
name|kern
parameter_list|)
block|{
name|trackKern
operator|.
name|add
argument_list|(
name|kern
argument_list|)
expr_stmt|;
block|}
comment|/** Getter for property composites.      * @return Value of property composites.      */
specifier|public
name|List
argument_list|<
name|Composite
argument_list|>
name|getComposites
parameter_list|()
block|{
return|return
name|composites
return|;
block|}
comment|/** Setter for property composites.      * @param compositesList New value of property composites.      */
specifier|public
name|void
name|setComposites
parameter_list|(
name|List
argument_list|<
name|Composite
argument_list|>
name|compositesList
parameter_list|)
block|{
name|composites
operator|=
name|compositesList
expr_stmt|;
block|}
comment|/**      * This will add a single composite part to the picture.      *      * @param composite The composite info to add.      */
specifier|public
name|void
name|addComposite
parameter_list|(
name|Composite
name|composite
parameter_list|)
block|{
name|composites
operator|.
name|add
argument_list|(
name|composite
argument_list|)
expr_stmt|;
block|}
comment|/** Getter for property kernPairs.      * @return Value of property kernPairs.      */
specifier|public
name|List
argument_list|<
name|KernPair
argument_list|>
name|getKernPairs
parameter_list|()
block|{
return|return
name|kernPairs
return|;
block|}
comment|/**      * This will add a kern pair.      *      * @param kernPair The kern pair to add.      */
specifier|public
name|void
name|addKernPair
parameter_list|(
name|KernPair
name|kernPair
parameter_list|)
block|{
name|kernPairs
operator|.
name|add
argument_list|(
name|kernPair
argument_list|)
expr_stmt|;
block|}
comment|/** Setter for property kernPairs.      * @param kernPairsList New value of property kernPairs.      */
specifier|public
name|void
name|setKernPairs
parameter_list|(
name|List
argument_list|<
name|KernPair
argument_list|>
name|kernPairsList
parameter_list|)
block|{
name|kernPairs
operator|=
name|kernPairsList
expr_stmt|;
block|}
comment|/** Getter for property kernPairs0.      * @return Value of property kernPairs0.      */
specifier|public
name|List
argument_list|<
name|KernPair
argument_list|>
name|getKernPairs0
parameter_list|()
block|{
return|return
name|kernPairs0
return|;
block|}
comment|/**      * This will add a kern pair.      *      * @param kernPair The kern pair to add.      */
specifier|public
name|void
name|addKernPair0
parameter_list|(
name|KernPair
name|kernPair
parameter_list|)
block|{
name|kernPairs0
operator|.
name|add
argument_list|(
name|kernPair
argument_list|)
expr_stmt|;
block|}
comment|/** Setter for property kernPairs0.      * @param kernPairs0List New value of property kernPairs0.      */
specifier|public
name|void
name|setKernPairs0
parameter_list|(
name|List
argument_list|<
name|KernPair
argument_list|>
name|kernPairs0List
parameter_list|)
block|{
name|kernPairs0
operator|=
name|kernPairs0List
expr_stmt|;
block|}
comment|/** Getter for property kernPairs1.      * @return Value of property kernPairs1.      */
specifier|public
name|List
argument_list|<
name|KernPair
argument_list|>
name|getKernPairs1
parameter_list|()
block|{
return|return
name|kernPairs1
return|;
block|}
comment|/**      * This will add a kern pair.      *      * @param kernPair The kern pair to add.      */
specifier|public
name|void
name|addKernPair1
parameter_list|(
name|KernPair
name|kernPair
parameter_list|)
block|{
name|kernPairs1
operator|.
name|add
argument_list|(
name|kernPair
argument_list|)
expr_stmt|;
block|}
comment|/** Setter for property kernPairs1.      * @param kernPairs1List New value of property kernPairs1.      */
specifier|public
name|void
name|setKernPairs1
parameter_list|(
name|List
argument_list|<
name|KernPair
argument_list|>
name|kernPairs1List
parameter_list|)
block|{
name|kernPairs1
operator|=
name|kernPairs1List
expr_stmt|;
block|}
comment|/** Getter for property standardHorizontalWidth.      * @return Value of property standardHorizontalWidth.      */
specifier|public
name|float
name|getStandardHorizontalWidth
parameter_list|()
block|{
return|return
name|standardHorizontalWidth
return|;
block|}
comment|/** Setter for property standardHorizontalWidth.      * @param standardHorizontalWidthValue New value of property standardHorizontalWidth.      */
specifier|public
name|void
name|setStandardHorizontalWidth
parameter_list|(
name|float
name|standardHorizontalWidthValue
parameter_list|)
block|{
name|standardHorizontalWidth
operator|=
name|standardHorizontalWidthValue
expr_stmt|;
block|}
comment|/** Getter for property standardVerticalWidth.      * @return Value of property standardVerticalWidth.      */
specifier|public
name|float
name|getStandardVerticalWidth
parameter_list|()
block|{
return|return
name|standardVerticalWidth
return|;
block|}
comment|/** Setter for property standardVerticalWidth.      * @param standardVerticalWidthValue New value of property standardVerticalWidth.      */
specifier|public
name|void
name|setStandardVerticalWidth
parameter_list|(
name|float
name|standardVerticalWidthValue
parameter_list|)
block|{
name|standardVerticalWidth
operator|=
name|standardVerticalWidthValue
expr_stmt|;
block|}
block|}
end_class

end_unit

