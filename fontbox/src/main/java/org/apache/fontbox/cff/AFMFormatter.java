begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cff
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|Rectangle2D
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cff
operator|.
name|encoding
operator|.
name|CFFEncoding
import|;
end_import

begin_comment
comment|/**  * This class creates all needed AFM font metric data from a CFFFont ready to be read from a AFMPaser.  *   * @author Villu Ruusmann  *   */
end_comment

begin_class
specifier|public
class|class
name|AFMFormatter
block|{
specifier|private
name|AFMFormatter
parameter_list|()
block|{     }
comment|/**      * Create font metric data for the given CFFFont.      * @param font the CFFFont      * @return the created font metric data      * @throws IOException if an error occurs during reading      */
specifier|public
specifier|static
name|byte
index|[]
name|format
parameter_list|(
name|CFFFont
name|font
parameter_list|)
throws|throws
name|IOException
block|{
name|DataOutput
name|output
init|=
operator|new
name|DataOutput
argument_list|()
decl_stmt|;
name|printFont
argument_list|(
name|font
argument_list|,
name|output
argument_list|)
expr_stmt|;
return|return
name|output
operator|.
name|getBytes
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|void
name|printFont
parameter_list|(
name|CFFFont
name|font
parameter_list|,
name|DataOutput
name|output
parameter_list|)
throws|throws
name|IOException
block|{
name|printFontMetrics
argument_list|(
name|font
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
name|value
operator|=
block|{
literal|"unchecked"
block|}
argument_list|)
specifier|private
specifier|static
name|void
name|printFontMetrics
parameter_list|(
name|CFFFont
name|font
parameter_list|,
name|DataOutput
name|output
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|CharMetric
argument_list|>
name|metrics
init|=
name|renderFont
argument_list|(
name|font
argument_list|)
decl_stmt|;
name|output
operator|.
name|println
argument_list|(
literal|"StartFontMetrics 2.0"
argument_list|)
expr_stmt|;
name|output
operator|.
name|println
argument_list|(
literal|"FontName "
operator|+
name|font
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|output
operator|.
name|println
argument_list|(
literal|"FullName "
operator|+
name|font
operator|.
name|getProperty
argument_list|(
literal|"FullName"
argument_list|)
argument_list|)
expr_stmt|;
name|output
operator|.
name|println
argument_list|(
literal|"FamilyName "
operator|+
name|font
operator|.
name|getProperty
argument_list|(
literal|"FamilyName"
argument_list|)
argument_list|)
expr_stmt|;
name|output
operator|.
name|println
argument_list|(
literal|"Weight "
operator|+
name|font
operator|.
name|getProperty
argument_list|(
literal|"Weight"
argument_list|)
argument_list|)
expr_stmt|;
name|CFFEncoding
name|encoding
init|=
name|font
operator|.
name|getEncoding
argument_list|()
decl_stmt|;
if|if
condition|(
name|encoding
operator|.
name|isFontSpecific
argument_list|()
condition|)
block|{
name|output
operator|.
name|println
argument_list|(
literal|"EncodingScheme FontSpecific"
argument_list|)
expr_stmt|;
block|}
name|Rectangle2D
name|bounds
init|=
name|getBounds
argument_list|(
name|metrics
argument_list|)
decl_stmt|;
name|output
operator|.
name|println
argument_list|(
literal|"FontBBox "
operator|+
operator|(
name|int
operator|)
name|bounds
operator|.
name|getX
argument_list|()
operator|+
literal|" "
operator|+
operator|(
name|int
operator|)
name|bounds
operator|.
name|getY
argument_list|()
operator|+
literal|" "
operator|+
operator|(
name|int
operator|)
name|bounds
operator|.
name|getMaxX
argument_list|()
operator|+
literal|" "
operator|+
operator|(
name|int
operator|)
name|bounds
operator|.
name|getMaxY
argument_list|()
argument_list|)
expr_stmt|;
name|printDirectionMetrics
argument_list|(
name|font
argument_list|,
name|output
argument_list|)
expr_stmt|;
name|printCharMetrics
argument_list|(
name|font
argument_list|,
name|metrics
argument_list|,
name|output
argument_list|)
expr_stmt|;
name|output
operator|.
name|println
argument_list|(
literal|"EndFontMetrics"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|printDirectionMetrics
parameter_list|(
name|CFFFont
name|font
parameter_list|,
name|DataOutput
name|output
parameter_list|)
throws|throws
name|IOException
block|{
name|output
operator|.
name|println
argument_list|(
literal|"UnderlinePosition "
operator|+
name|font
operator|.
name|getProperty
argument_list|(
literal|"UnderlinePosition"
argument_list|)
argument_list|)
expr_stmt|;
name|output
operator|.
name|println
argument_list|(
literal|"UnderlineThickness "
operator|+
name|font
operator|.
name|getProperty
argument_list|(
literal|"UnderlineThickness"
argument_list|)
argument_list|)
expr_stmt|;
name|output
operator|.
name|println
argument_list|(
literal|"ItalicAngle "
operator|+
name|font
operator|.
name|getProperty
argument_list|(
literal|"ItalicAngle"
argument_list|)
argument_list|)
expr_stmt|;
name|output
operator|.
name|println
argument_list|(
literal|"IsFixedPitch "
operator|+
name|font
operator|.
name|getProperty
argument_list|(
literal|"isFixedPitch"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|printCharMetrics
parameter_list|(
name|CFFFont
name|font
parameter_list|,
name|List
argument_list|<
name|CharMetric
argument_list|>
name|metrics
parameter_list|,
name|DataOutput
name|output
parameter_list|)
throws|throws
name|IOException
block|{
name|output
operator|.
name|println
argument_list|(
literal|"StartCharMetrics "
operator|+
name|metrics
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|metrics
argument_list|)
expr_stmt|;
for|for
control|(
name|CharMetric
name|metric
range|:
name|metrics
control|)
block|{
name|output
operator|.
name|print
argument_list|(
literal|"C "
operator|+
name|metric
operator|.
name|code
operator|+
literal|" ;"
argument_list|)
expr_stmt|;
name|output
operator|.
name|print
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|output
operator|.
name|print
argument_list|(
literal|"WX "
operator|+
name|metric
operator|.
name|width
operator|+
literal|" ;"
argument_list|)
expr_stmt|;
name|output
operator|.
name|print
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|output
operator|.
name|print
argument_list|(
literal|"N "
operator|+
name|metric
operator|.
name|name
operator|+
literal|" ;"
argument_list|)
expr_stmt|;
name|output
operator|.
name|print
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|output
operator|.
name|print
argument_list|(
literal|"B "
operator|+
operator|(
name|int
operator|)
name|metric
operator|.
name|bounds
operator|.
name|getX
argument_list|()
operator|+
literal|" "
operator|+
operator|(
name|int
operator|)
name|metric
operator|.
name|bounds
operator|.
name|getY
argument_list|()
operator|+
literal|" "
operator|+
operator|(
name|int
operator|)
name|metric
operator|.
name|bounds
operator|.
name|getMaxX
argument_list|()
operator|+
literal|" "
operator|+
operator|(
name|int
operator|)
name|metric
operator|.
name|bounds
operator|.
name|getMaxY
argument_list|()
operator|+
literal|" ;"
argument_list|)
expr_stmt|;
name|output
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
name|output
operator|.
name|println
argument_list|(
literal|"EndCharMetrics"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|CharMetric
argument_list|>
name|renderFont
parameter_list|(
name|CFFFont
name|font
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|CharMetric
argument_list|>
name|metrics
init|=
operator|new
name|ArrayList
argument_list|<
name|CharMetric
argument_list|>
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|CFFFont
operator|.
name|Mapping
argument_list|>
name|mappings
init|=
name|font
operator|.
name|getMappings
argument_list|()
decl_stmt|;
for|for
control|(
name|CFFFont
operator|.
name|Mapping
name|mapping
range|:
name|mappings
control|)
block|{
name|CharMetric
name|metric
init|=
operator|new
name|CharMetric
argument_list|()
decl_stmt|;
name|metric
operator|.
name|code
operator|=
name|mapping
operator|.
name|getCode
argument_list|()
expr_stmt|;
name|metric
operator|.
name|name
operator|=
name|mapping
operator|.
name|getName
argument_list|()
expr_stmt|;
name|metric
operator|.
name|width
operator|=
name|mapping
operator|.
name|getType1CharString
argument_list|()
operator|.
name|getWidth
argument_list|()
expr_stmt|;
name|metric
operator|.
name|bounds
operator|=
name|mapping
operator|.
name|getType1CharString
argument_list|()
operator|.
name|getBounds
argument_list|()
expr_stmt|;
name|metrics
operator|.
name|add
argument_list|(
name|metric
argument_list|)
expr_stmt|;
block|}
return|return
name|metrics
return|;
block|}
specifier|private
specifier|static
name|Rectangle2D
name|getBounds
parameter_list|(
name|List
argument_list|<
name|CharMetric
argument_list|>
name|metrics
parameter_list|)
block|{
name|Rectangle2D
name|bounds
init|=
literal|null
decl_stmt|;
for|for
control|(
name|CharMetric
name|metric
range|:
name|metrics
control|)
block|{
if|if
condition|(
name|bounds
operator|==
literal|null
condition|)
block|{
name|bounds
operator|=
operator|new
name|Rectangle2D
operator|.
name|Double
argument_list|()
expr_stmt|;
name|bounds
operator|.
name|setFrame
argument_list|(
name|metric
operator|.
name|bounds
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Rectangle2D
operator|.
name|union
argument_list|(
name|bounds
argument_list|,
name|metric
operator|.
name|bounds
argument_list|,
name|bounds
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|bounds
return|;
block|}
comment|/**      * This class represents the metric of one single character.       *      */
specifier|private
specifier|static
class|class
name|CharMetric
implements|implements
name|Comparable
argument_list|<
name|CharMetric
argument_list|>
block|{
specifier|private
name|int
name|code
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|int
name|width
decl_stmt|;
specifier|private
name|Rectangle2D
name|bounds
decl_stmt|;
specifier|public
name|int
name|compareTo
parameter_list|(
name|CharMetric
name|that
parameter_list|)
block|{
return|return
name|code
operator|-
name|that
operator|.
name|code
return|;
block|}
block|}
block|}
end_class

end_unit

