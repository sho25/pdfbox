begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cff
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * This class represents a formatter for CharString commands of a Type1 font.  * @author Villu Ruusmann  * @version $Revision: 1.0 $  */
end_comment

begin_class
specifier|public
class|class
name|Type1CharStringFormatter
block|{
specifier|private
name|ByteArrayOutputStream
name|output
init|=
literal|null
decl_stmt|;
comment|/**      * Formats the given command sequence to a byte array.      * @param sequence the given command sequence      * @return the formatted seuqence as byte array      */
specifier|public
name|byte
index|[]
name|format
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|sequence
parameter_list|)
block|{
name|output
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
for|for
control|(
name|Object
name|object
range|:
name|sequence
control|)
block|{
if|if
condition|(
name|object
operator|instanceof
name|CharStringCommand
condition|)
block|{
name|writeCommand
argument_list|(
operator|(
name|CharStringCommand
operator|)
name|object
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|object
operator|instanceof
name|Integer
condition|)
block|{
name|writeNumber
argument_list|(
operator|(
name|Integer
operator|)
name|object
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
block|}
return|return
name|output
operator|.
name|toByteArray
argument_list|()
return|;
block|}
specifier|private
name|void
name|writeCommand
parameter_list|(
name|CharStringCommand
name|command
parameter_list|)
block|{
name|int
index|[]
name|value
init|=
name|command
operator|.
name|getKey
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|value
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|output
operator|.
name|write
argument_list|(
name|value
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|writeNumber
parameter_list|(
name|Integer
name|number
parameter_list|)
block|{
name|int
name|value
init|=
name|number
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|>=
operator|-
literal|107
operator|&&
name|value
operator|<=
literal|107
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
name|value
operator|+
literal|139
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|>=
literal|108
operator|&&
name|value
operator|<=
literal|1131
condition|)
block|{
name|int
name|b1
init|=
operator|(
name|value
operator|-
literal|108
operator|)
operator|%
literal|256
decl_stmt|;
name|int
name|b0
init|=
operator|(
name|value
operator|-
literal|108
operator|-
name|b1
operator|)
operator|/
literal|256
operator|+
literal|247
decl_stmt|;
name|output
operator|.
name|write
argument_list|(
name|b0
argument_list|)
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
name|b1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|>=
operator|-
literal|1131
operator|&&
name|value
operator|<=
operator|-
literal|108
condition|)
block|{
name|int
name|b1
init|=
operator|-
operator|(
operator|(
name|value
operator|+
literal|108
operator|)
operator|%
literal|256
operator|)
decl_stmt|;
name|int
name|b0
init|=
operator|-
operator|(
operator|(
name|value
operator|+
literal|108
operator|+
name|b1
operator|)
operator|/
literal|256
operator|-
literal|251
operator|)
decl_stmt|;
name|output
operator|.
name|write
argument_list|(
name|b0
argument_list|)
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
name|b1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|b1
init|=
name|value
operator|>>>
literal|24
operator|&
literal|0xff
decl_stmt|;
name|int
name|b2
init|=
name|value
operator|>>>
literal|16
operator|&
literal|0xff
decl_stmt|;
name|int
name|b3
init|=
name|value
operator|>>>
literal|8
operator|&
literal|0xff
decl_stmt|;
name|int
name|b4
init|=
name|value
operator|>>>
literal|0
operator|&
literal|0xff
decl_stmt|;
name|output
operator|.
name|write
argument_list|(
literal|255
argument_list|)
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
name|b1
argument_list|)
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
name|b2
argument_list|)
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
name|b3
argument_list|)
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
name|b4
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

