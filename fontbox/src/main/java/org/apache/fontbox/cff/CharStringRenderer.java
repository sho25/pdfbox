begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cff
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|GeneralPath
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|Point2D
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|Rectangle2D
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * This class represents a renderer for a charstring.  * @author Villu Ruusmann  * @version $Revision: 1.0 $  */
end_comment

begin_class
specifier|public
class|class
name|CharStringRenderer
extends|extends
name|CharStringHandler
block|{
comment|// TODO CharStringRenderer as abstract Class with two inherited classes according to the Charsstring type....
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CharStringRenderer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|isCharstringType1
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|isFirstCommand
init|=
literal|true
decl_stmt|;
specifier|private
name|GeneralPath
name|path
init|=
literal|null
decl_stmt|;
specifier|private
name|Point2D
name|sidebearingPoint
init|=
literal|null
decl_stmt|;
specifier|private
name|Point2D
name|referencePoint
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|width
init|=
literal|0
decl_stmt|;
specifier|private
name|boolean
name|hasNonEndCharOp
init|=
literal|false
decl_stmt|;
comment|/**      * Constructor for the char string renderer.      */
specifier|public
name|CharStringRenderer
parameter_list|()
block|{
name|isCharstringType1
operator|=
literal|true
expr_stmt|;
block|}
comment|/**      * Constructor for the char string renderer with a parameter      * to determine whether the rendered CharString is type 1.      * @param isType1 Determines wheher the charstring is type 1      */
specifier|public
name|CharStringRenderer
parameter_list|(
name|boolean
name|isType1
parameter_list|)
block|{
name|isCharstringType1
operator|=
name|isType1
expr_stmt|;
block|}
comment|/**      * Renders the given sequence and returns the result as a GeneralPath.      * @param sequence the given charstring sequence      * @return the rendered GeneralPath      */
specifier|public
name|GeneralPath
name|render
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|sequence
parameter_list|)
block|{
name|path
operator|=
operator|new
name|GeneralPath
argument_list|()
expr_stmt|;
name|sidebearingPoint
operator|=
operator|new
name|Point2D
operator|.
name|Float
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|referencePoint
operator|=
literal|null
expr_stmt|;
name|setWidth
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|handleSequence
argument_list|(
name|sequence
argument_list|)
expr_stmt|;
return|return
name|path
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|List
argument_list|<
name|Integer
argument_list|>
name|handleCommand
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|numbers
parameter_list|,
name|CharStringCommand
name|command
parameter_list|)
block|{
if|if
condition|(
name|isCharstringType1
condition|)
block|{
name|handleCommandType1
argument_list|(
name|numbers
argument_list|,
name|command
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|handleCommandType2
argument_list|(
name|numbers
argument_list|,
name|command
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      *      * @param numbers      * @param command      */
specifier|private
name|void
name|handleCommandType2
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|numbers
parameter_list|,
name|CharStringCommand
name|command
parameter_list|)
block|{
name|String
name|name
init|=
name|CharStringCommand
operator|.
name|TYPE2_VOCABULARY
operator|.
name|get
argument_list|(
name|command
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hasNonEndCharOp
condition|)
block|{
name|hasNonEndCharOp
operator|=
operator|!
literal|"endchar"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"vmoveto"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
comment|//
block|{
if|if
condition|(
name|path
operator|.
name|getCurrentPoint
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|closePath
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|isFirstCommand
operator|&&
name|numbers
operator|.
name|size
argument_list|()
operator|==
literal|2
condition|)
block|{
name|setWidth
argument_list|(
name|numbers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|rmoveTo
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|,
name|numbers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rmoveTo
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|,
name|numbers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"rlineto"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
comment|//
block|{
if|if
condition|(
name|isFirstCommand
operator|&&
name|numbers
operator|.
name|size
argument_list|()
operator|==
literal|3
condition|)
block|{
name|setWidth
argument_list|(
name|numbers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rrlineTo
argument_list|(
name|numbers
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"hlineto"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
comment|//
block|{
if|if
condition|(
name|isFirstCommand
operator|&&
name|numbers
operator|.
name|size
argument_list|()
operator|==
literal|2
condition|)
block|{
name|setWidth
argument_list|(
name|numbers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|hlineTo
argument_list|(
name|numbers
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"vlineto"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
comment|//
block|{
if|if
condition|(
name|isFirstCommand
operator|&&
name|numbers
operator|.
name|size
argument_list|()
operator|==
literal|2
condition|)
block|{
name|setWidth
argument_list|(
name|numbers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|vlineTo
argument_list|(
name|numbers
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"rrcurveto"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
comment|//
block|{
if|if
condition|(
name|isFirstCommand
operator|&&
name|numbers
operator|.
name|size
argument_list|()
operator|==
literal|7
condition|)
block|{
name|setWidth
argument_list|(
name|numbers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rrCurveTo
argument_list|(
name|numbers
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"rlinecurve"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|rlineCurve
argument_list|(
name|numbers
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"rcurveline"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|rcurveLine
argument_list|(
name|numbers
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"closepath"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|closePath
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"rmoveto"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
comment|//
block|{
if|if
condition|(
name|path
operator|.
name|getCurrentPoint
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|closePath
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|isFirstCommand
operator|&&
name|numbers
operator|.
name|size
argument_list|()
operator|==
literal|3
condition|)
block|{
name|setWidth
argument_list|(
name|numbers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|rmoveTo
argument_list|(
name|numbers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|numbers
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rmoveTo
argument_list|(
name|numbers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|numbers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"hmoveto"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
comment|//
block|{
if|if
condition|(
name|path
operator|.
name|getCurrentPoint
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|closePath
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|isFirstCommand
operator|&&
name|numbers
operator|.
name|size
argument_list|()
operator|==
literal|2
condition|)
block|{
name|setWidth
argument_list|(
name|numbers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|rmoveTo
argument_list|(
name|numbers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rmoveTo
argument_list|(
name|numbers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"vhcurveto"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
if|if
condition|(
name|isFirstCommand
operator|&&
name|numbers
operator|.
name|size
argument_list|()
operator|==
literal|5
condition|)
block|{
name|setWidth
argument_list|(
name|numbers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rvhCurveTo
argument_list|(
name|numbers
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"hvcurveto"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
if|if
condition|(
name|isFirstCommand
operator|&&
name|numbers
operator|.
name|size
argument_list|()
operator|==
literal|5
condition|)
block|{
name|setWidth
argument_list|(
name|numbers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rhvCurveTo
argument_list|(
name|numbers
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"hhcurveto"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|rhhCurveTo
argument_list|(
name|numbers
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"vvcurveto"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|rvvCurveTo
argument_list|(
name|numbers
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"hstem"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
if|if
condition|(
name|numbers
operator|.
name|size
argument_list|()
operator|%
literal|2
operator|==
literal|1
condition|)
block|{
name|setWidth
argument_list|(
name|numbers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"vstem"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
if|if
condition|(
name|numbers
operator|.
name|size
argument_list|()
operator|%
literal|2
operator|==
literal|1
condition|)
block|{
name|setWidth
argument_list|(
name|numbers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"hstemhm"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
if|if
condition|(
name|numbers
operator|.
name|size
argument_list|()
operator|%
literal|2
operator|==
literal|1
condition|)
block|{
name|setWidth
argument_list|(
name|numbers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"vstemhm"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
if|if
condition|(
name|numbers
operator|.
name|size
argument_list|()
operator|%
literal|2
operator|==
literal|1
condition|)
block|{
name|setWidth
argument_list|(
name|numbers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"cntrmask"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
if|if
condition|(
name|numbers
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|setWidth
argument_list|(
name|numbers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"hintmask"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
if|if
condition|(
name|numbers
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|setWidth
argument_list|(
name|numbers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"endchar"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
if|if
condition|(
name|hasNonEndCharOp
condition|)
block|{
name|closePath
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|numbers
operator|.
name|size
argument_list|()
operator|%
literal|2
operator|==
literal|1
condition|)
block|{
name|setWidth
argument_list|(
name|numbers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|numbers
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"endChar: too many numbers left, using the first one, see PDFBOX-1501 for details"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|isFirstCommand
condition|)
block|{
name|isFirstCommand
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|/**      *      * @param numbers      * @param command      */
specifier|private
name|void
name|handleCommandType1
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|numbers
parameter_list|,
name|CharStringCommand
name|command
parameter_list|)
block|{
name|String
name|name
init|=
name|CharStringCommand
operator|.
name|TYPE1_VOCABULARY
operator|.
name|get
argument_list|(
name|command
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"vmoveto"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|rmoveTo
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|,
name|numbers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"rlineto"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|rlineTo
argument_list|(
name|numbers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|numbers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"hlineto"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|rlineTo
argument_list|(
name|numbers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"vlineto"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|rlineTo
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|,
name|numbers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"rrcurveto"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|rrcurveTo
argument_list|(
name|numbers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|numbers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|numbers
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|numbers
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
name|numbers
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|,
name|numbers
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"closepath"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|closePath
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"sbw"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|pointSb
argument_list|(
name|numbers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|numbers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|setWidth
argument_list|(
name|numbers
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"hsbw"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|pointSb
argument_list|(
name|numbers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|setWidth
argument_list|(
name|numbers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"rmoveto"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|rmoveTo
argument_list|(
name|numbers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|numbers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"hmoveto"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|rmoveTo
argument_list|(
name|numbers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"vhcurveto"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|rrcurveTo
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|,
name|numbers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|numbers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|numbers
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|numbers
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"hvcurveto"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|rrcurveTo
argument_list|(
name|numbers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|,
name|numbers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|numbers
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|,
name|numbers
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|rmoveTo
parameter_list|(
name|Number
name|dx
parameter_list|,
name|Number
name|dy
parameter_list|)
block|{
name|Point2D
name|point
init|=
name|referencePoint
decl_stmt|;
if|if
condition|(
name|point
operator|==
literal|null
condition|)
block|{
name|point
operator|=
name|path
operator|.
name|getCurrentPoint
argument_list|()
expr_stmt|;
if|if
condition|(
name|point
operator|==
literal|null
condition|)
block|{
name|point
operator|=
name|sidebearingPoint
expr_stmt|;
block|}
block|}
name|referencePoint
operator|=
literal|null
expr_stmt|;
name|path
operator|.
name|moveTo
argument_list|(
call|(
name|float
call|)
argument_list|(
name|point
operator|.
name|getX
argument_list|()
operator|+
name|dx
operator|.
name|doubleValue
argument_list|()
argument_list|)
argument_list|,
call|(
name|float
call|)
argument_list|(
name|point
operator|.
name|getY
argument_list|()
operator|+
name|dy
operator|.
name|doubleValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|hlineTo
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|numbers
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numbers
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|rlineTo
argument_list|(
name|numbers
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rlineTo
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|,
name|numbers
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|vlineTo
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|numbers
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numbers
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|rlineTo
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|,
name|numbers
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rlineTo
argument_list|(
name|numbers
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|rlineTo
parameter_list|(
name|Number
name|dx
parameter_list|,
name|Number
name|dy
parameter_list|)
block|{
name|Point2D
name|point
init|=
name|path
operator|.
name|getCurrentPoint
argument_list|()
decl_stmt|;
name|path
operator|.
name|lineTo
argument_list|(
call|(
name|float
call|)
argument_list|(
name|point
operator|.
name|getX
argument_list|()
operator|+
name|dx
operator|.
name|doubleValue
argument_list|()
argument_list|)
argument_list|,
call|(
name|float
call|)
argument_list|(
name|point
operator|.
name|getY
argument_list|()
operator|+
name|dy
operator|.
name|doubleValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|rrlineTo
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|numbers
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numbers
operator|.
name|size
argument_list|()
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|rlineTo
argument_list|(
name|numbers
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|numbers
operator|.
name|get
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|rrCurveTo
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|numbers
parameter_list|)
block|{
if|if
condition|(
name|numbers
operator|.
name|size
argument_list|()
operator|>=
literal|6
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numbers
operator|.
name|size
argument_list|()
condition|;
name|i
operator|+=
literal|6
control|)
block|{
name|float
name|x1
init|=
name|numbers
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|float
name|y1
init|=
name|numbers
operator|.
name|get
argument_list|(
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
name|float
name|x2
init|=
name|numbers
operator|.
name|get
argument_list|(
name|i
operator|+
literal|2
argument_list|)
decl_stmt|;
name|float
name|y2
init|=
name|numbers
operator|.
name|get
argument_list|(
name|i
operator|+
literal|3
argument_list|)
decl_stmt|;
name|float
name|x3
init|=
name|numbers
operator|.
name|get
argument_list|(
name|i
operator|+
literal|4
argument_list|)
decl_stmt|;
name|float
name|y3
init|=
name|numbers
operator|.
name|get
argument_list|(
name|i
operator|+
literal|5
argument_list|)
decl_stmt|;
name|rrcurveTo
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|x3
argument_list|,
name|y3
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|rrcurveTo
parameter_list|(
name|Number
name|dx1
parameter_list|,
name|Number
name|dy1
parameter_list|,
name|Number
name|dx2
parameter_list|,
name|Number
name|dy2
parameter_list|,
name|Number
name|dx3
parameter_list|,
name|Number
name|dy3
parameter_list|)
block|{
name|Point2D
name|point
init|=
name|path
operator|.
name|getCurrentPoint
argument_list|()
decl_stmt|;
name|float
name|x1
init|=
operator|(
name|float
operator|)
name|point
operator|.
name|getX
argument_list|()
operator|+
name|dx1
operator|.
name|floatValue
argument_list|()
decl_stmt|;
name|float
name|y1
init|=
operator|(
name|float
operator|)
name|point
operator|.
name|getY
argument_list|()
operator|+
name|dy1
operator|.
name|floatValue
argument_list|()
decl_stmt|;
name|float
name|x2
init|=
name|x1
operator|+
name|dx2
operator|.
name|floatValue
argument_list|()
decl_stmt|;
name|float
name|y2
init|=
name|y1
operator|+
name|dy2
operator|.
name|floatValue
argument_list|()
decl_stmt|;
name|float
name|x3
init|=
name|x2
operator|+
name|dx3
operator|.
name|floatValue
argument_list|()
decl_stmt|;
name|float
name|y3
init|=
name|y2
operator|+
name|dy3
operator|.
name|floatValue
argument_list|()
decl_stmt|;
name|path
operator|.
name|curveTo
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|x3
argument_list|,
name|y3
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|rlineCurve
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|numbers
parameter_list|)
block|{
if|if
condition|(
name|numbers
operator|.
name|size
argument_list|()
operator|>=
literal|6
condition|)
block|{
if|if
condition|(
name|numbers
operator|.
name|size
argument_list|()
operator|-
literal|6
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numbers
operator|.
name|size
argument_list|()
operator|-
literal|6
condition|;
name|i
operator|+=
literal|2
control|)
block|{
if|if
condition|(
name|i
operator|+
literal|1
operator|>=
name|numbers
operator|.
name|size
argument_list|()
condition|)
block|{
break|break;
block|}
name|rlineTo
argument_list|(
name|numbers
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|numbers
operator|.
name|get
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|float
name|x1
init|=
name|numbers
operator|.
name|get
argument_list|(
name|numbers
operator|.
name|size
argument_list|()
operator|-
literal|6
argument_list|)
decl_stmt|;
name|float
name|y1
init|=
name|numbers
operator|.
name|get
argument_list|(
name|numbers
operator|.
name|size
argument_list|()
operator|-
literal|5
argument_list|)
decl_stmt|;
name|float
name|x2
init|=
name|numbers
operator|.
name|get
argument_list|(
name|numbers
operator|.
name|size
argument_list|()
operator|-
literal|4
argument_list|)
decl_stmt|;
name|float
name|y2
init|=
name|numbers
operator|.
name|get
argument_list|(
name|numbers
operator|.
name|size
argument_list|()
operator|-
literal|3
argument_list|)
decl_stmt|;
name|float
name|x3
init|=
name|numbers
operator|.
name|get
argument_list|(
name|numbers
operator|.
name|size
argument_list|()
operator|-
literal|2
argument_list|)
decl_stmt|;
name|float
name|y3
init|=
name|numbers
operator|.
name|get
argument_list|(
name|numbers
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|rrcurveTo
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|x3
argument_list|,
name|y3
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|rcurveLine
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|numbers
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numbers
operator|.
name|size
argument_list|()
condition|;
name|i
operator|+=
literal|6
control|)
block|{
if|if
condition|(
name|numbers
operator|.
name|size
argument_list|()
operator|-
name|i
operator|<
literal|6
condition|)
block|{
break|break;
block|}
name|float
name|x1
init|=
name|numbers
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|float
name|y1
init|=
name|numbers
operator|.
name|get
argument_list|(
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
name|float
name|x2
init|=
name|numbers
operator|.
name|get
argument_list|(
name|i
operator|+
literal|2
argument_list|)
decl_stmt|;
name|float
name|y2
init|=
name|numbers
operator|.
name|get
argument_list|(
name|i
operator|+
literal|3
argument_list|)
decl_stmt|;
name|float
name|x3
init|=
name|numbers
operator|.
name|get
argument_list|(
name|i
operator|+
literal|4
argument_list|)
decl_stmt|;
name|float
name|y3
init|=
name|numbers
operator|.
name|get
argument_list|(
name|i
operator|+
literal|5
argument_list|)
decl_stmt|;
name|rrcurveTo
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|x3
argument_list|,
name|y3
argument_list|)
expr_stmt|;
if|if
condition|(
name|numbers
operator|.
name|size
argument_list|()
operator|-
operator|(
name|i
operator|+
literal|6
operator|)
operator|==
literal|2
condition|)
block|{
name|rlineTo
argument_list|(
name|numbers
operator|.
name|get
argument_list|(
name|i
operator|+
literal|6
argument_list|)
argument_list|,
name|numbers
operator|.
name|get
argument_list|(
name|i
operator|+
literal|7
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|rvhCurveTo
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|numbers
parameter_list|)
block|{
name|boolean
name|smallCase
init|=
name|numbers
operator|.
name|size
argument_list|()
operator|<=
literal|5
decl_stmt|;
name|boolean
name|odd
init|=
name|numbers
operator|.
name|size
argument_list|()
operator|%
literal|2
operator|!=
literal|0
decl_stmt|;
if|if
condition|(
operator|(
operator|!
name|odd
operator|)
condition|?
name|numbers
operator|.
name|size
argument_list|()
operator|%
literal|4
operator|==
literal|0
else|:
operator|(
name|numbers
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
operator|%
literal|4
operator|==
literal|0
condition|)
block|{
name|float
name|lastY
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numbers
operator|.
name|size
argument_list|()
condition|;
name|i
operator|+=
literal|4
control|)
block|{
if|if
condition|(
operator|(
name|numbers
operator|.
name|size
argument_list|()
operator|-
name|i
operator|)
operator|<
literal|4
condition|)
block|{
break|break;
block|}
name|float
name|x1
init|=
operator|(
name|lastY
operator|!=
operator|-
literal|1
operator|)
condition|?
name|numbers
operator|.
name|get
argument_list|(
name|i
argument_list|)
else|:
literal|0
decl_stmt|;
name|float
name|y1
init|=
operator|(
name|lastY
operator|!=
operator|-
literal|1
operator|)
condition|?
literal|0
else|:
name|numbers
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|float
name|x2
init|=
name|numbers
operator|.
name|get
argument_list|(
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
name|float
name|y2
init|=
name|numbers
operator|.
name|get
argument_list|(
name|i
operator|+
literal|2
argument_list|)
decl_stmt|;
name|float
name|x3
init|=
operator|(
name|lastY
operator|!=
operator|-
literal|1
operator|)
condition|?
literal|0
else|:
name|numbers
operator|.
name|get
argument_list|(
name|i
operator|+
literal|3
argument_list|)
decl_stmt|;
name|float
name|y3
init|=
operator|(
name|lastY
operator|!=
operator|-
literal|1
operator|)
condition|?
name|numbers
operator|.
name|get
argument_list|(
name|i
operator|+
literal|3
argument_list|)
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|odd
operator|&&
operator|(
name|numbers
operator|.
name|size
argument_list|()
operator|-
name|i
operator|)
operator|==
literal|5
condition|)
block|{
if|if
condition|(
name|smallCase
condition|)
block|{
name|y3
operator|=
name|numbers
operator|.
name|get
argument_list|(
name|i
operator|+
literal|4
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|x3
operator|=
name|numbers
operator|.
name|get
argument_list|(
name|i
operator|+
literal|4
argument_list|)
expr_stmt|;
block|}
block|}
name|rrcurveTo
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|x3
argument_list|,
name|y3
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastY
operator|==
operator|-
literal|1
condition|)
block|{
name|lastY
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|numbers
operator|.
name|size
argument_list|()
operator|-
operator|(
name|i
operator|+
literal|4
operator|)
operator|>
literal|0
condition|)
block|{
name|rvhCurveTo
argument_list|(
name|numbers
operator|.
name|subList
argument_list|(
name|i
operator|+
literal|4
argument_list|,
name|numbers
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|rhvCurveTo
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|numbers
parameter_list|)
block|{
name|boolean
name|smallCase
init|=
name|numbers
operator|.
name|size
argument_list|()
operator|<=
literal|5
decl_stmt|;
name|boolean
name|odd
init|=
name|numbers
operator|.
name|size
argument_list|()
operator|%
literal|2
operator|!=
literal|0
decl_stmt|;
if|if
condition|(
operator|(
operator|!
name|odd
operator|)
condition|?
name|numbers
operator|.
name|size
argument_list|()
operator|%
literal|4
operator|==
literal|0
else|:
operator|(
name|numbers
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
operator|%
literal|4
operator|==
literal|0
condition|)
block|{
name|float
name|lastX
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numbers
operator|.
name|size
argument_list|()
condition|;
name|i
operator|+=
literal|4
control|)
block|{
if|if
condition|(
operator|(
name|numbers
operator|.
name|size
argument_list|()
operator|-
name|i
operator|)
operator|<
literal|4
condition|)
block|{
break|break;
block|}
name|float
name|x1
init|=
operator|(
name|lastX
operator|!=
operator|-
literal|1
operator|)
condition|?
literal|0
else|:
name|numbers
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|float
name|y1
init|=
operator|(
name|lastX
operator|!=
operator|-
literal|1
operator|)
condition|?
name|numbers
operator|.
name|get
argument_list|(
name|i
argument_list|)
else|:
literal|0
decl_stmt|;
name|float
name|x2
init|=
name|numbers
operator|.
name|get
argument_list|(
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
name|float
name|y2
init|=
name|numbers
operator|.
name|get
argument_list|(
name|i
operator|+
literal|2
argument_list|)
decl_stmt|;
name|float
name|x3
init|=
operator|(
name|lastX
operator|!=
operator|-
literal|1
operator|)
condition|?
name|numbers
operator|.
name|get
argument_list|(
name|i
operator|+
literal|3
argument_list|)
else|:
literal|0
decl_stmt|;
name|float
name|y3
init|=
operator|(
name|lastX
operator|!=
operator|-
literal|1
operator|)
condition|?
literal|0
else|:
name|numbers
operator|.
name|get
argument_list|(
name|i
operator|+
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|odd
operator|&&
operator|(
name|numbers
operator|.
name|size
argument_list|()
operator|-
name|i
operator|)
operator|==
literal|5
condition|)
block|{
if|if
condition|(
name|smallCase
condition|)
block|{
name|x3
operator|=
name|numbers
operator|.
name|get
argument_list|(
name|i
operator|+
literal|4
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|y3
operator|=
name|numbers
operator|.
name|get
argument_list|(
name|i
operator|+
literal|4
argument_list|)
expr_stmt|;
block|}
block|}
name|rrcurveTo
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|x3
argument_list|,
name|y3
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastX
operator|==
operator|-
literal|1
condition|)
block|{
name|lastX
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|numbers
operator|.
name|size
argument_list|()
operator|-
operator|(
name|i
operator|+
literal|4
operator|)
operator|>
literal|0
condition|)
block|{
name|rhvCurveTo
argument_list|(
name|numbers
operator|.
name|subList
argument_list|(
name|i
operator|+
literal|4
argument_list|,
name|numbers
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|rhhCurveTo
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|numbers
parameter_list|)
block|{
name|boolean
name|odd
init|=
name|numbers
operator|.
name|size
argument_list|()
operator|%
literal|2
operator|!=
literal|0
decl_stmt|;
if|if
condition|(
operator|(
operator|!
name|odd
operator|)
condition|?
name|numbers
operator|.
name|size
argument_list|()
operator|%
literal|4
operator|==
literal|0
else|:
operator|(
name|numbers
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
operator|%
literal|4
operator|==
literal|0
condition|)
block|{
name|float
name|lastY
init|=
operator|-
literal|1
decl_stmt|;
name|boolean
name|bHandled
init|=
literal|false
decl_stmt|;
name|int
name|increment
init|=
operator|(
name|odd
operator|)
condition|?
literal|1
else|:
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numbers
operator|.
name|size
argument_list|()
condition|;
name|i
operator|+=
literal|4
control|)
block|{
if|if
condition|(
operator|(
name|numbers
operator|.
name|size
argument_list|()
operator|-
name|i
operator|)
operator|<
literal|4
condition|)
block|{
break|break;
block|}
name|float
name|x1
init|=
operator|(
name|odd
operator|&&
operator|!
name|bHandled
operator|)
condition|?
name|numbers
operator|.
name|get
argument_list|(
name|i
operator|+
name|increment
argument_list|)
else|:
name|numbers
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|float
name|y1
init|=
operator|(
name|lastY
operator|!=
operator|-
literal|1
operator|)
condition|?
name|lastY
else|:
operator|(
name|odd
operator|&&
operator|!
name|bHandled
operator|)
condition|?
name|numbers
operator|.
name|get
argument_list|(
name|i
argument_list|)
else|:
literal|0
decl_stmt|;
name|float
name|x2
init|=
name|numbers
operator|.
name|get
argument_list|(
name|i
operator|+
literal|1
operator|+
name|increment
argument_list|)
decl_stmt|;
name|float
name|y2
init|=
name|numbers
operator|.
name|get
argument_list|(
name|i
operator|+
literal|2
operator|+
name|increment
argument_list|)
decl_stmt|;
name|float
name|x3
init|=
name|numbers
operator|.
name|get
argument_list|(
name|i
operator|+
literal|3
operator|+
name|increment
argument_list|)
decl_stmt|;
name|float
name|y3
init|=
literal|0
decl_stmt|;
name|rrcurveTo
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|x3
argument_list|,
name|y3
argument_list|)
expr_stmt|;
name|lastY
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|odd
operator|&&
operator|!
name|bHandled
condition|)
block|{
name|i
operator|++
expr_stmt|;
name|bHandled
operator|=
literal|true
expr_stmt|;
block|}
name|increment
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|rvvCurveTo
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|numbers
parameter_list|)
block|{
name|boolean
name|odd
init|=
name|numbers
operator|.
name|size
argument_list|()
operator|%
literal|2
operator|!=
literal|0
decl_stmt|;
if|if
condition|(
operator|(
operator|!
name|odd
operator|)
condition|?
name|numbers
operator|.
name|size
argument_list|()
operator|%
literal|4
operator|==
literal|0
else|:
operator|(
name|numbers
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
operator|%
literal|4
operator|==
literal|0
condition|)
block|{
name|boolean
name|bHandled
init|=
literal|false
decl_stmt|;
name|int
name|increment
init|=
operator|(
name|odd
operator|)
condition|?
literal|1
else|:
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numbers
operator|.
name|size
argument_list|()
condition|;
name|i
operator|+=
literal|4
control|)
block|{
if|if
condition|(
operator|(
name|numbers
operator|.
name|size
argument_list|()
operator|-
name|i
operator|)
operator|<
literal|4
condition|)
block|{
break|break;
block|}
name|float
name|x1
init|=
operator|(
name|odd
operator|&&
operator|!
name|bHandled
operator|)
condition|?
name|numbers
operator|.
name|get
argument_list|(
name|i
argument_list|)
else|:
literal|0
decl_stmt|;
name|float
name|y1
init|=
name|numbers
operator|.
name|get
argument_list|(
name|i
operator|+
name|increment
argument_list|)
decl_stmt|;
name|float
name|x2
init|=
name|numbers
operator|.
name|get
argument_list|(
name|i
operator|+
literal|1
operator|+
name|increment
argument_list|)
decl_stmt|;
name|float
name|y2
init|=
name|numbers
operator|.
name|get
argument_list|(
name|i
operator|+
literal|2
operator|+
name|increment
argument_list|)
decl_stmt|;
name|float
name|x3
init|=
literal|0
decl_stmt|;
name|float
name|y3
init|=
name|numbers
operator|.
name|get
argument_list|(
name|i
operator|+
literal|3
operator|+
name|increment
argument_list|)
decl_stmt|;
name|rrcurveTo
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|x3
argument_list|,
name|y3
argument_list|)
expr_stmt|;
if|if
condition|(
name|odd
operator|&&
operator|!
name|bHandled
condition|)
block|{
name|i
operator|++
expr_stmt|;
name|bHandled
operator|=
literal|true
expr_stmt|;
block|}
name|increment
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|closePath
parameter_list|()
block|{
name|referencePoint
operator|=
name|path
operator|.
name|getCurrentPoint
argument_list|()
expr_stmt|;
name|path
operator|.
name|closePath
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|pointSb
parameter_list|(
name|Number
name|x
parameter_list|,
name|Number
name|y
parameter_list|)
block|{
name|sidebearingPoint
operator|=
operator|new
name|Point2D
operator|.
name|Float
argument_list|(
name|x
operator|.
name|floatValue
argument_list|()
argument_list|,
name|y
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the bounds of the renderer path.      * @return the bounds as Rectangle2D      */
specifier|public
name|Rectangle2D
name|getBounds
parameter_list|()
block|{
return|return
name|path
operator|.
name|getBounds2D
argument_list|()
return|;
block|}
comment|/**       * Returns the width of the current command.       * @return the width       */
specifier|public
name|int
name|getWidth
parameter_list|()
block|{
return|return
name|width
return|;
block|}
specifier|private
name|void
name|setWidth
parameter_list|(
name|int
name|aWidth
parameter_list|)
block|{
name|this
operator|.
name|width
operator|=
name|aWidth
expr_stmt|;
block|}
block|}
end_class

end_unit

