begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cff
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|GeneralPath
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|Point2D
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|Rectangle2D
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * This class represents a renderer for a charstring.  * @author Villu Ruusmann  * @version $Revision: 1.0 $  */
end_comment

begin_class
specifier|public
class|class
name|CharStringRenderer
extends|extends
name|CharStringHandler
block|{
specifier|private
name|GeneralPath
name|path
init|=
literal|null
decl_stmt|;
specifier|private
name|Point2D
name|sidebearingPoint
init|=
literal|null
decl_stmt|;
specifier|private
name|Point2D
name|referencePoint
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|width
init|=
literal|0
decl_stmt|;
comment|/**      * Renders the given sequence and returns the result as a GeneralPath.      * @param sequence the given charstring sequence      * @return the rendered GeneralPath       */
specifier|public
name|GeneralPath
name|render
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|sequence
parameter_list|)
block|{
name|path
operator|=
operator|new
name|GeneralPath
argument_list|()
expr_stmt|;
name|sidebearingPoint
operator|=
operator|new
name|Point2D
operator|.
name|Float
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|referencePoint
operator|=
literal|null
expr_stmt|;
name|setWidth
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|handleSequence
argument_list|(
name|sequence
argument_list|)
expr_stmt|;
return|return
name|path
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|void
name|handleCommand
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|numbers
parameter_list|,
name|CharStringCommand
name|command
parameter_list|)
block|{
name|String
name|name
init|=
name|CharStringCommand
operator|.
name|TYPE1_VOCABULARY
operator|.
name|get
argument_list|(
name|command
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"vmoveto"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|rmoveTo
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|,
name|numbers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"rlineto"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|rlineTo
argument_list|(
name|numbers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|numbers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"hlineto"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|rlineTo
argument_list|(
name|numbers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"vlineto"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|rlineTo
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|,
name|numbers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"rrcurveto"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|rrcurveTo
argument_list|(
name|numbers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|numbers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|numbers
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|numbers
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
name|numbers
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|,
name|numbers
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"closepath"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|closePath
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"sbw"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|pointSb
argument_list|(
name|numbers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|numbers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|setWidth
argument_list|(
name|numbers
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"hsbw"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|pointSb
argument_list|(
name|numbers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|setWidth
argument_list|(
name|numbers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"rmoveto"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|rmoveTo
argument_list|(
name|numbers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|numbers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"hmoveto"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|rmoveTo
argument_list|(
name|numbers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"vhcurveto"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|rrcurveTo
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|,
name|numbers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|numbers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|numbers
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|numbers
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"hvcurveto"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|rrcurveTo
argument_list|(
name|numbers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|,
name|numbers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|numbers
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|,
name|numbers
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|rmoveTo
parameter_list|(
name|Number
name|dx
parameter_list|,
name|Number
name|dy
parameter_list|)
block|{
name|Point2D
name|point
init|=
name|referencePoint
decl_stmt|;
if|if
condition|(
name|point
operator|==
literal|null
condition|)
block|{
name|point
operator|=
name|sidebearingPoint
expr_stmt|;
block|}
name|referencePoint
operator|=
literal|null
expr_stmt|;
name|path
operator|.
name|moveTo
argument_list|(
call|(
name|float
call|)
argument_list|(
name|point
operator|.
name|getX
argument_list|()
operator|+
name|dx
operator|.
name|doubleValue
argument_list|()
argument_list|)
argument_list|,
call|(
name|float
call|)
argument_list|(
name|point
operator|.
name|getY
argument_list|()
operator|+
name|dy
operator|.
name|doubleValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|rlineTo
parameter_list|(
name|Number
name|dx
parameter_list|,
name|Number
name|dy
parameter_list|)
block|{
name|Point2D
name|point
init|=
name|path
operator|.
name|getCurrentPoint
argument_list|()
decl_stmt|;
name|path
operator|.
name|lineTo
argument_list|(
call|(
name|float
call|)
argument_list|(
name|point
operator|.
name|getX
argument_list|()
operator|+
name|dx
operator|.
name|doubleValue
argument_list|()
argument_list|)
argument_list|,
call|(
name|float
call|)
argument_list|(
name|point
operator|.
name|getY
argument_list|()
operator|+
name|dy
operator|.
name|doubleValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|rrcurveTo
parameter_list|(
name|Number
name|dx1
parameter_list|,
name|Number
name|dy1
parameter_list|,
name|Number
name|dx2
parameter_list|,
name|Number
name|dy2
parameter_list|,
name|Number
name|dx3
parameter_list|,
name|Number
name|dy3
parameter_list|)
block|{
name|Point2D
name|point
init|=
name|path
operator|.
name|getCurrentPoint
argument_list|()
decl_stmt|;
name|float
name|x1
init|=
operator|(
name|float
operator|)
name|point
operator|.
name|getX
argument_list|()
operator|+
name|dx1
operator|.
name|floatValue
argument_list|()
decl_stmt|;
name|float
name|y1
init|=
operator|(
name|float
operator|)
name|point
operator|.
name|getY
argument_list|()
operator|+
name|dy1
operator|.
name|floatValue
argument_list|()
decl_stmt|;
name|float
name|x2
init|=
name|x1
operator|+
name|dx2
operator|.
name|floatValue
argument_list|()
decl_stmt|;
name|float
name|y2
init|=
name|y1
operator|+
name|dy2
operator|.
name|floatValue
argument_list|()
decl_stmt|;
name|float
name|x3
init|=
name|x2
operator|+
name|dx3
operator|.
name|floatValue
argument_list|()
decl_stmt|;
name|float
name|y3
init|=
name|y2
operator|+
name|dy3
operator|.
name|floatValue
argument_list|()
decl_stmt|;
name|path
operator|.
name|curveTo
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|x3
argument_list|,
name|y3
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|closePath
parameter_list|()
block|{
name|referencePoint
operator|=
name|path
operator|.
name|getCurrentPoint
argument_list|()
expr_stmt|;
name|path
operator|.
name|closePath
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|pointSb
parameter_list|(
name|Number
name|x
parameter_list|,
name|Number
name|y
parameter_list|)
block|{
name|sidebearingPoint
operator|=
operator|new
name|Point2D
operator|.
name|Float
argument_list|(
name|x
operator|.
name|floatValue
argument_list|()
argument_list|,
name|y
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the bounds of the renderer path.      * @return the bounds as Rectangle2D      */
specifier|public
name|Rectangle2D
name|getBounds
parameter_list|()
block|{
return|return
name|path
operator|.
name|getBounds2D
argument_list|()
return|;
block|}
comment|/**      * Returns the width of the current command.      * @return the width      */
specifier|public
name|int
name|getWidth
parameter_list|()
block|{
return|return
name|width
return|;
block|}
specifier|private
name|void
name|setWidth
parameter_list|(
name|int
name|width
parameter_list|)
block|{
name|this
operator|.
name|width
operator|=
name|width
expr_stmt|;
block|}
block|}
end_class

end_unit

