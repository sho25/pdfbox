begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cff
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * This class represents a CFF operator.  * @author Villu Ruusmann  * @version $Revision: 1.0 $  */
end_comment

begin_class
specifier|public
class|class
name|CFFOperator
block|{
specifier|private
name|Key
name|operatorKey
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|operatorName
init|=
literal|null
decl_stmt|;
specifier|private
name|CFFOperator
parameter_list|(
name|Key
name|key
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|setKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**      * The key of the operator.      * @return the key      */
specifier|public
name|Key
name|getKey
parameter_list|()
block|{
return|return
name|operatorKey
return|;
block|}
specifier|private
name|void
name|setKey
parameter_list|(
name|Key
name|key
parameter_list|)
block|{
name|operatorKey
operator|=
name|key
expr_stmt|;
block|}
comment|/**      * The name of the operator.      * @return the name      */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|operatorName
return|;
block|}
specifier|private
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|operatorName
operator|=
name|name
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getName
argument_list|()
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getKey
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|instanceof
name|CFFOperator
condition|)
block|{
name|CFFOperator
name|that
init|=
operator|(
name|CFFOperator
operator|)
name|object
decl_stmt|;
return|return
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|that
operator|.
name|getKey
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|void
name|register
parameter_list|(
name|Key
name|key
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|CFFOperator
name|operator
init|=
operator|new
name|CFFOperator
argument_list|(
name|key
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|keyMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|operator
argument_list|)
expr_stmt|;
name|nameMap
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|operator
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the operator corresponding to the given key.      * @param key the given key      * @return the corresponding operator      */
specifier|public
specifier|static
name|CFFOperator
name|getOperator
parameter_list|(
name|Key
name|key
parameter_list|)
block|{
return|return
name|keyMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/**      * Returns the operator corresponding to the given name.      * @param key the given name      * @return the corresponding operator      */
specifier|public
specifier|static
name|CFFOperator
name|getOperator
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|nameMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**      * This class is a holder for a key value. It consists of one or two bytes.        * @author Villu Ruusmann      */
specifier|public
specifier|static
class|class
name|Key
block|{
specifier|private
name|int
index|[]
name|value
init|=
literal|null
decl_stmt|;
comment|/**          * Constructor.          * @param b0 the one byte value          */
specifier|public
name|Key
parameter_list|(
name|int
name|b0
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|int
index|[]
block|{
name|b0
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**          * Constructor.          * @param b0 the first byte of a two byte value          * @param b1 the second byte of a two byte value          */
specifier|public
name|Key
parameter_list|(
name|int
name|b0
parameter_list|,
name|int
name|b1
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|int
index|[]
block|{
name|b0
block|,
name|b1
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Key
parameter_list|(
name|int
index|[]
name|value
parameter_list|)
block|{
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**          * Returns the value of the key.          * @return the value          */
specifier|public
name|int
index|[]
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
specifier|private
name|void
name|setValue
parameter_list|(
name|int
index|[]
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
comment|/**          * {@inheritDoc}          */
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|toString
argument_list|(
name|getValue
argument_list|()
argument_list|)
return|;
block|}
comment|/**          * {@inheritDoc}          */
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|hashCode
argument_list|(
name|getValue
argument_list|()
argument_list|)
return|;
block|}
comment|/**          * {@inheritDoc}          */
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|instanceof
name|Key
condition|)
block|{
name|Key
name|that
init|=
operator|(
name|Key
operator|)
name|object
decl_stmt|;
return|return
name|Arrays
operator|.
name|equals
argument_list|(
name|getValue
argument_list|()
argument_list|,
name|that
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
specifier|private
specifier|static
name|Map
argument_list|<
name|CFFOperator
operator|.
name|Key
argument_list|,
name|CFFOperator
argument_list|>
name|keyMap
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|CFFOperator
operator|.
name|Key
argument_list|,
name|CFFOperator
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|CFFOperator
argument_list|>
name|nameMap
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|CFFOperator
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
comment|// Top DICT
name|register
argument_list|(
operator|new
name|Key
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"version"
argument_list|)
expr_stmt|;
name|register
argument_list|(
operator|new
name|Key
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"Notice"
argument_list|)
expr_stmt|;
name|register
argument_list|(
operator|new
name|Key
argument_list|(
literal|12
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|"Copyright"
argument_list|)
expr_stmt|;
name|register
argument_list|(
operator|new
name|Key
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|"FullName"
argument_list|)
expr_stmt|;
name|register
argument_list|(
operator|new
name|Key
argument_list|(
literal|3
argument_list|)
argument_list|,
literal|"FamilyName"
argument_list|)
expr_stmt|;
name|register
argument_list|(
operator|new
name|Key
argument_list|(
literal|4
argument_list|)
argument_list|,
literal|"Weight"
argument_list|)
expr_stmt|;
name|register
argument_list|(
operator|new
name|Key
argument_list|(
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"isFixedPitch"
argument_list|)
expr_stmt|;
name|register
argument_list|(
operator|new
name|Key
argument_list|(
literal|12
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|"ItalicAngle"
argument_list|)
expr_stmt|;
name|register
argument_list|(
operator|new
name|Key
argument_list|(
literal|12
argument_list|,
literal|3
argument_list|)
argument_list|,
literal|"UnderlinePosition"
argument_list|)
expr_stmt|;
name|register
argument_list|(
operator|new
name|Key
argument_list|(
literal|12
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|"UnderlineThickness"
argument_list|)
expr_stmt|;
name|register
argument_list|(
operator|new
name|Key
argument_list|(
literal|12
argument_list|,
literal|5
argument_list|)
argument_list|,
literal|"PaintType"
argument_list|)
expr_stmt|;
name|register
argument_list|(
operator|new
name|Key
argument_list|(
literal|12
argument_list|,
literal|6
argument_list|)
argument_list|,
literal|"CharstringType"
argument_list|)
expr_stmt|;
name|register
argument_list|(
operator|new
name|Key
argument_list|(
literal|12
argument_list|,
literal|7
argument_list|)
argument_list|,
literal|"FontMatrix"
argument_list|)
expr_stmt|;
name|register
argument_list|(
operator|new
name|Key
argument_list|(
literal|13
argument_list|)
argument_list|,
literal|"UniqueID"
argument_list|)
expr_stmt|;
name|register
argument_list|(
operator|new
name|Key
argument_list|(
literal|5
argument_list|)
argument_list|,
literal|"FontBBox"
argument_list|)
expr_stmt|;
name|register
argument_list|(
operator|new
name|Key
argument_list|(
literal|12
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|"StrokeWidth"
argument_list|)
expr_stmt|;
name|register
argument_list|(
operator|new
name|Key
argument_list|(
literal|14
argument_list|)
argument_list|,
literal|"XUID"
argument_list|)
expr_stmt|;
name|register
argument_list|(
operator|new
name|Key
argument_list|(
literal|15
argument_list|)
argument_list|,
literal|"charset"
argument_list|)
expr_stmt|;
name|register
argument_list|(
operator|new
name|Key
argument_list|(
literal|16
argument_list|)
argument_list|,
literal|"Encoding"
argument_list|)
expr_stmt|;
name|register
argument_list|(
operator|new
name|Key
argument_list|(
literal|17
argument_list|)
argument_list|,
literal|"CharStrings"
argument_list|)
expr_stmt|;
name|register
argument_list|(
operator|new
name|Key
argument_list|(
literal|18
argument_list|)
argument_list|,
literal|"Private"
argument_list|)
expr_stmt|;
name|register
argument_list|(
operator|new
name|Key
argument_list|(
literal|12
argument_list|,
literal|20
argument_list|)
argument_list|,
literal|"SyntheticBase"
argument_list|)
expr_stmt|;
name|register
argument_list|(
operator|new
name|Key
argument_list|(
literal|12
argument_list|,
literal|21
argument_list|)
argument_list|,
literal|"PostScript"
argument_list|)
expr_stmt|;
name|register
argument_list|(
operator|new
name|Key
argument_list|(
literal|12
argument_list|,
literal|22
argument_list|)
argument_list|,
literal|"BaseFontName"
argument_list|)
expr_stmt|;
name|register
argument_list|(
operator|new
name|Key
argument_list|(
literal|12
argument_list|,
literal|23
argument_list|)
argument_list|,
literal|"BaseFontBlend"
argument_list|)
expr_stmt|;
name|register
argument_list|(
operator|new
name|Key
argument_list|(
literal|12
argument_list|,
literal|30
argument_list|)
argument_list|,
literal|"ROS"
argument_list|)
expr_stmt|;
name|register
argument_list|(
operator|new
name|Key
argument_list|(
literal|12
argument_list|,
literal|31
argument_list|)
argument_list|,
literal|"CIDFontVersion"
argument_list|)
expr_stmt|;
name|register
argument_list|(
operator|new
name|Key
argument_list|(
literal|12
argument_list|,
literal|32
argument_list|)
argument_list|,
literal|"CIDFontRevision"
argument_list|)
expr_stmt|;
name|register
argument_list|(
operator|new
name|Key
argument_list|(
literal|12
argument_list|,
literal|33
argument_list|)
argument_list|,
literal|"CIDFontType"
argument_list|)
expr_stmt|;
name|register
argument_list|(
operator|new
name|Key
argument_list|(
literal|12
argument_list|,
literal|34
argument_list|)
argument_list|,
literal|"CIDCount"
argument_list|)
expr_stmt|;
name|register
argument_list|(
operator|new
name|Key
argument_list|(
literal|12
argument_list|,
literal|35
argument_list|)
argument_list|,
literal|"UIDBase"
argument_list|)
expr_stmt|;
name|register
argument_list|(
operator|new
name|Key
argument_list|(
literal|12
argument_list|,
literal|36
argument_list|)
argument_list|,
literal|"FDArray"
argument_list|)
expr_stmt|;
name|register
argument_list|(
operator|new
name|Key
argument_list|(
literal|12
argument_list|,
literal|37
argument_list|)
argument_list|,
literal|"FDSelect"
argument_list|)
expr_stmt|;
name|register
argument_list|(
operator|new
name|Key
argument_list|(
literal|12
argument_list|,
literal|38
argument_list|)
argument_list|,
literal|"FontName"
argument_list|)
expr_stmt|;
comment|// Private DICT
name|register
argument_list|(
operator|new
name|Key
argument_list|(
literal|6
argument_list|)
argument_list|,
literal|"BlueValues"
argument_list|)
expr_stmt|;
name|register
argument_list|(
operator|new
name|Key
argument_list|(
literal|7
argument_list|)
argument_list|,
literal|"OtherBlues"
argument_list|)
expr_stmt|;
name|register
argument_list|(
operator|new
name|Key
argument_list|(
literal|8
argument_list|)
argument_list|,
literal|"FamilyBlues"
argument_list|)
expr_stmt|;
name|register
argument_list|(
operator|new
name|Key
argument_list|(
literal|9
argument_list|)
argument_list|,
literal|"FamilyOtherBlues"
argument_list|)
expr_stmt|;
name|register
argument_list|(
operator|new
name|Key
argument_list|(
literal|12
argument_list|,
literal|9
argument_list|)
argument_list|,
literal|"BlueScale"
argument_list|)
expr_stmt|;
name|register
argument_list|(
operator|new
name|Key
argument_list|(
literal|12
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|"BlueShift"
argument_list|)
expr_stmt|;
name|register
argument_list|(
operator|new
name|Key
argument_list|(
literal|12
argument_list|,
literal|11
argument_list|)
argument_list|,
literal|"BlueFuzz"
argument_list|)
expr_stmt|;
name|register
argument_list|(
operator|new
name|Key
argument_list|(
literal|10
argument_list|)
argument_list|,
literal|"StdHW"
argument_list|)
expr_stmt|;
name|register
argument_list|(
operator|new
name|Key
argument_list|(
literal|11
argument_list|)
argument_list|,
literal|"StdVW"
argument_list|)
expr_stmt|;
name|register
argument_list|(
operator|new
name|Key
argument_list|(
literal|12
argument_list|,
literal|12
argument_list|)
argument_list|,
literal|"StemSnapH"
argument_list|)
expr_stmt|;
name|register
argument_list|(
operator|new
name|Key
argument_list|(
literal|12
argument_list|,
literal|13
argument_list|)
argument_list|,
literal|"StemSnapV"
argument_list|)
expr_stmt|;
name|register
argument_list|(
operator|new
name|Key
argument_list|(
literal|12
argument_list|,
literal|14
argument_list|)
argument_list|,
literal|"ForceBold"
argument_list|)
expr_stmt|;
name|register
argument_list|(
operator|new
name|Key
argument_list|(
literal|12
argument_list|,
literal|15
argument_list|)
argument_list|,
literal|"LanguageGroup"
argument_list|)
expr_stmt|;
name|register
argument_list|(
operator|new
name|Key
argument_list|(
literal|12
argument_list|,
literal|16
argument_list|)
argument_list|,
literal|"ExpansionFactor"
argument_list|)
expr_stmt|;
name|register
argument_list|(
operator|new
name|Key
argument_list|(
literal|12
argument_list|,
literal|17
argument_list|)
argument_list|,
literal|"initialRandomSeed"
argument_list|)
expr_stmt|;
name|register
argument_list|(
operator|new
name|Key
argument_list|(
literal|19
argument_list|)
argument_list|,
literal|"Subrs"
argument_list|)
expr_stmt|;
name|register
argument_list|(
operator|new
name|Key
argument_list|(
literal|20
argument_list|)
argument_list|,
literal|"defaultWidthX"
argument_list|)
expr_stmt|;
name|register
argument_list|(
operator|new
name|Key
argument_list|(
literal|21
argument_list|)
argument_list|,
literal|"nominalWidthX"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

