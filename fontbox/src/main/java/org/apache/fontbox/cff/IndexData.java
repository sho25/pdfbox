begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cff
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  * Class holding the IndexData of a CFF font.   */
end_comment

begin_class
specifier|public
class|class
name|IndexData
block|{
specifier|private
specifier|final
name|int
name|count
decl_stmt|;
specifier|private
specifier|final
name|int
index|[]
name|offset
decl_stmt|;
specifier|private
name|int
index|[]
name|data
decl_stmt|;
comment|/**      * Constructor.      *       * @param count number of index values      */
specifier|public
name|IndexData
parameter_list|(
name|int
name|count
parameter_list|)
block|{
name|this
operator|.
name|count
operator|=
name|count
expr_stmt|;
name|this
operator|.
name|offset
operator|=
operator|new
name|int
index|[
name|count
operator|+
literal|1
index|]
expr_stmt|;
block|}
specifier|public
name|byte
index|[]
name|getBytes
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|int
name|length
init|=
name|offset
index|[
name|index
operator|+
literal|1
index|]
operator|-
name|offset
index|[
name|index
index|]
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|bytes
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|data
index|[
name|offset
index|[
name|index
index|]
operator|-
literal|1
operator|+
name|i
index|]
expr_stmt|;
block|}
return|return
name|bytes
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"[count="
operator|+
name|count
operator|+
literal|", offset="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|offset
argument_list|)
operator|+
literal|", data="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|data
argument_list|)
operator|+
literal|"]"
return|;
block|}
comment|/**      * Returns the count value.      * @return the count value      */
specifier|public
name|int
name|getCount
parameter_list|()
block|{
return|return
name|count
return|;
block|}
comment|/**      * Sets the offset value to the given value.      * @param index the index of the offset value      * @param value the given offset value      */
specifier|public
name|void
name|setOffset
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|value
parameter_list|)
block|{
name|offset
index|[
name|index
index|]
operator|=
name|value
expr_stmt|;
block|}
comment|/**      * Returns the offset at the given index.      * @param index the index      * @return the offset value at the given index      */
specifier|public
name|int
name|getOffset
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|offset
index|[
name|index
index|]
return|;
block|}
comment|/**      * Initializes the data array with the given size.      * @param dataSize the size of the data array      */
specifier|public
name|void
name|initData
parameter_list|(
name|int
name|dataSize
parameter_list|)
block|{
name|data
operator|=
operator|new
name|int
index|[
name|dataSize
index|]
expr_stmt|;
block|}
comment|/**      * Sets the data value to the given value.      * @param index the index of the data value      * @param value the given data value      */
specifier|public
name|void
name|setData
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|value
parameter_list|)
block|{
name|data
index|[
name|index
index|]
operator|=
name|value
expr_stmt|;
block|}
block|}
end_class

end_unit

