begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cff
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormatSymbols
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_comment
comment|/**  * This class represents a formatter for a given Type1 font.    * @author Villu Ruusmann  * @version $Revision: 1.0 $  */
end_comment

begin_class
specifier|public
class|class
name|Type1FontFormatter
block|{
specifier|private
name|Type1FontFormatter
parameter_list|()
block|{     }
comment|/**      * Read and convert a given CFFFont.      * @param font the given CFFFont      * @return the Type1 font      * @throws IOException if an error occurs during reading the given font      */
specifier|public
specifier|static
name|byte
index|[]
name|format
parameter_list|(
name|CFFFont
name|font
parameter_list|)
throws|throws
name|IOException
block|{
name|DataOutput
name|output
init|=
operator|new
name|DataOutput
argument_list|()
decl_stmt|;
name|printFont
argument_list|(
name|font
argument_list|,
name|output
argument_list|)
expr_stmt|;
return|return
name|output
operator|.
name|getBytes
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|void
name|printFont
parameter_list|(
name|CFFFont
name|font
parameter_list|,
name|DataOutput
name|output
parameter_list|)
throws|throws
name|IOException
block|{
name|output
operator|.
name|println
argument_list|(
literal|"%!FontType1-1.0 "
operator|+
name|font
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|font
operator|.
name|getProperty
argument_list|(
literal|"version"
argument_list|)
argument_list|)
expr_stmt|;
name|printFontDictionary
argument_list|(
name|font
argument_list|,
name|output
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|8
condition|;
name|i
operator|++
control|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|64
condition|;
name|j
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
block|}
name|output
operator|.
name|println
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|output
operator|.
name|println
argument_list|(
literal|"cleartomark"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|printFontDictionary
parameter_list|(
name|CFFFont
name|font
parameter_list|,
name|DataOutput
name|output
parameter_list|)
throws|throws
name|IOException
block|{
name|output
operator|.
name|println
argument_list|(
literal|"10 dict begin"
argument_list|)
expr_stmt|;
name|output
operator|.
name|println
argument_list|(
literal|"/FontInfo 10 dict dup begin"
argument_list|)
expr_stmt|;
name|output
operator|.
name|println
argument_list|(
literal|"/version ("
operator|+
name|font
operator|.
name|getProperty
argument_list|(
literal|"version"
argument_list|)
operator|+
literal|") readonly def"
argument_list|)
expr_stmt|;
name|output
operator|.
name|println
argument_list|(
literal|"/Notice ("
operator|+
name|font
operator|.
name|getProperty
argument_list|(
literal|"Notice"
argument_list|)
operator|+
literal|") readonly def"
argument_list|)
expr_stmt|;
name|output
operator|.
name|println
argument_list|(
literal|"/FullName ("
operator|+
name|font
operator|.
name|getProperty
argument_list|(
literal|"FullName"
argument_list|)
operator|+
literal|") readonly def"
argument_list|)
expr_stmt|;
name|output
operator|.
name|println
argument_list|(
literal|"/FamilyName ("
operator|+
name|font
operator|.
name|getProperty
argument_list|(
literal|"FamilyName"
argument_list|)
operator|+
literal|") readonly def"
argument_list|)
expr_stmt|;
name|output
operator|.
name|println
argument_list|(
literal|"/Weight ("
operator|+
name|font
operator|.
name|getProperty
argument_list|(
literal|"Weight"
argument_list|)
operator|+
literal|") readonly def"
argument_list|)
expr_stmt|;
name|output
operator|.
name|println
argument_list|(
literal|"/ItalicAngle "
operator|+
name|font
operator|.
name|getProperty
argument_list|(
literal|"ItalicAngle"
argument_list|)
operator|+
literal|" def"
argument_list|)
expr_stmt|;
name|output
operator|.
name|println
argument_list|(
literal|"/isFixedPitch "
operator|+
name|font
operator|.
name|getProperty
argument_list|(
literal|"isFixedPitch"
argument_list|)
operator|+
literal|" def"
argument_list|)
expr_stmt|;
name|output
operator|.
name|println
argument_list|(
literal|"/UnderlinePosition "
operator|+
name|font
operator|.
name|getProperty
argument_list|(
literal|"UnderlinePosition"
argument_list|)
operator|+
literal|" def"
argument_list|)
expr_stmt|;
name|output
operator|.
name|println
argument_list|(
literal|"/UnderlineThickness "
operator|+
name|font
operator|.
name|getProperty
argument_list|(
literal|"UnderlineThickness"
argument_list|)
operator|+
literal|" def"
argument_list|)
expr_stmt|;
name|output
operator|.
name|println
argument_list|(
literal|"end readonly def"
argument_list|)
expr_stmt|;
name|output
operator|.
name|println
argument_list|(
literal|"/FontName /"
operator|+
name|font
operator|.
name|getName
argument_list|()
operator|+
literal|" def"
argument_list|)
expr_stmt|;
name|output
operator|.
name|println
argument_list|(
literal|"/PaintType "
operator|+
name|font
operator|.
name|getProperty
argument_list|(
literal|"PaintType"
argument_list|)
operator|+
literal|" def"
argument_list|)
expr_stmt|;
name|output
operator|.
name|println
argument_list|(
literal|"/FontType 1 def"
argument_list|)
expr_stmt|;
name|NumberFormat
name|matrixFormat
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"0.########"
argument_list|,
operator|new
name|DecimalFormatSymbols
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
argument_list|)
decl_stmt|;
name|output
operator|.
name|println
argument_list|(
literal|"/FontMatrix "
operator|+
name|formatArray
argument_list|(
name|font
operator|.
name|getProperty
argument_list|(
literal|"FontMatrix"
argument_list|)
argument_list|,
name|matrixFormat
argument_list|,
literal|false
argument_list|)
operator|+
literal|" readonly def"
argument_list|)
expr_stmt|;
name|output
operator|.
name|println
argument_list|(
literal|"/FontBBox "
operator|+
name|formatArray
argument_list|(
name|font
operator|.
name|getProperty
argument_list|(
literal|"FontBBox"
argument_list|)
argument_list|,
literal|false
argument_list|)
operator|+
literal|" readonly def"
argument_list|)
expr_stmt|;
name|output
operator|.
name|println
argument_list|(
literal|"/StrokeWidth "
operator|+
name|font
operator|.
name|getProperty
argument_list|(
literal|"StrokeWidth"
argument_list|)
operator|+
literal|" def"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|CFFFont
operator|.
name|Mapping
argument_list|>
name|mappings
init|=
name|font
operator|.
name|getMappings
argument_list|()
decl_stmt|;
name|output
operator|.
name|println
argument_list|(
literal|"/Encoding 256 array"
argument_list|)
expr_stmt|;
name|output
operator|.
name|println
argument_list|(
literal|"0 1 255 {1 index exch /.notdef put} for"
argument_list|)
expr_stmt|;
for|for
control|(
name|CFFFont
operator|.
name|Mapping
name|mapping
range|:
name|mappings
control|)
block|{
name|output
operator|.
name|println
argument_list|(
literal|"dup "
operator|+
name|mapping
operator|.
name|getCode
argument_list|()
operator|+
literal|" /"
operator|+
name|mapping
operator|.
name|getName
argument_list|()
operator|+
literal|" put"
argument_list|)
expr_stmt|;
block|}
name|output
operator|.
name|println
argument_list|(
literal|"readonly def"
argument_list|)
expr_stmt|;
name|output
operator|.
name|println
argument_list|(
literal|"currentdict end"
argument_list|)
expr_stmt|;
name|DataOutput
name|eexecOutput
init|=
operator|new
name|DataOutput
argument_list|()
decl_stmt|;
name|printEexecFontDictionary
argument_list|(
name|font
argument_list|,
name|eexecOutput
argument_list|)
expr_stmt|;
name|output
operator|.
name|println
argument_list|(
literal|"currentfile eexec"
argument_list|)
expr_stmt|;
name|byte
index|[]
name|eexecBytes
init|=
name|Type1FontUtil
operator|.
name|eexecEncrypt
argument_list|(
name|eexecOutput
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|hexString
init|=
name|Type1FontUtil
operator|.
name|hexEncode
argument_list|(
name|eexecBytes
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hexString
operator|.
name|length
argument_list|()
condition|;
control|)
block|{
name|String
name|hexLine
init|=
name|hexString
operator|.
name|substring
argument_list|(
name|i
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|i
operator|+
literal|72
argument_list|,
name|hexString
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|output
operator|.
name|println
argument_list|(
name|hexLine
argument_list|)
expr_stmt|;
name|i
operator|+=
name|hexLine
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|printEexecFontDictionary
parameter_list|(
name|CFFFont
name|font
parameter_list|,
name|DataOutput
name|output
parameter_list|)
throws|throws
name|IOException
block|{
name|output
operator|.
name|println
argument_list|(
literal|"dup /Private 15 dict dup begin"
argument_list|)
expr_stmt|;
name|output
operator|.
name|println
argument_list|(
literal|"/RD {string currentfile exch readstring pop} executeonly def"
argument_list|)
expr_stmt|;
name|output
operator|.
name|println
argument_list|(
literal|"/ND {noaccess def} executeonly def"
argument_list|)
expr_stmt|;
name|output
operator|.
name|println
argument_list|(
literal|"/NP {noaccess put} executeonly def"
argument_list|)
expr_stmt|;
name|output
operator|.
name|println
argument_list|(
literal|"/BlueValues "
operator|+
name|formatArray
argument_list|(
name|font
operator|.
name|getProperty
argument_list|(
literal|"BlueValues"
argument_list|)
argument_list|,
literal|true
argument_list|)
operator|+
literal|" ND"
argument_list|)
expr_stmt|;
name|output
operator|.
name|println
argument_list|(
literal|"/OtherBlues "
operator|+
name|formatArray
argument_list|(
name|font
operator|.
name|getProperty
argument_list|(
literal|"OtherBlues"
argument_list|)
argument_list|,
literal|true
argument_list|)
operator|+
literal|" ND"
argument_list|)
expr_stmt|;
name|output
operator|.
name|println
argument_list|(
literal|"/BlueScale "
operator|+
name|font
operator|.
name|getProperty
argument_list|(
literal|"BlueScale"
argument_list|)
operator|+
literal|" def"
argument_list|)
expr_stmt|;
name|output
operator|.
name|println
argument_list|(
literal|"/BlueShift "
operator|+
name|font
operator|.
name|getProperty
argument_list|(
literal|"BlueShift"
argument_list|)
operator|+
literal|" def"
argument_list|)
expr_stmt|;
name|output
operator|.
name|println
argument_list|(
literal|"/BlueFuzz "
operator|+
name|font
operator|.
name|getProperty
argument_list|(
literal|"BlueFuzz"
argument_list|)
operator|+
literal|" def"
argument_list|)
expr_stmt|;
name|output
operator|.
name|println
argument_list|(
literal|"/StdHW "
operator|+
name|formatArray
argument_list|(
name|font
operator|.
name|getProperty
argument_list|(
literal|"StdHW"
argument_list|)
argument_list|,
literal|true
argument_list|)
operator|+
literal|" ND"
argument_list|)
expr_stmt|;
name|output
operator|.
name|println
argument_list|(
literal|"/StdVW "
operator|+
name|formatArray
argument_list|(
name|font
operator|.
name|getProperty
argument_list|(
literal|"StdVW"
argument_list|)
argument_list|,
literal|true
argument_list|)
operator|+
literal|" ND"
argument_list|)
expr_stmt|;
name|output
operator|.
name|println
argument_list|(
literal|"/ForceBold "
operator|+
name|font
operator|.
name|getProperty
argument_list|(
literal|"ForceBold"
argument_list|)
operator|+
literal|" def"
argument_list|)
expr_stmt|;
name|output
operator|.
name|println
argument_list|(
literal|"/MinFeature {16 16} def"
argument_list|)
expr_stmt|;
name|output
operator|.
name|println
argument_list|(
literal|"/password 5839 def"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|CFFFont
operator|.
name|Mapping
argument_list|>
name|mappings
init|=
name|font
operator|.
name|getMappings
argument_list|()
decl_stmt|;
name|output
operator|.
name|println
argument_list|(
literal|"2 index /CharStrings "
operator|+
name|mappings
operator|.
name|size
argument_list|()
operator|+
literal|" dict dup begin"
argument_list|)
expr_stmt|;
name|Type1CharStringFormatter
name|formatter
init|=
operator|new
name|Type1CharStringFormatter
argument_list|()
decl_stmt|;
for|for
control|(
name|CFFFont
operator|.
name|Mapping
name|mapping
range|:
name|mappings
control|)
block|{
name|byte
index|[]
name|type1Bytes
init|=
name|formatter
operator|.
name|format
argument_list|(
name|mapping
operator|.
name|toType1Sequence
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|charstringBytes
init|=
name|Type1FontUtil
operator|.
name|charstringEncrypt
argument_list|(
name|type1Bytes
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|output
operator|.
name|print
argument_list|(
literal|"/"
operator|+
name|mapping
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|charstringBytes
operator|.
name|length
operator|+
literal|" RD "
argument_list|)
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
name|charstringBytes
argument_list|)
expr_stmt|;
name|output
operator|.
name|print
argument_list|(
literal|" ND"
argument_list|)
expr_stmt|;
name|output
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
name|output
operator|.
name|println
argument_list|(
literal|"end"
argument_list|)
expr_stmt|;
name|output
operator|.
name|println
argument_list|(
literal|"end"
argument_list|)
expr_stmt|;
name|output
operator|.
name|println
argument_list|(
literal|"readonly put"
argument_list|)
expr_stmt|;
name|output
operator|.
name|println
argument_list|(
literal|"noaccess put"
argument_list|)
expr_stmt|;
name|output
operator|.
name|println
argument_list|(
literal|"dup /FontName get exch definefont pop"
argument_list|)
expr_stmt|;
name|output
operator|.
name|println
argument_list|(
literal|"mark currentfile closefile"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|formatArray
parameter_list|(
name|Object
name|object
parameter_list|,
name|boolean
name|executable
parameter_list|)
block|{
return|return
name|formatArray
argument_list|(
name|object
argument_list|,
literal|null
argument_list|,
name|executable
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|formatArray
parameter_list|(
name|Object
name|object
parameter_list|,
name|NumberFormat
name|format
parameter_list|,
name|boolean
name|executable
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|executable
condition|?
literal|"{"
else|:
literal|"["
argument_list|)
expr_stmt|;
if|if
condition|(
name|object
operator|instanceof
name|Collection
condition|)
block|{
name|String
name|sep
init|=
literal|""
decl_stmt|;
name|Collection
argument_list|<
name|?
argument_list|>
name|elements
init|=
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|object
decl_stmt|;
for|for
control|(
name|Object
name|element
range|:
name|elements
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|sep
argument_list|)
operator|.
name|append
argument_list|(
name|formatElement
argument_list|(
name|element
argument_list|,
name|format
argument_list|)
argument_list|)
expr_stmt|;
name|sep
operator|=
literal|" "
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|object
operator|instanceof
name|Number
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|formatElement
argument_list|(
name|object
argument_list|,
name|format
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|executable
condition|?
literal|"}"
else|:
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|String
name|formatElement
parameter_list|(
name|Object
name|object
parameter_list|,
name|NumberFormat
name|format
parameter_list|)
block|{
if|if
condition|(
name|format
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|object
operator|instanceof
name|Double
operator|||
name|object
operator|instanceof
name|Float
condition|)
block|{
name|Number
name|number
init|=
operator|(
name|Number
operator|)
name|object
decl_stmt|;
return|return
name|format
operator|.
name|format
argument_list|(
name|number
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|object
operator|instanceof
name|Long
operator|||
name|object
operator|instanceof
name|Integer
condition|)
block|{
name|Number
name|number
init|=
operator|(
name|Number
operator|)
name|object
decl_stmt|;
return|return
name|format
operator|.
name|format
argument_list|(
name|number
operator|.
name|longValue
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|object
argument_list|)
return|;
block|}
block|}
end_class

end_unit

