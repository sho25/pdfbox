begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cff
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|FontBoxFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|util
operator|.
name|BoundingBox
import|;
end_import

begin_comment
comment|/**  * An Adobe Compact Font Format (CFF) font. Thread safe.  *   * @author Villu Ruusmann  * @author John Hewson  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|CFFFont
implements|implements
name|FontBoxFont
block|{
specifier|protected
name|String
name|fontName
decl_stmt|;
specifier|protected
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|topDict
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|CFFCharset
name|charset
decl_stmt|;
specifier|protected
name|byte
index|[]
index|[]
name|charStrings
decl_stmt|;
specifier|protected
name|byte
index|[]
index|[]
name|globalSubrIndex
decl_stmt|;
specifier|private
name|CFFParser
operator|.
name|ByteSource
name|source
decl_stmt|;
comment|/**      * The name of the font.      *      * @return the name of the font      */
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|fontName
return|;
block|}
comment|/**      * Sets the name of the font.      *      * @param name the name of the font      */
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|fontName
operator|=
name|name
expr_stmt|;
block|}
comment|/**      * Adds the given key/value pair to the top dictionary.      *       * @param name the given key      * @param value the given value      */
specifier|public
name|void
name|addValueToTopDict
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|topDict
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns the top dictionary.      *       * @return the dictionary      */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getTopDict
parameter_list|()
block|{
return|return
name|topDict
return|;
block|}
comment|/**      * Returns the FontMatrix.      */
annotation|@
name|Override
specifier|public
specifier|abstract
name|List
argument_list|<
name|Number
argument_list|>
name|getFontMatrix
parameter_list|()
function_decl|;
comment|/**      * Returns the FontBBox.      */
annotation|@
name|Override
specifier|public
name|BoundingBox
name|getFontBBox
parameter_list|()
block|{
name|List
argument_list|<
name|Number
argument_list|>
name|numbers
init|=
operator|(
name|List
argument_list|<
name|Number
argument_list|>
operator|)
name|topDict
operator|.
name|get
argument_list|(
literal|"FontBBox"
argument_list|)
decl_stmt|;
return|return
operator|new
name|BoundingBox
argument_list|(
name|numbers
argument_list|)
return|;
block|}
comment|/**      * Returns the CFFCharset of the font.      *       * @return the charset      */
specifier|public
name|CFFCharset
name|getCharset
parameter_list|()
block|{
return|return
name|charset
return|;
block|}
comment|/**      * Sets the CFFCharset of the font.      *       * @param charset the given CFFCharset      */
name|void
name|setCharset
parameter_list|(
name|CFFCharset
name|charset
parameter_list|)
block|{
name|this
operator|.
name|charset
operator|=
name|charset
expr_stmt|;
block|}
comment|/**      * Returns the character strings dictionary. For expert users only.      *      * @return the dictionary      */
specifier|public
specifier|final
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|getCharStringBytes
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|charStrings
argument_list|)
return|;
block|}
comment|/**      * Sets a byte source to re-read the CFF data in the future.      */
specifier|final
name|void
name|setData
parameter_list|(
name|CFFParser
operator|.
name|ByteSource
name|source
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
block|}
comment|/**      * Returns the CFF data.      */
specifier|public
name|byte
index|[]
name|getData
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|source
operator|.
name|getBytes
argument_list|()
return|;
block|}
comment|/**      * Returns the number of charstrings in the font.      */
specifier|public
name|int
name|getNumCharStrings
parameter_list|()
block|{
return|return
name|charStrings
operator|.
name|length
return|;
block|}
comment|/**      * Sets the global subroutine index data.      *       * @param globalSubrIndexValue an list containing the global subroutines      */
name|void
name|setGlobalSubrIndex
parameter_list|(
name|byte
index|[]
index|[]
name|globalSubrIndexValue
parameter_list|)
block|{
name|globalSubrIndex
operator|=
name|globalSubrIndexValue
expr_stmt|;
block|}
comment|/**      * Returns the list containing the global subroutine .      *       * @return the dictionary      */
specifier|public
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|getGlobalSubrIndex
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|globalSubrIndex
argument_list|)
return|;
block|}
comment|/**      * Returns the Type 2 charstring for the given CID.      *      * @param cidOrGid CID for CIFFont, or GID for Type 1 font      * @throws IOException if the charstring could not be read      */
specifier|public
specifier|abstract
name|Type2CharString
name|getType2CharString
parameter_list|(
name|int
name|cidOrGid
parameter_list|)
throws|throws
name|IOException
function_decl|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"[name="
operator|+
name|fontName
operator|+
literal|", topDict="
operator|+
name|topDict
operator|+
literal|", charset="
operator|+
name|charset
operator|+
literal|", charStrings="
operator|+
name|charStrings
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

