begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cff
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cff
operator|.
name|charset
operator|.
name|CFFCharset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cff
operator|.
name|encoding
operator|.
name|CFFEncoding
import|;
end_import

begin_comment
comment|/**  * This class represents a CFF/Type2 Font.  *   * @author Villu Ruusmann  * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|CFFFont
block|{
specifier|private
name|String
name|fontname
init|=
literal|null
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|topDict
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|privateDict
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|CFFEncoding
name|fontEncoding
init|=
literal|null
decl_stmt|;
specifier|private
name|CFFCharset
name|fontCharset
init|=
literal|null
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|charStringsDict
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * The name of the font.      * @return the name of the font      */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|fontname
return|;
block|}
comment|/**      * Sets the name of the font.      * @param name the name of the font      */
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|fontname
operator|=
name|name
expr_stmt|;
block|}
comment|/**      * Returns the value for the given name from the dictionary.      * @param name the name of the value      * @return the value of the name if available      */
specifier|public
name|Object
name|getProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Object
name|topDictValue
init|=
name|topDict
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|topDictValue
operator|!=
literal|null
condition|)
block|{
return|return
name|topDictValue
return|;
block|}
name|Object
name|privateDictValue
init|=
name|privateDict
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|privateDictValue
operator|!=
literal|null
condition|)
block|{
return|return
name|privateDictValue
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Adds the given key/value pair to the top dictionary.       * @param name the given key      * @param value the given value      */
specifier|public
name|void
name|addValueToTopDict
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|topDict
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**       * Returns the top dictionary.      * @return the dictionary      */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getTopDict
parameter_list|()
block|{
return|return
name|topDict
return|;
block|}
comment|/**      * Adds the given key/value pair to the private dictionary.       * @param name the given key      * @param value the given value      */
specifier|public
name|void
name|addValueToPrivateDict
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|privateDict
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**       * Returns the private dictionary.      * @return the dictionary      */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getPrivateDict
parameter_list|()
block|{
return|return
name|privateDict
return|;
block|}
comment|/**      * Get the mapping (code/SID/charname/bytes) for this font.      * @return mappings for codes< 256 and for codes> = 256      */
specifier|public
name|Collection
argument_list|<
name|Mapping
argument_list|>
name|getMappings
parameter_list|()
block|{
name|List
argument_list|<
name|Mapping
argument_list|>
name|mappings
init|=
operator|new
name|ArrayList
argument_list|<
name|Mapping
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|mappedNames
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CFFEncoding
operator|.
name|Entry
name|entry
range|:
name|fontEncoding
operator|.
name|getEntries
argument_list|()
control|)
block|{
name|String
name|charName
init|=
name|fontCharset
operator|.
name|getName
argument_list|(
name|entry
operator|.
name|getSID
argument_list|()
argument_list|)
decl_stmt|;
comment|// Predefined encoding
if|if
condition|(
name|charName
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|byte
index|[]
name|bytes
init|=
name|charStringsDict
operator|.
name|get
argument_list|(
name|charName
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytes
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|Mapping
name|mapping
init|=
operator|new
name|Mapping
argument_list|()
decl_stmt|;
name|mapping
operator|.
name|setCode
argument_list|(
name|entry
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|setSID
argument_list|(
name|entry
operator|.
name|getSID
argument_list|()
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|setName
argument_list|(
name|charName
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|setBytes
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|add
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
name|mappedNames
operator|.
name|add
argument_list|(
name|charName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fontEncoding
operator|instanceof
name|CFFParser
operator|.
name|EmbeddedEncoding
condition|)
block|{
name|CFFParser
operator|.
name|EmbeddedEncoding
name|embeddedEncoding
init|=
operator|(
name|CFFParser
operator|.
name|EmbeddedEncoding
operator|)
name|fontEncoding
decl_stmt|;
for|for
control|(
name|CFFParser
operator|.
name|EmbeddedEncoding
operator|.
name|Supplement
name|supplement
range|:
name|embeddedEncoding
operator|.
name|getSupplements
argument_list|()
control|)
block|{
name|String
name|charName
init|=
name|fontCharset
operator|.
name|getName
argument_list|(
name|supplement
operator|.
name|getGlyph
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|charName
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|byte
index|[]
name|bytes
init|=
name|charStringsDict
operator|.
name|get
argument_list|(
name|charName
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytes
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|Mapping
name|mapping
init|=
operator|new
name|Mapping
argument_list|()
decl_stmt|;
name|mapping
operator|.
name|setCode
argument_list|(
name|supplement
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|setSID
argument_list|(
name|supplement
operator|.
name|getGlyph
argument_list|()
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|setName
argument_list|(
name|charName
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|setBytes
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|add
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
name|mappedNames
operator|.
name|add
argument_list|(
name|charName
argument_list|)
expr_stmt|;
block|}
block|}
comment|// XXX
name|int
name|code
init|=
literal|256
decl_stmt|;
for|for
control|(
name|CFFCharset
operator|.
name|Entry
name|entry
range|:
name|fontCharset
operator|.
name|getEntries
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|entry
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|mappedNames
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|byte
index|[]
name|bytes
init|=
name|this
operator|.
name|charStringsDict
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytes
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|Mapping
name|mapping
init|=
operator|new
name|Mapping
argument_list|()
decl_stmt|;
name|mapping
operator|.
name|setCode
argument_list|(
name|code
operator|++
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|setSID
argument_list|(
name|entry
operator|.
name|getSID
argument_list|()
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|setBytes
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|add
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
name|mappedNames
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|mappings
return|;
block|}
comment|/**      * Returns the CFFEncoding of the font.      * @return the encoding      */
specifier|public
name|CFFEncoding
name|getEncoding
parameter_list|()
block|{
return|return
name|fontEncoding
return|;
block|}
comment|/**      * Sets the CFFEncoding of the font.      * @param encoding the given CFFEncoding      */
specifier|public
name|void
name|setEncoding
parameter_list|(
name|CFFEncoding
name|encoding
parameter_list|)
block|{
name|fontEncoding
operator|=
name|encoding
expr_stmt|;
block|}
comment|/**      * Returns the CFFCharset of the font.      * @return the charset      */
specifier|public
name|CFFCharset
name|getCharset
parameter_list|()
block|{
return|return
name|fontCharset
return|;
block|}
comment|/**      * Sets the CFFCharset of the font.      * @param charset the given CFFCharset      */
specifier|public
name|void
name|setCharset
parameter_list|(
name|CFFCharset
name|charset
parameter_list|)
block|{
name|fontCharset
operator|=
name|charset
expr_stmt|;
block|}
comment|/**       * Returns the character strings dictionary.      * @return the dictionary      */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|getCharStringsDict
parameter_list|()
block|{
return|return
name|charStringsDict
return|;
block|}
comment|/**      * Creates a CharStringConverter for this font.      * @return the new CharStringConverter      */
specifier|public
name|CharStringConverter
name|createConverter
parameter_list|()
block|{
name|Number
name|defaultWidthX
init|=
operator|(
name|Number
operator|)
name|getProperty
argument_list|(
literal|"defaultWidthX"
argument_list|)
decl_stmt|;
name|Number
name|nominalWidthX
init|=
operator|(
name|Number
operator|)
name|getProperty
argument_list|(
literal|"nominalWidthX"
argument_list|)
decl_stmt|;
return|return
operator|new
name|CharStringConverter
argument_list|(
name|defaultWidthX
operator|.
name|intValue
argument_list|()
argument_list|,
name|nominalWidthX
operator|.
name|intValue
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Creates a CharStringRenderer for this font.      * @return the new CharStringRenderer      */
specifier|public
name|CharStringRenderer
name|createRenderer
parameter_list|()
block|{
return|return
operator|new
name|CharStringRenderer
argument_list|()
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"[name="
operator|+
name|fontname
operator|+
literal|", topDict="
operator|+
name|topDict
operator|+
literal|", privateDict="
operator|+
name|privateDict
operator|+
literal|", encoding="
operator|+
name|fontEncoding
operator|+
literal|", charset="
operator|+
name|fontCharset
operator|+
literal|", charStringsDict="
operator|+
name|charStringsDict
operator|+
literal|"]"
return|;
block|}
comment|/**      * This class is used for the font mapping.      *      */
specifier|public
class|class
name|Mapping
block|{
specifier|private
name|int
name|mappedCode
decl_stmt|;
specifier|private
name|int
name|mappedSID
decl_stmt|;
specifier|private
name|String
name|mappedName
decl_stmt|;
specifier|private
name|byte
index|[]
name|mappedBytes
decl_stmt|;
comment|/**          * Converts the mapping into a Type1-sequence.          * @return the Type1-sequence          * @throws IOException if an error occurs during reading          */
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|toType1Sequence
parameter_list|()
throws|throws
name|IOException
block|{
name|CharStringConverter
name|converter
init|=
name|createConverter
argument_list|()
decl_stmt|;
return|return
name|converter
operator|.
name|convert
argument_list|(
name|toType2Sequence
argument_list|()
argument_list|)
return|;
block|}
comment|/**          * Converts the mapping into a Type2-sequence.          * @return the Type2-sequence          * @throws IOException if an error occurs during reading          */
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|toType2Sequence
parameter_list|()
throws|throws
name|IOException
block|{
name|Type2CharStringParser
name|parser
init|=
operator|new
name|Type2CharStringParser
argument_list|()
decl_stmt|;
return|return
name|parser
operator|.
name|parse
argument_list|(
name|getBytes
argument_list|()
argument_list|)
return|;
block|}
comment|/**          * Gets the value for the code.          * @return the code          */
specifier|public
name|int
name|getCode
parameter_list|()
block|{
return|return
name|mappedCode
return|;
block|}
specifier|private
name|void
name|setCode
parameter_list|(
name|int
name|code
parameter_list|)
block|{
name|mappedCode
operator|=
name|code
expr_stmt|;
block|}
comment|/**          * Gets the value for the SID.          * @return the SID          */
specifier|public
name|int
name|getSID
parameter_list|()
block|{
return|return
name|mappedSID
return|;
block|}
specifier|private
name|void
name|setSID
parameter_list|(
name|int
name|sid
parameter_list|)
block|{
name|this
operator|.
name|mappedSID
operator|=
name|sid
expr_stmt|;
block|}
comment|/**          * Gets the value for the name.          * @return the name          */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|mappedName
return|;
block|}
specifier|private
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|mappedName
operator|=
name|name
expr_stmt|;
block|}
comment|/**          * Gets the value for the bytes.          * @return the bytes          */
specifier|public
name|byte
index|[]
name|getBytes
parameter_list|()
block|{
return|return
name|mappedBytes
return|;
block|}
specifier|private
name|void
name|setBytes
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
name|this
operator|.
name|mappedBytes
operator|=
name|bytes
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

