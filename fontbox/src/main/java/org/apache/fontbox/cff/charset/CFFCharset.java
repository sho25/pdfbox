begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cff
operator|.
name|charset
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * This is the superclass for all CFFFont charsets.  *   * @author Villu Ruusmann  * @version $Revision$  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|CFFCharset
block|{
specifier|private
name|List
argument_list|<
name|Entry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<
name|Entry
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Determines if the charset is font specific or not.      * @return if the charset is font specific      */
specifier|public
name|boolean
name|isFontSpecific
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * Returns the SID corresponding to the given name.      * @param name the given SID      * @return the corresponding SID      */
specifier|public
name|int
name|getSID
parameter_list|(
name|String
name|name
parameter_list|)
block|{
for|for
control|(
name|Entry
name|entry
range|:
name|this
operator|.
name|entries
control|)
block|{
if|if
condition|(
operator|(
name|entry
operator|.
name|entryName
operator|)
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|entry
operator|.
name|entrySID
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**      * Returns the name corresponding to the given SID.      * @param sid the given SID      * @return the corresponding name      */
specifier|public
name|String
name|getName
parameter_list|(
name|int
name|sid
parameter_list|)
block|{
for|for
control|(
name|Entry
name|entry
range|:
name|this
operator|.
name|entries
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|entrySID
operator|==
name|sid
condition|)
block|{
return|return
name|entry
operator|.
name|entryName
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Adds a new SID/name combination to the charset.      * @param sid the given SID      * @param name the given name      */
specifier|public
name|void
name|register
parameter_list|(
name|int
name|sid
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|entries
operator|.
name|add
argument_list|(
operator|new
name|Entry
argument_list|(
name|sid
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * A list of all entries within this charset.      * @return a list of all entries      */
specifier|public
name|List
argument_list|<
name|Entry
argument_list|>
name|getEntries
parameter_list|()
block|{
return|return
name|entries
return|;
block|}
comment|/**      * This class represents a single SID/name mapping of the charset.      *      */
specifier|public
specifier|static
class|class
name|Entry
block|{
specifier|private
name|int
name|entrySID
decl_stmt|;
specifier|private
name|String
name|entryName
decl_stmt|;
comment|/**          * Create a new instance of Entry with the given values.          * @param sid the SID          * @param name the Name          */
specifier|protected
name|Entry
parameter_list|(
name|int
name|sid
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|entrySID
operator|=
name|sid
expr_stmt|;
name|this
operator|.
name|entryName
operator|=
name|name
expr_stmt|;
block|}
comment|/**          * The SID of this entry.          * @return the SID          */
specifier|public
name|int
name|getSID
parameter_list|()
block|{
return|return
name|entrySID
return|;
block|}
comment|/**          * The Name of this entry.          * @return the name          */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|entryName
return|;
block|}
comment|/**          * {@inheritDoc}          */
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"[sid="
operator|+
name|entrySID
operator|+
literal|", name="
operator|+
name|entryName
operator|+
literal|"]"
return|;
block|}
block|}
block|}
end_class

end_unit

