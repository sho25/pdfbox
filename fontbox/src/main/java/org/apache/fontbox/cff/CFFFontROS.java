begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cff
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
specifier|public
class|class
name|CFFFontROS
extends|extends
name|CFFFont
block|{
specifier|private
name|String
name|registry
decl_stmt|;
specifier|private
name|String
name|ordering
decl_stmt|;
specifier|private
name|int
name|supplement
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|fontDictionaries
init|=
operator|new
name|LinkedList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|privateDictionaries
init|=
operator|new
name|LinkedList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|CIDKeyedFDSelect
name|fdSelect
init|=
literal|null
decl_stmt|;
comment|/** 	 * Returns the registry value. 	 * @return the registry 	 */
specifier|public
name|String
name|getRegistry
parameter_list|()
block|{
return|return
name|registry
return|;
block|}
comment|/** 	 * Sets the registry value. 	 *  	 * @param registry the registry to set 	 */
specifier|public
name|void
name|setRegistry
parameter_list|(
name|String
name|registry
parameter_list|)
block|{
name|this
operator|.
name|registry
operator|=
name|registry
expr_stmt|;
block|}
comment|/** 	 * Returns the ordering value. 	 *  	 * @return the ordering 	 */
specifier|public
name|String
name|getOrdering
parameter_list|()
block|{
return|return
name|ordering
return|;
block|}
comment|/** 	 * Sets the ordering value. 	 *  	 * @param ordering the ordering to set 	 */
specifier|public
name|void
name|setOrdering
parameter_list|(
name|String
name|ordering
parameter_list|)
block|{
name|this
operator|.
name|ordering
operator|=
name|ordering
expr_stmt|;
block|}
comment|/** 	 * Returns the supplement value. 	 *  	 * @return the supplement 	 */
specifier|public
name|int
name|getSupplement
parameter_list|()
block|{
return|return
name|supplement
return|;
block|}
comment|/** 	 * Sets the supplement value. 	 *  	 * @param supplement the supplement to set 	 */
specifier|public
name|void
name|setSupplement
parameter_list|(
name|int
name|supplement
parameter_list|)
block|{
name|this
operator|.
name|supplement
operator|=
name|supplement
expr_stmt|;
block|}
comment|/** 	 * Returns the font dictionaries. 	 *  	 * @return the fontDict 	 */
specifier|public
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|getFontDict
parameter_list|()
block|{
return|return
name|fontDictionaries
return|;
block|}
comment|/** 	 * Sets the font dictionaries. 	 *  	 * @param fontDict the fontDict to set 	 */
specifier|public
name|void
name|setFontDict
parameter_list|(
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|fontDict
parameter_list|)
block|{
name|this
operator|.
name|fontDictionaries
operator|=
name|fontDict
expr_stmt|;
block|}
comment|/** 	 * Returns the private dictionary. 	 *  	 * @return the privDict 	 */
specifier|public
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|getPrivDict
parameter_list|()
block|{
return|return
name|privateDictionaries
return|;
block|}
comment|/** 	 * Sets the private dictionary. 	 *  	 * @param privDict the privDict to set 	 */
specifier|public
name|void
name|setPrivDict
parameter_list|(
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|privDict
parameter_list|)
block|{
name|this
operator|.
name|privateDictionaries
operator|=
name|privDict
expr_stmt|;
block|}
comment|/** 	 * Returns the fdSelect value. 	 *  	 * @return the fdSelect 	 */
specifier|public
name|CIDKeyedFDSelect
name|getFdSelect
parameter_list|()
block|{
return|return
name|fdSelect
return|;
block|}
comment|/** 	 * Sets the fdSelect value. 	 *  	 * @param fdSelect the fdSelect to set 	 */
specifier|public
name|void
name|setFdSelect
parameter_list|(
name|CIDKeyedFDSelect
name|fdSelect
parameter_list|)
block|{
name|this
operator|.
name|fdSelect
operator|=
name|fdSelect
expr_stmt|;
block|}
comment|/** 	 * Returns the Width value of the given Glyph identifier 	 *  	 * @param SID 	 * @return -1 if the SID is missing from the Font. 	 * @throws IOException 	 */
specifier|public
name|int
name|getWidth
parameter_list|(
name|int
name|SID
parameter_list|)
throws|throws
name|IOException
block|{
comment|// ---- search the right FDArray index in the FDSelect according to the Character identifier
comment|// 		this index will be used to access the private dictionary which contains useful values
comment|//		to compute width.
name|int
name|fdArrayIndex
init|=
name|this
operator|.
name|fdSelect
operator|.
name|getFd
argument_list|(
name|SID
argument_list|)
decl_stmt|;
if|if
condition|(
name|fdArrayIndex
operator|==
operator|-
literal|1
operator|&&
name|SID
operator|==
literal|0
condition|)
block|{
comment|// --- notdef char
return|return
name|super
operator|.
name|getWidth
argument_list|(
name|SID
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|fdArrayIndex
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|1000
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|fontDict
init|=
name|this
operator|.
name|fontDictionaries
operator|.
name|get
argument_list|(
name|fdArrayIndex
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|privDict
init|=
name|this
operator|.
name|privateDictionaries
operator|.
name|get
argument_list|(
name|fdArrayIndex
argument_list|)
decl_stmt|;
name|int
name|nominalWidth
init|=
name|privDict
operator|.
name|containsKey
argument_list|(
literal|"nominalWidthX"
argument_list|)
condition|?
operator|(
operator|(
name|Number
operator|)
name|privDict
operator|.
name|get
argument_list|(
literal|"nominalWidthX"
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
else|:
literal|0
decl_stmt|;
name|int
name|defaultWidth
init|=
name|privDict
operator|.
name|containsKey
argument_list|(
literal|"defaultWidthX"
argument_list|)
condition|?
operator|(
operator|(
name|Number
operator|)
name|privDict
operator|.
name|get
argument_list|(
literal|"defaultWidthX"
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
else|:
literal|1000
decl_stmt|;
for|for
control|(
name|Mapping
name|m
range|:
name|getMappings
argument_list|()
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getSID
argument_list|()
operator|==
name|SID
condition|)
block|{
name|CharStringRenderer
name|csr
init|=
literal|null
decl_stmt|;
name|Number
name|charStringType
init|=
operator|(
name|Number
operator|)
name|getProperty
argument_list|(
literal|"CharstringType"
argument_list|)
decl_stmt|;
if|if
condition|(
name|charStringType
operator|.
name|intValue
argument_list|()
operator|==
literal|2
condition|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|lSeq
init|=
name|m
operator|.
name|toType2Sequence
argument_list|()
decl_stmt|;
name|csr
operator|=
operator|new
name|CharStringRenderer
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|csr
operator|.
name|render
argument_list|(
name|lSeq
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|lSeq
init|=
name|m
operator|.
name|toType1Sequence
argument_list|()
decl_stmt|;
name|csr
operator|=
operator|new
name|CharStringRenderer
argument_list|()
expr_stmt|;
name|csr
operator|.
name|render
argument_list|(
name|lSeq
argument_list|)
expr_stmt|;
block|}
comment|// ---- If the CharString has a Width nominalWidthX must be added,
comment|//	    otherwise it is the default width.
return|return
name|csr
operator|.
name|getWidth
argument_list|()
operator|!=
literal|0
condition|?
name|csr
operator|.
name|getWidth
argument_list|()
operator|+
name|nominalWidth
else|:
name|defaultWidth
return|;
block|}
block|}
comment|// ---- Width not found, return the default width
return|return
name|defaultWidth
return|;
block|}
block|}
end_class

end_unit

