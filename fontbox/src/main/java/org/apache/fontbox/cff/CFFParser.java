begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cff
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * This class represents a parser for a CFF font.   * @author Villu Ruusmann  * @version $Revision: 1.0 $  */
end_comment

begin_class
specifier|public
class|class
name|CFFParser
block|{
specifier|private
specifier|static
specifier|final
name|String
name|TAG_OTTO
init|=
literal|"OTTO"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TAG_TTCF
init|=
literal|"ttcf"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TAG_TTFONLY
init|=
literal|"\u0000\u0001\u0000\u0000"
decl_stmt|;
specifier|private
name|CFFDataInput
name|input
init|=
literal|null
decl_stmt|;
specifier|private
name|Header
name|header
init|=
literal|null
decl_stmt|;
specifier|private
name|IndexData
name|nameIndex
init|=
literal|null
decl_stmt|;
specifier|private
name|IndexData
name|topDictIndex
init|=
literal|null
decl_stmt|;
specifier|private
name|IndexData
name|stringIndex
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|debugFontName
decl_stmt|;
comment|// for debugging only
comment|/**      * Parsing CFF Font using a byte array as input.      * @param bytes the given byte array      * @return the parsed CFF fonts      * @throws IOException If there is an error reading from the stream      */
specifier|public
name|List
argument_list|<
name|CFFFont
argument_list|>
name|parse
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
name|input
operator|=
operator|new
name|CFFDataInput
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|String
name|firstTag
init|=
name|readTagName
argument_list|(
name|input
argument_list|)
decl_stmt|;
comment|// try to determine which kind of font we have
if|if
condition|(
name|TAG_OTTO
operator|.
name|equals
argument_list|(
name|firstTag
argument_list|)
condition|)
block|{
comment|// this is OpenType font containing CFF data
comment|// so find CFF tag
name|short
name|numTables
init|=
name|input
operator|.
name|readShort
argument_list|()
decl_stmt|;
name|short
name|searchRange
init|=
name|input
operator|.
name|readShort
argument_list|()
decl_stmt|;
name|short
name|entrySelector
init|=
name|input
operator|.
name|readShort
argument_list|()
decl_stmt|;
name|short
name|rangeShift
init|=
name|input
operator|.
name|readShort
argument_list|()
decl_stmt|;
name|boolean
name|cffFound
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|q
init|=
literal|0
init|;
name|q
operator|<
name|numTables
condition|;
name|q
operator|++
control|)
block|{
name|String
name|tagName
init|=
name|readTagName
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|long
name|checksum
init|=
name|readLong
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|long
name|offset
init|=
name|readLong
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|long
name|length
init|=
name|readLong
argument_list|(
name|input
argument_list|)
decl_stmt|;
if|if
condition|(
name|tagName
operator|.
name|equals
argument_list|(
literal|"CFF "
argument_list|)
condition|)
block|{
name|cffFound
operator|=
literal|true
expr_stmt|;
name|byte
index|[]
name|bytes2
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|bytes
argument_list|,
operator|(
name|int
operator|)
name|offset
argument_list|,
name|bytes2
argument_list|,
literal|0
argument_list|,
name|bytes2
operator|.
name|length
argument_list|)
expr_stmt|;
name|input
operator|=
operator|new
name|CFFDataInput
argument_list|(
name|bytes2
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|cffFound
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"CFF tag not found in this OpenType font."
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|TAG_TTCF
operator|.
name|equals
argument_list|(
name|firstTag
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"True Type Collection fonts are not supported."
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|TAG_TTFONLY
operator|.
name|equals
argument_list|(
name|firstTag
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"OpenType fonts containing a true type font are not supported."
argument_list|)
throw|;
block|}
else|else
block|{
name|input
operator|.
name|setPosition
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|header
operator|=
name|readHeader
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|nameIndex
operator|=
name|readIndexData
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|topDictIndex
operator|=
name|readIndexData
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|stringIndex
operator|=
name|readIndexData
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|IndexData
name|globalSubrIndex
init|=
name|readIndexData
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|CFFFont
argument_list|>
name|fonts
init|=
operator|new
name|ArrayList
argument_list|<
name|CFFFont
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nameIndex
operator|.
name|getCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|CFFFont
name|font
init|=
name|parseFont
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|font
operator|.
name|setGlobalSubrIndex
argument_list|(
name|globalSubrIndex
argument_list|)
expr_stmt|;
name|fonts
operator|.
name|add
argument_list|(
name|font
argument_list|)
expr_stmt|;
block|}
return|return
name|fonts
return|;
block|}
specifier|private
specifier|static
name|String
name|readTagName
parameter_list|(
name|CFFDataInput
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|b
init|=
name|input
operator|.
name|readBytes
argument_list|(
literal|4
argument_list|)
decl_stmt|;
return|return
operator|new
name|String
argument_list|(
name|b
argument_list|,
literal|"ISO-8859-1"
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|long
name|readLong
parameter_list|(
name|CFFDataInput
name|input
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|input
operator|.
name|readCard16
argument_list|()
operator|<<
literal|16
operator|)
operator||
name|input
operator|.
name|readCard16
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|Header
name|readHeader
parameter_list|(
name|CFFDataInput
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|Header
name|cffHeader
init|=
operator|new
name|Header
argument_list|()
decl_stmt|;
name|cffHeader
operator|.
name|major
operator|=
name|input
operator|.
name|readCard8
argument_list|()
expr_stmt|;
name|cffHeader
operator|.
name|minor
operator|=
name|input
operator|.
name|readCard8
argument_list|()
expr_stmt|;
name|cffHeader
operator|.
name|hdrSize
operator|=
name|input
operator|.
name|readCard8
argument_list|()
expr_stmt|;
name|cffHeader
operator|.
name|offSize
operator|=
name|input
operator|.
name|readOffSize
argument_list|()
expr_stmt|;
return|return
name|cffHeader
return|;
block|}
specifier|private
specifier|static
name|IndexData
name|readIndexData
parameter_list|(
name|CFFDataInput
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|count
init|=
name|input
operator|.
name|readCard16
argument_list|()
decl_stmt|;
name|IndexData
name|index
init|=
operator|new
name|IndexData
argument_list|(
name|count
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|==
literal|0
condition|)
block|{
return|return
name|index
return|;
block|}
name|int
name|offSize
init|=
name|input
operator|.
name|readOffSize
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|count
condition|;
name|i
operator|++
control|)
block|{
name|index
operator|.
name|setOffset
argument_list|(
name|i
argument_list|,
name|input
operator|.
name|readOffset
argument_list|(
name|offSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|dataSize
init|=
name|index
operator|.
name|getOffset
argument_list|(
name|count
argument_list|)
operator|-
name|index
operator|.
name|getOffset
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|index
operator|.
name|initData
argument_list|(
name|dataSize
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dataSize
condition|;
name|i
operator|++
control|)
block|{
name|index
operator|.
name|setData
argument_list|(
name|i
argument_list|,
name|input
operator|.
name|readCard8
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|index
return|;
block|}
specifier|private
specifier|static
name|DictData
name|readDictData
parameter_list|(
name|CFFDataInput
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|DictData
name|dict
init|=
operator|new
name|DictData
argument_list|()
decl_stmt|;
name|dict
operator|.
name|entries
operator|=
operator|new
name|ArrayList
argument_list|<
name|DictData
operator|.
name|Entry
argument_list|>
argument_list|()
expr_stmt|;
while|while
condition|(
name|input
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|DictData
operator|.
name|Entry
name|entry
init|=
name|readEntry
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|dict
operator|.
name|entries
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
return|return
name|dict
return|;
block|}
specifier|private
specifier|static
name|DictData
operator|.
name|Entry
name|readEntry
parameter_list|(
name|CFFDataInput
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|DictData
operator|.
name|Entry
name|entry
init|=
operator|new
name|DictData
operator|.
name|Entry
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|b0
init|=
name|input
operator|.
name|readUnsignedByte
argument_list|()
decl_stmt|;
if|if
condition|(
name|b0
operator|>=
literal|0
operator|&&
name|b0
operator|<=
literal|21
condition|)
block|{
name|entry
operator|.
name|operator
operator|=
name|readOperator
argument_list|(
name|input
argument_list|,
name|b0
argument_list|)
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
name|b0
operator|==
literal|28
operator|||
name|b0
operator|==
literal|29
condition|)
block|{
name|entry
operator|.
name|operands
operator|.
name|add
argument_list|(
name|readIntegerNumber
argument_list|(
name|input
argument_list|,
name|b0
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|b0
operator|==
literal|30
condition|)
block|{
name|entry
operator|.
name|operands
operator|.
name|add
argument_list|(
name|readRealNumber
argument_list|(
name|input
argument_list|,
name|b0
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|b0
operator|>=
literal|32
operator|&&
name|b0
operator|<=
literal|254
condition|)
block|{
name|entry
operator|.
name|operands
operator|.
name|add
argument_list|(
name|readIntegerNumber
argument_list|(
name|input
argument_list|,
name|b0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
block|}
return|return
name|entry
return|;
block|}
specifier|private
specifier|static
name|CFFOperator
name|readOperator
parameter_list|(
name|CFFDataInput
name|input
parameter_list|,
name|int
name|b0
parameter_list|)
throws|throws
name|IOException
block|{
name|CFFOperator
operator|.
name|Key
name|key
init|=
name|readOperatorKey
argument_list|(
name|input
argument_list|,
name|b0
argument_list|)
decl_stmt|;
return|return
name|CFFOperator
operator|.
name|getOperator
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|CFFOperator
operator|.
name|Key
name|readOperatorKey
parameter_list|(
name|CFFDataInput
name|input
parameter_list|,
name|int
name|b0
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|b0
operator|==
literal|12
condition|)
block|{
name|int
name|b1
init|=
name|input
operator|.
name|readUnsignedByte
argument_list|()
decl_stmt|;
return|return
operator|new
name|CFFOperator
operator|.
name|Key
argument_list|(
name|b0
argument_list|,
name|b1
argument_list|)
return|;
block|}
return|return
operator|new
name|CFFOperator
operator|.
name|Key
argument_list|(
name|b0
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Integer
name|readIntegerNumber
parameter_list|(
name|CFFDataInput
name|input
parameter_list|,
name|int
name|b0
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|b0
operator|==
literal|28
condition|)
block|{
name|int
name|b1
init|=
name|input
operator|.
name|readUnsignedByte
argument_list|()
decl_stmt|;
name|int
name|b2
init|=
name|input
operator|.
name|readUnsignedByte
argument_list|()
decl_stmt|;
return|return
call|(
name|int
call|)
argument_list|(
name|short
argument_list|)
operator|(
name|b1
operator|<<
literal|8
operator||
name|b2
operator|)
return|;
block|}
elseif|else
if|if
condition|(
name|b0
operator|==
literal|29
condition|)
block|{
name|int
name|b1
init|=
name|input
operator|.
name|readUnsignedByte
argument_list|()
decl_stmt|;
name|int
name|b2
init|=
name|input
operator|.
name|readUnsignedByte
argument_list|()
decl_stmt|;
name|int
name|b3
init|=
name|input
operator|.
name|readUnsignedByte
argument_list|()
decl_stmt|;
name|int
name|b4
init|=
name|input
operator|.
name|readUnsignedByte
argument_list|()
decl_stmt|;
return|return
name|b1
operator|<<
literal|24
operator||
name|b2
operator|<<
literal|16
operator||
name|b3
operator|<<
literal|8
operator||
name|b4
return|;
block|}
elseif|else
if|if
condition|(
name|b0
operator|>=
literal|32
operator|&&
name|b0
operator|<=
literal|246
condition|)
block|{
return|return
name|b0
operator|-
literal|139
return|;
block|}
elseif|else
if|if
condition|(
name|b0
operator|>=
literal|247
operator|&&
name|b0
operator|<=
literal|250
condition|)
block|{
name|int
name|b1
init|=
name|input
operator|.
name|readUnsignedByte
argument_list|()
decl_stmt|;
return|return
operator|(
name|b0
operator|-
literal|247
operator|)
operator|*
literal|256
operator|+
name|b1
operator|+
literal|108
return|;
block|}
elseif|else
if|if
condition|(
name|b0
operator|>=
literal|251
operator|&&
name|b0
operator|<=
literal|254
condition|)
block|{
name|int
name|b1
init|=
name|input
operator|.
name|readUnsignedByte
argument_list|()
decl_stmt|;
return|return
operator|-
operator|(
name|b0
operator|-
literal|251
operator|)
operator|*
literal|256
operator|-
name|b1
operator|-
literal|108
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
block|}
specifier|private
specifier|static
name|Double
name|readRealNumber
parameter_list|(
name|CFFDataInput
name|input
parameter_list|,
name|int
name|b0
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|boolean
name|done
init|=
literal|false
decl_stmt|;
name|boolean
name|exponentMissing
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|done
condition|)
block|{
name|int
name|b
init|=
name|input
operator|.
name|readUnsignedByte
argument_list|()
decl_stmt|;
name|int
index|[]
name|nibbles
init|=
block|{
name|b
operator|/
literal|16
block|,
name|b
operator|%
literal|16
block|}
decl_stmt|;
for|for
control|(
name|int
name|nibble
range|:
name|nibbles
control|)
block|{
switch|switch
condition|(
name|nibble
condition|)
block|{
case|case
literal|0x0
case|:
case|case
literal|0x1
case|:
case|case
literal|0x2
case|:
case|case
literal|0x3
case|:
case|case
literal|0x4
case|:
case|case
literal|0x5
case|:
case|case
literal|0x6
case|:
case|case
literal|0x7
case|:
case|case
literal|0x8
case|:
case|case
literal|0x9
case|:
name|sb
operator|.
name|append
argument_list|(
name|nibble
argument_list|)
expr_stmt|;
name|exponentMissing
operator|=
literal|false
expr_stmt|;
break|break;
case|case
literal|0xa
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0xb
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"E"
argument_list|)
expr_stmt|;
name|exponentMissing
operator|=
literal|true
expr_stmt|;
break|break;
case|case
literal|0xc
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"E-"
argument_list|)
expr_stmt|;
name|exponentMissing
operator|=
literal|true
expr_stmt|;
break|break;
case|case
literal|0xd
case|:
break|break;
case|case
literal|0xe
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0xf
case|:
name|done
operator|=
literal|true
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
block|}
block|}
if|if
condition|(
name|exponentMissing
condition|)
block|{
comment|// the exponent is missing, just append "0" to avoid an exception
comment|// not sure if 0 is the correct value, but it seems to fit
comment|// see PDFBOX-1522
name|sb
operator|.
name|append
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
block|}
return|return
name|Double
operator|.
name|valueOf
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|CFFFont
name|parseFont
parameter_list|(
name|int
name|index
parameter_list|)
throws|throws
name|IOException
block|{
comment|// name index
name|DataInput
name|nameInput
init|=
operator|new
name|DataInput
argument_list|(
name|nameIndex
operator|.
name|getBytes
argument_list|(
name|index
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|nameInput
operator|.
name|getString
argument_list|()
decl_stmt|;
comment|// top dict
name|CFFDataInput
name|topDictInput
init|=
operator|new
name|CFFDataInput
argument_list|(
name|topDictIndex
operator|.
name|getBytes
argument_list|(
name|index
argument_list|)
argument_list|)
decl_stmt|;
name|DictData
name|topDict
init|=
name|readDictData
argument_list|(
name|topDictInput
argument_list|)
decl_stmt|;
comment|// we dont't support synthetic fonts
name|DictData
operator|.
name|Entry
name|syntheticBaseEntry
init|=
name|topDict
operator|.
name|getEntry
argument_list|(
literal|"SyntheticBase"
argument_list|)
decl_stmt|;
if|if
condition|(
name|syntheticBaseEntry
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Synthetic Fonts are not supported"
argument_list|)
throw|;
block|}
comment|// determine if this is a Type 1-equivalent font or a CIDFont
name|CFFFont
name|font
decl_stmt|;
name|boolean
name|isCIDFont
init|=
name|topDict
operator|.
name|getEntry
argument_list|(
literal|"ROS"
argument_list|)
operator|!=
literal|null
decl_stmt|;
if|if
condition|(
name|isCIDFont
condition|)
block|{
name|font
operator|=
operator|new
name|CFFCIDFont
argument_list|()
expr_stmt|;
name|DictData
operator|.
name|Entry
name|rosEntry
init|=
name|topDict
operator|.
name|getEntry
argument_list|(
literal|"ROS"
argument_list|)
decl_stmt|;
operator|(
operator|(
name|CFFCIDFont
operator|)
name|font
operator|)
operator|.
name|setRegistry
argument_list|(
name|readString
argument_list|(
name|rosEntry
operator|.
name|getNumber
argument_list|(
literal|0
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|CFFCIDFont
operator|)
name|font
operator|)
operator|.
name|setOrdering
argument_list|(
name|readString
argument_list|(
name|rosEntry
operator|.
name|getNumber
argument_list|(
literal|1
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|CFFCIDFont
operator|)
name|font
operator|)
operator|.
name|setSupplement
argument_list|(
name|rosEntry
operator|.
name|getNumber
argument_list|(
literal|2
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|font
operator|=
operator|new
name|CFFType1Font
argument_list|()
expr_stmt|;
block|}
comment|// name
name|debugFontName
operator|=
name|name
expr_stmt|;
name|font
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
comment|// top dict
name|font
operator|.
name|addValueToTopDict
argument_list|(
literal|"version"
argument_list|,
name|getString
argument_list|(
name|topDict
argument_list|,
literal|"version"
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addValueToTopDict
argument_list|(
literal|"Notice"
argument_list|,
name|getString
argument_list|(
name|topDict
argument_list|,
literal|"Notice"
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addValueToTopDict
argument_list|(
literal|"Copyright"
argument_list|,
name|getString
argument_list|(
name|topDict
argument_list|,
literal|"Copyright"
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addValueToTopDict
argument_list|(
literal|"FullName"
argument_list|,
name|getString
argument_list|(
name|topDict
argument_list|,
literal|"FullName"
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addValueToTopDict
argument_list|(
literal|"FamilyName"
argument_list|,
name|getString
argument_list|(
name|topDict
argument_list|,
literal|"FamilyName"
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addValueToTopDict
argument_list|(
literal|"Weight"
argument_list|,
name|getString
argument_list|(
name|topDict
argument_list|,
literal|"Weight"
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addValueToTopDict
argument_list|(
literal|"isFixedPitch"
argument_list|,
name|getBoolean
argument_list|(
name|topDict
argument_list|,
literal|"isFixedPitch"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addValueToTopDict
argument_list|(
literal|"ItalicAngle"
argument_list|,
name|getNumber
argument_list|(
name|topDict
argument_list|,
literal|"ItalicAngle"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addValueToTopDict
argument_list|(
literal|"UnderlinePosition"
argument_list|,
name|getNumber
argument_list|(
name|topDict
argument_list|,
literal|"UnderlinePosition"
argument_list|,
operator|-
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addValueToTopDict
argument_list|(
literal|"UnderlineThickness"
argument_list|,
name|getNumber
argument_list|(
name|topDict
argument_list|,
literal|"UnderlineThickness"
argument_list|,
literal|50
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addValueToTopDict
argument_list|(
literal|"PaintType"
argument_list|,
name|getNumber
argument_list|(
name|topDict
argument_list|,
literal|"PaintType"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addValueToTopDict
argument_list|(
literal|"CharstringType"
argument_list|,
name|getNumber
argument_list|(
name|topDict
argument_list|,
literal|"CharstringType"
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addValueToTopDict
argument_list|(
literal|"FontMatrix"
argument_list|,
name|getArray
argument_list|(
name|topDict
argument_list|,
literal|"FontMatrix"
argument_list|,
name|Arrays
operator|.
expr|<
name|Number
operator|>
name|asList
argument_list|(
literal|0.001
argument_list|,
operator|(
name|double
operator|)
literal|0
argument_list|,
operator|(
name|double
operator|)
literal|0
argument_list|,
literal|0.001
argument_list|,
operator|(
name|double
operator|)
literal|0
argument_list|,
operator|(
name|double
operator|)
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addValueToTopDict
argument_list|(
literal|"UniqueID"
argument_list|,
name|getNumber
argument_list|(
name|topDict
argument_list|,
literal|"UniqueID"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addValueToTopDict
argument_list|(
literal|"FontBBox"
argument_list|,
name|getArray
argument_list|(
name|topDict
argument_list|,
literal|"FontBBox"
argument_list|,
name|Arrays
operator|.
expr|<
name|Number
operator|>
name|asList
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addValueToTopDict
argument_list|(
literal|"StrokeWidth"
argument_list|,
name|getNumber
argument_list|(
name|topDict
argument_list|,
literal|"StrokeWidth"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addValueToTopDict
argument_list|(
literal|"XUID"
argument_list|,
name|getArray
argument_list|(
name|topDict
argument_list|,
literal|"XUID"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// charstrings index
name|DictData
operator|.
name|Entry
name|charStringsEntry
init|=
name|topDict
operator|.
name|getEntry
argument_list|(
literal|"CharStrings"
argument_list|)
decl_stmt|;
name|int
name|charStringsOffset
init|=
name|charStringsEntry
operator|.
name|getNumber
argument_list|(
literal|0
argument_list|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|input
operator|.
name|setPosition
argument_list|(
name|charStringsOffset
argument_list|)
expr_stmt|;
name|IndexData
name|charStringsIndex
init|=
name|readIndexData
argument_list|(
name|input
argument_list|)
decl_stmt|;
comment|// charset
name|DictData
operator|.
name|Entry
name|charsetEntry
init|=
name|topDict
operator|.
name|getEntry
argument_list|(
literal|"charset"
argument_list|)
decl_stmt|;
name|CFFCharset
name|charset
decl_stmt|;
name|int
name|charsetId
init|=
name|charsetEntry
operator|!=
literal|null
condition|?
name|charsetEntry
operator|.
name|getNumber
argument_list|(
literal|0
argument_list|)
operator|.
name|intValue
argument_list|()
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|charsetId
operator|==
literal|0
condition|)
block|{
name|charset
operator|=
name|CFFISOAdobeCharset
operator|.
name|getInstance
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|charsetId
operator|==
literal|1
condition|)
block|{
name|charset
operator|=
name|CFFExpertCharset
operator|.
name|getInstance
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|charsetId
operator|==
literal|2
condition|)
block|{
name|charset
operator|=
name|CFFExpertSubsetCharset
operator|.
name|getInstance
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|input
operator|.
name|setPosition
argument_list|(
name|charsetId
argument_list|)
expr_stmt|;
name|charset
operator|=
name|readCharset
argument_list|(
name|input
argument_list|,
name|charStringsIndex
operator|.
name|getCount
argument_list|()
argument_list|,
name|isCIDFont
argument_list|)
expr_stmt|;
block|}
name|font
operator|.
name|setCharset
argument_list|(
name|charset
argument_list|)
expr_stmt|;
comment|// charstrings dict
name|font
operator|.
name|getCharStringBytes
argument_list|()
operator|.
name|add
argument_list|(
name|charStringsIndex
operator|.
name|getBytes
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// .notdef
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|charStringsIndex
operator|.
name|getCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|bytes
init|=
name|charStringsIndex
operator|.
name|getBytes
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|font
operator|.
name|getCharStringBytes
argument_list|()
operator|.
name|add
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
comment|// format-specific dictionaries
if|if
condition|(
name|isCIDFont
condition|)
block|{
name|parseCIDFontDicts
argument_list|(
name|topDict
argument_list|,
operator|(
name|CFFCIDFont
operator|)
name|font
argument_list|,
name|charStringsIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parseType1Dicts
argument_list|(
name|topDict
argument_list|,
operator|(
name|CFFType1Font
operator|)
name|font
argument_list|,
name|charset
argument_list|)
expr_stmt|;
block|}
return|return
name|font
return|;
block|}
comment|/**      * Parse dictionaries specific to a CIDFont.      */
specifier|private
name|void
name|parseCIDFontDicts
parameter_list|(
name|DictData
name|topDict
parameter_list|,
name|CFFCIDFont
name|font
parameter_list|,
name|IndexData
name|charStringsIndex
parameter_list|)
throws|throws
name|IOException
block|{
comment|// In a CIDKeyed Font, the Private dictionary isn't in the Top Dict but in the Font dict
comment|// which can be accessed by a lookup using FDArray and FDSelect
name|DictData
operator|.
name|Entry
name|fdArrayEntry
init|=
name|topDict
operator|.
name|getEntry
argument_list|(
literal|"FDArray"
argument_list|)
decl_stmt|;
if|if
condition|(
name|fdArrayEntry
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"FDArray is missing for a CIDKeyed Font."
argument_list|)
throw|;
block|}
comment|// font dict index
name|int
name|fontDictOffset
init|=
name|fdArrayEntry
operator|.
name|getNumber
argument_list|(
literal|0
argument_list|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|input
operator|.
name|setPosition
argument_list|(
name|fontDictOffset
argument_list|)
expr_stmt|;
name|IndexData
name|fdIndex
init|=
name|readIndexData
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|privateDictionaries
init|=
operator|new
name|LinkedList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|fontDictionaries
init|=
operator|new
name|LinkedList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fdIndex
operator|.
name|getCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|byte
index|[]
name|bytes
init|=
name|fdIndex
operator|.
name|getBytes
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|CFFDataInput
name|fontDictInput
init|=
operator|new
name|CFFDataInput
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|DictData
name|fontDict
init|=
name|readDictData
argument_list|(
name|fontDictInput
argument_list|)
decl_stmt|;
comment|// font dict
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|fontDictMap
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|fontDictMap
operator|.
name|put
argument_list|(
literal|"FontName"
argument_list|,
name|getString
argument_list|(
name|fontDict
argument_list|,
literal|"FontName"
argument_list|)
argument_list|)
expr_stmt|;
name|fontDictMap
operator|.
name|put
argument_list|(
literal|"FontType"
argument_list|,
name|getNumber
argument_list|(
name|fontDict
argument_list|,
literal|"FontType"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|fontDictMap
operator|.
name|put
argument_list|(
literal|"FontBBox"
argument_list|,
name|getDelta
argument_list|(
name|fontDict
argument_list|,
literal|"FontBBox"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|fontDictMap
operator|.
name|put
argument_list|(
literal|"FontMatrix"
argument_list|,
name|getDelta
argument_list|(
name|fontDict
argument_list|,
literal|"FontMatrix"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO OD-4 : Add here other keys
name|fontDictionaries
operator|.
name|add
argument_list|(
name|fontDictMap
argument_list|)
expr_stmt|;
comment|// read private dict
name|DictData
operator|.
name|Entry
name|privateEntry
init|=
name|fontDict
operator|.
name|getEntry
argument_list|(
literal|"Private"
argument_list|)
decl_stmt|;
if|if
condition|(
name|privateEntry
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Font DICT invalid without \"Private\" entry"
argument_list|)
throw|;
block|}
name|int
name|privateOffset
init|=
name|privateEntry
operator|.
name|getNumber
argument_list|(
literal|1
argument_list|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|input
operator|.
name|setPosition
argument_list|(
name|privateOffset
argument_list|)
expr_stmt|;
name|int
name|privateSize
init|=
name|privateEntry
operator|.
name|getNumber
argument_list|(
literal|0
argument_list|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|CFFDataInput
name|privateDictData
init|=
operator|new
name|CFFDataInput
argument_list|(
name|input
operator|.
name|readBytes
argument_list|(
name|privateSize
argument_list|)
argument_list|)
decl_stmt|;
name|DictData
name|privateDict
init|=
name|readDictData
argument_list|(
name|privateDictData
argument_list|)
decl_stmt|;
comment|// populate private dict
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|privDict
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|privDict
operator|.
name|put
argument_list|(
literal|"BlueValues"
argument_list|,
name|getDelta
argument_list|(
name|privateDict
argument_list|,
literal|"BlueValues"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|privDict
operator|.
name|put
argument_list|(
literal|"OtherBlues"
argument_list|,
name|getDelta
argument_list|(
name|privateDict
argument_list|,
literal|"OtherBlues"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|privDict
operator|.
name|put
argument_list|(
literal|"FamilyBlues"
argument_list|,
name|getDelta
argument_list|(
name|privateDict
argument_list|,
literal|"FamilyBlues"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|privDict
operator|.
name|put
argument_list|(
literal|"FamilyOtherBlues"
argument_list|,
name|getDelta
argument_list|(
name|privateDict
argument_list|,
literal|"FamilyOtherBlues"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|privDict
operator|.
name|put
argument_list|(
literal|"BlueScale"
argument_list|,
name|getNumber
argument_list|(
name|privateDict
argument_list|,
literal|"BlueScale"
argument_list|,
literal|0.039625
argument_list|)
argument_list|)
expr_stmt|;
name|privDict
operator|.
name|put
argument_list|(
literal|"BlueShift"
argument_list|,
name|getNumber
argument_list|(
name|privateDict
argument_list|,
literal|"BlueShift"
argument_list|,
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|privDict
operator|.
name|put
argument_list|(
literal|"BlueFuzz"
argument_list|,
name|getNumber
argument_list|(
name|privateDict
argument_list|,
literal|"BlueFuzz"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|privDict
operator|.
name|put
argument_list|(
literal|"StdHW"
argument_list|,
name|getNumber
argument_list|(
name|privateDict
argument_list|,
literal|"StdHW"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|privDict
operator|.
name|put
argument_list|(
literal|"StdVW"
argument_list|,
name|getNumber
argument_list|(
name|privateDict
argument_list|,
literal|"StdVW"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|privDict
operator|.
name|put
argument_list|(
literal|"StemSnapH"
argument_list|,
name|getDelta
argument_list|(
name|privateDict
argument_list|,
literal|"StemSnapH"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|privDict
operator|.
name|put
argument_list|(
literal|"StemSnapV"
argument_list|,
name|getDelta
argument_list|(
name|privateDict
argument_list|,
literal|"StemSnapV"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|privDict
operator|.
name|put
argument_list|(
literal|"ForceBold"
argument_list|,
name|getBoolean
argument_list|(
name|privateDict
argument_list|,
literal|"ForceBold"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|privDict
operator|.
name|put
argument_list|(
literal|"LanguageGroup"
argument_list|,
name|getNumber
argument_list|(
name|privateDict
argument_list|,
literal|"LanguageGroup"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|privDict
operator|.
name|put
argument_list|(
literal|"ExpansionFactor"
argument_list|,
name|getNumber
argument_list|(
name|privateDict
argument_list|,
literal|"ExpansionFactor"
argument_list|,
literal|0.06
argument_list|)
argument_list|)
expr_stmt|;
name|privDict
operator|.
name|put
argument_list|(
literal|"initialRandomSeed"
argument_list|,
name|getNumber
argument_list|(
name|privateDict
argument_list|,
literal|"initialRandomSeed"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|privDict
operator|.
name|put
argument_list|(
literal|"defaultWidthX"
argument_list|,
name|getNumber
argument_list|(
name|privateDict
argument_list|,
literal|"defaultWidthX"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|privDict
operator|.
name|put
argument_list|(
literal|"nominalWidthX"
argument_list|,
name|getNumber
argument_list|(
name|privateDict
argument_list|,
literal|"nominalWidthX"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|privateDictionaries
operator|.
name|add
argument_list|(
name|privDict
argument_list|)
expr_stmt|;
comment|// local subrs
name|int
name|localSubrOffset
init|=
operator|(
name|Integer
operator|)
name|getNumber
argument_list|(
name|privateDict
argument_list|,
literal|"Subrs"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|localSubrOffset
operator|==
literal|0
condition|)
block|{
name|privDict
operator|.
name|put
argument_list|(
literal|"Subrs"
argument_list|,
operator|new
name|IndexData
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|input
operator|.
name|setPosition
argument_list|(
name|privateOffset
operator|+
name|localSubrOffset
argument_list|)
expr_stmt|;
name|IndexData
name|idx
init|=
name|readIndexData
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|privDict
operator|.
name|put
argument_list|(
literal|"Subrs"
argument_list|,
name|idx
argument_list|)
expr_stmt|;
block|}
block|}
comment|// font-dict (FD) select
name|DictData
operator|.
name|Entry
name|fdSelectEntry
init|=
name|topDict
operator|.
name|getEntry
argument_list|(
literal|"FDSelect"
argument_list|)
decl_stmt|;
name|int
name|fdSelectPos
init|=
name|fdSelectEntry
operator|.
name|getNumber
argument_list|(
literal|0
argument_list|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|input
operator|.
name|setPosition
argument_list|(
name|fdSelectPos
argument_list|)
expr_stmt|;
name|FDSelect
name|fdSelect
init|=
name|readFDSelect
argument_list|(
name|input
argument_list|,
name|charStringsIndex
operator|.
name|getCount
argument_list|()
argument_list|,
name|font
argument_list|)
decl_stmt|;
comment|// todo: almost certainly erroneous - CIDFonts do not have a top-level private dict
comment|//font.addValueToPrivateDict("defaultWidthX", 1000);
comment|//font.addValueToPrivateDict("nominalWidthX", 0);
name|font
operator|.
name|setFontDict
argument_list|(
name|fontDictionaries
argument_list|)
expr_stmt|;
name|font
operator|.
name|setPrivDict
argument_list|(
name|privateDictionaries
argument_list|)
expr_stmt|;
name|font
operator|.
name|setFdSelect
argument_list|(
name|fdSelect
argument_list|)
expr_stmt|;
block|}
comment|/**      * Parse dictionaries specific to a Type 1-equivalent font.      */
specifier|private
name|void
name|parseType1Dicts
parameter_list|(
name|DictData
name|topDict
parameter_list|,
name|CFFType1Font
name|font
parameter_list|,
name|CFFCharset
name|charset
parameter_list|)
throws|throws
name|IOException
block|{
comment|// encoding
name|DictData
operator|.
name|Entry
name|encodingEntry
init|=
name|topDict
operator|.
name|getEntry
argument_list|(
literal|"Encoding"
argument_list|)
decl_stmt|;
name|CFFEncoding
name|encoding
decl_stmt|;
name|int
name|encodingId
init|=
name|encodingEntry
operator|!=
literal|null
condition|?
name|encodingEntry
operator|.
name|getNumber
argument_list|(
literal|0
argument_list|)
operator|.
name|intValue
argument_list|()
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|encodingId
operator|==
literal|0
condition|)
block|{
name|encoding
operator|=
name|CFFStandardEncoding
operator|.
name|getInstance
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|encodingId
operator|==
literal|1
condition|)
block|{
name|encoding
operator|=
name|CFFExpertEncoding
operator|.
name|getInstance
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|input
operator|.
name|setPosition
argument_list|(
name|encodingId
argument_list|)
expr_stmt|;
name|encoding
operator|=
name|readEncoding
argument_list|(
name|input
argument_list|,
name|charset
argument_list|)
expr_stmt|;
block|}
name|font
operator|.
name|setEncoding
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
comment|// read private dict
name|DictData
operator|.
name|Entry
name|privateEntry
init|=
name|topDict
operator|.
name|getEntry
argument_list|(
literal|"Private"
argument_list|)
decl_stmt|;
name|int
name|privateOffset
init|=
name|privateEntry
operator|.
name|getNumber
argument_list|(
literal|1
argument_list|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|input
operator|.
name|setPosition
argument_list|(
name|privateOffset
argument_list|)
expr_stmt|;
name|int
name|privateSize
init|=
name|privateEntry
operator|.
name|getNumber
argument_list|(
literal|0
argument_list|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|CFFDataInput
name|privateDictData
init|=
operator|new
name|CFFDataInput
argument_list|(
name|input
operator|.
name|readBytes
argument_list|(
name|privateSize
argument_list|)
argument_list|)
decl_stmt|;
name|DictData
name|privateDict
init|=
name|readDictData
argument_list|(
name|privateDictData
argument_list|)
decl_stmt|;
comment|// populate private dict
name|font
operator|.
name|addToPrivateDict
argument_list|(
literal|"BlueValues"
argument_list|,
name|getDelta
argument_list|(
name|privateDict
argument_list|,
literal|"BlueValues"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addToPrivateDict
argument_list|(
literal|"OtherBlues"
argument_list|,
name|getDelta
argument_list|(
name|privateDict
argument_list|,
literal|"OtherBlues"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addToPrivateDict
argument_list|(
literal|"FamilyBlues"
argument_list|,
name|getDelta
argument_list|(
name|privateDict
argument_list|,
literal|"FamilyBlues"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addToPrivateDict
argument_list|(
literal|"FamilyOtherBlues"
argument_list|,
name|getDelta
argument_list|(
name|privateDict
argument_list|,
literal|"FamilyOtherBlues"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addToPrivateDict
argument_list|(
literal|"BlueScale"
argument_list|,
name|getNumber
argument_list|(
name|privateDict
argument_list|,
literal|"BlueScale"
argument_list|,
literal|0.039625
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addToPrivateDict
argument_list|(
literal|"BlueShift"
argument_list|,
name|getNumber
argument_list|(
name|privateDict
argument_list|,
literal|"BlueShift"
argument_list|,
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addToPrivateDict
argument_list|(
literal|"BlueFuzz"
argument_list|,
name|getNumber
argument_list|(
name|privateDict
argument_list|,
literal|"BlueFuzz"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addToPrivateDict
argument_list|(
literal|"StdHW"
argument_list|,
name|getNumber
argument_list|(
name|privateDict
argument_list|,
literal|"StdHW"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addToPrivateDict
argument_list|(
literal|"StdVW"
argument_list|,
name|getNumber
argument_list|(
name|privateDict
argument_list|,
literal|"StdVW"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addToPrivateDict
argument_list|(
literal|"StemSnapH"
argument_list|,
name|getDelta
argument_list|(
name|privateDict
argument_list|,
literal|"StemSnapH"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addToPrivateDict
argument_list|(
literal|"StemSnapV"
argument_list|,
name|getDelta
argument_list|(
name|privateDict
argument_list|,
literal|"StemSnapV"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addToPrivateDict
argument_list|(
literal|"ForceBold"
argument_list|,
name|getBoolean
argument_list|(
name|privateDict
argument_list|,
literal|"ForceBold"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addToPrivateDict
argument_list|(
literal|"LanguageGroup"
argument_list|,
name|getNumber
argument_list|(
name|privateDict
argument_list|,
literal|"LanguageGroup"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addToPrivateDict
argument_list|(
literal|"ExpansionFactor"
argument_list|,
name|getNumber
argument_list|(
name|privateDict
argument_list|,
literal|"ExpansionFactor"
argument_list|,
literal|0.06
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addToPrivateDict
argument_list|(
literal|"initialRandomSeed"
argument_list|,
name|getNumber
argument_list|(
name|privateDict
argument_list|,
literal|"initialRandomSeed"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addToPrivateDict
argument_list|(
literal|"defaultWidthX"
argument_list|,
name|getNumber
argument_list|(
name|privateDict
argument_list|,
literal|"defaultWidthX"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addToPrivateDict
argument_list|(
literal|"nominalWidthX"
argument_list|,
name|getNumber
argument_list|(
name|privateDict
argument_list|,
literal|"nominalWidthX"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// local subrs
name|int
name|localSubrOffset
init|=
operator|(
name|Integer
operator|)
name|getNumber
argument_list|(
name|privateDict
argument_list|,
literal|"Subrs"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|localSubrOffset
operator|==
literal|0
condition|)
block|{
name|font
operator|.
name|addToPrivateDict
argument_list|(
literal|"Subrs"
argument_list|,
operator|new
name|IndexData
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|input
operator|.
name|setPosition
argument_list|(
name|privateOffset
operator|+
name|localSubrOffset
argument_list|)
expr_stmt|;
name|font
operator|.
name|addToPrivateDict
argument_list|(
literal|"Subrs"
argument_list|,
name|readIndexData
argument_list|(
name|input
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|readString
parameter_list|(
name|int
name|index
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|index
operator|>=
literal|0
operator|&&
name|index
operator|<=
literal|390
condition|)
block|{
return|return
name|CFFStandardString
operator|.
name|getName
argument_list|(
name|index
argument_list|)
return|;
block|}
if|if
condition|(
name|index
operator|-
literal|391
operator|<
name|stringIndex
operator|.
name|getCount
argument_list|()
condition|)
block|{
name|DataInput
name|dataInput
init|=
operator|new
name|DataInput
argument_list|(
name|stringIndex
operator|.
name|getBytes
argument_list|(
name|index
operator|-
literal|391
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|dataInput
operator|.
name|getString
argument_list|()
return|;
block|}
else|else
block|{
comment|// technically this maps to .notdef, but we need a unique sid name
return|return
literal|"SID"
operator|+
name|index
return|;
block|}
block|}
specifier|private
name|String
name|getString
parameter_list|(
name|DictData
name|dict
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|DictData
operator|.
name|Entry
name|entry
init|=
name|dict
operator|.
name|getEntry
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|entry
operator|!=
literal|null
condition|?
name|readString
argument_list|(
name|entry
operator|.
name|getNumber
argument_list|(
literal|0
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
else|:
literal|null
return|;
block|}
specifier|private
name|Boolean
name|getBoolean
parameter_list|(
name|DictData
name|dict
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|defaultValue
parameter_list|)
throws|throws
name|IOException
block|{
name|DictData
operator|.
name|Entry
name|entry
init|=
name|dict
operator|.
name|getEntry
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|entry
operator|!=
literal|null
condition|?
name|entry
operator|.
name|getBoolean
argument_list|(
literal|0
argument_list|)
else|:
name|defaultValue
return|;
block|}
specifier|private
name|Number
name|getNumber
parameter_list|(
name|DictData
name|dict
parameter_list|,
name|String
name|name
parameter_list|,
name|Number
name|defaultValue
parameter_list|)
throws|throws
name|IOException
block|{
name|DictData
operator|.
name|Entry
name|entry
init|=
name|dict
operator|.
name|getEntry
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|entry
operator|!=
literal|null
condition|?
name|entry
operator|.
name|getNumber
argument_list|(
literal|0
argument_list|)
else|:
name|defaultValue
return|;
block|}
comment|// TODO Where is the difference to getDelta??
specifier|private
name|List
argument_list|<
name|Number
argument_list|>
name|getArray
parameter_list|(
name|DictData
name|dict
parameter_list|,
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|Number
argument_list|>
name|defaultValue
parameter_list|)
throws|throws
name|IOException
block|{
name|DictData
operator|.
name|Entry
name|entry
init|=
name|dict
operator|.
name|getEntry
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|entry
operator|!=
literal|null
condition|?
name|entry
operator|.
name|getArray
argument_list|()
else|:
name|defaultValue
return|;
block|}
comment|// TODO Where is the difference to getArray??
specifier|private
name|List
argument_list|<
name|Number
argument_list|>
name|getDelta
parameter_list|(
name|DictData
name|dict
parameter_list|,
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|Number
argument_list|>
name|defaultValue
parameter_list|)
throws|throws
name|IOException
block|{
name|DictData
operator|.
name|Entry
name|entry
init|=
name|dict
operator|.
name|getEntry
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|entry
operator|!=
literal|null
condition|?
name|entry
operator|.
name|getArray
argument_list|()
else|:
name|defaultValue
return|;
block|}
specifier|private
name|CFFEncoding
name|readEncoding
parameter_list|(
name|CFFDataInput
name|dataInput
parameter_list|,
name|CFFCharset
name|charset
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|format
init|=
name|dataInput
operator|.
name|readCard8
argument_list|()
decl_stmt|;
name|int
name|baseFormat
init|=
name|format
operator|&
literal|0x7f
decl_stmt|;
if|if
condition|(
name|baseFormat
operator|==
literal|0
condition|)
block|{
return|return
name|readFormat0Encoding
argument_list|(
name|dataInput
argument_list|,
name|charset
argument_list|,
name|format
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|baseFormat
operator|==
literal|1
condition|)
block|{
return|return
name|readFormat1Encoding
argument_list|(
name|dataInput
argument_list|,
name|charset
argument_list|,
name|format
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
block|}
specifier|private
name|Format0Encoding
name|readFormat0Encoding
parameter_list|(
name|CFFDataInput
name|dataInput
parameter_list|,
name|CFFCharset
name|charset
parameter_list|,
name|int
name|format
parameter_list|)
throws|throws
name|IOException
block|{
name|Format0Encoding
name|encoding
init|=
operator|new
name|Format0Encoding
argument_list|()
decl_stmt|;
name|encoding
operator|.
name|format
operator|=
name|format
expr_stmt|;
name|encoding
operator|.
name|nCodes
operator|=
name|dataInput
operator|.
name|readCard8
argument_list|()
expr_stmt|;
name|encoding
operator|.
name|code
operator|=
operator|new
name|int
index|[
name|encoding
operator|.
name|nCodes
index|]
expr_stmt|;
name|encoding
operator|.
name|add
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|".notdef"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|gid
init|=
literal|1
init|;
name|gid
operator|<=
name|encoding
operator|.
name|nCodes
condition|;
name|gid
operator|++
control|)
block|{
name|int
name|code
init|=
name|dataInput
operator|.
name|readCard8
argument_list|()
decl_stmt|;
name|encoding
operator|.
name|code
index|[
name|gid
operator|-
literal|1
index|]
operator|=
name|code
expr_stmt|;
name|int
name|sid
init|=
name|charset
operator|.
name|getSIDForGID
argument_list|(
name|gid
argument_list|)
decl_stmt|;
name|encoding
operator|.
name|add
argument_list|(
name|code
argument_list|,
name|sid
argument_list|,
name|readString
argument_list|(
name|sid
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|format
operator|&
literal|0x80
operator|)
operator|!=
literal|0
condition|)
block|{
name|readSupplement
argument_list|(
name|dataInput
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
block|}
return|return
name|encoding
return|;
block|}
specifier|private
name|Format1Encoding
name|readFormat1Encoding
parameter_list|(
name|CFFDataInput
name|dataInput
parameter_list|,
name|CFFCharset
name|charset
parameter_list|,
name|int
name|format
parameter_list|)
throws|throws
name|IOException
block|{
name|Format1Encoding
name|encoding
init|=
operator|new
name|Format1Encoding
argument_list|()
decl_stmt|;
name|encoding
operator|.
name|format
operator|=
name|format
expr_stmt|;
name|encoding
operator|.
name|nRanges
operator|=
name|dataInput
operator|.
name|readCard8
argument_list|()
expr_stmt|;
name|encoding
operator|.
name|range
operator|=
operator|new
name|Format1Encoding
operator|.
name|Range1
index|[
name|encoding
operator|.
name|nRanges
index|]
expr_stmt|;
name|encoding
operator|.
name|add
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|".notdef"
argument_list|)
expr_stmt|;
name|int
name|gid
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|encoding
operator|.
name|range
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Format1Encoding
operator|.
name|Range1
name|range
init|=
operator|new
name|Format1Encoding
operator|.
name|Range1
argument_list|()
decl_stmt|;
name|range
operator|.
name|first
operator|=
name|dataInput
operator|.
name|readCard8
argument_list|()
expr_stmt|;
name|range
operator|.
name|nLeft
operator|=
name|dataInput
operator|.
name|readCard8
argument_list|()
expr_stmt|;
name|encoding
operator|.
name|range
index|[
name|i
index|]
operator|=
name|range
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|1
operator|+
name|range
operator|.
name|nLeft
condition|;
name|j
operator|++
control|)
block|{
name|int
name|sid
init|=
name|charset
operator|.
name|getSIDForGID
argument_list|(
name|gid
argument_list|)
decl_stmt|;
name|int
name|code
init|=
name|range
operator|.
name|first
operator|+
name|j
decl_stmt|;
name|encoding
operator|.
name|add
argument_list|(
name|code
argument_list|,
name|sid
argument_list|,
name|readString
argument_list|(
name|sid
argument_list|)
argument_list|)
expr_stmt|;
name|gid
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|(
name|format
operator|&
literal|0x80
operator|)
operator|!=
literal|0
condition|)
block|{
name|readSupplement
argument_list|(
name|dataInput
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
block|}
return|return
name|encoding
return|;
block|}
specifier|private
name|void
name|readSupplement
parameter_list|(
name|CFFDataInput
name|dataInput
parameter_list|,
name|EmbeddedEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
name|encoding
operator|.
name|nSups
operator|=
name|dataInput
operator|.
name|readCard8
argument_list|()
expr_stmt|;
name|encoding
operator|.
name|supplement
operator|=
operator|new
name|EmbeddedEncoding
operator|.
name|Supplement
index|[
name|encoding
operator|.
name|nSups
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|encoding
operator|.
name|supplement
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|EmbeddedEncoding
operator|.
name|Supplement
name|supplement
init|=
operator|new
name|EmbeddedEncoding
operator|.
name|Supplement
argument_list|()
decl_stmt|;
name|supplement
operator|.
name|code
operator|=
name|dataInput
operator|.
name|readCard8
argument_list|()
expr_stmt|;
name|supplement
operator|.
name|sid
operator|=
name|dataInput
operator|.
name|readSID
argument_list|()
expr_stmt|;
name|supplement
operator|.
name|name
operator|=
name|readString
argument_list|(
name|supplement
operator|.
name|sid
argument_list|)
expr_stmt|;
name|encoding
operator|.
name|supplement
index|[
name|i
index|]
operator|=
name|supplement
expr_stmt|;
block|}
block|}
comment|/**      * Read the FDSelect Data according to the format.      * @param dataInput      * @param nGlyphs      * @param ros      * @return the FDSelect data      * @throws IOException      */
specifier|private
name|FDSelect
name|readFDSelect
parameter_list|(
name|CFFDataInput
name|dataInput
parameter_list|,
name|int
name|nGlyphs
parameter_list|,
name|CFFCIDFont
name|ros
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|format
init|=
name|dataInput
operator|.
name|readCard8
argument_list|()
decl_stmt|;
if|if
condition|(
name|format
operator|==
literal|0
condition|)
block|{
return|return
name|readFormat0FDSelect
argument_list|(
name|dataInput
argument_list|,
name|format
argument_list|,
name|nGlyphs
argument_list|,
name|ros
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|format
operator|==
literal|3
condition|)
block|{
return|return
name|readFormat3FDSelect
argument_list|(
name|dataInput
argument_list|,
name|format
argument_list|,
name|nGlyphs
argument_list|,
name|ros
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
block|}
comment|/**      * Read the Format 0 of the FDSelect data structure.      * @param dataInput      * @param format      * @param nGlyphs      * @param ros      * @return the Format 0 of the FDSelect data      * @throws IOException      */
specifier|private
name|Format0FDSelect
name|readFormat0FDSelect
parameter_list|(
name|CFFDataInput
name|dataInput
parameter_list|,
name|int
name|format
parameter_list|,
name|int
name|nGlyphs
parameter_list|,
name|CFFCIDFont
name|ros
parameter_list|)
throws|throws
name|IOException
block|{
name|Format0FDSelect
name|fdselect
init|=
operator|new
name|Format0FDSelect
argument_list|(
name|ros
argument_list|)
decl_stmt|;
name|fdselect
operator|.
name|format
operator|=
name|format
expr_stmt|;
name|fdselect
operator|.
name|fds
operator|=
operator|new
name|int
index|[
name|nGlyphs
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fdselect
operator|.
name|fds
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|fdselect
operator|.
name|fds
index|[
name|i
index|]
operator|=
name|dataInput
operator|.
name|readCard8
argument_list|()
expr_stmt|;
block|}
return|return
name|fdselect
return|;
block|}
comment|/**      * Read the Format 3 of the FDSelect data structure.      *       * @param dataInput      * @param format      * @param nGlyphs      * @param ros      * @return the Format 3 of the FDSelect data      * @throws IOException      */
specifier|private
name|Format3FDSelect
name|readFormat3FDSelect
parameter_list|(
name|CFFDataInput
name|dataInput
parameter_list|,
name|int
name|format
parameter_list|,
name|int
name|nGlyphs
parameter_list|,
name|CFFCIDFont
name|ros
parameter_list|)
throws|throws
name|IOException
block|{
name|Format3FDSelect
name|fdselect
init|=
operator|new
name|Format3FDSelect
argument_list|(
name|ros
argument_list|)
decl_stmt|;
name|fdselect
operator|.
name|format
operator|=
name|format
expr_stmt|;
name|fdselect
operator|.
name|nbRanges
operator|=
name|dataInput
operator|.
name|readCard16
argument_list|()
expr_stmt|;
name|fdselect
operator|.
name|range3
operator|=
operator|new
name|Range3
index|[
name|fdselect
operator|.
name|nbRanges
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fdselect
operator|.
name|nbRanges
condition|;
name|i
operator|++
control|)
block|{
name|Range3
name|r3
init|=
operator|new
name|Range3
argument_list|()
decl_stmt|;
name|r3
operator|.
name|first
operator|=
name|dataInput
operator|.
name|readCard16
argument_list|()
expr_stmt|;
name|r3
operator|.
name|fd
operator|=
name|dataInput
operator|.
name|readCard8
argument_list|()
expr_stmt|;
name|fdselect
operator|.
name|range3
index|[
name|i
index|]
operator|=
name|r3
expr_stmt|;
block|}
name|fdselect
operator|.
name|sentinel
operator|=
name|dataInput
operator|.
name|readCard16
argument_list|()
expr_stmt|;
return|return
name|fdselect
return|;
block|}
comment|/**      *  Format 3 FDSelect data.      */
specifier|private
specifier|static
class|class
name|Format3FDSelect
extends|extends
name|FDSelect
block|{
specifier|private
name|int
name|format
decl_stmt|;
specifier|private
name|int
name|nbRanges
decl_stmt|;
specifier|private
name|Range3
index|[]
name|range3
decl_stmt|;
specifier|private
name|int
name|sentinel
decl_stmt|;
specifier|private
name|Format3FDSelect
parameter_list|(
name|CFFCIDFont
name|owner
parameter_list|)
block|{
name|super
argument_list|(
name|owner
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getFDIndex
parameter_list|(
name|int
name|gid
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nbRanges
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|range3
index|[
name|i
index|]
operator|.
name|first
operator|<=
name|gid
condition|)
block|{
if|if
condition|(
name|i
operator|+
literal|1
operator|<
name|nbRanges
condition|)
block|{
if|if
condition|(
name|range3
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|first
operator|>
name|gid
condition|)
block|{
return|return
name|range3
index|[
name|i
index|]
operator|.
name|fd
return|;
block|}
else|else
block|{
comment|// go to next range
block|}
block|}
else|else
block|{
comment|// last range reach, the sentinel must be greater than gid
if|if
condition|(
name|sentinel
operator|>
name|gid
condition|)
block|{
return|return
name|range3
index|[
name|i
index|]
operator|.
name|fd
return|;
block|}
else|else
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
block|}
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"[format="
operator|+
name|format
operator|+
literal|" nbRanges="
operator|+
name|nbRanges
operator|+
literal|", range3="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|range3
argument_list|)
operator|+
literal|" sentinel="
operator|+
name|sentinel
operator|+
literal|"]"
return|;
block|}
block|}
comment|/**      * Structure of a Range3 element.      */
specifier|private
specifier|static
class|class
name|Range3
block|{
specifier|private
name|int
name|first
decl_stmt|;
specifier|private
name|int
name|fd
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"[first="
operator|+
name|first
operator|+
literal|", fd="
operator|+
name|fd
operator|+
literal|"]"
return|;
block|}
block|}
comment|/**      *  Format 0 FDSelect.      */
specifier|private
specifier|static
class|class
name|Format0FDSelect
extends|extends
name|FDSelect
block|{
specifier|private
name|int
name|format
decl_stmt|;
specifier|private
name|int
index|[]
name|fds
decl_stmt|;
specifier|private
name|Format0FDSelect
parameter_list|(
name|CFFCIDFont
name|owner
parameter_list|)
block|{
name|super
argument_list|(
name|owner
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getFDIndex
parameter_list|(
name|int
name|gid
parameter_list|)
block|{
if|if
condition|(
name|gid
operator|<
name|fds
operator|.
name|length
condition|)
block|{
return|return
name|fds
index|[
name|gid
index|]
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"[fds="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|fds
argument_list|)
operator|+
literal|"]"
return|;
block|}
block|}
specifier|private
name|CFFCharset
name|readCharset
parameter_list|(
name|CFFDataInput
name|dataInput
parameter_list|,
name|int
name|nGlyphs
parameter_list|,
name|boolean
name|isCIDFont
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|format
init|=
name|dataInput
operator|.
name|readCard8
argument_list|()
decl_stmt|;
if|if
condition|(
name|format
operator|==
literal|0
condition|)
block|{
return|return
name|readFormat0Charset
argument_list|(
name|dataInput
argument_list|,
name|format
argument_list|,
name|nGlyphs
argument_list|,
name|isCIDFont
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|format
operator|==
literal|1
condition|)
block|{
return|return
name|readFormat1Charset
argument_list|(
name|dataInput
argument_list|,
name|format
argument_list|,
name|nGlyphs
argument_list|,
name|isCIDFont
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|format
operator|==
literal|2
condition|)
block|{
return|return
name|readFormat2Charset
argument_list|(
name|dataInput
argument_list|,
name|format
argument_list|,
name|nGlyphs
argument_list|,
name|isCIDFont
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
block|}
specifier|private
name|Format0Charset
name|readFormat0Charset
parameter_list|(
name|CFFDataInput
name|dataInput
parameter_list|,
name|int
name|format
parameter_list|,
name|int
name|nGlyphs
parameter_list|,
name|boolean
name|isCIDFont
parameter_list|)
throws|throws
name|IOException
block|{
name|Format0Charset
name|charset
init|=
operator|new
name|Format0Charset
argument_list|(
name|isCIDFont
argument_list|)
decl_stmt|;
name|charset
operator|.
name|format
operator|=
name|format
expr_stmt|;
name|charset
operator|.
name|glyph
operator|=
operator|new
name|int
index|[
name|nGlyphs
index|]
expr_stmt|;
name|charset
operator|.
name|glyph
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|isCIDFont
condition|)
block|{
name|charset
operator|.
name|addCID
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|charset
operator|.
name|addSID
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|".notdef"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|gid
init|=
literal|1
init|;
name|gid
operator|<
name|charset
operator|.
name|glyph
operator|.
name|length
condition|;
name|gid
operator|++
control|)
block|{
name|int
name|sid
init|=
name|dataInput
operator|.
name|readSID
argument_list|()
decl_stmt|;
name|charset
operator|.
name|glyph
index|[
name|gid
index|]
operator|=
name|sid
expr_stmt|;
if|if
condition|(
name|isCIDFont
condition|)
block|{
name|charset
operator|.
name|addCID
argument_list|(
name|gid
argument_list|,
name|sid
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|charset
operator|.
name|addSID
argument_list|(
name|gid
argument_list|,
name|sid
argument_list|,
name|readString
argument_list|(
name|sid
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|charset
return|;
block|}
specifier|private
name|Format1Charset
name|readFormat1Charset
parameter_list|(
name|CFFDataInput
name|dataInput
parameter_list|,
name|int
name|format
parameter_list|,
name|int
name|nGlyphs
parameter_list|,
name|boolean
name|isCIDFont
parameter_list|)
throws|throws
name|IOException
block|{
name|Format1Charset
name|charset
init|=
operator|new
name|Format1Charset
argument_list|(
name|isCIDFont
argument_list|)
decl_stmt|;
name|charset
operator|.
name|format
operator|=
name|format
expr_stmt|;
name|List
argument_list|<
name|Format1Charset
operator|.
name|Range1
argument_list|>
name|ranges
init|=
operator|new
name|ArrayList
argument_list|<
name|Format1Charset
operator|.
name|Range1
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|isCIDFont
condition|)
block|{
name|charset
operator|.
name|addCID
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|charset
operator|.
name|addSID
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|".notdef"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|gid
init|=
literal|1
init|;
name|gid
operator|<
name|nGlyphs
condition|;
name|gid
operator|++
control|)
block|{
name|Format1Charset
operator|.
name|Range1
name|range
init|=
operator|new
name|Format1Charset
operator|.
name|Range1
argument_list|()
decl_stmt|;
name|range
operator|.
name|first
operator|=
name|dataInput
operator|.
name|readSID
argument_list|()
expr_stmt|;
name|range
operator|.
name|nLeft
operator|=
name|dataInput
operator|.
name|readCard8
argument_list|()
expr_stmt|;
name|ranges
operator|.
name|add
argument_list|(
name|range
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|1
operator|+
name|range
operator|.
name|nLeft
condition|;
name|j
operator|++
control|)
block|{
name|int
name|sid
init|=
name|range
operator|.
name|first
operator|+
name|j
decl_stmt|;
if|if
condition|(
name|isCIDFont
condition|)
block|{
name|charset
operator|.
name|addCID
argument_list|(
name|gid
operator|+
name|j
argument_list|,
name|sid
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|charset
operator|.
name|addSID
argument_list|(
name|gid
operator|+
name|j
argument_list|,
name|sid
argument_list|,
name|readString
argument_list|(
name|sid
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|gid
operator|+=
name|range
operator|.
name|nLeft
expr_stmt|;
block|}
name|charset
operator|.
name|range
operator|=
name|ranges
operator|.
name|toArray
argument_list|(
operator|new
name|Format1Charset
operator|.
name|Range1
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
return|return
name|charset
return|;
block|}
specifier|private
name|Format2Charset
name|readFormat2Charset
parameter_list|(
name|CFFDataInput
name|dataInput
parameter_list|,
name|int
name|format
parameter_list|,
name|int
name|nGlyphs
parameter_list|,
name|boolean
name|isCIDFont
parameter_list|)
throws|throws
name|IOException
block|{
name|Format2Charset
name|charset
init|=
operator|new
name|Format2Charset
argument_list|(
name|isCIDFont
argument_list|)
decl_stmt|;
name|charset
operator|.
name|format
operator|=
name|format
expr_stmt|;
name|charset
operator|.
name|range
operator|=
operator|new
name|Format2Charset
operator|.
name|Range2
index|[
literal|0
index|]
expr_stmt|;
if|if
condition|(
name|isCIDFont
condition|)
block|{
name|charset
operator|.
name|addCID
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|charset
operator|.
name|addSID
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|".notdef"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|gid
init|=
literal|1
init|;
name|gid
operator|<
name|nGlyphs
condition|;
name|gid
operator|++
control|)
block|{
name|Format2Charset
operator|.
name|Range2
index|[]
name|newRange
init|=
operator|new
name|Format2Charset
operator|.
name|Range2
index|[
name|charset
operator|.
name|range
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|charset
operator|.
name|range
argument_list|,
literal|0
argument_list|,
name|newRange
argument_list|,
literal|0
argument_list|,
name|charset
operator|.
name|range
operator|.
name|length
argument_list|)
expr_stmt|;
name|charset
operator|.
name|range
operator|=
name|newRange
expr_stmt|;
name|Format2Charset
operator|.
name|Range2
name|range
init|=
operator|new
name|Format2Charset
operator|.
name|Range2
argument_list|()
decl_stmt|;
name|range
operator|.
name|first
operator|=
name|dataInput
operator|.
name|readSID
argument_list|()
expr_stmt|;
name|range
operator|.
name|nLeft
operator|=
name|dataInput
operator|.
name|readCard16
argument_list|()
expr_stmt|;
name|charset
operator|.
name|range
index|[
name|charset
operator|.
name|range
operator|.
name|length
operator|-
literal|1
index|]
operator|=
name|range
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|1
operator|+
name|range
operator|.
name|nLeft
condition|;
name|j
operator|++
control|)
block|{
name|int
name|sid
init|=
name|range
operator|.
name|first
operator|+
name|j
decl_stmt|;
if|if
condition|(
name|isCIDFont
condition|)
block|{
name|charset
operator|.
name|addCID
argument_list|(
name|gid
operator|+
name|j
argument_list|,
name|sid
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|charset
operator|.
name|addSID
argument_list|(
name|gid
operator|+
name|j
argument_list|,
name|sid
argument_list|,
name|readString
argument_list|(
name|sid
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|gid
operator|+=
name|range
operator|.
name|nLeft
expr_stmt|;
block|}
return|return
name|charset
return|;
block|}
comment|/**      * Inner class holding the header of a CFF font.       */
specifier|private
specifier|static
class|class
name|Header
block|{
specifier|private
name|int
name|major
decl_stmt|;
specifier|private
name|int
name|minor
decl_stmt|;
specifier|private
name|int
name|hdrSize
decl_stmt|;
specifier|private
name|int
name|offSize
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"[major="
operator|+
name|major
operator|+
literal|", minor="
operator|+
name|minor
operator|+
literal|", hdrSize="
operator|+
name|hdrSize
operator|+
literal|", offSize="
operator|+
name|offSize
operator|+
literal|"]"
return|;
block|}
block|}
comment|/**      * Inner class holding the DictData of a CFF font.       */
specifier|private
specifier|static
class|class
name|DictData
block|{
specifier|private
name|List
argument_list|<
name|Entry
argument_list|>
name|entries
init|=
literal|null
decl_stmt|;
specifier|public
name|Entry
name|getEntry
parameter_list|(
name|CFFOperator
operator|.
name|Key
name|key
parameter_list|)
block|{
return|return
name|getEntry
argument_list|(
name|CFFOperator
operator|.
name|getOperator
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Entry
name|getEntry
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|getEntry
argument_list|(
name|CFFOperator
operator|.
name|getOperator
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Entry
name|getEntry
parameter_list|(
name|CFFOperator
name|operator
parameter_list|)
block|{
for|for
control|(
name|Entry
name|entry
range|:
name|entries
control|)
block|{
comment|// Check for null entry before comparing the Font
if|if
condition|(
name|entry
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|operator
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|operator
operator|.
name|equals
argument_list|(
name|operator
argument_list|)
condition|)
block|{
return|return
name|entry
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**          * {@inheritDoc}           */
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"[entries="
operator|+
name|entries
operator|+
literal|"]"
return|;
block|}
comment|/**          * Inner class holding an operand of a CFF font.           */
specifier|private
specifier|static
class|class
name|Entry
block|{
specifier|private
name|List
argument_list|<
name|Number
argument_list|>
name|operands
init|=
operator|new
name|ArrayList
argument_list|<
name|Number
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|CFFOperator
name|operator
init|=
literal|null
decl_stmt|;
specifier|public
name|Number
name|getNumber
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|operands
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
specifier|public
name|Boolean
name|getBoolean
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Number
name|operand
init|=
name|operands
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|operand
operator|instanceof
name|Integer
condition|)
block|{
switch|switch
condition|(
name|operand
operator|.
name|intValue
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
return|return
name|Boolean
operator|.
name|FALSE
return|;
case|case
literal|1
case|:
return|return
name|Boolean
operator|.
name|TRUE
return|;
default|default:
break|break;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
comment|// TODO unused??
specifier|public
name|Integer
name|getSID
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Number
name|operand
init|=
name|operands
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|operand
operator|instanceof
name|Integer
condition|)
block|{
return|return
operator|(
name|Integer
operator|)
name|operand
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
comment|// TODO Where is the difference to getDelta??
specifier|public
name|List
argument_list|<
name|Number
argument_list|>
name|getArray
parameter_list|()
block|{
return|return
name|operands
return|;
block|}
comment|// TODO Where is the difference to getArray??
specifier|public
name|List
argument_list|<
name|Number
argument_list|>
name|getDelta
parameter_list|()
block|{
return|return
name|operands
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"[operands="
operator|+
name|operands
operator|+
literal|", operator="
operator|+
name|operator
operator|+
literal|"]"
return|;
block|}
block|}
block|}
comment|/**      * Inner class representing an embedded CFF encoding.       */
specifier|abstract
specifier|static
class|class
name|EmbeddedEncoding
extends|extends
name|CFFEncoding
block|{
specifier|private
name|int
name|nSups
decl_stmt|;
specifier|private
name|Supplement
index|[]
name|supplement
decl_stmt|;
comment|/*List<Supplement> getSupplements()         {             if (supplement == null)             {                 return Collections.emptyList();             }             return Arrays.asList(supplement);         }*/
comment|/**          * Inner class representing a supplement for an encoding.           */
specifier|static
class|class
name|Supplement
block|{
specifier|private
name|int
name|code
decl_stmt|;
specifier|private
name|int
name|sid
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|public
name|int
name|getCode
parameter_list|()
block|{
return|return
name|code
return|;
block|}
specifier|public
name|int
name|getSID
parameter_list|()
block|{
return|return
name|sid
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"[code="
operator|+
name|code
operator|+
literal|", sid="
operator|+
name|sid
operator|+
literal|"]"
return|;
block|}
block|}
block|}
comment|/**      * Inner class representing a Format0 encoding.       */
specifier|private
specifier|static
class|class
name|Format0Encoding
extends|extends
name|EmbeddedEncoding
block|{
specifier|private
name|int
name|format
decl_stmt|;
specifier|private
name|int
name|nCodes
decl_stmt|;
specifier|private
name|int
index|[]
name|code
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"[format="
operator|+
name|format
operator|+
literal|", nCodes="
operator|+
name|nCodes
operator|+
literal|", code="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|code
argument_list|)
operator|+
literal|", supplement="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|super
operator|.
name|supplement
argument_list|)
operator|+
literal|"]"
return|;
block|}
block|}
comment|/**      * Inner class representing a Format1 encoding.       */
specifier|private
specifier|static
class|class
name|Format1Encoding
extends|extends
name|EmbeddedEncoding
block|{
specifier|private
name|int
name|format
decl_stmt|;
specifier|private
name|int
name|nRanges
decl_stmt|;
specifier|private
name|Range1
index|[]
name|range
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"[format="
operator|+
name|format
operator|+
literal|", nRanges="
operator|+
name|nRanges
operator|+
literal|", range="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|range
argument_list|)
operator|+
literal|", supplement="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|super
operator|.
name|supplement
argument_list|)
operator|+
literal|"]"
return|;
block|}
comment|/**          * Inner class representing a range of an encoding.           */
specifier|private
specifier|static
class|class
name|Range1
block|{
specifier|private
name|int
name|first
decl_stmt|;
specifier|private
name|int
name|nLeft
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"[first="
operator|+
name|first
operator|+
literal|", nLeft="
operator|+
name|nLeft
operator|+
literal|"]"
return|;
block|}
block|}
block|}
comment|/**      * Inner class representing an embedded CFF charset.      */
specifier|abstract
specifier|static
class|class
name|EmbeddedCharset
extends|extends
name|CFFCharset
block|{
specifier|protected
name|EmbeddedCharset
parameter_list|(
name|boolean
name|isCIDFont
parameter_list|)
block|{
name|super
argument_list|(
name|isCIDFont
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Inner class representing a Format0 charset.       */
specifier|private
specifier|static
class|class
name|Format0Charset
extends|extends
name|EmbeddedCharset
block|{
specifier|private
name|int
name|format
decl_stmt|;
specifier|private
name|int
index|[]
name|glyph
decl_stmt|;
specifier|protected
name|Format0Charset
parameter_list|(
name|boolean
name|isCIDFont
parameter_list|)
block|{
name|super
argument_list|(
name|isCIDFont
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"[format="
operator|+
name|format
operator|+
literal|", glyph="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|glyph
argument_list|)
operator|+
literal|"]"
return|;
block|}
block|}
comment|/**      * Inner class representing a Format1 charset.       */
specifier|private
specifier|static
class|class
name|Format1Charset
extends|extends
name|EmbeddedCharset
block|{
specifier|private
name|int
name|format
decl_stmt|;
specifier|private
name|Range1
index|[]
name|range
decl_stmt|;
specifier|protected
name|Format1Charset
parameter_list|(
name|boolean
name|isCIDFont
parameter_list|)
block|{
name|super
argument_list|(
name|isCIDFont
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"[format="
operator|+
name|format
operator|+
literal|", range="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|range
argument_list|)
operator|+
literal|"]"
return|;
block|}
comment|/**          * Inner class representing a range of a charset.           */
specifier|private
specifier|static
class|class
name|Range1
block|{
specifier|private
name|int
name|first
decl_stmt|;
specifier|private
name|int
name|nLeft
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"[first="
operator|+
name|first
operator|+
literal|", nLeft="
operator|+
name|nLeft
operator|+
literal|"]"
return|;
block|}
block|}
block|}
comment|/**      * Inner class representing a Format2 charset.       */
specifier|private
specifier|static
class|class
name|Format2Charset
extends|extends
name|EmbeddedCharset
block|{
specifier|private
name|int
name|format
decl_stmt|;
specifier|private
name|Range2
index|[]
name|range
decl_stmt|;
specifier|protected
name|Format2Charset
parameter_list|(
name|boolean
name|isCIDFont
parameter_list|)
block|{
name|super
argument_list|(
name|isCIDFont
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"[format="
operator|+
name|format
operator|+
literal|", range="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|range
argument_list|)
operator|+
literal|"]"
return|;
block|}
comment|/**          * Inner class representing a range of a charset.           */
specifier|private
specifier|static
class|class
name|Range2
block|{
specifier|private
name|int
name|first
decl_stmt|;
specifier|private
name|int
name|nLeft
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"[first="
operator|+
name|first
operator|+
literal|", nLeft="
operator|+
name|nLeft
operator|+
literal|"]"
return|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"["
operator|+
name|debugFontName
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

