begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cff
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cff
operator|.
name|CFFOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cff
operator|.
name|charset
operator|.
name|CFFCharset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cff
operator|.
name|charset
operator|.
name|CFFExpertCharset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cff
operator|.
name|charset
operator|.
name|CFFExpertSubsetCharset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cff
operator|.
name|charset
operator|.
name|CFFISOAdobeCharset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cff
operator|.
name|encoding
operator|.
name|CFFEncoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cff
operator|.
name|encoding
operator|.
name|CFFExpertEncoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cff
operator|.
name|encoding
operator|.
name|CFFStandardEncoding
import|;
end_import

begin_comment
comment|/**  * This class represents a parser for a CFF font.   * @author Villu Ruusmann  * @version $Revision: 1.0 $  */
end_comment

begin_class
specifier|public
class|class
name|CFFParser
block|{
specifier|private
name|CFFDataInput
name|input
init|=
literal|null
decl_stmt|;
specifier|private
name|Header
name|header
init|=
literal|null
decl_stmt|;
specifier|private
name|IndexData
name|nameIndex
init|=
literal|null
decl_stmt|;
specifier|private
name|IndexData
name|topDictIndex
init|=
literal|null
decl_stmt|;
specifier|private
name|IndexData
name|stringIndex
init|=
literal|null
decl_stmt|;
specifier|private
name|IndexData
name|globalSubrIndex
init|=
literal|null
decl_stmt|;
comment|/**      * Parsing CFF Font using a byte array as input.      * @param bytes the given byte array      * @return the parsed CFF fonts      * @throws IOException If there is an error reading from the stream      */
specifier|public
name|List
argument_list|<
name|CFFFont
argument_list|>
name|parse
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
name|input
operator|=
operator|new
name|CFFDataInput
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|header
operator|=
name|readHeader
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|nameIndex
operator|=
name|readIndexData
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|topDictIndex
operator|=
name|readIndexData
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|stringIndex
operator|=
name|readIndexData
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|globalSubrIndex
operator|=
name|readIndexData
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CFFFont
argument_list|>
name|fonts
init|=
operator|new
name|ArrayList
argument_list|<
name|CFFFont
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nameIndex
operator|.
name|count
condition|;
name|i
operator|++
control|)
block|{
name|CFFFont
name|font
init|=
name|parseFont
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|fonts
operator|.
name|add
argument_list|(
name|font
argument_list|)
expr_stmt|;
block|}
return|return
name|fonts
return|;
block|}
specifier|private
specifier|static
name|Header
name|readHeader
parameter_list|(
name|CFFDataInput
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|Header
name|header
init|=
operator|new
name|Header
argument_list|()
decl_stmt|;
name|header
operator|.
name|major
operator|=
name|input
operator|.
name|readCard8
argument_list|()
expr_stmt|;
name|header
operator|.
name|minor
operator|=
name|input
operator|.
name|readCard8
argument_list|()
expr_stmt|;
name|header
operator|.
name|hdrSize
operator|=
name|input
operator|.
name|readCard8
argument_list|()
expr_stmt|;
name|header
operator|.
name|offSize
operator|=
name|input
operator|.
name|readOffSize
argument_list|()
expr_stmt|;
return|return
name|header
return|;
block|}
specifier|private
specifier|static
name|IndexData
name|readIndexData
parameter_list|(
name|CFFDataInput
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexData
name|index
init|=
operator|new
name|IndexData
argument_list|()
decl_stmt|;
name|index
operator|.
name|count
operator|=
name|input
operator|.
name|readCard16
argument_list|()
expr_stmt|;
if|if
condition|(
name|index
operator|.
name|count
operator|==
literal|0
condition|)
block|{
return|return
name|index
return|;
block|}
name|index
operator|.
name|offSize
operator|=
name|input
operator|.
name|readOffSize
argument_list|()
expr_stmt|;
name|index
operator|.
name|offset
operator|=
operator|new
name|int
index|[
name|index
operator|.
name|count
operator|+
literal|1
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|index
operator|.
name|offset
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|index
operator|.
name|offset
index|[
name|i
index|]
operator|=
name|input
operator|.
name|readOffset
argument_list|(
name|index
operator|.
name|offSize
argument_list|)
expr_stmt|;
block|}
name|index
operator|.
name|data
operator|=
operator|new
name|int
index|[
name|index
operator|.
name|offset
index|[
name|index
operator|.
name|offset
operator|.
name|length
operator|-
literal|1
index|]
operator|-
name|index
operator|.
name|offset
index|[
literal|0
index|]
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|index
operator|.
name|data
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|index
operator|.
name|data
index|[
name|i
index|]
operator|=
name|input
operator|.
name|readCard8
argument_list|()
expr_stmt|;
block|}
return|return
name|index
return|;
block|}
specifier|private
specifier|static
name|DictData
name|readDictData
parameter_list|(
name|CFFDataInput
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|DictData
name|dict
init|=
operator|new
name|DictData
argument_list|()
decl_stmt|;
name|dict
operator|.
name|entries
operator|=
operator|new
name|ArrayList
argument_list|<
name|DictData
operator|.
name|Entry
argument_list|>
argument_list|()
expr_stmt|;
while|while
condition|(
name|input
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|DictData
operator|.
name|Entry
name|entry
init|=
name|readEntry
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|dict
operator|.
name|entries
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
return|return
name|dict
return|;
block|}
specifier|private
specifier|static
name|DictData
operator|.
name|Entry
name|readEntry
parameter_list|(
name|CFFDataInput
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|DictData
operator|.
name|Entry
name|entry
init|=
operator|new
name|DictData
operator|.
name|Entry
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|b0
init|=
name|input
operator|.
name|readUnsignedByte
argument_list|()
decl_stmt|;
if|if
condition|(
name|b0
operator|>=
literal|0
operator|&&
name|b0
operator|<=
literal|21
condition|)
block|{
name|entry
operator|.
name|operator
operator|=
name|readOperator
argument_list|(
name|input
argument_list|,
name|b0
argument_list|)
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
name|b0
operator|==
literal|28
operator|||
name|b0
operator|==
literal|29
condition|)
block|{
name|entry
operator|.
name|operands
operator|.
name|add
argument_list|(
name|readIntegerNumber
argument_list|(
name|input
argument_list|,
name|b0
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|b0
operator|==
literal|30
condition|)
block|{
name|entry
operator|.
name|operands
operator|.
name|add
argument_list|(
name|readRealNumber
argument_list|(
name|input
argument_list|,
name|b0
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|b0
operator|>=
literal|32
operator|&&
name|b0
operator|<=
literal|254
condition|)
block|{
name|entry
operator|.
name|operands
operator|.
name|add
argument_list|(
name|readIntegerNumber
argument_list|(
name|input
argument_list|,
name|b0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
block|}
return|return
name|entry
return|;
block|}
specifier|private
specifier|static
name|CFFOperator
name|readOperator
parameter_list|(
name|CFFDataInput
name|input
parameter_list|,
name|int
name|b0
parameter_list|)
throws|throws
name|IOException
block|{
name|CFFOperator
operator|.
name|Key
name|key
init|=
name|readOperatorKey
argument_list|(
name|input
argument_list|,
name|b0
argument_list|)
decl_stmt|;
return|return
name|CFFOperator
operator|.
name|getOperator
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|CFFOperator
operator|.
name|Key
name|readOperatorKey
parameter_list|(
name|CFFDataInput
name|input
parameter_list|,
name|int
name|b0
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|b0
operator|==
literal|12
condition|)
block|{
name|int
name|b1
init|=
name|input
operator|.
name|readUnsignedByte
argument_list|()
decl_stmt|;
return|return
operator|new
name|CFFOperator
operator|.
name|Key
argument_list|(
name|b0
argument_list|,
name|b1
argument_list|)
return|;
block|}
return|return
operator|new
name|CFFOperator
operator|.
name|Key
argument_list|(
name|b0
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Integer
name|readIntegerNumber
parameter_list|(
name|CFFDataInput
name|input
parameter_list|,
name|int
name|b0
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|b0
operator|==
literal|28
condition|)
block|{
name|int
name|b1
init|=
name|input
operator|.
name|readUnsignedByte
argument_list|()
decl_stmt|;
name|int
name|b2
init|=
name|input
operator|.
name|readUnsignedByte
argument_list|()
decl_stmt|;
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
call|(
name|short
call|)
argument_list|(
name|b1
operator|<<
literal|8
operator||
name|b2
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|b0
operator|==
literal|29
condition|)
block|{
name|int
name|b1
init|=
name|input
operator|.
name|readUnsignedByte
argument_list|()
decl_stmt|;
name|int
name|b2
init|=
name|input
operator|.
name|readUnsignedByte
argument_list|()
decl_stmt|;
name|int
name|b3
init|=
name|input
operator|.
name|readUnsignedByte
argument_list|()
decl_stmt|;
name|int
name|b4
init|=
name|input
operator|.
name|readUnsignedByte
argument_list|()
decl_stmt|;
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|b1
operator|<<
literal|24
operator||
name|b2
operator|<<
literal|16
operator||
name|b3
operator|<<
literal|8
operator||
name|b4
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|b0
operator|>=
literal|32
operator|&&
name|b0
operator|<=
literal|246
condition|)
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|b0
operator|-
literal|139
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|b0
operator|>=
literal|247
operator|&&
name|b0
operator|<=
literal|250
condition|)
block|{
name|int
name|b1
init|=
name|input
operator|.
name|readUnsignedByte
argument_list|()
decl_stmt|;
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
operator|(
name|b0
operator|-
literal|247
operator|)
operator|*
literal|256
operator|+
name|b1
operator|+
literal|108
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|b0
operator|>=
literal|251
operator|&&
name|b0
operator|<=
literal|254
condition|)
block|{
name|int
name|b1
init|=
name|input
operator|.
name|readUnsignedByte
argument_list|()
decl_stmt|;
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
operator|-
operator|(
name|b0
operator|-
literal|251
operator|)
operator|*
literal|256
operator|-
name|b1
operator|-
literal|108
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
block|}
specifier|private
specifier|static
name|Double
name|readRealNumber
parameter_list|(
name|CFFDataInput
name|input
parameter_list|,
name|int
name|b0
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|boolean
name|done
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|done
condition|)
block|{
name|int
name|b
init|=
name|input
operator|.
name|readUnsignedByte
argument_list|()
decl_stmt|;
name|int
index|[]
name|nibbles
init|=
block|{
name|b
operator|/
literal|16
block|,
name|b
operator|%
literal|16
block|}
decl_stmt|;
for|for
control|(
name|int
name|nibble
range|:
name|nibbles
control|)
block|{
switch|switch
condition|(
name|nibble
condition|)
block|{
case|case
literal|0x0
case|:
case|case
literal|0x1
case|:
case|case
literal|0x2
case|:
case|case
literal|0x3
case|:
case|case
literal|0x4
case|:
case|case
literal|0x5
case|:
case|case
literal|0x6
case|:
case|case
literal|0x7
case|:
case|case
literal|0x8
case|:
case|case
literal|0x9
case|:
name|sb
operator|.
name|append
argument_list|(
name|nibble
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0xa
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0xb
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"E"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0xc
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"E-"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0xd
case|:
break|break;
case|case
literal|0xe
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0xf
case|:
name|done
operator|=
literal|true
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
block|}
block|}
return|return
name|Double
operator|.
name|valueOf
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|CFFFont
name|parseFont
parameter_list|(
name|int
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|CFFFont
name|font
init|=
operator|new
name|CFFFont
argument_list|()
decl_stmt|;
name|DataInput
name|nameInput
init|=
operator|new
name|DataInput
argument_list|(
name|nameIndex
operator|.
name|getBytes
argument_list|(
name|index
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|nameInput
operator|.
name|getString
argument_list|()
decl_stmt|;
name|font
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|CFFDataInput
name|topDictInput
init|=
operator|new
name|CFFDataInput
argument_list|(
name|topDictIndex
operator|.
name|getBytes
argument_list|(
name|index
argument_list|)
argument_list|)
decl_stmt|;
name|DictData
name|topDict
init|=
name|readDictData
argument_list|(
name|topDictInput
argument_list|)
decl_stmt|;
name|DictData
operator|.
name|Entry
name|syntheticBaseEntry
init|=
name|topDict
operator|.
name|getEntry
argument_list|(
literal|"SyntheticBase"
argument_list|)
decl_stmt|;
if|if
condition|(
name|syntheticBaseEntry
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Synthetic Fonts are not supported"
argument_list|)
throw|;
block|}
name|DictData
operator|.
name|Entry
name|rosEntry
init|=
name|topDict
operator|.
name|getEntry
argument_list|(
literal|"ROS"
argument_list|)
decl_stmt|;
if|if
condition|(
name|rosEntry
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"CID-keyed Fonts are not supported"
argument_list|)
throw|;
block|}
name|font
operator|.
name|addValueToTopDict
argument_list|(
literal|"version"
argument_list|,
name|getString
argument_list|(
name|topDict
argument_list|,
literal|"version"
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addValueToTopDict
argument_list|(
literal|"Notice"
argument_list|,
name|getString
argument_list|(
name|topDict
argument_list|,
literal|"Notice"
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addValueToTopDict
argument_list|(
literal|"Copyright"
argument_list|,
name|getString
argument_list|(
name|topDict
argument_list|,
literal|"Copyright"
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addValueToTopDict
argument_list|(
literal|"FullName"
argument_list|,
name|getString
argument_list|(
name|topDict
argument_list|,
literal|"FullName"
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addValueToTopDict
argument_list|(
literal|"FamilyName"
argument_list|,
name|getString
argument_list|(
name|topDict
argument_list|,
literal|"FamilyName"
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addValueToTopDict
argument_list|(
literal|"Weight"
argument_list|,
name|getString
argument_list|(
name|topDict
argument_list|,
literal|"Weight"
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addValueToTopDict
argument_list|(
literal|"isFixedPitch"
argument_list|,
name|getBoolean
argument_list|(
name|topDict
argument_list|,
literal|"isFixedPitch"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addValueToTopDict
argument_list|(
literal|"ItalicAngle"
argument_list|,
name|getNumber
argument_list|(
name|topDict
argument_list|,
literal|"ItalicAngle"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addValueToTopDict
argument_list|(
literal|"UnderlinePosition"
argument_list|,
name|getNumber
argument_list|(
name|topDict
argument_list|,
literal|"UnderlinePosition"
argument_list|,
operator|-
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addValueToTopDict
argument_list|(
literal|"UnderlineThickness"
argument_list|,
name|getNumber
argument_list|(
name|topDict
argument_list|,
literal|"UnderlineThickness"
argument_list|,
literal|50
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addValueToTopDict
argument_list|(
literal|"PaintType"
argument_list|,
name|getNumber
argument_list|(
name|topDict
argument_list|,
literal|"PaintType"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addValueToTopDict
argument_list|(
literal|"CharstringType"
argument_list|,
name|getNumber
argument_list|(
name|topDict
argument_list|,
literal|"CharstringType"
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addValueToTopDict
argument_list|(
literal|"FontMatrix"
argument_list|,
name|getArray
argument_list|(
name|topDict
argument_list|,
literal|"FontMatrix"
argument_list|,
name|Arrays
operator|.
expr|<
name|Number
operator|>
name|asList
argument_list|(
name|Double
operator|.
name|valueOf
argument_list|(
literal|0.001
argument_list|)
argument_list|,
name|Double
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Double
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Double
operator|.
name|valueOf
argument_list|(
literal|0.001
argument_list|)
argument_list|,
name|Double
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Double
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addValueToTopDict
argument_list|(
literal|"UniqueID"
argument_list|,
name|getNumber
argument_list|(
name|topDict
argument_list|,
literal|"UniqueID"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addValueToTopDict
argument_list|(
literal|"FontBBox"
argument_list|,
name|getArray
argument_list|(
name|topDict
argument_list|,
literal|"FontBBox"
argument_list|,
name|Arrays
operator|.
expr|<
name|Number
operator|>
name|asList
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addValueToTopDict
argument_list|(
literal|"StrokeWidth"
argument_list|,
name|getNumber
argument_list|(
name|topDict
argument_list|,
literal|"StrokeWidth"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addValueToTopDict
argument_list|(
literal|"XUID"
argument_list|,
name|getArray
argument_list|(
name|topDict
argument_list|,
literal|"XUID"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|DictData
operator|.
name|Entry
name|charStringsEntry
init|=
name|topDict
operator|.
name|getEntry
argument_list|(
literal|"CharStrings"
argument_list|)
decl_stmt|;
name|int
name|charStringsOffset
init|=
name|charStringsEntry
operator|.
name|getNumber
argument_list|(
literal|0
argument_list|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|input
operator|.
name|setPosition
argument_list|(
name|charStringsOffset
argument_list|)
expr_stmt|;
name|IndexData
name|charStringsIndex
init|=
name|readIndexData
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|DictData
operator|.
name|Entry
name|charsetEntry
init|=
name|topDict
operator|.
name|getEntry
argument_list|(
literal|"charset"
argument_list|)
decl_stmt|;
name|CFFCharset
name|charset
decl_stmt|;
name|int
name|charsetId
init|=
name|charsetEntry
operator|!=
literal|null
condition|?
name|charsetEntry
operator|.
name|getNumber
argument_list|(
literal|0
argument_list|)
operator|.
name|intValue
argument_list|()
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|charsetId
operator|==
literal|0
condition|)
block|{
name|charset
operator|=
name|CFFISOAdobeCharset
operator|.
name|getInstance
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|charsetId
operator|==
literal|1
condition|)
block|{
name|charset
operator|=
name|CFFExpertCharset
operator|.
name|getInstance
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|charsetId
operator|==
literal|2
condition|)
block|{
name|charset
operator|=
name|CFFExpertSubsetCharset
operator|.
name|getInstance
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|input
operator|.
name|setPosition
argument_list|(
name|charsetId
argument_list|)
expr_stmt|;
name|charset
operator|=
name|readCharset
argument_list|(
name|input
argument_list|,
name|charStringsIndex
operator|.
name|count
argument_list|)
expr_stmt|;
block|}
name|font
operator|.
name|setCharset
argument_list|(
name|charset
argument_list|)
expr_stmt|;
name|font
operator|.
name|getCharStringsDict
argument_list|()
operator|.
name|put
argument_list|(
literal|".notdef"
argument_list|,
name|charStringsIndex
operator|.
name|getBytes
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|int
index|[]
name|gids
init|=
operator|new
name|int
index|[
name|charStringsIndex
operator|.
name|count
index|]
decl_stmt|;
name|List
argument_list|<
name|CFFCharset
operator|.
name|Entry
argument_list|>
name|glyphEntries
init|=
name|charset
operator|.
name|getEntries
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|charStringsIndex
operator|.
name|count
condition|;
name|i
operator|++
control|)
block|{
name|CFFCharset
operator|.
name|Entry
name|glyphEntry
init|=
name|glyphEntries
operator|.
name|get
argument_list|(
name|i
operator|-
literal|1
argument_list|)
decl_stmt|;
name|gids
index|[
name|i
operator|-
literal|1
index|]
operator|=
name|glyphEntry
operator|.
name|getSID
argument_list|()
expr_stmt|;
name|font
operator|.
name|getCharStringsDict
argument_list|()
operator|.
name|put
argument_list|(
name|glyphEntry
operator|.
name|getName
argument_list|()
argument_list|,
name|charStringsIndex
operator|.
name|getBytes
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|DictData
operator|.
name|Entry
name|encodingEntry
init|=
name|topDict
operator|.
name|getEntry
argument_list|(
literal|"Encoding"
argument_list|)
decl_stmt|;
name|CFFEncoding
name|encoding
decl_stmt|;
name|int
name|encodingId
init|=
name|encodingEntry
operator|!=
literal|null
condition|?
name|encodingEntry
operator|.
name|getNumber
argument_list|(
literal|0
argument_list|)
operator|.
name|intValue
argument_list|()
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|encodingId
operator|==
literal|0
condition|)
block|{
name|encoding
operator|=
name|CFFStandardEncoding
operator|.
name|getInstance
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|encodingId
operator|==
literal|1
condition|)
block|{
name|encoding
operator|=
name|CFFExpertEncoding
operator|.
name|getInstance
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|input
operator|.
name|setPosition
argument_list|(
name|encodingId
argument_list|)
expr_stmt|;
name|encoding
operator|=
name|readEncoding
argument_list|(
name|input
argument_list|,
name|gids
argument_list|)
expr_stmt|;
block|}
name|font
operator|.
name|setEncoding
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
name|DictData
operator|.
name|Entry
name|privateEntry
init|=
name|topDict
operator|.
name|getEntry
argument_list|(
literal|"Private"
argument_list|)
decl_stmt|;
name|int
name|privateOffset
init|=
name|privateEntry
operator|.
name|getNumber
argument_list|(
literal|1
argument_list|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|input
operator|.
name|setPosition
argument_list|(
name|privateOffset
argument_list|)
expr_stmt|;
name|int
name|privateSize
init|=
name|privateEntry
operator|.
name|getNumber
argument_list|(
literal|0
argument_list|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|CFFDataInput
name|privateDictData
init|=
operator|new
name|CFFDataInput
argument_list|(
name|input
operator|.
name|readBytes
argument_list|(
name|privateSize
argument_list|)
argument_list|)
decl_stmt|;
name|DictData
name|privateDict
init|=
name|readDictData
argument_list|(
name|privateDictData
argument_list|)
decl_stmt|;
name|font
operator|.
name|addValueToPrivateDict
argument_list|(
literal|"BlueValues"
argument_list|,
name|getDelta
argument_list|(
name|privateDict
argument_list|,
literal|"BlueValues"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addValueToPrivateDict
argument_list|(
literal|"OtherBlues"
argument_list|,
name|getDelta
argument_list|(
name|privateDict
argument_list|,
literal|"OtherBlues"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addValueToPrivateDict
argument_list|(
literal|"FamilyBlues"
argument_list|,
name|getDelta
argument_list|(
name|privateDict
argument_list|,
literal|"FamilyBlues"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addValueToPrivateDict
argument_list|(
literal|"FamilyOtherBlues"
argument_list|,
name|getDelta
argument_list|(
name|privateDict
argument_list|,
literal|"FamilyOtherBlues"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addValueToPrivateDict
argument_list|(
literal|"BlueScale"
argument_list|,
name|getNumber
argument_list|(
name|privateDict
argument_list|,
literal|"BlueScale"
argument_list|,
name|Double
operator|.
name|valueOf
argument_list|(
literal|0.039625
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addValueToPrivateDict
argument_list|(
literal|"BlueShift"
argument_list|,
name|getNumber
argument_list|(
name|privateDict
argument_list|,
literal|"BlueShift"
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|7
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addValueToPrivateDict
argument_list|(
literal|"BlueFuzz"
argument_list|,
name|getNumber
argument_list|(
name|privateDict
argument_list|,
literal|"BlueFuzz"
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addValueToPrivateDict
argument_list|(
literal|"StdHW"
argument_list|,
name|getNumber
argument_list|(
name|privateDict
argument_list|,
literal|"StdHW"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addValueToPrivateDict
argument_list|(
literal|"StdVW"
argument_list|,
name|getNumber
argument_list|(
name|privateDict
argument_list|,
literal|"StdVW"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addValueToPrivateDict
argument_list|(
literal|"StemSnapH"
argument_list|,
name|getDelta
argument_list|(
name|privateDict
argument_list|,
literal|"StemSnapH"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addValueToPrivateDict
argument_list|(
literal|"StemSnapV"
argument_list|,
name|getDelta
argument_list|(
name|privateDict
argument_list|,
literal|"StemSnapV"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addValueToPrivateDict
argument_list|(
literal|"ForceBold"
argument_list|,
name|getBoolean
argument_list|(
name|privateDict
argument_list|,
literal|"ForceBold"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addValueToPrivateDict
argument_list|(
literal|"LanguageGroup"
argument_list|,
name|getNumber
argument_list|(
name|privateDict
argument_list|,
literal|"LanguageGroup"
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addValueToPrivateDict
argument_list|(
literal|"ExpansionFactor"
argument_list|,
name|getNumber
argument_list|(
name|privateDict
argument_list|,
literal|"ExpansionFactor"
argument_list|,
name|Double
operator|.
name|valueOf
argument_list|(
literal|0.06
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addValueToPrivateDict
argument_list|(
literal|"initialRandomSeed"
argument_list|,
name|getNumber
argument_list|(
name|privateDict
argument_list|,
literal|"initialRandomSeed"
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addValueToPrivateDict
argument_list|(
literal|"defaultWidthX"
argument_list|,
name|getNumber
argument_list|(
name|privateDict
argument_list|,
literal|"defaultWidthX"
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|addValueToPrivateDict
argument_list|(
literal|"nominalWidthX"
argument_list|,
name|getNumber
argument_list|(
name|privateDict
argument_list|,
literal|"nominalWidthX"
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|font
return|;
block|}
specifier|private
name|String
name|readString
parameter_list|(
name|int
name|index
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|index
operator|>=
literal|0
operator|&&
name|index
operator|<=
literal|390
condition|)
block|{
return|return
name|CFFStandardString
operator|.
name|getName
argument_list|(
name|index
argument_list|)
return|;
block|}
name|DataInput
name|dataInput
init|=
operator|new
name|DataInput
argument_list|(
name|stringIndex
operator|.
name|getBytes
argument_list|(
name|index
operator|-
literal|391
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|dataInput
operator|.
name|getString
argument_list|()
return|;
block|}
specifier|private
name|String
name|getString
parameter_list|(
name|DictData
name|dict
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|DictData
operator|.
name|Entry
name|entry
init|=
name|dict
operator|.
name|getEntry
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
operator|(
name|entry
operator|!=
literal|null
condition|?
name|readString
argument_list|(
name|entry
operator|.
name|getNumber
argument_list|(
literal|0
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
else|:
literal|null
operator|)
return|;
block|}
specifier|private
name|Boolean
name|getBoolean
parameter_list|(
name|DictData
name|dict
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|defaultValue
parameter_list|)
throws|throws
name|IOException
block|{
name|DictData
operator|.
name|Entry
name|entry
init|=
name|dict
operator|.
name|getEntry
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|entry
operator|!=
literal|null
condition|?
name|entry
operator|.
name|getBoolean
argument_list|(
literal|0
argument_list|)
else|:
name|defaultValue
return|;
block|}
specifier|private
name|Number
name|getNumber
parameter_list|(
name|DictData
name|dict
parameter_list|,
name|String
name|name
parameter_list|,
name|Number
name|defaultValue
parameter_list|)
throws|throws
name|IOException
block|{
name|DictData
operator|.
name|Entry
name|entry
init|=
name|dict
operator|.
name|getEntry
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|entry
operator|!=
literal|null
condition|?
name|entry
operator|.
name|getNumber
argument_list|(
literal|0
argument_list|)
else|:
name|defaultValue
return|;
block|}
comment|// TODO Where is the difference to getDelta??
specifier|private
name|List
argument_list|<
name|Number
argument_list|>
name|getArray
parameter_list|(
name|DictData
name|dict
parameter_list|,
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|Number
argument_list|>
name|defaultValue
parameter_list|)
throws|throws
name|IOException
block|{
name|DictData
operator|.
name|Entry
name|entry
init|=
name|dict
operator|.
name|getEntry
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|entry
operator|!=
literal|null
condition|?
name|entry
operator|.
name|getArray
argument_list|()
else|:
name|defaultValue
return|;
block|}
comment|// TODO Where is the difference to getArray??
specifier|private
name|List
argument_list|<
name|Number
argument_list|>
name|getDelta
parameter_list|(
name|DictData
name|dict
parameter_list|,
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|Number
argument_list|>
name|defaultValue
parameter_list|)
throws|throws
name|IOException
block|{
name|DictData
operator|.
name|Entry
name|entry
init|=
name|dict
operator|.
name|getEntry
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|entry
operator|!=
literal|null
condition|?
name|entry
operator|.
name|getArray
argument_list|()
else|:
name|defaultValue
return|;
block|}
specifier|private
name|CFFEncoding
name|readEncoding
parameter_list|(
name|CFFDataInput
name|dataInput
parameter_list|,
name|int
index|[]
name|gids
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|format
init|=
name|dataInput
operator|.
name|readCard8
argument_list|()
decl_stmt|;
name|int
name|baseFormat
init|=
name|format
operator|&
literal|0x7f
decl_stmt|;
if|if
condition|(
name|baseFormat
operator|==
literal|0
condition|)
block|{
return|return
name|readFormat0Encoding
argument_list|(
name|dataInput
argument_list|,
name|format
argument_list|,
name|gids
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|baseFormat
operator|==
literal|1
condition|)
block|{
return|return
name|readFormat1Encoding
argument_list|(
name|dataInput
argument_list|,
name|format
argument_list|,
name|gids
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
block|}
specifier|private
name|Format0Encoding
name|readFormat0Encoding
parameter_list|(
name|CFFDataInput
name|dataInput
parameter_list|,
name|int
name|format
parameter_list|,
name|int
index|[]
name|gids
parameter_list|)
throws|throws
name|IOException
block|{
name|Format0Encoding
name|encoding
init|=
operator|new
name|Format0Encoding
argument_list|()
decl_stmt|;
name|encoding
operator|.
name|format
operator|=
name|format
expr_stmt|;
name|encoding
operator|.
name|nCodes
operator|=
name|dataInput
operator|.
name|readCard8
argument_list|()
expr_stmt|;
name|encoding
operator|.
name|code
operator|=
operator|new
name|int
index|[
name|encoding
operator|.
name|nCodes
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|encoding
operator|.
name|code
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|encoding
operator|.
name|code
index|[
name|i
index|]
operator|=
name|dataInput
operator|.
name|readCard8
argument_list|()
expr_stmt|;
name|encoding
operator|.
name|register
argument_list|(
name|encoding
operator|.
name|code
index|[
name|i
index|]
argument_list|,
name|gids
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|format
operator|&
literal|0x80
operator|)
operator|!=
literal|0
condition|)
block|{
name|readSupplement
argument_list|(
name|dataInput
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
block|}
return|return
name|encoding
return|;
block|}
specifier|private
name|Format1Encoding
name|readFormat1Encoding
parameter_list|(
name|CFFDataInput
name|dataInput
parameter_list|,
name|int
name|format
parameter_list|,
name|int
index|[]
name|gids
parameter_list|)
throws|throws
name|IOException
block|{
name|Format1Encoding
name|encoding
init|=
operator|new
name|Format1Encoding
argument_list|()
decl_stmt|;
name|encoding
operator|.
name|format
operator|=
name|format
expr_stmt|;
name|encoding
operator|.
name|nRanges
operator|=
name|dataInput
operator|.
name|readCard8
argument_list|()
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|encoding
operator|.
name|range
operator|=
operator|new
name|Format1Encoding
operator|.
name|Range1
index|[
name|encoding
operator|.
name|nRanges
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|encoding
operator|.
name|range
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Format1Encoding
operator|.
name|Range1
name|range
init|=
operator|new
name|Format1Encoding
operator|.
name|Range1
argument_list|()
decl_stmt|;
name|range
operator|.
name|first
operator|=
name|dataInput
operator|.
name|readCard8
argument_list|()
expr_stmt|;
name|range
operator|.
name|nLeft
operator|=
name|dataInput
operator|.
name|readCard8
argument_list|()
expr_stmt|;
name|encoding
operator|.
name|range
index|[
name|i
index|]
operator|=
name|range
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|1
operator|+
name|range
operator|.
name|nLeft
condition|;
name|j
operator|++
control|)
block|{
name|encoding
operator|.
name|register
argument_list|(
name|range
operator|.
name|first
operator|+
name|j
argument_list|,
name|gids
index|[
name|count
operator|+
name|j
index|]
argument_list|)
expr_stmt|;
block|}
name|count
operator|+=
literal|1
operator|+
name|range
operator|.
name|nLeft
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|format
operator|&
literal|0x80
operator|)
operator|!=
literal|0
condition|)
block|{
name|readSupplement
argument_list|(
name|dataInput
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
block|}
return|return
name|encoding
return|;
block|}
specifier|private
name|void
name|readSupplement
parameter_list|(
name|CFFDataInput
name|dataInput
parameter_list|,
name|EmbeddedEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
name|encoding
operator|.
name|nSups
operator|=
name|dataInput
operator|.
name|readCard8
argument_list|()
expr_stmt|;
name|encoding
operator|.
name|supplement
operator|=
operator|new
name|EmbeddedEncoding
operator|.
name|Supplement
index|[
name|encoding
operator|.
name|nSups
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|encoding
operator|.
name|supplement
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|EmbeddedEncoding
operator|.
name|Supplement
name|supplement
init|=
operator|new
name|EmbeddedEncoding
operator|.
name|Supplement
argument_list|()
decl_stmt|;
name|supplement
operator|.
name|code
operator|=
name|dataInput
operator|.
name|readCard8
argument_list|()
expr_stmt|;
name|supplement
operator|.
name|glyph
operator|=
name|dataInput
operator|.
name|readSID
argument_list|()
expr_stmt|;
name|encoding
operator|.
name|supplement
index|[
name|i
index|]
operator|=
name|supplement
expr_stmt|;
block|}
block|}
specifier|private
name|CFFCharset
name|readCharset
parameter_list|(
name|CFFDataInput
name|dataInput
parameter_list|,
name|int
name|nGlyphs
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|format
init|=
name|dataInput
operator|.
name|readCard8
argument_list|()
decl_stmt|;
if|if
condition|(
name|format
operator|==
literal|0
condition|)
block|{
return|return
name|readFormat0Charset
argument_list|(
name|dataInput
argument_list|,
name|format
argument_list|,
name|nGlyphs
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|format
operator|==
literal|1
condition|)
block|{
return|return
name|readFormat1Charset
argument_list|(
name|dataInput
argument_list|,
name|format
argument_list|,
name|nGlyphs
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
block|}
specifier|private
name|Format0Charset
name|readFormat0Charset
parameter_list|(
name|CFFDataInput
name|dataInput
parameter_list|,
name|int
name|format
parameter_list|,
name|int
name|nGlyphs
parameter_list|)
throws|throws
name|IOException
block|{
name|Format0Charset
name|charset
init|=
operator|new
name|Format0Charset
argument_list|()
decl_stmt|;
name|charset
operator|.
name|format
operator|=
name|format
expr_stmt|;
name|charset
operator|.
name|glyph
operator|=
operator|new
name|int
index|[
name|nGlyphs
operator|-
literal|1
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|charset
operator|.
name|glyph
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|charset
operator|.
name|glyph
index|[
name|i
index|]
operator|=
name|dataInput
operator|.
name|readSID
argument_list|()
expr_stmt|;
name|charset
operator|.
name|register
argument_list|(
name|charset
operator|.
name|glyph
index|[
name|i
index|]
argument_list|,
name|readString
argument_list|(
name|charset
operator|.
name|glyph
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|charset
return|;
block|}
specifier|private
name|Format1Charset
name|readFormat1Charset
parameter_list|(
name|CFFDataInput
name|dataInput
parameter_list|,
name|int
name|format
parameter_list|,
name|int
name|nGlyphs
parameter_list|)
throws|throws
name|IOException
block|{
name|Format1Charset
name|charset
init|=
operator|new
name|Format1Charset
argument_list|()
decl_stmt|;
name|charset
operator|.
name|format
operator|=
name|format
expr_stmt|;
name|charset
operator|.
name|range
operator|=
operator|new
name|Format1Charset
operator|.
name|Range1
index|[
literal|0
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nGlyphs
operator|-
literal|1
condition|;
control|)
block|{
name|Format1Charset
operator|.
name|Range1
index|[]
name|newRange
init|=
operator|new
name|Format1Charset
operator|.
name|Range1
index|[
name|charset
operator|.
name|range
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|charset
operator|.
name|range
argument_list|,
literal|0
argument_list|,
name|newRange
argument_list|,
literal|0
argument_list|,
name|charset
operator|.
name|range
operator|.
name|length
argument_list|)
expr_stmt|;
name|charset
operator|.
name|range
operator|=
name|newRange
expr_stmt|;
name|Format1Charset
operator|.
name|Range1
name|range
init|=
operator|new
name|Format1Charset
operator|.
name|Range1
argument_list|()
decl_stmt|;
name|range
operator|.
name|first
operator|=
name|dataInput
operator|.
name|readSID
argument_list|()
expr_stmt|;
name|range
operator|.
name|nLeft
operator|=
name|dataInput
operator|.
name|readCard8
argument_list|()
expr_stmt|;
name|charset
operator|.
name|range
index|[
name|charset
operator|.
name|range
operator|.
name|length
operator|-
literal|1
index|]
operator|=
name|range
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|1
operator|+
name|range
operator|.
name|nLeft
condition|;
name|j
operator|++
control|)
block|{
name|charset
operator|.
name|register
argument_list|(
name|range
operator|.
name|first
operator|+
name|j
argument_list|,
name|readString
argument_list|(
name|range
operator|.
name|first
operator|+
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|i
operator|+=
literal|1
operator|+
name|range
operator|.
name|nLeft
expr_stmt|;
block|}
return|return
name|charset
return|;
block|}
comment|/**      * Inner class holding the header of a CFF font.       */
specifier|private
specifier|static
class|class
name|Header
block|{
specifier|private
name|int
name|major
decl_stmt|;
specifier|private
name|int
name|minor
decl_stmt|;
specifier|private
name|int
name|hdrSize
decl_stmt|;
specifier|private
name|int
name|offSize
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"[major="
operator|+
name|major
operator|+
literal|", minor="
operator|+
name|minor
operator|+
literal|", hdrSize="
operator|+
name|hdrSize
operator|+
literal|", offSize="
operator|+
name|offSize
operator|+
literal|"]"
return|;
block|}
block|}
comment|/**      * Inner class holding the IndexData of a CFF font.       */
specifier|private
specifier|static
class|class
name|IndexData
block|{
specifier|private
name|int
name|count
decl_stmt|;
specifier|private
name|int
name|offSize
decl_stmt|;
specifier|private
name|int
index|[]
name|offset
decl_stmt|;
specifier|private
name|int
index|[]
name|data
decl_stmt|;
specifier|public
name|byte
index|[]
name|getBytes
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|int
name|length
init|=
name|offset
index|[
name|index
operator|+
literal|1
index|]
operator|-
name|offset
index|[
name|index
index|]
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|bytes
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|data
index|[
name|offset
index|[
name|index
index|]
operator|-
literal|1
operator|+
name|i
index|]
expr_stmt|;
block|}
return|return
name|bytes
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"[count="
operator|+
name|count
operator|+
literal|", offSize="
operator|+
name|offSize
operator|+
literal|", offset="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|offset
argument_list|)
operator|+
literal|", data="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|data
argument_list|)
operator|+
literal|"]"
return|;
block|}
block|}
comment|/**      * Inner class holding the DictData of a CFF font.       */
specifier|private
specifier|static
class|class
name|DictData
block|{
specifier|private
name|List
argument_list|<
name|Entry
argument_list|>
name|entries
init|=
literal|null
decl_stmt|;
specifier|public
name|Entry
name|getEntry
parameter_list|(
name|CFFOperator
operator|.
name|Key
name|key
parameter_list|)
block|{
return|return
name|getEntry
argument_list|(
name|CFFOperator
operator|.
name|getOperator
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Entry
name|getEntry
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|getEntry
argument_list|(
name|CFFOperator
operator|.
name|getOperator
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Entry
name|getEntry
parameter_list|(
name|CFFOperator
name|operator
parameter_list|)
block|{
for|for
control|(
name|Entry
name|entry
range|:
name|entries
control|)
block|{
comment|// Check for null entry before comparing the Font
if|if
condition|(
name|entry
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|operator
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|operator
operator|.
name|equals
argument_list|(
name|operator
argument_list|)
condition|)
block|{
return|return
name|entry
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**          * {@inheritDoc}           */
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"[entries="
operator|+
name|entries
operator|+
literal|"]"
return|;
block|}
comment|/**          * Inner class holding an operand of a CFF font.           */
specifier|private
specifier|static
class|class
name|Entry
block|{
specifier|private
name|List
argument_list|<
name|Number
argument_list|>
name|operands
init|=
operator|new
name|ArrayList
argument_list|<
name|Number
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|CFFOperator
name|operator
init|=
literal|null
decl_stmt|;
specifier|public
name|Number
name|getNumber
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|operands
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
specifier|public
name|Boolean
name|getBoolean
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Number
name|operand
init|=
name|operands
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|operand
operator|instanceof
name|Integer
condition|)
block|{
switch|switch
condition|(
name|operand
operator|.
name|intValue
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
return|return
name|Boolean
operator|.
name|FALSE
return|;
case|case
literal|1
case|:
return|return
name|Boolean
operator|.
name|TRUE
return|;
default|default:
break|break;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
comment|// TODO unused??
specifier|public
name|Integer
name|getSID
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Number
name|operand
init|=
name|operands
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|operand
operator|instanceof
name|Integer
condition|)
block|{
return|return
operator|(
name|Integer
operator|)
name|operand
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
comment|// TODO Where is the difference to getDelta??
specifier|public
name|List
argument_list|<
name|Number
argument_list|>
name|getArray
parameter_list|()
block|{
return|return
name|operands
return|;
block|}
comment|// TODO Where is the difference to getArray??
specifier|public
name|List
argument_list|<
name|Number
argument_list|>
name|getDelta
parameter_list|()
block|{
return|return
name|operands
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"[operands="
operator|+
name|operands
operator|+
literal|", operator="
operator|+
name|operator
operator|+
literal|"]"
return|;
block|}
block|}
block|}
comment|/**      * Inner class representing an embedded CFF encoding.       */
specifier|abstract
specifier|static
class|class
name|EmbeddedEncoding
extends|extends
name|CFFEncoding
block|{
specifier|private
name|int
name|nSups
decl_stmt|;
specifier|private
name|Supplement
index|[]
name|supplement
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|isFontSpecific
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
name|List
argument_list|<
name|Supplement
argument_list|>
name|getSupplements
parameter_list|()
block|{
if|if
condition|(
name|supplement
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
expr|<
name|Supplement
operator|>
name|emptyList
argument_list|()
return|;
block|}
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|supplement
argument_list|)
return|;
block|}
comment|/**          * Inner class representing a supplement for an encoding.           */
specifier|static
class|class
name|Supplement
block|{
specifier|private
name|int
name|code
decl_stmt|;
specifier|private
name|int
name|glyph
decl_stmt|;
name|int
name|getCode
parameter_list|()
block|{
return|return
name|code
return|;
block|}
name|int
name|getGlyph
parameter_list|()
block|{
return|return
name|glyph
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"[code="
operator|+
name|code
operator|+
literal|", glyph="
operator|+
name|glyph
operator|+
literal|"]"
return|;
block|}
block|}
block|}
comment|/**      * Inner class representing a Format0 encoding.       */
specifier|private
specifier|static
class|class
name|Format0Encoding
extends|extends
name|EmbeddedEncoding
block|{
specifier|private
name|int
name|format
decl_stmt|;
specifier|private
name|int
name|nCodes
decl_stmt|;
specifier|private
name|int
index|[]
name|code
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"[format="
operator|+
name|format
operator|+
literal|", nCodes="
operator|+
name|nCodes
operator|+
literal|", code="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|code
argument_list|)
operator|+
literal|", supplement="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|super
operator|.
name|supplement
argument_list|)
operator|+
literal|"]"
return|;
block|}
block|}
comment|/**      * Inner class representing a Format1 encoding.       */
specifier|private
specifier|static
class|class
name|Format1Encoding
extends|extends
name|EmbeddedEncoding
block|{
specifier|private
name|int
name|format
decl_stmt|;
specifier|private
name|int
name|nRanges
decl_stmt|;
specifier|private
name|Range1
index|[]
name|range
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"[format="
operator|+
name|format
operator|+
literal|", nRanges="
operator|+
name|nRanges
operator|+
literal|", range="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|range
argument_list|)
operator|+
literal|", supplement="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|super
operator|.
name|supplement
argument_list|)
operator|+
literal|"]"
return|;
block|}
comment|/**          * Inner class representing a range of an encoding.           */
specifier|private
specifier|static
class|class
name|Range1
block|{
specifier|private
name|int
name|first
decl_stmt|;
specifier|private
name|int
name|nLeft
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"[first="
operator|+
name|first
operator|+
literal|", nLeft="
operator|+
name|nLeft
operator|+
literal|"]"
return|;
block|}
block|}
block|}
comment|/**      * Inner class representing an embedded CFF charset.       */
specifier|abstract
specifier|static
class|class
name|EmbeddedCharset
extends|extends
name|CFFCharset
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isFontSpecific
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
comment|/**      * Inner class representing a Format0 charset.       */
specifier|private
specifier|static
class|class
name|Format0Charset
extends|extends
name|EmbeddedCharset
block|{
specifier|private
name|int
name|format
decl_stmt|;
specifier|private
name|int
index|[]
name|glyph
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"[format="
operator|+
name|format
operator|+
literal|", glyph="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|glyph
argument_list|)
operator|+
literal|"]"
return|;
block|}
block|}
comment|/**      * Inner class representing a Format1 charset.       */
specifier|private
specifier|static
class|class
name|Format1Charset
extends|extends
name|EmbeddedCharset
block|{
specifier|private
name|int
name|format
decl_stmt|;
specifier|private
name|Range1
index|[]
name|range
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"[format="
operator|+
name|format
operator|+
literal|", range="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|range
argument_list|)
operator|+
literal|"]"
return|;
block|}
comment|/**          * Inner class representing a range of a charset.           */
specifier|private
specifier|static
class|class
name|Range1
block|{
specifier|private
name|int
name|first
decl_stmt|;
specifier|private
name|int
name|nLeft
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"[first="
operator|+
name|first
operator|+
literal|", nLeft="
operator|+
name|nLeft
operator|+
literal|"]"
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

