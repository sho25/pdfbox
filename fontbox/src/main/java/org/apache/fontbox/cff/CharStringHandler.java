begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cff
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * A Handler for CharStringCommands.  *   * @author Villu Ruusmann  * @version $Revision$  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|CharStringHandler
block|{
comment|/**      * Handler for a sequence of CharStringCommands.      *       * @param sequence of CharStringCommands      *       * @return may return a command sequence of a subroutine      */
annotation|@
name|SuppressWarnings
argument_list|(
name|value
operator|=
block|{
literal|"unchecked"
block|}
argument_list|)
specifier|public
name|List
argument_list|<
name|Integer
argument_list|>
name|handleSequence
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|sequence
parameter_list|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|numbers
init|=
literal|null
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|int
name|size
init|=
name|sequence
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|object
init|=
name|sequence
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|object
operator|instanceof
name|CharStringCommand
condition|)
block|{
if|if
condition|(
name|numbers
operator|==
literal|null
condition|)
name|numbers
operator|=
operator|(
name|List
operator|)
name|sequence
operator|.
name|subList
argument_list|(
name|offset
argument_list|,
name|i
argument_list|)
expr_stmt|;
else|else
name|numbers
operator|.
name|addAll
argument_list|(
operator|(
name|List
operator|)
name|sequence
operator|.
name|subList
argument_list|(
name|offset
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|stack
init|=
name|handleCommand
argument_list|(
name|numbers
argument_list|,
operator|(
name|CharStringCommand
operator|)
name|object
argument_list|)
decl_stmt|;
if|if
condition|(
name|stack
operator|!=
literal|null
operator|&&
operator|!
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
name|numbers
operator|=
name|stack
expr_stmt|;
else|else
name|numbers
operator|=
literal|null
expr_stmt|;
name|offset
operator|=
name|i
operator|+
literal|1
expr_stmt|;
block|}
block|}
if|if
condition|(
name|numbers
operator|!=
literal|null
operator|&&
operator|!
name|numbers
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|numbers
return|;
else|else
return|return
literal|null
return|;
block|}
comment|/**      * Handler for CharStringCommands.      *        * @param numbers a list of numbers      * @param command the CharStringCommand      *       * @return may return a command sequence of a subroutine      */
specifier|public
specifier|abstract
name|List
argument_list|<
name|Integer
argument_list|>
name|handleCommand
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|numbers
parameter_list|,
name|CharStringCommand
name|command
parameter_list|)
function_decl|;
block|}
end_class

end_unit

