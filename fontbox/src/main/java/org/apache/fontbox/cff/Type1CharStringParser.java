begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cff
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * This class represents a converter for a mapping into a Type1-sequence.  * @author Villu Ruusmann  * @version $Revision: 1.0 $  */
end_comment

begin_class
specifier|public
class|class
name|Type1CharStringParser
block|{
specifier|private
name|DataInput
name|input
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Object
argument_list|>
name|sequence
init|=
literal|null
decl_stmt|;
comment|/**      * The given byte array will be parsed and converted to a Type1 sequence.      * @param bytes the given mapping as byte array      * @return the Type1 sequence      * @throws IOException if an error occurs during reading      */
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|parse
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
name|input
operator|=
operator|new
name|DataInput
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|sequence
operator|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
expr_stmt|;
while|while
condition|(
name|input
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|int
name|b0
init|=
name|input
operator|.
name|readUnsignedByte
argument_list|()
decl_stmt|;
if|if
condition|(
name|b0
operator|>=
literal|0
operator|&&
name|b0
operator|<=
literal|31
condition|)
block|{
name|sequence
operator|.
name|add
argument_list|(
name|readCommand
argument_list|(
name|b0
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|b0
operator|>=
literal|32
operator|&&
name|b0
operator|<=
literal|255
condition|)
block|{
name|sequence
operator|.
name|add
argument_list|(
name|readNumber
argument_list|(
name|b0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
block|}
return|return
name|sequence
return|;
block|}
specifier|private
name|CharStringCommand
name|readCommand
parameter_list|(
name|int
name|b0
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|b0
operator|==
literal|12
condition|)
block|{
name|int
name|b1
init|=
name|input
operator|.
name|readUnsignedByte
argument_list|()
decl_stmt|;
return|return
operator|new
name|CharStringCommand
argument_list|(
name|b0
argument_list|,
name|b1
argument_list|)
return|;
block|}
return|return
operator|new
name|CharStringCommand
argument_list|(
name|b0
argument_list|)
return|;
block|}
specifier|private
name|Integer
name|readNumber
parameter_list|(
name|int
name|b0
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|b0
operator|>=
literal|32
operator|&&
name|b0
operator|<=
literal|246
condition|)
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|b0
operator|-
literal|139
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|b0
operator|>=
literal|247
operator|&&
name|b0
operator|<=
literal|250
condition|)
block|{
name|int
name|b1
init|=
name|input
operator|.
name|readUnsignedByte
argument_list|()
decl_stmt|;
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
operator|(
name|b0
operator|-
literal|247
operator|)
operator|*
literal|256
operator|+
name|b1
operator|+
literal|108
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|b0
operator|>=
literal|251
operator|&&
name|b0
operator|<=
literal|254
condition|)
block|{
name|int
name|b1
init|=
name|input
operator|.
name|readUnsignedByte
argument_list|()
decl_stmt|;
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
operator|-
operator|(
name|b0
operator|-
literal|251
operator|)
operator|*
literal|256
operator|-
name|b1
operator|-
literal|108
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|b0
operator|==
literal|255
condition|)
block|{
name|int
name|b1
init|=
name|input
operator|.
name|readUnsignedByte
argument_list|()
decl_stmt|;
name|int
name|b2
init|=
name|input
operator|.
name|readUnsignedByte
argument_list|()
decl_stmt|;
name|int
name|b3
init|=
name|input
operator|.
name|readUnsignedByte
argument_list|()
decl_stmt|;
name|int
name|b4
init|=
name|input
operator|.
name|readUnsignedByte
argument_list|()
decl_stmt|;
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|b1
operator|<<
literal|24
operator||
name|b2
operator|<<
literal|16
operator||
name|b3
operator|<<
literal|8
operator||
name|b4
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
block|}
block|}
end_class

end_unit

