begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|ttf
operator|.
name|gsub
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * This is an in-efficient implementation based on regex, which helps split the array.  *   * @author Palash Ray  *  */
end_comment

begin_class
specifier|public
class|class
name|GlyphArraySplitterRegexImpl
implements|implements
name|GlyphArraySplitter
block|{
specifier|private
specifier|static
specifier|final
name|String
name|GLYPH_ID_SEPARATOR
init|=
literal|"_"
decl_stmt|;
specifier|private
specifier|final
name|CompoundCharacterTokenizer
name|compoundCharacterTokenizer
decl_stmt|;
specifier|public
name|GlyphArraySplitterRegexImpl
parameter_list|(
name|Set
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|matchers
parameter_list|)
block|{
name|compoundCharacterTokenizer
operator|=
operator|new
name|CompoundCharacterTokenizer
argument_list|(
name|getMatchersAsStrings
argument_list|(
name|matchers
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|split
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|glyphIds
parameter_list|)
block|{
name|String
name|originalGlyphsAsText
init|=
name|convertGlyphIdsToString
argument_list|(
name|glyphIds
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|tokens
init|=
name|compoundCharacterTokenizer
operator|.
name|tokenize
argument_list|(
name|originalGlyphsAsText
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|modifiedGlyphs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|token
range|:
name|tokens
control|)
block|{
name|modifiedGlyphs
operator|.
name|add
argument_list|(
name|convertGlyphIdsToList
argument_list|(
name|token
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|modifiedGlyphs
return|;
block|}
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|getMatchersAsStrings
parameter_list|(
name|Set
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|matchers
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|stringMatchers
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|matchers
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|Integer
argument_list|>
name|glyphIds
range|:
name|matchers
control|)
block|{
name|stringMatchers
operator|.
name|add
argument_list|(
name|convertGlyphIdsToString
argument_list|(
name|glyphIds
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|stringMatchers
return|;
block|}
specifier|private
name|String
name|convertGlyphIdsToString
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|glyphIds
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|20
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|GLYPH_ID_SEPARATOR
argument_list|)
expr_stmt|;
for|for
control|(
name|Integer
name|glyphId
range|:
name|glyphIds
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|glyphId
argument_list|)
operator|.
name|append
argument_list|(
name|GLYPH_ID_SEPARATOR
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|List
argument_list|<
name|Integer
argument_list|>
name|convertGlyphIdsToList
parameter_list|(
name|String
name|glyphIdsAsString
parameter_list|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|gsubProcessedGlyphsIds
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|glyphId
range|:
name|glyphIdsAsString
operator|.
name|split
argument_list|(
name|GLYPH_ID_SEPARATOR
argument_list|)
control|)
block|{
if|if
condition|(
name|glyphId
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
name|gsubProcessedGlyphsIds
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|glyphId
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|gsubProcessedGlyphsIds
return|;
block|}
block|}
end_class

end_unit

