begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*     Licensed to the Apache Software Foundation (ASF) under one or more    contributor license agreements.  See the NOTICE file distributed with    this work for additional information regarding copyright ownership.    The ASF licenses this file to You under the Apache License, Version 2.0    (the "License"); you may not use this file except in compliance with    the License.  You may obtain a copy of the License at         http://www.apache.org/licenses/LICENSE-2.0     Unless required by applicable law or agreed to in writing, software    distributed under the License is distributed on an "AS IS" BASIS,    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.    See the License for the specific language governing permissions and    limitations under the License.   */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|ttf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * This class is based on code from Apache Batik a subproject of Apache XMLGraphics. see  * http://xmlgraphics.apache.org/batik/ for further details.  */
end_comment

begin_class
specifier|public
class|class
name|GlyfCompositeComp
block|{
comment|// Flags for composite glyphs.
comment|/**      * If set, the arguments are words; otherwise, they are bytes.      */
specifier|protected
specifier|static
specifier|final
name|short
name|ARG_1_AND_2_ARE_WORDS
init|=
literal|0x0001
decl_stmt|;
comment|/**      * If set, the arguments are xy values; otherwise they are points.      */
specifier|protected
specifier|static
specifier|final
name|short
name|ARGS_ARE_XY_VALUES
init|=
literal|0x0002
decl_stmt|;
comment|/**      * If set, xy values are rounded to those of the closest grid lines.      */
specifier|protected
specifier|static
specifier|final
name|short
name|ROUND_XY_TO_GRID
init|=
literal|0x0004
decl_stmt|;
comment|/**      * If set, there is a simple scale; otherwise, scale = 1.0.      */
specifier|protected
specifier|static
specifier|final
name|short
name|WE_HAVE_A_SCALE
init|=
literal|0x0008
decl_stmt|;
comment|/**      * Indicates at least one more glyph after this one.      */
specifier|protected
specifier|static
specifier|final
name|short
name|MORE_COMPONENTS
init|=
literal|0x0020
decl_stmt|;
comment|/**      * The x direction will use a different scale from the y direction.      */
specifier|protected
specifier|static
specifier|final
name|short
name|WE_HAVE_AN_X_AND_Y_SCALE
init|=
literal|0x0040
decl_stmt|;
comment|/**      * There is a 2 by2 transformation that will be used to scale the component.      */
specifier|protected
specifier|static
specifier|final
name|short
name|WE_HAVE_A_TWO_BY_TWO
init|=
literal|0x0080
decl_stmt|;
comment|/**      * Following the last component are instructions for the composite character.      */
specifier|protected
specifier|static
specifier|final
name|short
name|WE_HAVE_INSTRUCTIONS
init|=
literal|0x0100
decl_stmt|;
comment|/**      * If set, this forces the aw and lsb (and rsb) for the composite to be equal to those from this original glyph.      */
specifier|protected
specifier|static
specifier|final
name|short
name|USE_MY_METRICS
init|=
literal|0x0200
decl_stmt|;
specifier|private
name|int
name|firstIndex
decl_stmt|;
specifier|private
name|int
name|firstContour
decl_stmt|;
specifier|private
specifier|final
name|short
name|argument1
decl_stmt|;
specifier|private
specifier|final
name|short
name|argument2
decl_stmt|;
specifier|private
specifier|final
name|short
name|flags
decl_stmt|;
specifier|private
specifier|final
name|int
name|glyphIndex
decl_stmt|;
specifier|private
name|double
name|xscale
init|=
literal|1.0
decl_stmt|;
specifier|private
name|double
name|yscale
init|=
literal|1.0
decl_stmt|;
specifier|private
name|double
name|scale01
init|=
literal|0.0
decl_stmt|;
specifier|private
name|double
name|scale10
init|=
literal|0.0
decl_stmt|;
specifier|private
name|int
name|xtranslate
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|ytranslate
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|point1
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|point2
init|=
literal|0
decl_stmt|;
comment|/**      * Constructor.      *       * @param bais the stream to be read      * @throws IOException is thrown if something went wrong      */
specifier|protected
name|GlyfCompositeComp
parameter_list|(
name|TTFDataStream
name|bais
parameter_list|)
throws|throws
name|IOException
block|{
name|flags
operator|=
name|bais
operator|.
name|readSignedShort
argument_list|()
expr_stmt|;
name|glyphIndex
operator|=
name|bais
operator|.
name|readUnsignedShort
argument_list|()
expr_stmt|;
comment|// number of glyph in a font is uint16
comment|// Get the arguments as just their raw values
if|if
condition|(
operator|(
name|flags
operator|&
name|ARG_1_AND_2_ARE_WORDS
operator|)
operator|!=
literal|0
condition|)
block|{
comment|// If this is set, the arguments are 16-bit (uint16 or int16)
name|argument1
operator|=
name|bais
operator|.
name|readSignedShort
argument_list|()
expr_stmt|;
name|argument2
operator|=
name|bais
operator|.
name|readSignedShort
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// otherwise, they are bytes (uint8 or int8).
name|argument1
operator|=
operator|(
name|short
operator|)
name|bais
operator|.
name|readSignedByte
argument_list|()
expr_stmt|;
name|argument2
operator|=
operator|(
name|short
operator|)
name|bais
operator|.
name|readSignedByte
argument_list|()
expr_stmt|;
block|}
comment|// Assign the arguments according to the flags
if|if
condition|(
operator|(
name|flags
operator|&
name|ARGS_ARE_XY_VALUES
operator|)
operator|!=
literal|0
condition|)
block|{
comment|// If this is set, the arguments are signed xy values
name|xtranslate
operator|=
name|argument1
expr_stmt|;
name|ytranslate
operator|=
name|argument2
expr_stmt|;
block|}
else|else
block|{
comment|// otherwise, they are unsigned point numbers.
comment|//TODO why unused?
comment|// https://docs.microsoft.com/en-us/typography/opentype/spec/glyf
comment|// "In the latter case, the first point number indicates the point that is to be matched
comment|// to the new glyph. The second number indicates the new glyph’s “matched” point.
comment|// Once a glyph is added, its point numbers begin directly after the last glyphs
comment|// (endpoint of first glyph + 1).
name|point1
operator|=
name|argument1
expr_stmt|;
name|point2
operator|=
name|argument2
expr_stmt|;
block|}
comment|// Get the scale values (if any)
if|if
condition|(
operator|(
name|flags
operator|&
name|WE_HAVE_A_SCALE
operator|)
operator|!=
literal|0
condition|)
block|{
name|int
name|i
init|=
name|bais
operator|.
name|readSignedShort
argument_list|()
decl_stmt|;
name|xscale
operator|=
name|yscale
operator|=
name|i
operator|/
operator|(
name|double
operator|)
literal|0x4000
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|flags
operator|&
name|WE_HAVE_AN_X_AND_Y_SCALE
operator|)
operator|!=
literal|0
condition|)
block|{
name|short
name|i
init|=
name|bais
operator|.
name|readSignedShort
argument_list|()
decl_stmt|;
name|xscale
operator|=
name|i
operator|/
operator|(
name|double
operator|)
literal|0x4000
expr_stmt|;
name|i
operator|=
name|bais
operator|.
name|readSignedShort
argument_list|()
expr_stmt|;
name|yscale
operator|=
name|i
operator|/
operator|(
name|double
operator|)
literal|0x4000
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|flags
operator|&
name|WE_HAVE_A_TWO_BY_TWO
operator|)
operator|!=
literal|0
condition|)
block|{
name|int
name|i
init|=
name|bais
operator|.
name|readSignedShort
argument_list|()
decl_stmt|;
name|xscale
operator|=
name|i
operator|/
operator|(
name|double
operator|)
literal|0x4000
expr_stmt|;
name|i
operator|=
name|bais
operator|.
name|readSignedShort
argument_list|()
expr_stmt|;
name|scale01
operator|=
name|i
operator|/
operator|(
name|double
operator|)
literal|0x4000
expr_stmt|;
name|i
operator|=
name|bais
operator|.
name|readSignedShort
argument_list|()
expr_stmt|;
name|scale10
operator|=
name|i
operator|/
operator|(
name|double
operator|)
literal|0x4000
expr_stmt|;
name|i
operator|=
name|bais
operator|.
name|readSignedShort
argument_list|()
expr_stmt|;
name|yscale
operator|=
name|i
operator|/
operator|(
name|double
operator|)
literal|0x4000
expr_stmt|;
block|}
block|}
comment|/**      * Sets the first index.      *       * @param idx the first index      */
specifier|public
name|void
name|setFirstIndex
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
name|firstIndex
operator|=
name|idx
expr_stmt|;
block|}
comment|/**      * Returns the first index.      *       * @return the first index.      */
specifier|public
name|int
name|getFirstIndex
parameter_list|()
block|{
return|return
name|firstIndex
return|;
block|}
comment|/**      * Sets the index for the first contour.      *       * @param idx the index of the first contour      */
specifier|public
name|void
name|setFirstContour
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
name|firstContour
operator|=
name|idx
expr_stmt|;
block|}
comment|/**      * Returns the index of the first contour.      *       * @return the index of the first contour.      */
specifier|public
name|int
name|getFirstContour
parameter_list|()
block|{
return|return
name|firstContour
return|;
block|}
comment|/**      * Returns argument 1.      *       * @return argument 1.      */
specifier|public
name|short
name|getArgument1
parameter_list|()
block|{
return|return
name|argument1
return|;
block|}
comment|/**      * Returns argument 2.      *       * @return argument 2.      */
specifier|public
name|short
name|getArgument2
parameter_list|()
block|{
return|return
name|argument2
return|;
block|}
comment|/**      * Returns the flags of the glyph.      *       * @return the flags.      */
specifier|public
name|short
name|getFlags
parameter_list|()
block|{
return|return
name|flags
return|;
block|}
comment|/**      * Returns the index of the first contour.      *       * @return index of the first contour.      */
specifier|public
name|int
name|getGlyphIndex
parameter_list|()
block|{
return|return
name|glyphIndex
return|;
block|}
comment|/**      * Returns the scale-01 value.      *       * @return the scale-01 value.      */
specifier|public
name|double
name|getScale01
parameter_list|()
block|{
return|return
name|scale01
return|;
block|}
comment|/**      * Returns the scale-10 value.      *       * @return the scale-10 value.      */
specifier|public
name|double
name|getScale10
parameter_list|()
block|{
return|return
name|scale10
return|;
block|}
comment|/**      * Returns the x-scaling value.      *       * @return the x-scaling value.      */
specifier|public
name|double
name|getXScale
parameter_list|()
block|{
return|return
name|xscale
return|;
block|}
comment|/**      * Returns the y-scaling value.      *       * @return the y-scaling value.      */
specifier|public
name|double
name|getYScale
parameter_list|()
block|{
return|return
name|yscale
return|;
block|}
comment|/**      * Returns the x-translation value.      *       * @return the x-translation value.      */
specifier|public
name|int
name|getXTranslate
parameter_list|()
block|{
return|return
name|xtranslate
return|;
block|}
comment|/**      * Returns the y-translation value.      *       * @return the y-translation value.      */
specifier|public
name|int
name|getYTranslate
parameter_list|()
block|{
return|return
name|ytranslate
return|;
block|}
comment|/**      * Transforms an x-coordinate of a point for this component.      *       * @param x The x-coordinate of the point to transform      * @param y The y-coordinate of the point to transform      * @return The transformed x-coordinate      */
specifier|public
name|int
name|scaleX
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
block|{
return|return
name|Math
operator|.
name|round
argument_list|(
call|(
name|float
call|)
argument_list|(
name|x
operator|*
name|xscale
operator|+
name|y
operator|*
name|scale10
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Transforms a y-coordinate of a point for this component.      *       * @param x The x-coordinate of the point to transform      * @param y The y-coordinate of the point to transform      * @return The transformed y-coordinate      */
specifier|public
name|int
name|scaleY
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
block|{
return|return
name|Math
operator|.
name|round
argument_list|(
call|(
name|float
call|)
argument_list|(
name|x
operator|*
name|scale01
operator|+
name|y
operator|*
name|yscale
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

