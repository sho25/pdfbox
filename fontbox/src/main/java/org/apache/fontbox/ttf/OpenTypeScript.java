begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|ttf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|LineNumberReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * A class for mapping Unicode codepoints to OpenType script tags  *  * @author Aaron Madlon-Kay  *  * @see<a href="https://www.microsoft.com/typography/otspec/scripttags.htm">Microsoft Typography: Script Tags</a>  * @see<a href="https://www.unicode.org/reports/tr24/">Unicode Script Property</a>  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|OpenTypeScript
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|OpenTypeScript
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|INHERITED
init|=
literal|"Inherited"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|UNKNOWN
init|=
literal|"Unknown"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TAG_DEFAULT
init|=
literal|"DFLT"
decl_stmt|;
comment|/**      * A map associating Unicode scripts with one or more OpenType script tags. Script tags are not      * necessarily the same as Unicode scripts. A single Unicode script may correspond to multiple      * tags, especially when there has been a revision to the latter (e.g. Bengali -> [bng2, beng]).      * When there are multiple tags, they are ordered from newest to oldest.      *      * @see<a href="https://www.microsoft.com/typography/otspec/scripttags.htm">Microsoft      * Typography: Script Tags</a>      */
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|UNICODE_SCRIPT_TO_OPENTYPE_TAG_MAP
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Adlam"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"adlm"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Ahom"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"ahom"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Anatolian_Hieroglyphs"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"hluw"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Arabic"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"arab"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Armenian"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"armn"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Avestan"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"avst"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Balinese"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"bali"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Bamum"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"bamu"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Bassa_Vah"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"bass"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Batak"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"batk"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Bengali"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"bng2"
block|,
literal|"beng"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Bhaiksuki"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"bhks"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Bopomofo"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"bopo"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Brahmi"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"brah"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Braille"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"brai"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Buginese"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"bugi"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Buhid"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"buhd"
block|}
argument_list|)
expr_stmt|;
comment|// Byzantine Music: byzm
name|map
operator|.
name|put
argument_list|(
literal|"Canadian_Aboriginal"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"cans"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Carian"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"cari"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Caucasian_Albanian"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"aghb"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Chakma"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"cakm"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Cham"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"cham"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Cherokee"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"cher"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Common"
argument_list|,
operator|new
name|String
index|[]
block|{
name|TAG_DEFAULT
block|}
argument_list|)
expr_stmt|;
comment|// "Default" in OpenType
name|map
operator|.
name|put
argument_list|(
literal|"Coptic"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"copt"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Cuneiform"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"xsux"
block|}
argument_list|)
expr_stmt|;
comment|// "Sumero-Akkadian Cuneiform" in OpenType
name|map
operator|.
name|put
argument_list|(
literal|"Cypriot"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"cprt"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Cyrillic"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"cyrl"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Deseret"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"dsrt"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Devanagari"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"dev2"
block|,
literal|"deva"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Duployan"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"dupl"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Egyptian_Hieroglyphs"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"egyp"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Elbasan"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"elba"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Ethiopic"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"ethi"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Georgian"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"geor"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Glagolitic"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"glag"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Gothic"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"goth"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Grantha"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"gran"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Greek"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"grek"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Gujarati"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"gjr2"
block|,
literal|"gujr"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Gurmukhi"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"gur2"
block|,
literal|"guru"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Han"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"hani"
block|}
argument_list|)
expr_stmt|;
comment|// "CJK Ideographic" in OpenType
name|map
operator|.
name|put
argument_list|(
literal|"Hangul"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"hang"
block|}
argument_list|)
expr_stmt|;
comment|// Hangul Jamo: jamo
name|map
operator|.
name|put
argument_list|(
literal|"Hanunoo"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"hano"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Hatran"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"hatr"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Hebrew"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"hebr"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Hiragana"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"kana"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Imperial_Aramaic"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"armi"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|INHERITED
argument_list|,
operator|new
name|String
index|[]
block|{
name|INHERITED
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Inscriptional_Pahlavi"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"phli"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Inscriptional_Parthian"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"prti"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Javanese"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"java"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Kaithi"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"kthi"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Kannada"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"knd2"
block|,
literal|"knda"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Katakana"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"kana"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Kayah_Li"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"kali"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Kharoshthi"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"khar"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Khmer"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"khmr"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Khojki"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"khoj"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Khudawadi"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"sind"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Lao"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"lao "
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Latin"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"latn"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Lepcha"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"lepc"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Limbu"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"limb"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Linear_A"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"lina"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Linear_B"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"linb"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Lisu"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"lisu"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Lycian"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"lyci"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Lydian"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"lydi"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Mahajani"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"mahj"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Malayalam"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"mlm2"
block|,
literal|"mlym"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Mandaic"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"mand"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Manichaean"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"mani"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Marchen"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"marc"
block|}
argument_list|)
expr_stmt|;
comment|// Mathematical Alphanumeric Symbols: math
name|map
operator|.
name|put
argument_list|(
literal|"Meetei_Mayek"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"mtei"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Mende_Kikakui"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"mend"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Meroitic_Cursive"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"merc"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Meroitic_Hieroglyphs"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"mero"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Miao"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"plrd"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Modi"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"modi"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Mongolian"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"mong"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Mro"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"mroo"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Multani"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"mult"
block|}
argument_list|)
expr_stmt|;
comment|// Musical Symbols: musc
name|map
operator|.
name|put
argument_list|(
literal|"Myanmar"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"mym2"
block|,
literal|"mymr"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Nabataean"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"nbat"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Newa"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"newa"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"New_Tai_Lue"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"talu"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Nko"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"nko "
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Ogham"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"ogam"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Ol_Chiki"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"olck"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Old_Italic"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"ital"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Old_Hungarian"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"hung"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Old_North_Arabian"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"narb"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Old_Permic"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"perm"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Old_Persian"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"xpeo"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Old_South_Arabian"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"sarb"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Old_Turkic"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"orkh"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Oriya"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"ory2"
block|,
literal|"orya"
block|}
argument_list|)
expr_stmt|;
comment|// "Odia (formerly Oriya)" in OpenType
name|map
operator|.
name|put
argument_list|(
literal|"Osage"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"osge"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Osmanya"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"osma"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Pahawh_Hmong"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"hmng"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Palmyrene"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"palm"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Pau_Cin_Hau"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"pauc"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Phags_Pa"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"phag"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Phoenician"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"phnx"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Psalter_Pahlavi"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"phlp"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Rejang"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"rjng"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Runic"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"runr"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Samaritan"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"samr"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Saurashtra"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"saur"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Sharada"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"shrd"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Shavian"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"shaw"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Siddham"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"sidd"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"SignWriting"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"sgnw"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Sinhala"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"sinh"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Sora_Sompeng"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"sora"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Sundanese"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"sund"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Syloti_Nagri"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"sylo"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Syriac"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"syrc"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Tagalog"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"tglg"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Tagbanwa"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"tagb"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Tai_Le"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"tale"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Tai_Tham"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"lana"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Tai_Viet"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"tavt"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Takri"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"takr"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Tamil"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"tml2"
block|,
literal|"taml"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Tangut"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"tang"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Telugu"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"tel2"
block|,
literal|"telu"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Thaana"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"thaa"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Thai"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"thai"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Tibetan"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"tibt"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Tifinagh"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"tfng"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Tirhuta"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"tirh"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Ugaritic"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"ugar"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|UNKNOWN
argument_list|,
operator|new
name|String
index|[]
block|{
name|TAG_DEFAULT
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Vai"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"vai "
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Warang_Citi"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"wara"
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Yi"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"yi  "
block|}
argument_list|)
expr_stmt|;
name|UNICODE_SCRIPT_TO_OPENTYPE_TAG_MAP
operator|=
name|map
expr_stmt|;
block|}
specifier|private
specifier|static
name|int
index|[]
name|unicodeRangeStarts
decl_stmt|;
specifier|private
specifier|static
name|String
index|[]
name|unicodeRangeScripts
decl_stmt|;
static|static
block|{
name|String
name|path
init|=
literal|"org/apache/fontbox/unicode/Scripts.txt"
decl_stmt|;
try|try
init|(
name|InputStream
name|input
init|=
name|OpenTypeScript
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|path
argument_list|)
init|)
block|{
if|if
condition|(
name|input
operator|!=
literal|null
condition|)
block|{
name|parseScriptsFile
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not find '"
operator|+
name|path
operator|+
literal|"', mirroring char map will be empty: "
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not parse Scripts.txt, mirroring char map will be empty: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|OpenTypeScript
parameter_list|()
block|{     }
specifier|private
specifier|static
name|void
name|parseScriptsFile
parameter_list|(
name|InputStream
name|inputStream
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|int
index|[]
argument_list|,
name|String
argument_list|>
name|unicodeRanges
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|int
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|int
index|[]
name|o1
parameter_list|,
name|int
index|[]
name|o2
parameter_list|)
block|{
return|return
name|Integer
operator|.
name|compare
argument_list|(
name|o1
index|[
literal|0
index|]
argument_list|,
name|o2
index|[
literal|0
index|]
argument_list|)
return|;
block|}
empty_stmt|;
block|}
argument_list|)
decl_stmt|;
try|try
init|(
name|LineNumberReader
name|rd
init|=
operator|new
name|LineNumberReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|inputStream
argument_list|)
argument_list|)
init|)
block|{
name|int
index|[]
name|lastRange
init|=
block|{
name|Integer
operator|.
name|MIN_VALUE
block|,
name|Integer
operator|.
name|MIN_VALUE
block|}
decl_stmt|;
name|String
name|lastScript
init|=
literal|null
decl_stmt|;
do|do
block|{
name|String
name|s
init|=
name|rd
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
break|break;
block|}
comment|// ignore comments
name|int
name|comment
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|'#'
argument_list|)
decl_stmt|;
if|if
condition|(
name|comment
operator|!=
operator|-
literal|1
condition|)
block|{
name|s
operator|=
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|comment
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|<
literal|2
condition|)
block|{
continue|continue;
block|}
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|s
argument_list|,
literal|";"
argument_list|)
decl_stmt|;
name|int
name|nFields
init|=
name|st
operator|.
name|countTokens
argument_list|()
decl_stmt|;
if|if
condition|(
name|nFields
operator|<
literal|2
condition|)
block|{
continue|continue;
block|}
name|String
name|characters
init|=
name|st
operator|.
name|nextToken
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|script
init|=
name|st
operator|.
name|nextToken
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|int
index|[]
name|range
init|=
operator|new
name|int
index|[
literal|2
index|]
decl_stmt|;
name|int
name|rangeDelim
init|=
name|characters
operator|.
name|indexOf
argument_list|(
literal|".."
argument_list|)
decl_stmt|;
if|if
condition|(
name|rangeDelim
operator|==
operator|-
literal|1
condition|)
block|{
name|range
index|[
literal|0
index|]
operator|=
name|range
index|[
literal|1
index|]
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|characters
argument_list|,
literal|16
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|range
index|[
literal|0
index|]
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|characters
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|rangeDelim
argument_list|)
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|range
index|[
literal|1
index|]
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|characters
operator|.
name|substring
argument_list|(
name|rangeDelim
operator|+
literal|2
argument_list|)
argument_list|,
literal|16
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|range
index|[
literal|0
index|]
operator|==
name|lastRange
index|[
literal|1
index|]
operator|+
literal|1
operator|&&
name|script
operator|.
name|equals
argument_list|(
name|lastScript
argument_list|)
condition|)
block|{
comment|// Combine with previous range
name|lastRange
index|[
literal|1
index|]
operator|=
name|range
index|[
literal|1
index|]
expr_stmt|;
block|}
else|else
block|{
name|unicodeRanges
operator|.
name|put
argument_list|(
name|range
argument_list|,
name|script
argument_list|)
expr_stmt|;
name|lastRange
operator|=
name|range
expr_stmt|;
name|lastScript
operator|=
name|script
expr_stmt|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|unicodeRangeStarts
operator|=
operator|new
name|int
index|[
name|unicodeRanges
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|unicodeRangeScripts
operator|=
operator|new
name|String
index|[
name|unicodeRanges
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|int
index|[]
argument_list|,
name|String
argument_list|>
name|e
range|:
name|unicodeRanges
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|unicodeRangeStarts
index|[
name|i
index|]
operator|=
name|e
operator|.
name|getKey
argument_list|()
index|[
literal|0
index|]
expr_stmt|;
name|unicodeRangeScripts
index|[
name|i
index|]
operator|=
name|e
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
comment|/**      * Obtain the Unicode script associated with the given Unicode codepoint.      *      * @param codePoint      * @return A Unicode script string, or {@code #UNKNOWN} if unknown      */
specifier|private
specifier|static
name|String
name|getUnicodeScript
parameter_list|(
name|int
name|codePoint
parameter_list|)
block|{
name|ensureValidCodePoint
argument_list|(
name|codePoint
argument_list|)
expr_stmt|;
name|int
name|type
init|=
name|Character
operator|.
name|getType
argument_list|(
name|codePoint
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|Character
operator|.
name|UNASSIGNED
condition|)
block|{
return|return
name|UNKNOWN
return|;
block|}
name|int
name|scriptIndex
init|=
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|unicodeRangeStarts
argument_list|,
name|codePoint
argument_list|)
decl_stmt|;
if|if
condition|(
name|scriptIndex
operator|<
literal|0
condition|)
block|{
name|scriptIndex
operator|=
operator|-
name|scriptIndex
operator|-
literal|2
expr_stmt|;
block|}
return|return
name|unicodeRangeScripts
index|[
name|scriptIndex
index|]
return|;
block|}
comment|/**      * Obtain the OpenType script tags associated with the given Unicode codepoint.      *      * The result may contain the special value {@code #INHERITED}, which indicates that the      * codepoint's script can only be determined by its context.      *      * Unknown codepoints are mapped to {@code #TAG_DEFAULT}.      *      * @param codePoint      * @return An array of four-char script tags      */
specifier|public
specifier|static
name|String
index|[]
name|getScriptTags
parameter_list|(
name|int
name|codePoint
parameter_list|)
block|{
name|ensureValidCodePoint
argument_list|(
name|codePoint
argument_list|)
expr_stmt|;
name|String
name|unicode
init|=
name|getUnicodeScript
argument_list|(
name|codePoint
argument_list|)
decl_stmt|;
return|return
name|UNICODE_SCRIPT_TO_OPENTYPE_TAG_MAP
operator|.
name|get
argument_list|(
name|unicode
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|ensureValidCodePoint
parameter_list|(
name|int
name|codePoint
parameter_list|)
block|{
if|if
condition|(
name|codePoint
argument_list|<
name|Character
operator|.
name|MIN_CODE_POINT
operator|||
name|codePoint
argument_list|>
name|Character
operator|.
name|MAX_CODE_POINT
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid codepoint: "
operator|+
name|codePoint
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

