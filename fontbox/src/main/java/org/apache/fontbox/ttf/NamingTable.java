begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|ttf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * A table in a true type font.  *   * @author Ben Litchfield (ben@benlitchfield.com)  *   */
end_comment

begin_class
specifier|public
class|class
name|NamingTable
extends|extends
name|TTFTable
block|{
comment|/**      * A tag that identifies this table type.      */
specifier|public
specifier|static
specifier|final
name|String
name|TAG
init|=
literal|"name"
decl_stmt|;
specifier|private
name|List
argument_list|<
name|NameRecord
argument_list|>
name|nameRecords
init|=
operator|new
name|ArrayList
argument_list|<
name|NameRecord
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|String
name|fontFamily
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|fontSubFamily
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|psName
init|=
literal|null
decl_stmt|;
comment|/**      * This will read the required data from the stream.      *       * @param ttf The font that is being read.      * @param data The stream to read the data from.      * @throws IOException If there is an error reading the data.      */
specifier|public
name|void
name|initData
parameter_list|(
name|TrueTypeFont
name|ttf
parameter_list|,
name|TTFDataStream
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|formatSelector
init|=
name|data
operator|.
name|readUnsignedShort
argument_list|()
decl_stmt|;
name|int
name|numberOfNameRecords
init|=
name|data
operator|.
name|readUnsignedShort
argument_list|()
decl_stmt|;
name|int
name|offsetToStartOfStringStorage
init|=
name|data
operator|.
name|readUnsignedShort
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfNameRecords
condition|;
name|i
operator|++
control|)
block|{
name|NameRecord
name|nr
init|=
operator|new
name|NameRecord
argument_list|()
decl_stmt|;
name|nr
operator|.
name|initData
argument_list|(
name|ttf
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|nameRecords
operator|.
name|add
argument_list|(
name|nr
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfNameRecords
condition|;
name|i
operator|++
control|)
block|{
name|NameRecord
name|nr
init|=
name|nameRecords
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|data
operator|.
name|seek
argument_list|(
name|getOffset
argument_list|()
operator|+
operator|(
literal|2
operator|*
literal|3
operator|)
operator|+
name|numberOfNameRecords
operator|*
literal|2
operator|*
literal|6
operator|+
name|nr
operator|.
name|getStringOffset
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|platform
init|=
name|nr
operator|.
name|getPlatformId
argument_list|()
decl_stmt|;
name|int
name|encoding
init|=
name|nr
operator|.
name|getPlatformEncodingId
argument_list|()
decl_stmt|;
name|String
name|charset
init|=
literal|"ISO-8859-1"
decl_stmt|;
if|if
condition|(
name|platform
operator|==
literal|3
operator|&&
operator|(
name|encoding
operator|==
literal|1
operator|||
name|encoding
operator|==
literal|0
operator|)
condition|)
block|{
name|charset
operator|=
literal|"UTF-16"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|platform
operator|==
literal|2
condition|)
block|{
if|if
condition|(
name|encoding
operator|==
literal|0
condition|)
block|{
name|charset
operator|=
literal|"US-ASCII"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|encoding
operator|==
literal|1
condition|)
block|{
comment|//not sure is this is correct??
name|charset
operator|=
literal|"ISO-10646-1"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|encoding
operator|==
literal|2
condition|)
block|{
name|charset
operator|=
literal|"ISO-8859-1"
expr_stmt|;
block|}
block|}
name|String
name|string
init|=
name|data
operator|.
name|readString
argument_list|(
name|nr
operator|.
name|getStringLength
argument_list|()
argument_list|,
name|charset
argument_list|)
decl_stmt|;
name|nr
operator|.
name|setString
argument_list|(
name|string
argument_list|)
expr_stmt|;
if|if
condition|(
name|platform
operator|==
literal|3
operator|&&
operator|(
name|encoding
operator|==
literal|1
operator|||
name|encoding
operator|==
literal|0
operator|)
condition|)
block|{
name|int
name|nameID
init|=
name|nr
operator|.
name|getNameId
argument_list|()
decl_stmt|;
if|if
condition|(
name|nameID
operator|==
name|NameRecord
operator|.
name|NAME_FONT_FAMILY_NAME
operator|&&
name|fontFamily
operator|==
literal|null
condition|)
block|{
name|fontFamily
operator|=
name|string
expr_stmt|;
block|}
if|if
condition|(
name|NameRecord
operator|.
name|NAME_FONT_SUB_FAMILY_NAME
operator|==
name|nameID
operator|&&
name|fontSubFamily
operator|==
literal|null
condition|)
block|{
name|fontSubFamily
operator|=
name|string
expr_stmt|;
block|}
if|if
condition|(
name|nameID
operator|==
name|NameRecord
operator|.
name|NAME_POSTSCRIPT_NAME
operator|&&
name|psName
operator|==
literal|null
condition|)
block|{
name|psName
operator|=
name|string
expr_stmt|;
block|}
block|}
block|}
name|initialized
operator|=
literal|true
expr_stmt|;
block|}
comment|/**      * This will get the name records for this naming table.      *       * @return A list of NameRecord objects.      */
specifier|public
name|List
argument_list|<
name|NameRecord
argument_list|>
name|getNameRecords
parameter_list|()
block|{
return|return
name|nameRecords
return|;
block|}
comment|/**      * Returns the font family name.      *       * @return the font family name      */
specifier|public
name|String
name|getFontFamily
parameter_list|()
block|{
return|return
name|fontFamily
return|;
block|}
comment|/**      * Returns the font sub family name.      *       * @return the font sub family name      */
specifier|public
name|String
name|getFontSubFamily
parameter_list|()
block|{
return|return
name|fontSubFamily
return|;
block|}
comment|/**      * Returns the postscript name.      *       * @return the postscript name      */
specifier|public
name|String
name|getPSName
parameter_list|()
block|{
return|return
name|psName
return|;
block|}
block|}
end_class

end_unit

