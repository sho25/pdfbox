begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|ttf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_comment
comment|/**  * A vertical origin 'VORG' table in an OpenType font.  *  * The purpose of this table is to improve the efficiency of determining  * vertical origins in CFF fonts where absent this information the bounding  * box would have to be extracted from CFF charstring data.  *  * This table is strongly recommended by the OpenType CJK Font Guidelines  * for "CFF OpenType fonts that are used for vertical writing".  *   * This table is specified only in the OpenType specification (1.3 and later).  *   * @author Glenn Adams  *   */
end_comment

begin_class
specifier|public
class|class
name|VerticalOriginTable
extends|extends
name|TTFTable
block|{
comment|/**      * A tag that identifies this table type.      */
specifier|public
specifier|static
specifier|final
name|String
name|TAG
init|=
literal|"VORG"
decl_stmt|;
specifier|private
name|float
name|version
decl_stmt|;
specifier|private
name|int
name|defaultVertOriginY
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|origins
decl_stmt|;
name|VerticalOriginTable
parameter_list|(
name|TrueTypeFont
name|font
parameter_list|)
block|{
name|super
argument_list|(
name|font
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will read the required data from the stream.      *       * @param ttf The font that is being read.      * @param data The stream to read the data from.      * @throws IOException If there is an error reading the data.      */
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|TrueTypeFont
name|ttf
parameter_list|,
name|TTFDataStream
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|version
operator|=
name|data
operator|.
name|read32Fixed
argument_list|()
expr_stmt|;
name|defaultVertOriginY
operator|=
name|data
operator|.
name|readSignedShort
argument_list|()
expr_stmt|;
name|int
name|numVertOriginYMetrics
init|=
name|data
operator|.
name|readUnsignedShort
argument_list|()
decl_stmt|;
name|origins
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|(
name|numVertOriginYMetrics
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numVertOriginYMetrics
condition|;
operator|++
name|i
control|)
block|{
name|int
name|g
init|=
name|data
operator|.
name|readUnsignedShort
argument_list|()
decl_stmt|;
name|int
name|y
init|=
name|data
operator|.
name|readSignedShort
argument_list|()
decl_stmt|;
name|origins
operator|.
name|put
argument_list|(
name|g
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
name|initialized
operator|=
literal|true
expr_stmt|;
block|}
comment|/**      * @return Returns the version.      */
specifier|public
name|float
name|getVersion
parameter_list|()
block|{
return|return
name|version
return|;
block|}
comment|/**      * Returns the y-coordinate of the vertical origin for the given GID if known,      * or returns the default value if not specified in table data.      *      * @param gid GID      * @return Returns the y-coordinate of the vertical origin.      */
specifier|public
name|int
name|getOriginY
parameter_list|(
name|int
name|gid
parameter_list|)
block|{
if|if
condition|(
name|origins
operator|.
name|containsKey
argument_list|(
name|gid
argument_list|)
condition|)
block|{
return|return
name|origins
operator|.
name|get
argument_list|(
name|gid
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|defaultVertOriginY
return|;
block|}
block|}
block|}
end_class

end_unit

