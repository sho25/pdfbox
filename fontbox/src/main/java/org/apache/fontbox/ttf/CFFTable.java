begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|ttf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cff
operator|.
name|CFFFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cff
operator|.
name|CFFParser
import|;
end_import

begin_comment
comment|/**  * PostScript font program (compact font format).  */
end_comment

begin_class
specifier|public
class|class
name|CFFTable
extends|extends
name|TTFTable
block|{
comment|/**      * A tag that identifies this table type.      */
specifier|public
specifier|static
specifier|final
name|String
name|TAG
init|=
literal|"CFF "
decl_stmt|;
specifier|private
name|CFFFont
name|cffFont
decl_stmt|;
name|CFFTable
parameter_list|(
name|TrueTypeFont
name|font
parameter_list|)
block|{
name|super
argument_list|(
name|font
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will read the required data from the stream.      *      * @param ttf The font that is being read.      * @param data The stream to read the data from.      * @throws java.io.IOException If there is an error reading the data.      */
annotation|@
name|Override
name|void
name|read
parameter_list|(
name|TrueTypeFont
name|ttf
parameter_list|,
name|TTFDataStream
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|bytes
init|=
name|data
operator|.
name|read
argument_list|(
operator|(
name|int
operator|)
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|CFFParser
name|parser
init|=
operator|new
name|CFFParser
argument_list|()
decl_stmt|;
name|cffFont
operator|=
name|parser
operator|.
name|parse
argument_list|(
name|bytes
argument_list|,
operator|new
name|CFFBytesource
argument_list|(
name|font
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|initialized
operator|=
literal|true
expr_stmt|;
block|}
comment|/**      * Returns the CFF font, which is a compact representation of a PostScript Type 1, or CIDFont      */
specifier|public
name|CFFFont
name|getFont
parameter_list|()
block|{
return|return
name|cffFont
return|;
block|}
comment|/**      * Allows bytes to be re-read later by CFFParser.      */
specifier|private
specifier|static
class|class
name|CFFBytesource
implements|implements
name|CFFParser
operator|.
name|ByteSource
block|{
specifier|private
specifier|final
name|TrueTypeFont
name|ttf
decl_stmt|;
name|CFFBytesource
parameter_list|(
name|TrueTypeFont
name|ttf
parameter_list|)
block|{
name|this
operator|.
name|ttf
operator|=
name|ttf
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getBytes
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|ttf
operator|.
name|getTableBytes
argument_list|(
name|ttf
operator|.
name|getTableMap
argument_list|()
operator|.
name|get
argument_list|(
name|CFFTable
operator|.
name|TAG
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

