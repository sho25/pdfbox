begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2015 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|ttf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_comment
comment|/**  * This class is a version of the one published at  * https://code.google.com/p/jmzreader/wiki/BufferedRandomAccessFile augmented to handle unsigned  * bytes. The original class is published under Apache 2.0 license. Fix is marked below  *  * This is an optimized version of the RandomAccessFile class as described by Nick Zhang on  * JavaWorld.com. The article can be found at  * http://www.javaworld.com/javaworld/javatips/jw-javatip26.html  *  * @author jg  */
end_comment

begin_class
specifier|public
class|class
name|BufferedRandomAccessFile
extends|extends
name|RandomAccessFile
block|{
comment|/**      * Uses a byte instead of a char buffer for efficiency reasons.      */
specifier|private
name|byte
name|buffer
index|[]
decl_stmt|;
specifier|private
name|int
name|buf_end
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|buf_pos
init|=
literal|0
decl_stmt|;
comment|/**      * The position inside the actual file.      */
specifier|private
name|long
name|real_pos
init|=
literal|0
decl_stmt|;
comment|/**      * Buffer size.      */
specifier|private
specifier|final
name|int
name|BUF_SIZE
decl_stmt|;
comment|/**      * Creates a new instance of the BufferedRandomAccessFile.      *      * @param filename The path of the file to open.      * @param mode Specifies the mode to use ("r", "rw", etc.) See the BufferedLineReader      * documentation for more information.      * @param bufsize The buffer size (in bytes) to use.      * @throws IOException      */
specifier|public
name|BufferedRandomAccessFile
parameter_list|(
name|String
name|filename
parameter_list|,
name|String
name|mode
parameter_list|,
name|int
name|bufsize
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|filename
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
name|BUF_SIZE
operator|=
name|bufsize
expr_stmt|;
name|buffer
operator|=
operator|new
name|byte
index|[
name|BUF_SIZE
index|]
expr_stmt|;
block|}
specifier|public
name|BufferedRandomAccessFile
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|mode
parameter_list|,
name|int
name|bufsize
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|mode
argument_list|,
name|bufsize
argument_list|)
expr_stmt|;
block|}
comment|/**      * Reads one byte form the current position      *      * @return The read byte or -1 in case the end was reached.      */
annotation|@
name|Override
specifier|public
specifier|final
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|buf_pos
operator|>=
name|buf_end
condition|)
block|{
if|if
condition|(
name|fillBuffer
argument_list|()
operator|<
literal|0
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
if|if
condition|(
name|buf_end
operator|==
literal|0
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
comment|// FIX to handle unsigned bytes
return|return
operator|(
name|buffer
index|[
name|buf_pos
operator|++
index|]
operator|+
literal|256
operator|)
operator|&
literal|0xFF
return|;
comment|// End of fix
block|}
block|}
comment|/**      * Reads the next BUF_SIZE bytes into the internal buffer.      *      * @return      * @throws IOException      */
specifier|private
name|int
name|fillBuffer
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|n
init|=
name|super
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|BUF_SIZE
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|>=
literal|0
condition|)
block|{
name|real_pos
operator|+=
name|n
expr_stmt|;
name|buf_end
operator|=
name|n
expr_stmt|;
name|buf_pos
operator|=
literal|0
expr_stmt|;
block|}
return|return
name|n
return|;
block|}
comment|/**      * Clears the local buffer.      *      * @throws IOException      */
specifier|private
name|void
name|invalidate
parameter_list|()
throws|throws
name|IOException
block|{
name|buf_end
operator|=
literal|0
expr_stmt|;
name|buf_pos
operator|=
literal|0
expr_stmt|;
name|real_pos
operator|=
name|super
operator|.
name|getFilePointer
argument_list|()
expr_stmt|;
block|}
comment|/**      * Reads the set number of bytes into the passed buffer.      *      * @param b The buffer to read the bytes into.      * @param off Byte offset within the file to start reading from      * @param len Number of bytes to read into the buffer.      * @return Number of bytes read.      */
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|byte
name|b
index|[]
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|leftover
init|=
name|buf_end
operator|-
name|buf_pos
decl_stmt|;
if|if
condition|(
name|len
operator|<=
name|leftover
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|buffer
argument_list|,
name|buf_pos
argument_list|,
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|buf_pos
operator|+=
name|len
expr_stmt|;
return|return
name|len
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|int
name|c
init|=
name|this
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|!=
operator|-
literal|1
condition|)
block|{
name|b
index|[
name|off
operator|+
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|c
expr_stmt|;
block|}
else|else
block|{
return|return
name|i
return|;
block|}
block|}
return|return
name|len
return|;
block|}
comment|/**      * Returns the current position of the pointer in the file.      *      * @return The byte position of the pointer in the file.      */
annotation|@
name|Override
specifier|public
name|long
name|getFilePointer
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|l
init|=
name|real_pos
decl_stmt|;
return|return
operator|(
name|l
operator|-
name|buf_end
operator|+
name|buf_pos
operator|)
return|;
block|}
comment|/**      * Moves the internal pointer to the passed (byte) position in the file.      *      * @param pos The byte position to move to.      */
annotation|@
name|Override
specifier|public
name|void
name|seek
parameter_list|(
name|long
name|pos
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|n
init|=
call|(
name|int
call|)
argument_list|(
name|real_pos
operator|-
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|>=
literal|0
operator|&&
name|n
operator|<=
name|buf_end
condition|)
block|{
name|buf_pos
operator|=
name|buf_end
operator|-
name|n
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|seek
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

