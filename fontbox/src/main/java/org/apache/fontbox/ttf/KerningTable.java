begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|ttf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * A 'kern' table in a true type font.  *   * @author Glenn Adams  */
end_comment

begin_class
specifier|public
class|class
name|KerningTable
extends|extends
name|TTFTable
block|{
comment|/**      * Tag to identify this table.      */
specifier|public
specifier|static
specifier|final
name|String
name|TAG
init|=
literal|"kern"
decl_stmt|;
specifier|private
name|KerningSubtable
index|[]
name|subtables
decl_stmt|;
name|KerningTable
parameter_list|(
name|TrueTypeFont
name|font
parameter_list|)
block|{
name|super
argument_list|(
name|font
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will read the required data from the stream.      *       * @param ttf The font that is being read.      * @param data The stream to read the data from.      * @throws IOException If there is an error reading the data.      */
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|TrueTypeFont
name|ttf
parameter_list|,
name|TTFDataStream
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|version
init|=
name|data
operator|.
name|readUnsignedShort
argument_list|()
decl_stmt|;
if|if
condition|(
name|version
operator|!=
literal|0
condition|)
block|{
name|version
operator|=
operator|(
name|version
operator|<<
literal|16
operator|)
operator||
name|data
operator|.
name|readUnsignedShort
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|version
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Unsupported kerning table version: "
operator|+
name|version
argument_list|)
throw|;
block|}
name|int
name|numSubtables
decl_stmt|;
if|if
condition|(
name|version
operator|==
literal|0
condition|)
block|{
name|numSubtables
operator|=
name|data
operator|.
name|readUnsignedShort
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|numSubtables
operator|=
operator|(
name|int
operator|)
name|data
operator|.
name|readUnsignedInt
argument_list|()
expr_stmt|;
block|}
name|subtables
operator|=
operator|new
name|KerningSubtable
index|[
name|numSubtables
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSubtables
condition|;
operator|++
name|i
control|)
block|{
name|KerningSubtable
name|subtable
init|=
operator|new
name|KerningSubtable
argument_list|()
decl_stmt|;
name|subtable
operator|.
name|read
argument_list|(
name|data
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|subtables
index|[
name|i
index|]
operator|=
name|subtable
expr_stmt|;
block|}
name|initialized
operator|=
literal|true
expr_stmt|;
block|}
comment|/**      * Obtain first subtable that supports non-cross-stream horizontal kerning.      *       * @return first matching subtable or null if none found      */
specifier|public
name|KerningSubtable
name|getHorizontalKerningSubtable
parameter_list|()
block|{
return|return
name|getHorizontalKerningSubtable
argument_list|(
literal|false
argument_list|)
return|;
block|}
comment|/**      * Obtain first subtable that supports horizontal kerning with specificed cross stream.      *       * @param cross true if requesting cross stream horizontal kerning      * @return first matching subtable or null if none found      */
specifier|public
name|KerningSubtable
name|getHorizontalKerningSubtable
parameter_list|(
name|boolean
name|cross
parameter_list|)
block|{
for|for
control|(
name|KerningSubtable
name|s
range|:
name|subtables
control|)
block|{
if|if
condition|(
name|s
operator|.
name|isHorizontalKerning
argument_list|(
name|cross
argument_list|)
condition|)
block|{
return|return
name|s
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

