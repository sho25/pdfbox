begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|ttf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|GeneralPath
import|;
end_import

begin_comment
comment|/**  * This class provides a glyph to GeneralPath conversion for true type fonts.  * Based on code from Apache Batik a subproject of Apache XMLGraphics.  *  * @see<a href="http://xmlgraphics.apache.org/batik">http://xmlgraphics.apache.org/batik</a>  */
end_comment

begin_class
class|class
name|GlyphRenderer
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|GlyphRenderer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|GlyphDescription
name|glyphDescription
decl_stmt|;
specifier|public
name|GlyphRenderer
parameter_list|(
name|GlyphDescription
name|glyphDescription
parameter_list|)
block|{
name|this
operator|.
name|glyphDescription
operator|=
name|glyphDescription
expr_stmt|;
block|}
comment|/**      * Returns the path of the glyph.      * @return the path      */
specifier|public
name|GeneralPath
name|getPath
parameter_list|()
block|{
name|Point
index|[]
name|points
init|=
name|describe
argument_list|(
name|glyphDescription
argument_list|)
decl_stmt|;
return|return
name|calculatePath
argument_list|(
name|points
argument_list|)
return|;
block|}
comment|/**      * Set the points of a glyph from the GlyphDescription.      */
specifier|private
name|Point
index|[]
name|describe
parameter_list|(
name|GlyphDescription
name|gd
parameter_list|)
block|{
name|int
name|endPtIndex
init|=
literal|0
decl_stmt|;
name|Point
index|[]
name|points
init|=
operator|new
name|Point
index|[
name|gd
operator|.
name|getPointCount
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|gd
operator|.
name|getPointCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|endPt
init|=
name|gd
operator|.
name|getEndPtOfContours
argument_list|(
name|endPtIndex
argument_list|)
operator|==
name|i
decl_stmt|;
if|if
condition|(
name|endPt
condition|)
block|{
name|endPtIndex
operator|++
expr_stmt|;
block|}
name|points
index|[
name|i
index|]
operator|=
operator|new
name|Point
argument_list|(
name|gd
operator|.
name|getXCoordinate
argument_list|(
name|i
argument_list|)
argument_list|,
name|gd
operator|.
name|getYCoordinate
argument_list|(
name|i
argument_list|)
argument_list|,
operator|(
name|gd
operator|.
name|getFlags
argument_list|(
name|i
argument_list|)
operator|&
name|GlyfDescript
operator|.
name|ON_CURVE
operator|)
operator|!=
literal|0
argument_list|,
name|endPt
argument_list|)
expr_stmt|;
block|}
return|return
name|points
return|;
block|}
comment|/**      * Use the given points to calculate a GeneralPath.      *      * @param points the points to be used to generate the GeneralPath      *      * @return the calculated GeneralPath      */
specifier|private
name|GeneralPath
name|calculatePath
parameter_list|(
name|Point
index|[]
name|points
parameter_list|)
block|{
name|GeneralPath
name|path
init|=
operator|new
name|GeneralPath
argument_list|()
decl_stmt|;
name|int
name|numberOfPoints
init|=
name|points
operator|.
name|length
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|boolean
name|endOfContour
init|=
literal|true
decl_stmt|;
name|Point
name|startingPoint
init|=
literal|null
decl_stmt|;
name|Point
name|offCurveStartPoint
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|numberOfPoints
condition|)
block|{
name|Point
name|point
init|=
name|points
index|[
name|i
operator|%
name|numberOfPoints
index|]
decl_stmt|;
name|Point
name|nextPoint1
init|=
name|points
index|[
operator|(
name|i
operator|+
literal|1
operator|)
operator|%
name|numberOfPoints
index|]
decl_stmt|;
name|Point
name|nextPoint2
init|=
name|points
index|[
operator|(
name|i
operator|+
literal|2
operator|)
operator|%
name|numberOfPoints
index|]
decl_stmt|;
comment|// new contour
if|if
condition|(
name|endOfContour
condition|)
block|{
comment|// skip endOfContour points
if|if
condition|(
name|point
operator|.
name|endOfContour
condition|)
block|{
name|i
operator|++
expr_stmt|;
continue|continue;
block|}
comment|// move to the starting point
name|moveTo
argument_list|(
name|path
argument_list|,
name|point
argument_list|)
expr_stmt|;
name|endOfContour
operator|=
literal|false
expr_stmt|;
name|startingPoint
operator|=
name|point
expr_stmt|;
name|offCurveStartPoint
operator|=
literal|null
expr_stmt|;
if|if
condition|(
operator|!
name|point
operator|.
name|onCurve
operator|&&
operator|!
name|nextPoint1
operator|.
name|onCurve
condition|)
block|{
comment|// off curve start
name|offCurveStartPoint
operator|=
name|point
expr_stmt|;
name|startingPoint
operator|=
name|midValue
argument_list|(
name|point
argument_list|,
name|nextPoint1
argument_list|)
expr_stmt|;
name|moveTo
argument_list|(
name|path
argument_list|,
name|startingPoint
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|point
operator|.
name|onCurve
condition|)
block|{
name|offCurveStartPoint
operator|=
literal|null
expr_stmt|;
block|}
comment|// lineTo
if|if
condition|(
name|point
operator|.
name|onCurve
operator|&&
name|nextPoint1
operator|.
name|onCurve
condition|)
block|{
name|lineTo
argument_list|(
name|path
argument_list|,
name|nextPoint1
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
if|if
condition|(
name|point
operator|.
name|endOfContour
operator|||
name|nextPoint1
operator|.
name|endOfContour
condition|)
block|{
name|endOfContour
operator|=
literal|true
expr_stmt|;
name|closePath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
comment|// quadratic bezier
if|if
condition|(
name|point
operator|.
name|onCurve
operator|&&
operator|!
name|nextPoint1
operator|.
name|onCurve
operator|&&
name|nextPoint2
operator|.
name|onCurve
condition|)
block|{
if|if
condition|(
name|nextPoint1
operator|.
name|endOfContour
condition|)
block|{
comment|// use the starting point as end point
name|quadTo
argument_list|(
name|path
argument_list|,
name|nextPoint1
argument_list|,
name|startingPoint
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|quadTo
argument_list|(
name|path
argument_list|,
name|nextPoint1
argument_list|,
name|nextPoint2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nextPoint1
operator|.
name|endOfContour
operator|||
name|nextPoint2
operator|.
name|endOfContour
condition|)
block|{
name|endOfContour
operator|=
literal|true
expr_stmt|;
name|closePath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
name|i
operator|+=
literal|2
expr_stmt|;
continue|continue;
block|}
comment|// TH segment for curves that start with an off-curve point
if|if
condition|(
name|offCurveStartPoint
operator|!=
literal|null
operator|&&
operator|!
name|nextPoint1
operator|.
name|onCurve
operator|&&
operator|!
name|nextPoint2
operator|.
name|onCurve
condition|)
block|{
comment|// interpolate endPoint
name|quadTo
argument_list|(
name|path
argument_list|,
name|nextPoint1
argument_list|,
name|midValue
argument_list|(
name|nextPoint1
argument_list|,
name|nextPoint2
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|point
operator|.
name|endOfContour
operator|||
name|nextPoint1
operator|.
name|endOfContour
operator|||
name|nextPoint2
operator|.
name|endOfContour
condition|)
block|{
name|quadTo
argument_list|(
name|path
argument_list|,
name|nextPoint2
argument_list|,
name|midValue
argument_list|(
name|nextPoint2
argument_list|,
name|offCurveStartPoint
argument_list|)
argument_list|)
expr_stmt|;
name|quadTo
argument_list|(
name|path
argument_list|,
name|offCurveStartPoint
argument_list|,
name|startingPoint
argument_list|)
expr_stmt|;
name|endOfContour
operator|=
literal|true
expr_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
continue|continue;
block|}
operator|++
name|i
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|point
operator|.
name|onCurve
operator|&&
operator|!
name|nextPoint1
operator|.
name|onCurve
operator|&&
operator|!
name|nextPoint2
operator|.
name|onCurve
condition|)
block|{
comment|// interpolate endPoint
name|quadTo
argument_list|(
name|path
argument_list|,
name|nextPoint1
argument_list|,
name|midValue
argument_list|(
name|nextPoint1
argument_list|,
name|nextPoint2
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|point
operator|.
name|endOfContour
operator|||
name|nextPoint1
operator|.
name|endOfContour
operator|||
name|nextPoint2
operator|.
name|endOfContour
condition|)
block|{
name|quadTo
argument_list|(
name|path
argument_list|,
name|nextPoint2
argument_list|,
name|startingPoint
argument_list|)
expr_stmt|;
name|endOfContour
operator|=
literal|true
expr_stmt|;
name|closePath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
name|i
operator|+=
literal|2
expr_stmt|;
continue|continue;
block|}
comment|// TH the control point is never interpolated
if|if
condition|(
operator|!
name|point
operator|.
name|onCurve
operator|&&
operator|!
name|nextPoint1
operator|.
name|onCurve
condition|)
block|{
name|quadTo
argument_list|(
name|path
argument_list|,
name|point
argument_list|,
name|midValue
argument_list|(
name|point
argument_list|,
name|nextPoint1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|point
operator|.
name|endOfContour
operator|||
name|nextPoint1
operator|.
name|endOfContour
condition|)
block|{
name|endOfContour
operator|=
literal|true
expr_stmt|;
name|quadTo
argument_list|(
name|path
argument_list|,
name|nextPoint1
argument_list|,
name|startingPoint
argument_list|)
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|point
operator|.
name|onCurve
operator|&&
name|nextPoint1
operator|.
name|onCurve
condition|)
block|{
name|quadTo
argument_list|(
name|path
argument_list|,
name|point
argument_list|,
name|nextPoint1
argument_list|)
expr_stmt|;
if|if
condition|(
name|point
operator|.
name|endOfContour
operator|||
name|nextPoint1
operator|.
name|endOfContour
condition|)
block|{
name|endOfContour
operator|=
literal|true
expr_stmt|;
name|closePath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
continue|continue;
block|}
name|LOG
operator|.
name|error
argument_list|(
literal|"Unknown glyph command!!"
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|path
return|;
block|}
specifier|private
name|void
name|closePath
parameter_list|(
name|GeneralPath
name|path
parameter_list|)
block|{
name|path
operator|.
name|closePath
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"closePath"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|moveTo
parameter_list|(
name|GeneralPath
name|path
parameter_list|,
name|Point
name|point
parameter_list|)
block|{
name|path
operator|.
name|moveTo
argument_list|(
name|point
operator|.
name|x
argument_list|,
name|point
operator|.
name|y
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"moveTo: "
operator|+
name|String
operator|.
name|format
argument_list|(
literal|"%d,%d"
argument_list|,
name|point
operator|.
name|x
argument_list|,
name|point
operator|.
name|y
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|lineTo
parameter_list|(
name|GeneralPath
name|path
parameter_list|,
name|Point
name|point
parameter_list|)
block|{
name|path
operator|.
name|lineTo
argument_list|(
name|point
operator|.
name|x
argument_list|,
name|point
operator|.
name|y
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"lineTo: "
operator|+
name|String
operator|.
name|format
argument_list|(
literal|"%d,%d"
argument_list|,
name|point
operator|.
name|x
argument_list|,
name|point
operator|.
name|y
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|quadTo
parameter_list|(
name|GeneralPath
name|path
parameter_list|,
name|Point
name|ctrlPoint
parameter_list|,
name|Point
name|point
parameter_list|)
block|{
name|path
operator|.
name|quadTo
argument_list|(
name|ctrlPoint
operator|.
name|x
argument_list|,
name|ctrlPoint
operator|.
name|y
argument_list|,
name|point
operator|.
name|x
argument_list|,
name|point
operator|.
name|y
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"quadTo: "
operator|+
name|String
operator|.
name|format
argument_list|(
literal|"%d,%d %d,%d"
argument_list|,
name|ctrlPoint
operator|.
name|x
argument_list|,
name|ctrlPoint
operator|.
name|y
argument_list|,
name|point
operator|.
name|x
argument_list|,
name|point
operator|.
name|y
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|int
name|midValue
parameter_list|(
name|int
name|a
parameter_list|,
name|int
name|b
parameter_list|)
block|{
return|return
name|a
operator|+
operator|(
name|b
operator|-
name|a
operator|)
operator|/
literal|2
return|;
block|}
specifier|private
name|Point
name|midValue
parameter_list|(
name|Point
name|point1
parameter_list|,
name|Point
name|point2
parameter_list|)
block|{
return|return
operator|new
name|Point
argument_list|(
name|midValue
argument_list|(
name|point1
operator|.
name|x
argument_list|,
name|point2
operator|.
name|x
argument_list|)
argument_list|,
name|midValue
argument_list|(
name|point1
operator|.
name|y
argument_list|,
name|point2
operator|.
name|y
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * This class represents one point of a glyph.      */
specifier|private
class|class
name|Point
block|{
specifier|private
name|int
name|x
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|y
init|=
literal|0
decl_stmt|;
specifier|private
name|boolean
name|onCurve
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|endOfContour
init|=
literal|false
decl_stmt|;
name|Point
parameter_list|(
name|int
name|xValue
parameter_list|,
name|int
name|yValue
parameter_list|,
name|boolean
name|onCurveValue
parameter_list|,
name|boolean
name|endOfContourValue
parameter_list|)
block|{
name|x
operator|=
name|xValue
expr_stmt|;
name|y
operator|=
name|yValue
expr_stmt|;
name|onCurve
operator|=
name|onCurveValue
expr_stmt|;
name|endOfContour
operator|=
name|endOfContourValue
expr_stmt|;
block|}
name|Point
parameter_list|(
name|int
name|xValue
parameter_list|,
name|int
name|yValue
parameter_list|)
block|{
name|this
argument_list|(
name|xValue
argument_list|,
name|yValue
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"Point(%d,%d,%s,%s)"
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|onCurve
condition|?
literal|"onCurve"
else|:
literal|""
argument_list|,
name|endOfContour
condition|?
literal|"endOfContour"
else|:
literal|""
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

