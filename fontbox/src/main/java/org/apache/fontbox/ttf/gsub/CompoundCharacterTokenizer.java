begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|ttf
operator|.
name|gsub
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * Takes in the given text having compound-glyphs to substitute, and splits it into chunks consisting of parts that  * should be substituted and the ones that can be processed normally.  *   * @author Palash Ray  *   */
end_comment

begin_class
specifier|public
class|class
name|CompoundCharacterTokenizer
block|{
specifier|private
specifier|final
name|Pattern
name|regexExpression
decl_stmt|;
specifier|public
name|CompoundCharacterTokenizer
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|compoundWords
parameter_list|)
block|{
name|regexExpression
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|getRegexFromTokens
argument_list|(
name|compoundWords
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CompoundCharacterTokenizer
parameter_list|(
name|String
name|singleRegex
parameter_list|)
block|{
name|regexExpression
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|singleRegex
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|tokenize
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|tokens
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Matcher
name|regexMatcher
init|=
name|regexExpression
operator|.
name|matcher
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|int
name|lastIndexOfPrevMatch
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|regexMatcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|int
name|beginIndexOfNextMatch
init|=
name|regexMatcher
operator|.
name|start
argument_list|()
decl_stmt|;
name|String
name|prevToken
init|=
name|text
operator|.
name|substring
argument_list|(
name|lastIndexOfPrevMatch
argument_list|,
name|beginIndexOfNextMatch
argument_list|)
decl_stmt|;
if|if
condition|(
name|prevToken
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|tokens
operator|.
name|add
argument_list|(
name|prevToken
argument_list|)
expr_stmt|;
block|}
name|String
name|currentMatch
init|=
name|regexMatcher
operator|.
name|group
argument_list|()
decl_stmt|;
name|tokens
operator|.
name|add
argument_list|(
name|currentMatch
argument_list|)
expr_stmt|;
name|lastIndexOfPrevMatch
operator|=
name|regexMatcher
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
name|String
name|tail
init|=
name|text
operator|.
name|substring
argument_list|(
name|lastIndexOfPrevMatch
argument_list|,
name|text
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tail
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|tokens
operator|.
name|add
argument_list|(
name|tail
argument_list|)
expr_stmt|;
block|}
return|return
name|tokens
return|;
block|}
specifier|private
name|String
name|getRegexFromTokens
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|compoundWords
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|compoundWord
range|:
name|compoundWords
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|compoundWord
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")|"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|setLength
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

