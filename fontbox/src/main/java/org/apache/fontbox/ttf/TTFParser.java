begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|ttf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * A true type font file parser.  *   * @author Ben Litchfield (ben@benlitchfield.com)  */
end_comment

begin_class
specifier|public
class|class
name|TTFParser
extends|extends
name|AbstractTTFParser
block|{
comment|/**      * Constructor.      */
specifier|public
name|TTFParser
parameter_list|()
block|{
name|super
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor.      *        * @param isEmbedded indicates whether the font is embedded or not.      */
specifier|public
name|TTFParser
parameter_list|(
name|boolean
name|isEmbedded
parameter_list|)
block|{
name|super
argument_list|(
name|isEmbedded
argument_list|)
expr_stmt|;
block|}
comment|/**      *  Constructor.      *        * @param isEmbedded indicates whether the font is embedded or not.      * @param parseOnDemand indicates whether the tables of the font should be parsed on demand only or not.      */
specifier|public
name|TTFParser
parameter_list|(
name|boolean
name|isEmbedded
parameter_list|,
name|boolean
name|parseOnDemand
parameter_list|)
block|{
name|super
argument_list|(
name|isEmbedded
argument_list|,
name|parseOnDemand
argument_list|)
expr_stmt|;
block|}
comment|/**      * A simple command line program to test parsing of a TTF file.<br/>      * usage: java org.pdfbox.ttf.TTFParser&lt;ttf-file&gt;      *       * @param args The command line arguments.      *       * @throws IOException If there is an error while parsing the font file.      */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"usage: java org.pdfbox.ttf.TTFParser<ttf-file>"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|TTFParser
name|parser
init|=
operator|new
name|TTFParser
argument_list|()
decl_stmt|;
name|TrueTypeFont
name|font
init|=
name|parser
operator|.
name|parseTTF
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Font:"
operator|+
name|font
argument_list|)
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|protected
name|void
name|parseTables
parameter_list|(
name|TrueTypeFont
name|font
parameter_list|,
name|TTFDataStream
name|raf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|parseTables
argument_list|(
name|font
argument_list|,
name|raf
argument_list|)
expr_stmt|;
comment|// check others mandatory tables
if|if
condition|(
operator|!
name|isEmbedded
operator|&&
name|font
operator|.
name|getCMAP
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"cmap is mandatory"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

