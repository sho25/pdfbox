begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|ttf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * An encoding entry for a cmap.  *   * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.2 $  */
end_comment

begin_class
specifier|public
class|class
name|CMAPEncodingEntry
block|{
specifier|private
name|int
name|platformId
decl_stmt|;
specifier|private
name|int
name|platformEncodingId
decl_stmt|;
specifier|private
name|long
name|subTableOffset
decl_stmt|;
specifier|private
name|int
index|[]
name|glyphIdToCharacterCode
decl_stmt|;
comment|/**      * This will read the required data from the stream.      *       * @param ttf The font that is being read.      * @param data The stream to read the data from.      * @throws IOException If there is an error reading the data.      */
specifier|public
name|void
name|initData
parameter_list|(
name|TrueTypeFont
name|ttf
parameter_list|,
name|TTFDataStream
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|platformId
operator|=
name|data
operator|.
name|readUnsignedShort
argument_list|()
expr_stmt|;
name|platformEncodingId
operator|=
name|data
operator|.
name|readUnsignedShort
argument_list|()
expr_stmt|;
name|subTableOffset
operator|=
name|data
operator|.
name|readUnsignedInt
argument_list|()
expr_stmt|;
block|}
comment|/**      * This will read the required data from the stream.      *       * @param ttf The font that is being read.      * @param data The stream to read the data from.      * @throws IOException If there is an error reading the data.      */
specifier|public
name|void
name|initSubtable
parameter_list|(
name|TrueTypeFont
name|ttf
parameter_list|,
name|TTFDataStream
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|data
operator|.
name|seek
argument_list|(
name|ttf
operator|.
name|getCMAP
argument_list|()
operator|.
name|getOffset
argument_list|()
operator|+
name|subTableOffset
argument_list|)
expr_stmt|;
name|int
name|subtableFormat
init|=
name|data
operator|.
name|readUnsignedShort
argument_list|()
decl_stmt|;
name|int
name|length
init|=
name|data
operator|.
name|readUnsignedShort
argument_list|()
decl_stmt|;
name|int
name|version
init|=
name|data
operator|.
name|readUnsignedShort
argument_list|()
decl_stmt|;
name|int
name|numGlyphs
init|=
name|ttf
operator|.
name|getMaximumProfile
argument_list|()
operator|.
name|getNumGlyphs
argument_list|()
decl_stmt|;
if|if
condition|(
name|subtableFormat
operator|==
literal|0
condition|)
block|{
name|byte
index|[]
name|glyphMapping
init|=
name|data
operator|.
name|read
argument_list|(
literal|256
argument_list|)
decl_stmt|;
name|glyphIdToCharacterCode
operator|=
operator|new
name|int
index|[
literal|256
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|glyphMapping
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|glyphIdToCharacterCode
index|[
name|i
index|]
operator|=
operator|(
name|glyphMapping
index|[
name|i
index|]
operator|+
literal|256
operator|)
operator|%
literal|256
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|subtableFormat
operator|==
literal|2
condition|)
block|{
name|int
index|[]
name|subHeaderKeys
init|=
operator|new
name|int
index|[
literal|256
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|256
condition|;
name|i
operator|++
control|)
block|{
name|subHeaderKeys
index|[
name|i
index|]
operator|=
name|data
operator|.
name|readUnsignedShort
argument_list|()
expr_stmt|;
block|}
name|int
name|firstCode
init|=
name|data
operator|.
name|readUnsignedShort
argument_list|()
decl_stmt|;
name|int
name|entryCount
init|=
name|data
operator|.
name|readUnsignedShort
argument_list|()
decl_stmt|;
name|short
name|idDelta
init|=
name|data
operator|.
name|readSignedShort
argument_list|()
decl_stmt|;
name|int
name|idRangeOffset
init|=
name|data
operator|.
name|readUnsignedShort
argument_list|()
decl_stmt|;
comment|//BJL
comment|//HMM the TTF spec is not very clear about what is suppose to
comment|//happen here.  If you know please submit a patch or point
comment|//me to some better documentation.
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Not yet implemented:"
operator|+
name|subtableFormat
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|subtableFormat
operator|==
literal|4
condition|)
block|{
name|int
name|segCountX2
init|=
name|data
operator|.
name|readUnsignedShort
argument_list|()
decl_stmt|;
name|int
name|segCount
init|=
name|segCountX2
operator|/
literal|2
decl_stmt|;
name|int
name|searchRange
init|=
name|data
operator|.
name|readUnsignedShort
argument_list|()
decl_stmt|;
name|int
name|entrySelector
init|=
name|data
operator|.
name|readUnsignedShort
argument_list|()
decl_stmt|;
name|int
name|rangeShift
init|=
name|data
operator|.
name|readUnsignedShort
argument_list|()
decl_stmt|;
name|int
index|[]
name|endCount
init|=
name|data
operator|.
name|readUnsignedShortArray
argument_list|(
name|segCount
argument_list|)
decl_stmt|;
name|int
name|reservedPad
init|=
name|data
operator|.
name|readUnsignedShort
argument_list|()
decl_stmt|;
name|int
index|[]
name|startCount
init|=
name|data
operator|.
name|readUnsignedShortArray
argument_list|(
name|segCount
argument_list|)
decl_stmt|;
name|int
index|[]
name|idDelta
init|=
name|data
operator|.
name|readUnsignedShortArray
argument_list|(
name|segCount
argument_list|)
decl_stmt|;
name|int
index|[]
name|idRangeOffset
init|=
name|data
operator|.
name|readUnsignedShortArray
argument_list|(
name|segCount
argument_list|)
decl_stmt|;
comment|//this is the final result
comment|//key=glyphId, value is character codes
name|glyphIdToCharacterCode
operator|=
operator|new
name|int
index|[
name|numGlyphs
index|]
expr_stmt|;
name|long
name|currentPosition
init|=
name|data
operator|.
name|getCurrentPosition
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|segCount
condition|;
name|i
operator|++
control|)
block|{
name|int
name|start
init|=
name|startCount
index|[
name|i
index|]
decl_stmt|;
name|int
name|end
init|=
name|endCount
index|[
name|i
index|]
decl_stmt|;
name|int
name|delta
init|=
name|idDelta
index|[
name|i
index|]
decl_stmt|;
name|int
name|rangeOffset
init|=
name|idRangeOffset
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|start
operator|!=
literal|65535
operator|&&
name|end
operator|!=
literal|65535
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
name|start
init|;
name|j
operator|<=
name|end
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|rangeOffset
operator|==
literal|0
condition|)
block|{
name|glyphIdToCharacterCode
index|[
operator|(
operator|(
name|j
operator|+
name|delta
operator|)
operator|%
literal|65536
operator|)
index|]
operator|=
name|j
expr_stmt|;
block|}
else|else
block|{
name|long
name|glyphOffset
init|=
name|currentPosition
operator|+
operator|(
operator|(
name|rangeOffset
operator|/
literal|2
operator|)
operator|+
comment|//idRangeOffset[i]/2
operator|(
name|j
operator|-
name|start
operator|)
operator|+
comment|//(c - startCount[i])
operator|(
name|i
operator|-
name|segCount
operator|)
operator|)
operator|*
literal|2
decl_stmt|;
comment|//&idRangeOffset[i]);
name|data
operator|.
name|seek
argument_list|(
name|glyphOffset
argument_list|)
expr_stmt|;
name|int
name|glyphIndex
init|=
name|data
operator|.
name|readUnsignedShort
argument_list|()
decl_stmt|;
if|if
condition|(
name|glyphIndex
operator|!=
literal|0
condition|)
block|{
name|glyphIndex
operator|+=
name|delta
expr_stmt|;
name|glyphIndex
operator|=
name|glyphIndex
operator|%
literal|65536
expr_stmt|;
if|if
condition|(
name|glyphIdToCharacterCode
index|[
name|glyphIndex
index|]
operator|==
literal|0
condition|)
block|{
name|glyphIdToCharacterCode
index|[
name|glyphIndex
index|]
operator|=
name|j
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|subtableFormat
operator|==
literal|6
condition|)
block|{
name|int
name|firstCode
init|=
name|data
operator|.
name|readUnsignedShort
argument_list|()
decl_stmt|;
name|int
name|entryCount
init|=
name|data
operator|.
name|readUnsignedShort
argument_list|()
decl_stmt|;
name|glyphIdToCharacterCode
operator|=
operator|new
name|int
index|[
name|numGlyphs
index|]
expr_stmt|;
name|int
index|[]
name|glyphIdArray
init|=
name|data
operator|.
name|readUnsignedShortArray
argument_list|(
name|entryCount
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|entryCount
condition|;
name|i
operator|++
control|)
block|{
name|glyphIdToCharacterCode
index|[
name|glyphIdArray
index|[
name|i
index|]
index|]
operator|=
name|firstCode
operator|+
name|i
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown cmap format:"
operator|+
name|subtableFormat
argument_list|)
throw|;
block|}
block|}
comment|/**      * @return Returns the glyphIdToCharacterCode.      */
specifier|public
name|int
index|[]
name|getGlyphIdToCharacterCode
parameter_list|()
block|{
return|return
name|glyphIdToCharacterCode
return|;
block|}
comment|/**      * @param glyphIdToCharacterCodeValue The glyphIdToCharacterCode to set.      */
specifier|public
name|void
name|setGlyphIdToCharacterCode
parameter_list|(
name|int
index|[]
name|glyphIdToCharacterCodeValue
parameter_list|)
block|{
name|this
operator|.
name|glyphIdToCharacterCode
operator|=
name|glyphIdToCharacterCodeValue
expr_stmt|;
block|}
comment|/**      * @return Returns the platformEncodingId.      */
specifier|public
name|int
name|getPlatformEncodingId
parameter_list|()
block|{
return|return
name|platformEncodingId
return|;
block|}
comment|/**      * @param platformEncodingIdValue The platformEncodingId to set.      */
specifier|public
name|void
name|setPlatformEncodingId
parameter_list|(
name|int
name|platformEncodingIdValue
parameter_list|)
block|{
name|this
operator|.
name|platformEncodingId
operator|=
name|platformEncodingIdValue
expr_stmt|;
block|}
comment|/**      * @return Returns the platformId.      */
specifier|public
name|int
name|getPlatformId
parameter_list|()
block|{
return|return
name|platformId
return|;
block|}
comment|/**      * @param platformIdValue The platformId to set.      */
specifier|public
name|void
name|setPlatformId
parameter_list|(
name|int
name|platformIdValue
parameter_list|)
block|{
name|this
operator|.
name|platformId
operator|=
name|platformIdValue
expr_stmt|;
block|}
block|}
end_class

end_unit

