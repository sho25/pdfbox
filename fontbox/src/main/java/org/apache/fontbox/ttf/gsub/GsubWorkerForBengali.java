begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|ttf
operator|.
name|gsub
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|ttf
operator|.
name|CmapLookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|ttf
operator|.
name|model
operator|.
name|GsubData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|ttf
operator|.
name|model
operator|.
name|ScriptFeature
import|;
end_import

begin_comment
comment|/**  *   * Bengali-specific implementation of GSUB system  *   * @author Palash Ray  *  */
end_comment

begin_class
specifier|public
class|class
name|GsubWorkerForBengali
implements|implements
name|GsubWorker
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|GsubWorkerForBengali
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|INIT_FEATURE
init|=
literal|"init"
decl_stmt|;
comment|/**      * This sequence is very important. This has been taken from<a href=      * "https://docs.microsoft.com/en-us/typography/script-development/bengali">https://docs.microsoft.com/en-us/typography/script-development/bengali</a>      */
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|FEATURES_IN_ORDER
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"locl"
argument_list|,
literal|"nukt"
argument_list|,
literal|"akhn"
argument_list|,
literal|"rphf"
argument_list|,
literal|"blwf"
argument_list|,
literal|"half"
argument_list|,
literal|"pstf"
argument_list|,
literal|"vatu"
argument_list|,
literal|"cjct"
argument_list|,
name|INIT_FEATURE
argument_list|,
literal|"pres"
argument_list|,
literal|"abvs"
argument_list|,
literal|"blws"
argument_list|,
literal|"psts"
argument_list|,
literal|"haln"
argument_list|,
literal|"calt"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|BEFORE_HALF_CHARS
init|=
operator|new
name|char
index|[]
block|{
literal|'\u09BF'
block|,
literal|'\u09C7'
block|,
literal|'\u09C8'
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|BeforeAndAfterSpanComponent
index|[]
name|BEFORE_AND_AFTER_SPAN_CHARS
init|=
operator|new
name|BeforeAndAfterSpanComponent
index|[]
block|{
operator|new
name|BeforeAndAfterSpanComponent
argument_list|(
literal|'\u09CB'
argument_list|,
literal|'\u09C7'
argument_list|,
literal|'\u09BE'
argument_list|)
block|,
operator|new
name|BeforeAndAfterSpanComponent
argument_list|(
literal|'\u09CC'
argument_list|,
literal|'\u09C7'
argument_list|,
literal|'\u09D7'
argument_list|)
block|}
decl_stmt|;
specifier|private
specifier|final
name|CmapLookup
name|cmapLookup
decl_stmt|;
specifier|private
specifier|final
name|GsubData
name|gsubData
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|beforeHalfGlyphIds
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|BeforeAndAfterSpanComponent
argument_list|>
name|beforeAndAfterSpanGlyphIds
decl_stmt|;
name|GsubWorkerForBengali
parameter_list|(
name|CmapLookup
name|cmapLookup
parameter_list|,
name|GsubData
name|gsubData
parameter_list|)
block|{
name|this
operator|.
name|cmapLookup
operator|=
name|cmapLookup
expr_stmt|;
name|this
operator|.
name|gsubData
operator|=
name|gsubData
expr_stmt|;
name|beforeHalfGlyphIds
operator|=
name|getBeforeHalfGlyphIds
argument_list|()
expr_stmt|;
name|beforeAndAfterSpanGlyphIds
operator|=
name|getBeforeAndAfterSpanGlyphIds
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Integer
argument_list|>
name|applyTransforms
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|originalGlyphIds
parameter_list|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|intermediateGlyphsFromGsub
init|=
name|originalGlyphIds
decl_stmt|;
for|for
control|(
name|String
name|feature
range|:
name|FEATURES_IN_ORDER
control|)
block|{
if|if
condition|(
operator|!
name|gsubData
operator|.
name|isFeatureSupported
argument_list|(
name|feature
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"the feature "
operator|+
name|feature
operator|+
literal|" was not found"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"applying the feature "
operator|+
name|feature
argument_list|)
expr_stmt|;
name|ScriptFeature
name|scriptFeature
init|=
name|gsubData
operator|.
name|getFeature
argument_list|(
name|feature
argument_list|)
decl_stmt|;
name|intermediateGlyphsFromGsub
operator|=
name|applyGsubFeature
argument_list|(
name|scriptFeature
argument_list|,
name|intermediateGlyphsFromGsub
argument_list|)
expr_stmt|;
block|}
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|repositionGlyphs
argument_list|(
name|intermediateGlyphsFromGsub
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|Integer
argument_list|>
name|repositionGlyphs
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|originalGlyphIds
parameter_list|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|glyphsRepositionedByBeforeHalf
init|=
name|repositionBeforeHalfGlyphIds
argument_list|(
name|originalGlyphIds
argument_list|)
decl_stmt|;
return|return
name|repositionBeforeAndAfterSpanGlyphIds
argument_list|(
name|glyphsRepositionedByBeforeHalf
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|Integer
argument_list|>
name|repositionBeforeHalfGlyphIds
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|originalGlyphIds
parameter_list|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|repositionedGlyphIds
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|originalGlyphIds
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|1
init|;
name|index
operator|<
name|originalGlyphIds
operator|.
name|size
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
name|int
name|glyphId
init|=
name|originalGlyphIds
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|beforeHalfGlyphIds
operator|.
name|contains
argument_list|(
name|glyphId
argument_list|)
condition|)
block|{
name|int
name|previousGlyphId
init|=
name|originalGlyphIds
operator|.
name|get
argument_list|(
name|index
operator|-
literal|1
argument_list|)
decl_stmt|;
name|repositionedGlyphIds
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|previousGlyphId
argument_list|)
expr_stmt|;
name|repositionedGlyphIds
operator|.
name|set
argument_list|(
name|index
operator|-
literal|1
argument_list|,
name|glyphId
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|repositionedGlyphIds
return|;
block|}
specifier|private
name|List
argument_list|<
name|Integer
argument_list|>
name|repositionBeforeAndAfterSpanGlyphIds
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|originalGlyphIds
parameter_list|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|repositionedGlyphIds
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|originalGlyphIds
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|1
init|;
name|index
operator|<
name|originalGlyphIds
operator|.
name|size
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
name|int
name|glyphId
init|=
name|originalGlyphIds
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|beforeAndAfterSpanGlyphIds
operator|.
name|containsKey
argument_list|(
name|glyphId
argument_list|)
condition|)
block|{
name|BeforeAndAfterSpanComponent
name|beforeAndAfterSpanComponent
init|=
name|beforeAndAfterSpanGlyphIds
operator|.
name|get
argument_list|(
name|glyphId
argument_list|)
decl_stmt|;
name|int
name|previousGlyphId
init|=
name|originalGlyphIds
operator|.
name|get
argument_list|(
name|index
operator|-
literal|1
argument_list|)
decl_stmt|;
name|repositionedGlyphIds
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|previousGlyphId
argument_list|)
expr_stmt|;
name|repositionedGlyphIds
operator|.
name|set
argument_list|(
name|index
operator|-
literal|1
argument_list|,
name|getGlyphId
argument_list|(
name|beforeAndAfterSpanComponent
operator|.
name|beforeComponentCharacter
argument_list|)
argument_list|)
expr_stmt|;
name|repositionedGlyphIds
operator|.
name|add
argument_list|(
name|index
operator|+
literal|1
argument_list|,
name|getGlyphId
argument_list|(
name|beforeAndAfterSpanComponent
operator|.
name|afterComponentCharacter
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|repositionedGlyphIds
return|;
block|}
specifier|private
name|List
argument_list|<
name|Integer
argument_list|>
name|applyGsubFeature
parameter_list|(
name|ScriptFeature
name|scriptFeature
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|originalGlyphs
parameter_list|)
block|{
name|GlyphArraySplitter
name|glyphArraySplitter
init|=
operator|new
name|GlyphArraySplitterRegexImpl
argument_list|(
name|scriptFeature
operator|.
name|getAllGlyphIdsForSubstitution
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|tokens
init|=
name|glyphArraySplitter
operator|.
name|split
argument_list|(
name|originalGlyphs
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|gsubProcessedGlyphs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|Integer
argument_list|>
name|chunk
range|:
name|tokens
control|)
block|{
if|if
condition|(
name|scriptFeature
operator|.
name|canReplaceGlyphs
argument_list|(
name|chunk
argument_list|)
condition|)
block|{
comment|// gsub system kicks in, you get the glyphId directly
name|int
name|glyphId
init|=
name|scriptFeature
operator|.
name|getReplacementForGlyphs
argument_list|(
name|chunk
argument_list|)
decl_stmt|;
name|gsubProcessedGlyphs
operator|.
name|add
argument_list|(
name|glyphId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|gsubProcessedGlyphs
operator|.
name|addAll
argument_list|(
name|chunk
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"originalGlyphs: "
operator|+
name|originalGlyphs
operator|+
literal|", gsubProcessedGlyphs: "
operator|+
name|gsubProcessedGlyphs
argument_list|)
expr_stmt|;
return|return
name|gsubProcessedGlyphs
return|;
block|}
specifier|private
name|List
argument_list|<
name|Integer
argument_list|>
name|getBeforeHalfGlyphIds
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|glyphIds
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|char
name|character
range|:
name|BEFORE_HALF_CHARS
control|)
block|{
name|glyphIds
operator|.
name|add
argument_list|(
name|getGlyphId
argument_list|(
name|character
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|gsubData
operator|.
name|isFeatureSupported
argument_list|(
name|INIT_FEATURE
argument_list|)
condition|)
block|{
name|ScriptFeature
name|feature
init|=
name|gsubData
operator|.
name|getFeature
argument_list|(
name|INIT_FEATURE
argument_list|)
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|Integer
argument_list|>
name|glyphCluster
range|:
name|feature
operator|.
name|getAllGlyphIdsForSubstitution
argument_list|()
control|)
block|{
name|glyphIds
operator|.
name|add
argument_list|(
name|feature
operator|.
name|getReplacementForGlyphs
argument_list|(
name|glyphCluster
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|glyphIds
argument_list|)
return|;
block|}
specifier|private
name|Integer
name|getGlyphId
parameter_list|(
name|char
name|character
parameter_list|)
block|{
return|return
name|cmapLookup
operator|.
name|getGlyphId
argument_list|(
name|character
argument_list|)
return|;
block|}
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|BeforeAndAfterSpanComponent
argument_list|>
name|getBeforeAndAfterSpanGlyphIds
parameter_list|()
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|BeforeAndAfterSpanComponent
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|BeforeAndAfterSpanComponent
name|beforeAndAfterSpanComponent
range|:
name|BEFORE_AND_AFTER_SPAN_CHARS
control|)
block|{
name|result
operator|.
name|put
argument_list|(
name|getGlyphId
argument_list|(
name|beforeAndAfterSpanComponent
operator|.
name|originalCharacter
argument_list|)
argument_list|,
name|beforeAndAfterSpanComponent
argument_list|)
expr_stmt|;
block|}
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|result
argument_list|)
return|;
block|}
comment|/**      * Models characters like O-kar (\u09CB) and OU-kar (\u09CC). Since these 2 characters is      * represented by 2 components, one before and one after the Vyanjan Varna on which this is      * used, this glyph has to be replaced by these 2 glyphs. For O-kar, it has to be replaced by      * E-kar (\u09C7) and AA-kar (\u09BE). For OU-kar, it has be replaced by E-kar (\u09C7) and      * \u09D7.      *      */
specifier|private
specifier|static
class|class
name|BeforeAndAfterSpanComponent
block|{
specifier|private
specifier|final
name|char
name|originalCharacter
decl_stmt|;
specifier|private
specifier|final
name|char
name|beforeComponentCharacter
decl_stmt|;
specifier|private
specifier|final
name|char
name|afterComponentCharacter
decl_stmt|;
name|BeforeAndAfterSpanComponent
parameter_list|(
name|char
name|originalCharacter
parameter_list|,
name|char
name|beforeComponentCharacter
parameter_list|,
name|char
name|afterComponentCharacter
parameter_list|)
block|{
name|this
operator|.
name|originalCharacter
operator|=
name|originalCharacter
expr_stmt|;
name|this
operator|.
name|beforeComponentCharacter
operator|=
name|beforeComponentCharacter
expr_stmt|;
name|this
operator|.
name|afterComponentCharacter
operator|=
name|afterComponentCharacter
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

