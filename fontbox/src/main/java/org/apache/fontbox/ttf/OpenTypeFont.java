begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|ttf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|GeneralPath
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * An OpenType font.  */
end_comment

begin_class
specifier|public
class|class
name|OpenTypeFont
extends|extends
name|TrueTypeFont
block|{
comment|/**      * Constructor. Clients should use the OTFParser to create a new OpenTypeFont object.      *      * @param fontData The font data.      */
name|OpenTypeFont
parameter_list|(
name|TTFDataStream
name|fontData
parameter_list|)
block|{
name|super
argument_list|(
name|fontData
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the "cmap" table for this TTF.      *      * @return The "cmap" table.      */
specifier|public
specifier|synchronized
name|CFFTable
name|getCFF
parameter_list|()
throws|throws
name|IOException
block|{
name|CFFTable
name|cff
init|=
operator|(
name|CFFTable
operator|)
name|tables
operator|.
name|get
argument_list|(
name|CFFTable
operator|.
name|TAG
argument_list|)
decl_stmt|;
if|if
condition|(
name|cff
operator|!=
literal|null
operator|&&
operator|!
name|cff
operator|.
name|getInitialized
argument_list|()
condition|)
block|{
name|readTable
argument_list|(
name|cff
argument_list|)
expr_stmt|;
block|}
return|return
name|cff
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|GlyphTable
name|getGlyph
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"OTF fonts do not have a glyf table"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|GeneralPath
name|getPath
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|gid
init|=
name|nameToGID
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|getCFF
argument_list|()
operator|.
name|getFont
argument_list|()
operator|.
name|getType2CharString
argument_list|(
name|gid
argument_list|)
operator|.
name|getPath
argument_list|()
return|;
block|}
comment|/**      * Returns true if this font is a PostScript outline font.      */
specifier|public
name|boolean
name|isPostScript
parameter_list|()
block|{
return|return
name|tables
operator|.
name|containsKey
argument_list|(
name|CFFTable
operator|.
name|TAG
argument_list|)
return|;
block|}
comment|/**      * Returns true if this font uses OpenType Layout (Advanced Typographic) tables.      */
specifier|public
name|boolean
name|hasLayoutTables
parameter_list|()
block|{
return|return
name|tables
operator|.
name|containsKey
argument_list|(
literal|"BASE"
argument_list|)
operator|||
name|tables
operator|.
name|containsKey
argument_list|(
literal|"GDEF"
argument_list|)
operator|||
name|tables
operator|.
name|containsKey
argument_list|(
literal|"GPOS"
argument_list|)
operator|||
name|tables
operator|.
name|containsKey
argument_list|(
literal|"GSUB"
argument_list|)
operator|||
name|tables
operator|.
name|containsKey
argument_list|(
literal|"JSTF"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

