begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|ttf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * A TrueType Collection, now more properly known as a "Font Collection" as it may contain either  * TrueType or OpenType fonts.  *   * @author John Hewson  */
end_comment

begin_class
specifier|public
class|class
name|TrueTypeCollection
implements|implements
name|Closeable
block|{
specifier|private
specifier|final
name|TTFDataStream
name|stream
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|TrueTypeFont
argument_list|>
name|fonts
decl_stmt|;
comment|/**      * Creates a new TrueTypeCollection from a .ttc file.      *      * @param file The TTC file.      * @throws IOException If the font could not be parsed.      */
specifier|public
name|TrueTypeCollection
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
operator|new
name|RAFDataStream
argument_list|(
name|file
argument_list|,
literal|"r"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new TrueTypeCollection from a .ttc input stream.      *      * @param stream A TTC input stream.      * @throws IOException If the font could not be parsed.      */
specifier|public
name|TrueTypeCollection
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
operator|new
name|MemoryTTFDataStream
argument_list|(
name|stream
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new TrueTypeCollection from a TTC stream.      *      * @param stream The TTF file.      * @throws IOException If the font could not be parsed.      */
name|TrueTypeCollection
parameter_list|(
name|TTFDataStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|stream
operator|=
name|stream
expr_stmt|;
comment|// TTC header
name|String
name|tag
init|=
name|stream
operator|.
name|readTag
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|tag
operator|.
name|equals
argument_list|(
literal|"ttcf"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Missing TTC header"
argument_list|)
throw|;
block|}
name|float
name|version
init|=
name|stream
operator|.
name|read32Fixed
argument_list|()
decl_stmt|;
name|int
name|numFonts
init|=
operator|(
name|int
operator|)
name|stream
operator|.
name|readUnsignedInt
argument_list|()
decl_stmt|;
name|long
index|[]
name|fontOffsets
init|=
operator|new
name|long
index|[
name|numFonts
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFonts
condition|;
name|i
operator|++
control|)
block|{
name|fontOffsets
index|[
name|i
index|]
operator|=
name|stream
operator|.
name|readUnsignedInt
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|version
operator|>=
literal|2
condition|)
block|{
name|int
name|ulDsigTag
init|=
name|stream
operator|.
name|readUnsignedShort
argument_list|()
decl_stmt|;
name|int
name|ulDsigLength
init|=
name|stream
operator|.
name|readUnsignedShort
argument_list|()
decl_stmt|;
name|int
name|ulDsigOffset
init|=
name|stream
operator|.
name|readUnsignedShort
argument_list|()
decl_stmt|;
block|}
comment|// lazy-load the fonts
name|List
argument_list|<
name|TrueTypeFont
argument_list|>
name|fonts
init|=
operator|new
name|ArrayList
argument_list|<
name|TrueTypeFont
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFonts
condition|;
name|i
operator|++
control|)
block|{
name|stream
operator|.
name|seek
argument_list|(
name|fontOffsets
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|stream
operator|.
name|readTag
argument_list|()
operator|.
name|equals
argument_list|(
literal|"OTTO"
argument_list|)
condition|)
block|{
name|stream
operator|.
name|seek
argument_list|(
name|fontOffsets
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|OTFParser
name|parser
init|=
operator|new
name|OTFParser
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|OpenTypeFont
name|otf
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|TTCDataStream
argument_list|(
name|stream
argument_list|)
argument_list|)
decl_stmt|;
name|fonts
operator|.
name|add
argument_list|(
name|otf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stream
operator|.
name|seek
argument_list|(
name|fontOffsets
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|TTFParser
name|parser
init|=
operator|new
name|TTFParser
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|TrueTypeFont
name|ttf
init|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|TTCDataStream
argument_list|(
name|stream
argument_list|)
argument_list|)
decl_stmt|;
name|fonts
operator|.
name|add
argument_list|(
name|ttf
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|fonts
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|fonts
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the fonts in the collection, these may be {@link OpenTypeFont} instances.      */
specifier|public
name|List
argument_list|<
name|TrueTypeFont
argument_list|>
name|getFonts
parameter_list|()
block|{
return|return
name|fonts
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

