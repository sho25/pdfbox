begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|ttf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|GregorianCalendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|encoding
operator|.
name|Encoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|encoding
operator|.
name|MacRomanEncoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * A font, which is comprised of a subset of characters of a TrueType font.  * Based on code developed by Wolfgang Glas  * http://svn.clazzes.org/svn/sketch/trunk/pdf/pdf-entities/src/main/java/org/clazzes/sketch/pdf/entities/impl/TTFSubFont.java  */
end_comment

begin_class
specifier|public
class|class
name|TTFSubFont
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TTFSubFont
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|PAD_BUF
init|=
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
specifier|private
specifier|final
name|TrueTypeFont
name|baseTTF
decl_stmt|;
specifier|private
specifier|final
name|String
name|nameSuffix
decl_stmt|;
specifier|private
specifier|final
name|CMAPEncodingEntry
name|baseCmap
decl_stmt|;
comment|// A map of unicode char codes to glyph IDs of the original font.
specifier|private
specifier|final
name|SortedMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|characters
decl_stmt|;
comment|// A sorted version of this set will comprise the generated glyph IDs
comment|// for the written truetype font.
specifier|private
specifier|final
name|SortedSet
argument_list|<
name|Integer
argument_list|>
name|glyphIds
decl_stmt|;
comment|/**      * Constructs a subfont based on the given font using the given suffix.      *       * @param baseFont the base font of the subfont      * @param suffix suffix used for the naming      *       */
specifier|public
name|TTFSubFont
parameter_list|(
name|TrueTypeFont
name|baseFont
parameter_list|,
name|String
name|suffix
parameter_list|)
block|{
name|baseTTF
operator|=
name|baseFont
expr_stmt|;
name|nameSuffix
operator|=
name|suffix
expr_stmt|;
name|characters
operator|=
operator|new
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
name|glyphIds
operator|=
operator|new
name|TreeSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
name|CMAPEncodingEntry
index|[]
name|cmaps
init|=
name|this
operator|.
name|baseTTF
operator|.
name|getCMAP
argument_list|()
operator|.
name|getCmaps
argument_list|()
decl_stmt|;
name|CMAPEncodingEntry
name|unicodeCmap
init|=
literal|null
decl_stmt|;
for|for
control|(
name|CMAPEncodingEntry
name|cmap
range|:
name|cmaps
control|)
block|{
comment|// take first unicode map.
if|if
condition|(
name|cmap
operator|.
name|getPlatformId
argument_list|()
operator|==
literal|0
operator|||
operator|(
name|cmap
operator|.
name|getPlatformId
argument_list|()
operator|==
literal|3
operator|&&
name|cmap
operator|.
name|getPlatformEncodingId
argument_list|()
operator|==
literal|1
operator|)
condition|)
block|{
name|unicodeCmap
operator|=
name|cmap
expr_stmt|;
break|break;
block|}
block|}
name|baseCmap
operator|=
name|unicodeCmap
expr_stmt|;
comment|// add notdef character.
name|addCharCode
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add the given charcode to the subfpont.      *       * @param charCode the charCode to be added      *       */
specifier|public
name|void
name|addCharCode
parameter_list|(
name|int
name|charCode
parameter_list|)
block|{
name|Integer
name|gid
init|=
name|baseCmap
operator|.
name|getGlyphId
argument_list|(
name|charCode
argument_list|)
decl_stmt|;
if|if
condition|(
name|charCode
operator|==
literal|0
operator|||
name|gid
operator|!=
literal|0
condition|)
block|{
name|characters
operator|.
name|put
argument_list|(
name|charCode
argument_list|,
name|gid
argument_list|)
expr_stmt|;
name|glyphIds
operator|.
name|add
argument_list|(
name|gid
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|int
name|log2i
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|int
name|ret
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
operator|(
name|i
operator|&
literal|0xffff0000
operator|)
operator|!=
literal|0
condition|)
block|{
name|i
operator|>>>=
literal|16
expr_stmt|;
name|ret
operator|+=
literal|16
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|i
operator|&
literal|0xff00
operator|)
operator|!=
literal|0
condition|)
block|{
name|i
operator|>>>=
literal|8
expr_stmt|;
name|ret
operator|+=
literal|8
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|i
operator|&
literal|0xf0
operator|)
operator|!=
literal|0
condition|)
block|{
name|i
operator|>>>=
literal|4
expr_stmt|;
name|ret
operator|+=
literal|4
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|i
operator|&
literal|0xc
operator|)
operator|!=
literal|0
condition|)
block|{
name|i
operator|>>>=
literal|2
expr_stmt|;
name|ret
operator|+=
literal|2
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|i
operator|&
literal|0x2
operator|)
operator|!=
literal|0
condition|)
block|{
name|i
operator|>>>=
literal|1
expr_stmt|;
operator|++
name|ret
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
operator|++
name|ret
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
specifier|static
name|long
name|buildUint32
parameter_list|(
name|int
name|high
parameter_list|,
name|int
name|low
parameter_list|)
block|{
return|return
operator|(
operator|(
operator|(
operator|(
name|long
operator|)
name|high
operator|)
operator|&
literal|0xffffL
operator|)
operator|<<
literal|16
operator|)
operator||
operator|(
operator|(
operator|(
name|long
operator|)
name|low
operator|)
operator|&
literal|0xffffL
operator|)
return|;
block|}
specifier|private
specifier|static
name|long
name|buildUint32
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
return|return
operator|(
operator|(
operator|(
operator|(
name|long
operator|)
name|bytes
index|[
literal|0
index|]
operator|)
operator|&
literal|0xffL
operator|)
operator|<<
literal|24
operator|)
operator||
operator|(
operator|(
operator|(
operator|(
name|long
operator|)
name|bytes
index|[
literal|1
index|]
operator|)
operator|&
literal|0xffL
operator|)
operator|<<
literal|16
operator|)
operator||
operator|(
operator|(
operator|(
operator|(
name|long
operator|)
name|bytes
index|[
literal|2
index|]
operator|)
operator|&
literal|0xffL
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
operator|(
operator|(
name|long
operator|)
name|bytes
index|[
literal|3
index|]
operator|)
operator|&
literal|0xffL
operator|)
return|;
block|}
comment|/**      * @param dos The data output stream.      * @param nTables The number of table.      * @return The file offset of the first TTF table to write.      * @throws IOException Upon errors.      */
specifier|private
specifier|static
name|long
name|writeFileHeader
parameter_list|(
name|DataOutputStream
name|dos
parameter_list|,
name|int
name|nTables
parameter_list|)
throws|throws
name|IOException
block|{
name|dos
operator|.
name|writeInt
argument_list|(
literal|0x00010000
argument_list|)
expr_stmt|;
name|dos
operator|.
name|writeShort
argument_list|(
name|nTables
argument_list|)
expr_stmt|;
name|int
name|mask
init|=
name|Integer
operator|.
name|highestOneBit
argument_list|(
name|nTables
argument_list|)
decl_stmt|;
name|int
name|searchRange
init|=
name|mask
operator|*
literal|16
decl_stmt|;
name|dos
operator|.
name|writeShort
argument_list|(
name|searchRange
argument_list|)
expr_stmt|;
name|int
name|entrySelector
init|=
name|log2i
argument_list|(
name|mask
argument_list|)
decl_stmt|;
name|dos
operator|.
name|writeShort
argument_list|(
name|entrySelector
argument_list|)
expr_stmt|;
comment|// numTables * 16 - searchRange
name|int
name|last
init|=
literal|16
operator|*
name|nTables
operator|-
name|searchRange
decl_stmt|;
name|dos
operator|.
name|writeShort
argument_list|(
name|last
argument_list|)
expr_stmt|;
return|return
literal|0x00010000L
operator|+
name|buildUint32
argument_list|(
name|nTables
argument_list|,
name|searchRange
argument_list|)
operator|+
name|buildUint32
argument_list|(
name|entrySelector
argument_list|,
name|last
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|long
name|writeTableHeader
parameter_list|(
name|DataOutputStream
name|dos
parameter_list|,
name|String
name|tag
parameter_list|,
name|long
name|offset
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|n
init|=
name|bytes
operator|.
name|length
decl_stmt|;
name|int
name|nup
decl_stmt|;
name|long
name|checksum
init|=
literal|0L
decl_stmt|;
for|for
control|(
name|nup
operator|=
literal|0
init|;
name|nup
operator|<
name|n
condition|;
operator|++
name|nup
control|)
block|{
name|checksum
operator|+=
operator|(
operator|(
operator|(
name|long
operator|)
name|bytes
index|[
name|nup
index|]
operator|)
operator|&
literal|0xffL
operator|)
operator|<<
operator|(
literal|24
operator|-
operator|(
name|nup
operator|%
literal|4
operator|)
operator|*
literal|8
operator|)
expr_stmt|;
block|}
name|checksum
operator|&=
literal|0xffffffffL
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Writing table header [%s,%08x,%08x,%08x]"
argument_list|,
name|tag
argument_list|,
name|checksum
argument_list|,
name|offset
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|tagbytes
init|=
name|tag
operator|.
name|getBytes
argument_list|(
literal|"US-ASCII"
argument_list|)
decl_stmt|;
name|dos
operator|.
name|write
argument_list|(
name|tagbytes
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|dos
operator|.
name|writeInt
argument_list|(
operator|(
name|int
operator|)
name|checksum
argument_list|)
expr_stmt|;
name|dos
operator|.
name|writeInt
argument_list|(
operator|(
name|int
operator|)
name|offset
argument_list|)
expr_stmt|;
name|dos
operator|.
name|writeInt
argument_list|(
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// account for the checksum twice, one time for the header field, on time for the content itself.
return|return
name|buildUint32
argument_list|(
name|tagbytes
argument_list|)
operator|+
name|checksum
operator|+
name|checksum
operator|+
name|offset
operator|+
name|bytes
operator|.
name|length
return|;
block|}
specifier|private
specifier|static
name|void
name|writeTableBody
parameter_list|(
name|OutputStream
name|os
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|n
init|=
name|bytes
operator|.
name|length
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|n
operator|%
literal|4
operator|)
operator|!=
literal|0
condition|)
block|{
name|os
operator|.
name|write
argument_list|(
name|PAD_BUF
argument_list|,
literal|0
argument_list|,
literal|4
operator|-
name|n
operator|%
literal|4
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|writeFixed
parameter_list|(
name|DataOutputStream
name|dos
parameter_list|,
name|double
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|double
name|ip
init|=
name|Math
operator|.
name|floor
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|double
name|fp
init|=
operator|(
name|f
operator|-
name|ip
operator|)
operator|*
literal|65536.0
decl_stmt|;
name|dos
operator|.
name|writeShort
argument_list|(
operator|(
name|int
operator|)
name|ip
argument_list|)
expr_stmt|;
name|dos
operator|.
name|writeShort
argument_list|(
operator|(
name|int
operator|)
name|fp
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|writeUint32
parameter_list|(
name|DataOutputStream
name|dos
parameter_list|,
name|long
name|l
parameter_list|)
throws|throws
name|IOException
block|{
name|dos
operator|.
name|writeInt
argument_list|(
operator|(
name|int
operator|)
name|l
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|writeUint16
parameter_list|(
name|DataOutputStream
name|dos
parameter_list|,
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|dos
operator|.
name|writeShort
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|writeSint16
parameter_list|(
name|DataOutputStream
name|dos
parameter_list|,
name|short
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|dos
operator|.
name|writeShort
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|writeUint8
parameter_list|(
name|DataOutputStream
name|dos
parameter_list|,
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|dos
operator|.
name|writeByte
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|writeLongDateTime
parameter_list|(
name|DataOutputStream
name|dos
parameter_list|,
name|Calendar
name|calendar
parameter_list|)
throws|throws
name|IOException
block|{
comment|// inverse operation of TTFDataStream.readInternationalDate()
name|GregorianCalendar
name|cal
init|=
operator|new
name|GregorianCalendar
argument_list|(
literal|1904
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|long
name|millisFor1904
init|=
name|cal
operator|.
name|getTimeInMillis
argument_list|()
decl_stmt|;
name|long
name|secondsSince1904
init|=
operator|(
name|calendar
operator|.
name|getTimeInMillis
argument_list|()
operator|-
name|millisFor1904
operator|)
operator|/
literal|1000L
decl_stmt|;
name|dos
operator|.
name|writeLong
argument_list|(
name|secondsSince1904
argument_list|)
expr_stmt|;
block|}
specifier|private
name|byte
index|[]
name|buildHeadTable
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|dos
init|=
operator|new
name|DataOutputStream
argument_list|(
name|bos
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Building table [head]..."
argument_list|)
expr_stmt|;
name|HeaderTable
name|h
init|=
name|this
operator|.
name|baseTTF
operator|.
name|getHeader
argument_list|()
decl_stmt|;
name|writeFixed
argument_list|(
name|dos
argument_list|,
name|h
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|writeFixed
argument_list|(
name|dos
argument_list|,
name|h
operator|.
name|getFontRevision
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint32
argument_list|(
name|dos
argument_list|,
literal|0
comment|/* h.getCheckSumAdjustment() */
argument_list|)
expr_stmt|;
name|writeUint32
argument_list|(
name|dos
argument_list|,
name|h
operator|.
name|getMagicNumber
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|dos
argument_list|,
name|h
operator|.
name|getFlags
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|dos
argument_list|,
name|h
operator|.
name|getUnitsPerEm
argument_list|()
argument_list|)
expr_stmt|;
name|writeLongDateTime
argument_list|(
name|dos
argument_list|,
name|h
operator|.
name|getCreated
argument_list|()
argument_list|)
expr_stmt|;
name|writeLongDateTime
argument_list|(
name|dos
argument_list|,
name|h
operator|.
name|getModified
argument_list|()
argument_list|)
expr_stmt|;
name|writeSint16
argument_list|(
name|dos
argument_list|,
name|h
operator|.
name|getXMin
argument_list|()
argument_list|)
expr_stmt|;
name|writeSint16
argument_list|(
name|dos
argument_list|,
name|h
operator|.
name|getYMin
argument_list|()
argument_list|)
expr_stmt|;
name|writeSint16
argument_list|(
name|dos
argument_list|,
name|h
operator|.
name|getXMax
argument_list|()
argument_list|)
expr_stmt|;
name|writeSint16
argument_list|(
name|dos
argument_list|,
name|h
operator|.
name|getYMax
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|dos
argument_list|,
name|h
operator|.
name|getMacStyle
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|dos
argument_list|,
name|h
operator|.
name|getLowestRecPPEM
argument_list|()
argument_list|)
expr_stmt|;
name|writeSint16
argument_list|(
name|dos
argument_list|,
name|h
operator|.
name|getFontDirectionHint
argument_list|()
argument_list|)
expr_stmt|;
comment|// force long format of 'loca' table.
name|writeSint16
argument_list|(
name|dos
argument_list|,
operator|(
name|short
operator|)
literal|1
comment|/* h.getIndexToLocFormat() */
argument_list|)
expr_stmt|;
name|writeSint16
argument_list|(
name|dos
argument_list|,
name|h
operator|.
name|getGlyphDataFormat
argument_list|()
argument_list|)
expr_stmt|;
name|dos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Finished table [head]."
argument_list|)
expr_stmt|;
return|return
name|bos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
specifier|private
name|byte
index|[]
name|buildHheaTable
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|dos
init|=
operator|new
name|DataOutputStream
argument_list|(
name|bos
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Building table [hhea]..."
argument_list|)
expr_stmt|;
name|HorizontalHeaderTable
name|h
init|=
name|this
operator|.
name|baseTTF
operator|.
name|getHorizontalHeader
argument_list|()
decl_stmt|;
name|writeFixed
argument_list|(
name|dos
argument_list|,
name|h
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|writeSint16
argument_list|(
name|dos
argument_list|,
name|h
operator|.
name|getAscender
argument_list|()
argument_list|)
expr_stmt|;
name|writeSint16
argument_list|(
name|dos
argument_list|,
name|h
operator|.
name|getDescender
argument_list|()
argument_list|)
expr_stmt|;
name|writeSint16
argument_list|(
name|dos
argument_list|,
name|h
operator|.
name|getLineGap
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|dos
argument_list|,
name|h
operator|.
name|getAdvanceWidthMax
argument_list|()
argument_list|)
expr_stmt|;
name|writeSint16
argument_list|(
name|dos
argument_list|,
name|h
operator|.
name|getMinLeftSideBearing
argument_list|()
argument_list|)
expr_stmt|;
name|writeSint16
argument_list|(
name|dos
argument_list|,
name|h
operator|.
name|getMinRightSideBearing
argument_list|()
argument_list|)
expr_stmt|;
name|writeSint16
argument_list|(
name|dos
argument_list|,
name|h
operator|.
name|getXMaxExtent
argument_list|()
argument_list|)
expr_stmt|;
name|writeSint16
argument_list|(
name|dos
argument_list|,
name|h
operator|.
name|getCaretSlopeRise
argument_list|()
argument_list|)
expr_stmt|;
name|writeSint16
argument_list|(
name|dos
argument_list|,
name|h
operator|.
name|getCaretSlopeRun
argument_list|()
argument_list|)
expr_stmt|;
name|writeSint16
argument_list|(
name|dos
argument_list|,
name|h
operator|.
name|getReserved1
argument_list|()
argument_list|)
expr_stmt|;
comment|// caretOffset
name|writeSint16
argument_list|(
name|dos
argument_list|,
name|h
operator|.
name|getReserved2
argument_list|()
argument_list|)
expr_stmt|;
name|writeSint16
argument_list|(
name|dos
argument_list|,
name|h
operator|.
name|getReserved3
argument_list|()
argument_list|)
expr_stmt|;
name|writeSint16
argument_list|(
name|dos
argument_list|,
name|h
operator|.
name|getReserved4
argument_list|()
argument_list|)
expr_stmt|;
name|writeSint16
argument_list|(
name|dos
argument_list|,
name|h
operator|.
name|getReserved5
argument_list|()
argument_list|)
expr_stmt|;
name|writeSint16
argument_list|(
name|dos
argument_list|,
name|h
operator|.
name|getMetricDataFormat
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|dos
argument_list|,
name|glyphIds
operator|.
name|subSet
argument_list|(
literal|0
argument_list|,
name|h
operator|.
name|getNumberOfHMetrics
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|dos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Finished table [hhea]."
argument_list|)
expr_stmt|;
return|return
name|bos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|boolean
name|replicateNameRecord
parameter_list|(
name|NameRecord
name|nr
parameter_list|)
block|{
return|return
name|nr
operator|.
name|getPlatformId
argument_list|()
operator|==
name|NameRecord
operator|.
name|PLATFORM_WINDOWS
operator|&&
name|nr
operator|.
name|getPlatformEncodingId
argument_list|()
operator|==
name|NameRecord
operator|.
name|PLATFORM_ENCODING_WINDOWS_UNICODE
operator|&&
name|nr
operator|.
name|getLanguageId
argument_list|()
operator|==
literal|0
operator|&&
name|nr
operator|.
name|getNameId
argument_list|()
operator|>=
literal|0
operator|&&
name|nr
operator|.
name|getNameId
argument_list|()
operator|<
literal|7
return|;
block|}
specifier|private
name|byte
index|[]
name|buildNameTable
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|dos
init|=
operator|new
name|DataOutputStream
argument_list|(
name|bos
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Building table [name]..."
argument_list|)
expr_stmt|;
name|NamingTable
name|n
init|=
name|this
operator|.
name|baseTTF
operator|.
name|getNaming
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|NameRecord
argument_list|>
name|nameRecords
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|n
operator|!=
literal|null
condition|)
block|{
name|nameRecords
operator|=
name|n
operator|.
name|getNameRecords
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// sometimes there is no naming table in an embedded subfonts
comment|// create some dummies
name|nameRecords
operator|=
operator|new
name|ArrayList
argument_list|<
name|NameRecord
argument_list|>
argument_list|()
expr_stmt|;
name|NameRecord
name|nr
init|=
operator|new
name|NameRecord
argument_list|()
decl_stmt|;
name|nr
operator|.
name|setPlatformId
argument_list|(
name|NameRecord
operator|.
name|PLATFORM_WINDOWS
argument_list|)
expr_stmt|;
name|nr
operator|.
name|setPlatformEncodingId
argument_list|(
name|NameRecord
operator|.
name|PLATFORM_ENCODING_WINDOWS_UNICODE
argument_list|)
expr_stmt|;
name|nr
operator|.
name|setLanguageId
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|nr
operator|.
name|setNameId
argument_list|(
name|NameRecord
operator|.
name|NAME_FONT_FAMILY_NAME
argument_list|)
expr_stmt|;
name|nr
operator|.
name|setString
argument_list|(
literal|"PDFBox-Dummy-Familyname"
argument_list|)
expr_stmt|;
name|nameRecords
operator|.
name|add
argument_list|(
name|nr
argument_list|)
expr_stmt|;
name|nr
operator|=
operator|new
name|NameRecord
argument_list|()
expr_stmt|;
name|nr
operator|.
name|setPlatformId
argument_list|(
name|NameRecord
operator|.
name|PLATFORM_WINDOWS
argument_list|)
expr_stmt|;
name|nr
operator|.
name|setPlatformEncodingId
argument_list|(
name|NameRecord
operator|.
name|PLATFORM_ENCODING_WINDOWS_UNICODE
argument_list|)
expr_stmt|;
name|nr
operator|.
name|setLanguageId
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|nr
operator|.
name|setNameId
argument_list|(
name|NameRecord
operator|.
name|NAME_FULL_FONT_NAME
argument_list|)
expr_stmt|;
name|nr
operator|.
name|setString
argument_list|(
literal|"PDFBox-Dummy-Fullname"
argument_list|)
expr_stmt|;
name|nameRecords
operator|.
name|add
argument_list|(
name|nr
argument_list|)
expr_stmt|;
block|}
name|int
name|numberOfRecords
init|=
name|nameRecords
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|nrep
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfRecords
condition|;
operator|++
name|i
control|)
block|{
name|NameRecord
name|nr
init|=
name|nameRecords
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|replicateNameRecord
argument_list|(
name|nr
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Writing name record ["
operator|+
name|nr
operator|.
name|getNameId
argument_list|()
operator|+
literal|"], ["
operator|+
name|nr
operator|.
name|getString
argument_list|()
operator|+
literal|"],"
argument_list|)
expr_stmt|;
operator|++
name|nrep
expr_stmt|;
block|}
block|}
name|writeUint16
argument_list|(
name|dos
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|dos
argument_list|,
name|nrep
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|dos
argument_list|,
literal|2
operator|*
literal|3
operator|+
operator|(
literal|2
operator|*
literal|6
operator|)
operator|*
name|nrep
argument_list|)
expr_stmt|;
name|byte
index|[]
index|[]
name|names
init|=
operator|new
name|byte
index|[
name|nrep
index|]
index|[]
decl_stmt|;
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfRecords
condition|;
operator|++
name|i
control|)
block|{
name|NameRecord
name|nr
init|=
name|nameRecords
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|replicateNameRecord
argument_list|(
name|nr
argument_list|)
condition|)
block|{
name|int
name|platform
init|=
name|nr
operator|.
name|getPlatformId
argument_list|()
decl_stmt|;
name|int
name|encoding
init|=
name|nr
operator|.
name|getPlatformEncodingId
argument_list|()
decl_stmt|;
name|String
name|charset
init|=
literal|"ISO-8859-1"
decl_stmt|;
if|if
condition|(
name|platform
operator|==
literal|3
operator|&&
name|encoding
operator|==
literal|1
condition|)
block|{
name|charset
operator|=
literal|"UTF-16BE"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|platform
operator|==
literal|2
condition|)
block|{
if|if
condition|(
name|encoding
operator|==
literal|0
condition|)
block|{
name|charset
operator|=
literal|"US-ASCII"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|encoding
operator|==
literal|1
condition|)
block|{
comment|//not sure is this is correct??
name|charset
operator|=
literal|"UTF16-BE"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|encoding
operator|==
literal|2
condition|)
block|{
name|charset
operator|=
literal|"ISO-8859-1"
expr_stmt|;
block|}
block|}
name|String
name|value
init|=
name|nr
operator|.
name|getString
argument_list|()
decl_stmt|;
if|if
condition|(
name|nr
operator|.
name|getNameId
argument_list|()
operator|==
literal|6
operator|&&
name|this
operator|.
name|nameSuffix
operator|!=
literal|null
condition|)
block|{
name|value
operator|+=
name|this
operator|.
name|nameSuffix
expr_stmt|;
block|}
name|names
index|[
name|j
index|]
operator|=
name|value
operator|.
name|getBytes
argument_list|(
name|charset
argument_list|)
expr_stmt|;
operator|++
name|j
expr_stmt|;
block|}
block|}
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|j
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfRecords
condition|;
operator|++
name|i
control|)
block|{
name|NameRecord
name|nr
init|=
name|nameRecords
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|replicateNameRecord
argument_list|(
name|nr
argument_list|)
condition|)
block|{
name|writeUint16
argument_list|(
name|dos
argument_list|,
name|nr
operator|.
name|getPlatformId
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|dos
argument_list|,
name|nr
operator|.
name|getPlatformEncodingId
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|dos
argument_list|,
name|nr
operator|.
name|getLanguageId
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|dos
argument_list|,
name|nr
operator|.
name|getNameId
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|dos
argument_list|,
name|names
index|[
name|j
index|]
operator|.
name|length
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|dos
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|names
index|[
name|j
index|]
operator|.
name|length
expr_stmt|;
operator|++
name|j
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nrep
condition|;
operator|++
name|i
control|)
block|{
name|dos
operator|.
name|write
argument_list|(
name|names
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|dos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Finished table [name]."
argument_list|)
expr_stmt|;
return|return
name|bos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
specifier|private
name|byte
index|[]
name|buildMaxpTable
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|dos
init|=
operator|new
name|DataOutputStream
argument_list|(
name|bos
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Building table [maxp]..."
argument_list|)
expr_stmt|;
name|MaximumProfileTable
name|p
init|=
name|this
operator|.
name|baseTTF
operator|.
name|getMaximumProfile
argument_list|()
decl_stmt|;
name|writeFixed
argument_list|(
name|dos
argument_list|,
literal|1.0
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|dos
argument_list|,
name|glyphIds
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|dos
argument_list|,
name|p
operator|.
name|getMaxPoints
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|dos
argument_list|,
name|p
operator|.
name|getMaxContours
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|dos
argument_list|,
name|p
operator|.
name|getMaxCompositePoints
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|dos
argument_list|,
name|p
operator|.
name|getMaxCompositeContours
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|dos
argument_list|,
name|p
operator|.
name|getMaxZones
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|dos
argument_list|,
name|p
operator|.
name|getMaxTwilightPoints
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|dos
argument_list|,
name|p
operator|.
name|getMaxStorage
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|dos
argument_list|,
name|p
operator|.
name|getMaxFunctionDefs
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|dos
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|dos
argument_list|,
name|p
operator|.
name|getMaxStackElements
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|dos
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|dos
argument_list|,
name|p
operator|.
name|getMaxComponentElements
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|dos
argument_list|,
name|p
operator|.
name|getMaxComponentDepth
argument_list|()
argument_list|)
expr_stmt|;
name|dos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Finished table [maxp]."
argument_list|)
expr_stmt|;
return|return
name|bos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
specifier|private
name|byte
index|[]
name|buildOS2Table
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|dos
init|=
operator|new
name|DataOutputStream
argument_list|(
name|bos
argument_list|)
decl_stmt|;
name|OS2WindowsMetricsTable
name|os2
init|=
name|this
operator|.
name|baseTTF
operator|.
name|getOS2Windows
argument_list|()
decl_stmt|;
if|if
condition|(
name|os2
operator|==
literal|null
condition|)
block|{
comment|// sometimes there is no OS2 table in an embedded subfonts
comment|// create a dummy
name|os2
operator|=
operator|new
name|OS2WindowsMetricsTable
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Building table [OS/2]..."
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|dos
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|writeSint16
argument_list|(
name|dos
argument_list|,
name|os2
operator|.
name|getAverageCharWidth
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|dos
argument_list|,
name|os2
operator|.
name|getWeightClass
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|dos
argument_list|,
name|os2
operator|.
name|getWidthClass
argument_list|()
argument_list|)
expr_stmt|;
name|writeSint16
argument_list|(
name|dos
argument_list|,
name|os2
operator|.
name|getFsType
argument_list|()
argument_list|)
expr_stmt|;
name|writeSint16
argument_list|(
name|dos
argument_list|,
name|os2
operator|.
name|getSubscriptXSize
argument_list|()
argument_list|)
expr_stmt|;
name|writeSint16
argument_list|(
name|dos
argument_list|,
name|os2
operator|.
name|getSubscriptYSize
argument_list|()
argument_list|)
expr_stmt|;
name|writeSint16
argument_list|(
name|dos
argument_list|,
name|os2
operator|.
name|getSubscriptXOffset
argument_list|()
argument_list|)
expr_stmt|;
name|writeSint16
argument_list|(
name|dos
argument_list|,
name|os2
operator|.
name|getSubscriptYOffset
argument_list|()
argument_list|)
expr_stmt|;
name|writeSint16
argument_list|(
name|dos
argument_list|,
name|os2
operator|.
name|getSuperscriptXSize
argument_list|()
argument_list|)
expr_stmt|;
name|writeSint16
argument_list|(
name|dos
argument_list|,
name|os2
operator|.
name|getSuperscriptYSize
argument_list|()
argument_list|)
expr_stmt|;
name|writeSint16
argument_list|(
name|dos
argument_list|,
name|os2
operator|.
name|getSuperscriptXOffset
argument_list|()
argument_list|)
expr_stmt|;
name|writeSint16
argument_list|(
name|dos
argument_list|,
name|os2
operator|.
name|getSuperscriptYOffset
argument_list|()
argument_list|)
expr_stmt|;
name|writeSint16
argument_list|(
name|dos
argument_list|,
name|os2
operator|.
name|getStrikeoutSize
argument_list|()
argument_list|)
expr_stmt|;
name|writeSint16
argument_list|(
name|dos
argument_list|,
name|os2
operator|.
name|getStrikeoutPosition
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint8
argument_list|(
name|dos
argument_list|,
name|os2
operator|.
name|getFamilyClass
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint8
argument_list|(
name|dos
argument_list|,
name|os2
operator|.
name|getFamilySubClass
argument_list|()
argument_list|)
expr_stmt|;
name|dos
operator|.
name|write
argument_list|(
name|os2
operator|.
name|getPanose
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint32
argument_list|(
name|dos
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|writeUint32
argument_list|(
name|dos
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|writeUint32
argument_list|(
name|dos
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|writeUint32
argument_list|(
name|dos
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|dos
operator|.
name|write
argument_list|(
name|os2
operator|.
name|getAchVendId
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"ISO-8859-1"
argument_list|)
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|it
init|=
name|characters
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|first
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|writeUint16
argument_list|(
name|dos
argument_list|,
name|os2
operator|.
name|getFsSelection
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|dos
argument_list|,
name|first
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|dos
argument_list|,
name|characters
operator|.
name|lastKey
argument_list|()
argument_list|)
expr_stmt|;
comment|/*          * The mysterious Microsoft additions.          *          * SHORT    sTypoAscender              * SHORT    sTypoDescender              * SHORT    sTypoLineGap          * USHORT    usWinAscent          * USHORT    usWinDescent          */
name|writeUint16
argument_list|(
name|dos
argument_list|,
name|os2
operator|.
name|getTypoAscender
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|dos
argument_list|,
name|os2
operator|.
name|getTypoDescender
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|dos
argument_list|,
name|os2
operator|.
name|getTypeLineGap
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|dos
argument_list|,
name|os2
operator|.
name|getWinAscent
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|dos
argument_list|,
name|os2
operator|.
name|getWinDescent
argument_list|()
argument_list|)
expr_stmt|;
name|dos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Finished table [OS/2]."
argument_list|)
expr_stmt|;
return|return
name|bos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
specifier|private
name|byte
index|[]
name|buildLocaTable
parameter_list|(
name|long
index|[]
name|newOffsets
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|dos
init|=
operator|new
name|DataOutputStream
argument_list|(
name|bos
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Building table [loca]..."
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|newOff
range|:
name|newOffsets
control|)
block|{
name|writeUint32
argument_list|(
name|dos
argument_list|,
name|newOff
argument_list|)
expr_stmt|;
block|}
name|dos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Finished table [loca]."
argument_list|)
expr_stmt|;
return|return
name|bos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|addCompoundReferences
parameter_list|()
throws|throws
name|IOException
block|{
name|GlyphTable
name|g
init|=
name|this
operator|.
name|baseTTF
operator|.
name|getGlyph
argument_list|()
decl_stmt|;
name|long
index|[]
name|offsets
init|=
name|this
operator|.
name|baseTTF
operator|.
name|getIndexToLocation
argument_list|()
operator|.
name|getOffsets
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
name|this
operator|.
name|baseTTF
operator|.
name|getOriginalData
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|glyphIdsToAdd
init|=
literal|null
decl_stmt|;
try|try
block|{
name|is
operator|.
name|skip
argument_list|(
name|g
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|lastOff
init|=
literal|0L
decl_stmt|;
for|for
control|(
name|Integer
name|glyphId
range|:
name|this
operator|.
name|glyphIds
control|)
block|{
name|long
name|offset
init|=
name|offsets
index|[
name|glyphId
operator|.
name|intValue
argument_list|()
index|]
decl_stmt|;
name|long
name|len
init|=
name|offsets
index|[
name|glyphId
operator|.
name|intValue
argument_list|()
operator|+
literal|1
index|]
operator|-
name|offset
decl_stmt|;
name|is
operator|.
name|skip
argument_list|(
name|offset
operator|-
name|lastOff
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|len
index|]
decl_stmt|;
name|is
operator|.
name|read
argument_list|(
name|buf
argument_list|)
expr_stmt|;
comment|// rewrite glyphIds for compound glyphs
if|if
condition|(
name|buf
operator|.
name|length
operator|>=
literal|2
operator|&&
name|buf
index|[
literal|0
index|]
operator|==
operator|-
literal|1
operator|&&
name|buf
index|[
literal|1
index|]
operator|==
operator|-
literal|1
condition|)
block|{
name|int
name|off
init|=
literal|2
operator|*
literal|5
decl_stmt|;
name|int
name|flags
init|=
literal|0
decl_stmt|;
do|do
block|{
name|flags
operator|=
operator|(
operator|(
operator|(
operator|(
name|int
operator|)
name|buf
index|[
name|off
index|]
operator|)
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
name|buf
index|[
name|off
operator|+
literal|1
index|]
operator|&
literal|0xff
operator|)
expr_stmt|;
name|off
operator|+=
literal|2
expr_stmt|;
name|int
name|ogid
init|=
operator|(
operator|(
operator|(
operator|(
name|int
operator|)
name|buf
index|[
name|off
index|]
operator|)
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
name|buf
index|[
name|off
operator|+
literal|1
index|]
operator|&
literal|0xff
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|glyphIds
operator|.
name|contains
argument_list|(
name|ogid
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding referenced glyph "
operator|+
name|ogid
operator|+
literal|" of compound glyph "
operator|+
name|glyphId
argument_list|)
expr_stmt|;
if|if
condition|(
name|glyphIdsToAdd
operator|==
literal|null
condition|)
block|{
name|glyphIdsToAdd
operator|=
operator|new
name|TreeSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|glyphIdsToAdd
operator|.
name|add
argument_list|(
name|ogid
argument_list|)
expr_stmt|;
block|}
name|off
operator|+=
literal|2
expr_stmt|;
comment|// ARG_1_AND_2_ARE_WORDS
if|if
condition|(
operator|(
name|flags
operator|&
operator|(
literal|1
operator|<<
literal|0
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|off
operator|+=
literal|2
operator|*
literal|2
expr_stmt|;
block|}
else|else
block|{
name|off
operator|+=
literal|2
expr_stmt|;
block|}
comment|// WE_HAVE_A_TWO_BY_TWO
if|if
condition|(
operator|(
name|flags
operator|&
operator|(
literal|1
operator|<<
literal|7
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|off
operator|+=
literal|2
operator|*
literal|4
expr_stmt|;
block|}
comment|// WE_HAVE_AN_X_AND_Y_SCALE
elseif|else
if|if
condition|(
operator|(
name|flags
operator|&
operator|(
literal|1
operator|<<
literal|6
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|off
operator|+=
literal|2
operator|*
literal|2
expr_stmt|;
block|}
comment|// WE_HAVE_A_SCALE
elseif|else
if|if
condition|(
operator|(
name|flags
operator|&
operator|(
literal|1
operator|<<
literal|3
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|off
operator|+=
literal|2
expr_stmt|;
block|}
comment|// MORE_COMPONENTS
block|}
do|while
condition|(
operator|(
name|flags
operator|&
operator|(
literal|1
operator|<<
literal|5
operator|)
operator|)
operator|!=
literal|0
condition|)
do|;
block|}
name|lastOff
operator|=
name|offsets
index|[
name|glyphId
operator|.
name|intValue
argument_list|()
operator|+
literal|1
index|]
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|glyphIdsToAdd
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|glyphIds
operator|.
name|addAll
argument_list|(
name|glyphIdsToAdd
argument_list|)
expr_stmt|;
block|}
return|return
name|glyphIdsToAdd
operator|==
literal|null
return|;
block|}
specifier|private
name|byte
index|[]
name|buildGlyfTable
parameter_list|(
name|long
index|[]
name|newOffsets
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Building table [glyf]..."
argument_list|)
expr_stmt|;
name|GlyphTable
name|g
init|=
name|this
operator|.
name|baseTTF
operator|.
name|getGlyph
argument_list|()
decl_stmt|;
name|long
index|[]
name|offsets
init|=
name|this
operator|.
name|baseTTF
operator|.
name|getIndexToLocation
argument_list|()
operator|.
name|getOffsets
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
name|this
operator|.
name|baseTTF
operator|.
name|getOriginalData
argument_list|()
decl_stmt|;
try|try
block|{
name|is
operator|.
name|skip
argument_list|(
name|g
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|lastOff
init|=
literal|0L
decl_stmt|;
name|long
name|newOff
init|=
literal|0L
decl_stmt|;
name|int
name|ioff
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Integer
name|glyphId
range|:
name|this
operator|.
name|glyphIds
control|)
block|{
name|long
name|offset
init|=
name|offsets
index|[
name|glyphId
operator|.
name|intValue
argument_list|()
index|]
decl_stmt|;
name|long
name|len
init|=
name|offsets
index|[
name|glyphId
operator|.
name|intValue
argument_list|()
operator|+
literal|1
index|]
operator|-
name|offset
decl_stmt|;
name|newOffsets
index|[
name|ioff
operator|++
index|]
operator|=
name|newOff
expr_stmt|;
name|is
operator|.
name|skip
argument_list|(
name|offset
operator|-
name|lastOff
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|len
index|]
decl_stmt|;
name|is
operator|.
name|read
argument_list|(
name|buf
argument_list|)
expr_stmt|;
comment|// rewrite glyphIds for compound glyphs
if|if
condition|(
name|buf
operator|.
name|length
operator|>=
literal|2
operator|&&
name|buf
index|[
literal|0
index|]
operator|==
operator|-
literal|1
operator|&&
name|buf
index|[
literal|1
index|]
operator|==
operator|-
literal|1
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Compound glyph "
operator|+
name|glyphId
argument_list|)
expr_stmt|;
name|int
name|off
init|=
literal|2
operator|*
literal|5
decl_stmt|;
name|int
name|flags
init|=
literal|0
decl_stmt|;
do|do
block|{
comment|// clear the WE_HAVE_INSTRUCTIONS bit. (bit 8 is lsb of the first byte)
name|buf
index|[
name|off
index|]
operator|&=
literal|0xfe
expr_stmt|;
name|flags
operator|=
operator|(
operator|(
operator|(
operator|(
name|int
operator|)
name|buf
index|[
name|off
index|]
operator|)
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
operator|(
name|int
operator|)
name|buf
index|[
name|off
operator|+
literal|1
index|]
operator|&
literal|0xff
operator|)
expr_stmt|;
name|off
operator|+=
literal|2
expr_stmt|;
name|int
name|ogid
init|=
operator|(
operator|(
operator|(
operator|(
name|int
operator|)
name|buf
index|[
name|off
index|]
operator|)
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
operator|(
name|int
operator|)
name|buf
index|[
name|off
operator|+
literal|1
index|]
operator|&
literal|0xff
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|glyphIds
operator|.
name|contains
argument_list|(
name|ogid
argument_list|)
condition|)
block|{
name|this
operator|.
name|glyphIds
operator|.
name|add
argument_list|(
name|ogid
argument_list|)
expr_stmt|;
block|}
name|int
name|ngid
init|=
name|this
operator|.
name|getNewGlyphId
argument_list|(
name|ogid
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"mapped glyph  %d to %d in compound reference (flags=%04x)"
argument_list|,
name|ogid
argument_list|,
name|ngid
argument_list|,
name|flags
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|buf
index|[
name|off
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|ngid
operator|>>>
literal|8
argument_list|)
expr_stmt|;
name|buf
index|[
name|off
operator|+
literal|1
index|]
operator|=
operator|(
name|byte
operator|)
name|ngid
expr_stmt|;
name|off
operator|+=
literal|2
expr_stmt|;
comment|// ARG_1_AND_2_ARE_WORDS
if|if
condition|(
operator|(
name|flags
operator|&
operator|(
literal|1
operator|<<
literal|0
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|off
operator|+=
literal|2
operator|*
literal|2
expr_stmt|;
block|}
else|else
block|{
name|off
operator|+=
literal|2
expr_stmt|;
block|}
comment|// WE_HAVE_A_TWO_BY_TWO
if|if
condition|(
operator|(
name|flags
operator|&
operator|(
literal|1
operator|<<
literal|7
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|off
operator|+=
literal|2
operator|*
literal|4
expr_stmt|;
block|}
comment|// WE_HAVE_AN_X_AND_Y_SCALE
elseif|else
if|if
condition|(
operator|(
name|flags
operator|&
operator|(
literal|1
operator|<<
literal|6
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|off
operator|+=
literal|2
operator|*
literal|2
expr_stmt|;
block|}
comment|// WE_HAVE_A_SCALE
elseif|else
if|if
condition|(
operator|(
name|flags
operator|&
operator|(
literal|1
operator|<<
literal|3
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|off
operator|+=
literal|2
expr_stmt|;
block|}
comment|// MORE_COMPONENTS
block|}
do|while
condition|(
operator|(
name|flags
operator|&
operator|(
literal|1
operator|<<
literal|5
operator|)
operator|)
operator|!=
literal|0
condition|)
do|;
comment|// write the compound glyph
name|bos
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|off
argument_list|)
expr_stmt|;
name|newOff
operator|+=
name|off
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|buf
operator|.
name|length
operator|>
literal|0
condition|)
block|{
comment|/*                      * bail out instructions for simple glyphs, an excerpt from the specs is given below:                      *                                               * int16    numberOfContours    If the number of contours is positive or zero, it is a single glyph;                      * If the number of contours is -1, the glyph is compound                      *  FWord    xMin    Minimum x for coordinate data                      *  FWord    yMin    Minimum y for coordinate data                      *  FWord    xMax    Maximum x for coordinate data                      *  FWord    yMax    Maximum y for coordinate data                      *  (here follow the data for the simple or compound glyph)                      *                      * Table 15: Simple glyph definition                      *  Type    Name    Description                      *  uint16  endPtsOfContours[n] Array of last points of each contour; n is the number of contours;                      *          array entries are point indices                      *  uint16  instructionLength Total number of bytes needed for instructions                      *  uint8   instructions[instructionLength] Array of instructions for this glyph                      *  uint8   flags[variable] Array of flags                      *  uint8 or int16  xCoordinates[] Array of x-coordinates; the first is relative to (0,0),                      *                                 others are relative to previous point                      *  uint8 or int16  yCoordinates[] Array of y-coordinates; the first is relative to (0,0),                       *                                 others are relative to previous point                      */
name|int
name|numberOfContours
init|=
operator|(
operator|(
operator|(
name|int
operator|)
name|buf
index|[
literal|0
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
operator|(
name|int
operator|)
name|buf
index|[
literal|1
index|]
operator|&
literal|0xff
operator|)
decl_stmt|;
comment|// offset of instructionLength
name|int
name|off
init|=
literal|2
operator|*
literal|5
operator|+
name|numberOfContours
operator|*
literal|2
decl_stmt|;
comment|// write numberOfContours, xMin, yMin, xMax, yMax, endPtsOfContours[n]
name|bos
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|off
argument_list|)
expr_stmt|;
name|newOff
operator|+=
name|off
expr_stmt|;
name|int
name|instructionLength
init|=
operator|(
operator|(
operator|(
operator|(
name|int
operator|)
name|buf
index|[
name|off
index|]
operator|)
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
operator|(
name|int
operator|)
name|buf
index|[
name|off
operator|+
literal|1
index|]
operator|&
literal|0xff
operator|)
decl_stmt|;
comment|// zarro instructions.
name|bos
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|bos
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|newOff
operator|+=
literal|2
expr_stmt|;
name|off
operator|+=
literal|2
operator|+
name|instructionLength
expr_stmt|;
comment|// flags and coordinates
name|bos
operator|.
name|write
argument_list|(
name|buf
argument_list|,
name|off
argument_list|,
name|buf
operator|.
name|length
operator|-
name|off
argument_list|)
expr_stmt|;
name|newOff
operator|+=
name|buf
operator|.
name|length
operator|-
name|off
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|newOff
operator|%
literal|4L
operator|)
operator|!=
literal|0L
condition|)
block|{
name|int
name|np
init|=
call|(
name|int
call|)
argument_list|(
literal|4
operator|-
name|newOff
operator|%
literal|4L
argument_list|)
decl_stmt|;
name|bos
operator|.
name|write
argument_list|(
name|PAD_BUF
argument_list|,
literal|0
argument_list|,
name|np
argument_list|)
expr_stmt|;
name|newOff
operator|+=
name|np
expr_stmt|;
block|}
name|lastOff
operator|=
name|offsets
index|[
name|glyphId
operator|.
name|intValue
argument_list|()
operator|+
literal|1
index|]
expr_stmt|;
block|}
name|newOffsets
index|[
name|ioff
operator|++
index|]
operator|=
name|newOff
expr_stmt|;
block|}
finally|finally
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Finished table [glyf]."
argument_list|)
expr_stmt|;
return|return
name|bos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
specifier|private
name|int
name|getNewGlyphId
parameter_list|(
name|Integer
name|oldGid
parameter_list|)
block|{
return|return
name|this
operator|.
name|glyphIds
operator|.
name|headSet
argument_list|(
name|oldGid
argument_list|)
operator|.
name|size
argument_list|()
return|;
block|}
specifier|private
name|byte
index|[]
name|buildCmapTable
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|dos
init|=
operator|new
name|DataOutputStream
argument_list|(
name|bos
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Building table [cmap]..."
argument_list|)
expr_stmt|;
comment|/*          * UInt16    version    Version number (Set to zero)          * UInt16    numberSubtables    Number of encoding subtables          */
name|writeUint16
argument_list|(
name|dos
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|dos
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|/*          * UInt16    platformID    Platform identifier          * UInt16    platformSpecificID    Platform-specific encoding identifier          * UInt32    offset    Offset of the mapping table          */
name|writeUint16
argument_list|(
name|dos
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// unicode
name|writeUint16
argument_list|(
name|dos
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Default Semantics
name|writeUint32
argument_list|(
name|dos
argument_list|,
literal|4
operator|*
literal|2
operator|+
literal|4
argument_list|)
expr_stmt|;
comment|// mapping of type 4.
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|it
init|=
name|this
operator|.
name|characters
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|lastChar
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|prevChar
init|=
name|lastChar
decl_stmt|;
name|int
name|lastGid
init|=
name|this
operator|.
name|getNewGlyphId
argument_list|(
name|lastChar
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|int
index|[]
name|startCode
init|=
operator|new
name|int
index|[
name|this
operator|.
name|characters
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
index|[]
name|endCode
init|=
operator|new
name|int
index|[
name|this
operator|.
name|characters
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
index|[]
name|idDelta
init|=
operator|new
name|int
index|[
name|this
operator|.
name|characters
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|nseg
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|curChar
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|curGid
init|=
name|this
operator|.
name|getNewGlyphId
argument_list|(
name|curChar
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|curChar
operator|.
name|getKey
argument_list|()
operator|!=
name|prevChar
operator|.
name|getKey
argument_list|()
operator|+
literal|1
operator|||
name|curGid
operator|-
name|lastGid
operator|!=
name|curChar
operator|.
name|getKey
argument_list|()
operator|-
name|lastChar
operator|.
name|getKey
argument_list|()
condition|)
block|{
comment|// Don't emit ranges, which map to the undef glyph, the
comment|// undef glyph is emitted a the very last segment.
if|if
condition|(
name|lastGid
operator|!=
literal|0
condition|)
block|{
name|startCode
index|[
name|nseg
index|]
operator|=
name|lastChar
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|endCode
index|[
name|nseg
index|]
operator|=
name|prevChar
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|idDelta
index|[
name|nseg
index|]
operator|=
name|lastGid
operator|-
name|lastChar
operator|.
name|getKey
argument_list|()
expr_stmt|;
operator|++
name|nseg
expr_stmt|;
block|}
comment|// shorten ranges which start with undef by one.
elseif|else
if|if
condition|(
operator|!
name|lastChar
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|prevChar
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|startCode
index|[
name|nseg
index|]
operator|=
name|lastChar
operator|.
name|getKey
argument_list|()
operator|+
literal|1
expr_stmt|;
name|endCode
index|[
name|nseg
index|]
operator|=
name|prevChar
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|idDelta
index|[
name|nseg
index|]
operator|=
name|lastGid
operator|-
name|lastChar
operator|.
name|getKey
argument_list|()
expr_stmt|;
operator|++
name|nseg
expr_stmt|;
block|}
name|lastGid
operator|=
name|curGid
expr_stmt|;
name|lastChar
operator|=
name|curChar
expr_stmt|;
block|}
name|prevChar
operator|=
name|curChar
expr_stmt|;
block|}
comment|// trailing segment
name|startCode
index|[
name|nseg
index|]
operator|=
name|lastChar
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|endCode
index|[
name|nseg
index|]
operator|=
name|prevChar
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|idDelta
index|[
name|nseg
index|]
operator|=
name|lastGid
operator|-
name|lastChar
operator|.
name|getKey
argument_list|()
expr_stmt|;
operator|++
name|nseg
expr_stmt|;
comment|// notdef character.
name|startCode
index|[
name|nseg
index|]
operator|=
literal|0xffff
expr_stmt|;
name|endCode
index|[
name|nseg
index|]
operator|=
literal|0xffff
expr_stmt|;
name|idDelta
index|[
name|nseg
index|]
operator|=
literal|1
expr_stmt|;
operator|++
name|nseg
expr_stmt|;
comment|/*          * UInt16    format    Format number is set to 4               * UInt16    length    Length of subtable in bytes               * UInt16    language    Language code for this encoding subtable, or zero if language-independent               * UInt16    segCountX2    2 * segCount               * UInt16    searchRange    2 * (2**FLOOR(log2(segCount)))               * UInt16    entrySelector    log2(searchRange/2)               * UInt16    rangeShift    (2 * segCount) - searchRange               * UInt16    endCode[segCount]    Ending character code for each segment, last = 0xFFFF.              * UInt16    reservedPad    This value should be zero              * UInt16    startCode[segCount]    Starting character code for each segment              * UInt16    idDelta[segCount]    Delta for all character codes in segment               * UInt16    idRangeOffset[segCount]    Offset in bytes to glyph indexArray, or 0               * UInt16    glyphIndexArray[variable]    Glyph index array          */
name|writeUint16
argument_list|(
name|dos
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|dos
argument_list|,
literal|8
operator|*
literal|2
operator|+
name|nseg
operator|*
operator|(
literal|4
operator|*
literal|2
operator|)
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|dos
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|dos
argument_list|,
name|nseg
operator|*
literal|2
argument_list|)
expr_stmt|;
name|int
name|nsegHigh
init|=
name|Integer
operator|.
name|highestOneBit
argument_list|(
name|nseg
argument_list|)
decl_stmt|;
name|writeUint16
argument_list|(
name|dos
argument_list|,
name|nsegHigh
operator|*
literal|2
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|dos
argument_list|,
name|log2i
argument_list|(
name|nsegHigh
argument_list|)
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|dos
argument_list|,
literal|2
operator|*
operator|(
name|nseg
operator|-
name|nsegHigh
operator|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nseg
condition|;
operator|++
name|i
control|)
block|{
name|writeUint16
argument_list|(
name|dos
argument_list|,
name|endCode
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|writeUint16
argument_list|(
name|dos
argument_list|,
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nseg
condition|;
operator|++
name|i
control|)
block|{
name|writeUint16
argument_list|(
name|dos
argument_list|,
name|startCode
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nseg
condition|;
operator|++
name|i
control|)
block|{
name|writeUint16
argument_list|(
name|dos
argument_list|,
name|idDelta
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nseg
condition|;
operator|++
name|i
control|)
block|{
name|writeUint16
argument_list|(
name|dos
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Finished table [cmap]."
argument_list|)
expr_stmt|;
return|return
name|bos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
specifier|private
name|byte
index|[]
name|buildPostTable
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|dos
init|=
operator|new
name|DataOutputStream
argument_list|(
name|bos
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Building table [post]..."
argument_list|)
expr_stmt|;
name|PostScriptTable
name|p
init|=
name|this
operator|.
name|baseTTF
operator|.
name|getPostScript
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
comment|// sometimes there is no post table in an embedded subfonts
comment|// create a dummy
name|p
operator|=
operator|new
name|PostScriptTable
argument_list|()
expr_stmt|;
block|}
name|String
index|[]
name|glyphNames
init|=
name|p
operator|.
name|getGlyphNames
argument_list|()
decl_stmt|;
comment|/*             Fixed    format    Format of this table             Fixed    italicAngle    Italic angle in degrees             FWord    underlinePosition    Underline position             FWord    underlineThickness    Underline thickness             uint32    isFixedPitch    Font is monospaced; set to 1 if the font is monospaced and 0 otherwise              (N.B., to maintain compatibility with older versions of the TrueType spec, accept any non-zero value              as meaning that the font is monospaced)             uint32    minMemType42    Minimum memory usage when a TrueType font is downloaded as a Type 42 font             uint32    maxMemType42    Maximum memory usage when a TrueType font is downloaded as a Type 42 font             uint32    minMemType1    Minimum memory usage when a TrueType font is downloaded as a Type 1 font             uint32    maxMemType1    Maximum memory usage when a TrueType font is downloaded as a Type 1 font             uint16    numberOfGlyphs    number of glyphs             uint16    glyphNameIndex[numberOfGlyphs]    Ordinal number of this glyph in 'post' string tables.              This is not an offset.             Pascal string    names[numberNewGlyphs]  glyph names with length bytes [variable] (a Pascal string)          */
name|writeFixed
argument_list|(
name|dos
argument_list|,
literal|2.0
argument_list|)
expr_stmt|;
name|writeFixed
argument_list|(
name|dos
argument_list|,
name|p
operator|.
name|getItalicAngle
argument_list|()
argument_list|)
expr_stmt|;
name|writeSint16
argument_list|(
name|dos
argument_list|,
name|p
operator|.
name|getUnderlinePosition
argument_list|()
argument_list|)
expr_stmt|;
name|writeSint16
argument_list|(
name|dos
argument_list|,
name|p
operator|.
name|getUnderlineThickness
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint32
argument_list|(
name|dos
argument_list|,
name|p
operator|.
name|getIsFixedPitch
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint32
argument_list|(
name|dos
argument_list|,
name|p
operator|.
name|getMinMemType42
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint32
argument_list|(
name|dos
argument_list|,
name|p
operator|.
name|getMaxMemType42
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint32
argument_list|(
name|dos
argument_list|,
name|p
operator|.
name|getMimMemType1
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint32
argument_list|(
name|dos
argument_list|,
name|p
operator|.
name|getMaxMemType1
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|dos
argument_list|,
name|baseTTF
operator|.
name|getHorizontalHeader
argument_list|()
operator|.
name|getNumberOfHMetrics
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|additionalNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|additionalNamesIndices
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|glyphNames
operator|==
literal|null
condition|)
block|{
name|Encoding
name|enc
init|=
name|MacRomanEncoding
operator|.
name|INSTANCE
decl_stmt|;
name|int
index|[]
name|gidToUC
init|=
name|this
operator|.
name|baseCmap
operator|.
name|getGlyphIdToCharacterCode
argument_list|()
decl_stmt|;
for|for
control|(
name|Integer
name|glyphId
range|:
name|this
operator|.
name|glyphIds
control|)
block|{
name|int
name|uc
init|=
name|gidToUC
index|[
name|glyphId
operator|.
name|intValue
argument_list|()
index|]
decl_stmt|;
name|String
name|name
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|uc
operator|<
literal|0x8000
condition|)
block|{
try|try
block|{
name|name
operator|=
name|enc
operator|.
name|getNameFromCharacter
argument_list|(
operator|(
name|char
operator|)
name|uc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// TODO
block|}
block|}
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|name
operator|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|,
literal|"uni%04X"
argument_list|,
name|uc
argument_list|)
expr_stmt|;
block|}
name|Integer
name|macId
init|=
name|Encoding
operator|.
name|MAC_GLYPH_NAMES_INDICES
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|macId
operator|==
literal|null
condition|)
block|{
name|Integer
name|idx
init|=
name|additionalNamesIndices
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|==
literal|null
condition|)
block|{
name|idx
operator|=
name|additionalNames
operator|.
name|size
argument_list|()
expr_stmt|;
name|additionalNames
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|additionalNamesIndices
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|idx
argument_list|)
expr_stmt|;
block|}
name|writeUint16
argument_list|(
name|dos
argument_list|,
name|idx
operator|.
name|intValue
argument_list|()
operator|+
literal|258
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeUint16
argument_list|(
name|dos
argument_list|,
name|macId
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|Integer
name|glyphId
range|:
name|this
operator|.
name|glyphIds
control|)
block|{
name|String
name|name
init|=
name|glyphNames
index|[
name|glyphId
operator|.
name|intValue
argument_list|()
index|]
decl_stmt|;
name|Integer
name|macId
init|=
name|Encoding
operator|.
name|MAC_GLYPH_NAMES_INDICES
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|macId
operator|==
literal|null
condition|)
block|{
name|Integer
name|idx
init|=
name|additionalNamesIndices
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|==
literal|null
condition|)
block|{
name|idx
operator|=
name|additionalNames
operator|.
name|size
argument_list|()
expr_stmt|;
name|additionalNames
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|additionalNamesIndices
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|idx
argument_list|)
expr_stmt|;
block|}
name|writeUint16
argument_list|(
name|dos
argument_list|,
name|idx
operator|.
name|intValue
argument_list|()
operator|+
literal|258
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeUint16
argument_list|(
name|dos
argument_list|,
name|macId
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|String
name|name
range|:
name|additionalNames
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"additionalName=["
operator|+
name|name
operator|+
literal|"]."
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buf
init|=
name|name
operator|.
name|getBytes
argument_list|(
literal|"US-ASCII"
argument_list|)
decl_stmt|;
name|writeUint8
argument_list|(
name|dos
argument_list|,
name|buf
operator|.
name|length
argument_list|)
expr_stmt|;
name|dos
operator|.
name|write
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
name|dos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Finished table [post]."
argument_list|)
expr_stmt|;
return|return
name|bos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
specifier|private
name|byte
index|[]
name|buildHmtxTable
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Building table [hmtx]..."
argument_list|)
expr_stmt|;
name|HorizontalHeaderTable
name|h
init|=
name|this
operator|.
name|baseTTF
operator|.
name|getHorizontalHeader
argument_list|()
decl_stmt|;
name|HorizontalMetricsTable
name|hm
init|=
name|this
operator|.
name|baseTTF
operator|.
name|getHorizontalMetrics
argument_list|()
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
name|InputStream
name|is
init|=
name|this
operator|.
name|baseTTF
operator|.
name|getOriginalData
argument_list|()
decl_stmt|;
try|try
block|{
name|is
operator|.
name|skip
argument_list|(
name|hm
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|lastOff
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Integer
name|glyphId
range|:
name|this
operator|.
name|glyphIds
control|)
block|{
comment|// offset in original file.
name|long
name|off
decl_stmt|;
if|if
condition|(
name|glyphId
operator|<
name|h
operator|.
name|getNumberOfHMetrics
argument_list|()
condition|)
block|{
name|off
operator|=
name|glyphId
operator|*
literal|4
expr_stmt|;
block|}
else|else
block|{
name|off
operator|=
name|h
operator|.
name|getNumberOfHMetrics
argument_list|()
operator|*
literal|4
operator|+
operator|(
name|glyphId
operator|-
name|h
operator|.
name|getNumberOfHMetrics
argument_list|()
operator|)
operator|*
literal|2
expr_stmt|;
block|}
comment|// skip over from last original offset.
if|if
condition|(
name|off
operator|!=
name|lastOff
condition|)
block|{
name|long
name|nskip
init|=
name|off
operator|-
name|lastOff
decl_stmt|;
if|if
condition|(
name|nskip
operator|!=
name|is
operator|.
name|skip
argument_list|(
name|nskip
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|(
literal|"Unexpected EOF exception parsing glyphId of hmtx table."
argument_list|)
throw|;
block|}
block|}
comment|// read left side bearings only, if we are beyond numOfHMetrics.
name|int
name|n
init|=
name|glyphId
operator|<
name|h
operator|.
name|getNumberOfHMetrics
argument_list|()
condition|?
literal|4
else|:
literal|2
decl_stmt|;
if|if
condition|(
name|n
operator|!=
name|is
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|(
literal|"Unexpected EOF exception parsing glyphId of hmtx table."
argument_list|)
throw|;
block|}
name|bos
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|lastOff
operator|=
name|off
operator|+
name|n
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Finished table [hmtx]."
argument_list|)
expr_stmt|;
return|return
name|bos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
finally|finally
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Write the subfont to the given output stream.      *       * @param os the stream used for writing      * @throws IOException if something went wrong.      */
specifier|public
name|void
name|writeToStream
parameter_list|(
name|OutputStream
name|os
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"glyphIds=["
operator|+
name|glyphIds
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"numGlyphs=["
operator|+
name|glyphIds
operator|.
name|size
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|addCompoundReferences
argument_list|()
condition|)
block|{         }
name|DataOutputStream
name|dos
init|=
operator|new
name|DataOutputStream
argument_list|(
name|os
argument_list|)
decl_stmt|;
try|try
block|{
comment|/*                 'cmap'    character to glyph mapping                 'glyf'    glyph data                 'head'    font header                 'hhea'    horizontal header                 'OS/2'  OS/2 compatibility table.                 'hmtx'    horizontal metrics                 'loca'    index to location                 'maxp'    maximum profile                 'name'    naming                 'post'    PostScript              */
name|String
index|[]
name|tableNames
init|=
block|{
literal|"OS/2"
block|,
literal|"cmap"
block|,
literal|"glyf"
block|,
literal|"head"
block|,
literal|"hhea"
block|,
literal|"hmtx"
block|,
literal|"loca"
block|,
literal|"maxp"
block|,
literal|"name"
block|,
literal|"post"
block|}
decl_stmt|;
name|byte
index|[]
index|[]
name|tables
init|=
operator|new
name|byte
index|[
name|tableNames
operator|.
name|length
index|]
index|[]
decl_stmt|;
name|long
index|[]
name|newOffsets
init|=
operator|new
name|long
index|[
name|this
operator|.
name|glyphIds
operator|.
name|size
argument_list|()
operator|+
literal|1
index|]
decl_stmt|;
name|tables
index|[
literal|3
index|]
operator|=
name|this
operator|.
name|buildHeadTable
argument_list|()
expr_stmt|;
name|tables
index|[
literal|4
index|]
operator|=
name|this
operator|.
name|buildHheaTable
argument_list|()
expr_stmt|;
name|tables
index|[
literal|7
index|]
operator|=
name|this
operator|.
name|buildMaxpTable
argument_list|()
expr_stmt|;
name|tables
index|[
literal|8
index|]
operator|=
name|this
operator|.
name|buildNameTable
argument_list|()
expr_stmt|;
name|tables
index|[
literal|0
index|]
operator|=
name|this
operator|.
name|buildOS2Table
argument_list|()
expr_stmt|;
name|tables
index|[
literal|2
index|]
operator|=
name|this
operator|.
name|buildGlyfTable
argument_list|(
name|newOffsets
argument_list|)
expr_stmt|;
name|tables
index|[
literal|6
index|]
operator|=
name|this
operator|.
name|buildLocaTable
argument_list|(
name|newOffsets
argument_list|)
expr_stmt|;
name|tables
index|[
literal|1
index|]
operator|=
name|this
operator|.
name|buildCmapTable
argument_list|()
expr_stmt|;
name|tables
index|[
literal|5
index|]
operator|=
name|this
operator|.
name|buildHmtxTable
argument_list|()
expr_stmt|;
name|tables
index|[
literal|9
index|]
operator|=
name|this
operator|.
name|buildPostTable
argument_list|()
expr_stmt|;
name|long
name|checksum
init|=
name|writeFileHeader
argument_list|(
name|dos
argument_list|,
name|tableNames
operator|.
name|length
argument_list|)
decl_stmt|;
name|long
name|offset
init|=
literal|12L
operator|+
literal|16L
operator|*
name|tableNames
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tableNames
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|checksum
operator|+=
name|writeTableHeader
argument_list|(
name|dos
argument_list|,
name|tableNames
index|[
name|i
index|]
argument_list|,
name|offset
argument_list|,
name|tables
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|offset
operator|+=
operator|(
operator|(
name|tables
index|[
name|i
index|]
operator|.
name|length
operator|+
literal|3
operator|)
operator|/
literal|4
operator|)
operator|*
literal|4
expr_stmt|;
block|}
name|checksum
operator|=
literal|0xB1B0AFBAL
operator|-
operator|(
name|checksum
operator|&
literal|0xffffffffL
operator|)
expr_stmt|;
comment|// correct checksumAdjustment of 'head' table.
name|tables
index|[
literal|3
index|]
index|[
literal|8
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|checksum
operator|>>>
literal|24
argument_list|)
expr_stmt|;
name|tables
index|[
literal|3
index|]
index|[
literal|9
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|checksum
operator|>>>
literal|16
argument_list|)
expr_stmt|;
name|tables
index|[
literal|3
index|]
index|[
literal|10
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|checksum
operator|>>>
literal|8
argument_list|)
expr_stmt|;
name|tables
index|[
literal|3
index|]
index|[
literal|11
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|checksum
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tableNames
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|writeTableBody
argument_list|(
name|dos
argument_list|,
name|tables
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|dos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

