begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|ttf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|GregorianCalendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Subsetter for TrueType (TTF) fonts.  *  *<p>Originally developed by Wolfgang Glas for  *<a href="https://clazzes.org/display/SKETCH/Clazzes.org+Sketch+Home">Sketch</a>.  *  * @author Wolfgang Glas  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|TTFSubsetter
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TTFSubsetter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|PAD_BUF
init|=
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
specifier|private
specifier|final
name|TrueTypeFont
name|ttf
decl_stmt|;
specifier|private
specifier|final
name|CmapLookup
name|unicodeCmap
decl_stmt|;
specifier|private
specifier|final
name|SortedMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|uniToGID
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|keepTables
decl_stmt|;
specifier|private
specifier|final
name|SortedSet
argument_list|<
name|Integer
argument_list|>
name|glyphIds
decl_stmt|;
comment|// new glyph ids
specifier|private
name|String
name|prefix
decl_stmt|;
specifier|private
name|boolean
name|hasAddedCompoundReferences
decl_stmt|;
comment|/**      * Creates a subsetter for the given font.      *      * @param ttf the font to be subset      */
specifier|public
name|TTFSubsetter
parameter_list|(
name|TrueTypeFont
name|ttf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|ttf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a subsetter for the given font.      *       * @param ttf the font to be subset      * @param tables optional tables to keep if present      */
specifier|public
name|TTFSubsetter
parameter_list|(
name|TrueTypeFont
name|ttf
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|tables
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|ttf
operator|=
name|ttf
expr_stmt|;
name|this
operator|.
name|keepTables
operator|=
name|tables
expr_stmt|;
name|uniToGID
operator|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
expr_stmt|;
name|glyphIds
operator|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
expr_stmt|;
comment|// find the best Unicode cmap
name|this
operator|.
name|unicodeCmap
operator|=
name|ttf
operator|.
name|getUnicodeCmapLookup
argument_list|()
expr_stmt|;
comment|// always copy GID 0
name|glyphIds
operator|.
name|add
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the prefix to add to the font's PostScript name.      *      * @param prefix      */
specifier|public
name|void
name|setPrefix
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
name|this
operator|.
name|prefix
operator|=
name|prefix
expr_stmt|;
block|}
comment|/**      * Add the given character code to the subset.      *       * @param unicode character code      */
specifier|public
name|void
name|add
parameter_list|(
name|int
name|unicode
parameter_list|)
block|{
name|int
name|gid
init|=
name|unicodeCmap
operator|.
name|getGlyphId
argument_list|(
name|unicode
argument_list|)
decl_stmt|;
if|if
condition|(
name|gid
operator|!=
literal|0
condition|)
block|{
name|uniToGID
operator|.
name|put
argument_list|(
name|unicode
argument_list|,
name|gid
argument_list|)
expr_stmt|;
name|glyphIds
operator|.
name|add
argument_list|(
name|gid
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Add the given character codes to the subset.      *      * @param unicodeSet character code set      */
specifier|public
name|void
name|addAll
parameter_list|(
name|Set
argument_list|<
name|Integer
argument_list|>
name|unicodeSet
parameter_list|)
block|{
for|for
control|(
name|int
name|unicode
range|:
name|unicodeSet
control|)
block|{
name|add
argument_list|(
name|unicode
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns the map of new -&gt; old GIDs.      */
specifier|public
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|getGIDMap
parameter_list|()
throws|throws
name|IOException
block|{
name|addCompoundReferences
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|newToOld
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|newGID
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|oldGID
range|:
name|glyphIds
control|)
block|{
name|newToOld
operator|.
name|put
argument_list|(
name|newGID
argument_list|,
name|oldGID
argument_list|)
expr_stmt|;
name|newGID
operator|++
expr_stmt|;
block|}
return|return
name|newToOld
return|;
block|}
comment|/**      * @param out The data output stream.      * @param nTables The number of table.      * @return The file offset of the first TTF table to write.      * @throws IOException Upon errors.      */
specifier|private
name|long
name|writeFileHeader
parameter_list|(
name|DataOutputStream
name|out
parameter_list|,
name|int
name|nTables
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeInt
argument_list|(
literal|0x00010000
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeShort
argument_list|(
name|nTables
argument_list|)
expr_stmt|;
name|int
name|mask
init|=
name|Integer
operator|.
name|highestOneBit
argument_list|(
name|nTables
argument_list|)
decl_stmt|;
name|int
name|searchRange
init|=
name|mask
operator|*
literal|16
decl_stmt|;
name|out
operator|.
name|writeShort
argument_list|(
name|searchRange
argument_list|)
expr_stmt|;
name|int
name|entrySelector
init|=
name|log2
argument_list|(
name|mask
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeShort
argument_list|(
name|entrySelector
argument_list|)
expr_stmt|;
comment|// numTables * 16 - searchRange
name|int
name|last
init|=
literal|16
operator|*
name|nTables
operator|-
name|searchRange
decl_stmt|;
name|out
operator|.
name|writeShort
argument_list|(
name|last
argument_list|)
expr_stmt|;
return|return
literal|0x00010000L
operator|+
name|toUInt32
argument_list|(
name|nTables
argument_list|,
name|searchRange
argument_list|)
operator|+
name|toUInt32
argument_list|(
name|entrySelector
argument_list|,
name|last
argument_list|)
return|;
block|}
specifier|private
name|long
name|writeTableHeader
parameter_list|(
name|DataOutputStream
name|out
parameter_list|,
name|String
name|tag
parameter_list|,
name|long
name|offset
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|checksum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|nup
init|=
literal|0
init|,
name|n
init|=
name|bytes
operator|.
name|length
init|;
name|nup
operator|<
name|n
condition|;
name|nup
operator|++
control|)
block|{
name|checksum
operator|+=
operator|(
name|bytes
index|[
name|nup
index|]
operator|&
literal|0xffL
operator|)
operator|<<
literal|24
operator|-
name|nup
operator|%
literal|4
operator|*
literal|8
expr_stmt|;
block|}
name|checksum
operator|&=
literal|0xffffffffL
expr_stmt|;
name|byte
index|[]
name|tagbytes
init|=
name|tag
operator|.
name|getBytes
argument_list|(
literal|"US-ASCII"
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|tagbytes
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
operator|(
name|int
operator|)
name|checksum
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
operator|(
name|int
operator|)
name|offset
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// account for the checksum twice, once for the header field, once for the content itself
return|return
name|toUInt32
argument_list|(
name|tagbytes
argument_list|)
operator|+
name|checksum
operator|+
name|checksum
operator|+
name|offset
operator|+
name|bytes
operator|.
name|length
return|;
block|}
specifier|private
name|void
name|writeTableBody
parameter_list|(
name|OutputStream
name|os
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|n
init|=
name|bytes
operator|.
name|length
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
if|if
condition|(
name|n
operator|%
literal|4
operator|!=
literal|0
condition|)
block|{
name|os
operator|.
name|write
argument_list|(
name|PAD_BUF
argument_list|,
literal|0
argument_list|,
literal|4
operator|-
name|n
operator|%
literal|4
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|byte
index|[]
name|buildHeadTable
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
name|bos
argument_list|)
decl_stmt|;
name|HeaderTable
name|h
init|=
name|ttf
operator|.
name|getHeader
argument_list|()
decl_stmt|;
name|writeFixed
argument_list|(
name|out
argument_list|,
name|h
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|writeFixed
argument_list|(
name|out
argument_list|,
name|h
operator|.
name|getFontRevision
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint32
argument_list|(
name|out
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// h.getCheckSumAdjustment()
name|writeUint32
argument_list|(
name|out
argument_list|,
name|h
operator|.
name|getMagicNumber
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|out
argument_list|,
name|h
operator|.
name|getFlags
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|out
argument_list|,
name|h
operator|.
name|getUnitsPerEm
argument_list|()
argument_list|)
expr_stmt|;
name|writeLongDateTime
argument_list|(
name|out
argument_list|,
name|h
operator|.
name|getCreated
argument_list|()
argument_list|)
expr_stmt|;
name|writeLongDateTime
argument_list|(
name|out
argument_list|,
name|h
operator|.
name|getModified
argument_list|()
argument_list|)
expr_stmt|;
name|writeSInt16
argument_list|(
name|out
argument_list|,
name|h
operator|.
name|getXMin
argument_list|()
argument_list|)
expr_stmt|;
name|writeSInt16
argument_list|(
name|out
argument_list|,
name|h
operator|.
name|getYMin
argument_list|()
argument_list|)
expr_stmt|;
name|writeSInt16
argument_list|(
name|out
argument_list|,
name|h
operator|.
name|getXMax
argument_list|()
argument_list|)
expr_stmt|;
name|writeSInt16
argument_list|(
name|out
argument_list|,
name|h
operator|.
name|getYMax
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|out
argument_list|,
name|h
operator|.
name|getMacStyle
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|out
argument_list|,
name|h
operator|.
name|getLowestRecPPEM
argument_list|()
argument_list|)
expr_stmt|;
name|writeSInt16
argument_list|(
name|out
argument_list|,
name|h
operator|.
name|getFontDirectionHint
argument_list|()
argument_list|)
expr_stmt|;
comment|// force long format of 'loca' table
name|writeSInt16
argument_list|(
name|out
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
comment|// h.getIndexToLocFormat()
name|writeSInt16
argument_list|(
name|out
argument_list|,
name|h
operator|.
name|getGlyphDataFormat
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|bos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
specifier|private
name|byte
index|[]
name|buildHheaTable
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
name|bos
argument_list|)
decl_stmt|;
name|HorizontalHeaderTable
name|h
init|=
name|ttf
operator|.
name|getHorizontalHeader
argument_list|()
decl_stmt|;
name|writeFixed
argument_list|(
name|out
argument_list|,
name|h
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|writeSInt16
argument_list|(
name|out
argument_list|,
name|h
operator|.
name|getAscender
argument_list|()
argument_list|)
expr_stmt|;
name|writeSInt16
argument_list|(
name|out
argument_list|,
name|h
operator|.
name|getDescender
argument_list|()
argument_list|)
expr_stmt|;
name|writeSInt16
argument_list|(
name|out
argument_list|,
name|h
operator|.
name|getLineGap
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|out
argument_list|,
name|h
operator|.
name|getAdvanceWidthMax
argument_list|()
argument_list|)
expr_stmt|;
name|writeSInt16
argument_list|(
name|out
argument_list|,
name|h
operator|.
name|getMinLeftSideBearing
argument_list|()
argument_list|)
expr_stmt|;
name|writeSInt16
argument_list|(
name|out
argument_list|,
name|h
operator|.
name|getMinRightSideBearing
argument_list|()
argument_list|)
expr_stmt|;
name|writeSInt16
argument_list|(
name|out
argument_list|,
name|h
operator|.
name|getXMaxExtent
argument_list|()
argument_list|)
expr_stmt|;
name|writeSInt16
argument_list|(
name|out
argument_list|,
name|h
operator|.
name|getCaretSlopeRise
argument_list|()
argument_list|)
expr_stmt|;
name|writeSInt16
argument_list|(
name|out
argument_list|,
name|h
operator|.
name|getCaretSlopeRun
argument_list|()
argument_list|)
expr_stmt|;
name|writeSInt16
argument_list|(
name|out
argument_list|,
name|h
operator|.
name|getReserved1
argument_list|()
argument_list|)
expr_stmt|;
comment|// caretOffset
name|writeSInt16
argument_list|(
name|out
argument_list|,
name|h
operator|.
name|getReserved2
argument_list|()
argument_list|)
expr_stmt|;
name|writeSInt16
argument_list|(
name|out
argument_list|,
name|h
operator|.
name|getReserved3
argument_list|()
argument_list|)
expr_stmt|;
name|writeSInt16
argument_list|(
name|out
argument_list|,
name|h
operator|.
name|getReserved4
argument_list|()
argument_list|)
expr_stmt|;
name|writeSInt16
argument_list|(
name|out
argument_list|,
name|h
operator|.
name|getReserved5
argument_list|()
argument_list|)
expr_stmt|;
name|writeSInt16
argument_list|(
name|out
argument_list|,
name|h
operator|.
name|getMetricDataFormat
argument_list|()
argument_list|)
expr_stmt|;
comment|// is there a GID>= numberOfHMetrics ? Then keep the last entry of original hmtx table,
comment|// (add if it isn't in our set of GIDs), see also in buildHmtxTable()
name|int
name|hmetrics
init|=
name|glyphIds
operator|.
name|subSet
argument_list|(
literal|0
argument_list|,
name|h
operator|.
name|getNumberOfHMetrics
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|glyphIds
operator|.
name|last
argument_list|()
operator|>=
name|h
operator|.
name|getNumberOfHMetrics
argument_list|()
operator|&&
operator|!
name|glyphIds
operator|.
name|contains
argument_list|(
name|h
operator|.
name|getNumberOfHMetrics
argument_list|()
operator|-
literal|1
argument_list|)
condition|)
block|{
operator|++
name|hmetrics
expr_stmt|;
block|}
name|writeUint16
argument_list|(
name|out
argument_list|,
name|hmetrics
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|bos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|shouldCopyNameRecord
parameter_list|(
name|NameRecord
name|nr
parameter_list|)
block|{
return|return
name|nr
operator|.
name|getPlatformId
argument_list|()
operator|==
name|NameRecord
operator|.
name|PLATFORM_WINDOWS
operator|&&
name|nr
operator|.
name|getPlatformEncodingId
argument_list|()
operator|==
name|NameRecord
operator|.
name|ENCODING_WINDOWS_UNICODE_BMP
operator|&&
name|nr
operator|.
name|getLanguageId
argument_list|()
operator|==
name|NameRecord
operator|.
name|LANGUGAE_WINDOWS_EN_US
operator|&&
name|nr
operator|.
name|getNameId
argument_list|()
operator|>=
literal|0
operator|&&
name|nr
operator|.
name|getNameId
argument_list|()
operator|<
literal|7
return|;
block|}
specifier|private
name|byte
index|[]
name|buildNameTable
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
name|bos
argument_list|)
decl_stmt|;
name|NamingTable
name|name
init|=
name|ttf
operator|.
name|getNaming
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|keepTables
operator|!=
literal|null
operator|&&
operator|!
name|keepTables
operator|.
name|contains
argument_list|(
literal|"name"
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|NameRecord
argument_list|>
name|nameRecords
init|=
name|name
operator|.
name|getNameRecords
argument_list|()
decl_stmt|;
name|int
name|numRecords
init|=
literal|0
decl_stmt|;
for|for
control|(
name|NameRecord
name|record
range|:
name|nameRecords
control|)
block|{
if|if
condition|(
name|shouldCopyNameRecord
argument_list|(
name|record
argument_list|)
condition|)
block|{
name|numRecords
operator|++
expr_stmt|;
block|}
block|}
name|writeUint16
argument_list|(
name|out
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|out
argument_list|,
name|numRecords
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|out
argument_list|,
literal|2
operator|*
literal|3
operator|+
literal|2
operator|*
literal|6
operator|*
name|numRecords
argument_list|)
expr_stmt|;
if|if
condition|(
name|numRecords
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|byte
index|[]
index|[]
name|names
init|=
operator|new
name|byte
index|[
name|numRecords
index|]
index|[]
decl_stmt|;
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
name|NameRecord
name|record
range|:
name|nameRecords
control|)
block|{
if|if
condition|(
name|shouldCopyNameRecord
argument_list|(
name|record
argument_list|)
condition|)
block|{
name|int
name|platform
init|=
name|record
operator|.
name|getPlatformId
argument_list|()
decl_stmt|;
name|int
name|encoding
init|=
name|record
operator|.
name|getPlatformEncodingId
argument_list|()
decl_stmt|;
name|String
name|charset
init|=
literal|"ISO-8859-1"
decl_stmt|;
if|if
condition|(
name|platform
operator|==
name|CmapTable
operator|.
name|PLATFORM_WINDOWS
operator|&&
name|encoding
operator|==
name|CmapTable
operator|.
name|ENCODING_WIN_UNICODE_BMP
condition|)
block|{
name|charset
operator|=
literal|"UTF-16BE"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|platform
operator|==
literal|2
condition|)
comment|// ISO [deprecated]=
block|{
if|if
condition|(
name|encoding
operator|==
literal|0
condition|)
comment|// 7-bit ASCII
block|{
name|charset
operator|=
literal|"US-ASCII"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|encoding
operator|==
literal|1
condition|)
comment|// ISO 10646=
block|{
comment|//not sure is this is correct??
name|charset
operator|=
literal|"UTF16-BE"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|encoding
operator|==
literal|2
condition|)
comment|// ISO 8859-1
block|{
name|charset
operator|=
literal|"ISO-8859-1"
expr_stmt|;
block|}
block|}
name|String
name|value
init|=
name|record
operator|.
name|getString
argument_list|()
decl_stmt|;
if|if
condition|(
name|record
operator|.
name|getNameId
argument_list|()
operator|==
literal|6
operator|&&
name|prefix
operator|!=
literal|null
condition|)
block|{
name|value
operator|=
name|prefix
operator|+
name|value
expr_stmt|;
block|}
name|names
index|[
name|j
index|]
operator|=
name|value
operator|.
name|getBytes
argument_list|(
name|charset
argument_list|)
expr_stmt|;
name|j
operator|++
expr_stmt|;
block|}
block|}
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|j
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|NameRecord
name|nr
range|:
name|nameRecords
control|)
block|{
if|if
condition|(
name|shouldCopyNameRecord
argument_list|(
name|nr
argument_list|)
condition|)
block|{
name|writeUint16
argument_list|(
name|out
argument_list|,
name|nr
operator|.
name|getPlatformId
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|out
argument_list|,
name|nr
operator|.
name|getPlatformEncodingId
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|out
argument_list|,
name|nr
operator|.
name|getLanguageId
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|out
argument_list|,
name|nr
operator|.
name|getNameId
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|out
argument_list|,
name|names
index|[
name|j
index|]
operator|.
name|length
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|out
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|names
index|[
name|j
index|]
operator|.
name|length
expr_stmt|;
name|j
operator|++
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRecords
condition|;
name|i
operator|++
control|)
block|{
name|out
operator|.
name|write
argument_list|(
name|names
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|bos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
specifier|private
name|byte
index|[]
name|buildMaxpTable
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
name|bos
argument_list|)
decl_stmt|;
name|MaximumProfileTable
name|p
init|=
name|ttf
operator|.
name|getMaximumProfile
argument_list|()
decl_stmt|;
name|writeFixed
argument_list|(
name|out
argument_list|,
literal|1.0
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|out
argument_list|,
name|glyphIds
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|out
argument_list|,
name|p
operator|.
name|getMaxPoints
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|out
argument_list|,
name|p
operator|.
name|getMaxContours
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|out
argument_list|,
name|p
operator|.
name|getMaxCompositePoints
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|out
argument_list|,
name|p
operator|.
name|getMaxCompositeContours
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|out
argument_list|,
name|p
operator|.
name|getMaxZones
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|out
argument_list|,
name|p
operator|.
name|getMaxTwilightPoints
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|out
argument_list|,
name|p
operator|.
name|getMaxStorage
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|out
argument_list|,
name|p
operator|.
name|getMaxFunctionDefs
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|out
argument_list|,
name|p
operator|.
name|getMaxInstructionDefs
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|out
argument_list|,
name|p
operator|.
name|getMaxStackElements
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|out
argument_list|,
name|p
operator|.
name|getMaxSizeOfInstructions
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|out
argument_list|,
name|p
operator|.
name|getMaxComponentElements
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|out
argument_list|,
name|p
operator|.
name|getMaxComponentDepth
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|bos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
specifier|private
name|byte
index|[]
name|buildOS2Table
parameter_list|()
throws|throws
name|IOException
block|{
name|OS2WindowsMetricsTable
name|os2
init|=
name|ttf
operator|.
name|getOS2Windows
argument_list|()
decl_stmt|;
if|if
condition|(
name|os2
operator|==
literal|null
operator|||
name|uniToGID
operator|.
name|isEmpty
argument_list|()
operator|||
name|keepTables
operator|!=
literal|null
operator|&&
operator|!
name|keepTables
operator|.
name|contains
argument_list|(
literal|"OS/2"
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
name|bos
argument_list|)
decl_stmt|;
name|writeUint16
argument_list|(
name|out
argument_list|,
name|os2
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|writeSInt16
argument_list|(
name|out
argument_list|,
name|os2
operator|.
name|getAverageCharWidth
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|out
argument_list|,
name|os2
operator|.
name|getWeightClass
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|out
argument_list|,
name|os2
operator|.
name|getWidthClass
argument_list|()
argument_list|)
expr_stmt|;
name|writeSInt16
argument_list|(
name|out
argument_list|,
name|os2
operator|.
name|getFsType
argument_list|()
argument_list|)
expr_stmt|;
name|writeSInt16
argument_list|(
name|out
argument_list|,
name|os2
operator|.
name|getSubscriptXSize
argument_list|()
argument_list|)
expr_stmt|;
name|writeSInt16
argument_list|(
name|out
argument_list|,
name|os2
operator|.
name|getSubscriptYSize
argument_list|()
argument_list|)
expr_stmt|;
name|writeSInt16
argument_list|(
name|out
argument_list|,
name|os2
operator|.
name|getSubscriptXOffset
argument_list|()
argument_list|)
expr_stmt|;
name|writeSInt16
argument_list|(
name|out
argument_list|,
name|os2
operator|.
name|getSubscriptYOffset
argument_list|()
argument_list|)
expr_stmt|;
name|writeSInt16
argument_list|(
name|out
argument_list|,
name|os2
operator|.
name|getSuperscriptXSize
argument_list|()
argument_list|)
expr_stmt|;
name|writeSInt16
argument_list|(
name|out
argument_list|,
name|os2
operator|.
name|getSuperscriptYSize
argument_list|()
argument_list|)
expr_stmt|;
name|writeSInt16
argument_list|(
name|out
argument_list|,
name|os2
operator|.
name|getSuperscriptXOffset
argument_list|()
argument_list|)
expr_stmt|;
name|writeSInt16
argument_list|(
name|out
argument_list|,
name|os2
operator|.
name|getSuperscriptYOffset
argument_list|()
argument_list|)
expr_stmt|;
name|writeSInt16
argument_list|(
name|out
argument_list|,
name|os2
operator|.
name|getStrikeoutSize
argument_list|()
argument_list|)
expr_stmt|;
name|writeSInt16
argument_list|(
name|out
argument_list|,
name|os2
operator|.
name|getStrikeoutPosition
argument_list|()
argument_list|)
expr_stmt|;
name|writeSInt16
argument_list|(
name|out
argument_list|,
operator|(
name|short
operator|)
name|os2
operator|.
name|getFamilyClass
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|os2
operator|.
name|getPanose
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint32
argument_list|(
name|out
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|writeUint32
argument_list|(
name|out
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|writeUint32
argument_list|(
name|out
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|writeUint32
argument_list|(
name|out
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|os2
operator|.
name|getAchVendId
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"US-ASCII"
argument_list|)
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|out
argument_list|,
name|os2
operator|.
name|getFsSelection
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|out
argument_list|,
name|uniToGID
operator|.
name|firstKey
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|out
argument_list|,
name|uniToGID
operator|.
name|lastKey
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|out
argument_list|,
name|os2
operator|.
name|getTypoAscender
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|out
argument_list|,
name|os2
operator|.
name|getTypoDescender
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|out
argument_list|,
name|os2
operator|.
name|getTypoLineGap
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|out
argument_list|,
name|os2
operator|.
name|getWinAscent
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint16
argument_list|(
name|out
argument_list|,
name|os2
operator|.
name|getWinDescent
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|bos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
comment|// never returns null
specifier|private
name|byte
index|[]
name|buildLocaTable
parameter_list|(
name|long
index|[]
name|newOffsets
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
name|bos
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|offset
range|:
name|newOffsets
control|)
block|{
name|writeUint32
argument_list|(
name|out
argument_list|,
name|offset
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|bos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
comment|/**      * Resolve compound glyph references.      */
specifier|private
name|void
name|addCompoundReferences
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|hasAddedCompoundReferences
condition|)
block|{
return|return;
block|}
name|hasAddedCompoundReferences
operator|=
literal|true
expr_stmt|;
name|boolean
name|hasNested
decl_stmt|;
do|do
block|{
name|GlyphTable
name|g
init|=
name|ttf
operator|.
name|getGlyph
argument_list|()
decl_stmt|;
name|long
index|[]
name|offsets
init|=
name|ttf
operator|.
name|getIndexToLocation
argument_list|()
operator|.
name|getOffsets
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
name|ttf
operator|.
name|getOriginalData
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|glyphIdsToAdd
init|=
literal|null
decl_stmt|;
try|try
block|{
name|long
name|isResult
init|=
name|is
operator|.
name|skip
argument_list|(
name|g
operator|.
name|getOffset
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|Long
operator|.
name|compare
argument_list|(
name|isResult
argument_list|,
name|g
operator|.
name|getOffset
argument_list|()
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Tried skipping "
operator|+
name|g
operator|.
name|getOffset
argument_list|()
operator|+
literal|" bytes but skipped only "
operator|+
name|isResult
operator|+
literal|" bytes"
argument_list|)
expr_stmt|;
block|}
name|long
name|lastOff
init|=
literal|0L
decl_stmt|;
for|for
control|(
name|Integer
name|glyphId
range|:
name|glyphIds
control|)
block|{
name|long
name|offset
init|=
name|offsets
index|[
name|glyphId
index|]
decl_stmt|;
name|long
name|len
init|=
name|offsets
index|[
name|glyphId
operator|+
literal|1
index|]
operator|-
name|offset
decl_stmt|;
name|isResult
operator|=
name|is
operator|.
name|skip
argument_list|(
name|offset
operator|-
name|lastOff
argument_list|)
expr_stmt|;
if|if
condition|(
name|Long
operator|.
name|compare
argument_list|(
name|isResult
argument_list|,
name|offset
operator|-
name|lastOff
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Tried skipping "
operator|+
operator|(
name|offset
operator|-
name|lastOff
operator|)
operator|+
literal|" bytes but skipped only "
operator|+
name|isResult
operator|+
literal|" bytes"
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|len
index|]
decl_stmt|;
name|isResult
operator|=
name|is
operator|.
name|read
argument_list|(
name|buf
argument_list|)
expr_stmt|;
if|if
condition|(
name|Long
operator|.
name|compare
argument_list|(
name|isResult
argument_list|,
name|len
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Tried reading "
operator|+
name|len
operator|+
literal|" bytes but only "
operator|+
name|isResult
operator|+
literal|" bytes read"
argument_list|)
expr_stmt|;
block|}
comment|// rewrite glyphIds for compound glyphs
if|if
condition|(
name|buf
operator|.
name|length
operator|>=
literal|2
operator|&&
name|buf
index|[
literal|0
index|]
operator|==
operator|-
literal|1
operator|&&
name|buf
index|[
literal|1
index|]
operator|==
operator|-
literal|1
condition|)
block|{
name|int
name|off
init|=
literal|2
operator|*
literal|5
decl_stmt|;
name|int
name|flags
decl_stmt|;
do|do
block|{
name|flags
operator|=
operator|(
name|buf
index|[
name|off
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator||
name|buf
index|[
name|off
operator|+
literal|1
index|]
operator|&
literal|0xff
expr_stmt|;
name|off
operator|+=
literal|2
expr_stmt|;
name|int
name|ogid
init|=
operator|(
name|buf
index|[
name|off
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator||
name|buf
index|[
name|off
operator|+
literal|1
index|]
operator|&
literal|0xff
decl_stmt|;
if|if
condition|(
operator|!
name|glyphIds
operator|.
name|contains
argument_list|(
name|ogid
argument_list|)
condition|)
block|{
if|if
condition|(
name|glyphIdsToAdd
operator|==
literal|null
condition|)
block|{
name|glyphIdsToAdd
operator|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|glyphIdsToAdd
operator|.
name|add
argument_list|(
name|ogid
argument_list|)
expr_stmt|;
block|}
name|off
operator|+=
literal|2
expr_stmt|;
comment|// ARG_1_AND_2_ARE_WORDS
if|if
condition|(
operator|(
name|flags
operator|&
literal|1
operator|<<
literal|0
operator|)
operator|!=
literal|0
condition|)
block|{
name|off
operator|+=
literal|2
operator|*
literal|2
expr_stmt|;
block|}
else|else
block|{
name|off
operator|+=
literal|2
expr_stmt|;
block|}
comment|// WE_HAVE_A_TWO_BY_TWO
if|if
condition|(
operator|(
name|flags
operator|&
literal|1
operator|<<
literal|7
operator|)
operator|!=
literal|0
condition|)
block|{
name|off
operator|+=
literal|2
operator|*
literal|4
expr_stmt|;
block|}
comment|// WE_HAVE_AN_X_AND_Y_SCALE
elseif|else
if|if
condition|(
operator|(
name|flags
operator|&
literal|1
operator|<<
literal|6
operator|)
operator|!=
literal|0
condition|)
block|{
name|off
operator|+=
literal|2
operator|*
literal|2
expr_stmt|;
block|}
comment|// WE_HAVE_A_SCALE
elseif|else
if|if
condition|(
operator|(
name|flags
operator|&
literal|1
operator|<<
literal|3
operator|)
operator|!=
literal|0
condition|)
block|{
name|off
operator|+=
literal|2
expr_stmt|;
block|}
block|}
do|while
condition|(
operator|(
name|flags
operator|&
literal|1
operator|<<
literal|5
operator|)
operator|!=
literal|0
condition|)
do|;
comment|// MORE_COMPONENTS
block|}
name|lastOff
operator|=
name|offsets
index|[
name|glyphId
operator|+
literal|1
index|]
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|glyphIdsToAdd
operator|!=
literal|null
condition|)
block|{
name|glyphIds
operator|.
name|addAll
argument_list|(
name|glyphIdsToAdd
argument_list|)
expr_stmt|;
block|}
name|hasNested
operator|=
name|glyphIdsToAdd
operator|!=
literal|null
expr_stmt|;
block|}
do|while
condition|(
name|hasNested
condition|)
do|;
block|}
comment|// never returns null
specifier|private
name|byte
index|[]
name|buildGlyfTable
parameter_list|(
name|long
index|[]
name|newOffsets
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|GlyphTable
name|g
init|=
name|ttf
operator|.
name|getGlyph
argument_list|()
decl_stmt|;
name|long
index|[]
name|offsets
init|=
name|ttf
operator|.
name|getIndexToLocation
argument_list|()
operator|.
name|getOffsets
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
name|ttf
operator|.
name|getOriginalData
argument_list|()
init|)
block|{
name|long
name|isResult
init|=
name|is
operator|.
name|skip
argument_list|(
name|g
operator|.
name|getOffset
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|Long
operator|.
name|compare
argument_list|(
name|isResult
argument_list|,
name|g
operator|.
name|getOffset
argument_list|()
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Tried skipping "
operator|+
name|g
operator|.
name|getOffset
argument_list|()
operator|+
literal|" bytes but skipped only "
operator|+
name|isResult
operator|+
literal|" bytes"
argument_list|)
expr_stmt|;
block|}
name|long
name|prevEnd
init|=
literal|0
decl_stmt|;
comment|// previously read glyph offset
name|long
name|newOffset
init|=
literal|0
decl_stmt|;
comment|// new offset for the glyph in the subset font
name|int
name|newGid
init|=
literal|0
decl_stmt|;
comment|// new GID in subset font
comment|// for each glyph in the subset
for|for
control|(
name|Integer
name|gid
range|:
name|glyphIds
control|)
block|{
name|long
name|offset
init|=
name|offsets
index|[
name|gid
index|]
decl_stmt|;
name|long
name|length
init|=
name|offsets
index|[
name|gid
operator|+
literal|1
index|]
operator|-
name|offset
decl_stmt|;
name|newOffsets
index|[
name|newGid
operator|++
index|]
operator|=
name|newOffset
expr_stmt|;
name|isResult
operator|=
name|is
operator|.
name|skip
argument_list|(
name|offset
operator|-
name|prevEnd
argument_list|)
expr_stmt|;
if|if
condition|(
name|Long
operator|.
name|compare
argument_list|(
name|isResult
argument_list|,
name|offset
operator|-
name|prevEnd
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Tried skipping "
operator|+
operator|(
name|offset
operator|-
name|prevEnd
operator|)
operator|+
literal|" bytes but skipped only "
operator|+
name|isResult
operator|+
literal|" bytes"
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|length
index|]
decl_stmt|;
name|isResult
operator|=
name|is
operator|.
name|read
argument_list|(
name|buf
argument_list|)
expr_stmt|;
if|if
condition|(
name|Long
operator|.
name|compare
argument_list|(
name|isResult
argument_list|,
name|length
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Tried reading "
operator|+
name|length
operator|+
literal|" bytes but only "
operator|+
name|isResult
operator|+
literal|" bytes read"
argument_list|)
expr_stmt|;
block|}
comment|// detect glyph type
if|if
condition|(
name|buf
operator|.
name|length
operator|>=
literal|2
operator|&&
name|buf
index|[
literal|0
index|]
operator|==
operator|-
literal|1
operator|&&
name|buf
index|[
literal|1
index|]
operator|==
operator|-
literal|1
condition|)
block|{
comment|// compound glyph
name|int
name|off
init|=
literal|2
operator|*
literal|5
decl_stmt|;
name|int
name|flags
decl_stmt|;
do|do
block|{
comment|// flags
name|flags
operator|=
operator|(
name|buf
index|[
name|off
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator||
name|buf
index|[
name|off
operator|+
literal|1
index|]
operator|&
literal|0xff
expr_stmt|;
name|off
operator|+=
literal|2
expr_stmt|;
comment|// glyphIndex
name|int
name|componentGid
init|=
operator|(
name|buf
index|[
name|off
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator||
name|buf
index|[
name|off
operator|+
literal|1
index|]
operator|&
literal|0xff
decl_stmt|;
if|if
condition|(
operator|!
name|glyphIds
operator|.
name|contains
argument_list|(
name|componentGid
argument_list|)
condition|)
block|{
name|glyphIds
operator|.
name|add
argument_list|(
name|componentGid
argument_list|)
expr_stmt|;
block|}
name|int
name|newComponentGid
init|=
name|getNewGlyphId
argument_list|(
name|componentGid
argument_list|)
decl_stmt|;
name|buf
index|[
name|off
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|newComponentGid
operator|>>>
literal|8
argument_list|)
expr_stmt|;
name|buf
index|[
name|off
operator|+
literal|1
index|]
operator|=
operator|(
name|byte
operator|)
name|newComponentGid
expr_stmt|;
name|off
operator|+=
literal|2
expr_stmt|;
comment|// ARG_1_AND_2_ARE_WORDS
if|if
condition|(
operator|(
name|flags
operator|&
literal|1
operator|<<
literal|0
operator|)
operator|!=
literal|0
condition|)
block|{
name|off
operator|+=
literal|2
operator|*
literal|2
expr_stmt|;
block|}
else|else
block|{
name|off
operator|+=
literal|2
expr_stmt|;
block|}
comment|// WE_HAVE_A_TWO_BY_TWO
if|if
condition|(
operator|(
name|flags
operator|&
literal|1
operator|<<
literal|7
operator|)
operator|!=
literal|0
condition|)
block|{
name|off
operator|+=
literal|2
operator|*
literal|4
expr_stmt|;
block|}
comment|// WE_HAVE_AN_X_AND_Y_SCALE
elseif|else
if|if
condition|(
operator|(
name|flags
operator|&
literal|1
operator|<<
literal|6
operator|)
operator|!=
literal|0
condition|)
block|{
name|off
operator|+=
literal|2
operator|*
literal|2
expr_stmt|;
block|}
comment|// WE_HAVE_A_SCALE
elseif|else
if|if
condition|(
operator|(
name|flags
operator|&
literal|1
operator|<<
literal|3
operator|)
operator|!=
literal|0
condition|)
block|{
name|off
operator|+=
literal|2
expr_stmt|;
block|}
block|}
do|while
condition|(
operator|(
name|flags
operator|&
literal|1
operator|<<
literal|5
operator|)
operator|!=
literal|0
condition|)
do|;
comment|// MORE_COMPONENTS
comment|// WE_HAVE_INSTRUCTIONS
if|if
condition|(
operator|(
name|flags
operator|&
literal|0x0100
operator|)
operator|==
literal|0x0100
condition|)
block|{
comment|// USHORT numInstr
name|int
name|numInstr
init|=
operator|(
name|buf
index|[
name|off
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator||
name|buf
index|[
name|off
operator|+
literal|1
index|]
operator|&
literal|0xff
decl_stmt|;
name|off
operator|+=
literal|2
expr_stmt|;
comment|// BYTE instr[numInstr]
name|off
operator|+=
name|numInstr
expr_stmt|;
block|}
comment|// write the compound glyph
name|bos
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|off
argument_list|)
expr_stmt|;
comment|// offset to start next glyph
name|newOffset
operator|+=
name|off
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|buf
operator|.
name|length
operator|>
literal|0
condition|)
block|{
comment|// copy the entire glyph
name|bos
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// offset to start next glyph
name|newOffset
operator|+=
name|buf
operator|.
name|length
expr_stmt|;
block|}
comment|// 4-byte alignment
if|if
condition|(
name|newOffset
operator|%
literal|4
operator|!=
literal|0
condition|)
block|{
name|int
name|len
init|=
literal|4
operator|-
call|(
name|int
call|)
argument_list|(
name|newOffset
operator|%
literal|4
argument_list|)
decl_stmt|;
name|bos
operator|.
name|write
argument_list|(
name|PAD_BUF
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|newOffset
operator|+=
name|len
expr_stmt|;
block|}
name|prevEnd
operator|=
name|offset
operator|+
name|length
expr_stmt|;
block|}
name|newOffsets
index|[
name|newGid
operator|++
index|]
operator|=
name|newOffset
expr_stmt|;
block|}
return|return
name|bos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
specifier|private
name|int
name|getNewGlyphId
parameter_list|(
name|Integer
name|oldGid
parameter_list|)
block|{
return|return
name|glyphIds
operator|.
name|headSet
argument_list|(
name|oldGid
argument_list|)
operator|.
name|size
argument_list|()
return|;
block|}
specifier|private
name|byte
index|[]
name|buildCmapTable
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|ttf
operator|.
name|getCmap
argument_list|()
operator|==
literal|null
operator|||
name|uniToGID
operator|.
name|isEmpty
argument_list|()
operator|||
name|keepTables
operator|!=
literal|null
operator|&&
operator|!
name|keepTables
operator|.
name|contains
argument_list|(
literal|"cmap"
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
name|bos
argument_list|)
decl_stmt|;
comment|// cmap header
name|writeUint16
argument_list|(
name|out
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// version
name|writeUint16
argument_list|(
name|out
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// numberSubtables
comment|// encoding record
name|writeUint16
argument_list|(
name|out
argument_list|,
name|CmapTable
operator|.
name|PLATFORM_WINDOWS
argument_list|)
expr_stmt|;
comment|// platformID
name|writeUint16
argument_list|(
name|out
argument_list|,
name|CmapTable
operator|.
name|ENCODING_WIN_UNICODE_BMP
argument_list|)
expr_stmt|;
comment|// platformSpecificID
name|writeUint32
argument_list|(
name|out
argument_list|,
literal|4
operator|*
literal|2
operator|+
literal|4
argument_list|)
expr_stmt|;
comment|// offset
comment|// build Format 4 subtable (Unicode BMP)
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|it
init|=
name|uniToGID
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|lastChar
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|prevChar
init|=
name|lastChar
decl_stmt|;
name|int
name|lastGid
init|=
name|getNewGlyphId
argument_list|(
name|lastChar
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
comment|// +1 because .notdef is missing in uniToGID
name|int
index|[]
name|startCode
init|=
operator|new
name|int
index|[
name|uniToGID
operator|.
name|size
argument_list|()
operator|+
literal|1
index|]
decl_stmt|;
name|int
index|[]
name|endCode
init|=
operator|new
name|int
index|[
name|uniToGID
operator|.
name|size
argument_list|()
operator|+
literal|1
index|]
decl_stmt|;
name|int
index|[]
name|idDelta
init|=
operator|new
name|int
index|[
name|uniToGID
operator|.
name|size
argument_list|()
operator|+
literal|1
index|]
decl_stmt|;
name|int
name|segCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|curChar2Gid
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|curGid
init|=
name|getNewGlyphId
argument_list|(
name|curChar2Gid
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
comment|// todo: need format Format 12 for non-BMP
if|if
condition|(
name|curChar2Gid
operator|.
name|getKey
argument_list|()
operator|>
literal|0xFFFF
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"non-BMP Unicode character"
argument_list|)
throw|;
block|}
if|if
condition|(
name|curChar2Gid
operator|.
name|getKey
argument_list|()
operator|!=
name|prevChar
operator|.
name|getKey
argument_list|()
operator|+
literal|1
operator|||
name|curGid
operator|-
name|lastGid
operator|!=
name|curChar2Gid
operator|.
name|getKey
argument_list|()
operator|-
name|lastChar
operator|.
name|getKey
argument_list|()
condition|)
block|{
if|if
condition|(
name|lastGid
operator|!=
literal|0
condition|)
block|{
comment|// don't emit ranges, which map to GID 0, the
comment|// undef glyph is emitted a the very last segment
name|startCode
index|[
name|segCount
index|]
operator|=
name|lastChar
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|endCode
index|[
name|segCount
index|]
operator|=
name|prevChar
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|idDelta
index|[
name|segCount
index|]
operator|=
name|lastGid
operator|-
name|lastChar
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|segCount
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|lastChar
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|prevChar
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
comment|// shorten ranges which start with GID 0 by one
name|startCode
index|[
name|segCount
index|]
operator|=
name|lastChar
operator|.
name|getKey
argument_list|()
operator|+
literal|1
expr_stmt|;
name|endCode
index|[
name|segCount
index|]
operator|=
name|prevChar
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|idDelta
index|[
name|segCount
index|]
operator|=
name|lastGid
operator|-
name|lastChar
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|segCount
operator|++
expr_stmt|;
block|}
name|lastGid
operator|=
name|curGid
expr_stmt|;
name|lastChar
operator|=
name|curChar2Gid
expr_stmt|;
block|}
name|prevChar
operator|=
name|curChar2Gid
expr_stmt|;
block|}
comment|// trailing segment
name|startCode
index|[
name|segCount
index|]
operator|=
name|lastChar
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|endCode
index|[
name|segCount
index|]
operator|=
name|prevChar
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|idDelta
index|[
name|segCount
index|]
operator|=
name|lastGid
operator|-
name|lastChar
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|segCount
operator|++
expr_stmt|;
comment|// GID 0
name|startCode
index|[
name|segCount
index|]
operator|=
literal|0xffff
expr_stmt|;
name|endCode
index|[
name|segCount
index|]
operator|=
literal|0xffff
expr_stmt|;
name|idDelta
index|[
name|segCount
index|]
operator|=
literal|1
expr_stmt|;
name|segCount
operator|++
expr_stmt|;
comment|// write format 4 subtable
name|int
name|searchRange
init|=
literal|2
operator|*
operator|(
name|int
operator|)
name|Math
operator|.
name|pow
argument_list|(
literal|2
argument_list|,
name|log2
argument_list|(
name|segCount
argument_list|)
argument_list|)
decl_stmt|;
name|writeUint16
argument_list|(
name|out
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// format
name|writeUint16
argument_list|(
name|out
argument_list|,
literal|8
operator|*
literal|2
operator|+
name|segCount
operator|*
literal|4
operator|*
literal|2
argument_list|)
expr_stmt|;
comment|// length
name|writeUint16
argument_list|(
name|out
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// language
name|writeUint16
argument_list|(
name|out
argument_list|,
name|segCount
operator|*
literal|2
argument_list|)
expr_stmt|;
comment|// segCountX2
name|writeUint16
argument_list|(
name|out
argument_list|,
name|searchRange
argument_list|)
expr_stmt|;
comment|// searchRange
name|writeUint16
argument_list|(
name|out
argument_list|,
name|log2
argument_list|(
name|searchRange
operator|/
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// entrySelector
name|writeUint16
argument_list|(
name|out
argument_list|,
literal|2
operator|*
name|segCount
operator|-
name|searchRange
argument_list|)
expr_stmt|;
comment|// rangeShift
comment|// endCode[segCount]
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|segCount
condition|;
name|i
operator|++
control|)
block|{
name|writeUint16
argument_list|(
name|out
argument_list|,
name|endCode
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// reservedPad
name|writeUint16
argument_list|(
name|out
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// startCode[segCount]
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|segCount
condition|;
name|i
operator|++
control|)
block|{
name|writeUint16
argument_list|(
name|out
argument_list|,
name|startCode
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// idDelta[segCount]
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|segCount
condition|;
name|i
operator|++
control|)
block|{
name|writeUint16
argument_list|(
name|out
argument_list|,
name|idDelta
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|segCount
condition|;
name|i
operator|++
control|)
block|{
name|writeUint16
argument_list|(
name|out
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|bos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
specifier|private
name|byte
index|[]
name|buildPostTable
parameter_list|()
throws|throws
name|IOException
block|{
name|PostScriptTable
name|post
init|=
name|ttf
operator|.
name|getPostScript
argument_list|()
decl_stmt|;
if|if
condition|(
name|post
operator|==
literal|null
operator|||
name|keepTables
operator|!=
literal|null
operator|&&
operator|!
name|keepTables
operator|.
name|contains
argument_list|(
literal|"post"
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
name|bos
argument_list|)
decl_stmt|;
name|writeFixed
argument_list|(
name|out
argument_list|,
literal|2.0
argument_list|)
expr_stmt|;
comment|// version
name|writeFixed
argument_list|(
name|out
argument_list|,
name|post
operator|.
name|getItalicAngle
argument_list|()
argument_list|)
expr_stmt|;
name|writeSInt16
argument_list|(
name|out
argument_list|,
name|post
operator|.
name|getUnderlinePosition
argument_list|()
argument_list|)
expr_stmt|;
name|writeSInt16
argument_list|(
name|out
argument_list|,
name|post
operator|.
name|getUnderlineThickness
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint32
argument_list|(
name|out
argument_list|,
name|post
operator|.
name|getIsFixedPitch
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint32
argument_list|(
name|out
argument_list|,
name|post
operator|.
name|getMinMemType42
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint32
argument_list|(
name|out
argument_list|,
name|post
operator|.
name|getMaxMemType42
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint32
argument_list|(
name|out
argument_list|,
name|post
operator|.
name|getMinMemType1
argument_list|()
argument_list|)
expr_stmt|;
name|writeUint32
argument_list|(
name|out
argument_list|,
name|post
operator|.
name|getMaxMemType1
argument_list|()
argument_list|)
expr_stmt|;
comment|// version 2.0
comment|// numberOfGlyphs
name|writeUint16
argument_list|(
name|out
argument_list|,
name|glyphIds
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// glyphNameIndex[numGlyphs]
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|names
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|gid
range|:
name|glyphIds
control|)
block|{
name|String
name|name
init|=
name|post
operator|.
name|getName
argument_list|(
name|gid
argument_list|)
decl_stmt|;
name|Integer
name|macId
init|=
name|WGL4Names
operator|.
name|MAC_GLYPH_NAMES_INDICES
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|macId
operator|!=
literal|null
condition|)
block|{
comment|// the name is implicit, as it's from MacRoman
name|writeUint16
argument_list|(
name|out
argument_list|,
name|macId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// the name will be written explicitly
name|Integer
name|ordinal
init|=
name|names
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|ordinal
operator|==
literal|null
condition|)
block|{
name|ordinal
operator|=
name|names
operator|.
name|size
argument_list|()
expr_stmt|;
name|names
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|ordinal
argument_list|)
expr_stmt|;
block|}
name|writeUint16
argument_list|(
name|out
argument_list|,
literal|258
operator|+
name|ordinal
argument_list|)
expr_stmt|;
block|}
block|}
comment|// names[numberNewGlyphs]
for|for
control|(
name|String
name|name
range|:
name|names
operator|.
name|keySet
argument_list|()
control|)
block|{
name|byte
index|[]
name|buf
init|=
name|name
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"US-ASCII"
argument_list|)
argument_list|)
decl_stmt|;
name|writeUint8
argument_list|(
name|out
argument_list|,
name|buf
operator|.
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|bos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
specifier|private
name|byte
index|[]
name|buildHmtxTable
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|HorizontalHeaderTable
name|h
init|=
name|ttf
operator|.
name|getHorizontalHeader
argument_list|()
decl_stmt|;
name|HorizontalMetricsTable
name|hm
init|=
name|ttf
operator|.
name|getHorizontalMetrics
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
name|ttf
operator|.
name|getOriginalData
argument_list|()
decl_stmt|;
comment|// more info: https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6hmtx.html
name|int
name|lastgid
init|=
name|h
operator|.
name|getNumberOfHMetrics
argument_list|()
operator|-
literal|1
decl_stmt|;
comment|// true if lastgid is not in the set: we'll need its width (but not its left side bearing) later
name|boolean
name|needLastGidWidth
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|glyphIds
operator|.
name|last
argument_list|()
operator|>
name|lastgid
operator|&&
operator|!
name|glyphIds
operator|.
name|contains
argument_list|(
name|lastgid
argument_list|)
condition|)
block|{
name|needLastGidWidth
operator|=
literal|true
expr_stmt|;
block|}
try|try
block|{
name|long
name|isResult
init|=
name|is
operator|.
name|skip
argument_list|(
name|hm
operator|.
name|getOffset
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|Long
operator|.
name|compare
argument_list|(
name|isResult
argument_list|,
name|hm
operator|.
name|getOffset
argument_list|()
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Tried skipping "
operator|+
name|hm
operator|.
name|getOffset
argument_list|()
operator|+
literal|" bytes but only "
operator|+
name|isResult
operator|+
literal|" bytes skipped"
argument_list|)
expr_stmt|;
block|}
name|long
name|lastOffset
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Integer
name|glyphId
range|:
name|glyphIds
control|)
block|{
comment|// offset in original file
name|long
name|offset
decl_stmt|;
if|if
condition|(
name|glyphId
operator|<=
name|lastgid
condition|)
block|{
comment|// copy width and lsb
name|offset
operator|=
name|glyphId
operator|*
literal|4
expr_stmt|;
name|lastOffset
operator|=
name|copyBytes
argument_list|(
name|is
argument_list|,
name|bos
argument_list|,
name|offset
argument_list|,
name|lastOffset
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|needLastGidWidth
condition|)
block|{
comment|// one time only: copy width from lastgid, whose width applies
comment|// to all later glyphs
name|needLastGidWidth
operator|=
literal|false
expr_stmt|;
name|offset
operator|=
name|lastgid
operator|*
literal|4
expr_stmt|;
name|lastOffset
operator|=
name|copyBytes
argument_list|(
name|is
argument_list|,
name|bos
argument_list|,
name|offset
argument_list|,
name|lastOffset
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// then go on with lsb from actual glyph (lsb are individual even in monotype fonts)
block|}
comment|// copy lsb only, as we are beyond numOfHMetrics
name|offset
operator|=
name|h
operator|.
name|getNumberOfHMetrics
argument_list|()
operator|*
literal|4
operator|+
operator|(
name|glyphId
operator|-
name|h
operator|.
name|getNumberOfHMetrics
argument_list|()
operator|)
operator|*
literal|2
expr_stmt|;
name|lastOffset
operator|=
name|copyBytes
argument_list|(
name|is
argument_list|,
name|bos
argument_list|,
name|offset
argument_list|,
name|lastOffset
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|bos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
finally|finally
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|long
name|copyBytes
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|OutputStream
name|os
parameter_list|,
name|long
name|newOffset
parameter_list|,
name|long
name|lastOffset
parameter_list|,
name|int
name|count
parameter_list|)
throws|throws
name|IOException
block|{
comment|// skip over from last original offset
name|long
name|nskip
init|=
name|newOffset
operator|-
name|lastOffset
decl_stmt|;
if|if
condition|(
name|nskip
operator|!=
name|is
operator|.
name|skip
argument_list|(
name|nskip
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|(
literal|"Unexpected EOF exception parsing glyphId of hmtx table."
argument_list|)
throw|;
block|}
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|count
index|]
decl_stmt|;
if|if
condition|(
name|count
operator|!=
name|is
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|(
literal|"Unexpected EOF exception parsing glyphId of hmtx table."
argument_list|)
throw|;
block|}
name|os
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
return|return
name|newOffset
operator|+
name|count
return|;
block|}
comment|/**      * Write the subfont to the given output stream.      *      * @param os the stream used for writing. It will be closed by this method.      * @throws IOException if something went wrong.      * @throws IllegalStateException if the subset is empty.      */
specifier|public
name|void
name|writeToStream
parameter_list|(
name|OutputStream
name|os
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|glyphIds
operator|.
name|isEmpty
argument_list|()
operator|||
name|uniToGID
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"font subset is empty"
argument_list|)
expr_stmt|;
block|}
name|addCompoundReferences
argument_list|()
expr_stmt|;
try|try
init|(
name|DataOutputStream
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
name|os
argument_list|)
init|)
block|{
name|long
index|[]
name|newLoca
init|=
operator|new
name|long
index|[
name|glyphIds
operator|.
name|size
argument_list|()
operator|+
literal|1
index|]
decl_stmt|;
comment|// generate tables in dependency order
name|byte
index|[]
name|head
init|=
name|buildHeadTable
argument_list|()
decl_stmt|;
name|byte
index|[]
name|hhea
init|=
name|buildHheaTable
argument_list|()
decl_stmt|;
name|byte
index|[]
name|maxp
init|=
name|buildMaxpTable
argument_list|()
decl_stmt|;
name|byte
index|[]
name|name
init|=
name|buildNameTable
argument_list|()
decl_stmt|;
name|byte
index|[]
name|os2
init|=
name|buildOS2Table
argument_list|()
decl_stmt|;
name|byte
index|[]
name|glyf
init|=
name|buildGlyfTable
argument_list|(
name|newLoca
argument_list|)
decl_stmt|;
name|byte
index|[]
name|loca
init|=
name|buildLocaTable
argument_list|(
name|newLoca
argument_list|)
decl_stmt|;
name|byte
index|[]
name|cmap
init|=
name|buildCmapTable
argument_list|()
decl_stmt|;
name|byte
index|[]
name|hmtx
init|=
name|buildHmtxTable
argument_list|()
decl_stmt|;
name|byte
index|[]
name|post
init|=
name|buildPostTable
argument_list|()
decl_stmt|;
comment|// save to TTF in optimized order
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|tables
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|os2
operator|!=
literal|null
condition|)
block|{
name|tables
operator|.
name|put
argument_list|(
literal|"OS/2"
argument_list|,
name|os2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cmap
operator|!=
literal|null
condition|)
block|{
name|tables
operator|.
name|put
argument_list|(
literal|"cmap"
argument_list|,
name|cmap
argument_list|)
expr_stmt|;
block|}
name|tables
operator|.
name|put
argument_list|(
literal|"glyf"
argument_list|,
name|glyf
argument_list|)
expr_stmt|;
name|tables
operator|.
name|put
argument_list|(
literal|"head"
argument_list|,
name|head
argument_list|)
expr_stmt|;
name|tables
operator|.
name|put
argument_list|(
literal|"hhea"
argument_list|,
name|hhea
argument_list|)
expr_stmt|;
name|tables
operator|.
name|put
argument_list|(
literal|"hmtx"
argument_list|,
name|hmtx
argument_list|)
expr_stmt|;
name|tables
operator|.
name|put
argument_list|(
literal|"loca"
argument_list|,
name|loca
argument_list|)
expr_stmt|;
name|tables
operator|.
name|put
argument_list|(
literal|"maxp"
argument_list|,
name|maxp
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|tables
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|post
operator|!=
literal|null
condition|)
block|{
name|tables
operator|.
name|put
argument_list|(
literal|"post"
argument_list|,
name|post
argument_list|)
expr_stmt|;
block|}
comment|// copy all other tables
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|TTFTable
argument_list|>
name|entry
range|:
name|ttf
operator|.
name|getTableMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|tag
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|TTFTable
name|table
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|tables
operator|.
name|containsKey
argument_list|(
name|tag
argument_list|)
operator|&&
operator|(
name|keepTables
operator|==
literal|null
operator|||
name|keepTables
operator|.
name|contains
argument_list|(
name|tag
argument_list|)
operator|)
condition|)
block|{
name|tables
operator|.
name|put
argument_list|(
name|tag
argument_list|,
name|ttf
operator|.
name|getTableBytes
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// calculate checksum
name|long
name|checksum
init|=
name|writeFileHeader
argument_list|(
name|out
argument_list|,
name|tables
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|offset
init|=
literal|12L
operator|+
literal|16L
operator|*
name|tables
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
range|:
name|tables
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|checksum
operator|+=
name|writeTableHeader
argument_list|(
name|out
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|offset
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|offset
operator|+=
operator|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|length
operator|+
literal|3
operator|)
operator|/
literal|4
operator|*
literal|4
expr_stmt|;
block|}
name|checksum
operator|=
literal|0xB1B0AFBAL
operator|-
operator|(
name|checksum
operator|&
literal|0xffffffffL
operator|)
expr_stmt|;
comment|// update checksumAdjustment in 'head' table
name|head
index|[
literal|8
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|checksum
operator|>>>
literal|24
argument_list|)
expr_stmt|;
name|head
index|[
literal|9
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|checksum
operator|>>>
literal|16
argument_list|)
expr_stmt|;
name|head
index|[
literal|10
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|checksum
operator|>>>
literal|8
argument_list|)
expr_stmt|;
name|head
index|[
literal|11
index|]
operator|=
operator|(
name|byte
operator|)
name|checksum
expr_stmt|;
for|for
control|(
name|byte
index|[]
name|bytes
range|:
name|tables
operator|.
name|values
argument_list|()
control|)
block|{
name|writeTableBody
argument_list|(
name|out
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|writeFixed
parameter_list|(
name|DataOutputStream
name|out
parameter_list|,
name|double
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|double
name|ip
init|=
name|Math
operator|.
name|floor
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|double
name|fp
init|=
operator|(
name|f
operator|-
name|ip
operator|)
operator|*
literal|65536.0
decl_stmt|;
name|out
operator|.
name|writeShort
argument_list|(
operator|(
name|int
operator|)
name|ip
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeShort
argument_list|(
operator|(
name|int
operator|)
name|fp
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeUint32
parameter_list|(
name|DataOutputStream
name|out
parameter_list|,
name|long
name|l
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeInt
argument_list|(
operator|(
name|int
operator|)
name|l
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeUint16
parameter_list|(
name|DataOutputStream
name|out
parameter_list|,
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeShort
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeSInt16
parameter_list|(
name|DataOutputStream
name|out
parameter_list|,
name|short
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeShort
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeUint8
parameter_list|(
name|DataOutputStream
name|out
parameter_list|,
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeByte
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeLongDateTime
parameter_list|(
name|DataOutputStream
name|out
parameter_list|,
name|Calendar
name|calendar
parameter_list|)
throws|throws
name|IOException
block|{
comment|// inverse operation of TTFDataStream.readInternationalDate()
name|Calendar
name|cal
init|=
name|GregorianCalendar
operator|.
name|getInstance
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
decl_stmt|;
name|cal
operator|.
name|set
argument_list|(
literal|1904
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|long
name|millisFor1904
init|=
name|cal
operator|.
name|getTimeInMillis
argument_list|()
decl_stmt|;
name|long
name|secondsSince1904
init|=
operator|(
name|calendar
operator|.
name|getTimeInMillis
argument_list|()
operator|-
name|millisFor1904
operator|)
operator|/
literal|1000L
decl_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|secondsSince1904
argument_list|)
expr_stmt|;
block|}
specifier|private
name|long
name|toUInt32
parameter_list|(
name|int
name|high
parameter_list|,
name|int
name|low
parameter_list|)
block|{
return|return
operator|(
name|high
operator|&
literal|0xffffL
operator|)
operator|<<
literal|16
operator||
name|low
operator|&
literal|0xffffL
return|;
block|}
specifier|private
name|long
name|toUInt32
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
return|return
operator|(
name|bytes
index|[
literal|0
index|]
operator|&
literal|0xffL
operator|)
operator|<<
literal|24
operator||
operator|(
name|bytes
index|[
literal|1
index|]
operator|&
literal|0xffL
operator|)
operator|<<
literal|16
operator||
operator|(
name|bytes
index|[
literal|2
index|]
operator|&
literal|0xffL
operator|)
operator|<<
literal|8
operator||
name|bytes
index|[
literal|3
index|]
operator|&
literal|0xffL
return|;
block|}
specifier|private
name|int
name|log2
parameter_list|(
name|int
name|num
parameter_list|)
block|{
return|return
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
name|Math
operator|.
name|log
argument_list|(
name|num
argument_list|)
operator|/
name|Math
operator|.
name|log
argument_list|(
literal|2
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|void
name|addGlyphIds
parameter_list|(
name|Set
argument_list|<
name|Integer
argument_list|>
name|allGlyphIds
parameter_list|)
block|{
name|glyphIds
operator|.
name|addAll
argument_list|(
name|allGlyphIds
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

