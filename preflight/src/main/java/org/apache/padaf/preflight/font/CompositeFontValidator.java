begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|font
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cff
operator|.
name|CFFFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cff
operator|.
name|CFFParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cmap
operator|.
name|CMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cmap
operator|.
name|CMapParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|ttf
operator|.
name|CIDFontType2Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|ttf
operator|.
name|TrueTypeFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|DocumentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationResult
operator|.
name|ValidationError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|utils
operator|.
name|COSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDFontDescriptorDictionary
import|;
end_import

begin_class
specifier|public
class|class
name|CompositeFontValidator
extends|extends
name|AbstractFontValidator
block|{
specifier|protected
name|String
name|basefont
decl_stmt|;
specifier|protected
name|COSBase
name|descendantFonts
decl_stmt|;
specifier|protected
name|COSDictionary
name|cidFont
decl_stmt|;
specifier|protected
name|COSBase
name|encoding
decl_stmt|;
specifier|protected
name|COSStream
name|cmap
decl_stmt|;
specifier|protected
name|COSBase
name|toUnicode
decl_stmt|;
specifier|protected
name|CMap
name|cidToGidMap
init|=
literal|null
decl_stmt|;
specifier|protected
name|boolean
name|isIdentityCMap
init|=
literal|false
decl_stmt|;
specifier|public
name|CompositeFontValidator
parameter_list|(
name|DocumentHandler
name|handler
parameter_list|,
name|COSObject
name|obj
parameter_list|)
throws|throws
name|ValidationException
block|{
name|super
argument_list|(
name|handler
argument_list|,
name|obj
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * This methods extracts from the Font dictionary all mandatory fields. If a 	 * mandatory field is missing, the list of ValidationError in the 	 * FontContainer is updated. On error, the method returns false. 	 *  	 * @return 	 */
specifier|protected
name|boolean
name|checkMandatoryFields
parameter_list|()
block|{
name|String
name|type
init|=
name|fDictionary
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|DICTIONARY_KEY_TYPE
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|subtype
init|=
name|fDictionary
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|DICTIONARY_KEY_SUBTYPE
argument_list|)
argument_list|)
decl_stmt|;
comment|// ---- just check if they are present because of the Helper has already
comment|// checked them.
if|if
condition|(
operator|(
name|type
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|type
argument_list|)
operator|)
operator|||
operator|(
name|subtype
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|subtype
argument_list|)
operator|)
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_DICTIONARY_INVALID
argument_list|,
literal|"Type and/or Subtype keys are missing"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// ---- Check presence of baseFont, CMap and CIDFont
name|this
operator|.
name|basefont
operator|=
name|fDictionary
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|FONT_DICTIONARY_KEY_BASEFONT
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|descendantFonts
operator|=
name|fDictionary
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|FONT_DICTIONARY_KEY_DESCENDANT_FONTS
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|encoding
operator|=
name|fDictionary
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|FONT_DICTIONARY_KEY_ENCODING
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|basefont
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|basefont
argument_list|)
operator|)
operator|||
name|descendantFonts
operator|==
literal|null
operator|||
name|encoding
operator|==
literal|null
condition|)
block|{
comment|// ---- baseFont syntax isn't checked because of it is a convention not a
comment|// rule
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_DICTIONARY_INVALID
argument_list|,
literal|"BaseFont, Encoding or DescendantFonts keys are missing"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// ---- toUnicode is optional, but keep the value if present.
name|this
operator|.
name|toUnicode
operator|=
name|fDictionary
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|FONT_DICTIONARY_KEY_TOUNICODE
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/** 	 * This method validates the CIDFont dictionary. 	 *  	 * This method returns false and updates the list of errors in the 	 * FontContainer if some mandatory fields are missing. 	 *  	 * This method calls the processCIDFontTypeX method to check if the font is 	 * damaged or not. If the font is damaged, the errors list is updated and the 	 * method return false. 	 *  	 * @return 	 * @throws ValidationException 	 */
specifier|protected
name|boolean
name|checkCIDFont
parameter_list|()
throws|throws
name|ValidationException
block|{
comment|// ---- a CIDFont is contained in the DescendantFonts array
name|COSDocument
name|cDoc
init|=
name|this
operator|.
name|handler
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocument
argument_list|()
decl_stmt|;
name|COSArray
name|array
init|=
name|COSUtils
operator|.
name|getAsArray
argument_list|(
name|descendantFonts
argument_list|,
name|cDoc
argument_list|)
decl_stmt|;
if|if
condition|(
name|array
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_CIDKEYED_INVALID
argument_list|,
literal|"CIDFont is missing from the DescendantFonts array"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// ---- in PDF 1.4, this array must contain only one element,
comment|// because of a PDF/A should be a PDF 1.4, this method returns an error if
comment|// the array
comment|// has more than one element.
if|if
condition|(
name|array
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_CIDKEYED_INVALID
argument_list|,
literal|"The DescendantFonts array should have one element."
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|this
operator|.
name|cidFont
operator|=
name|COSUtils
operator|.
name|getAsDictionary
argument_list|(
name|array
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|cDoc
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|cidFont
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_CIDKEYED_INVALID
argument_list|,
literal|"The DescendantFonts array should have one element with is a dictionary."
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|String
name|type
init|=
name|cidFont
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|DICTIONARY_KEY_TYPE
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|subtype
init|=
name|cidFont
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|DICTIONARY_KEY_SUBTYPE
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|type
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|type
argument_list|)
operator|)
operator|||
operator|(
name|subtype
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|subtype
argument_list|)
operator|)
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_DICTIONARY_INVALID
argument_list|,
literal|"Type and/or Subtype keys are missing"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|boolean
name|isT0
init|=
name|FONT_DICTIONARY_VALUE_TYPE0
operator|.
name|equals
argument_list|(
name|subtype
argument_list|)
decl_stmt|;
name|boolean
name|isT2
init|=
name|FONT_DICTIONARY_VALUE_TYPE2
operator|.
name|equals
argument_list|(
name|subtype
argument_list|)
decl_stmt|;
comment|// ---- Even if these entries are present, values must be checked.
if|if
condition|(
operator|!
name|FONT_DICTIONARY_VALUE_FONT
operator|.
name|equals
argument_list|(
name|type
argument_list|)
operator|||
operator|!
operator|(
name|isT0
operator|||
name|isT2
operator|)
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_DICTIONARY_INVALID
argument_list|,
literal|"Type and/or Subtype keys are missing"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// ---- BaseFont is mandatory
name|String
name|bf
init|=
name|cidFont
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|FONT_DICTIONARY_KEY_BASEFONT
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|bf
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|bf
argument_list|)
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_DICTIONARY_INVALID
argument_list|,
literal|"BaseFont is missing"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// ---- checks others mandatory fields
name|COSBase
name|sysinfo
init|=
name|cidFont
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|FONT_DICTIONARY_KEY_CID_SYSINFO
argument_list|)
argument_list|)
decl_stmt|;
name|COSBase
name|fontDesc
init|=
name|cidFont
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|FONT_DICTIONARY_KEY_FONT_DESC
argument_list|)
argument_list|)
decl_stmt|;
name|COSBase
name|cidToGid
init|=
name|cidFont
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|FONT_DICTIONARY_KEY_CID_GIDMAP
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|result
init|=
name|checkCIDSystemInfo
argument_list|(
name|sysinfo
argument_list|,
name|cDoc
argument_list|)
decl_stmt|;
if|if
condition|(
name|isT0
condition|)
block|{
name|result
operator|=
name|result
operator|&&
name|checkCIDToGIDMap
argument_list|(
name|cidToGid
argument_list|,
name|cDoc
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|result
operator|=
name|result
operator|&&
name|processCIDFontType0
argument_list|(
name|fontDesc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|result
operator|&&
name|checkCIDToGIDMap
argument_list|(
name|cidToGid
argument_list|,
name|cDoc
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|result
operator|=
name|result
operator|&&
name|processCIDFontType2
argument_list|(
name|fontDesc
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/** 	 * Check the content of the CIDSystemInfo dictionary. A CIDSystemInfo 	 * dictionary must contain : 	 *<UL> 	 *<li>a Name - Registry 	 *<li>a Name - Ordering 	 *<li>a Integer - Supplement 	 *</UL> 	 *  	 * @param sysinfo 	 * @param cDoc 	 * @return 	 */
specifier|private
name|boolean
name|checkCIDSystemInfo
parameter_list|(
name|COSBase
name|sysinfo
parameter_list|,
name|COSDocument
name|cDoc
parameter_list|)
block|{
name|COSDictionary
name|cidSysInfo
init|=
name|COSUtils
operator|.
name|getAsDictionary
argument_list|(
name|sysinfo
argument_list|,
name|cDoc
argument_list|)
decl_stmt|;
if|if
condition|(
name|cidSysInfo
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_CIDKEYED_SYSINFO
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|COSBase
name|reg
init|=
name|cidSysInfo
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|FONT_DICTIONARY_KEY_SYSINFO_REGISTRY
argument_list|)
argument_list|)
decl_stmt|;
name|COSBase
name|ord
init|=
name|cidSysInfo
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|FONT_DICTIONARY_KEY_SYSINFO_ORDERING
argument_list|)
argument_list|)
decl_stmt|;
name|COSBase
name|sup
init|=
name|cidSysInfo
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|FONT_DICTIONARY_KEY_SYSINFO_SUPPLEMENT
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|COSUtils
operator|.
name|isString
argument_list|(
name|reg
argument_list|,
name|cDoc
argument_list|)
operator|&&
name|COSUtils
operator|.
name|isString
argument_list|(
name|ord
argument_list|,
name|cDoc
argument_list|)
operator|&&
name|COSUtils
operator|.
name|isInteger
argument_list|(
name|sup
argument_list|,
name|cDoc
argument_list|)
operator|)
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_CIDKEYED_SYSINFO
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/** 	 * This method checks the CIDtoGIDMap entry of the Font dictionary. This 	 * element must be a Stream or a Name. If it is a name, it must be "Identity" 	 * otherwise, the PDF file isn't a PDF/A-1b. 	 *  	 * If the validation fails, the method returns false and the list of error in 	 * the FontContainer is updated. 	 *  	 * If the CIDtoGIDMap is a Stream, it is parsed as a CMap and the result is 	 * kept in the cidToGidMap attribute. 	 *  	 * @param ctog 	 * @param cDoc 	 * @param mandatory 	 * @return 	 */
specifier|private
name|boolean
name|checkCIDToGIDMap
parameter_list|(
name|COSBase
name|ctog
parameter_list|,
name|COSDocument
name|cDoc
parameter_list|,
name|boolean
name|mandatory
parameter_list|)
block|{
if|if
condition|(
name|COSUtils
operator|.
name|isString
argument_list|(
name|ctog
argument_list|,
name|cDoc
argument_list|)
condition|)
block|{
comment|// ---- valid only if the string is Identity
name|String
name|ctogStr
init|=
name|COSUtils
operator|.
name|getAsString
argument_list|(
name|ctog
argument_list|,
name|cDoc
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|FONT_DICTIONARY_VALUE_CMAP_IDENTITY
operator|.
name|equals
argument_list|(
name|ctogStr
argument_list|)
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_CIDKEYED_CIDTOGID
argument_list|,
literal|"The CIDToGID entry is invalid"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|COSUtils
operator|.
name|isStream
argument_list|(
name|ctog
argument_list|,
name|cDoc
argument_list|)
condition|)
block|{
try|try
block|{
name|COSStream
name|ctogMap
init|=
name|COSUtils
operator|.
name|getAsStream
argument_list|(
name|ctog
argument_list|,
name|cDoc
argument_list|)
decl_stmt|;
name|this
operator|.
name|cidToGidMap
operator|=
operator|new
name|CMapParser
argument_list|()
operator|.
name|parse
argument_list|(
literal|null
argument_list|,
name|ctogMap
operator|.
name|getUnfilteredStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ---- map can be invalid, return a Validation Error
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_CIDKEYED_CIDTOGID
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|mandatory
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_CIDKEYED_CIDTOGID
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/** 	 * Check the CMap entry. 	 *  	 * The CMap entry must be a dictionary in a PDF/A. This entry can be a String 	 * only if the String value is Identity-H or Identity-V 	 *  	 * @param errors 	 * @return 	 */
specifier|protected
name|boolean
name|checkCMap
parameter_list|(
name|COSBase
name|aEncoding
parameter_list|)
block|{
name|COSDocument
name|cDoc
init|=
name|this
operator|.
name|handler
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocument
argument_list|()
decl_stmt|;
if|if
condition|(
name|COSUtils
operator|.
name|isString
argument_list|(
name|aEncoding
argument_list|,
name|cDoc
argument_list|)
condition|)
block|{
comment|// ---- if encoding is a string, only 2 values are allowed
name|String
name|str
init|=
name|COSUtils
operator|.
name|getAsString
argument_list|(
name|aEncoding
argument_list|,
name|cDoc
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|FONT_DICTIONARY_VALUE_CMAP_IDENTITY_V
operator|.
name|equals
argument_list|(
name|str
argument_list|)
operator|||
name|FONT_DICTIONARY_VALUE_CMAP_IDENTITY_H
operator|.
name|equals
argument_list|(
name|str
argument_list|)
operator|)
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_CIDKEYED_INVALID
argument_list|,
literal|"The CMap is a string but it isn't an Identity-H/V"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|isIdentityCMap
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|COSUtils
operator|.
name|isStream
argument_list|(
name|aEncoding
argument_list|,
name|cDoc
argument_list|)
condition|)
block|{
comment|// ---- If the CMap is a stream, some fields are mandatory
comment|// and the CIDSytemInfo must be compared with the CIDSystemInfo
comment|// entry of the CIDFont.
return|return
name|processCMapAsStream
argument_list|(
name|COSUtils
operator|.
name|getAsStream
argument_list|(
name|aEncoding
argument_list|,
name|cDoc
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
comment|// ---- CMap type is invalid
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_CIDKEYED_CMAP_INVALID_OR_MISSING
argument_list|,
literal|"The CMap type is invalid"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/** 	 * Standard information of a stream element will be checked by the 	 * StreamHelper. 	 *  	 * This method checks mandatory fields of the CMap stream. This method checks 	 * too if the CMap stream is damaged using the CMapParser of the fontbox api. 	 *  	 * @param aCMap 	 * @return 	 */
specifier|private
name|boolean
name|processCMapAsStream
parameter_list|(
name|COSStream
name|aCMap
parameter_list|)
block|{
name|COSDocument
name|cDoc
init|=
name|handler
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocument
argument_list|()
decl_stmt|;
name|String
name|type
init|=
name|aCMap
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|DICTIONARY_KEY_TYPE
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|cmapName
init|=
name|aCMap
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|FONT_DICTIONARY_KEY_CMAP_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|COSBase
name|sysinfo
init|=
name|aCMap
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|FONT_DICTIONARY_KEY_CID_SYSINFO
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|wmode
init|=
name|aCMap
operator|.
name|getInt
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|FONT_DICTIONARY_KEY_CMAP_WMODE
argument_list|)
argument_list|)
decl_stmt|;
name|COSBase
name|cmapUsed
init|=
name|aCMap
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|FONT_DICTIONARY_KEY_CMAP_USECMAP
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|FONT_DICTIONARY_VALUE_TYPE_CMAP
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
comment|// ---- CMap type is invalid
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_CIDKEYED_CMAP_INVALID_OR_MISSING
argument_list|,
literal|"The CMap type is invalid"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// ---- check the content of the CIDSystemInfo
if|if
condition|(
operator|!
name|checkCIDSystemInfo
argument_list|(
name|sysinfo
argument_list|,
name|cDoc
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|cmapName
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|cmapName
argument_list|)
operator|||
name|wmode
operator|>
literal|1
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_CIDKEYED_CMAP_INVALID_OR_MISSING
argument_list|,
literal|"Some elements in the CMap dictionary are missing or invalid"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
try|try
block|{
name|CMap
name|fontboxCMap
init|=
operator|new
name|CMapParser
argument_list|()
operator|.
name|parse
argument_list|(
literal|null
argument_list|,
name|aCMap
operator|.
name|getUnfilteredStream
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|wmValue
init|=
name|fontboxCMap
operator|.
name|getWMode
argument_list|()
decl_stmt|;
name|String
name|cmnValue
init|=
name|fontboxCMap
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|//getCmapEntry("CMapName");
if|if
condition|(
name|wmValue
operator|!=
name|wmode
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_CIDKEYED_CMAP_INVALID_OR_MISSING
argument_list|,
literal|"WMode is inconsistent"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|cmnValue
operator|.
name|equals
argument_list|(
name|cmapName
argument_list|)
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_CIDKEYED_CMAP_INVALID_OR_MISSING
argument_list|,
literal|"CMapName is inconsistent"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_CID_CMAP_DAMAGED
argument_list|,
literal|"The CMap type is damaged"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|cmapUsed
operator|!=
literal|null
condition|)
block|{
return|return
name|checkCMap
argument_list|(
name|cmapUsed
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/** 	 * The CIDSystemInfo must have the same Registry and Ordering for CMap and 	 * CIDFont. This control is useless if CMap is Identity-H or Identity-V so 	 * this method is called by the checkCMap method. 	 *  	 * @param errors 	 * @return 	 */
specifier|private
name|boolean
name|compareCIDSystemInfo
parameter_list|()
block|{
name|COSDocument
name|cDoc
init|=
name|handler
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocument
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isIdentityCMap
condition|)
block|{
name|COSDictionary
name|cmsi
init|=
name|COSUtils
operator|.
name|getAsDictionary
argument_list|(
name|this
operator|.
name|cmap
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|FONT_DICTIONARY_KEY_CID_SYSINFO
argument_list|)
argument_list|)
argument_list|,
name|cDoc
argument_list|)
decl_stmt|;
name|COSDictionary
name|cfsi
init|=
name|COSUtils
operator|.
name|getAsDictionary
argument_list|(
name|this
operator|.
name|cidFont
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|FONT_DICTIONARY_KEY_CID_SYSINFO
argument_list|)
argument_list|)
argument_list|,
name|cDoc
argument_list|)
decl_stmt|;
name|String
name|regCM
init|=
name|COSUtils
operator|.
name|getAsString
argument_list|(
name|cmsi
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|FONT_DICTIONARY_KEY_SYSINFO_REGISTRY
argument_list|)
argument_list|)
argument_list|,
name|cDoc
argument_list|)
decl_stmt|;
name|String
name|ordCM
init|=
name|COSUtils
operator|.
name|getAsString
argument_list|(
name|cmsi
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|FONT_DICTIONARY_KEY_SYSINFO_ORDERING
argument_list|)
argument_list|)
argument_list|,
name|cDoc
argument_list|)
decl_stmt|;
name|String
name|regCF
init|=
name|COSUtils
operator|.
name|getAsString
argument_list|(
name|cfsi
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|FONT_DICTIONARY_KEY_SYSINFO_REGISTRY
argument_list|)
argument_list|)
argument_list|,
name|cDoc
argument_list|)
decl_stmt|;
name|String
name|ordCF
init|=
name|COSUtils
operator|.
name|getAsString
argument_list|(
name|cfsi
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|FONT_DICTIONARY_KEY_SYSINFO_ORDERING
argument_list|)
argument_list|)
argument_list|,
name|cDoc
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|regCF
operator|.
name|equals
argument_list|(
name|regCM
argument_list|)
operator|||
operator|!
name|ordCF
operator|.
name|equals
argument_list|(
name|ordCM
argument_list|)
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_CIDKEYED_SYSINFO
argument_list|,
literal|"The CIDSystemInfo is inconsistent"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|// else cmap is null because it is a Identity-H/V
return|return
literal|true
return|;
block|}
comment|/* 	 * (non-Javadoc) 	 *  	 * @see 	 * net.awl.edoc.pdfa.validation.font.FontValidator#validate(java.util.List) 	 */
specifier|public
name|boolean
name|validate
parameter_list|()
throws|throws
name|ValidationException
block|{
name|boolean
name|result
init|=
name|checkMandatoryFields
argument_list|()
decl_stmt|;
name|result
operator|=
name|result
operator|&&
name|checkCIDFont
argument_list|()
expr_stmt|;
name|result
operator|=
name|result
operator|&&
name|checkCMap
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
condition|)
block|{
name|this
operator|.
name|cmap
operator|=
name|COSUtils
operator|.
name|getAsStream
argument_list|(
name|encoding
argument_list|,
name|handler
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocument
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|result
operator|&&
name|compareCIDSystemInfo
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/** 	 * Check if all required fields are present in the PDF file to describe the 	 * Font Descriptor. 	 *  	 * @param handler 	 * @param fontDescriptor 	 * @param result 	 */
specifier|protected
name|boolean
name|checkFontDescriptorMandatoryFields
parameter_list|(
name|PDFontDescriptorDictionary
name|pdFontDesc
parameter_list|)
block|{
name|boolean
name|fname
init|=
literal|false
decl_stmt|,
name|flags
init|=
literal|false
decl_stmt|,
name|itangle
init|=
literal|false
decl_stmt|,
name|cheight
init|=
literal|false
decl_stmt|;
name|boolean
name|fbbox
init|=
literal|false
decl_stmt|,
name|asc
init|=
literal|false
decl_stmt|,
name|desc
init|=
literal|false
decl_stmt|,
name|stemv
init|=
literal|false
decl_stmt|;
name|COSDictionary
name|fontDescDictionary
init|=
name|pdFontDesc
operator|.
name|getCOSDictionary
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|key
range|:
name|fontDescDictionary
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|key
operator|instanceof
name|COSName
operator|)
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationResult
operator|.
name|ValidationError
argument_list|(
name|ValidationConstants
operator|.
name|ERROR_SYNTAX_DICTIONARY_KEY_INVALID
argument_list|,
literal|"Invalid key in The font descriptor"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|String
name|cosName
init|=
operator|(
operator|(
name|COSName
operator|)
name|key
operator|)
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|cosName
operator|.
name|equals
argument_list|(
name|FONT_DICTIONARY_KEY_FONTNAME
argument_list|)
condition|)
block|{
name|fname
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|cosName
operator|.
name|equals
argument_list|(
name|FONT_DICTIONARY_KEY_FLAGS
argument_list|)
condition|)
block|{
name|flags
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|cosName
operator|.
name|equals
argument_list|(
name|FONT_DICTIONARY_KEY_ITALICANGLE
argument_list|)
condition|)
block|{
name|itangle
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|cosName
operator|.
name|equals
argument_list|(
name|FONT_DICTIONARY_KEY_CAPHEIGHT
argument_list|)
condition|)
block|{
name|cheight
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|cosName
operator|.
name|equals
argument_list|(
name|FONT_DICTIONARY_KEY_FONTBBOX
argument_list|)
condition|)
block|{
name|fbbox
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|cosName
operator|.
name|equals
argument_list|(
name|FONT_DICTIONARY_KEY_ASCENT
argument_list|)
condition|)
block|{
name|asc
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|cosName
operator|.
name|equals
argument_list|(
name|FONT_DICTIONARY_KEY_DESCENT
argument_list|)
condition|)
block|{
name|desc
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|cosName
operator|.
name|equals
argument_list|(
name|FONT_DICTIONARY_KEY_STEMV
argument_list|)
condition|)
block|{
name|stemv
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
operator|(
name|fname
operator|&&
name|flags
operator|&&
name|itangle
operator|&&
name|cheight
operator|&&
name|fbbox
operator|&&
name|asc
operator|&&
name|desc
operator|&&
name|stemv
operator|)
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_DESCRIPTOR_INVALID
argument_list|,
literal|"Some mandatory fields are missing"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/** 	 * Process the CIDFontType0 validation. 	 *  	 * @param fontDesc 	 *          The FontDescriptor which contains the Font Program 	 * @return 	 * @throws ValidationException 	 */
specifier|protected
name|boolean
name|processCIDFontType0
parameter_list|(
name|COSBase
name|fontDesc
parameter_list|)
throws|throws
name|ValidationException
block|{
name|COSDictionary
name|fontDescDic
init|=
name|COSUtils
operator|.
name|getAsDictionary
argument_list|(
name|fontDesc
argument_list|,
name|handler
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocument
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fontDescDic
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ValidationException
argument_list|(
literal|"Unable to process CIDFontType0 because of the font descriptor is invalid."
argument_list|)
throw|;
block|}
name|PDFontDescriptorDictionary
name|pfDescriptor
init|=
operator|new
name|PDFontDescriptorDictionary
argument_list|(
name|fontDescDic
argument_list|)
decl_stmt|;
name|boolean
name|isValid
init|=
name|checkFontDescriptorMandatoryFields
argument_list|(
name|pfDescriptor
argument_list|)
decl_stmt|;
name|isValid
operator|=
name|isValid
operator|&&
name|checkCIDKeyedFontName
argument_list|(
name|pfDescriptor
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|isValid
operator|=
name|isValid
operator|&&
name|checkFontFileElement_CIDFontType0
argument_list|(
name|pfDescriptor
argument_list|)
expr_stmt|;
name|isValid
operator|=
name|isValid
operator|&&
name|checkCIDSet
argument_list|(
name|pfDescriptor
argument_list|)
expr_stmt|;
return|return
name|isValid
return|;
block|}
comment|/** 	 * Checks if the FontName contained in the FontDescriptor dictionary of the 	 * CID-Keyed Font is present. (The FontName is mandatory according to the PDF 	 * Reference.) If the consistency must be checked, the FontName contained in 	 * the FontDescriptor is consistent with the BaseName of the font dictionary. 	 * If font name is invalid, the list of validation errors in the FontContainer 	 * is updated. 	 *  	 * @param pfDescriptor 	 *          The FontDescriptor dictionary which contains the FontName to check 	 * @param checkConsistency 	 *          true if the font name must be consistent with the BaseName of the 	 *          Font dictionary 	 * @return 	 */
specifier|protected
name|boolean
name|checkCIDKeyedFontName
parameter_list|(
name|PDFontDescriptorDictionary
name|pfDescriptor
parameter_list|,
name|boolean
name|checkConsistency
parameter_list|)
block|{
name|String
name|fontName
init|=
name|pfDescriptor
operator|.
name|getFontName
argument_list|()
decl_stmt|;
name|String
name|baseName
init|=
name|this
operator|.
name|pFont
operator|.
name|getBaseFont
argument_list|()
decl_stmt|;
if|if
condition|(
name|fontName
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationResult
operator|.
name|ValidationError
argument_list|(
name|ERROR_FONTS_DESCRIPTOR_INVALID
argument_list|,
literal|"The FontName in font descriptor is missing"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|checkConsistency
operator|&&
operator|!
operator|(
name|fontName
operator|.
name|equals
argument_list|(
name|baseName
argument_list|)
operator|||
name|fontName
operator|.
name|contains
argument_list|(
name|baseName
argument_list|)
operator|||
name|baseName
operator|.
name|contains
argument_list|(
name|fontName
argument_list|)
operator|)
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationResult
operator|.
name|ValidationError
argument_list|(
name|ERROR_FONTS_DESCRIPTOR_INVALID
argument_list|,
literal|"The FontName in font descriptor isn't the same as the BaseFont in the Font dictionary"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/** 	 * This method return false and updates the FontContainer if the Composite 	 * Font TYPE 0 or TYPE1C is damaged. This method checks the Widths 	 * consistency. 	 *  	 * @param pfDescriptor 	 * @return 	 */
name|boolean
name|checkFontFileElement_CIDFontType0
parameter_list|(
name|PDFontDescriptorDictionary
name|pfDescriptor
parameter_list|)
throws|throws
name|ValidationException
block|{
comment|// ---- FontFile Validation
name|PDStream
name|ff1
init|=
name|pfDescriptor
operator|.
name|getFontFile
argument_list|()
decl_stmt|;
name|PDStream
name|ff2
init|=
name|pfDescriptor
operator|.
name|getFontFile2
argument_list|()
decl_stmt|;
name|PDStream
name|ff3
init|=
name|pfDescriptor
operator|.
name|getFontFile3
argument_list|()
decl_stmt|;
name|boolean
name|onlyOne
init|=
operator|(
name|ff1
operator|!=
literal|null
operator|&&
name|ff2
operator|==
literal|null
operator|&&
name|ff3
operator|==
literal|null
operator|)
operator|||
operator|(
name|ff1
operator|==
literal|null
operator|&&
name|ff2
operator|!=
literal|null
operator|&&
name|ff3
operator|==
literal|null
operator|)
operator|||
operator|(
name|ff1
operator|==
literal|null
operator|&&
name|ff2
operator|==
literal|null
operator|&&
name|ff3
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
operator|(
name|ff3
operator|==
literal|null
operator|)
operator|||
operator|!
name|onlyOne
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationResult
operator|.
name|ValidationError
argument_list|(
name|ERROR_FONTS_FONT_FILEX_INVALID
argument_list|,
literal|"The FontFile is invalid"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// ---- Stream validation should be done by the StreamValidateHelper.
comment|// ---- Process font specific check
name|COSStream
name|stream
init|=
name|ff3
operator|.
name|getStream
argument_list|()
decl_stmt|;
if|if
condition|(
name|stream
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationResult
operator|.
name|ValidationError
argument_list|(
name|ERROR_FONTS_FONT_FILEX_INVALID
argument_list|,
literal|"The FontFile is missing"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|fontContainer
operator|.
name|setFontProgramEmbedded
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// ---- Lengthx aren't mandatory for this type of font
comment|// ---- But the Subtype is a mandatory field with specific values
name|String
name|st
init|=
name|stream
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|DICTIONARY_KEY_SUBTYPE
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|FONT_DICTIONARY_VALUE_TYPE0C
operator|.
name|equals
argument_list|(
name|st
argument_list|)
operator|||
name|FONT_DICTIONARY_VALUE_TYPE1C
operator|.
name|equals
argument_list|(
name|st
argument_list|)
operator|)
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationResult
operator|.
name|ValidationError
argument_list|(
name|ERROR_FONTS_FONT_FILEX_INVALID
argument_list|,
literal|"The FontFile3 stream doesn't have the right Subtype"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// ---- try to load the font using the java.awt.font object.
comment|// ---- if the font is invalid, an exception will be thrown
try|try
block|{
name|CFFParser
name|cffParser
init|=
operator|new
name|CFFParser
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CFFFont
argument_list|>
name|lCFonts
init|=
name|cffParser
operator|.
name|parse
argument_list|(
name|ff3
operator|.
name|getByteArray
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lCFonts
operator|==
literal|null
operator|||
name|lCFonts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationResult
operator|.
name|ValidationError
argument_list|(
name|ERROR_FONTS_CID_DAMAGED
argument_list|,
literal|"The FontFile can't be read"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
name|checkCIDFontWidths
argument_list|(
name|lCFonts
argument_list|)
operator|&&
name|checkFontFileMetaData
argument_list|(
name|pfDescriptor
argument_list|,
name|ff3
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationResult
operator|.
name|ValidationError
argument_list|(
name|ERROR_FONTS_CID_DAMAGED
argument_list|,
literal|"The FontFile can't be read"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|/** 	 * This method checks the metric consistency of a CIDFontType2. 	 *  	 * @param ttf 	 *          The TrueTypeFont object which represent the CIDFontType2 Font 	 *          Program. 	 * @return 	 * @throws ValidationException 	 */
specifier|protected
name|boolean
name|checkTTFontMetrics
parameter_list|(
name|TrueTypeFont
name|ttf
parameter_list|)
throws|throws
name|ValidationException
block|{
name|LinkedHashMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|widths
init|=
name|getWidthsArray
argument_list|()
decl_stmt|;
name|int
name|defaultWidth
init|=
name|this
operator|.
name|cidFont
operator|.
name|getInt
argument_list|(
literal|"DW"
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|int
name|unitsPerEm
init|=
name|ttf
operator|.
name|getHeader
argument_list|()
operator|.
name|getUnitsPerEm
argument_list|()
decl_stmt|;
name|int
index|[]
name|glyphWidths
init|=
name|ttf
operator|.
name|getHorizontalMetrics
argument_list|()
operator|.
name|getAdvanceWidth
argument_list|()
decl_stmt|;
comment|/* In a Mono space font program, the length of the AdvanceWidth array must be one. 		 * According to the TrueType font specification, the Last Value of the AdvanceWidth array 		 * is apply to the subsequent glyphs. So if the GlyphId is greater than the length of the array 		 * the last entry is used. 		 */
name|int
name|numberOfLongHorMetrics
init|=
name|ttf
operator|.
name|getHorizontalHeader
argument_list|()
operator|.
name|getNumberOfHMetrics
argument_list|()
decl_stmt|;
name|CFFType2FontContainer
name|type2FontContainer
init|=
operator|(
operator|(
name|CompositeFontContainer
operator|)
name|this
operator|.
name|fontContainer
operator|)
operator|.
name|getCFFType2
argument_list|()
decl_stmt|;
name|type2FontContainer
operator|.
name|setPdfWidths
argument_list|(
name|widths
argument_list|)
expr_stmt|;
name|type2FontContainer
operator|.
name|setCmap
argument_list|(
name|this
operator|.
name|cidToGidMap
argument_list|)
expr_stmt|;
name|type2FontContainer
operator|.
name|setDefaultGlyphWidth
argument_list|(
name|defaultWidth
argument_list|)
expr_stmt|;
name|type2FontContainer
operator|.
name|setFontObject
argument_list|(
name|ttf
argument_list|)
expr_stmt|;
name|type2FontContainer
operator|.
name|setGlyphWidths
argument_list|(
name|glyphWidths
argument_list|)
expr_stmt|;
name|type2FontContainer
operator|.
name|setNumberOfLongHorMetrics
argument_list|(
name|numberOfLongHorMetrics
argument_list|)
expr_stmt|;
name|type2FontContainer
operator|.
name|setUnitsPerEm
argument_list|(
name|unitsPerEm
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/** 	 * This method check Metrics consistency of the CIDFontType0. 	 *  	 * @param lCFonts 	 * @return 	 * @throws ValidationException 	 */
specifier|protected
name|boolean
name|checkCIDFontWidths
parameter_list|(
name|List
argument_list|<
name|CFFFont
argument_list|>
name|lCFonts
parameter_list|)
throws|throws
name|ValidationException
block|{
comment|// ---- Extract Widths and default Width from the CIDFont dictionary
name|LinkedHashMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|widths
init|=
name|getWidthsArray
argument_list|()
decl_stmt|;
name|int
name|defaultWidth
init|=
name|this
operator|.
name|cidFont
operator|.
name|getInt
argument_list|(
literal|"DW"
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|CFFType0FontContainer
name|type0FontContainer
init|=
operator|(
operator|(
name|CompositeFontContainer
operator|)
name|this
operator|.
name|fontContainer
operator|)
operator|.
name|getCFFType0
argument_list|()
decl_stmt|;
name|type0FontContainer
operator|.
name|setFontObject
argument_list|(
name|lCFonts
argument_list|)
expr_stmt|;
name|type0FontContainer
operator|.
name|setDefaultGlyphWidth
argument_list|(
name|defaultWidth
argument_list|)
expr_stmt|;
name|type0FontContainer
operator|.
name|setWidthsArray
argument_list|(
name|widths
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/** 	 * This method return false and updates the FontContainer if the Composite 	 * Font TYPE 2 is damaged or missing. 	 *  	 * @param pfDescriptor 	 * @return 	 */
name|boolean
name|checkFontFileElement_CIDFontType2
parameter_list|(
name|PDFontDescriptorDictionary
name|pfDescriptor
parameter_list|)
throws|throws
name|ValidationException
block|{
comment|// ---- FontFile Validation
name|PDStream
name|ff1
init|=
name|pfDescriptor
operator|.
name|getFontFile
argument_list|()
decl_stmt|;
name|PDStream
name|ff2
init|=
name|pfDescriptor
operator|.
name|getFontFile2
argument_list|()
decl_stmt|;
name|PDStream
name|ff3
init|=
name|pfDescriptor
operator|.
name|getFontFile3
argument_list|()
decl_stmt|;
name|boolean
name|onlyOne
init|=
operator|(
name|ff1
operator|!=
literal|null
operator|&&
name|ff2
operator|==
literal|null
operator|&&
name|ff3
operator|==
literal|null
operator|)
operator|||
operator|(
name|ff1
operator|==
literal|null
operator|&&
name|ff2
operator|!=
literal|null
operator|&&
name|ff3
operator|==
literal|null
operator|)
operator|||
operator|(
name|ff1
operator|==
literal|null
operator|&&
name|ff2
operator|==
literal|null
operator|&&
name|ff3
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
operator|(
name|ff2
operator|==
literal|null
operator|)
operator|||
operator|!
name|onlyOne
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationResult
operator|.
name|ValidationError
argument_list|(
name|ERROR_FONTS_FONT_FILEX_INVALID
argument_list|,
literal|"The FontFile is invalid"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// ---- Stream validation should be done by the StreamValidateHelper.
comment|// ---- Process font specific check
name|COSStream
name|stream
init|=
name|ff2
operator|.
name|getStream
argument_list|()
decl_stmt|;
if|if
condition|(
name|stream
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationResult
operator|.
name|ValidationError
argument_list|(
name|ERROR_FONTS_FONT_FILEX_INVALID
argument_list|,
literal|"The FontFile is missing"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|fontContainer
operator|.
name|setFontProgramEmbedded
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|boolean
name|hasLength1
init|=
name|stream
operator|.
name|getInt
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|FONT_DICTIONARY_KEY_LENGTH1
argument_list|)
argument_list|)
operator|>
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|hasLength1
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationResult
operator|.
name|ValidationError
argument_list|(
name|ValidationConstants
operator|.
name|ERROR_FONTS_FONT_FILEX_INVALID
argument_list|,
literal|"The FontFile is invalid"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// ---- try to load the font using the java.awt.font object.
comment|// ---- if the font is invalid, an exception will be thrown
name|TrueTypeFont
name|ttf
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// ---- According to PDF Reference, CIDFontType2 is a TrueType font.
comment|// ---- Remark : Java.awt.Font throws exception when a CIDFontType2 is
comment|// parsed even if it is valid.
name|ttf
operator|=
operator|new
name|CIDFontType2Parser
argument_list|(
literal|true
argument_list|)
operator|.
name|parseTTF
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|ff2
operator|.
name|getByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ---- Exceptionally, Exception is catched Here because of damaged font
comment|// can throw NullPointer Exception...
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationResult
operator|.
name|ValidationError
argument_list|(
name|ERROR_FONTS_CID_DAMAGED
argument_list|,
literal|"The FontFile can't be read"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
name|checkTTFontMetrics
argument_list|(
name|ttf
argument_list|)
operator|&&
name|checkFontFileMetaData
argument_list|(
name|pfDescriptor
argument_list|,
name|ff2
argument_list|)
return|;
block|}
comment|/** 	 * For a CIDFont the width array, there are two formats of width array : 	 *<UL> 	 *<li>C [W1...Wn] : C is an integer specifying a starting CID value and the 	 * array of n numbers specify widths for n consecutive CIDs. 	 *<li>Cf Cl W : Defines the same width W for the range Cf to Cl 	 *</UL> 	 * This method gets a linked hash map of width where the key is a CID and the 	 * value is the Width. 	 *  	 * @return 	 * @throws ValidationException 	 */
specifier|protected
name|LinkedHashMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|getWidthsArray
parameter_list|()
throws|throws
name|ValidationException
block|{
name|LinkedHashMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|widthsMap
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|COSDocument
name|cDoc
init|=
name|handler
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocument
argument_list|()
decl_stmt|;
name|COSBase
name|cBase
init|=
name|this
operator|.
name|cidFont
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"W"
argument_list|)
argument_list|)
decl_stmt|;
name|COSArray
name|wArr
init|=
name|COSUtils
operator|.
name|getAsArray
argument_list|(
name|cBase
argument_list|,
name|cDoc
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|wArr
operator|.
name|size
argument_list|()
condition|;
control|)
block|{
name|int
name|firstCid
init|=
name|wArr
operator|.
name|getInt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|+
literal|1
operator|>=
name|wArr
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ValidationException
argument_list|(
literal|"Invalid format of the W entry"
argument_list|)
throw|;
block|}
name|COSBase
name|cb
init|=
name|wArr
operator|.
name|getObject
argument_list|(
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|COSUtils
operator|.
name|isArray
argument_list|(
name|cb
argument_list|,
name|cDoc
argument_list|)
condition|)
block|{
comment|// ---- First Format
name|COSArray
name|seqWidths
init|=
name|COSUtils
operator|.
name|getAsArray
argument_list|(
name|cb
argument_list|,
name|cDoc
argument_list|)
decl_stmt|;
name|widthsMap
operator|.
name|put
argument_list|(
name|firstCid
argument_list|,
name|seqWidths
operator|.
name|getInt
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|jw
init|=
literal|1
init|;
name|jw
operator|<
name|seqWidths
operator|.
name|size
argument_list|()
condition|;
name|jw
operator|++
control|)
block|{
name|widthsMap
operator|.
name|put
argument_list|(
operator|(
name|firstCid
operator|+
name|jw
operator|)
argument_list|,
name|seqWidths
operator|.
name|getInt
argument_list|(
name|jw
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|i
operator|=
name|i
operator|+
literal|2
expr_stmt|;
block|}
else|else
block|{
comment|// ---- Second Format
if|if
condition|(
name|i
operator|+
literal|2
operator|>=
name|wArr
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ValidationException
argument_list|(
literal|"Invalid format of the W entry"
argument_list|)
throw|;
block|}
name|int
name|lastCid
init|=
name|wArr
operator|.
name|getInt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
name|int
name|commonWidth
init|=
name|wArr
operator|.
name|getInt
argument_list|(
name|i
operator|+
literal|2
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|jw
init|=
name|firstCid
init|;
name|jw
operator|<=
name|lastCid
condition|;
operator|++
name|jw
control|)
block|{
name|widthsMap
operator|.
name|put
argument_list|(
operator|(
name|firstCid
operator|+
name|jw
operator|)
argument_list|,
name|commonWidth
argument_list|)
expr_stmt|;
block|}
name|i
operator|=
name|i
operator|+
literal|3
expr_stmt|;
block|}
block|}
return|return
name|widthsMap
return|;
block|}
comment|/** 	 * If the embedded font is a subset, the CIDSet entry is mandatory and must be 	 * a Stream. This method returns true if the CIDSet entry respects conditions, 	 * otherwise the method returns false and the FontContainer is updated. 	 *  	 * @param pfDescriptor 	 * @return 	 */
specifier|protected
name|boolean
name|checkCIDSet
parameter_list|(
name|PDFontDescriptorDictionary
name|pfDescriptor
parameter_list|)
block|{
if|if
condition|(
name|isSubSet
argument_list|(
name|pfDescriptor
operator|.
name|getFontName
argument_list|()
argument_list|)
condition|)
block|{
name|COSBase
name|cidset
init|=
name|pfDescriptor
operator|.
name|getCOSDictionary
argument_list|()
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|FONT_DICTIONARY_KEY_CIDSET
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cidset
operator|==
literal|null
operator|||
operator|!
name|COSUtils
operator|.
name|isStream
argument_list|(
name|cidset
argument_list|,
name|this
operator|.
name|handler
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocument
argument_list|()
argument_list|)
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationResult
operator|.
name|ValidationError
argument_list|(
name|ERROR_FONTS_CIDSET_MISSING_FOR_SUBSET
argument_list|,
literal|"The CIDSet entry is missing for the Composite Subset"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/** 	 *  	 * @param fontDesc 	 * @return 	 * @throws ValidationException 	 */
specifier|protected
name|boolean
name|processCIDFontType2
parameter_list|(
name|COSBase
name|fontDesc
parameter_list|)
throws|throws
name|ValidationException
block|{
name|COSDictionary
name|fontDescDic
init|=
name|COSUtils
operator|.
name|getAsDictionary
argument_list|(
name|fontDesc
argument_list|,
name|handler
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocument
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fontDescDic
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ValidationException
argument_list|(
literal|"Unable to process CIDFontType2 because of the font descriptor is invalid."
argument_list|)
throw|;
block|}
name|PDFontDescriptorDictionary
name|pfDescriptor
init|=
operator|new
name|PDFontDescriptorDictionary
argument_list|(
name|fontDescDic
argument_list|)
decl_stmt|;
name|boolean
name|isValid
init|=
name|checkFontDescriptorMandatoryFields
argument_list|(
name|pfDescriptor
argument_list|)
decl_stmt|;
name|isValid
operator|=
name|isValid
operator|&&
name|checkCIDKeyedFontName
argument_list|(
name|pfDescriptor
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|isValid
operator|=
name|isValid
operator|&&
name|checkFontFileElement_CIDFontType2
argument_list|(
name|pfDescriptor
argument_list|)
expr_stmt|;
name|isValid
operator|=
name|isValid
operator|&&
name|checkCIDSet
argument_list|(
name|pfDescriptor
argument_list|)
expr_stmt|;
return|return
name|isValid
return|;
block|}
block|}
end_class

end_unit

