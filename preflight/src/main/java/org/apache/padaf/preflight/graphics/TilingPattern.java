begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|graphics
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|DICTIONARY_KEY_RESOURCES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|ERROR_GRAPHIC_INVALID_PATTERN_DEFINITION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|PATTERN_KEY_BBOX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|PATTERN_KEY_PAINT_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|PATTERN_KEY_TILING_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|PATTERN_KEY_XSTEP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|PATTERN_KEY_YSTEP
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|DocumentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationResult
operator|.
name|ValidationError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|contentstream
operator|.
name|ContentStreamWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSStream
import|;
end_import

begin_class
specifier|public
class|class
name|TilingPattern
implements|implements
name|XObjectValidator
block|{
comment|/**    * The COSStream which represents the TilingPattern.    */
specifier|private
name|COSStream
name|pattern
init|=
literal|null
decl_stmt|;
comment|/**    * The document handler which contains useful information to process the    * validation.    */
specifier|private
name|DocumentHandler
name|documentHandler
init|=
literal|null
decl_stmt|;
specifier|public
name|TilingPattern
parameter_list|(
name|DocumentHandler
name|_handler
parameter_list|,
name|COSStream
name|_pattern
parameter_list|)
block|{
name|this
operator|.
name|documentHandler
operator|=
name|_handler
expr_stmt|;
name|this
operator|.
name|pattern
operator|=
name|_pattern
expr_stmt|;
block|}
comment|/**    * Validate the Pattern content like Color and Show Text Operators using an    * instance of ContentStreamWrapper.    *     * @param errors    *          the list of error to update if the validation fails.    * @return    * @throws ValidationException    */
specifier|protected
name|boolean
name|parsePatternContent
parameter_list|(
name|List
argument_list|<
name|ValidationError
argument_list|>
name|errors
parameter_list|)
throws|throws
name|ValidationException
block|{
name|ContentStreamWrapper
name|csWrapper
init|=
operator|new
name|ContentStreamWrapper
argument_list|(
name|documentHandler
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ValidationError
argument_list|>
name|csParseErrors
init|=
name|csWrapper
operator|.
name|validPatternContentStream
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
if|if
condition|(
name|csParseErrors
operator|==
literal|null
operator|||
operator|(
name|csParseErrors
operator|!=
literal|null
operator|&&
name|csParseErrors
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|errors
operator|.
name|addAll
argument_list|(
name|csParseErrors
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|/**    * This method checks if required fields are present.    *     * @param result    *          the list of error to update if the validation fails.    * @return true if all fields are present, false otherwise.    */
specifier|protected
name|boolean
name|checkMandatoryFields
parameter_list|(
name|List
argument_list|<
name|ValidationError
argument_list|>
name|errors
parameter_list|)
block|{
name|boolean
name|res
init|=
name|pattern
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|DICTIONARY_KEY_RESOURCES
argument_list|)
argument_list|)
operator|!=
literal|null
decl_stmt|;
name|res
operator|=
name|res
operator|&&
name|pattern
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|PATTERN_KEY_BBOX
argument_list|)
argument_list|)
operator|!=
literal|null
expr_stmt|;
name|res
operator|=
name|res
operator|&&
name|pattern
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|PATTERN_KEY_PAINT_TYPE
argument_list|)
argument_list|)
operator|!=
literal|null
expr_stmt|;
name|res
operator|=
name|res
operator|&&
name|pattern
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|PATTERN_KEY_TILING_TYPE
argument_list|)
argument_list|)
operator|!=
literal|null
expr_stmt|;
name|res
operator|=
name|res
operator|&&
name|pattern
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|PATTERN_KEY_XSTEP
argument_list|)
argument_list|)
operator|!=
literal|null
expr_stmt|;
name|res
operator|=
name|res
operator|&&
name|pattern
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|PATTERN_KEY_YSTEP
argument_list|)
argument_list|)
operator|!=
literal|null
expr_stmt|;
if|if
condition|(
operator|!
name|res
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_GRAPHIC_INVALID_PATTERN_DEFINITION
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
comment|/*    * (non-Javadoc)    *     * @see net.awl.edoc.pdfa.validation.graphics.XObjectValidator#validate()    */
specifier|public
name|List
argument_list|<
name|ValidationError
argument_list|>
name|validate
parameter_list|()
throws|throws
name|ValidationException
block|{
name|List
argument_list|<
name|ValidationError
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|ValidationError
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|isValid
init|=
name|checkMandatoryFields
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|isValid
operator|=
name|isValid
operator|&&
name|parsePatternContent
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

