begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|font
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|DICTIONARY_KEY_SUBTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|DICTIONARY_KEY_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|ERROR_FONTS_DICTIONARY_INVALID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|FONT_DICTIONARY_VALUE_COMPOSITE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|FONT_DICTIONARY_VALUE_MMTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|FONT_DICTIONARY_VALUE_TRUETYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|FONT_DICTIONARY_VALUE_TYPE0
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|FONT_DICTIONARY_VALUE_TYPE0C
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|FONT_DICTIONARY_VALUE_TYPE1
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|FONT_DICTIONARY_VALUE_TYPE1C
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|FONT_DICTIONARY_VALUE_TYPE2
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|FONT_DICTIONARY_VALUE_TYPE3
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|DocumentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSObject
import|;
end_import

begin_comment
comment|/**  * This class returns a FontValidator object according to the Font dictionary.  */
end_comment

begin_class
specifier|public
class|class
name|FontValidatorFactory
block|{
specifier|public
name|FontValidator
name|getFontValidator
parameter_list|(
name|COSObject
name|cObj
parameter_list|,
name|DocumentHandler
name|handler
parameter_list|)
throws|throws
name|ValidationException
block|{
name|COSDictionary
name|dic
init|=
operator|(
name|COSDictionary
operator|)
name|cObj
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|String
name|type
init|=
name|dic
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|DICTIONARY_KEY_TYPE
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|subtype
init|=
name|dic
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|DICTIONARY_KEY_SUBTYPE
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|type
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|type
argument_list|)
operator|)
operator|||
operator|(
name|subtype
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|subtype
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|ValidationException
argument_list|(
literal|"Type and/or Subtype keys are missing : "
operator|+
name|ERROR_FONTS_DICTIONARY_INVALID
argument_list|)
throw|;
block|}
else|else
block|{
if|if
condition|(
name|FONT_DICTIONARY_VALUE_TRUETYPE
operator|.
name|equals
argument_list|(
name|subtype
argument_list|)
condition|)
block|{
return|return
operator|new
name|TrueTypeFontValidator
argument_list|(
name|handler
argument_list|,
name|cObj
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|FONT_DICTIONARY_VALUE_MMTYPE
operator|.
name|equals
argument_list|(
name|subtype
argument_list|)
operator|||
name|FONT_DICTIONARY_VALUE_TYPE1
operator|.
name|equals
argument_list|(
name|subtype
argument_list|)
condition|)
block|{
return|return
operator|new
name|Type1FontValidator
argument_list|(
name|handler
argument_list|,
name|cObj
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|FONT_DICTIONARY_VALUE_TYPE3
operator|.
name|equals
argument_list|(
name|subtype
argument_list|)
condition|)
block|{
return|return
operator|new
name|Type3FontValidator
argument_list|(
name|handler
argument_list|,
name|cObj
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|FONT_DICTIONARY_VALUE_COMPOSITE
operator|.
name|equals
argument_list|(
name|subtype
argument_list|)
condition|)
block|{
return|return
operator|new
name|CompositeFontValidator
argument_list|(
name|handler
argument_list|,
name|cObj
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|FONT_DICTIONARY_VALUE_TYPE2
operator|.
name|equals
argument_list|(
name|subtype
argument_list|)
operator|||
name|FONT_DICTIONARY_VALUE_TYPE1C
operator|.
name|equals
argument_list|(
name|subtype
argument_list|)
operator|||
name|FONT_DICTIONARY_VALUE_TYPE0C
operator|.
name|equals
argument_list|(
name|subtype
argument_list|)
operator|||
name|FONT_DICTIONARY_VALUE_TYPE0
operator|.
name|equals
argument_list|(
name|subtype
argument_list|)
condition|)
block|{
comment|// ---- Font managed by a Composite font.
comment|// this dictionary will be checked by a CompositeFontValidator
return|return
literal|null
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|ValidationException
argument_list|(
literal|"Unknown font type : "
operator|+
name|subtype
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

