begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|helpers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|DocumentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidatorConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationResult
operator|.
name|ValidationError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|actions
operator|.
name|AbstractActionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|annotation
operator|.
name|AnnotationValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|contentstream
operator|.
name|ContentStreamWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|graphics
operator|.
name|ExtGStateContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|graphics
operator|.
name|ShadingPattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocumentCatalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAnnotation
import|;
end_import

begin_class
specifier|public
class|class
name|PagesValidationHelper
extends|extends
name|AbstractValidationHelper
block|{
specifier|public
name|PagesValidationHelper
parameter_list|(
name|ValidatorConfig
name|cfg
parameter_list|)
throws|throws
name|ValidationException
block|{
name|super
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
block|}
comment|/*    * (non-Javadoc)    *     * @see    * net.awl.edoc.pdfa.validation.helpers.AbstractValidationHelper#innerValidate    * (net.awl.edoc.pdfa.validation.DocumentHandler)    */
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ValidationError
argument_list|>
name|innerValidate
parameter_list|(
name|DocumentHandler
name|handler
parameter_list|)
throws|throws
name|ValidationException
block|{
name|List
argument_list|<
name|ValidationError
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|ValidationError
argument_list|>
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|PDDocumentCatalog
name|catalog
init|=
name|handler
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocumentCatalog
argument_list|()
decl_stmt|;
if|if
condition|(
name|catalog
operator|!=
literal|null
condition|)
block|{
comment|// ---- PDFBox provides a method which returns all pages in a List.
comment|// Currently, it is useless to explore the Pages hierarchy.
name|List
argument_list|<
name|?
argument_list|>
name|pages
init|=
name|catalog
operator|.
name|getAllPages
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pages
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|validatePage
argument_list|(
operator|(
name|PDPage
operator|)
name|pages
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|handler
argument_list|,
name|result
argument_list|)
condition|)
block|{
return|return
name|result
return|;
block|}
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|ValidationException
argument_list|(
literal|"There are no Catalog entry in the Document."
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * This method checks the given page. Only a part of element contained by the    * page will be checked, like :    *<UL>    *<li>Presence of mandatory elements    *<li>The page content when it is possible (ex : text area)    *<li>The Additional Actions are authorized    *<li>etc...    *</UL>    *     * @param page    * @param handler    * @param result    * @return    */
specifier|protected
name|boolean
name|validatePage
parameter_list|(
name|PDPage
name|page
parameter_list|,
name|DocumentHandler
name|handler
parameter_list|,
name|List
argument_list|<
name|ValidationError
argument_list|>
name|result
parameter_list|)
throws|throws
name|ValidationException
block|{
name|boolean
name|isValid
init|=
name|validateActions
argument_list|(
name|page
argument_list|,
name|handler
argument_list|,
name|result
argument_list|)
decl_stmt|;
name|isValid
operator|=
name|isValid
operator|&&
name|validateAnnotation
argument_list|(
name|page
argument_list|,
name|handler
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|isValid
operator|=
name|isValid
operator|&&
name|validateTransparency
argument_list|(
name|page
argument_list|,
name|handler
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|isValid
operator|=
name|isValid
operator|&&
name|validateContent
argument_list|(
name|page
argument_list|,
name|handler
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|isValid
operator|=
name|isValid
operator|&&
name|validateShadingPattern
argument_list|(
name|page
argument_list|,
name|handler
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|isValid
return|;
block|}
comment|/**    * This method checks additional actions contained in the given Page object.    *     * @param page    * @param handler    * @param result    * @return    * @throws ValidationException    */
specifier|protected
name|boolean
name|validateActions
parameter_list|(
name|PDPage
name|page
parameter_list|,
name|DocumentHandler
name|handler
parameter_list|,
name|List
argument_list|<
name|ValidationError
argument_list|>
name|result
parameter_list|)
throws|throws
name|ValidationException
block|{
comment|// ---- get AA (additional actions) entry if it is present
name|List
argument_list|<
name|AbstractActionManager
argument_list|>
name|lActions
init|=
name|this
operator|.
name|actionFact
operator|.
name|getActions
argument_list|(
name|page
operator|.
name|getCOSDictionary
argument_list|()
argument_list|,
name|handler
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocument
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|AbstractActionManager
name|action
range|:
name|lActions
control|)
block|{
if|if
condition|(
operator|!
name|action
operator|.
name|valid
argument_list|(
literal|true
argument_list|,
name|result
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * This method check the ExtGState entry of the resource dictionary.    *     * @param page    * @param handler    * @param result    * @return    * @throws ValidationException    */
specifier|protected
name|boolean
name|validateTransparency
parameter_list|(
name|PDPage
name|page
parameter_list|,
name|DocumentHandler
name|handler
parameter_list|,
name|List
argument_list|<
name|ValidationError
argument_list|>
name|result
parameter_list|)
throws|throws
name|ValidationException
block|{
name|PDResources
name|resources
init|=
name|page
operator|.
name|getResources
argument_list|()
decl_stmt|;
name|COSDocument
name|cDoc
init|=
name|handler
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocument
argument_list|()
decl_stmt|;
name|ExtGStateContainer
name|extGStates
init|=
operator|new
name|ExtGStateContainer
argument_list|(
name|resources
operator|.
name|getCOSDictionary
argument_list|()
argument_list|,
name|cDoc
argument_list|)
decl_stmt|;
return|return
name|extGStates
operator|.
name|validateTransparencyRules
argument_list|(
name|result
argument_list|)
return|;
comment|// ---- Even if a Group entry is possible in the Page dictionary, No
comment|// restrictions are defined by PDF/A
block|}
comment|/**    * This method check the Shading entry of the resource dictionary if exists.    *     * @param page    * @param handler    * @param result    * @return    * @throws ValidationException    */
specifier|protected
name|boolean
name|validateShadingPattern
parameter_list|(
name|PDPage
name|page
parameter_list|,
name|DocumentHandler
name|handler
parameter_list|,
name|List
argument_list|<
name|ValidationError
argument_list|>
name|result
parameter_list|)
throws|throws
name|ValidationException
block|{
name|PDResources
name|resources
init|=
name|page
operator|.
name|getResources
argument_list|()
decl_stmt|;
name|COSDictionary
name|shadings
init|=
operator|(
name|COSDictionary
operator|)
name|resources
operator|.
name|getCOSDictionary
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|PATTERN_KEY_SHADING
argument_list|)
decl_stmt|;
name|boolean
name|res
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|shadings
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Object
name|key
range|:
name|shadings
operator|.
name|keySet
argument_list|()
control|)
block|{
name|COSDictionary
name|aShading
init|=
operator|(
name|COSDictionary
operator|)
name|shadings
operator|.
name|getDictionaryObject
argument_list|(
operator|(
name|COSName
operator|)
name|key
argument_list|)
decl_stmt|;
name|ShadingPattern
name|sp
init|=
operator|new
name|ShadingPattern
argument_list|(
name|handler
argument_list|,
name|aShading
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ValidationError
argument_list|>
name|lErrors
init|=
name|sp
operator|.
name|validate
argument_list|()
decl_stmt|;
if|if
condition|(
name|lErrors
operator|!=
literal|null
operator|&&
operator|!
name|lErrors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|result
operator|.
name|addAll
argument_list|(
name|lErrors
argument_list|)
expr_stmt|;
name|res
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
return|return
name|res
return|;
block|}
comment|/**    *     * @param page    * @param handler    * @param result    * @return    * @throws ValidationException    */
specifier|protected
name|boolean
name|validateContent
parameter_list|(
name|PDPage
name|page
parameter_list|,
name|DocumentHandler
name|handler
parameter_list|,
name|List
argument_list|<
name|ValidationError
argument_list|>
name|result
parameter_list|)
throws|throws
name|ValidationException
block|{
name|ContentStreamWrapper
name|csWrapper
init|=
operator|new
name|ContentStreamWrapper
argument_list|(
name|handler
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ValidationError
argument_list|>
name|csParseErrors
init|=
name|csWrapper
operator|.
name|validPageContentStream
argument_list|(
name|page
argument_list|)
decl_stmt|;
if|if
condition|(
name|csParseErrors
operator|==
literal|null
operator|||
name|csParseErrors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
name|result
operator|.
name|addAll
argument_list|(
name|csParseErrors
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|/**    *     * @param page    * @param handler    * @param result    * @return    * @throws ValidationException    */
specifier|protected
name|boolean
name|validateAnnotation
parameter_list|(
name|PDPage
name|page
parameter_list|,
name|DocumentHandler
name|handler
parameter_list|,
name|List
argument_list|<
name|ValidationError
argument_list|>
name|result
parameter_list|)
throws|throws
name|ValidationException
block|{
try|try
block|{
name|List
argument_list|<
name|?
argument_list|>
name|lAnnots
init|=
name|page
operator|.
name|getAnnotations
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|object
range|:
name|lAnnots
control|)
block|{
if|if
condition|(
name|object
operator|instanceof
name|PDAnnotation
condition|)
block|{
name|COSDictionary
name|cosAnnot
init|=
operator|(
operator|(
name|PDAnnotation
operator|)
name|object
operator|)
operator|.
name|getDictionary
argument_list|()
decl_stmt|;
name|AnnotationValidator
name|validator
init|=
name|this
operator|.
name|annotFact
operator|.
name|getAnnotationValidator
argument_list|(
name|cosAnnot
argument_list|,
name|handler
argument_list|,
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
name|validator
operator|!=
literal|null
condition|)
block|{
return|return
name|validator
operator|.
name|validate
argument_list|(
name|result
argument_list|)
return|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ValidationException
argument_list|(
literal|"Unable to access Annotation"
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// --- No annotations, validation OK
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

