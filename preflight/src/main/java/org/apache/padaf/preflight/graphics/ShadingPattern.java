begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|graphics
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|DICTIONARY_KEY_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|ERROR_GRAPHIC_INVALID_PATTERN_DEFINITION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|PATTERN_KEY_SHADING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|PATTERN_KEY_SHADING_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|TRANPARENCY_DICTIONARY_KEY_EXTGSTATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|XOBJECT_DICTIONARY_KEY_COLOR_SPACE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|DocumentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationResult
operator|.
name|ValidationError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|graphics
operator|.
name|color
operator|.
name|ColorSpaceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|graphics
operator|.
name|color
operator|.
name|ColorSpaceHelperFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|graphics
operator|.
name|color
operator|.
name|ColorSpaceHelperFactory
operator|.
name|ColorSpaceRestriction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|utils
operator|.
name|COSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_comment
comment|/**  * This class process the validation of a ShadingPattern object.  */
end_comment

begin_class
specifier|public
class|class
name|ShadingPattern
implements|implements
name|XObjectValidator
block|{
comment|/**    * COSDictionary which represent the shading pattern.    */
specifier|private
name|COSDictionary
name|pattern
init|=
literal|null
decl_stmt|;
comment|/**    * The COSDocument which contains the shading pattern to check.    */
specifier|private
name|COSDocument
name|cosDoc
init|=
literal|null
decl_stmt|;
comment|/**    * The document handler which contains useful information to process the    * validation.    */
specifier|private
name|DocumentHandler
name|documentHandler
init|=
literal|null
decl_stmt|;
comment|/**    * @param _handler    *          DocumentHandler used to initialize "documentHandler" and "cosDoc"    *          attributes.    * @param _pattern    *          COSDictionary used to initialize the shading pattern to validate.    */
specifier|public
name|ShadingPattern
parameter_list|(
name|DocumentHandler
name|_handler
parameter_list|,
name|COSDictionary
name|_pattern
parameter_list|)
block|{
name|this
operator|.
name|documentHandler
operator|=
name|_handler
expr_stmt|;
name|this
operator|.
name|pattern
operator|=
name|_pattern
expr_stmt|;
name|this
operator|.
name|cosDoc
operator|=
name|this
operator|.
name|documentHandler
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocument
argument_list|()
expr_stmt|;
block|}
comment|/**    * Because of a Shading Pattern can be used as an Indirect Object or Directly    * define in an other dictionary, there are two ways to obtain the Shading    * Pattern dictionary according to the pattern attribute. This method returns    * the Shading pattern dictionary represented by the pattern attribute or    * contained in it.    *     * This is the first method called by the validate method.    *     * @param errors    *          the list of error to update if there are no Shading pattern in the    *          pattern COSDictionary.    * @return the ShadingPattern dictionary    */
specifier|protected
name|COSDictionary
name|getShadingDictionary
parameter_list|(
name|List
argument_list|<
name|ValidationError
argument_list|>
name|errors
parameter_list|)
block|{
if|if
condition|(
operator|!
literal|"Shading"
operator|.
name|equals
argument_list|(
name|pattern
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|DICTIONARY_KEY_TYPE
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
name|COSBase
name|shading
init|=
name|pattern
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|PATTERN_KEY_SHADING
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|shading
operator|==
literal|null
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_GRAPHIC_INVALID_PATTERN_DEFINITION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|COSUtils
operator|.
name|getAsDictionary
argument_list|(
name|shading
argument_list|,
name|cosDoc
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|pattern
return|;
block|}
block|}
comment|/**    * Checks if the given shading pattern contains the ShadingType entry and if    * the ColorSapce entry is consistent which rules of the PDF Reference and the    * ISO 190005-1:2005 Specification.    *     * This method is called by the validate method.    *     * @param shadingDict    *          the Shading pattern dictionary to check    * @param errors    *          the list of error to update if the validation fails    * @return true if the Shading pattern is valid, false otherwise.    * @throws ValidationException    */
specifier|protected
name|boolean
name|checkShadingDictionary
parameter_list|(
name|COSDictionary
name|shadingDict
parameter_list|,
name|List
argument_list|<
name|ValidationError
argument_list|>
name|errors
parameter_list|)
throws|throws
name|ValidationException
block|{
if|if
condition|(
name|shadingDict
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|PATTERN_KEY_SHADING_TYPE
argument_list|)
argument_list|)
operator|==
literal|null
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_GRAPHIC_INVALID_PATTERN_DEFINITION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|COSBase
name|csImg
init|=
name|shadingDict
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|XOBJECT_DICTIONARY_KEY_COLOR_SPACE
argument_list|)
argument_list|)
decl_stmt|;
name|ColorSpaceHelper
name|csh
init|=
name|ColorSpaceHelperFactory
operator|.
name|getColorSpaceHelper
argument_list|(
name|csImg
argument_list|,
name|documentHandler
argument_list|,
name|ColorSpaceRestriction
operator|.
name|NO_PATTERN
argument_list|)
decl_stmt|;
return|return
name|csh
operator|.
name|validate
argument_list|(
name|errors
argument_list|)
return|;
block|}
comment|/**    * Check the Extended Graphic State contains in the ShadingPattern dictionary    * if it is present. To check this ExtGState, this method uses the    * net.awl.edoc.pdfa.validation.graphics.ExtGStateContainer object.    *     * @param errors    *          the list of error to update if the validation fails    * @return true is the ExtGState is missing or valid, false otherwise.    * @throws ValidationException    */
specifier|protected
name|boolean
name|checkGraphicState
parameter_list|(
name|List
argument_list|<
name|ValidationError
argument_list|>
name|errors
parameter_list|)
throws|throws
name|ValidationException
block|{
name|COSDictionary
name|resources
init|=
operator|(
name|COSDictionary
operator|)
name|this
operator|.
name|pattern
operator|.
name|getDictionaryObject
argument_list|(
name|TRANPARENCY_DICTIONARY_KEY_EXTGSTATE
argument_list|)
decl_stmt|;
if|if
condition|(
name|resources
operator|!=
literal|null
condition|)
block|{
name|ExtGStateContainer
name|extContainer
init|=
operator|new
name|ExtGStateContainer
argument_list|(
name|resources
argument_list|,
name|cosDoc
argument_list|)
decl_stmt|;
return|return
name|extContainer
operator|.
name|validateTransparencyRules
argument_list|(
name|errors
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/*    * (non-Javadoc)    *     * @see net.awl.edoc.pdfa.validation.graphics.XObjectValidator#validate()    */
specifier|public
name|List
argument_list|<
name|ValidationError
argument_list|>
name|validate
parameter_list|()
throws|throws
name|ValidationException
block|{
name|List
argument_list|<
name|ValidationError
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|ValidationError
argument_list|>
argument_list|()
decl_stmt|;
name|COSDictionary
name|shading
init|=
name|getShadingDictionary
argument_list|(
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
name|shading
operator|!=
literal|null
condition|)
block|{
name|boolean
name|isValid
init|=
name|checkShadingDictionary
argument_list|(
name|shading
argument_list|,
name|result
argument_list|)
decl_stmt|;
name|isValid
operator|=
name|isValid
operator|&&
name|checkGraphicState
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

