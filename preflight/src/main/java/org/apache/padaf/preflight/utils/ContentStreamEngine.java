begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|utils
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|ERROR_GRAPHIC_INVALID_COLOR_SPACE_CMYK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|ERROR_GRAPHIC_INVALID_COLOR_SPACE_MISSING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|ERROR_GRAPHIC_INVALID_COLOR_SPACE_RGB
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|ERROR_GRAPHIC_TOO_MANY_GRAPHIC_STATES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|ERROR_GRAPHIC_UNEXPECTED_VALUE_FOR_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|ERROR_SYNTAX_STREAM_INVALID_FILTER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|ERROR_SYNTAX_STREAM_UNDEFINED_FILTER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|MAX_GRAPHIC_STATES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|STREAM_DICTIONARY_KEY_COLOR_SPACE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|STREAM_DICTIONARY_KEY_F
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|STREAM_DICTIONARY_KEY_FILTER
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|color
operator|.
name|ColorSpace
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|color
operator|.
name|ICC_ColorSpace
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|DocumentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationResult
operator|.
name|ValidationError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|contentstream
operator|.
name|ContentStreamException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|contentstream
operator|.
name|StubOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|graphics
operator|.
name|ICCProfileWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|graphics
operator|.
name|color
operator|.
name|ColorSpaceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|graphics
operator|.
name|color
operator|.
name|ColorSpaceHelperFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|graphics
operator|.
name|color
operator|.
name|ColorSpaceHelperFactory
operator|.
name|ColorSpaceRestriction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|graphics
operator|.
name|color
operator|.
name|ColorSpaces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDCalGray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDCalRGB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDColorSpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDColorState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDICCBased
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDLab
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|PDFOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|PDFStreamEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|BeginText
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|Concatenate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|EndText
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|GRestore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|GSave
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|Invoke
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|MoveText
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|MoveTextSetLeading
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|NextLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|OperatorProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|SetCharSpacing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|SetHorizontalTextScaling
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|SetLineCapStyle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|SetLineDashPattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|SetLineJoinStyle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|SetLineWidth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|SetMatrix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|SetNonStrokingCMYKColor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|SetNonStrokingColor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|SetNonStrokingColorSpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|SetNonStrokingRGBColor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|SetStrokingCMYKColor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|SetStrokingColor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|SetStrokingColorSpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|SetStrokingRGBColor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|SetTextFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|SetTextLeading
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|SetTextRenderingMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|SetTextRise
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|SetWordSpacing
import|;
end_import

begin_comment
comment|/**  * This class inherits from org.apache.pdfbox.util.PDFStreamEngine to allow the  * validation of specific rules in ContentStream.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|ContentStreamEngine
extends|extends
name|PDFStreamEngine
block|{
specifier|private
enum|enum
name|ColorSpaceType
block|{
name|RGB
block|,
name|CMYK
block|,
name|ALL
block|; 	}
specifier|protected
name|DocumentHandler
name|documentHandler
init|=
literal|null
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|OperatorProcessor
argument_list|>
name|contentStreamEngineOperators
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|OperatorProcessor
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|ContentStreamEngine
parameter_list|(
name|DocumentHandler
name|_handler
parameter_list|)
block|{
name|this
operator|.
name|documentHandler
operator|=
name|_handler
expr_stmt|;
comment|// ---- Graphics operators
name|registerOperatorProcessor
argument_list|(
literal|"w"
argument_list|,
operator|new
name|SetLineWidth
argument_list|()
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"cm"
argument_list|,
operator|new
name|Concatenate
argument_list|()
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"CS"
argument_list|,
operator|new
name|SetStrokingColorSpace
argument_list|()
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"cs"
argument_list|,
operator|new
name|SetNonStrokingColorSpace
argument_list|()
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"d"
argument_list|,
operator|new
name|SetLineDashPattern
argument_list|()
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"Do"
argument_list|,
operator|new
name|Invoke
argument_list|()
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"j"
argument_list|,
operator|new
name|SetLineJoinStyle
argument_list|()
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"J"
argument_list|,
operator|new
name|SetLineCapStyle
argument_list|()
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"K"
argument_list|,
operator|new
name|SetStrokingCMYKColor
argument_list|()
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"k"
argument_list|,
operator|new
name|SetNonStrokingCMYKColor
argument_list|()
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"rg"
argument_list|,
operator|new
name|SetNonStrokingRGBColor
argument_list|()
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"RG"
argument_list|,
operator|new
name|SetStrokingRGBColor
argument_list|()
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"SC"
argument_list|,
operator|new
name|SetStrokingColor
argument_list|()
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"SCN"
argument_list|,
operator|new
name|SetStrokingColor
argument_list|()
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"sc"
argument_list|,
operator|new
name|SetNonStrokingColor
argument_list|()
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"scn"
argument_list|,
operator|new
name|SetNonStrokingColor
argument_list|()
argument_list|)
expr_stmt|;
comment|// ---- Graphics state
name|registerOperatorProcessor
argument_list|(
literal|"Q"
argument_list|,
operator|new
name|GRestore
argument_list|()
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"q"
argument_list|,
operator|new
name|GSave
argument_list|()
argument_list|)
expr_stmt|;
comment|// ---- Text operators
name|registerOperatorProcessor
argument_list|(
literal|"BT"
argument_list|,
operator|new
name|BeginText
argument_list|()
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"ET"
argument_list|,
operator|new
name|EndText
argument_list|()
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"Tf"
argument_list|,
operator|new
name|SetTextFont
argument_list|()
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"Tr"
argument_list|,
operator|new
name|SetTextRenderingMode
argument_list|()
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"Tm"
argument_list|,
operator|new
name|SetMatrix
argument_list|()
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"Td"
argument_list|,
operator|new
name|MoveText
argument_list|()
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"T*"
argument_list|,
operator|new
name|NextLine
argument_list|()
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"TD"
argument_list|,
operator|new
name|MoveTextSetLeading
argument_list|()
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"Tc"
argument_list|,
operator|new
name|SetCharSpacing
argument_list|()
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"TL"
argument_list|,
operator|new
name|SetTextLeading
argument_list|()
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"Ts"
argument_list|,
operator|new
name|SetTextRise
argument_list|()
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"Tw"
argument_list|,
operator|new
name|SetWordSpacing
argument_list|()
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"Tz"
argument_list|,
operator|new
name|SetHorizontalTextScaling
argument_list|()
argument_list|)
expr_stmt|;
comment|// ---- Do not use the PDFBox Operator, because of the PageDrawer class cast
comment|// Or because the Operator doesn't exist
name|StubOperator
name|so
init|=
operator|new
name|StubOperator
argument_list|()
decl_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"l"
argument_list|,
name|so
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"re"
argument_list|,
name|so
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"c"
argument_list|,
name|so
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"y"
argument_list|,
name|so
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"v"
argument_list|,
name|so
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"n"
argument_list|,
name|so
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"BI"
argument_list|,
name|so
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"EI"
argument_list|,
name|so
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"m"
argument_list|,
name|so
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"W*"
argument_list|,
name|so
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"W"
argument_list|,
name|so
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"h"
argument_list|,
name|so
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"Tj"
argument_list|,
name|so
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"TJ"
argument_list|,
name|so
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"'"
argument_list|,
name|so
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"\""
argument_list|,
name|so
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"b"
argument_list|,
name|so
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"B"
argument_list|,
name|so
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"b*"
argument_list|,
name|so
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"B*"
argument_list|,
name|so
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"BDC"
argument_list|,
name|so
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"BMC"
argument_list|,
name|so
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"DP"
argument_list|,
name|so
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"EMC"
argument_list|,
name|so
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"d0"
argument_list|,
name|so
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"d1"
argument_list|,
name|so
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"f"
argument_list|,
name|so
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"F"
argument_list|,
name|so
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"f*"
argument_list|,
name|so
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"g"
argument_list|,
name|so
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"G"
argument_list|,
name|so
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"M"
argument_list|,
name|so
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"MP"
argument_list|,
name|so
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"gs"
argument_list|,
name|so
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"h"
argument_list|,
name|so
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"i"
argument_list|,
name|so
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"ri"
argument_list|,
name|so
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"s"
argument_list|,
name|so
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"S"
argument_list|,
name|so
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"sh"
argument_list|,
name|so
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|registerOperatorProcessor
parameter_list|(
name|String
name|operator
parameter_list|,
name|OperatorProcessor
name|op
parameter_list|)
block|{
name|super
operator|.
name|registerOperatorProcessor
argument_list|(
name|operator
argument_list|,
name|op
argument_list|)
expr_stmt|;
name|contentStreamEngineOperators
operator|.
name|put
argument_list|(
name|operator
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Check operands of the "ri" operator. Operands must exist in the 	 * RenderingIntent list. (net.awl.edoc.pdfa.validation.utils.RenderingIntents) 	 *  	 * @param operator 	 *          the "ri" operator 	 * @param arguments 	 *          the "ri" operands 	 * @throws ContentStreamException 	 *           ERROR_GRAPHIC_UNEXPECTED_VALUE_FOR_KEY if the operand is invalid 	 */
specifier|protected
name|void
name|validRenderingIntent
parameter_list|(
name|PDFOperator
name|operator
parameter_list|,
name|List
name|arguments
parameter_list|)
throws|throws
name|ContentStreamException
block|{
if|if
condition|(
literal|"ri"
operator|.
name|equals
argument_list|(
name|operator
operator|.
name|getOperation
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|RenderingIntents
operator|.
name|contains
argument_list|(
name|arguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
name|throwContentStreamException
argument_list|(
literal|"Unexpected value '"
operator|+
name|arguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|+
literal|"' for ri operand. "
argument_list|,
name|ERROR_GRAPHIC_UNEXPECTED_VALUE_FOR_KEY
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** 	 * Valid the number of graphic states if the operator is the Save Graphic state operator ("q") 	 * @param operator 	 * @throws ContentStreamException 	 */
specifier|protected
name|void
name|validNumberOfGraphicStates
parameter_list|(
name|PDFOperator
name|operator
parameter_list|)
throws|throws
name|ContentStreamException
block|{
if|if
condition|(
literal|"q"
operator|.
name|equals
argument_list|(
name|operator
operator|.
name|getOperation
argument_list|()
argument_list|)
condition|)
block|{
name|int
name|numberOfGraphicStates
init|=
name|this
operator|.
name|getGraphicsStack
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|numberOfGraphicStates
operator|>
name|MAX_GRAPHIC_STATES
condition|)
block|{
name|throwContentStreamException
argument_list|(
literal|"Too many graphic states"
argument_list|,
name|ERROR_GRAPHIC_TOO_MANY_GRAPHIC_STATES
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** 	 * Throw a ContentStreamException if the LZW filter is used in a InlinedImage. 	 *  	 * @param operator 	 *          the InlinedImage object (BI to EI) 	 * @throws ContentStreamException 	 */
specifier|protected
name|void
name|validImageFilter
parameter_list|(
name|PDFOperator
name|operator
parameter_list|)
throws|throws
name|ContentStreamException
block|{
name|COSDictionary
name|dict
init|=
name|operator
operator|.
name|getImageParameters
argument_list|()
operator|.
name|getDictionary
argument_list|()
decl_stmt|;
comment|// ---- Search a Filter declaration in the InlinedImage dictionary.
comment|// ---- The LZWDecode Filter is forbidden.
name|String
name|filter
init|=
name|dict
operator|.
name|getNameAsString
argument_list|(
name|STREAM_DICTIONARY_KEY_F
argument_list|)
decl_stmt|;
if|if
condition|(
name|filter
operator|==
literal|null
condition|)
block|{
name|filter
operator|=
name|dict
operator|.
name|getNameAsString
argument_list|(
name|STREAM_DICTIONARY_KEY_FILTER
argument_list|)
expr_stmt|;
block|}
name|String
name|errorCode
init|=
name|FilterHelper
operator|.
name|isAuthorizedFilter
argument_list|(
name|filter
argument_list|)
decl_stmt|;
if|if
condition|(
name|errorCode
operator|!=
literal|null
condition|)
block|{
comment|// --- LZW is forbidden.
if|if
condition|(
name|ERROR_SYNTAX_STREAM_INVALID_FILTER
operator|.
name|equals
argument_list|(
name|errorCode
argument_list|)
condition|)
block|{
name|throwContentStreamException
argument_list|(
literal|"LZW filter can't be used in a PDF/A File"
argument_list|,
name|ERROR_SYNTAX_STREAM_INVALID_FILTER
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|throwContentStreamException
argument_list|(
literal|"This filter isn't defined in the PDF Reference Third Edition."
argument_list|,
name|ERROR_SYNTAX_STREAM_UNDEFINED_FILTER
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** 	 * This method validates if the ColorSpace used by the InlinedImage is 	 * consistent with the color space defined in OutputIntent dictionaries. 	 *  	 * @param operator 	 *          the InlinedImage object (BI to EI) 	 * @throws ContentStreamException 	 */
specifier|protected
name|void
name|validImageColorSpace
parameter_list|(
name|PDFOperator
name|operator
parameter_list|)
throws|throws
name|ContentStreamException
throws|,
name|IOException
block|{
name|COSDictionary
name|dict
init|=
name|operator
operator|.
name|getImageParameters
argument_list|()
operator|.
name|getDictionary
argument_list|()
decl_stmt|;
name|COSDocument
name|doc
init|=
name|this
operator|.
name|documentHandler
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocument
argument_list|()
decl_stmt|;
name|COSBase
name|csInlinedBase
init|=
name|dict
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|STREAM_DICTIONARY_KEY_COLOR_SPACE
argument_list|)
argument_list|)
decl_stmt|;
name|ColorSpaceHelper
name|csHelper
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|csInlinedBase
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|COSUtils
operator|.
name|isString
argument_list|(
name|csInlinedBase
argument_list|,
name|doc
argument_list|)
condition|)
block|{
comment|// ---- In InlinedImage only DeviceGray/RGB/CMYK and restricted Indexed
comment|// color spaces
comment|// are allowed.
name|String
name|colorSpace
init|=
name|COSUtils
operator|.
name|getAsString
argument_list|(
name|csInlinedBase
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|ColorSpaces
name|cs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cs
operator|=
name|ColorSpaces
operator|.
name|valueOf
argument_list|(
name|colorSpace
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// ---- The color space is unknown.
comment|// ---- Try to access the resources dictionary, the color space can be
comment|// a reference.
name|PDColorSpace
name|pdCS
init|=
operator|(
name|PDColorSpace
operator|)
name|this
operator|.
name|getColorSpaces
argument_list|()
operator|.
name|get
argument_list|(
name|colorSpace
argument_list|)
decl_stmt|;
if|if
condition|(
name|pdCS
operator|!=
literal|null
condition|)
block|{
name|cs
operator|=
name|ColorSpaces
operator|.
name|valueOf
argument_list|(
name|pdCS
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|csHelper
operator|=
name|ColorSpaceHelperFactory
operator|.
name|getColorSpaceHelper
argument_list|(
name|pdCS
argument_list|,
name|documentHandler
argument_list|,
name|ColorSpaceRestriction
operator|.
name|ONLY_DEVICE
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|cs
operator|==
literal|null
condition|)
block|{
name|throwContentStreamException
argument_list|(
literal|"The ColorSpace is unknown"
argument_list|,
name|ERROR_GRAPHIC_UNEXPECTED_VALUE_FOR_KEY
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|csHelper
operator|==
literal|null
condition|)
block|{
name|csHelper
operator|=
name|ColorSpaceHelperFactory
operator|.
name|getColorSpaceHelper
argument_list|(
name|csInlinedBase
argument_list|,
name|documentHandler
argument_list|,
name|ColorSpaceRestriction
operator|.
name|ONLY_DEVICE
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|ValidationError
argument_list|>
name|errors
init|=
operator|new
name|ArrayList
argument_list|<
name|ValidationError
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|csHelper
operator|.
name|validate
argument_list|(
name|errors
argument_list|)
condition|)
block|{
name|ValidationError
name|ve
init|=
name|errors
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|throwContentStreamException
argument_list|(
name|ve
operator|.
name|getDetails
argument_list|()
argument_list|,
name|ve
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ValidationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
comment|/** 	 * This method validates if the ColorOperator can be used with the color space 	 * defined in OutputIntent dictionaries. 	 *  	 * @param operator 	 *          the color operator 	 * @throws ContentStreamException 	 */
specifier|protected
name|void
name|checkColorOperators
parameter_list|(
name|String
name|operation
parameter_list|)
throws|throws
name|ContentStreamException
block|{
name|PDColorState
name|cs
init|=
name|getColorState
argument_list|(
name|operation
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"rg"
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
operator|||
literal|"RG"
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|validColorSpace
argument_list|(
name|cs
argument_list|,
name|ColorSpaceType
operator|.
name|RGB
argument_list|)
condition|)
block|{
name|throwContentStreamException
argument_list|(
literal|"The operator \""
operator|+
name|operation
operator|+
literal|"\" can't be used with CMYK Profile"
argument_list|,
name|ERROR_GRAPHIC_INVALID_COLOR_SPACE_RGB
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|"k"
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
operator|||
literal|"K"
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|validColorSpace
argument_list|(
name|cs
argument_list|,
name|ColorSpaceType
operator|.
name|CMYK
argument_list|)
condition|)
block|{
name|throwContentStreamException
argument_list|(
literal|"The operator \""
operator|+
name|operation
operator|+
literal|"\" can't be used with RGB Profile"
argument_list|,
name|ERROR_GRAPHIC_INVALID_COLOR_SPACE_CMYK
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|"g"
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
operator|||
literal|"G"
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|validColorSpace
argument_list|(
name|cs
argument_list|,
name|ColorSpaceType
operator|.
name|ALL
argument_list|)
condition|)
block|{
name|throwContentStreamException
argument_list|(
literal|"The operator \""
operator|+
name|operation
operator|+
literal|"\" can't be used without Color Profile"
argument_list|,
name|ERROR_GRAPHIC_INVALID_COLOR_SPACE_MISSING
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|"f"
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
operator|||
literal|"F"
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
operator|||
literal|"f*"
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
operator|||
literal|"B"
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
operator|||
literal|"B*"
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
operator|||
literal|"b"
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
operator|||
literal|"b*"
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|validColorSpace
argument_list|(
name|cs
argument_list|,
name|ColorSpaceType
operator|.
name|ALL
argument_list|)
condition|)
block|{
comment|// ---- The default fill color needs an OutputIntent
name|throwContentStreamException
argument_list|(
literal|"The operator \""
operator|+
name|operation
operator|+
literal|"\" can't be used without Color Profile"
argument_list|,
name|ERROR_GRAPHIC_INVALID_COLOR_SPACE_MISSING
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|boolean
name|validColorSpace
parameter_list|(
name|PDColorState
name|colorState
parameter_list|,
name|ColorSpaceType
name|expectedType
parameter_list|)
block|{
name|boolean
name|result
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|colorState
operator|==
literal|null
condition|)
block|{
name|result
operator|=
name|validColorSpaceDestOutputProfile
argument_list|(
name|expectedType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PDColorSpace
name|cs
init|=
name|colorState
operator|.
name|getColorSpace
argument_list|()
decl_stmt|;
if|if
condition|(
name|isDeviceIndependent
argument_list|(
name|cs
argument_list|,
name|expectedType
argument_list|)
condition|)
block|{
name|result
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|validColorSpaceDestOutputProfile
argument_list|(
name|expectedType
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/** 	 * Check if the ColorProfile provided by the DestOutputProfile entry isn't null and  	 * if the ColorSpace represented by the Profile has the right type (RGB or CMYK) 	 *  	 * @param expectedType 	 * @return 	 */
specifier|private
name|boolean
name|validColorSpaceDestOutputProfile
parameter_list|(
name|ColorSpaceType
name|expectedType
parameter_list|)
block|{
name|boolean
name|result
init|=
literal|false
decl_stmt|;
name|ICCProfileWrapper
name|profileWrapper
init|=
name|documentHandler
operator|.
name|getIccProfileWrapper
argument_list|()
decl_stmt|;
if|if
condition|(
name|profileWrapper
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|expectedType
condition|)
block|{
case|case
name|RGB
case|:
name|result
operator|=
name|profileWrapper
operator|.
name|isRGBColorSpace
argument_list|()
expr_stmt|;
break|break;
case|case
name|CMYK
case|:
name|result
operator|=
name|profileWrapper
operator|.
name|isCMYKColorSpace
argument_list|()
expr_stmt|;
break|break;
default|default:
name|result
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/** 	 * Return true if the given ColorSpace is an independent device ColorSpace. 	 * If the color space is an ICCBased, check the embedded profile color (RGB or CMYK) 	 * @param cs 	 * @return 	 */
specifier|private
name|boolean
name|isDeviceIndependent
parameter_list|(
name|PDColorSpace
name|cs
parameter_list|,
name|ColorSpaceType
name|expectedType
parameter_list|)
block|{
name|boolean
name|result
init|=
operator|(
name|cs
operator|instanceof
name|PDCalGray
operator|||
name|cs
operator|instanceof
name|PDCalRGB
operator|||
name|cs
operator|instanceof
name|PDLab
operator|)
decl_stmt|;
if|if
condition|(
name|cs
operator|instanceof
name|PDICCBased
condition|)
block|{
name|PDICCBased
name|iccBased
init|=
operator|(
name|PDICCBased
operator|)
name|cs
decl_stmt|;
try|try
block|{
name|ColorSpace
name|iccColorSpace
init|=
name|iccBased
operator|.
name|getJavaColorSpace
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|expectedType
condition|)
block|{
case|case
name|RGB
case|:
name|result
operator|=
operator|(
name|iccColorSpace
operator|.
name|getType
argument_list|()
operator|==
name|ICC_ColorSpace
operator|.
name|TYPE_RGB
operator|)
expr_stmt|;
break|break;
case|case
name|CMYK
case|:
name|result
operator|=
operator|(
name|iccColorSpace
operator|.
name|getType
argument_list|()
operator|==
name|ICC_ColorSpace
operator|.
name|TYPE_CMYK
operator|)
expr_stmt|;
break|break;
default|default:
name|result
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|result
operator|=
literal|false
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/** 	 * Return the current color state used by the operation 	 * @param operation 	 * @return 	 */
specifier|private
name|PDColorState
name|getColorState
parameter_list|(
name|String
name|operation
parameter_list|)
block|{
if|if
condition|(
name|getGraphicsState
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|PDColorState
name|colorState
decl_stmt|;
if|if
condition|(
name|operation
operator|.
name|equals
argument_list|(
literal|"rg"
argument_list|)
operator|||
name|operation
operator|.
name|equals
argument_list|(
literal|"g"
argument_list|)
operator|||
name|operation
operator|.
name|equals
argument_list|(
literal|"k"
argument_list|)
operator|||
name|operation
operator|.
name|equals
argument_list|(
literal|"f"
argument_list|)
operator|||
name|operation
operator|.
name|equals
argument_list|(
literal|"F"
argument_list|)
operator|||
name|operation
operator|.
name|equals
argument_list|(
literal|"f*"
argument_list|)
condition|)
block|{
comment|// non stroking operator
name|colorState
operator|=
name|getGraphicsState
argument_list|()
operator|.
name|getNonStrokingColor
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// stroking operator
name|colorState
operator|=
name|getGraphicsState
argument_list|()
operator|.
name|getStrokingColor
argument_list|()
expr_stmt|;
block|}
return|return
name|colorState
return|;
block|}
comment|/** 	 * This method validates if the ColorSpace used as operand is consistent with 	 * the color space defined in OutputIntent dictionaries. 	 *  	 * @param operator 	 * @param arguments 	 * @throws IOException 	 */
specifier|protected
name|void
name|checkSetColorSpaceOperators
parameter_list|(
name|PDFOperator
name|operator
parameter_list|,
name|List
argument_list|<
name|?
argument_list|>
name|arguments
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
operator|(
literal|"CS"
operator|.
name|equals
argument_list|(
name|operator
operator|.
name|getOperation
argument_list|()
argument_list|)
operator|||
literal|"cs"
operator|.
name|equals
argument_list|(
name|operator
operator|.
name|getOperation
argument_list|()
argument_list|)
operator|)
condition|)
block|{
return|return;
block|}
name|String
name|colorSpaceName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|arguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|String
condition|)
block|{
name|colorSpaceName
operator|=
operator|(
name|String
operator|)
name|arguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|COSString
condition|)
block|{
name|colorSpaceName
operator|=
operator|(
operator|(
name|COSString
operator|)
name|arguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|COSName
condition|)
block|{
name|colorSpaceName
operator|=
operator|(
operator|(
name|COSName
operator|)
name|arguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|throwContentStreamException
argument_list|(
literal|"The operand doesn't have the expected type"
argument_list|,
name|ERROR_GRAPHIC_UNEXPECTED_VALUE_FOR_KEY
argument_list|)
expr_stmt|;
block|}
name|ColorSpaceHelper
name|csHelper
init|=
literal|null
decl_stmt|;
name|ColorSpaces
name|cs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cs
operator|=
name|ColorSpaces
operator|.
name|valueOf
argument_list|(
name|colorSpaceName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// ---- The color space is unknown.
comment|// ---- Try to access the resources dictionary, the color space can be a
comment|// reference.
name|PDColorSpace
name|pdCS
init|=
operator|(
name|PDColorSpace
operator|)
name|this
operator|.
name|getColorSpaces
argument_list|()
operator|.
name|get
argument_list|(
name|colorSpaceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|pdCS
operator|!=
literal|null
condition|)
block|{
name|cs
operator|=
name|ColorSpaces
operator|.
name|valueOf
argument_list|(
name|pdCS
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|csHelper
operator|=
name|ColorSpaceHelperFactory
operator|.
name|getColorSpaceHelper
argument_list|(
name|pdCS
argument_list|,
name|documentHandler
argument_list|,
name|ColorSpaceRestriction
operator|.
name|NO_RESTRICTION
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|cs
operator|==
literal|null
condition|)
block|{
name|throwContentStreamException
argument_list|(
literal|"The ColorSpace is unknown"
argument_list|,
name|ERROR_GRAPHIC_UNEXPECTED_VALUE_FOR_KEY
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|csHelper
operator|==
literal|null
condition|)
block|{
name|csHelper
operator|=
name|ColorSpaceHelperFactory
operator|.
name|getColorSpaceHelper
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|colorSpaceName
argument_list|)
argument_list|,
name|documentHandler
argument_list|,
name|ColorSpaceRestriction
operator|.
name|NO_RESTRICTION
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|ValidationError
argument_list|>
name|errors
init|=
operator|new
name|ArrayList
argument_list|<
name|ValidationError
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|csHelper
operator|.
name|validate
argument_list|(
name|errors
argument_list|)
condition|)
block|{
name|ValidationError
name|ve
init|=
name|errors
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|throwContentStreamException
argument_list|(
name|ve
operator|.
name|getDetails
argument_list|()
argument_list|,
name|ve
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ValidationException
name|e
parameter_list|)
block|{
comment|//      throw new IOException(e.getMessage(), e); java 6
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/** 	 * Build a ContentStreamException using the given parameters 	 *  	 * @param msg 	 *          exception details 	 * @param errorCode 	 *          the error code. 	 * @throws ContentStreamException 	 */
specifier|protected
name|void
name|throwContentStreamException
parameter_list|(
name|String
name|msg
parameter_list|,
name|String
name|errorCode
parameter_list|)
throws|throws
name|ContentStreamException
block|{
name|ContentStreamException
name|cex
init|=
operator|new
name|ContentStreamException
argument_list|(
name|msg
argument_list|)
decl_stmt|;
name|cex
operator|.
name|setValidationError
argument_list|(
name|errorCode
argument_list|)
expr_stmt|;
throw|throw
name|cex
throw|;
block|}
block|}
end_class

end_unit

