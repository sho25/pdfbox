begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|font
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Font
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|FontFormatException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cff
operator|.
name|CFFFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cff
operator|.
name|CFFParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|DocumentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationResult
operator|.
name|ValidationError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|font
operator|.
name|type1
operator|.
name|Type1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|font
operator|.
name|type1
operator|.
name|Type1Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|utils
operator|.
name|COSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDStream
import|;
end_import

begin_class
specifier|public
class|class
name|Type1FontValidator
extends|extends
name|SimpleFontValidator
block|{
specifier|public
name|Type1FontValidator
parameter_list|(
name|DocumentHandler
name|handler
parameter_list|,
name|COSObject
name|obj
parameter_list|)
throws|throws
name|ValidationException
block|{
name|super
argument_list|(
name|handler
argument_list|,
name|obj
argument_list|)
expr_stmt|;
block|}
comment|/* 	 * (non-Javadoc) 	 *  	 * @seenet.awl.edoc.pdfa.validation.font.SimpleFontValidator# 	 * checkSpecificMandatoryFields() 	 */
specifier|protected
name|boolean
name|checkSpecificMandatoryFields
parameter_list|()
block|{
comment|// ---- name is required only in a PDF-1.0.
comment|// ---- Currently our grammar matches only with PDF-1.[1-4]
comment|// ---- baseFont is required and is usually the FontName
if|if
condition|(
name|basefont
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|basefont
argument_list|)
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_DICTIONARY_INVALID
argument_list|,
literal|"BaseFont is missing"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|boolean
name|allPresent
init|=
operator|(
name|firstChar
operator|!=
literal|null
operator|&&
name|lastChar
operator|!=
literal|null
operator|&&
name|widths
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|allPresent
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_DICTIONARY_INVALID
argument_list|,
literal|"Required keys are missing"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// else
comment|// ---- Event if the Font is one of the 14 standard Fonts, those keys are
comment|// mandatory for a PDF/A
return|return
literal|true
return|;
block|}
comment|/* 	 * (non-Javadoc) 	 *  	 * @see 	 * net.awl.edoc.pdfa.validation.font.SimpleFontValidator#checkEncoding(org 	 * .apache.pdfbox.cos.COSDocument) 	 */
specifier|protected
name|boolean
name|checkEncoding
parameter_list|(
name|COSDocument
name|cDoc
parameter_list|)
block|{
if|if
condition|(
name|COSUtils
operator|.
name|isString
argument_list|(
name|this
operator|.
name|encoding
argument_list|,
name|cDoc
argument_list|)
condition|)
block|{
name|String
name|encodingName
init|=
name|COSUtils
operator|.
name|getAsString
argument_list|(
name|this
operator|.
name|encoding
argument_list|,
name|cDoc
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|encodingName
operator|.
name|equals
argument_list|(
name|FONT_DICTIONARY_VALUE_ENCODING_MAC
argument_list|)
operator|||
name|encodingName
operator|.
name|equals
argument_list|(
name|FONT_DICTIONARY_VALUE_ENCODING_MAC_EXP
argument_list|)
operator|||
name|encodingName
operator|.
name|equals
argument_list|(
name|FONT_DICTIONARY_VALUE_ENCODING_WIN
argument_list|)
operator|||
name|encodingName
operator|.
name|equals
argument_list|(
name|FONT_DICTIONARY_VALUE_ENCODING_PDFDOC
argument_list|)
operator|||
name|encodingName
operator|.
name|equals
argument_list|(
name|FONT_DICTIONARY_VALUE_ENCODING_STD
argument_list|)
operator|)
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_ENCODING
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|COSUtils
operator|.
name|isDictionary
argument_list|(
name|this
operator|.
name|encoding
argument_list|,
name|cDoc
argument_list|)
condition|)
block|{
name|this
operator|.
name|pFont
operator|.
name|getFontEncoding
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|encoding
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_ENCODING
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|//else
comment|// ---- According to PDF Reference, the encoding entry is optional.
comment|// PDF/A specification only speaks of TrueType encoding
return|return
literal|true
return|;
block|}
comment|/* 	 * (non-Javadoc) 	 *  	 * @see 	 * net.awl.edoc.pdfa.validation.font.SimpleFontValidator#checkFontDescriptor() 	 */
annotation|@
name|Override
specifier|protected
name|boolean
name|checkFontDescriptor
parameter_list|()
throws|throws
name|ValidationException
block|{
name|boolean
name|res
init|=
name|checkFontDescriptorMandatoryFields
argument_list|()
decl_stmt|;
name|res
operator|=
name|res
operator|&&
name|checkFontName
argument_list|()
expr_stmt|;
name|res
operator|=
name|res
operator|&&
name|checkFontFileElement
argument_list|()
expr_stmt|;
return|return
name|res
return|;
block|}
comment|/** 	 * Check if the font name is present and if fontName equals to the baseName. 	 * If the validation fails, false is returned and the FontContainer is 	 * updated. 	 *  	 * @return 	 */
name|boolean
name|checkFontName
parameter_list|()
block|{
name|String
name|fontName
init|=
name|this
operator|.
name|pFontDesc
operator|.
name|getFontName
argument_list|()
decl_stmt|;
name|String
name|baseName
init|=
name|this
operator|.
name|pFont
operator|.
name|getBaseFont
argument_list|()
decl_stmt|;
comment|// For a Type1 Font, the FontName is the same as the BaseName.
if|if
condition|(
name|fontName
operator|==
literal|null
operator|||
operator|(
operator|!
name|fontName
operator|.
name|equals
argument_list|(
name|baseName
argument_list|)
operator|)
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationResult
operator|.
name|ValidationError
argument_list|(
name|ERROR_FONTS_DESCRIPTOR_INVALID
argument_list|,
literal|"The FontName in font descriptor isn't the same as the BaseFont in the Font dictionary"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/** 	 * This methods validates the Font Stream, if the font program is damaged or 	 * missing the FontContainer is updated and false is returned. 	 *  	 * @throws ValidationException 	 */
specifier|protected
name|boolean
name|checkFontFileElement
parameter_list|()
throws|throws
name|ValidationException
block|{
comment|// ---- if the this font is a Subset, the CharSet entry must be present in
comment|// the FontDescriptor
if|if
condition|(
name|isSubSet
argument_list|(
name|pFontDesc
operator|.
name|getFontName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|charsetStr
init|=
name|pFontDesc
operator|.
name|getCharSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|charsetStr
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|charsetStr
argument_list|)
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationResult
operator|.
name|ValidationError
argument_list|(
name|ERROR_FONTS_CHARSET_MISSING_FOR_SUBSET
argument_list|,
literal|"The Charset entry is missing for the Type1 Subset"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|// ---- FontFile Validation
name|PDStream
name|ff1
init|=
name|pFontDesc
operator|.
name|getFontFile
argument_list|()
decl_stmt|;
name|PDStream
name|ff2
init|=
name|pFontDesc
operator|.
name|getFontFile2
argument_list|()
decl_stmt|;
name|PDStream
name|ff3
init|=
name|pFontDesc
operator|.
name|getFontFile3
argument_list|()
decl_stmt|;
name|boolean
name|onlyOne
init|=
operator|(
name|ff1
operator|!=
literal|null
operator|&&
name|ff2
operator|==
literal|null
operator|&&
name|ff3
operator|==
literal|null
operator|)
operator|||
operator|(
name|ff1
operator|==
literal|null
operator|&&
name|ff2
operator|!=
literal|null
operator|&&
name|ff3
operator|==
literal|null
operator|)
operator|||
operator|(
name|ff1
operator|==
literal|null
operator|&&
name|ff2
operator|==
literal|null
operator|&&
name|ff3
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
operator|(
name|ff1
operator|==
literal|null
operator|&&
operator|(
name|ff3
operator|==
literal|null
operator|||
operator|!
literal|"Type1C"
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|COSDictionary
operator|)
name|ff3
operator|.
name|getCOSObject
argument_list|()
operator|)
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|)
argument_list|)
operator|)
operator|)
operator|||
operator|!
name|onlyOne
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationResult
operator|.
name|ValidationError
argument_list|(
name|ERROR_FONTS_FONT_FILEX_INVALID
argument_list|,
literal|"The FontFile is invalid"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|ff1
operator|!=
literal|null
condition|)
block|{
name|COSStream
name|stream
init|=
name|ff1
operator|.
name|getStream
argument_list|()
decl_stmt|;
if|if
condition|(
name|stream
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationResult
operator|.
name|ValidationError
argument_list|(
name|ERROR_FONTS_FONT_FILEX_INVALID
argument_list|,
literal|"The FontFile is missing"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|fontContainer
operator|.
name|setFontProgramEmbedded
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|boolean
name|hasLength1
init|=
name|stream
operator|.
name|getInt
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|FONT_DICTIONARY_KEY_LENGTH1
argument_list|)
argument_list|)
operator|>
literal|0
decl_stmt|;
name|boolean
name|hasLength2
init|=
name|stream
operator|.
name|getInt
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|FONT_DICTIONARY_KEY_LENGTH2
argument_list|)
argument_list|)
operator|>
literal|0
decl_stmt|;
name|boolean
name|hasLength3
init|=
name|stream
operator|.
name|getInt
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|FONT_DICTIONARY_KEY_LENGTH3
argument_list|)
argument_list|)
operator|>
literal|0
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|hasLength1
operator|&&
name|hasLength2
operator|&&
name|hasLength3
operator|)
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationResult
operator|.
name|ValidationError
argument_list|(
name|ERROR_FONTS_FONT_FILEX_INVALID
argument_list|,
literal|"The FontFile is invalid"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// ---- Stream validation should be done by the StreamValidateHelper.
comment|// ---- Process font specific check
comment|// ---- try to load the font using the java.awt.font object.
comment|// ---- if the font is invalid, an exception will be thrown
name|ByteArrayInputStream
name|bis
init|=
literal|null
decl_stmt|;
try|try
block|{
name|bis
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|ff1
operator|.
name|getByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|Font
operator|.
name|createFont
argument_list|(
name|Font
operator|.
name|TYPE1_FONT
argument_list|,
name|bis
argument_list|)
expr_stmt|;
return|return
name|checkFontMetricsDataAndFeedFontContainer
argument_list|(
name|ff1
argument_list|)
operator|&&
name|checkFontFileMetaData
argument_list|(
name|pFontDesc
argument_list|,
name|ff1
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationResult
operator|.
name|ValidationError
argument_list|(
name|ERROR_FONTS_TYPE1_DAMAGED
argument_list|,
literal|"The FontFile can't be read"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|FontFormatException
name|e
parameter_list|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationResult
operator|.
name|ValidationError
argument_list|(
name|ERROR_FONTS_TYPE1_DAMAGED
argument_list|,
literal|"The FontFile is damaged"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|bis
operator|!=
literal|null
condition|)
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|bis
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
return|return
name|checkCIDFontWidths
argument_list|(
name|ff3
argument_list|)
operator|&&
name|checkFontFileMetaData
argument_list|(
name|pFontDesc
argument_list|,
name|ff3
argument_list|)
return|;
block|}
block|}
comment|/** 	 * Type1C is a CFF font format, extract all CFFFont object from the stream 	 *  	 * @param fontStream 	 * @return 	 * @throws ValidationException 	 */
specifier|protected
name|boolean
name|checkCIDFontWidths
parameter_list|(
name|PDStream
name|fontStream
parameter_list|)
throws|throws
name|ValidationException
block|{
try|try
block|{
name|CFFParser
name|cffParser
init|=
operator|new
name|CFFParser
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CFFFont
argument_list|>
name|lCFonts
init|=
name|cffParser
operator|.
name|parse
argument_list|(
name|fontStream
operator|.
name|getByteArray
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lCFonts
operator|==
literal|null
operator|||
name|lCFonts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationResult
operator|.
name|ValidationError
argument_list|(
name|ERROR_FONTS_CID_DAMAGED
argument_list|,
literal|"The FontFile can't be read"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
operator|(
operator|(
name|Type1FontContainer
operator|)
name|this
operator|.
name|fontContainer
operator|)
operator|.
name|setCFFFontObjects
argument_list|(
name|lCFonts
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationResult
operator|.
name|ValidationError
argument_list|(
name|ERROR_FONTS_CID_DAMAGED
argument_list|,
literal|"The FontFile can't be read"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|/** 	 * This method checks the metric consistency and adds the FontContainer in the 	 * DocumentHandler. 	 *  	 * @param fontStream 	 * @return 	 * @throws ValidationException 	 */
specifier|protected
name|boolean
name|checkFontMetricsDataAndFeedFontContainer
parameter_list|(
name|PDStream
name|fontStream
parameter_list|)
throws|throws
name|ValidationException
block|{
try|try
block|{
comment|// ---- Parse the Type1 Font program
name|ByteArrayInputStream
name|bis
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|fontStream
operator|.
name|getByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|COSStream
name|streamObj
init|=
name|fontStream
operator|.
name|getStream
argument_list|()
decl_stmt|;
name|int
name|length1
init|=
name|streamObj
operator|.
name|getInt
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|FONT_DICTIONARY_KEY_LENGTH1
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|length2
init|=
name|streamObj
operator|.
name|getInt
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|FONT_DICTIONARY_KEY_LENGTH2
argument_list|)
argument_list|)
decl_stmt|;
name|Type1Parser
name|parserForMetrics
init|=
name|Type1Parser
operator|.
name|createParserWithEncodingObject
argument_list|(
name|bis
argument_list|,
name|length1
argument_list|,
name|length2
argument_list|,
name|pFont
operator|.
name|getFontEncoding
argument_list|()
argument_list|)
decl_stmt|;
name|Type1
name|parsedData
init|=
name|parserForMetrics
operator|.
name|parse
argument_list|()
decl_stmt|;
operator|(
operator|(
name|Type1FontContainer
operator|)
name|this
operator|.
name|fontContainer
operator|)
operator|.
name|setFontObject
argument_list|(
name|parsedData
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ValidationException
argument_list|(
literal|"Unable to check Type1 metrics due to : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

