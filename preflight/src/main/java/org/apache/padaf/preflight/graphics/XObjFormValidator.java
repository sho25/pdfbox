begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|graphics
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|DICTIONARY_KEY_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|ERROR_GRAPHIC_INVALID_BBOX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|ERROR_GRAPHIC_MISSING_FIELD
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|ERROR_GRAPHIC_TRANSPARENCY_GROUP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|PATTERN_KEY_SHADING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|XOBJECT_DICTIONARY_KEY_BBOX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|XOBJECT_DICTIONARY_KEY_GROUP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|XOBJECT_DICTIONARY_KEY_GROUP_S
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|XOBJECT_DICTIONARY_VALUE_S_TRANSPARENCY
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|DocumentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationResult
operator|.
name|ValidationError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|contentstream
operator|.
name|ContentStreamWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|utils
operator|.
name|COSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|xobject
operator|.
name|PDXObjectForm
import|;
end_import

begin_comment
comment|/**  * This class validates XObject with the Form subtype.  */
end_comment

begin_class
specifier|public
class|class
name|XObjFormValidator
extends|extends
name|AbstractXObjValidator
block|{
comment|/**    * High level object which represents the XObjectForm    */
name|PDXObjectForm
name|pdXObj
init|=
literal|null
decl_stmt|;
specifier|public
name|XObjFormValidator
parameter_list|(
name|DocumentHandler
name|handler
parameter_list|,
name|COSStream
name|xobj
parameter_list|)
block|{
name|super
argument_list|(
name|handler
argument_list|,
name|xobj
argument_list|)
expr_stmt|;
name|this
operator|.
name|pdXObj
operator|=
operator|new
name|PDXObjectForm
argument_list|(
name|xobj
argument_list|)
expr_stmt|;
block|}
comment|/*    * (non-Javadoc)    *     * @see net.awl.edoc.pdfa.validation.graphics.AbstractXObjValidator#validate()    */
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ValidationError
argument_list|>
name|validate
parameter_list|()
throws|throws
name|ValidationException
block|{
name|List
argument_list|<
name|ValidationError
argument_list|>
name|result
init|=
name|super
operator|.
name|validate
argument_list|()
decl_stmt|;
name|checkExtGraphicState
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|checkGroup
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|checkSubtype2Value
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|validateXObjectContent
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|validateShadingPattern
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/*    * (non-Javadoc)    *     * @seenet.awl.edoc.pdfa.validation.graphics.AbstractXObjValidator#    * checkMandatoryFields(java.util.List)    */
annotation|@
name|Override
specifier|protected
name|boolean
name|checkMandatoryFields
parameter_list|(
name|List
argument_list|<
name|ValidationError
argument_list|>
name|result
parameter_list|)
block|{
name|boolean
name|lastMod
init|=
name|this
operator|.
name|xobject
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"LastModified"
argument_list|)
argument_list|)
operator|!=
literal|null
decl_stmt|;
name|boolean
name|pieceInfo
init|=
name|this
operator|.
name|xobject
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"PieceInfo"
argument_list|)
argument_list|)
operator|!=
literal|null
decl_stmt|;
comment|// type and subtype checked before to create the Validator.
if|if
condition|(
name|lastMod
operator|^
name|pieceInfo
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_GRAPHIC_MISSING_FIELD
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|COSBase
name|bbBase
init|=
name|this
operator|.
name|xobject
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|XOBJECT_DICTIONARY_KEY_BBOX
argument_list|)
argument_list|)
decl_stmt|;
comment|// ---- BBox is an Array (Rectangle)
if|if
condition|(
name|bbBase
operator|==
literal|null
operator|||
operator|!
name|COSUtils
operator|.
name|isArray
argument_list|(
name|bbBase
argument_list|,
name|cosDocument
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_GRAPHIC_INVALID_BBOX
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * An Form XObject is a ContentStream. This method method uses an instance of    * ContentStreamWrapper to check the Stream of this Form XObject.    *     * @param result    *          the list of error to update if the validation fails.    * @return true if the validation succeed, false otherwise.    * @throws ValidationException    */
specifier|protected
name|boolean
name|validateXObjectContent
parameter_list|(
name|List
argument_list|<
name|ValidationError
argument_list|>
name|result
parameter_list|)
throws|throws
name|ValidationException
block|{
name|ContentStreamWrapper
name|csWrapper
init|=
operator|new
name|ContentStreamWrapper
argument_list|(
name|handler
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ValidationError
argument_list|>
name|csParseErrors
init|=
name|csWrapper
operator|.
name|validXObjContentStream
argument_list|(
name|pdXObj
argument_list|)
decl_stmt|;
if|if
condition|(
name|csParseErrors
operator|==
literal|null
operator|||
operator|(
name|csParseErrors
operator|!=
literal|null
operator|&&
name|csParseErrors
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|result
operator|.
name|addAll
argument_list|(
name|csParseErrors
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|/**    * A Form XObject may contain a Group object (Key =" Group"). If a Group    * object is present, this method checks if the S entry is present and if its    * value is different from "Transparency".    *     * @param error    *          the list of error to update if the validation fails.    * @return true if the validation succeed, false otherwise    * @throws ValidationException    */
specifier|protected
name|boolean
name|checkGroup
parameter_list|(
name|List
argument_list|<
name|ValidationError
argument_list|>
name|error
parameter_list|)
throws|throws
name|ValidationException
block|{
name|COSBase
name|baseGroup
init|=
name|this
operator|.
name|xobject
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|XOBJECT_DICTIONARY_KEY_GROUP
argument_list|)
argument_list|)
decl_stmt|;
name|COSDictionary
name|groupDictionary
init|=
name|COSUtils
operator|.
name|getAsDictionary
argument_list|(
name|baseGroup
argument_list|,
name|cosDocument
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupDictionary
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|XOBJECT_DICTIONARY_KEY_GROUP
operator|.
name|equals
argument_list|(
name|groupDictionary
operator|.
name|getNameAsString
argument_list|(
name|DICTIONARY_KEY_TYPE
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ValidationException
argument_list|(
literal|"The Group dictionary hasn't Group as Type value"
argument_list|)
throw|;
block|}
name|String
name|sVal
init|=
name|groupDictionary
operator|.
name|getNameAsString
argument_list|(
name|XOBJECT_DICTIONARY_KEY_GROUP_S
argument_list|)
decl_stmt|;
if|if
condition|(
name|sVal
operator|==
literal|null
operator|||
name|XOBJECT_DICTIONARY_VALUE_S_TRANSPARENCY
operator|.
name|equals
argument_list|(
name|sVal
argument_list|)
condition|)
block|{
name|error
operator|.
name|add
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_GRAPHIC_TRANSPARENCY_GROUP
argument_list|,
literal|"Group has a transparency S entry or the S entry is null."
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Check the Extended Graphic State contains in the Form XObject if it is    * present. To check this ExtGState, this method uses the    * net.awl.edoc.pdfa.validation.graphics.ExtGStateContainer object.    *     * @param errors    *          the list of error to update if the validation fails    * @return true is the ExtGState is missing or valid, false otherwise.    * @throws ValidationException    */
specifier|protected
name|boolean
name|checkExtGraphicState
parameter_list|(
name|List
argument_list|<
name|ValidationError
argument_list|>
name|error
parameter_list|)
throws|throws
name|ValidationException
block|{
name|PDResources
name|resources
init|=
name|this
operator|.
name|pdXObj
operator|.
name|getResources
argument_list|()
decl_stmt|;
if|if
condition|(
name|resources
operator|!=
literal|null
condition|)
block|{
name|ExtGStateContainer
name|extContainer
init|=
operator|new
name|ExtGStateContainer
argument_list|(
name|resources
operator|.
name|getCOSDictionary
argument_list|()
argument_list|,
name|this
operator|.
name|cosDocument
argument_list|)
decl_stmt|;
return|return
name|extContainer
operator|.
name|validateTransparencyRules
argument_list|(
name|error
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * This method check the Shading entry of the resource dictionary if exists.    * To process this validation, an instance of ShadinPattern is used.    *     * @param result    *          the list of error to update if the validation fails    * @return true if the validation succeed, false otherwise.    * @throws ValidationException    */
specifier|protected
name|boolean
name|validateShadingPattern
parameter_list|(
name|List
argument_list|<
name|ValidationError
argument_list|>
name|result
parameter_list|)
throws|throws
name|ValidationException
block|{
name|PDResources
name|resources
init|=
name|this
operator|.
name|pdXObj
operator|.
name|getResources
argument_list|()
decl_stmt|;
name|boolean
name|res
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|resources
operator|!=
literal|null
condition|)
block|{
name|COSDictionary
name|shadings
init|=
operator|(
name|COSDictionary
operator|)
name|resources
operator|.
name|getCOSDictionary
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|PATTERN_KEY_SHADING
argument_list|)
decl_stmt|;
if|if
condition|(
name|shadings
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Object
name|key
range|:
name|shadings
operator|.
name|keySet
argument_list|()
control|)
block|{
name|COSDictionary
name|aShading
init|=
operator|(
name|COSDictionary
operator|)
name|shadings
operator|.
name|getDictionaryObject
argument_list|(
operator|(
name|COSName
operator|)
name|key
argument_list|)
decl_stmt|;
name|ShadingPattern
name|sp
init|=
operator|new
name|ShadingPattern
argument_list|(
name|handler
argument_list|,
name|aShading
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ValidationError
argument_list|>
name|lErrors
init|=
name|sp
operator|.
name|validate
argument_list|()
decl_stmt|;
if|if
condition|(
name|lErrors
operator|!=
literal|null
operator|&&
operator|!
name|lErrors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|result
operator|.
name|addAll
argument_list|(
name|lErrors
argument_list|)
expr_stmt|;
name|res
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|res
return|;
block|}
comment|/**    * Check if there are no PS entry in the Form XObject dictionary    *     * @param errors    *          the list of error to update if the validation fails.    * @return true if PS entry is missing, false otherwise    */
specifier|protected
name|boolean
name|checkPS
parameter_list|(
name|List
argument_list|<
name|ValidationError
argument_list|>
name|errors
parameter_list|)
block|{
comment|// 6.2.4 and 6.2.5 no PS
if|if
condition|(
name|this
operator|.
name|xobject
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"PS"
argument_list|)
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ValidationConstants
operator|.
name|ERROR_GRAPHIC_UNEXPECTED_KEY
argument_list|,
literal|"Unexpected 'PS' Key"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Check the SUbtype2 entry according to the §6.2.5 of the ISO 190005-1:2005    * specification.    *     * @param errors    *          the list of error to update if the validation fails.    * @return true if Subtype2 is missing or different from PS, false otherwise    */
specifier|protected
name|boolean
name|checkSubtype2Value
parameter_list|(
name|List
argument_list|<
name|ValidationError
argument_list|>
name|errors
parameter_list|)
block|{
comment|// 6.2.5 if Subtype2, value not PS
if|if
condition|(
name|this
operator|.
name|xobject
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"Subtype2"
argument_list|)
argument_list|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|"PS"
operator|.
name|equals
argument_list|(
name|this
operator|.
name|xobject
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"Subtype2"
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ValidationConstants
operator|.
name|ERROR_GRAPHIC_UNEXPECTED_VALUE_FOR_KEY
argument_list|,
literal|"Unexpected 'PS' value for 'Subtype2' Key"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

