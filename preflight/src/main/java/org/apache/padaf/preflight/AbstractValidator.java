begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationResult
operator|.
name|ValidationError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|helpers
operator|.
name|AbstractValidationHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|javacc
operator|.
name|ParseException
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractValidator
implements|implements
name|PdfAValidator
block|{
specifier|protected
name|ValidatorConfig
name|config
init|=
literal|null
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|version
init|=
literal|"${project.version}"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Charset
name|encoding
init|=
name|Charset
operator|.
name|forName
argument_list|(
literal|"ISO-8859-1"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|fullName
init|=
literal|"PADAF - "
operator|+
name|version
decl_stmt|;
specifier|protected
name|Collection
argument_list|<
name|AbstractValidationHelper
argument_list|>
name|priorHelpers
init|=
operator|new
name|ArrayList
argument_list|<
name|AbstractValidationHelper
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|Collection
argument_list|<
name|AbstractValidationHelper
argument_list|>
name|standHelpers
init|=
operator|new
name|ArrayList
argument_list|<
name|AbstractValidationHelper
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      *       * @param cfg      * @throws ValidationException      */
specifier|public
name|AbstractValidator
parameter_list|(
name|ValidatorConfig
name|cfg
parameter_list|)
throws|throws
name|ValidationException
block|{
name|config
operator|=
name|cfg
expr_stmt|;
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|AbstractValidationHelper
argument_list|>
argument_list|>
name|ph
init|=
name|cfg
operator|.
name|getPriorHelpers
argument_list|()
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
extends|extends
name|AbstractValidationHelper
argument_list|>
name|priorHlpCls
range|:
name|ph
control|)
block|{
name|this
operator|.
name|priorHelpers
operator|.
name|add
argument_list|(
name|instantiateHelper
argument_list|(
name|priorHlpCls
argument_list|,
name|cfg
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|AbstractValidationHelper
argument_list|>
argument_list|>
name|sh
init|=
name|cfg
operator|.
name|getStandHelpers
argument_list|()
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
extends|extends
name|AbstractValidationHelper
argument_list|>
name|standHlpCls
range|:
name|sh
control|)
block|{
name|this
operator|.
name|priorHelpers
operator|.
name|add
argument_list|(
name|instantiateHelper
argument_list|(
name|standHlpCls
argument_list|,
name|cfg
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Instantiate a ValidationHelper using the given class.      *       * @param avhCls      * @param cfg      * @return      * @throws ValidationException      */
specifier|private
name|AbstractValidationHelper
name|instantiateHelper
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|AbstractValidationHelper
argument_list|>
name|avhCls
parameter_list|,
name|ValidatorConfig
name|cfg
parameter_list|)
throws|throws
name|ValidationException
block|{
try|try
block|{
name|Constructor
argument_list|<
name|?
extends|extends
name|AbstractValidationHelper
argument_list|>
name|construct
init|=
name|avhCls
operator|.
name|getConstructor
argument_list|(
name|ValidatorConfig
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|construct
operator|.
name|newInstance
argument_list|(
name|cfg
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ValidationException
argument_list|(
literal|"Unable to create an instance of ValidationHelper : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ValidationException
argument_list|(
literal|"Unable to create an instance of ValidationHelper : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ValidationException
argument_list|(
literal|"Unable to create an instance of ValidationHelper : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ValidationException
argument_list|(
literal|"Unable to create an instance of ValidationHelper : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Create an instance of Document Handler.      * This method can be override if a inherited class of DocumentHandler       * must be used.      *       * @param source      * @return      */
specifier|protected
name|DocumentHandler
name|createDocumentHandler
parameter_list|(
name|DataSource
name|source
parameter_list|)
block|{
return|return
operator|new
name|DocumentHandler
argument_list|(
name|source
argument_list|)
return|;
block|}
comment|/**      * This method calls the validate method of the given ValidationHelper. A      * validation exception will be thrown if the Helper throws a validation      * exception and if the list of errors is empty.      *       * @param handler      *          the document handler which contains elements for the validation      * @param helper      *          An inherited class of AbstractValidationHelper.      * @param errors      *          A list of validation errors      * @throws ValidationException      */
specifier|protected
name|void
name|runValidation
parameter_list|(
name|DocumentHandler
name|handler
parameter_list|,
name|AbstractValidationHelper
name|helper
parameter_list|,
name|List
argument_list|<
name|ValidationError
argument_list|>
name|errors
parameter_list|)
throws|throws
name|ValidationException
block|{
try|try
block|{
name|errors
operator|.
name|addAll
argument_list|(
name|helper
operator|.
name|validate
argument_list|(
name|handler
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ValidationException
name|e
parameter_list|)
block|{
if|if
condition|(
name|errors
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// If there are no error, the Exception is thrown because of we can't
comment|// know if the
comment|// exception is due to a validation error or to a unexpected cause.
throw|throw
name|e
throw|;
block|}
block|}
block|}
comment|/**      * Create an instance of ValidationResult. This object contains an instance of      * ValidationError. If the ParseException is an instance of PdfParseException,      * the embedded validation error is initialized with the error code of the      * exception, otherwise it is an UnknownError.      *       * @param e      * @return      */
specifier|protected
name|ValidationResult
name|createErrorResult
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|PdfParseException
condition|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|ValidationResult
argument_list|(
operator|new
name|ValidationError
argument_list|(
operator|(
operator|(
name|PdfParseException
operator|)
name|e
operator|)
operator|.
name|getErrorCode
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|ValidationResult
argument_list|(
operator|new
name|ValidationError
argument_list|(
operator|(
operator|(
name|PdfParseException
operator|)
name|e
operator|)
operator|.
name|getErrorCode
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|ValidationResult
argument_list|(
operator|new
name|ValidationError
argument_list|(
operator|(
operator|(
name|PdfParseException
operator|)
name|e
operator|)
operator|.
name|getErrorCode
argument_list|()
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
return|return
name|createUnknownErrorResult
argument_list|()
return|;
block|}
comment|/**      * Create an instance of ValidationResult with a      * ValidationError(UNKNOWN_ERROR)      *       * @return      */
specifier|protected
name|ValidationResult
name|createUnknownErrorResult
parameter_list|()
block|{
name|ValidationError
name|error
init|=
operator|new
name|ValidationError
argument_list|(
name|ValidationConstants
operator|.
name|ERROR_UNKOWN_ERROR
argument_list|)
decl_stmt|;
name|ValidationResult
name|result
init|=
operator|new
name|ValidationResult
argument_list|(
name|error
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
comment|/* (non-Javadoc)      * @see net.padaf.preflight.PdfAValidator#getFullName()      */
specifier|public
name|String
name|getFullName
parameter_list|()
block|{
return|return
name|fullName
return|;
block|}
comment|/*      * (non-Javadoc)      * @see org.apache.padaf.preflight.PdfAValidator#getVersion()      */
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
return|return
name|version
return|;
block|}
block|}
end_class

end_unit

