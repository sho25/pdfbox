begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|graphics
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|DocumentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationResult
operator|.
name|ValidationError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|utils
operator|.
name|COSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSStream
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * This class processes commons validations of XObjects.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractXObjValidator
implements|implements
name|XObjectValidator
block|{
comment|/**    * The XObject to validate as a COSStream.    */
specifier|protected
name|COSStream
name|xobject
init|=
literal|null
decl_stmt|;
comment|/**    * The document handler which contains useful information to process    * validation.    */
specifier|protected
name|DocumentHandler
name|handler
init|=
literal|null
decl_stmt|;
comment|/**    * The PDF document as COSDocument.    */
specifier|protected
name|COSDocument
name|cosDocument
init|=
literal|null
decl_stmt|;
specifier|public
name|AbstractXObjValidator
parameter_list|(
name|DocumentHandler
name|handler
parameter_list|,
name|COSStream
name|xobj
parameter_list|)
block|{
name|this
operator|.
name|xobject
operator|=
name|xobj
expr_stmt|;
name|this
operator|.
name|handler
operator|=
name|handler
expr_stmt|;
name|this
operator|.
name|cosDocument
operator|=
name|handler
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocument
argument_list|()
expr_stmt|;
block|}
comment|/**    * This method checks the SMask entry in the XObject dictionary. According to    * the PDF Reference, a SMask in a XObject is a Stream. So if it is not null,    * it should be an error but a SMask with the name None is authorized in the    * PDF/A Specification 6.4. If the validation fails (SMask not null and    * different from None), the error list is updated with the error code    * ERROR_GRAPHIC_TRANSPARENCY_SMASK (2.2.2).    *     * @param error    *          the list of error to update if the validation fails    * @return true if the SMask is valid, false otherwise.    */
specifier|protected
name|boolean
name|checkSMask
parameter_list|(
name|List
argument_list|<
name|ValidationError
argument_list|>
name|error
parameter_list|)
block|{
name|COSBase
name|smask
init|=
name|xobject
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|TRANSPARENCY_DICTIONARY_KEY_SOFT_MASK
argument_list|)
argument_list|)
decl_stmt|;
comment|//
if|if
condition|(
name|smask
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|COSUtils
operator|.
name|isString
argument_list|(
name|smask
argument_list|,
name|cosDocument
argument_list|)
operator|&&
name|TRANSPARENCY_DICTIONARY_VALUE_SOFT_MASK_NONE
operator|.
name|equals
argument_list|(
name|COSUtils
operator|.
name|getAsString
argument_list|(
name|smask
argument_list|,
name|cosDocument
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|error
operator|.
name|add
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_GRAPHIC_TRANSPARENCY_SMASK
argument_list|,
literal|"Soft Mask must be null or None"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * According the ISO 190005:1-2005 specification, a XObject can't have an OPI    * entry in its dictionary. If the XObject has a OPI entry, the error list is    * updated with the error code ERROR_GRAPHIC_UNEXPECTED_KEY (2.3).    *     * @param errors    *          the list of error to update if the validation fails.    * @return true if the OPI is missing, false otherwise.    */
specifier|protected
name|boolean
name|checkOPI
parameter_list|(
name|List
argument_list|<
name|ValidationError
argument_list|>
name|errors
parameter_list|)
block|{
comment|// 6.2.4 and 6.2.5 no OPI
if|if
condition|(
name|this
operator|.
name|xobject
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"OPI"
argument_list|)
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ValidationConstants
operator|.
name|ERROR_GRAPHIC_UNEXPECTED_KEY
argument_list|,
literal|"Unexpected 'OPI' Key"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * According the ISO 190005:1-2005 specification, a XObject can't have an Ref    * entry in its dictionary. If the XObject has a Ref entry, the error list is    * updated with the error code ERROR_GRAPHIC_UNEXPECTED_KEY (2.3).    *     * @param errors    *          the list of error to update if the validation fails.    * @return true if the Ref is missing, false otherwise.    */
specifier|protected
name|boolean
name|checkReferenceXObject
parameter_list|(
name|List
argument_list|<
name|ValidationError
argument_list|>
name|errors
parameter_list|)
block|{
comment|// 6.2.6 No reference xobject
if|if
condition|(
name|this
operator|.
name|xobject
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"Ref"
argument_list|)
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_GRAPHIC_UNEXPECTED_KEY
argument_list|,
literal|"No reference Xobject allowed in PDF/A"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * According the ISO 190005:1-2005 specification, PostSCript XObject are    * forbidden. If the XObject is a PostScript XObject, the error list is    * updated with the error code ERROR_GRAPHIC_UNEXPECTED_VALUE_FOR_KEY (2.3.2).    *     * To know the if the object a Postscript XObject, "Subtype" and "Subtype2"    * entries are checked.    *     * @param errors    *          the list of error to update if the validation fails.    * @return true if the XObject isn't a Postscript XObject, false otherwise.    */
specifier|protected
name|boolean
name|checkPostscriptXObject
parameter_list|(
name|List
argument_list|<
name|ValidationError
argument_list|>
name|errors
parameter_list|)
block|{
comment|// 6.2.7 No PostScript XObjects
if|if
condition|(
name|this
operator|.
name|xobject
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|)
operator|!=
literal|null
operator|&&
name|XOBJECT_DICTIONARY_VALUE_SUBTYPE_POSTSCRIPT
operator|.
name|equals
argument_list|(
name|this
operator|.
name|xobject
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|)
argument_list|)
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_GRAPHIC_UNEXPECTED_VALUE_FOR_KEY
argument_list|,
literal|"No Postscript Xobject allowed in PDF/A"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|this
operator|.
name|xobject
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"Subtype2"
argument_list|)
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_GRAPHIC_UNEXPECTED_VALUE_FOR_KEY
argument_list|,
literal|"No Postscript Xobject allowed in PDF/A (Subtype2)"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * This method checks if required fields are present.    *     * @param result    *          the list of error to update if the validation fails.    * @return true if all fields are present, false otherwise.    */
specifier|protected
specifier|abstract
name|boolean
name|checkMandatoryFields
parameter_list|(
name|List
argument_list|<
name|ValidationError
argument_list|>
name|result
parameter_list|)
function_decl|;
comment|/*    * (non-Javadoc)    *     * @see net.awl.edoc.pdfa.validation.graphics.XObjectValidator#validate()    */
specifier|public
name|List
argument_list|<
name|ValidationError
argument_list|>
name|validate
parameter_list|()
throws|throws
name|ValidationException
block|{
name|List
argument_list|<
name|ValidationError
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|ValidationError
argument_list|>
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkMandatoryFields
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|checkOPI
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|checkSMask
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|checkReferenceXObject
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|checkPostscriptXObject
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

