begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|graphics
operator|.
name|color
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|ERROR_GRAPHIC_INVALID_COLOR_SPACE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|ERROR_GRAPHIC_INVALID_COLOR_SPACE_ALTERNATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|ERROR_GRAPHIC_INVALID_COLOR_SPACE_CMYK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|ERROR_GRAPHIC_INVALID_COLOR_SPACE_ICCBASED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|ERROR_GRAPHIC_INVALID_COLOR_SPACE_INDEXED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|ERROR_GRAPHIC_INVALID_COLOR_SPACE_MISSING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|ERROR_GRAPHIC_INVALID_COLOR_SPACE_RGB
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|ERROR_GRAPHIC_INVALID_COLOR_SPACE_TOO_MANY_COMPONENTS_DEVICEN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|ERROR_GRAPHIC_INVALID_PATTERN_COLOR_SPACE_FORBIDDEN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|ERROR_GRAPHIC_INVALID_UNKNOWN_COLOR_SPACE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|MAX_DEVICE_N_LIMIT
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|color
operator|.
name|ICC_Profile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|DocumentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationResult
operator|.
name|ValidationError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|graphics
operator|.
name|ICCProfileWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDColorSpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDColorSpaceFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDDeviceN
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDICCBased
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDIndexed
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDSeparation
import|;
end_import

begin_comment
comment|/**  * This class doesn't define restrictions on ColorSpace. It checks only the  * consistency of the Color space with the DestOutputIntent.  */
end_comment

begin_class
specifier|public
class|class
name|StandardColorSpaceHelper
implements|implements
name|ColorSpaceHelper
block|{
comment|/** 	 * The color space object to check, this object is used to instantiate the 	 * pdcs object. 	 */
specifier|protected
name|COSBase
name|csObject
init|=
literal|null
decl_stmt|;
comment|/** 	 * The document handler which contains useful information to process the 	 * validation. 	 */
specifier|protected
name|DocumentHandler
name|handler
init|=
literal|null
decl_stmt|;
comment|/** 	 * The ICCProfile contained in the DestOutputIntent 	 */
specifier|protected
name|ICCProfileWrapper
name|iccpw
init|=
literal|null
decl_stmt|;
comment|/** 	 * High level object which represents the colors space to check. 	 */
specifier|protected
name|PDColorSpace
name|pdcs
init|=
literal|null
decl_stmt|;
name|StandardColorSpaceHelper
parameter_list|(
name|COSBase
name|_csObject
parameter_list|,
name|DocumentHandler
name|_handler
parameter_list|)
block|{
name|this
operator|.
name|csObject
operator|=
name|_csObject
expr_stmt|;
name|this
operator|.
name|handler
operator|=
name|_handler
expr_stmt|;
name|this
operator|.
name|iccpw
operator|=
name|this
operator|.
name|handler
operator|.
name|getIccProfileWrapper
argument_list|()
expr_stmt|;
block|}
name|StandardColorSpaceHelper
parameter_list|(
name|PDColorSpace
name|_cs
parameter_list|,
name|DocumentHandler
name|_handler
parameter_list|)
block|{
name|this
operator|.
name|handler
operator|=
name|_handler
expr_stmt|;
name|this
operator|.
name|pdcs
operator|=
name|_cs
expr_stmt|;
name|this
operator|.
name|iccpw
operator|=
name|this
operator|.
name|handler
operator|.
name|getIccProfileWrapper
argument_list|()
expr_stmt|;
block|}
comment|/* 	 * (non-Javadoc) 	 *  	 * @see 	 * net.awl.edoc.pdfa.validation.graphics.color.ColorSpaceHelper#validate(java 	 * .util.List) 	 */
specifier|public
specifier|final
name|boolean
name|validate
parameter_list|(
name|List
argument_list|<
name|ValidationError
argument_list|>
name|result
parameter_list|)
throws|throws
name|ValidationException
block|{
comment|// ---- Create a PDFBox ColorSpace object
if|if
condition|(
name|pdcs
operator|==
literal|null
operator|&&
name|csObject
operator|!=
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
name|csObject
operator|instanceof
name|COSObject
condition|)
block|{
name|pdcs
operator|=
name|PDColorSpaceFactory
operator|.
name|createColorSpace
argument_list|(
operator|(
operator|(
name|COSObject
operator|)
name|csObject
operator|)
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pdcs
operator|=
name|PDColorSpaceFactory
operator|.
name|createColorSpace
argument_list|(
name|csObject
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ValidationException
argument_list|(
literal|"Unable to create a PDColorSpace : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|pdcs
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ValidationException
argument_list|(
literal|"Unable to create a PDColorSpace with the value null"
argument_list|)
throw|;
block|}
return|return
name|processAllColorSpace
argument_list|(
name|pdcs
argument_list|,
name|result
argument_list|)
return|;
block|}
comment|/** 	 * Method called by the validate method. According to the ColorSpace, a 	 * specific ColorSpace method is called. 	 *  	 * @param pdcs 	 *          the color space object to check. 	 * @param result 	 *          the list of error to update if the validation fails. 	 * @return true if the validation succeed, false otherwise. 	 */
specifier|protected
specifier|final
name|boolean
name|processAllColorSpace
parameter_list|(
name|PDColorSpace
name|pdcs
parameter_list|,
name|List
argument_list|<
name|ValidationError
argument_list|>
name|result
parameter_list|)
block|{
name|ColorSpaces
name|cs
init|=
name|ColorSpaces
operator|.
name|valueOf
argument_list|(
name|pdcs
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|cs
condition|)
block|{
case|case
name|DeviceRGB
case|:
case|case
name|DeviceRGB_SHORT
case|:
return|return
name|processRGBColorSpace
argument_list|(
name|result
argument_list|)
return|;
case|case
name|DeviceCMYK
case|:
case|case
name|DeviceCMYK_SHORT
case|:
return|return
name|processCYMKColorSpace
argument_list|(
name|result
argument_list|)
return|;
case|case
name|CalRGB
case|:
case|case
name|CalGray
case|:
case|case
name|Lab
case|:
return|return
name|processCalibratedColorSpace
argument_list|(
name|result
argument_list|)
return|;
case|case
name|DeviceGray
case|:
case|case
name|DeviceGray_SHORT
case|:
return|return
name|processGrayColorSpace
argument_list|(
name|result
argument_list|)
return|;
case|case
name|ICCBased
case|:
return|return
name|processICCBasedColorSpace
argument_list|(
name|pdcs
argument_list|,
name|result
argument_list|)
return|;
case|case
name|DeviceN
case|:
return|return
name|processDeviceNColorSpace
argument_list|(
name|pdcs
argument_list|,
name|result
argument_list|)
return|;
case|case
name|Indexed
case|:
case|case
name|Indexed_SHORT
case|:
return|return
name|processIndexedColorSpace
argument_list|(
name|pdcs
argument_list|,
name|result
argument_list|)
return|;
case|case
name|Separation
case|:
return|return
name|processSeparationColorSpace
argument_list|(
name|pdcs
argument_list|,
name|result
argument_list|)
return|;
case|case
name|Pattern
case|:
return|return
name|processPatternColorSpace
argument_list|(
name|result
argument_list|)
return|;
default|default:
name|result
operator|.
name|add
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_GRAPHIC_INVALID_UNKNOWN_COLOR_SPACE
argument_list|,
name|cs
operator|.
name|getLabel
argument_list|()
operator|+
literal|" is unknown as ColorSpace"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|/** 	 * Method called by the processAllColorSpace if the ColorSpace to check is 	 * DeviceRGB. 	 *  	 * @param result 	 *          the list of error to update if the validation fails. 	 * @return true if the color space is valid, false otherwise. 	 */
specifier|protected
name|boolean
name|processRGBColorSpace
parameter_list|(
name|List
argument_list|<
name|ValidationError
argument_list|>
name|result
parameter_list|)
block|{
comment|// ---- ICCProfile must contain a RGB Color Space
if|if
condition|(
name|iccpw
operator|==
literal|null
operator|||
operator|!
name|iccpw
operator|.
name|isRGBColorSpace
argument_list|()
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_GRAPHIC_INVALID_COLOR_SPACE_RGB
argument_list|,
literal|"DestOutputProfile is missing"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/** 	 * Method called by the processAllColorSpace if the ColorSpace to check is 	 * DeviceCYMK. 	 *  	 * @param result 	 *          the list of error to update if the validation fails. 	 * @return true if the color space is valid, false otherwise. 	 */
specifier|protected
name|boolean
name|processCYMKColorSpace
parameter_list|(
name|List
argument_list|<
name|ValidationError
argument_list|>
name|result
parameter_list|)
block|{
comment|// ---- ICCProfile must contain a CYMK Color Space
if|if
condition|(
name|iccpw
operator|==
literal|null
operator|||
operator|!
name|iccpw
operator|.
name|isCMYKColorSpace
argument_list|()
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_GRAPHIC_INVALID_COLOR_SPACE_CMYK
argument_list|,
literal|"DestOutputProfile is missing"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/** 	 * Method called by the processAllColorSpace if the ColorSpace to check is a 	 * Pattern. 	 *  	 * @param result 	 *          the list of error to update if the validation fails. 	 * @return true if the color space is valid, false otherwise. 	 */
specifier|protected
name|boolean
name|processPatternColorSpace
parameter_list|(
name|List
argument_list|<
name|ValidationError
argument_list|>
name|result
parameter_list|)
block|{
if|if
condition|(
name|iccpw
operator|==
literal|null
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_GRAPHIC_INVALID_COLOR_SPACE_MISSING
argument_list|,
literal|"DestOutputProfile is missing"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/** 	 * Method called by the processAllColorSpace if the ColorSpace to check is 	 * DeviceGray. 	 *  	 * @param result 	 *          the list of error to update if the validation fails. 	 * @return true if the color space is valid, false otherwise. 	 */
specifier|protected
name|boolean
name|processGrayColorSpace
parameter_list|(
name|List
argument_list|<
name|ValidationError
argument_list|>
name|result
parameter_list|)
block|{
comment|// ---- OutputIntent is mandatory
if|if
condition|(
name|iccpw
operator|==
literal|null
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_GRAPHIC_INVALID_COLOR_SPACE_MISSING
argument_list|,
literal|"DestOutputProfile is missing"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/** 	 * Method called by the processAllColorSpace if the ColorSpace to check is a 	 * Clibrated Color (CalGary, CalRGB, Lab). 	 *  	 * @param result 	 *          the list of error to update if the validation fails. 	 * @return true if the color space is valid, false otherwise. 	 */
specifier|protected
name|boolean
name|processCalibratedColorSpace
parameter_list|(
name|List
argument_list|<
name|ValidationError
argument_list|>
name|result
parameter_list|)
block|{
comment|// ---- OutputIntent isn't mandatory
return|return
literal|true
return|;
block|}
comment|/** 	 * Method called by the processAllColorSpace if the ColorSpace to check is a 	 * ICCBased color space. Because this kind of ColorSpace can have alternate 	 * color space, the processAllColorSpace is called to check this alternate 	 * color space. (Pattern is forbidden as Alternate Color Space) 	 *  	 * @param pdcs 	 *          the color space object to check. 	 * @param result 	 *          the list of error to update if the validation fails. 	 * @return true if the color space is valid, false otherwise. 	 */
specifier|protected
name|boolean
name|processICCBasedColorSpace
parameter_list|(
name|PDColorSpace
name|pdcs
parameter_list|,
name|List
argument_list|<
name|ValidationError
argument_list|>
name|result
parameter_list|)
block|{
name|PDICCBased
name|iccBased
init|=
operator|(
name|PDICCBased
operator|)
name|pdcs
decl_stmt|;
try|try
block|{
name|ICC_Profile
name|iccp
init|=
name|ICC_Profile
operator|.
name|getInstance
argument_list|(
name|iccBased
operator|.
name|getPDStream
argument_list|()
operator|.
name|getByteArray
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|iccp
operator|==
literal|null
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_GRAPHIC_INVALID_COLOR_SPACE_ICCBASED
argument_list|,
literal|"Unable to read ICCBase color space "
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|List
argument_list|<
name|PDColorSpace
argument_list|>
name|altCs
init|=
name|iccBased
operator|.
name|getAlternateColorSpaces
argument_list|()
decl_stmt|;
for|for
control|(
name|PDColorSpace
name|altpdcs
range|:
name|altCs
control|)
block|{
if|if
condition|(
name|altpdcs
operator|!=
literal|null
condition|)
block|{
name|ColorSpaces
name|altCsId
init|=
name|ColorSpaces
operator|.
name|valueOf
argument_list|(
name|altpdcs
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|altCsId
operator|==
name|ColorSpaces
operator|.
name|Pattern
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_GRAPHIC_INVALID_PATTERN_COLOR_SPACE_FORBIDDEN
argument_list|,
literal|"Pattern is forbidden as AlternateColorSpace of a ICCBased"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|List
argument_list|<
name|ValidationError
argument_list|>
name|warning
init|=
operator|new
name|ArrayList
argument_list|<
name|ValidationError
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|processAllColorSpace
argument_list|(
name|altpdcs
argument_list|,
name|warning
argument_list|)
condition|)
block|{
comment|// TODO manage in lazy mode
name|boolean
name|strict
init|=
literal|true
decl_stmt|;
comment|// can be an error in strict mode according to the version of the ICC Profile
if|if
condition|(
name|strict
operator|&&
operator|(
operator|(
name|iccp
operator|.
name|getMajorVersion
argument_list|()
operator|==
literal|2
operator|&&
name|iccp
operator|.
name|getMinorVersion
argument_list|()
operator|>
literal|0x40
operator|)
operator|||
operator|(
name|iccp
operator|.
name|getMajorVersion
argument_list|()
operator|>
literal|2
operator|)
operator|)
condition|)
block|{
name|result
operator|.
name|addAll
argument_list|(
name|warning
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_GRAPHIC_INVALID_COLOR_SPACE
argument_list|,
literal|"Unable to read ICCBase color space : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/** 	 * Method called by the processAllColorSpace if the ColorSpace to check is 	 * DeviceN. Because this kind of ColorSpace can have alternate color space, 	 * the processAllColorSpace is called to check this alternate color space. 	 * (There are no restrictions on the Alternate Color space) 	 *  	 * @param pdcs 	 *          the color space object to check. 	 * @param result 	 *          the list of error to update if the validation fails. 	 * @return true if the color space is valid, false otherwise. 	 */
specifier|protected
name|boolean
name|processDeviceNColorSpace
parameter_list|(
name|PDColorSpace
name|pdcs
parameter_list|,
name|List
argument_list|<
name|ValidationError
argument_list|>
name|result
parameter_list|)
block|{
name|PDDeviceN
name|deviceN
init|=
operator|(
name|PDDeviceN
operator|)
name|pdcs
decl_stmt|;
try|try
block|{
if|if
condition|(
name|iccpw
operator|==
literal|null
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_GRAPHIC_INVALID_COLOR_SPACE_MISSING
argument_list|,
literal|"DestOutputProfile is missing"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|PDColorSpace
name|altColor
init|=
name|deviceN
operator|.
name|getAlternateColorSpace
argument_list|()
decl_stmt|;
name|boolean
name|res
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|altColor
operator|!=
literal|null
condition|)
block|{
name|res
operator|=
name|processAllColorSpace
argument_list|(
name|altColor
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
name|Map
name|colorants
init|=
name|deviceN
operator|.
name|getAttributes
argument_list|()
operator|.
name|getColorants
argument_list|()
decl_stmt|;
name|int
name|numberOfColorants
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|colorants
operator|!=
literal|null
condition|)
block|{
name|numberOfColorants
operator|=
name|colorants
operator|.
name|size
argument_list|()
expr_stmt|;
for|for
control|(
name|Object
name|col
range|:
name|colorants
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|col
operator|!=
literal|null
condition|)
block|{
name|res
operator|=
name|res
operator|&&
name|processAllColorSpace
argument_list|(
operator|(
name|PDColorSpace
operator|)
name|col
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|int
name|numberOfComponents
init|=
name|deviceN
operator|.
name|getNumberOfComponents
argument_list|()
decl_stmt|;
if|if
condition|(
name|numberOfColorants
operator|>
name|MAX_DEVICE_N_LIMIT
operator|||
name|numberOfComponents
operator|>
name|MAX_DEVICE_N_LIMIT
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_GRAPHIC_INVALID_COLOR_SPACE_TOO_MANY_COMPONENTS_DEVICEN
argument_list|,
literal|"DeviceN has too many tint components or colorants"
argument_list|)
argument_list|)
expr_stmt|;
name|res
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_GRAPHIC_INVALID_COLOR_SPACE
argument_list|,
literal|"Unable to read DeviceN color space : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|/** 	 * Method called by the processAllColorSpace if the ColorSpace to check is 	 * Indexed. Because this kind of ColorSpace can have a Base color space, the 	 * processAllColorSpace is called to check this base color space. (Indexed and 	 * Pattern can't be a Base color space) 	 *  	 * @param pdcs 	 *          the color space object to check. 	 * @param result 	 *          the list of error to update if the validation fails. 	 * @return true if the color space is valid, false otherwise. 	 */
specifier|protected
name|boolean
name|processIndexedColorSpace
parameter_list|(
name|PDColorSpace
name|pdcs
parameter_list|,
name|List
argument_list|<
name|ValidationError
argument_list|>
name|result
parameter_list|)
block|{
name|PDIndexed
name|indexed
init|=
operator|(
name|PDIndexed
operator|)
name|pdcs
decl_stmt|;
try|try
block|{
if|if
condition|(
name|iccpw
operator|==
literal|null
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_GRAPHIC_INVALID_COLOR_SPACE_MISSING
argument_list|,
literal|"DestOutputProfile is missing"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|PDColorSpace
name|based
init|=
name|indexed
operator|.
name|getBaseColorSpace
argument_list|()
decl_stmt|;
name|ColorSpaces
name|cs
init|=
name|ColorSpaces
operator|.
name|valueOf
argument_list|(
name|based
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cs
operator|==
name|ColorSpaces
operator|.
name|Indexed
operator|||
name|cs
operator|==
name|ColorSpaces
operator|.
name|Indexed_SHORT
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_GRAPHIC_INVALID_COLOR_SPACE_INDEXED
argument_list|,
literal|"Indexed color space can't be used as Base color space"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|cs
operator|==
name|ColorSpaces
operator|.
name|Pattern
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_GRAPHIC_INVALID_COLOR_SPACE_INDEXED
argument_list|,
literal|"Pattern color space can't be used as Base color space"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
name|processAllColorSpace
argument_list|(
name|based
argument_list|,
name|result
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_GRAPHIC_INVALID_COLOR_SPACE
argument_list|,
literal|"Unable to read Indexed color space : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|/** 	 * Method called by the processAllColorSpace if the ColorSpace to check is 	 * Separation. Because this kind of ColorSpace can have an alternate color 	 * space, the processAllColorSpace is called to check this alternate color 	 * space. (Indexed, Separation, DeviceN and Pattern can't be a Base color 	 * space) 	 *  	 * @param pdcs 	 *          the color space object to check. 	 * @param result 	 *          the list of error to update if the validation fails. 	 * @return true if the color space is valid, false otherwise. 	 */
specifier|protected
name|boolean
name|processSeparationColorSpace
parameter_list|(
name|PDColorSpace
name|pdcs
parameter_list|,
name|List
argument_list|<
name|ValidationError
argument_list|>
name|result
parameter_list|)
block|{
name|PDSeparation
name|separation
init|=
operator|(
name|PDSeparation
operator|)
name|pdcs
decl_stmt|;
try|try
block|{
if|if
condition|(
name|iccpw
operator|==
literal|null
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_GRAPHIC_INVALID_COLOR_SPACE_MISSING
argument_list|,
literal|"DestOutputProfile is missing"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|PDColorSpace
name|altCol
init|=
name|separation
operator|.
name|getAlternateColorSpace
argument_list|()
decl_stmt|;
if|if
condition|(
name|altCol
operator|!=
literal|null
condition|)
block|{
name|ColorSpaces
name|acs
init|=
name|ColorSpaces
operator|.
name|valueOf
argument_list|(
name|altCol
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|acs
condition|)
block|{
case|case
name|Separation
case|:
case|case
name|DeviceN
case|:
case|case
name|Pattern
case|:
case|case
name|Indexed
case|:
case|case
name|Indexed_SHORT
case|:
name|result
operator|.
name|add
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_GRAPHIC_INVALID_COLOR_SPACE_ALTERNATE
argument_list|,
name|acs
operator|.
name|getLabel
argument_list|()
operator|+
literal|" color space can't be used as alternate color space"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
default|default:
return|return
name|processAllColorSpace
argument_list|(
name|altCol
argument_list|,
name|result
argument_list|)
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_GRAPHIC_INVALID_COLOR_SPACE
argument_list|,
literal|"Unable to read Separation color space : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

