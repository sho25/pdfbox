begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|helpers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|color
operator|.
name|ICC_Profile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|DocumentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidatorConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationResult
operator|.
name|ValidationError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|actions
operator|.
name|AbstractActionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|graphics
operator|.
name|ICCProfileWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|utils
operator|.
name|COSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocumentCatalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocumentNameDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDEmbeddedFilesNameTreeNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|persistence
operator|.
name|util
operator|.
name|COSObjectKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|StringUtil
import|;
end_import

begin_comment
comment|/**  * This helper validates the PDF file catalog  */
end_comment

begin_class
specifier|public
class|class
name|CatalogValidationHelper
extends|extends
name|AbstractValidationHelper
block|{
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|listICC
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|CatalogValidationHelper
parameter_list|(
name|ValidatorConfig
name|cfg
parameter_list|)
throws|throws
name|ValidationException
block|{
name|super
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
name|listICC
operator|.
name|add
argument_list|(
name|ICC_Characterization_Data_Registry_FOGRA43
argument_list|)
expr_stmt|;
name|listICC
operator|.
name|add
argument_list|(
name|ICC_Characterization_Data_Registry_CGATS_TR_006
argument_list|)
expr_stmt|;
name|listICC
operator|.
name|add
argument_list|(
name|ICC_Characterization_Data_Registry_CGATS_TR006
argument_list|)
expr_stmt|;
name|listICC
operator|.
name|add
argument_list|(
name|ICC_Characterization_Data_Registry_FOGRA39
argument_list|)
expr_stmt|;
name|listICC
operator|.
name|add
argument_list|(
name|ICC_Characterization_Data_Registry_JC200103
argument_list|)
expr_stmt|;
name|listICC
operator|.
name|add
argument_list|(
name|ICC_Characterization_Data_Registry_FOGRA27
argument_list|)
expr_stmt|;
name|listICC
operator|.
name|add
argument_list|(
name|ICC_Characterization_Data_Registry_EUROSB104
argument_list|)
expr_stmt|;
name|listICC
operator|.
name|add
argument_list|(
name|ICC_Characterization_Data_Registry_FOGRA45
argument_list|)
expr_stmt|;
name|listICC
operator|.
name|add
argument_list|(
name|ICC_Characterization_Data_Registry_FOGRA46
argument_list|)
expr_stmt|;
name|listICC
operator|.
name|add
argument_list|(
name|ICC_Characterization_Data_Registry_FOGRA41
argument_list|)
expr_stmt|;
name|listICC
operator|.
name|add
argument_list|(
name|ICC_Characterization_Data_Registry_CGATS_TR_001
argument_list|)
expr_stmt|;
name|listICC
operator|.
name|add
argument_list|(
name|ICC_Characterization_Data_Registry_CGATS_TR_003
argument_list|)
expr_stmt|;
name|listICC
operator|.
name|add
argument_list|(
name|ICC_Characterization_Data_Registry_CGATS_TR_005
argument_list|)
expr_stmt|;
name|listICC
operator|.
name|add
argument_list|(
name|ICC_Characterization_Data_Registry_CGATS_TR001
argument_list|)
expr_stmt|;
name|listICC
operator|.
name|add
argument_list|(
name|ICC_Characterization_Data_Registry_CGATS_TR003
argument_list|)
expr_stmt|;
name|listICC
operator|.
name|add
argument_list|(
name|ICC_Characterization_Data_Registry_CGATS_TR005
argument_list|)
expr_stmt|;
name|listICC
operator|.
name|add
argument_list|(
name|ICC_Characterization_Data_Registry_FOGRA28
argument_list|)
expr_stmt|;
name|listICC
operator|.
name|add
argument_list|(
name|ICC_Characterization_Data_Registry_JCW2003
argument_list|)
expr_stmt|;
name|listICC
operator|.
name|add
argument_list|(
name|ICC_Characterization_Data_Registry_EUROSB204
argument_list|)
expr_stmt|;
name|listICC
operator|.
name|add
argument_list|(
name|ICC_Characterization_Data_Registry_FOGRA47
argument_list|)
expr_stmt|;
name|listICC
operator|.
name|add
argument_list|(
name|ICC_Characterization_Data_Registry_FOGRA44
argument_list|)
expr_stmt|;
name|listICC
operator|.
name|add
argument_list|(
name|ICC_Characterization_Data_Registry_FOGRA29
argument_list|)
expr_stmt|;
name|listICC
operator|.
name|add
argument_list|(
name|ICC_Characterization_Data_Registry_JC200104
argument_list|)
expr_stmt|;
name|listICC
operator|.
name|add
argument_list|(
name|ICC_Characterization_Data_Registry_FOGRA40
argument_list|)
expr_stmt|;
name|listICC
operator|.
name|add
argument_list|(
name|ICC_Characterization_Data_Registry_FOGRA30
argument_list|)
expr_stmt|;
name|listICC
operator|.
name|add
argument_list|(
name|ICC_Characterization_Data_Registry_FOGRA42
argument_list|)
expr_stmt|;
name|listICC
operator|.
name|add
argument_list|(
name|ICC_Characterization_Data_Registry_IFRA26
argument_list|)
expr_stmt|;
name|listICC
operator|.
name|add
argument_list|(
name|ICC_Characterization_Data_Registry_JCN2002
argument_list|)
expr_stmt|;
name|listICC
operator|.
name|add
argument_list|(
name|ICC_Characterization_Data_Registry_CGATS_TR_002
argument_list|)
expr_stmt|;
name|listICC
operator|.
name|add
argument_list|(
name|ICC_Characterization_Data_Registry_CGATS_TR002
argument_list|)
expr_stmt|;
name|listICC
operator|.
name|add
argument_list|(
name|ICC_Characterization_Data_Registry_FOGRA33
argument_list|)
expr_stmt|;
name|listICC
operator|.
name|add
argument_list|(
name|ICC_Characterization_Data_Registry_FOGRA37
argument_list|)
expr_stmt|;
name|listICC
operator|.
name|add
argument_list|(
name|ICC_Characterization_Data_Registry_FOGRA31
argument_list|)
expr_stmt|;
name|listICC
operator|.
name|add
argument_list|(
name|ICC_Characterization_Data_Registry_FOGRA35
argument_list|)
expr_stmt|;
name|listICC
operator|.
name|add
argument_list|(
name|ICC_Characterization_Data_Registry_FOGRA32
argument_list|)
expr_stmt|;
name|listICC
operator|.
name|add
argument_list|(
name|ICC_Characterization_Data_Registry_FOGRA34
argument_list|)
expr_stmt|;
name|listICC
operator|.
name|add
argument_list|(
name|ICC_Characterization_Data_Registry_FOGRA36
argument_list|)
expr_stmt|;
name|listICC
operator|.
name|add
argument_list|(
name|ICC_Characterization_Data_Registry_FOGRA38
argument_list|)
expr_stmt|;
name|listICC
operator|.
name|add
argument_list|(
name|ICC_Characterization_Data_Registry_sRGB
argument_list|)
expr_stmt|;
name|listICC
operator|.
name|add
argument_list|(
name|ICC_Characterization_Data_Registry_sRGB_IEC
argument_list|)
expr_stmt|;
name|listICC
operator|.
name|add
argument_list|(
name|ICC_Characterization_Data_Registry_Adobe
argument_list|)
expr_stmt|;
name|listICC
operator|.
name|add
argument_list|(
name|ICC_Characterization_Data_Registry_bg_sRGB
argument_list|)
expr_stmt|;
name|listICC
operator|.
name|add
argument_list|(
name|ICC_Characterization_Data_Registry_sYCC
argument_list|)
expr_stmt|;
name|listICC
operator|.
name|add
argument_list|(
name|ICC_Characterization_Data_Registry_scRGB
argument_list|)
expr_stmt|;
name|listICC
operator|.
name|add
argument_list|(
name|ICC_Characterization_Data_Registry_scRGB_nl
argument_list|)
expr_stmt|;
name|listICC
operator|.
name|add
argument_list|(
name|ICC_Characterization_Data_Registry_scYCC_nl
argument_list|)
expr_stmt|;
name|listICC
operator|.
name|add
argument_list|(
name|ICC_Characterization_Data_Registry_ROMM
argument_list|)
expr_stmt|;
name|listICC
operator|.
name|add
argument_list|(
name|ICC_Characterization_Data_Registry_RIMM
argument_list|)
expr_stmt|;
name|listICC
operator|.
name|add
argument_list|(
name|ICC_Characterization_Data_Registry_ERIMM
argument_list|)
expr_stmt|;
name|listICC
operator|.
name|add
argument_list|(
name|ICC_Characterization_Data_Registry_eciRGB
argument_list|)
expr_stmt|;
name|listICC
operator|.
name|add
argument_list|(
name|ICC_Characterization_Data_Registry_opRGB
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|boolean
name|isStandardICCCharacterization
parameter_list|(
name|String
name|name
parameter_list|)
block|{
for|for
control|(
name|String
name|iccStandard
range|:
name|listICC
control|)
block|{
if|if
condition|(
name|iccStandard
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
comment|// TODO check with an equal instead of contains?
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/* 	 * (non-Javadoc) 	 *  	 * @see 	 * net.awl.edoc.pdfa.validation.helpers.AbstractValidationHelper#innerValidate 	 * (net.awl.edoc.pdfa.validation.DocumentHandler) 	 */
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ValidationError
argument_list|>
name|innerValidate
parameter_list|(
name|DocumentHandler
name|handler
parameter_list|)
throws|throws
name|ValidationException
block|{
name|List
argument_list|<
name|ValidationError
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|ValidationError
argument_list|>
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|PDDocument
name|pdfbox
init|=
name|handler
operator|.
name|getDocument
argument_list|()
decl_stmt|;
name|PDDocumentCatalog
name|catalog
init|=
name|pdfbox
operator|.
name|getDocumentCatalog
argument_list|()
decl_stmt|;
if|if
condition|(
name|catalog
operator|!=
literal|null
condition|)
block|{
name|validateActions
argument_list|(
name|handler
argument_list|,
name|catalog
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|validateLang
argument_list|(
name|handler
argument_list|,
name|catalog
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|validateNames
argument_list|(
name|handler
argument_list|,
name|catalog
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|validateOCProperties
argument_list|(
name|handler
argument_list|,
name|catalog
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ValidationException
argument_list|(
literal|"There are no Catalog entry in the Document."
argument_list|)
throw|;
block|}
comment|// ---- Check OutputIntent to know the ICC Profile
name|result
operator|.
name|addAll
argument_list|(
name|validateOutputIntent
argument_list|(
name|handler
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/** 	 * This method validates if OpenAction entry contains forbidden action type. 	 * It checks too if an Additional Action is present. 	 *  	 * @param handler 	 * @param catalog 	 * @param result 	 * @throws ValidationException 	 */
specifier|protected
name|void
name|validateActions
parameter_list|(
name|DocumentHandler
name|handler
parameter_list|,
name|PDDocumentCatalog
name|catalog
parameter_list|,
name|List
argument_list|<
name|ValidationError
argument_list|>
name|result
parameter_list|)
throws|throws
name|ValidationException
block|{
comment|// ---- get OpenAction and Additional Action if these entries are present
name|List
argument_list|<
name|AbstractActionManager
argument_list|>
name|lActions
init|=
name|this
operator|.
name|actionFact
operator|.
name|getActions
argument_list|(
name|catalog
operator|.
name|getCOSDictionary
argument_list|()
argument_list|,
name|handler
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocument
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|AbstractActionManager
name|action
range|:
name|lActions
control|)
block|{
if|if
condition|(
operator|!
name|action
operator|.
name|valid
argument_list|(
name|result
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
block|}
comment|/** 	 * The Lang element is optional but it is recommended. This method check the 	 * Syntax of the Lang if this entry is present. 	 *  	 * @param handler 	 * @param catalog 	 * @param result 	 * @throws ValidationException 	 */
specifier|protected
name|void
name|validateLang
parameter_list|(
name|DocumentHandler
name|handler
parameter_list|,
name|PDDocumentCatalog
name|catalog
parameter_list|,
name|List
argument_list|<
name|ValidationError
argument_list|>
name|result
parameter_list|)
throws|throws
name|ValidationException
block|{
name|String
name|lang
init|=
name|catalog
operator|.
name|getLanguage
argument_list|()
decl_stmt|;
if|if
condition|(
name|lang
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|lang
argument_list|)
operator|&&
operator|!
name|lang
operator|.
name|matches
argument_list|(
literal|"[A-Za-z]{1,8}(-[A-Za-z]{1,8})*"
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_SYNTAX_LANG_NOT_RFC1766
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * A Catalog shall not contain the EmbeddedFiles entry. 	 *  	 * @param handler 	 * @param catalog 	 * @param result 	 * @throws ValidationException 	 */
specifier|protected
name|void
name|validateNames
parameter_list|(
name|DocumentHandler
name|handler
parameter_list|,
name|PDDocumentCatalog
name|catalog
parameter_list|,
name|List
argument_list|<
name|ValidationError
argument_list|>
name|result
parameter_list|)
throws|throws
name|ValidationException
block|{
name|PDDocumentNameDictionary
name|names
init|=
name|catalog
operator|.
name|getNames
argument_list|()
decl_stmt|;
if|if
condition|(
name|names
operator|!=
literal|null
condition|)
block|{
name|PDEmbeddedFilesNameTreeNode
name|efs
init|=
name|names
operator|.
name|getEmbeddedFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|efs
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_SYNTAX_TRAILER_CATALOG_EMBEDDEDFILES
argument_list|,
literal|"EmbeddedFile entry is present in the Names dictionary"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** 	 * A Catalog shall not contain the OCPProperties (Optional Content Properties) 	 * entry. 	 *  	 * @param handler 	 * @param catalog 	 * @param result 	 * @throws ValidationException 	 */
specifier|protected
name|void
name|validateOCProperties
parameter_list|(
name|DocumentHandler
name|handler
parameter_list|,
name|PDDocumentCatalog
name|catalog
parameter_list|,
name|List
argument_list|<
name|ValidationError
argument_list|>
name|result
parameter_list|)
throws|throws
name|ValidationException
block|{
name|COSBase
name|ocp
init|=
name|catalog
operator|.
name|getCOSDictionary
argument_list|()
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|DOCUMENT_DICTIONARY_KEY_OPTIONAL_CONTENTS
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ocp
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_SYNTAX_TRAILER_CATALOG_OCPROPERTIES
argument_list|,
literal|"A Catalog shall not contain the OCPProperties entry."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * This method checks the content of each OutputIntent. The S entry must 	 * contain GTS_PDFA1. The DestOuputProfile must contain a valid ICC Profile 	 * Stream. 	 *  	 * If there are more than one OutputIntent, they have to use the same ICC 	 * Profile. 	 *  	 * This method returns a list of ValidationError. It is empty if no errors 	 * have been found. 	 *  	 * @param handler 	 * @return 	 * @throws ValidationException 	 */
specifier|public
name|List
argument_list|<
name|ValidationError
argument_list|>
name|validateOutputIntent
parameter_list|(
name|DocumentHandler
name|handler
parameter_list|)
throws|throws
name|ValidationException
block|{
name|List
argument_list|<
name|ValidationError
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|ValidationError
argument_list|>
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|PDDocument
name|pdDocument
init|=
name|handler
operator|.
name|getDocument
argument_list|()
decl_stmt|;
name|PDDocumentCatalog
name|catalog
init|=
name|pdDocument
operator|.
name|getDocumentCatalog
argument_list|()
decl_stmt|;
name|COSDocument
name|cDoc
init|=
name|pdDocument
operator|.
name|getDocument
argument_list|()
decl_stmt|;
name|COSBase
name|cBase
init|=
name|catalog
operator|.
name|getCOSDictionary
argument_list|()
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|DOCUMENT_DICTIONARY_KEY_OUTPUT_INTENTS
argument_list|)
argument_list|)
decl_stmt|;
name|COSArray
name|outputIntents
init|=
name|COSUtils
operator|.
name|getAsArray
argument_list|(
name|cBase
argument_list|,
name|cDoc
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|COSObjectKey
argument_list|,
name|Boolean
argument_list|>
name|tmpDestOutputProfile
init|=
operator|new
name|HashMap
argument_list|<
name|COSObjectKey
argument_list|,
name|Boolean
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|outputIntents
operator|!=
literal|null
operator|&&
name|i
operator|<
name|outputIntents
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|COSDictionary
name|dictionary
init|=
name|COSUtils
operator|.
name|getAsDictionary
argument_list|(
name|outputIntents
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|cDoc
argument_list|)
decl_stmt|;
if|if
condition|(
name|dictionary
operator|==
literal|null
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_GRAPHIC_OUTPUT_INTENT_INVALID_ENTRY
argument_list|,
literal|"OutputIntent object is null or isn't a dictionary"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// ---- S entry is mandatory and must be equals to GTS_PDFA1
name|String
name|sValue
init|=
name|dictionary
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|OUTPUT_INTENT_DICTIONARY_KEY_S
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|OUTPUT_INTENT_DICTIONARY_VALUE_GTS_PDFA1
operator|.
name|equals
argument_list|(
name|sValue
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_GRAPHIC_OUTPUT_INTENT_S_VALUE_INVALID
argument_list|,
literal|"The S entry of the OutputIntent isn't GTS_PDFA1"
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// ---- OutputConditionIdentifier is a mandatory field
name|String
name|outputConditionIdentifier
init|=
name|dictionary
operator|.
name|getString
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|OUTPUT_INTENT_DICTIONARY_KEY_OUTPUT_CONDITION_IDENTIFIER
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|outputConditionIdentifier
operator|==
literal|null
condition|)
block|{
comment|// empty string is autorized (it may be an application specific value)
name|result
operator|.
name|add
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_GRAPHIC_OUTPUT_INTENT_INVALID_ENTRY
argument_list|,
literal|"The OutputIntentCondition is missing"
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// ---- If OutputConditionIdentifier is "Custom" or a non Standard ICC Characterization :
comment|// ---- DestOutputProfile and Info are mandatory
comment|// ---- DestOutputProfile must be a ICC Profile
comment|// ---- Because of PDF/A conforming file needs to specify the color characteristics, the DestOutputProfile
comment|// ---- is checked even if the OutputConditionIdentifier isn't "Custom"
name|COSBase
name|dop
init|=
name|dictionary
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|OUTPUT_INTENT_DICTIONARY_KEY_DEST_OUTPUT_PROFILE
argument_list|)
argument_list|)
decl_stmt|;
name|ValidationError
name|valer
init|=
name|validateICCProfile
argument_list|(
name|dop
argument_list|,
name|cDoc
argument_list|,
name|tmpDestOutputProfile
argument_list|,
name|handler
argument_list|)
decl_stmt|;
if|if
condition|(
name|valer
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|valer
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// TODO [LAZY] When Lazy mode will be added, this block should be uncommented to set result as warning.
comment|//				if (!isStandardICCCharacterization(outputConditionIdentifier)) {
comment|//					String info = dictionary.getString(COSName.getPDFName(OUTPUT_INTENT_DICTIONARY_KEY_INFO));
comment|//					if (info == null || "".equals(info)) {
comment|//						result.add(new ValidationError(ERROR_GRAPHIC_OUTPUT_INTENT_INVALID_ENTRY,
comment|//								"The Info entry of a OutputIntent dictionary is missing"));
comment|//						continue;
comment|//					}
comment|//				}
block|}
block|}
return|return
name|result
return|;
block|}
comment|/** 	 * This method checks the destOutputProfile which must be a valid ICCProfile. 	 *  	 * If an other ICCProfile exists in the mapDestOutputProfile, a 	 * ValdiationError (ERROR_GRAPHIC_OUTPUT_INTENT_ICC_PROFILE_MULTIPLE) is 	 * returned because of only one profile is authorized. If the ICCProfile 	 * already exist in the mapDestOutputProfile, the method returns null. If the 	 * destOutputProfile contains an invalid ICCProfile, a ValidationError 	 * (ERROR_GRAPHIC_OUTPUT_INTENT_ICC_PROFILE_INVALID) is returned If the 	 * destOutputProfile is an empty stream, a 	 * ValidationError(ERROR_GRAPHIC_OUTPUT_INTENT_INVALID_ENTRY) is returned. 	 *  	 * If the destOutputFile is valid, mapDestOutputProfile is updated, the 	 * ICCProfile is added to the document handler and null is returned. 	 *  	 * @param destOutputProfile 	 * @param cDoc 	 * @param tmpDestOutputProfile 	 * @param handler 	 * @return 	 * @throws ValidationException 	 */
specifier|protected
name|ValidationError
name|validateICCProfile
parameter_list|(
name|COSBase
name|destOutputProfile
parameter_list|,
name|COSDocument
name|cDoc
parameter_list|,
name|Map
argument_list|<
name|COSObjectKey
argument_list|,
name|Boolean
argument_list|>
name|mapDestOutputProfile
parameter_list|,
name|DocumentHandler
name|handler
parameter_list|)
throws|throws
name|ValidationException
block|{
try|try
block|{
if|if
condition|(
name|destOutputProfile
operator|==
literal|null
condition|)
block|{
comment|//				return new ValidationError(ERROR_GRAPHIC_OUTPUT_INTENT_INVALID_ENTRY,	"OutputIntent object uses a NULL Object");
return|return
literal|null
return|;
block|}
comment|// ---- destOutputProfile should be an instance of COSObject because of
comment|// this is a object reference
if|if
condition|(
name|destOutputProfile
operator|instanceof
name|COSObject
condition|)
block|{
if|if
condition|(
name|mapDestOutputProfile
operator|.
name|containsKey
argument_list|(
operator|new
name|COSObjectKey
argument_list|(
operator|(
name|COSObject
operator|)
name|destOutputProfile
argument_list|)
argument_list|)
condition|)
block|{
comment|// ---- the profile is already checked. continue
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|mapDestOutputProfile
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// ---- A DestOutputProfile exits but it isn't the same, error
return|return
operator|new
name|ValidationError
argument_list|(
name|ERROR_GRAPHIC_OUTPUT_INTENT_ICC_PROFILE_MULTIPLE
argument_list|,
literal|"More than one ICCProfile is defined"
argument_list|)
return|;
block|}
comment|// else  the profile will be kept in the tmpDestOutputProfile if it is valid
block|}
name|PDStream
name|stream
init|=
name|PDStream
operator|.
name|createFromCOS
argument_list|(
name|COSUtils
operator|.
name|getAsStream
argument_list|(
name|destOutputProfile
argument_list|,
name|cDoc
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|stream
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|ValidationError
argument_list|(
name|ERROR_GRAPHIC_OUTPUT_INTENT_INVALID_ENTRY
argument_list|,
literal|"OutputIntent object uses a NULL Object"
argument_list|)
return|;
block|}
name|ICC_Profile
name|iccp
init|=
name|ICC_Profile
operator|.
name|getInstance
argument_list|(
name|stream
operator|.
name|getByteArray
argument_list|()
argument_list|)
decl_stmt|;
comment|// check the ICC Profile version (6.2.2)
if|if
condition|(
name|iccp
operator|.
name|getMajorVersion
argument_list|()
operator|==
literal|2
condition|)
block|{
if|if
condition|(
name|iccp
operator|.
name|getMinorVersion
argument_list|()
operator|>
literal|0x40
condition|)
block|{
comment|// TODO on lazy mode this error should be a warning?
comment|// in PDF 1.4, max version is 02h.40h (meaning V 3.5)
comment|// see the ICCProfile specification (ICC.1:1998-09)page 13 - §6.1.3 :
comment|// The current profile version number is "2.4.0" (encoded as 02400000h"
return|return
operator|new
name|ValidationError
argument_list|(
name|ERROR_GRAPHIC_OUTPUT_INTENT_ICC_PROFILE_TOO_RECENT
argument_list|,
literal|"Invalid version of the ICCProfile"
argument_list|)
return|;
block|}
comment|// else OK
block|}
elseif|else
if|if
condition|(
name|iccp
operator|.
name|getMajorVersion
argument_list|()
operator|>
literal|2
condition|)
block|{
comment|// TODO on lazy mode this error should be a warning?
comment|// in PDF 1.4, max version is 02h.40h (meaning V 3.5)
comment|// see the ICCProfile specification (ICC.1:1998-09)page 13 - §6.1.3 :
comment|// The current profile version number is "2.4.0" (encoded as 02400000h"
return|return
operator|new
name|ValidationError
argument_list|(
name|ERROR_GRAPHIC_OUTPUT_INTENT_ICC_PROFILE_TOO_RECENT
argument_list|,
literal|"Invalid version of the ICCProfile"
argument_list|)
return|;
block|}
comment|// else seems less than 2, so correct
if|if
condition|(
name|handler
operator|.
name|getIccProfileWrapper
argument_list|()
operator|==
literal|null
condition|)
block|{
name|handler
operator|.
name|setIccProfileWrapper
argument_list|(
operator|new
name|ICCProfileWrapper
argument_list|(
name|iccp
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// ---- keep reference to avoid multiple profile definition
name|mapDestOutputProfile
operator|.
name|put
argument_list|(
operator|new
name|COSObjectKey
argument_list|(
operator|(
name|COSObject
operator|)
name|destOutputProfile
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// ---- this is not a ICC_Profile
return|return
operator|new
name|ValidationError
argument_list|(
name|ERROR_GRAPHIC_OUTPUT_INTENT_ICC_PROFILE_INVALID
argument_list|,
literal|"DestOutputProfile isn't a ICCProfile"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ValidationException
argument_list|(
literal|"Unable to parse the ICC Profile"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

