begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|javacc
operator|.
name|PDFParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|javacc
operator|.
name|extractor
operator|.
name|ExtractorTokenManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|font
operator|.
name|AbstractFontContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|graphics
operator|.
name|ICCProfileWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|utils
operator|.
name|COSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|xmpbox
operator|.
name|XMPMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_comment
comment|/**  * The DocumentHandler is used to store useful information or Objects during the  * validation of the PDF file.  */
end_comment

begin_class
specifier|public
class|class
name|DocumentHandler
block|{
comment|/** 	 * Contains the list of font name embedded in the PDF document. 	 */
specifier|protected
name|Map
argument_list|<
name|COSBase
argument_list|,
name|AbstractFontContainer
argument_list|>
name|embeddedFonts
init|=
operator|new
name|HashMap
argument_list|<
name|COSBase
argument_list|,
name|AbstractFontContainer
argument_list|>
argument_list|()
decl_stmt|;
comment|/** 	 * The javacc parser used to parse the document 	 */
specifier|protected
name|PDFParser
name|parser
init|=
literal|null
decl_stmt|;
comment|/** 	 * The PDFbox object representation of the PDF source. 	 */
specifier|protected
name|PDDocument
name|document
init|=
literal|null
decl_stmt|;
comment|/** 	 * The datasource to load the document from 	 */
specifier|protected
name|DataSource
name|source
init|=
literal|null
decl_stmt|;
comment|/** 	 * JavaCC Token Manager used to get some content of the PDF file as string (ex 	 * : Trailers) 	 */
specifier|protected
name|ExtractorTokenManager
name|pdfExtractor
init|=
literal|null
decl_stmt|;
comment|/** 	 * This wrapper contains the ICCProfile used by the PDF file. 	 */
specifier|protected
name|ICCProfileWrapper
name|iccProfileWrapper
init|=
literal|null
decl_stmt|;
comment|/** 	 * MetaData of the current pdf file.  	 */
specifier|protected
name|XMPMetadata
name|metadata
init|=
literal|null
decl_stmt|;
comment|/** 	 * Create the DocumentHandler using the DataSource which represent the PDF 	 * file to check. 	 *  	 * @param source 	 */
specifier|protected
name|DocumentHandler
parameter_list|(
name|DataSource
name|source
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
block|}
comment|/** 	 * @return the metadata 	 */
specifier|public
name|XMPMetadata
name|getMetadata
parameter_list|()
block|{
return|return
name|metadata
return|;
block|}
comment|/** 	 * @param metadata the metadata to set 	 */
specifier|public
name|void
name|setMetadata
parameter_list|(
name|XMPMetadata
name|metadata
parameter_list|)
block|{
name|this
operator|.
name|metadata
operator|=
name|metadata
expr_stmt|;
block|}
comment|/** 	 * @return the PDFParser used to parse the document 	 */
specifier|public
name|PDFParser
name|getParser
parameter_list|()
block|{
return|return
name|parser
return|;
block|}
comment|/** 	 * Initialize the JavaCC parser which checks the syntax of the PDF. 	 *  	 * @param parser 	 */
specifier|protected
name|void
name|setParser
parameter_list|(
name|PDFParser
name|parser
parameter_list|)
block|{
name|this
operator|.
name|parser
operator|=
name|parser
expr_stmt|;
block|}
comment|/** 	 * @return the value of the pdfExtractor attribute. 	 */
specifier|public
name|ExtractorTokenManager
name|getPdfExtractor
parameter_list|()
block|{
return|return
name|pdfExtractor
return|;
block|}
comment|/** 	 * Initialize the pdfExtractor attribute. 	 *  	 * @param pdfExtractor 	 */
specifier|protected
name|void
name|setPdfExtractor
parameter_list|(
name|ExtractorTokenManager
name|pdfExtractor
parameter_list|)
block|{
name|this
operator|.
name|pdfExtractor
operator|=
name|pdfExtractor
expr_stmt|;
block|}
comment|/** 	 * @return the PDFBox object representation of the document 	 */
specifier|public
name|PDDocument
name|getDocument
parameter_list|()
block|{
return|return
name|document
return|;
block|}
comment|/** 	 * Initialize the PDFBox object which present the PDF File. 	 *  	 * @param document 	 */
specifier|protected
name|void
name|setDocument
parameter_list|(
name|PDDocument
name|document
parameter_list|)
block|{
name|this
operator|.
name|document
operator|=
name|document
expr_stmt|;
block|}
comment|/** 	 *  	 * @return The datasource of the pdf document 	 */
specifier|public
name|DataSource
name|getSource
parameter_list|()
block|{
return|return
name|source
return|;
block|}
specifier|public
name|boolean
name|isComplete
parameter_list|()
block|{
return|return
operator|(
name|document
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|source
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|parser
operator|!=
literal|null
operator|)
return|;
block|}
comment|/** 	 * Add a FontContainer to allow TextObject validation. 	 *  	 * @param fKey 	 * @param fc 	 */
specifier|public
name|void
name|addFont
parameter_list|(
name|COSBase
name|fKey
parameter_list|,
name|AbstractFontContainer
name|fc
parameter_list|)
block|{
name|this
operator|.
name|embeddedFonts
operator|.
name|put
argument_list|(
name|fKey
argument_list|,
name|fc
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Return the FontContainer identified by the COSBase. If the given object 	 * is missing from the emmbeddedFont map, the null value is returned. 	 *  	 * @param fKey 	 * @return 	 */
specifier|public
name|AbstractFontContainer
name|getFont
parameter_list|(
name|COSBase
name|fKey
parameter_list|)
block|{
return|return
name|this
operator|.
name|embeddedFonts
operator|.
name|get
argument_list|(
name|fKey
argument_list|)
return|;
block|}
comment|/** 	 * @return the iccProfileWrapper 	 */
specifier|public
name|ICCProfileWrapper
name|getIccProfileWrapper
parameter_list|()
block|{
return|return
name|iccProfileWrapper
return|;
block|}
comment|/** 	 * @param iccProfileWrapper 	 *          the iccProfileWrapper to set 	 */
specifier|public
name|void
name|setIccProfileWrapper
parameter_list|(
name|ICCProfileWrapper
name|iccProfileWrapper
parameter_list|)
block|{
name|this
operator|.
name|iccProfileWrapper
operator|=
name|iccProfileWrapper
expr_stmt|;
block|}
comment|/** 	 * Close all opened resources 	 */
specifier|public
name|void
name|close
parameter_list|()
block|{
name|COSUtils
operator|.
name|closeDocumentQuietly
argument_list|(
name|document
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

