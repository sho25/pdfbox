begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|font
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|FONT_DICTIONARY_VALUE_ENCODING_MAC
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|FONT_DICTIONARY_VALUE_ENCODING_MAC_EXP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|FONT_DICTIONARY_VALUE_ENCODING_PDFDOC
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|FONT_DICTIONARY_VALUE_ENCODING_WIN
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cff
operator|.
name|CharStringCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cff
operator|.
name|Type1CharStringParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cff
operator|.
name|Type1FontUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|encoding
operator|.
name|Encoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|encoding
operator|.
name|MacRomanEncoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|encoding
operator|.
name|PdfDocEncoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|encoding
operator|.
name|StandardEncoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|encoding
operator|.
name|WinAnsiEncoding
import|;
end_import

begin_comment
comment|/**  * This class computes a Type1 font stream to extract Glyph Metrics. The given  * stream must be a valid type 1 stream.  *   * Remark : According to the PDF Reference only PostScript Type 1 binary fonts  * are allowed in a conforming PDF file so the encrypted "eexec" data are  * considered as binary data...  *   * This class is depreciated, now it is better to use the Type1Parser.   */
end_comment

begin_class
annotation|@
name|Deprecated
specifier|public
class|class
name|Type1MetricHelper
block|{
specifier|protected
specifier|static
specifier|final
name|char
name|NAME_START
init|=
literal|'/'
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|FULL_NAME_TOKEN
init|=
literal|1
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|FAMILY_NAME_TOKEN
init|=
literal|2
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|DUP_TOKEN
init|=
literal|3
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|FONT_NAME_TOKEN
init|=
literal|4
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|ENCODING_TOKEN
init|=
literal|5
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|READONLY_TOKEN
init|=
literal|6
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|LEN_IV_TOKEN
init|=
literal|7
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|CHARSTRINGS_TOKEN
init|=
literal|8
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|CHAR_LABEL_TOKEN
init|=
literal|9
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|OBJ_NAME_TOKEN
init|=
literal|10
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|NOTDEF
init|=
literal|"/.notdef"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PS_STANDARD_ENCODING
init|=
literal|"StandardEncoding"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PS_ISOLATIN_ENCODING
init|=
literal|"ISOLatin1Encoding"
decl_stmt|;
comment|/** 	 * The PostScript font stream. 	 */
specifier|private
name|InputStream
name|font
init|=
literal|null
decl_stmt|;
comment|/** 	 * The length in bytes of the clear-text portion of the Type1 font program. 	 */
specifier|private
name|int
name|clearTextSize
init|=
literal|0
decl_stmt|;
comment|/** 	 * The length in bytes of the eexec encrypted portion of the type1 font 	 * program. 	 */
specifier|private
name|int
name|eexecSize
init|=
literal|0
decl_stmt|;
comment|/** 	 * This map links the character identifier to a internal font program label 	 * which is different from the standard Encoding 	 */
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|cidToLabel
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|/** 	 * This map links the character label to a character identifier which is 	 * different from the standard Encoding. 	 */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|labelToCid
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|/** 	 * This map link the character label to a container containing Glyph 	 * description. 	 */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Type1GlyphDescription
argument_list|>
name|labelToMetric
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Type1GlyphDescription
argument_list|>
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|/** 	 * The character encoding of the Font 	 */
specifier|private
name|Encoding
name|encoding
init|=
literal|null
decl_stmt|;
comment|/** 	 * The family name of the font 	 */
specifier|protected
name|String
name|familyName
init|=
literal|null
decl_stmt|;
comment|/** 	 * The full name of the font 	 */
specifier|protected
name|String
name|fullName
init|=
literal|null
decl_stmt|;
comment|/** 	 * The font name of the font 	 */
specifier|protected
name|String
name|fontName
init|=
literal|null
decl_stmt|;
comment|/** 	 *  	 * @param type1 	 *          The unfiltered PostScript Type 1 Font stream. 	 * @param length1 	 *          The length in bytes of the clear-text portion of the Type1 font 	 *          program. 	 * @param length2 	 *          The length in bytes of the eexec encrypted portion of the type1 	 *          font program. 	 * @param encodingName 	 *          the Encoding name, StandardEncoding is used for unknown name 	 */
specifier|public
name|Type1MetricHelper
parameter_list|(
name|InputStream
name|type1
parameter_list|,
name|int
name|length1
parameter_list|,
name|int
name|length2
parameter_list|,
name|String
name|encodingName
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|font
operator|=
name|type1
expr_stmt|;
name|this
operator|.
name|clearTextSize
operator|=
name|length1
expr_stmt|;
name|this
operator|.
name|eexecSize
operator|=
name|length2
expr_stmt|;
name|this
operator|.
name|cidToLabel
operator|.
name|put
argument_list|(
operator|-
literal|1
argument_list|,
name|NOTDEF
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
name|NOTDEF
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// ---- Instantiate the Encoding Map
if|if
condition|(
name|FONT_DICTIONARY_VALUE_ENCODING_MAC
operator|.
name|equals
argument_list|(
name|encodingName
argument_list|)
condition|)
block|{
name|this
operator|.
name|encoding
operator|=
operator|new
name|MacRomanEncoding
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|FONT_DICTIONARY_VALUE_ENCODING_MAC_EXP
operator|.
name|equals
argument_list|(
name|encodingName
argument_list|)
condition|)
block|{
name|this
operator|.
name|encoding
operator|=
operator|new
name|MacRomanEncoding
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|FONT_DICTIONARY_VALUE_ENCODING_WIN
operator|.
name|equals
argument_list|(
name|encodingName
argument_list|)
condition|)
block|{
name|this
operator|.
name|encoding
operator|=
operator|new
name|WinAnsiEncoding
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|FONT_DICTIONARY_VALUE_ENCODING_PDFDOC
operator|.
name|equals
argument_list|(
name|encodingName
argument_list|)
condition|)
block|{
name|this
operator|.
name|encoding
operator|=
operator|new
name|PdfDocEncoding
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|encoding
operator|=
operator|new
name|StandardEncoding
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** 	 *  	 * @param type1 	 *          The unfiltered PostScript Type 1 Font stream. 	 * @param length1 	 *          The length in bytes of the clear-text portion of the Type1 font 	 *          program. 	 * @param length2 	 *          The length in bytes of the eexec encrypted portion of the type1 	 *          font program. 	 * @param enc 	 *          The Encoding inherited Object 	 */
specifier|public
name|Type1MetricHelper
parameter_list|(
name|InputStream
name|type1
parameter_list|,
name|int
name|length1
parameter_list|,
name|int
name|length2
parameter_list|,
name|Encoding
name|enc
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|font
operator|=
name|type1
expr_stmt|;
name|this
operator|.
name|clearTextSize
operator|=
name|length1
expr_stmt|;
name|this
operator|.
name|eexecSize
operator|=
name|length2
expr_stmt|;
name|this
operator|.
name|cidToLabel
operator|.
name|put
argument_list|(
operator|-
literal|1
argument_list|,
name|NOTDEF
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
name|NOTDEF
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// ---- Instantiate the Encoding Map
if|if
condition|(
name|enc
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|encoding
operator|=
name|enc
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|encoding
operator|=
operator|new
name|StandardEncoding
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** 	 * Close the font stream 	 */
specifier|public
name|void
name|close
parameter_list|()
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|this
operator|.
name|font
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createStandardEncoding
parameter_list|()
block|{
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/A"
argument_list|,
literal|0101
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/AE"
argument_list|,
literal|0341
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/B"
argument_list|,
literal|0102
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/C"
argument_list|,
literal|0103
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/D"
argument_list|,
literal|0104
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/E"
argument_list|,
literal|0105
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/F"
argument_list|,
literal|0106
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/G"
argument_list|,
literal|0107
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/H"
argument_list|,
literal|0110
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/I"
argument_list|,
literal|0111
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/J"
argument_list|,
literal|0112
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/K"
argument_list|,
literal|0113
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/L"
argument_list|,
literal|0114
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/Lslash"
argument_list|,
literal|0350
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/M"
argument_list|,
literal|0115
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/N"
argument_list|,
literal|0116
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/O"
argument_list|,
literal|0117
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/OE"
argument_list|,
literal|0352
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/Oslash"
argument_list|,
literal|0351
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/P"
argument_list|,
literal|0120
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/Q"
argument_list|,
literal|0121
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/R"
argument_list|,
literal|0122
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/S"
argument_list|,
literal|0123
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/T"
argument_list|,
literal|0124
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/U"
argument_list|,
literal|0125
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/V"
argument_list|,
literal|0126
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/W"
argument_list|,
literal|0127
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/X"
argument_list|,
literal|0130
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/Y"
argument_list|,
literal|0131
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/Z"
argument_list|,
literal|0132
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/a"
argument_list|,
literal|0141
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/acute"
argument_list|,
literal|0302
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/acute"
argument_list|,
literal|0302
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/ae"
argument_list|,
literal|0361
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/ampersand"
argument_list|,
literal|046
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/asciicircum"
argument_list|,
literal|0136
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/asciitilde"
argument_list|,
literal|0176
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/asterisk"
argument_list|,
literal|052
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/at"
argument_list|,
literal|0100
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/b"
argument_list|,
literal|0142
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/backslash"
argument_list|,
literal|0134
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/bar"
argument_list|,
literal|0174
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/braceleft"
argument_list|,
literal|0173
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/braceright"
argument_list|,
literal|0175
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/bracketleft"
argument_list|,
literal|0133
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/bracketright"
argument_list|,
literal|0135
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/breve"
argument_list|,
literal|0306
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/bullet"
argument_list|,
literal|0267
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/c"
argument_list|,
literal|0143
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/caron"
argument_list|,
literal|0317
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/cedilla"
argument_list|,
literal|0313
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/cent"
argument_list|,
literal|0242
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/circumflex"
argument_list|,
literal|0303
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/colon"
argument_list|,
literal|072
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/comma"
argument_list|,
literal|054
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/currency"
argument_list|,
literal|0250
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/d"
argument_list|,
literal|0144
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/dagger"
argument_list|,
literal|0262
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/daggerdbl"
argument_list|,
literal|0263
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/dieresis"
argument_list|,
literal|0310
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/dollar"
argument_list|,
literal|044
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/dotaccent"
argument_list|,
literal|0307
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/dotlessi"
argument_list|,
literal|0365
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/e"
argument_list|,
literal|0145
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/eight"
argument_list|,
literal|070
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/ellipsis"
argument_list|,
literal|274
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/emdash"
argument_list|,
literal|0320
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/endash"
argument_list|,
literal|0261
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/equal"
argument_list|,
literal|075
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/exclam"
argument_list|,
literal|041
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/exclamdown"
argument_list|,
literal|0241
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/f"
argument_list|,
literal|0146
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/fi"
argument_list|,
literal|0256
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/five"
argument_list|,
literal|0065
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/fl"
argument_list|,
literal|0257
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/florin"
argument_list|,
literal|0246
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/four"
argument_list|,
literal|064
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/fraction"
argument_list|,
literal|0244
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/g"
argument_list|,
literal|0147
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/germandbls"
argument_list|,
literal|0373
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/grave"
argument_list|,
literal|0301
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/greater"
argument_list|,
literal|0076
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/guillemotleft"
argument_list|,
literal|0253
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/guillemotright"
argument_list|,
literal|0273
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/guilsinglleft"
argument_list|,
literal|0254
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/guilsinglright"
argument_list|,
literal|0255
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/h"
argument_list|,
literal|0150
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/hungarumlaut"
argument_list|,
literal|0315
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/hyphen"
argument_list|,
literal|055
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/i"
argument_list|,
literal|0151
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/j"
argument_list|,
literal|0152
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/k"
argument_list|,
literal|0153
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/l"
argument_list|,
literal|0154
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/less"
argument_list|,
literal|0074
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/lslash"
argument_list|,
literal|0370
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/m"
argument_list|,
literal|0155
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/macron"
argument_list|,
literal|0305
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/n"
argument_list|,
literal|0156
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/nine"
argument_list|,
literal|071
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/numbersign"
argument_list|,
literal|043
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/o"
argument_list|,
literal|0157
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/oe"
argument_list|,
literal|0372
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/ogonek"
argument_list|,
literal|0316
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/one"
argument_list|,
literal|061
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/ordfeminine"
argument_list|,
literal|0343
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/ordmasculine"
argument_list|,
literal|0353
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/oslash"
argument_list|,
literal|0371
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/p"
argument_list|,
literal|0160
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/paragraph"
argument_list|,
literal|0266
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/parenleft"
argument_list|,
literal|050
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/parenright"
argument_list|,
literal|051
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/percent"
argument_list|,
literal|045
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/period"
argument_list|,
literal|056
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/periodcentered"
argument_list|,
literal|0264
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/perthousand"
argument_list|,
literal|0275
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/plus"
argument_list|,
literal|0053
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/q"
argument_list|,
literal|0161
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/question"
argument_list|,
literal|077
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/questiondown"
argument_list|,
literal|0277
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/quotedbl"
argument_list|,
literal|0042
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/quotedblbase"
argument_list|,
literal|0271
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/quotedblleft"
argument_list|,
literal|0252
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/quotedblright"
argument_list|,
literal|0272
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/quoteleft"
argument_list|,
literal|0140
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/quoteright"
argument_list|,
literal|047
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/quotesinglbase"
argument_list|,
literal|0270
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/quotesingle"
argument_list|,
literal|0251
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/r"
argument_list|,
literal|0162
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/ring"
argument_list|,
literal|0312
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/s"
argument_list|,
literal|0163
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/section"
argument_list|,
literal|0247
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/semicolon"
argument_list|,
literal|0073
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/seven"
argument_list|,
literal|0067
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/six"
argument_list|,
literal|066
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/slash"
argument_list|,
literal|057
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/space"
argument_list|,
literal|040
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/sterling"
argument_list|,
literal|0243
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/t"
argument_list|,
literal|0164
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/three"
argument_list|,
literal|063
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/tilde"
argument_list|,
literal|0304
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/two"
argument_list|,
literal|062
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/u"
argument_list|,
literal|0165
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/underscore"
argument_list|,
literal|0137
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/v"
argument_list|,
literal|0166
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/w"
argument_list|,
literal|0167
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/x"
argument_list|,
literal|0170
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/y"
argument_list|,
literal|0171
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/yen"
argument_list|,
literal|0245
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/z"
argument_list|,
literal|0172
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/zero"
argument_list|,
literal|060
argument_list|)
expr_stmt|;
name|transafertLTOCinCTIL
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|transafertLTOCinCTIL
parameter_list|()
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|entry
range|:
name|this
operator|.
name|labelToCid
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|this
operator|.
name|cidToLabel
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|createISOLatin1Encoding
parameter_list|()
block|{
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/A"
argument_list|,
literal|0101
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/AE"
argument_list|,
literal|0306
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/Aacute"
argument_list|,
literal|0301
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/Acircumflex"
argument_list|,
literal|0302
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/Adieresis"
argument_list|,
literal|0304
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/Agrave"
argument_list|,
literal|0300
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/Aring"
argument_list|,
literal|0305
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/Atilde"
argument_list|,
literal|0303
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/B"
argument_list|,
literal|0102
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/C"
argument_list|,
literal|0103
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/Ccedilla"
argument_list|,
literal|0307
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/D"
argument_list|,
literal|0104
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/E"
argument_list|,
literal|0105
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/Eacute"
argument_list|,
literal|0311
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/Ecircumflex"
argument_list|,
literal|0312
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/Edieresis"
argument_list|,
literal|0313
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/Egrave"
argument_list|,
literal|0310
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/Eth"
argument_list|,
literal|0320
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/F"
argument_list|,
literal|0106
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/G"
argument_list|,
literal|0107
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/H"
argument_list|,
literal|0110
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/I"
argument_list|,
literal|0111
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/Iacute"
argument_list|,
literal|0315
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/Icircumflex"
argument_list|,
literal|0316
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/Idieresis"
argument_list|,
literal|0317
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/Igrave"
argument_list|,
literal|0314
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/J"
argument_list|,
literal|0112
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/K"
argument_list|,
literal|0113
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/L"
argument_list|,
literal|0114
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/M"
argument_list|,
literal|0115
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/N"
argument_list|,
literal|0116
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/Ntilde"
argument_list|,
literal|0321
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/O"
argument_list|,
literal|0117
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/Oacute"
argument_list|,
literal|0323
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/Ocircumflex"
argument_list|,
literal|0324
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/Odieresis"
argument_list|,
literal|0326
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/Ograve"
argument_list|,
literal|0322
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/Oslash"
argument_list|,
literal|0330
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/Otilde"
argument_list|,
literal|0325
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/P"
argument_list|,
literal|0120
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/Q"
argument_list|,
literal|0121
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/R"
argument_list|,
literal|0122
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/S"
argument_list|,
literal|0123
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/T"
argument_list|,
literal|0124
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/Thorn"
argument_list|,
literal|0336
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/U"
argument_list|,
literal|0125
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/Uacute"
argument_list|,
literal|0332
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/Ucircumflex"
argument_list|,
literal|0333
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/Udieresis"
argument_list|,
literal|0334
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/Ugrave"
argument_list|,
literal|0331
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/V"
argument_list|,
literal|0126
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/W"
argument_list|,
literal|0127
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/X"
argument_list|,
literal|0130
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/Y"
argument_list|,
literal|0131
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/Yacute"
argument_list|,
literal|0335
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/Z"
argument_list|,
literal|0132
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/a"
argument_list|,
literal|0141
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/aacute"
argument_list|,
literal|0341
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/acircumflex"
argument_list|,
literal|0342
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/acute"
argument_list|,
literal|0222
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/acute"
argument_list|,
literal|0264
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/adieresis"
argument_list|,
literal|0344
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/ae"
argument_list|,
literal|0346
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/agrave"
argument_list|,
literal|0340
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/ampersand"
argument_list|,
literal|0046
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/aring"
argument_list|,
literal|0345
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/asciicircum"
argument_list|,
literal|0136
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/asciitilde"
argument_list|,
literal|0176
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/asterisk"
argument_list|,
literal|0052
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/at"
argument_list|,
literal|0100
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/atilde"
argument_list|,
literal|0343
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/b"
argument_list|,
literal|0142
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/backslash"
argument_list|,
literal|0134
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/bar"
argument_list|,
literal|0174
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/braceleft"
argument_list|,
literal|0173
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/braceright"
argument_list|,
literal|0175
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/bracketleft"
argument_list|,
literal|0133
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/bracketright"
argument_list|,
literal|0135
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/breve"
argument_list|,
literal|0226
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/brokenbar"
argument_list|,
literal|0246
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/c"
argument_list|,
literal|0143
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/caron"
argument_list|,
literal|0237
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/ccedilla"
argument_list|,
literal|0347
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/cedilla"
argument_list|,
literal|0270
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/cent"
argument_list|,
literal|0242
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/circumflex"
argument_list|,
literal|0223
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/colon"
argument_list|,
literal|0072
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/comma"
argument_list|,
literal|0054
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/copyright"
argument_list|,
literal|0251
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/currency"
argument_list|,
literal|0244
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/d"
argument_list|,
literal|0144
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/degree"
argument_list|,
literal|0260
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/dieresis"
argument_list|,
literal|0250
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/divide"
argument_list|,
literal|0367
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/dollar"
argument_list|,
literal|0044
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/dotaccent"
argument_list|,
literal|0227
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/dotlessi"
argument_list|,
literal|0220
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/e"
argument_list|,
literal|0145
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/eacute"
argument_list|,
literal|0351
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/ecircumflex"
argument_list|,
literal|0352
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/edieresis"
argument_list|,
literal|0353
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/egrave"
argument_list|,
literal|0350
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/eight"
argument_list|,
literal|0070
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/equal"
argument_list|,
literal|0075
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/eth"
argument_list|,
literal|0360
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/exclam"
argument_list|,
literal|0041
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/exclamdown"
argument_list|,
literal|0241
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/f"
argument_list|,
literal|0146
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/five"
argument_list|,
literal|0065
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/four"
argument_list|,
literal|0064
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/g"
argument_list|,
literal|0147
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/germandbls"
argument_list|,
literal|0337
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/grave"
argument_list|,
literal|0221
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/greater"
argument_list|,
literal|0076
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/guillemotleft"
argument_list|,
literal|0253
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/guillemotright"
argument_list|,
literal|0273
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/h"
argument_list|,
literal|0150
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/hungarumlaut"
argument_list|,
literal|0235
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/hyphen"
argument_list|,
literal|0255
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/i"
argument_list|,
literal|0151
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/iacute"
argument_list|,
literal|0355
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/icircumflex"
argument_list|,
literal|0356
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/idieresis"
argument_list|,
literal|0357
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/igrave"
argument_list|,
literal|0354
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/j"
argument_list|,
literal|0152
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/k"
argument_list|,
literal|0153
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/l"
argument_list|,
literal|0154
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/less"
argument_list|,
literal|0074
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/logicalnot"
argument_list|,
literal|0254
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/m"
argument_list|,
literal|0155
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/macron"
argument_list|,
literal|0257
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/minus"
argument_list|,
literal|0055
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/mu"
argument_list|,
literal|0265
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/multiply"
argument_list|,
literal|0327
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/n"
argument_list|,
literal|0156
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/nine"
argument_list|,
literal|0071
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/ntilde"
argument_list|,
literal|0361
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/numbersign"
argument_list|,
literal|0043
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/o"
argument_list|,
literal|0157
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/oacute"
argument_list|,
literal|0363
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/ocircumflex"
argument_list|,
literal|0364
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/odieresis"
argument_list|,
literal|0366
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/ogonek"
argument_list|,
literal|0236
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/ograve"
argument_list|,
literal|0362
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/one"
argument_list|,
literal|0061
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/onehalf"
argument_list|,
literal|0275
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/onequarter"
argument_list|,
literal|0274
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/onesuperior"
argument_list|,
literal|0271
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/ordfeminine"
argument_list|,
literal|0252
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/ordmasculine"
argument_list|,
literal|0272
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/oslash"
argument_list|,
literal|0370
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/otilde"
argument_list|,
literal|0365
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/p"
argument_list|,
literal|0160
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/paragraph"
argument_list|,
literal|0266
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/parenleft"
argument_list|,
literal|0050
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/parenright"
argument_list|,
literal|0051
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/percent"
argument_list|,
literal|0045
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/period"
argument_list|,
literal|0056
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/periodcentered"
argument_list|,
literal|0267
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/plus"
argument_list|,
literal|0053
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/plusminus"
argument_list|,
literal|0261
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/q"
argument_list|,
literal|0161
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/question"
argument_list|,
literal|0077
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/questiondown"
argument_list|,
literal|0277
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/quotedbl"
argument_list|,
literal|0042
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/quoteleft"
argument_list|,
literal|0140
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/quoteright"
argument_list|,
literal|0047
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/r"
argument_list|,
literal|0162
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/registered"
argument_list|,
literal|0256
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/ring"
argument_list|,
literal|0232
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/s"
argument_list|,
literal|0163
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/section"
argument_list|,
literal|0247
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/semicolon"
argument_list|,
literal|0073
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/seven"
argument_list|,
literal|0067
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/six"
argument_list|,
literal|0066
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/slash"
argument_list|,
literal|0057
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/space"
argument_list|,
literal|0040
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/sterling"
argument_list|,
literal|0243
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/t"
argument_list|,
literal|0164
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/thorn"
argument_list|,
literal|0376
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/three"
argument_list|,
literal|0063
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/threequarters"
argument_list|,
literal|0276
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/threesuperior"
argument_list|,
literal|0263
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/tilde"
argument_list|,
literal|0224
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/two"
argument_list|,
literal|0062
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/twosuperior"
argument_list|,
literal|0262
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/u"
argument_list|,
literal|0165
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/uacute"
argument_list|,
literal|0372
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/ucircumflex"
argument_list|,
literal|0373
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/udieresis"
argument_list|,
literal|0374
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/ugrave"
argument_list|,
literal|0371
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/underscore"
argument_list|,
literal|0137
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/v"
argument_list|,
literal|0166
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/w"
argument_list|,
literal|0167
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/x"
argument_list|,
literal|0170
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/y"
argument_list|,
literal|0171
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/yacute"
argument_list|,
literal|0375
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/ydieresis"
argument_list|,
literal|0377
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/yen"
argument_list|,
literal|0245
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/z"
argument_list|,
literal|0172
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
literal|"/zero"
argument_list|,
literal|0060
argument_list|)
expr_stmt|;
name|transafertLTOCinCTIL
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Parse the font stream to feed cidToLabel and labelToMetric with Glyphs 	 * information. 	 *  	 * @throws ValidationException 	 *           On unexpected error 	 */
specifier|public
name|void
name|parse
parameter_list|()
throws|throws
name|ValidationException
block|{
name|readClearText
argument_list|()
expr_stmt|;
name|computeEexec
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Read eexecSize in the font stream. 	 *  	 * @return 	 * @throws IOException 	 */
specifier|protected
name|byte
index|[]
name|readEexec
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|BUFFER_SIZE
init|=
literal|1024
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|BUFFER_SIZE
index|]
decl_stmt|;
name|ByteArrayOutputStream
name|eexecPart
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|int
name|lr
init|=
literal|0
decl_stmt|;
name|int
name|total
init|=
literal|0
decl_stmt|;
do|do
block|{
name|lr
operator|=
name|this
operator|.
name|font
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|BUFFER_SIZE
argument_list|)
expr_stmt|;
if|if
condition|(
name|lr
operator|==
name|BUFFER_SIZE
operator|&&
operator|(
name|total
operator|+
name|BUFFER_SIZE
operator|<
name|eexecSize
operator|)
condition|)
block|{
name|eexecPart
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|BUFFER_SIZE
argument_list|)
expr_stmt|;
name|total
operator|+=
name|BUFFER_SIZE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lr
operator|>
literal|0
operator|&&
operator|(
name|total
operator|+
name|lr
operator|<
name|eexecSize
operator|)
condition|)
block|{
name|eexecPart
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|lr
argument_list|)
expr_stmt|;
name|total
operator|+=
name|lr
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lr
operator|>
literal|0
operator|&&
operator|(
name|total
operator|+
name|lr
operator|>=
name|eexecSize
operator|)
condition|)
block|{
name|eexecPart
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|eexecSize
operator|-
name|total
argument_list|)
expr_stmt|;
name|total
operator|+=
operator|(
name|eexecSize
operator|-
name|total
operator|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|eexecSize
operator|>
name|total
operator|&&
name|lr
operator|>
literal|0
condition|)
do|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|eexecPart
argument_list|)
expr_stmt|;
return|return
name|eexecPart
operator|.
name|toByteArray
argument_list|()
return|;
block|}
comment|/** 	 * This method read eexecSize bytes. Read bytes are decoded using the 	 * Type1FontUtils class and FontMetrics are computed. 	 *  	 * @throws ValidationException 	 */
specifier|protected
name|void
name|computeEexec
parameter_list|()
throws|throws
name|ValidationException
block|{
try|try
block|{
name|byte
index|[]
name|eexec
init|=
name|readEexec
argument_list|()
decl_stmt|;
name|byte
index|[]
name|decryptedEexec
init|=
name|decodeEexec
argument_list|(
name|eexec
argument_list|)
decl_stmt|;
comment|//			// Uncomment this to see EExec as clear text
comment|//			System.out.println("DECODED EEXEC : ");
comment|//			System.out.println(new String(decryptedEexec));
name|parseDecodedEexec
argument_list|(
name|decryptedEexec
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ValidationException
argument_list|(
literal|"Unable to compute the eexec portion : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/** 	 * Parse decoded eexec portion of the font program. Feeds the labelToMetric 	 * map. 	 *  	 * @param eexec 	 * @throws IOException 	 */
specifier|protected
name|void
name|parseDecodedEexec
parameter_list|(
name|byte
index|[]
name|eexec
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayInputStream
name|baisEexec
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|eexec
argument_list|)
decl_stmt|;
name|boolean
name|expectedCharString
init|=
literal|false
decl_stmt|;
comment|// ---- According to Type1 specification 4 is the default value
name|int
name|lenIV
init|=
literal|4
decl_stmt|;
name|int
name|nChars
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|byte
index|[]
name|token
init|=
name|readToken
argument_list|(
name|baisEexec
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|tokenIdentifier
argument_list|(
name|token
argument_list|)
condition|)
block|{
case|case
name|DUP_TOKEN
case|:
if|if
condition|(
operator|!
name|expectedCharString
condition|)
block|{
name|byte
index|[]
name|tokenChoice
init|=
name|readToken
argument_list|(
name|baisEexec
argument_list|)
decl_stmt|;
comment|// ---- numeric code
if|if
condition|(
name|tokenIdentifier
argument_list|(
name|tokenChoice
argument_list|)
operator|==
name|CHARSTRINGS_TOKEN
condition|)
block|{
name|byte
index|[]
name|n
init|=
name|readToken
argument_list|(
name|baisEexec
argument_list|)
decl_stmt|;
name|nChars
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
operator|new
name|String
argument_list|(
name|n
argument_list|,
literal|"US-ASCII"
argument_list|)
argument_list|)
expr_stmt|;
name|expectedCharString
operator|=
literal|true
expr_stmt|;
comment|// ---- read the end of line "dict dup begin"
name|readToken
argument_list|(
name|baisEexec
argument_list|)
expr_stmt|;
name|readToken
argument_list|(
name|baisEexec
argument_list|)
expr_stmt|;
name|readToken
argument_list|(
name|baisEexec
argument_list|)
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
operator|!
literal|"begin"
operator|.
name|equals
argument_list|(
operator|new
name|String
argument_list|(
name|tokenChoice
argument_list|,
literal|"US-ASCII"
argument_list|)
argument_list|)
condition|)
block|{
name|byte
index|[]
name|toskip
init|=
name|readToken
argument_list|(
name|baisEexec
argument_list|)
decl_stmt|;
comment|// ---- binary length
name|readToken
argument_list|(
name|baisEexec
argument_list|)
expr_stmt|;
comment|// ---- skip RD
name|int
name|skip
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
operator|new
name|String
argument_list|(
name|toskip
argument_list|,
literal|"US-ASCII"
argument_list|)
argument_list|)
decl_stmt|;
name|readBytes
argument_list|(
name|baisEexec
argument_list|,
name|skip
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|LEN_IV_TOKEN
case|:
name|byte
index|[]
name|l
init|=
name|readToken
argument_list|(
name|baisEexec
argument_list|)
decl_stmt|;
name|lenIV
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
operator|new
name|String
argument_list|(
name|l
argument_list|,
literal|"US-ASCII"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|CHARSTRINGS_TOKEN
case|:
name|byte
index|[]
name|n
init|=
name|readToken
argument_list|(
name|baisEexec
argument_list|)
decl_stmt|;
name|nChars
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
operator|new
name|String
argument_list|(
name|n
argument_list|,
literal|"US-ASCII"
argument_list|)
argument_list|)
expr_stmt|;
name|expectedCharString
operator|=
literal|true
expr_stmt|;
comment|// ---- read the end of line "dict dup begin"
name|readToken
argument_list|(
name|baisEexec
argument_list|)
expr_stmt|;
name|readToken
argument_list|(
name|baisEexec
argument_list|)
expr_stmt|;
name|readToken
argument_list|(
name|baisEexec
argument_list|)
expr_stmt|;
break|break;
case|case
name|OBJ_NAME_TOKEN
case|:
comment|/* 				 * ---- OBJ_NAME_TOKEN : Some character's label aren't defined in the 				 * Encoding object but they should be defined by the Encoding array in 				 * the font ---- program. 				 */
comment|// break;
case|case
name|CHAR_LABEL_TOKEN
case|:
comment|// case OBJ_NAME_TOKEN :
if|if
condition|(
name|expectedCharString
condition|)
block|{
name|String
name|label
init|=
operator|new
name|String
argument_list|(
name|token
argument_list|,
literal|"US-ASCII"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|csl
init|=
name|readToken
argument_list|(
name|baisEexec
argument_list|)
decl_stmt|;
name|int
name|length
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
operator|new
name|String
argument_list|(
name|csl
argument_list|,
literal|"US-ASCII"
argument_list|)
argument_list|)
decl_stmt|;
comment|// ---- read the RD token
name|readToken
argument_list|(
name|baisEexec
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToMetric
operator|.
name|put
argument_list|(
name|label
argument_list|,
name|getGlyphDescription
argument_list|(
name|baisEexec
argument_list|,
name|length
argument_list|,
name|lenIV
argument_list|)
argument_list|)
expr_stmt|;
name|nChars
operator|--
expr_stmt|;
if|if
condition|(
name|nChars
operator|==
literal|0
condition|)
block|{
comment|// ---- no more character
return|return;
block|}
block|}
default|default:
comment|// nothing to do
break|break;
block|}
block|}
block|}
comment|/** 	 *  	 * @param is 	 * @param length 	 * @return 	 * @throws IOException 	 */
specifier|protected
name|byte
index|[]
name|readBytes
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|charF
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|charF
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|is
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
return|return
name|charF
return|;
block|}
comment|/** 	 * Read the CharString in the InputStream and decode it. The decoded 	 * CharString is used to create a GlyphDescription object. 	 *  	 * @param is 	 *          the decoded eexec portion of the type 1 font program 	 * @param length 	 *          the number of bytes to read 	 * @param rdBytes 	 *          the number of padding bytes at the beginning of the decoded 	 *          CharString 	 * @return 	 * @throws IOException 	 */
specifier|protected
name|Type1GlyphDescription
name|getGlyphDescription
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|int
name|length
parameter_list|,
name|int
name|rdBytes
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|charF
init|=
name|readBytes
argument_list|(
name|is
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|byte
index|[]
name|dcs
init|=
name|Type1FontUtil
operator|.
name|charstringDecrypt
argument_list|(
name|charF
argument_list|,
name|rdBytes
argument_list|)
decl_stmt|;
name|Type1CharStringParser
name|t1p
init|=
operator|new
name|Type1CharStringParser
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|lSequence
init|=
name|t1p
operator|.
name|parse
argument_list|(
name|dcs
argument_list|)
decl_stmt|;
return|return
operator|new
name|Type1GlyphDescription
argument_list|(
name|lSequence
argument_list|)
return|;
block|}
comment|/** 	 * Call the Type1FontUtil.eexecDecrypt() method 	 *  	 * @param eexec 	 * @return the decrypted eexec portion of the font program 	 */
specifier|protected
name|byte
index|[]
name|decodeEexec
parameter_list|(
name|byte
index|[]
name|eexec
parameter_list|)
block|{
return|return
name|Type1FontUtil
operator|.
name|eexecDecrypt
argument_list|(
name|eexec
argument_list|)
return|;
block|}
comment|/** 	 * Read the clear-text portion of the Type1 font program. 	 *  	 * If FamillyName, FullName and FontName exist in the font program, 	 * Type1MetricHelper updates its attributes. This method feeds the cidToLabel 	 * map. 	 *  	 * @throws ValidationException 	 */
specifier|protected
name|void
name|readClearText
parameter_list|()
throws|throws
name|ValidationException
block|{
name|int
name|readBytes
init|=
literal|0
decl_stmt|;
try|try
block|{
name|boolean
name|dupAuth
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|clearTextSize
operator|-
name|readBytes
operator|>
literal|0
condition|)
block|{
name|byte
index|[]
name|token
init|=
name|readToken
argument_list|(
name|this
operator|.
name|font
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|tokenIdentifier
argument_list|(
name|token
argument_list|)
condition|)
block|{
case|case
name|FAMILY_NAME_TOKEN
case|:
name|byte
index|[]
name|fname
init|=
name|readToken
argument_list|(
name|this
operator|.
name|font
argument_list|)
decl_stmt|;
name|readBytes
operator|+=
operator|(
name|fname
operator|.
name|length
operator|+
literal|1
operator|)
expr_stmt|;
name|this
operator|.
name|familyName
operator|=
operator|new
name|String
argument_list|(
name|fname
argument_list|,
literal|"US-ASCII"
argument_list|)
expr_stmt|;
break|break;
case|case
name|FULL_NAME_TOKEN
case|:
name|byte
index|[]
name|fullname
init|=
name|readToken
argument_list|(
name|this
operator|.
name|font
argument_list|)
decl_stmt|;
name|readBytes
operator|+=
operator|(
name|fullname
operator|.
name|length
operator|+
literal|1
operator|)
expr_stmt|;
name|this
operator|.
name|fullName
operator|=
operator|new
name|String
argument_list|(
name|fullname
argument_list|,
literal|"US-ASCII"
argument_list|)
expr_stmt|;
break|break;
case|case
name|DUP_TOKEN
case|:
if|if
condition|(
name|dupAuth
condition|)
block|{
name|byte
index|[]
name|cid
init|=
name|readToken
argument_list|(
name|this
operator|.
name|font
argument_list|)
decl_stmt|;
name|readBytes
operator|+=
operator|(
name|cid
operator|.
name|length
operator|+
literal|1
operator|)
expr_stmt|;
name|byte
index|[]
name|label
init|=
name|readToken
argument_list|(
name|this
operator|.
name|font
argument_list|)
decl_stmt|;
name|readBytes
operator|+=
operator|(
name|label
operator|.
name|length
operator|+
literal|1
operator|)
expr_stmt|;
name|int
name|cl
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
operator|new
name|String
argument_list|(
name|cid
argument_list|,
literal|"US-ASCII"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|lc
init|=
operator|new
name|String
argument_list|(
name|label
argument_list|,
literal|"US-ASCII"
argument_list|)
decl_stmt|;
name|this
operator|.
name|cidToLabel
operator|.
name|put
argument_list|(
name|cl
argument_list|,
name|lc
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelToCid
operator|.
name|put
argument_list|(
name|lc
argument_list|,
name|cl
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ENCODING_TOKEN
case|:
name|byte
index|[]
name|tmpTok
init|=
name|readToken
argument_list|(
name|this
operator|.
name|font
argument_list|)
decl_stmt|;
name|readBytes
operator|+=
operator|(
name|tmpTok
operator|.
name|length
operator|+
literal|1
operator|)
expr_stmt|;
name|String
name|encoding
init|=
operator|new
name|String
argument_list|(
name|tmpTok
argument_list|,
literal|"US-ASCII"
argument_list|)
decl_stmt|;
if|if
condition|(
name|PS_STANDARD_ENCODING
operator|.
name|equals
argument_list|(
name|encoding
argument_list|)
condition|)
block|{
name|createStandardEncoding
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|PS_ISOLATIN_ENCODING
operator|.
name|equals
argument_list|(
name|encoding
argument_list|)
condition|)
block|{
name|createISOLatin1Encoding
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|dupAuth
operator|=
literal|true
expr_stmt|;
block|}
break|break;
case|case
name|READONLY_TOKEN
case|:
name|dupAuth
operator|=
literal|false
expr_stmt|;
break|break;
default|default:
comment|// nothing to go
block|}
comment|// ---- add the token and the Space character length
name|readBytes
operator|+=
operator|(
name|token
operator|.
name|length
operator|+
literal|1
operator|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ValidationException
argument_list|(
literal|"Unable to read the clear text : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/** 	 * Returns an int value which represent the token. 	 *  	 * @param token 	 * @return -1 if the token must be ignored 	 * @throws IOException 	 */
specifier|protected
name|int
name|tokenIdentifier
parameter_list|(
name|byte
index|[]
name|token
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|tokenAsStr
init|=
operator|new
name|String
argument_list|(
name|token
argument_list|,
literal|"US-ASCII"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"/FamilyName"
operator|.
name|equals
argument_list|(
name|tokenAsStr
argument_list|)
condition|)
block|{
return|return
name|FAMILY_NAME_TOKEN
return|;
block|}
if|if
condition|(
literal|"/FullName"
operator|.
name|equals
argument_list|(
name|tokenAsStr
argument_list|)
condition|)
block|{
return|return
name|FULL_NAME_TOKEN
return|;
block|}
if|if
condition|(
literal|"/FontName"
operator|.
name|equals
argument_list|(
name|tokenAsStr
argument_list|)
condition|)
block|{
return|return
name|FONT_NAME_TOKEN
return|;
block|}
if|if
condition|(
literal|"dup"
operator|.
name|equals
argument_list|(
name|tokenAsStr
argument_list|)
condition|)
block|{
return|return
name|DUP_TOKEN
return|;
block|}
if|if
condition|(
literal|"/Encoding"
operator|.
name|equals
argument_list|(
name|tokenAsStr
argument_list|)
condition|)
block|{
return|return
name|ENCODING_TOKEN
return|;
block|}
if|if
condition|(
literal|"readonly"
operator|.
name|equals
argument_list|(
name|tokenAsStr
argument_list|)
condition|)
block|{
return|return
name|READONLY_TOKEN
return|;
block|}
if|if
condition|(
literal|"/lenIV"
operator|.
name|equals
argument_list|(
name|tokenAsStr
argument_list|)
condition|)
block|{
return|return
name|LEN_IV_TOKEN
return|;
block|}
if|if
condition|(
literal|"/CharStrings"
operator|.
name|equals
argument_list|(
name|tokenAsStr
argument_list|)
condition|)
block|{
return|return
name|CHARSTRINGS_TOKEN
return|;
block|}
if|if
condition|(
name|labelToCid
operator|.
name|containsKey
argument_list|(
name|tokenAsStr
argument_list|)
operator|||
name|this
operator|.
name|encoding
operator|.
name|getNameToCodeMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|tokenAsStr
operator|.
name|replace
argument_list|(
literal|"/"
argument_list|,
literal|""
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|CHAR_LABEL_TOKEN
return|;
block|}
name|String
name|regex
init|=
literal|"/[^\\s\\(\\)\\[\\]\\{\\}/<>%]+"
decl_stmt|;
if|if
condition|(
name|tokenAsStr
operator|.
name|matches
argument_list|(
name|regex
argument_list|)
condition|)
block|{
return|return
name|OBJ_NAME_TOKEN
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/** 	 * Read the stream until a space character or EOL is reached. 	 *  	 * @return byte array containing bytes read before the space character. 	 * @throws IOException 	 */
specifier|protected
name|byte
index|[]
name|readToken
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|buffer
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|currentByte
init|=
operator|-
literal|1
decl_stmt|;
do|do
block|{
name|currentByte
operator|=
name|stream
operator|.
name|read
argument_list|()
expr_stmt|;
comment|// ---- Token is String literal
if|if
condition|(
name|currentByte
operator|>
literal|0
operator|&&
name|currentByte
operator|==
literal|'('
condition|)
block|{
name|int
name|opened
init|=
literal|1
decl_stmt|;
name|buffer
operator|.
name|add
argument_list|(
name|currentByte
argument_list|)
expr_stmt|;
while|while
condition|(
name|opened
operator|!=
literal|0
condition|)
block|{
name|currentByte
operator|=
name|stream
operator|.
name|read
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentByte
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected End Of File"
argument_list|)
throw|;
block|}
if|if
condition|(
name|currentByte
operator|==
literal|'('
condition|)
block|{
name|opened
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentByte
operator|==
literal|')'
condition|)
block|{
name|opened
operator|--
expr_stmt|;
block|}
comment|// ---- Add useful character
name|buffer
operator|.
name|add
argument_list|(
name|currentByte
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|currentByte
operator|>
literal|0
operator|&&
name|currentByte
operator|==
literal|'['
condition|)
block|{
comment|// ---- token is an array
name|int
name|opened
init|=
literal|1
decl_stmt|;
name|buffer
operator|.
name|add
argument_list|(
name|currentByte
argument_list|)
expr_stmt|;
while|while
condition|(
name|opened
operator|!=
literal|0
condition|)
block|{
name|currentByte
operator|=
name|stream
operator|.
name|read
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentByte
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected End Of File"
argument_list|)
throw|;
block|}
if|if
condition|(
name|currentByte
operator|==
literal|'['
condition|)
block|{
name|opened
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentByte
operator|==
literal|']'
condition|)
block|{
name|opened
operator|--
expr_stmt|;
block|}
comment|// ---- Add useful character
name|buffer
operator|.
name|add
argument_list|(
name|currentByte
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|currentByte
operator|>
literal|0
operator|&&
name|currentByte
operator|==
literal|'{'
condition|)
block|{
comment|// ---- token is an dictionary
name|int
name|opened
init|=
literal|1
decl_stmt|;
name|buffer
operator|.
name|add
argument_list|(
name|currentByte
argument_list|)
expr_stmt|;
while|while
condition|(
name|opened
operator|!=
literal|0
condition|)
block|{
name|currentByte
operator|=
name|stream
operator|.
name|read
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentByte
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected End Of File"
argument_list|)
throw|;
block|}
if|if
condition|(
name|currentByte
operator|==
literal|'{'
condition|)
block|{
name|opened
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentByte
operator|==
literal|'}'
condition|)
block|{
name|opened
operator|--
expr_stmt|;
block|}
comment|// ---- Add useful character
name|buffer
operator|.
name|add
argument_list|(
name|currentByte
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|currentByte
operator|>
literal|0
operator|&&
operator|(
name|currentByte
operator|!=
literal|' '
operator|&&
name|currentByte
operator|!=
literal|'\n'
operator|&&
name|currentByte
operator|!=
literal|'\r'
operator|)
condition|)
block|{
comment|// ---- Add useful character
name|buffer
operator|.
name|add
argument_list|(
name|currentByte
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentByte
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected End Of File"
argument_list|)
throw|;
block|}
else|else
block|{
break|break;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
name|byte
index|[]
name|res
init|=
operator|new
name|byte
index|[
name|buffer
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|res
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|res
index|[
name|i
index|]
operator|=
name|buffer
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|byteValue
argument_list|()
expr_stmt|;
block|}
comment|//		 System.out.println("### READ TOKEN : " + new String(res));
comment|//		 if ("/CharStrings".equals(new String(res))) {
comment|//		 System.err.println("POUET");
comment|//		 }
return|return
name|res
return|;
block|}
comment|/** 	 * Returns the Character name as PDF Name Object. (Prefixed by '/'). If the 	 * name is missing from the cidToLabel map and missing from the encoding 	 * object, the "/.notdef" name is returned. 	 * The pdf encoding array is used before the cidToLabel map. 	 * @param cid 	 * @return 	 */
specifier|protected
name|String
name|getLabelAsName
parameter_list|(
name|int
name|cid
parameter_list|)
block|{
name|String
name|label
init|=
literal|null
decl_stmt|;
try|try
block|{
name|label
operator|=
name|this
operator|.
name|encoding
operator|.
name|getName
argument_list|(
name|cid
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|label
operator|=
name|this
operator|.
name|cidToLabel
operator|.
name|get
argument_list|(
name|cid
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|label
operator|==
literal|null
condition|)
block|{
name|label
operator|=
name|NOTDEF
expr_stmt|;
block|}
return|return
name|label
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
name|NAME_START
condition|?
name|label
else|:
name|NAME_START
operator|+
name|label
return|;
block|}
comment|/** 	 * Return the Glyph width according to the Character identifier. 	 *  	 * @param cid 	 * @return 	 */
specifier|public
name|int
name|getWidth
parameter_list|(
name|int
name|cid
parameter_list|)
block|{
name|String
name|label
init|=
name|getLabelAsName
argument_list|(
name|cid
argument_list|)
decl_stmt|;
name|Type1GlyphDescription
name|glyph
init|=
name|this
operator|.
name|labelToMetric
operator|.
name|get
argument_list|(
name|label
argument_list|)
decl_stmt|;
if|if
condition|(
name|glyph
operator|!=
literal|null
condition|)
block|{
return|return
name|glyph
operator|.
name|getWidth
argument_list|()
return|;
block|}
else|else
block|{
name|glyph
operator|=
name|this
operator|.
name|labelToMetric
operator|.
name|get
argument_list|(
name|NOTDEF
argument_list|)
expr_stmt|;
if|if
condition|(
name|glyph
operator|!=
literal|null
condition|)
block|{
return|return
name|glyph
operator|.
name|getWidth
argument_list|()
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
comment|/** 	 * Container which contains all CharString Command and Operand. Currently, 	 * only the Glyph width can be access through the "hsdw" operator. 	 */
specifier|public
specifier|static
class|class
name|Type1GlyphDescription
block|{
specifier|private
name|List
argument_list|<
name|Object
argument_list|>
name|lSequence
init|=
literal|null
decl_stmt|;
specifier|private
name|Integer
name|width
init|=
literal|null
decl_stmt|;
specifier|public
name|Type1GlyphDescription
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|ls
parameter_list|)
block|{
name|this
operator|.
name|lSequence
operator|=
name|ls
expr_stmt|;
block|}
specifier|public
name|int
name|getWidth
parameter_list|()
block|{
if|if
condition|(
name|width
operator|!=
literal|null
condition|)
block|{
return|return
name|width
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|lSequence
operator|!=
literal|null
operator|&&
name|i
operator|<
name|lSequence
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|Object
name|obj
init|=
name|lSequence
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|CharStringCommand
condition|)
block|{
name|CharStringCommand
name|csCmd
init|=
operator|(
name|CharStringCommand
operator|)
name|obj
decl_stmt|;
if|if
condition|(
literal|"hsbw"
operator|.
name|equals
argument_list|(
name|CharStringCommand
operator|.
name|TYPE1_VOCABULARY
operator|.
name|get
argument_list|(
name|csCmd
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|width
operator|=
operator|(
name|Integer
operator|)
name|lSequence
operator|.
name|get
argument_list|(
name|i
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
name|width
return|;
block|}
block|}
block|}
return|return
literal|0
return|;
block|}
block|}
block|}
end_class

end_unit

