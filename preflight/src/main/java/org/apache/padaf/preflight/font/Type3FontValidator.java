begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|font
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|DocumentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationResult
operator|.
name|ValidationError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|contentstream
operator|.
name|ContentStreamException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|font
operator|.
name|AbstractFontContainer
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|graphics
operator|.
name|ExtGStateContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|graphics
operator|.
name|ShadingPattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|utils
operator|.
name|COSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|encoding
operator|.
name|DictionaryEncoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|encoding
operator|.
name|Encoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|encoding
operator|.
name|EncodingManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDFontFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDType3Font
import|;
end_import

begin_class
specifier|public
class|class
name|Type3FontValidator
extends|extends
name|AbstractFontValidator
block|{
specifier|protected
name|PDType3Font
name|pdType3
init|=
literal|null
decl_stmt|;
specifier|protected
name|COSBase
name|fontBBox
init|=
literal|null
decl_stmt|;
specifier|protected
name|COSBase
name|fontMatrix
init|=
literal|null
decl_stmt|;
specifier|protected
name|COSBase
name|charProcs
init|=
literal|null
decl_stmt|;
specifier|protected
name|COSBase
name|fontEncoding
init|=
literal|null
decl_stmt|;
specifier|protected
name|COSBase
name|firstChar
init|=
literal|null
decl_stmt|;
specifier|protected
name|COSBase
name|lastChar
init|=
literal|null
decl_stmt|;
specifier|protected
name|COSBase
name|widths
init|=
literal|null
decl_stmt|;
specifier|protected
name|COSBase
name|toUnicode
init|=
literal|null
decl_stmt|;
specifier|protected
name|COSBase
name|resources
init|=
literal|null
decl_stmt|;
specifier|protected
name|Encoding
name|type3Encoding
init|=
literal|null
decl_stmt|;
specifier|public
name|Type3FontValidator
parameter_list|(
name|DocumentHandler
name|handler
parameter_list|,
name|COSObject
name|obj
parameter_list|)
throws|throws
name|ValidationException
block|{
name|super
argument_list|(
name|handler
argument_list|,
name|obj
argument_list|)
expr_stmt|;
name|this
operator|.
name|pdType3
operator|=
operator|(
name|PDType3Font
operator|)
name|this
operator|.
name|pFont
expr_stmt|;
block|}
comment|/** 	 * This methods stores in attributes all required element. We extract these 	 * elements because of the PDType3Font object returns sometime default value 	 * if the field is missing, so to avoid mistake during required field 	 * validation we store them. 	 */
specifier|private
name|void
name|extractFontDictionaryEntries
parameter_list|()
block|{
comment|// ---- required elements
name|this
operator|.
name|fontBBox
operator|=
name|this
operator|.
name|fDictionary
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|FONT_DICTIONARY_KEY_FONTBBOX
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|fontMatrix
operator|=
name|this
operator|.
name|fDictionary
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|FONT_DICTIONARY_KEY_FONTMATRIX
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|charProcs
operator|=
name|this
operator|.
name|fDictionary
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|FONT_DICTIONARY_KEY_CHARPROCS
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|fontEncoding
operator|=
name|this
operator|.
name|fDictionary
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|FONT_DICTIONARY_KEY_ENCODING
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|firstChar
operator|=
name|this
operator|.
name|fDictionary
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|FONT_DICTIONARY_KEY_FIRSTCHAR
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|lastChar
operator|=
name|this
operator|.
name|fDictionary
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|FONT_DICTIONARY_KEY_LASTCHAR
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|widths
operator|=
name|this
operator|.
name|fDictionary
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|FONT_DICTIONARY_KEY_WIDTHS
argument_list|)
argument_list|)
expr_stmt|;
comment|// ---- Optional elements
name|this
operator|.
name|toUnicode
operator|=
name|this
operator|.
name|fDictionary
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|FONT_DICTIONARY_KEY_TOUNICODE
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|resources
operator|=
name|this
operator|.
name|fDictionary
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|DICTIONARY_KEY_RESOURCES
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Returns true if all required fields are present. Otherwise, this method 	 * returns false and the FontContainer is updated. 	 *  	 * @return 	 */
specifier|private
name|boolean
name|checkMandatoryFields
parameter_list|()
block|{
name|boolean
name|all
init|=
operator|(
name|this
operator|.
name|fontBBox
operator|!=
literal|null
operator|)
decl_stmt|;
name|all
operator|=
name|all
operator|&&
operator|(
name|this
operator|.
name|fontMatrix
operator|!=
literal|null
operator|)
expr_stmt|;
name|all
operator|=
name|all
operator|&&
operator|(
name|this
operator|.
name|charProcs
operator|!=
literal|null
operator|)
expr_stmt|;
name|all
operator|=
name|all
operator|&&
operator|(
name|this
operator|.
name|fontEncoding
operator|!=
literal|null
operator|)
expr_stmt|;
name|all
operator|=
name|all
operator|&&
operator|(
name|this
operator|.
name|firstChar
operator|!=
literal|null
operator|)
expr_stmt|;
name|all
operator|=
name|all
operator|&&
operator|(
name|this
operator|.
name|lastChar
operator|!=
literal|null
operator|)
expr_stmt|;
name|all
operator|=
name|all
operator|&&
operator|(
name|this
operator|.
name|widths
operator|!=
literal|null
operator|)
expr_stmt|;
if|if
condition|(
operator|!
name|all
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_DICTIONARY_INVALID
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/* 		 * ---- Since PDF 1.5 : FontDescriptor is mandatory for Type3 font. However 		 * because of the FontDescriptor is optional in PDF-1.4 no specific checks 		 * are processed for PDF/A validation. 		 */
return|return
name|all
return|;
block|}
comment|/** 	 * FontBBox and FontMatrix are required. This method checks the type and the 	 * content of the FontBBox and FontMatrix element (Array of 4/6 number). If a 	 * type is invalid, the FontContainer is updated and the method returns false. 	 *  	 * @return 	 */
specifier|private
name|boolean
name|checkFontBBoxMatrix
parameter_list|()
block|{
name|COSDocument
name|cDoc
init|=
name|this
operator|.
name|handler
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocument
argument_list|()
decl_stmt|;
comment|// ---- both elements are an array
if|if
condition|(
operator|!
name|COSUtils
operator|.
name|isArray
argument_list|(
name|this
operator|.
name|fontBBox
argument_list|,
name|cDoc
argument_list|)
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_DICTIONARY_INVALID
argument_list|,
literal|"The FontBBox element isn't an array"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|COSUtils
operator|.
name|isArray
argument_list|(
name|this
operator|.
name|fontMatrix
argument_list|,
name|cDoc
argument_list|)
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_DICTIONARY_INVALID
argument_list|,
literal|"The FontMatrix element isn't an array"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// ---- check the content of the FontBBox.
comment|// ---- Should be an array with 4 numbers
name|COSArray
name|bbox
init|=
name|COSUtils
operator|.
name|getAsArray
argument_list|(
name|fontBBox
argument_list|,
name|cDoc
argument_list|)
decl_stmt|;
if|if
condition|(
name|bbox
operator|.
name|size
argument_list|()
operator|!=
literal|4
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_DICTIONARY_INVALID
argument_list|,
literal|"The FontBBox element is invalid"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|COSBase
name|elt
init|=
name|bbox
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|COSUtils
operator|.
name|isFloat
argument_list|(
name|elt
argument_list|,
name|cDoc
argument_list|)
operator|||
name|COSUtils
operator|.
name|isInteger
argument_list|(
name|elt
argument_list|,
name|cDoc
argument_list|)
operator|)
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_DICTIONARY_INVALID
argument_list|,
literal|"An element of FontBBox isn't a number"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
comment|// ---- check the content of the FontMatrix.
comment|// ---- Should be an array with 6 numbers
name|COSArray
name|matrix
init|=
name|COSUtils
operator|.
name|getAsArray
argument_list|(
name|fontMatrix
argument_list|,
name|cDoc
argument_list|)
decl_stmt|;
if|if
condition|(
name|matrix
operator|.
name|size
argument_list|()
operator|!=
literal|6
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_DICTIONARY_INVALID
argument_list|,
literal|"The FontMatrix element is invalid"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
block|{
name|COSBase
name|elt
init|=
name|matrix
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|COSUtils
operator|.
name|isFloat
argument_list|(
name|elt
argument_list|,
name|cDoc
argument_list|)
operator|||
name|COSUtils
operator|.
name|isInteger
argument_list|(
name|elt
argument_list|,
name|cDoc
argument_list|)
operator|)
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_DICTIONARY_INVALID
argument_list|,
literal|"An element of FontMatrix isn't a number"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/** 	 * For a Type3 font, the mapping between the Character Code and the Character 	 * name is entirely defined in the Encoding Entry. The Encoding Entry can be a 	 * Name (For the 5 predefined Encoding) or a Dictionary. If it is a 	 * dictionary, the "Differences" array contains the correspondence between a 	 * character code and a set of character name which are different from the 	 * encoding entry of the dictionary. 	 *  	 * This method checks that the encoding is : 	 *<UL> 	 *<li>An existing encoding name. 	 *<li>A dictionary with an existing encoding name (the name is optional) and 	 * a well formed "Differences" array (the array is optional) 	 *</UL> 	 *  	 * @return 	 */
specifier|private
name|boolean
name|checkEncoding
parameter_list|()
block|{
name|COSDocument
name|cDoc
init|=
name|this
operator|.
name|handler
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocument
argument_list|()
decl_stmt|;
name|EncodingManager
name|emng
init|=
operator|new
name|EncodingManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|COSUtils
operator|.
name|isString
argument_list|(
name|this
operator|.
name|fontEncoding
argument_list|,
name|cDoc
argument_list|)
condition|)
block|{
comment|// ---- Encoding is a Name, check if it is an Existing Encoding
name|String
name|enc
init|=
name|COSUtils
operator|.
name|getAsString
argument_list|(
name|this
operator|.
name|fontEncoding
argument_list|,
name|cDoc
argument_list|)
decl_stmt|;
try|try
block|{
name|type3Encoding
operator|=
name|emng
operator|.
name|getEncoding
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|enc
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ---- the encoding doesn't exist
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_ENCODING
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|COSUtils
operator|.
name|isDictionary
argument_list|(
name|this
operator|.
name|fontEncoding
argument_list|,
name|cDoc
argument_list|)
condition|)
block|{
name|COSDictionary
name|encodingDictionary
init|=
name|COSUtils
operator|.
name|getAsDictionary
argument_list|(
name|this
operator|.
name|fontEncoding
argument_list|,
name|cDoc
argument_list|)
decl_stmt|;
try|try
block|{
name|type3Encoding
operator|=
operator|new
name|DictionaryEncoding
argument_list|(
name|encodingDictionary
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ---- the encoding doesn't exist
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_ENCODING
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|COSBase
name|diff
init|=
name|encodingDictionary
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|FONT_DICTIONARY_KEY_DIFFERENCES
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|diff
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|COSUtils
operator|.
name|isArray
argument_list|(
name|diff
argument_list|,
name|cDoc
argument_list|)
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_TYPE3_DAMAGED
argument_list|,
literal|"The differences element of the encoding dictionary isn't an array"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// ---- The DictionaryEncoding object doesn't throw exception if the
comment|// Differences isn't well formed.
comment|// So check if the array has the right format.
name|COSArray
name|differences
init|=
name|COSUtils
operator|.
name|getAsArray
argument_list|(
name|diff
argument_list|,
name|cDoc
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|differences
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|COSBase
name|item
init|=
name|differences
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|item
operator|instanceof
name|COSInteger
operator|||
name|item
operator|instanceof
name|COSName
operator|)
condition|)
block|{
comment|// ---- Error, the Differences array is invalid
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_TYPE3_DAMAGED
argument_list|,
literal|"Differences Array should contain COSInt or COSName, no other type"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
else|else
block|{
comment|// ---- the encoding entry is invalid
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_TYPE3_DAMAGED
argument_list|,
literal|"The Encoding entry doesn't have the right type"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/** 	 * CharProcs is a dictionary where the key is a character name and the value 	 * is a Stream which contains the glyph representation of the key. 	 *  	 * This method checks that all character code defined in the Widths Array 	 * exist in the CharProcs dictionary. If the CharProcs doesn't know the 	 * Character, it is mapped with the .notdef one. 	 *  	 * For each character, the Glyph width must be the same as the Width value 	 * declared in the Widths array. 	 *  	 * @param errors 	 * @return 	 */
specifier|private
name|boolean
name|checkCharProcsAndMetrics
parameter_list|()
throws|throws
name|ValidationException
block|{
name|COSDocument
name|cDoc
init|=
name|this
operator|.
name|handler
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocument
argument_list|()
decl_stmt|;
comment|// ---- the Widths value can be a reference to an object
comment|// ---- Access the object using the COSkey
name|COSArray
name|wArr
init|=
name|COSUtils
operator|.
name|getAsArray
argument_list|(
name|this
operator|.
name|widths
argument_list|,
name|cDoc
argument_list|)
decl_stmt|;
if|if
condition|(
name|wArr
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_DICTIONARY_INVALID
argument_list|,
literal|"The Witdhs array is unreachable"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|COSDictionary
name|charProcsDictionary
init|=
name|COSUtils
operator|.
name|getAsDictionary
argument_list|(
name|this
operator|.
name|charProcs
argument_list|,
name|cDoc
argument_list|)
decl_stmt|;
if|if
condition|(
name|charProcsDictionary
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_DICTIONARY_INVALID
argument_list|,
literal|"The CharProcs element isn't a dictionary"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// ---- firstChar and lastChar must be integer.
name|int
name|fc
init|=
operator|(
operator|(
name|COSInteger
operator|)
name|this
operator|.
name|firstChar
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|int
name|lc
init|=
operator|(
operator|(
name|COSInteger
operator|)
name|this
operator|.
name|lastChar
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
comment|// ---- wArr length = (lc - fc) +1 and it is an array of int.
comment|// ---- If FirstChar is greater than LastChar, the validation will fail
comment|// because of
comment|// ---- the array will have an expected size<= 0.
name|int
name|expectedLength
init|=
operator|(
name|lc
operator|-
name|fc
operator|)
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|wArr
operator|.
name|size
argument_list|()
operator|!=
name|expectedLength
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_DICTIONARY_INVALID
argument_list|,
literal|"The length of Witdhs array is invalid. Expected : \""
operator|+
name|expectedLength
operator|+
literal|"\" Current : \""
operator|+
name|wArr
operator|.
name|size
argument_list|()
operator|+
literal|"\""
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// ---- Check width consistency
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedLength
condition|;
name|i
operator|++
control|)
block|{
name|int
name|cid
init|=
name|fc
operator|+
name|i
decl_stmt|;
name|COSBase
name|arrContent
init|=
name|wArr
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|COSUtils
operator|.
name|isNumeric
argument_list|(
name|arrContent
argument_list|,
name|cDoc
argument_list|)
condition|)
block|{
name|float
name|width
init|=
name|COSUtils
operator|.
name|getAsFloat
argument_list|(
name|arrContent
argument_list|,
name|cDoc
argument_list|)
decl_stmt|;
name|String
name|charName
init|=
literal|null
decl_stmt|;
try|try
block|{
name|charName
operator|=
name|this
operator|.
name|type3Encoding
operator|.
name|getName
argument_list|(
name|cid
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// shouldn't occur
throw|throw
operator|new
name|ValidationException
argument_list|(
literal|"Unable to check Widths consistency"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|COSBase
name|item
init|=
name|charProcsDictionary
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|charName
argument_list|)
argument_list|)
decl_stmt|;
name|COSStream
name|charStream
init|=
name|COSUtils
operator|.
name|getAsStream
argument_list|(
name|item
argument_list|,
name|cDoc
argument_list|)
decl_stmt|;
if|if
condition|(
name|charStream
operator|==
literal|null
condition|)
block|{
comment|/* There are no character description, we declare the Glyph as Invalid. 					 * If the character is used in a Stream, the GlyphDetail will throw an exception. 					 */
name|GlyphException
name|glyphEx
init|=
operator|new
name|GlyphException
argument_list|(
name|ERROR_FONTS_METRICS
argument_list|,
name|cid
argument_list|,
literal|"The CharProcs \""
operator|+
name|charName
operator|+
literal|"\" doesn't exist, the width defines in the Font Dictionary is "
operator|+
name|width
argument_list|)
decl_stmt|;
name|GlyphDetail
name|glyphDetail
init|=
operator|new
name|GlyphDetail
argument_list|(
name|cid
argument_list|,
name|glyphEx
argument_list|)
decl_stmt|;
name|this
operator|.
name|fontContainer
operator|.
name|addKnownCidElement
argument_list|(
name|glyphDetail
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
comment|// --- Parse the Glyph description to obtain the Width
name|PDFAType3StreamParser
name|parser
init|=
operator|new
name|PDFAType3StreamParser
argument_list|(
name|this
operator|.
name|handler
argument_list|)
decl_stmt|;
name|PDResources
name|pRes
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|resources
operator|!=
literal|null
condition|)
block|{
name|COSDictionary
name|resAsDict
init|=
name|COSUtils
operator|.
name|getAsDictionary
argument_list|(
name|this
operator|.
name|resources
argument_list|,
name|cDoc
argument_list|)
decl_stmt|;
if|if
condition|(
name|resAsDict
operator|!=
literal|null
condition|)
block|{
name|pRes
operator|=
operator|new
name|PDResources
argument_list|(
name|resAsDict
argument_list|)
expr_stmt|;
block|}
block|}
name|parser
operator|.
name|resetEngine
argument_list|()
expr_stmt|;
name|parser
operator|.
name|processSubStream
argument_list|(
literal|null
argument_list|,
name|pRes
argument_list|,
name|charStream
argument_list|)
expr_stmt|;
if|if
condition|(
name|width
operator|!=
name|parser
operator|.
name|getWidth
argument_list|()
condition|)
block|{
name|GlyphException
name|glyphEx
init|=
operator|new
name|GlyphException
argument_list|(
name|ERROR_FONTS_METRICS
argument_list|,
name|cid
argument_list|,
literal|"The CharProcs \""
operator|+
name|charName
operator|+
literal|"\" should have a width equals to "
operator|+
name|width
argument_list|)
decl_stmt|;
name|GlyphDetail
name|glyphDetail
init|=
operator|new
name|GlyphDetail
argument_list|(
name|cid
argument_list|,
name|glyphEx
argument_list|)
decl_stmt|;
name|this
operator|.
name|fontContainer
operator|.
name|addKnownCidElement
argument_list|(
name|glyphDetail
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Glyph is OK, we keep the CID.
name|GlyphDetail
name|glyphDetail
init|=
operator|new
name|GlyphDetail
argument_list|(
name|cid
argument_list|)
decl_stmt|;
name|this
operator|.
name|fontContainer
operator|.
name|addKnownCidElement
argument_list|(
name|glyphDetail
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ContentStreamException
name|e
parameter_list|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|e
operator|.
name|getValidationError
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_TYPE3_DAMAGED
argument_list|,
literal|"The CharProcs references an element which can't be read"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
else|else
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_DICTIONARY_INVALID
argument_list|,
literal|"The Witdhs array is invalid. (some element aren't integer)"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/** 	 * If the Resources entry is present, this method check its content. Only 	 * fonts and Images are checked because this resource describes glyphs. REMARK 	 * : The font and the image aren't validated because they will be validated by 	 * an other ValidationHelper. 	 *  	 * @return 	 */
specifier|private
name|boolean
name|checkResources
parameter_list|()
throws|throws
name|ValidationException
block|{
if|if
condition|(
name|this
operator|.
name|resources
operator|==
literal|null
condition|)
block|{
comment|// ---- No resources dictionary.
return|return
literal|true
return|;
block|}
name|COSDocument
name|cDoc
init|=
name|this
operator|.
name|handler
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocument
argument_list|()
decl_stmt|;
name|COSDictionary
name|dictionary
init|=
name|COSUtils
operator|.
name|getAsDictionary
argument_list|(
name|this
operator|.
name|resources
argument_list|,
name|cDoc
argument_list|)
decl_stmt|;
if|if
condition|(
name|dictionary
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_DICTIONARY_INVALID
argument_list|,
literal|"The Resources element isn't a dictionary"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|COSBase
name|cbImg
init|=
name|dictionary
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|DICTIONARY_KEY_XOBJECT
argument_list|)
argument_list|)
decl_stmt|;
name|COSBase
name|cbFont
init|=
name|dictionary
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|DICTIONARY_KEY_FONT
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cbImg
operator|!=
literal|null
condition|)
block|{
comment|// ---- the referenced objects must be present in the PDF file
name|COSDictionary
name|dicImgs
init|=
name|COSUtils
operator|.
name|getAsDictionary
argument_list|(
name|cbImg
argument_list|,
name|cDoc
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|COSName
argument_list|>
name|keyList
init|=
name|dicImgs
operator|.
name|keySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|key
range|:
name|keyList
control|)
block|{
name|COSBase
name|item
init|=
name|dictionary
operator|.
name|getItem
argument_list|(
operator|(
name|COSName
operator|)
name|key
argument_list|)
decl_stmt|;
name|COSDictionary
name|xObjImg
init|=
name|COSUtils
operator|.
name|getAsDictionary
argument_list|(
name|item
argument_list|,
name|cDoc
argument_list|)
decl_stmt|;
if|if
condition|(
name|xObjImg
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_DICTIONARY_INVALID
argument_list|,
literal|"The Resources dictionary of type 3 font is invalid"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|XOBJECT_DICTIONARY_VALUE_SUBTYPE_IMG
operator|.
name|equals
argument_list|(
name|xObjImg
operator|.
name|getString
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|DICTIONARY_KEY_SUBTYPE
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_DICTIONARY_INVALID
argument_list|,
literal|"The Resources dictionary of type 3 font is invalid"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
if|if
condition|(
name|cbFont
operator|!=
literal|null
condition|)
block|{
comment|// ---- the referenced object must be present in the PDF file
name|COSDictionary
name|dicFonts
init|=
name|COSUtils
operator|.
name|getAsDictionary
argument_list|(
name|cbFont
argument_list|,
name|cDoc
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|COSName
argument_list|>
name|keyList
init|=
name|dicFonts
operator|.
name|keySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|key
range|:
name|keyList
control|)
block|{
name|COSBase
name|item
init|=
name|dictionary
operator|.
name|getItem
argument_list|(
operator|(
name|COSName
operator|)
name|key
argument_list|)
decl_stmt|;
name|COSDictionary
name|xObjFont
init|=
name|COSUtils
operator|.
name|getAsDictionary
argument_list|(
name|item
argument_list|,
name|cDoc
argument_list|)
decl_stmt|;
if|if
condition|(
name|xObjFont
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_DICTIONARY_INVALID
argument_list|,
literal|"The Resources dictionary of type 3 font is invalid"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|FONT_DICTIONARY_VALUE_FONT
operator|.
name|equals
argument_list|(
name|xObjFont
operator|.
name|getString
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|DICTIONARY_KEY_TYPE
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_DICTIONARY_INVALID
argument_list|,
literal|"The Resources dictionary of type 3 font is invalid"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
try|try
block|{
name|PDFont
name|aFont
init|=
name|PDFontFactory
operator|.
name|createFont
argument_list|(
name|xObjFont
argument_list|)
decl_stmt|;
comment|// FontContainer aContainer = this.handler.retrieveFontContainer(aFont);
name|AbstractFontContainer
name|aContainer
init|=
name|this
operator|.
name|handler
operator|.
name|getFont
argument_list|(
name|aFont
operator|.
name|getCOSObject
argument_list|()
argument_list|)
decl_stmt|;
comment|// ---- another font is used in the Type3, check if the font is valid.
if|if
condition|(
name|aContainer
operator|.
name|isValid
argument_list|()
operator|!=
name|State
operator|.
name|VALID
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_TYPE3_DAMAGED
argument_list|,
literal|"The Resources dictionary of type 3 font contains invalid font"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ValidationException
argument_list|(
literal|"Unable to valid the Type3 : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|List
argument_list|<
name|ValidationError
argument_list|>
name|errors
init|=
operator|new
name|ArrayList
argument_list|<
name|ValidationError
argument_list|>
argument_list|()
decl_stmt|;
name|ExtGStateContainer
name|extGStates
init|=
operator|new
name|ExtGStateContainer
argument_list|(
name|dictionary
argument_list|,
name|cDoc
argument_list|)
decl_stmt|;
name|boolean
name|res
init|=
name|extGStates
operator|.
name|validateTransparencyRules
argument_list|(
name|errors
argument_list|)
decl_stmt|;
for|for
control|(
name|ValidationError
name|err
range|:
name|errors
control|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
name|err
argument_list|)
expr_stmt|;
block|}
return|return
name|res
operator|&&
name|validateShadingPattern
argument_list|(
name|dictionary
argument_list|,
name|errors
argument_list|)
return|;
block|}
comment|/** 	 * This method check the Shading entry of the resource dictionary if exists. 	 *  	 * @param result 	 * @return 	 * @throws ValidationException 	 */
specifier|protected
name|boolean
name|validateShadingPattern
parameter_list|(
name|COSDictionary
name|dictionary
parameter_list|,
name|List
argument_list|<
name|ValidationError
argument_list|>
name|result
parameter_list|)
throws|throws
name|ValidationException
block|{
name|boolean
name|res
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|dictionary
operator|!=
literal|null
condition|)
block|{
name|COSDictionary
name|shadings
init|=
operator|(
name|COSDictionary
operator|)
name|dictionary
operator|.
name|getDictionaryObject
argument_list|(
name|PATTERN_KEY_SHADING
argument_list|)
decl_stmt|;
if|if
condition|(
name|shadings
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|COSName
name|key
range|:
name|shadings
operator|.
name|keySet
argument_list|()
control|)
block|{
name|COSDictionary
name|aShading
init|=
operator|(
name|COSDictionary
operator|)
name|shadings
operator|.
name|getDictionaryObject
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|ShadingPattern
name|sp
init|=
operator|new
name|ShadingPattern
argument_list|(
name|handler
argument_list|,
name|aShading
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ValidationError
argument_list|>
name|lErrors
init|=
name|sp
operator|.
name|validate
argument_list|()
decl_stmt|;
if|if
condition|(
name|lErrors
operator|!=
literal|null
operator|&&
operator|!
name|lErrors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|result
operator|.
name|addAll
argument_list|(
name|lErrors
argument_list|)
expr_stmt|;
name|res
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|res
return|;
block|}
comment|/* 	 * (non-Javadoc) 	 *  	 * @see net.awl.edoc.pdfa.validation.font.FontValidator#validate() 	 */
specifier|public
name|boolean
name|validate
parameter_list|()
throws|throws
name|ValidationException
block|{
name|extractFontDictionaryEntries
argument_list|()
expr_stmt|;
name|boolean
name|isValid
init|=
name|checkMandatoryFields
argument_list|()
decl_stmt|;
name|isValid
operator|=
name|isValid
operator|&&
name|checkFontBBoxMatrix
argument_list|()
expr_stmt|;
name|isValid
operator|=
name|isValid
operator|&&
name|checkEncoding
argument_list|()
expr_stmt|;
name|isValid
operator|=
name|isValid
operator|&&
name|checkCharProcsAndMetrics
argument_list|()
expr_stmt|;
name|isValid
operator|=
name|isValid
operator|&&
name|checkResources
argument_list|()
expr_stmt|;
return|return
name|isValid
return|;
block|}
block|}
end_class

end_unit

