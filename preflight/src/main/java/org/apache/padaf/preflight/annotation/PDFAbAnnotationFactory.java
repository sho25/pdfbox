begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|annotation
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|ANNOT_DICTIONARY_VALUE_SUBTYPE_CIRCLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|ANNOT_DICTIONARY_VALUE_SUBTYPE_FREETEXT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|ANNOT_DICTIONARY_VALUE_SUBTYPE_HIGHLIGHT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|ANNOT_DICTIONARY_VALUE_SUBTYPE_INK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|ANNOT_DICTIONARY_VALUE_SUBTYPE_LINE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|ANNOT_DICTIONARY_VALUE_SUBTYPE_LINK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|ANNOT_DICTIONARY_VALUE_SUBTYPE_POPUP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|ANNOT_DICTIONARY_VALUE_SUBTYPE_PRINTERMARK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|ANNOT_DICTIONARY_VALUE_SUBTYPE_SQUARE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|ANNOT_DICTIONARY_VALUE_SUBTYPE_SQUILGGLY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|ANNOT_DICTIONARY_VALUE_SUBTYPE_STAMP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|ANNOT_DICTIONARY_VALUE_SUBTYPE_STRIKEOUT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|ANNOT_DICTIONARY_VALUE_SUBTYPE_TEXT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|ANNOT_DICTIONARY_VALUE_SUBTYPE_TRAPNET
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|ANNOT_DICTIONARY_VALUE_SUBTYPE_UNDERLINE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|ANNOT_DICTIONARY_VALUE_SUBTYPE_WIDGET
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|DICTIONARY_KEY_SUBTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|ERROR_ANNOT_FORBIDDEN_SUBTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|ERROR_ANNOT_MISSING_SUBTYPE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|DocumentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationResult
operator|.
name|ValidationError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_comment
comment|/**  * Factory to instantiate AnnotationValidator for a PDF/A-1b valdiation.  *  */
end_comment

begin_class
specifier|public
class|class
name|PDFAbAnnotationFactory
extends|extends
name|AnnotationValidatorFactory
block|{
comment|/** 	 * Return an instance of AnnotationValidator if the annotation subtype is 	 * authorized for a PDF/A. Otherwise, returns null and the given list is 	 * updated with the right error code. 	 *  	 * If the subtype isn't mentioned in the PDF/A specification and if it doesn't 	 * exist in the PDF Reference 1.4, it will be considered as an invalid 	 * annotation. Here is the list of Annotations which appear after the PDF 1.4 	 * : 	 *<UL> 	 *<li>Polygon (1.5) 	 *<li>Polyline (1.5) 	 *<li>Caret (1.5) 	 *<li>Screen (1.5) 	 *<li>Watermark (1.6) 	 *<li>3D (1.6) 	 *</UL> 	 *  	 * @param annotDic 	 * @param handler 	 * @param errors 	 * @return 	 */
annotation|@
name|Override
specifier|public
name|AnnotationValidator
name|instantiateAnnotationValidator
parameter_list|(
name|COSDictionary
name|annotDic
parameter_list|,
name|DocumentHandler
name|handler
parameter_list|,
name|List
argument_list|<
name|ValidationError
argument_list|>
name|errors
parameter_list|)
block|{
name|AnnotationValidator
name|av
init|=
literal|null
decl_stmt|;
name|String
name|subtype
init|=
name|annotDic
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|DICTIONARY_KEY_SUBTYPE
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|subtype
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|subtype
argument_list|)
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_ANNOT_MISSING_SUBTYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|ANNOT_DICTIONARY_VALUE_SUBTYPE_TEXT
operator|.
name|equals
argument_list|(
name|subtype
argument_list|)
condition|)
block|{
name|av
operator|=
operator|new
name|TextAnnotationValidator
argument_list|(
name|handler
argument_list|,
name|annotDic
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ANNOT_DICTIONARY_VALUE_SUBTYPE_LINK
operator|.
name|equals
argument_list|(
name|subtype
argument_list|)
condition|)
block|{
name|av
operator|=
operator|new
name|LinkAnnotationValidator
argument_list|(
name|handler
argument_list|,
name|annotDic
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ANNOT_DICTIONARY_VALUE_SUBTYPE_FREETEXT
operator|.
name|equals
argument_list|(
name|subtype
argument_list|)
condition|)
block|{
name|av
operator|=
operator|new
name|FreeTextAnnotationValidator
argument_list|(
name|handler
argument_list|,
name|annotDic
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ANNOT_DICTIONARY_VALUE_SUBTYPE_LINE
operator|.
name|equals
argument_list|(
name|subtype
argument_list|)
condition|)
block|{
name|av
operator|=
operator|new
name|LineAnnotationValidator
argument_list|(
name|handler
argument_list|,
name|annotDic
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ANNOT_DICTIONARY_VALUE_SUBTYPE_SQUARE
operator|.
name|equals
argument_list|(
name|subtype
argument_list|)
operator|||
name|ANNOT_DICTIONARY_VALUE_SUBTYPE_CIRCLE
operator|.
name|equals
argument_list|(
name|subtype
argument_list|)
condition|)
block|{
name|av
operator|=
operator|new
name|SquareCircleAnnotationValidator
argument_list|(
name|handler
argument_list|,
name|annotDic
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ANNOT_DICTIONARY_VALUE_SUBTYPE_HIGHLIGHT
operator|.
name|equals
argument_list|(
name|subtype
argument_list|)
operator|||
name|ANNOT_DICTIONARY_VALUE_SUBTYPE_UNDERLINE
operator|.
name|equals
argument_list|(
name|subtype
argument_list|)
operator|||
name|ANNOT_DICTIONARY_VALUE_SUBTYPE_STRIKEOUT
operator|.
name|equals
argument_list|(
name|subtype
argument_list|)
operator|||
name|ANNOT_DICTIONARY_VALUE_SUBTYPE_SQUILGGLY
operator|.
name|equals
argument_list|(
name|subtype
argument_list|)
condition|)
block|{
name|av
operator|=
operator|new
name|MarkupAnnotationValidator
argument_list|(
name|handler
argument_list|,
name|annotDic
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ANNOT_DICTIONARY_VALUE_SUBTYPE_STAMP
operator|.
name|equals
argument_list|(
name|subtype
argument_list|)
condition|)
block|{
name|av
operator|=
operator|new
name|RubberStampAnnotationValidator
argument_list|(
name|handler
argument_list|,
name|annotDic
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ANNOT_DICTIONARY_VALUE_SUBTYPE_INK
operator|.
name|equals
argument_list|(
name|subtype
argument_list|)
condition|)
block|{
name|av
operator|=
operator|new
name|InkAnnotationValdiator
argument_list|(
name|handler
argument_list|,
name|annotDic
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ANNOT_DICTIONARY_VALUE_SUBTYPE_POPUP
operator|.
name|equals
argument_list|(
name|subtype
argument_list|)
condition|)
block|{
name|av
operator|=
operator|new
name|PopupAnnotationValidator
argument_list|(
name|handler
argument_list|,
name|annotDic
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ANNOT_DICTIONARY_VALUE_SUBTYPE_WIDGET
operator|.
name|equals
argument_list|(
name|subtype
argument_list|)
condition|)
block|{
name|av
operator|=
operator|new
name|WidgetAnnotationValidator
argument_list|(
name|handler
argument_list|,
name|annotDic
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ANNOT_DICTIONARY_VALUE_SUBTYPE_PRINTERMARK
operator|.
name|equals
argument_list|(
name|subtype
argument_list|)
condition|)
block|{
name|av
operator|=
operator|new
name|PrintMarkAnnotationValidator
argument_list|(
name|handler
argument_list|,
name|annotDic
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ANNOT_DICTIONARY_VALUE_SUBTYPE_TRAPNET
operator|.
name|equals
argument_list|(
name|subtype
argument_list|)
condition|)
block|{
name|av
operator|=
operator|new
name|TrapNetAnnotationValidator
argument_list|(
name|handler
argument_list|,
name|annotDic
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_ANNOT_FORBIDDEN_SUBTYPE
argument_list|,
literal|"The subtype isn't authorized : "
operator|+
name|subtype
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|av
operator|!=
literal|null
condition|)
block|{
comment|// initialize the factory if the Validator has been created
name|av
operator|.
name|setFactory
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
return|return
name|av
return|;
block|}
block|}
end_class

end_unit

