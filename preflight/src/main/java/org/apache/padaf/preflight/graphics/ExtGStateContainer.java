begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|graphics
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|ERROR_TRANSPARENCY_EXT_GS_BLEND_MODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|ERROR_TRANSPARENCY_EXT_GS_CA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|ERROR_TRANSPARENCY_EXT_GS_SOFT_MASK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|TRANPARENCY_DICTIONARY_KEY_EXTGSTATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|TRANPARENCY_DICTIONARY_KEY_EXTGSTATE_ENTRY_REGEX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|TRANSPARENCY_DICTIONARY_KEY_BLEND_MODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|TRANSPARENCY_DICTIONARY_KEY_LOWER_CA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|TRANSPARENCY_DICTIONARY_KEY_SOFT_MASK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|TRANSPARENCY_DICTIONARY_KEY_UPPER_CA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|TRANSPARENCY_DICTIONARY_VALUE_BM_COMPATIBLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|TRANSPARENCY_DICTIONARY_VALUE_BM_NORMAL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|TRANSPARENCY_DICTIONARY_VALUE_SOFT_MASK_NONE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationResult
operator|.
name|ValidationError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|utils
operator|.
name|COSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|utils
operator|.
name|RenderingIntents
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_comment
comment|/**  * This class wraps a list of COSDictionary which represent an extended graphics  * state dictionary.  */
end_comment

begin_class
specifier|public
class|class
name|ExtGStateContainer
block|{
comment|/**    * The COSDocument which contains the extended graphic states.    */
specifier|private
name|COSDocument
name|cDoc
init|=
literal|null
decl_stmt|;
comment|/**    * A list of Extended Graphic States.    */
specifier|private
name|List
argument_list|<
name|COSDictionary
argument_list|>
name|listOfExtGState
init|=
operator|new
name|ArrayList
argument_list|<
name|COSDictionary
argument_list|>
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|/**    * Create an instance of ExtGStateContainer using a Resource dictionary and a    * COSDocument. This constructor initializes the listOfExtGState attribute    * using the given Resource dictionary and the COSDocument.    *     * @param resources    *          a resource COSDictionary    * @param cDoc    *          the COSDocument which contains the Resource dictionary    * @throws ValidationException    *           thrown if a the Extended Graphic State isn't valid    */
specifier|public
name|ExtGStateContainer
parameter_list|(
name|COSDictionary
name|resources
parameter_list|,
name|COSDocument
name|cDoc
parameter_list|)
throws|throws
name|ValidationException
block|{
name|this
operator|.
name|cDoc
operator|=
name|cDoc
expr_stmt|;
name|COSBase
name|egsEntry
init|=
name|resources
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|TRANPARENCY_DICTIONARY_KEY_EXTGSTATE
argument_list|)
argument_list|)
decl_stmt|;
name|COSDictionary
name|extGStates
init|=
name|COSUtils
operator|.
name|getAsDictionary
argument_list|(
name|egsEntry
argument_list|,
name|cDoc
argument_list|)
decl_stmt|;
if|if
condition|(
name|extGStates
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Object
name|object
range|:
name|extGStates
operator|.
name|keySet
argument_list|()
control|)
block|{
name|COSName
name|key
init|=
operator|(
name|COSName
operator|)
name|object
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
name|TRANPARENCY_DICTIONARY_KEY_EXTGSTATE_ENTRY_REGEX
argument_list|)
condition|)
block|{
name|COSBase
name|gsBase
init|=
name|extGStates
operator|.
name|getItem
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|COSDictionary
name|gsDict
init|=
name|COSUtils
operator|.
name|getAsDictionary
argument_list|(
name|gsBase
argument_list|,
name|cDoc
argument_list|)
decl_stmt|;
if|if
condition|(
name|gsDict
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ValidationException
argument_list|(
literal|"The Extended Graphics State dictionary is invalid"
argument_list|)
throw|;
block|}
name|this
operator|.
name|listOfExtGState
operator|.
name|add
argument_list|(
name|gsDict
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//else  if there are no ExtGState, the list will be empty.
block|}
comment|/**    * Validate all ExtGState dictionaries of this container    *     * @param error    *          the list of error to update if the validation fails.    * @return true if all Graphic States are valid, false otherwise.    */
specifier|public
name|boolean
name|validateTransparencyRules
parameter_list|(
name|List
argument_list|<
name|ValidationError
argument_list|>
name|error
parameter_list|)
block|{
name|boolean
name|res
init|=
literal|true
decl_stmt|;
for|for
control|(
name|COSDictionary
name|egs
range|:
name|listOfExtGState
control|)
block|{
name|res
operator|=
name|res
operator|&&
name|checkSoftMask
argument_list|(
name|egs
argument_list|,
name|error
argument_list|)
expr_stmt|;
name|res
operator|=
name|res
operator|&&
name|checkCA
argument_list|(
name|egs
argument_list|,
name|error
argument_list|)
expr_stmt|;
name|res
operator|=
name|res
operator|&&
name|checkBlendMode
argument_list|(
name|egs
argument_list|,
name|error
argument_list|)
expr_stmt|;
name|res
operator|=
name|res
operator|&&
name|checkTRKey
argument_list|(
name|egs
argument_list|,
name|error
argument_list|)
expr_stmt|;
name|res
operator|=
name|res
operator|&&
name|checkTR2Key
argument_list|(
name|egs
argument_list|,
name|error
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
comment|/**    * This method checks the SMask value of the ExtGState dictionary. The Soft    * Mask is optional but must be "None" if it is present.    *     * @param egs    *          the Graphic state to check    * @param error    *          the list of error to update if the validation fails.    * @return true if SMask is missing or equals to None    */
specifier|private
name|boolean
name|checkSoftMask
parameter_list|(
name|COSDictionary
name|egs
parameter_list|,
name|List
argument_list|<
name|ValidationError
argument_list|>
name|error
parameter_list|)
block|{
name|COSBase
name|smVal
init|=
name|egs
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|TRANSPARENCY_DICTIONARY_KEY_SOFT_MASK
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|smVal
operator|!=
literal|null
condition|)
block|{
comment|// ---- Soft Mask is valid only if it is a COSName equals to None
if|if
condition|(
operator|!
operator|(
name|smVal
operator|instanceof
name|COSName
operator|&&
name|TRANSPARENCY_DICTIONARY_VALUE_SOFT_MASK_NONE
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|COSName
operator|)
name|smVal
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|error
operator|.
name|add
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_TRANSPARENCY_EXT_GS_SOFT_MASK
argument_list|,
literal|"SoftMask must be null or None"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * This method checks the BM value of the ExtGState dictionary. The Blend Mode    * is optional but must be "Normal" or "Compatible" if it is present.    *     * @param egs    *          the graphic state to check    * @param error    *          the list of error to update if the validation fails.    * @return true if BM is missing or equals to "Normal" or "Compatible"    */
specifier|private
name|boolean
name|checkBlendMode
parameter_list|(
name|COSDictionary
name|egs
parameter_list|,
name|List
argument_list|<
name|ValidationError
argument_list|>
name|error
parameter_list|)
block|{
name|COSBase
name|bmVal
init|=
name|egs
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|TRANSPARENCY_DICTIONARY_KEY_BLEND_MODE
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|bmVal
operator|!=
literal|null
condition|)
block|{
comment|// ---- Blend Mode is valid only if it is equals to Normal or Compatible
if|if
condition|(
operator|!
operator|(
name|bmVal
operator|instanceof
name|COSName
operator|&&
operator|(
name|TRANSPARENCY_DICTIONARY_VALUE_BM_NORMAL
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|COSName
operator|)
name|bmVal
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
name|TRANSPARENCY_DICTIONARY_VALUE_BM_COMPATIBLE
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|COSName
operator|)
name|bmVal
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
operator|)
operator|)
condition|)
block|{
name|error
operator|.
name|add
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_TRANSPARENCY_EXT_GS_BLEND_MODE
argument_list|,
literal|"BlendMode value isn't valid (only Normal and Compatible are authorized)"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * This method checks the "CA" and "ca" values of the ExtGState dictionary.    * They are optional but must be 1.0 if they are present.    *     * @param egs    *          the graphic state to check    * @param error    *          the list of error to update if the validation fails.    * @return true if CA/ca is missing or equals to 1.0    */
specifier|private
name|boolean
name|checkCA
parameter_list|(
name|COSDictionary
name|egs
parameter_list|,
name|List
argument_list|<
name|ValidationError
argument_list|>
name|error
parameter_list|)
block|{
name|COSBase
name|uCA
init|=
name|egs
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|TRANSPARENCY_DICTIONARY_KEY_UPPER_CA
argument_list|)
argument_list|)
decl_stmt|;
name|COSBase
name|lCA
init|=
name|egs
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|TRANSPARENCY_DICTIONARY_KEY_LOWER_CA
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|uCA
operator|!=
literal|null
condition|)
block|{
comment|// ---- If CA is present only the value 1.0 is authorized
name|Float
name|fca
init|=
name|COSUtils
operator|.
name|getAsFloat
argument_list|(
name|uCA
argument_list|,
name|cDoc
argument_list|)
decl_stmt|;
name|Integer
name|ica
init|=
name|COSUtils
operator|.
name|getAsInteger
argument_list|(
name|uCA
argument_list|,
name|cDoc
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|fca
operator|!=
literal|null
operator|&&
name|fca
operator|==
literal|1.0f
operator|)
operator|&&
operator|!
operator|(
name|ica
operator|!=
literal|null
operator|&&
name|ica
operator|==
literal|1
operator|)
condition|)
block|{
name|error
operator|.
name|add
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_TRANSPARENCY_EXT_GS_CA
argument_list|,
literal|"CA entry in a ExtGState is invalid"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|lCA
operator|!=
literal|null
condition|)
block|{
comment|// ---- If ca is present only the value 1.0 is authorized
name|Float
name|fca
init|=
name|COSUtils
operator|.
name|getAsFloat
argument_list|(
name|lCA
argument_list|,
name|cDoc
argument_list|)
decl_stmt|;
name|Integer
name|ica
init|=
name|COSUtils
operator|.
name|getAsInteger
argument_list|(
name|lCA
argument_list|,
name|cDoc
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|fca
operator|!=
literal|null
operator|&&
name|fca
operator|==
literal|1.0f
operator|)
operator|&&
operator|!
operator|(
name|ica
operator|!=
literal|null
operator|&&
name|ica
operator|==
literal|1
operator|)
condition|)
block|{
name|error
operator|.
name|add
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_TRANSPARENCY_EXT_GS_CA
argument_list|,
literal|"ca entry in a ExtGState  is invalid."
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Check the TR entry. A valid ExtGState hasn't TR entry.    *     * @param egs    *          the graphic state to check    * @param error    *          the list of error to update if the validation fails.    * @return true if TR entry is missing, false otherwise.    */
specifier|protected
name|boolean
name|checkTRKey
parameter_list|(
name|COSDictionary
name|egs
parameter_list|,
name|List
argument_list|<
name|ValidationError
argument_list|>
name|error
parameter_list|)
block|{
if|if
condition|(
name|egs
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"TR"
argument_list|)
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|error
operator|.
name|add
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ValidationConstants
operator|.
name|ERROR_GRAPHIC_UNEXPECTED_KEY
argument_list|,
literal|"No TR key expected in Extended graphics state"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Check the TR2 entry. A valid ExtGState hasn't TR2 entry or a TR2 entry    * equals to "default".    *     * @param egs    *          the graphic state to check    * @param error    *          the list of error to update if the validation fails.    * @return true if TR2 entry is missing or equals to "default", false    *         otherwise.    */
specifier|protected
name|boolean
name|checkTR2Key
parameter_list|(
name|COSDictionary
name|egs
parameter_list|,
name|List
argument_list|<
name|ValidationError
argument_list|>
name|error
parameter_list|)
block|{
if|if
condition|(
name|egs
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"TR2"
argument_list|)
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
name|s
init|=
name|egs
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"TR2"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
literal|"default"
operator|.
name|equals
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|error
operator|.
name|add
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ValidationConstants
operator|.
name|ERROR_GRAPHIC_UNEXPECTED_VALUE_FOR_KEY
argument_list|,
literal|"TR2 key only expect 'default' value, not '"
operator|+
name|s
operator|+
literal|"'"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Check the RI entry of the Graphic State. If the rendering intent entry is    * present, the value must be one of the four values defined in the PDF    * reference. (@see net.awl.edoc.pdfa.validation.utils.RenderingIntents)    *     * @param egs    *          the graphic state to check    * @param error    *          the list of error to update if the validation fails.    * @return true if RI entry is valid, false otherwise.    */
specifier|protected
name|boolean
name|checkRIKey
parameter_list|(
name|COSDictionary
name|egs
parameter_list|,
name|List
argument_list|<
name|ValidationError
argument_list|>
name|error
parameter_list|)
block|{
name|String
name|rendenringIntent
init|=
name|egs
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"RI"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|rendenringIntent
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|rendenringIntent
argument_list|)
operator|&&
operator|!
name|RenderingIntents
operator|.
name|contains
argument_list|(
name|rendenringIntent
argument_list|)
condition|)
block|{
name|error
operator|.
name|add
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ValidationConstants
operator|.
name|ERROR_GRAPHIC_UNEXPECTED_VALUE_FOR_KEY
argument_list|,
literal|"Invalid rendering intent value in Extended graphics state"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

