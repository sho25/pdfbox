begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|helpers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|DocumentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidatorConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationResult
operator|.
name|ValidationError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|actions
operator|.
name|AbstractActionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|utils
operator|.
name|COSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocumentCatalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|documentnavigation
operator|.
name|outline
operator|.
name|PDDocumentOutline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|documentnavigation
operator|.
name|outline
operator|.
name|PDOutlineItem
import|;
end_import

begin_comment
comment|/**  * This helper validates the book mark object (Outline Items)  */
end_comment

begin_class
specifier|public
class|class
name|BookmarkValidationHelper
extends|extends
name|AbstractValidationHelper
block|{
comment|/** 	 *  	 * @param cfg 	 * @throws ValidationException 	 */
specifier|public
name|BookmarkValidationHelper
parameter_list|(
name|ValidatorConfig
name|cfg
parameter_list|)
throws|throws
name|ValidationException
block|{
name|super
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
block|}
comment|/* 	 * (non-Javadoc) 	 *  	 * @see 	 * net.awl.edoc.pdfa.validation.helpers.AbstractValidationHelper#innerValidate 	 * (net.awl.edoc.pdfa.validation.DocumentHandler) 	 */
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ValidationError
argument_list|>
name|innerValidate
parameter_list|(
name|DocumentHandler
name|handler
parameter_list|)
throws|throws
name|ValidationException
block|{
name|List
argument_list|<
name|ValidationError
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|ValidationError
argument_list|>
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|PDDocumentCatalog
name|catalog
init|=
name|handler
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocumentCatalog
argument_list|()
decl_stmt|;
if|if
condition|(
name|catalog
operator|!=
literal|null
condition|)
block|{
name|PDDocumentOutline
name|outlineHierarchy
init|=
name|catalog
operator|.
name|getDocumentOutline
argument_list|()
decl_stmt|;
if|if
condition|(
name|outlineHierarchy
operator|!=
literal|null
condition|)
block|{
comment|// ---- Count entry is mandatory if there are childrens
if|if
condition|(
operator|!
name|isCountEntryPresent
argument_list|(
name|outlineHierarchy
operator|.
name|getCOSDictionary
argument_list|()
argument_list|)
operator|&&
operator|(
name|outlineHierarchy
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
operator|||
name|outlineHierarchy
operator|.
name|getLastChild
argument_list|()
operator|!=
literal|null
operator|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_SYNTAX_TRAILER_OUTLINES_INVALID
argument_list|,
literal|"Outline Hierarchy doesn't have Count entry"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isCountEntryPositive
argument_list|(
name|outlineHierarchy
operator|.
name|getCOSDictionary
argument_list|()
argument_list|,
name|handler
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocument
argument_list|()
argument_list|)
operator|&&
operator|(
name|outlineHierarchy
operator|.
name|getFirstChild
argument_list|()
operator|==
literal|null
operator|||
name|outlineHierarchy
operator|.
name|getLastChild
argument_list|()
operator|==
literal|null
operator|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_SYNTAX_TRAILER_OUTLINES_INVALID
argument_list|,
literal|"Outline Hierarchy doesn't have First and/or Last entry(ies)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|exploreOutlineLevel
argument_list|(
name|outlineHierarchy
operator|.
name|getFirstChild
argument_list|()
argument_list|,
name|handler
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|ValidationException
argument_list|(
literal|"There are no Catalog entry in the Document."
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
comment|/** 	 * Return true if the Count entry is present in the given dictionary. 	 *  	 * @param outline 	 * @return 	 */
specifier|private
name|boolean
name|isCountEntryPresent
parameter_list|(
name|COSDictionary
name|outline
parameter_list|)
block|{
return|return
name|outline
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"Count"
argument_list|)
argument_list|)
operator|!=
literal|null
return|;
block|}
comment|/** 	 * return true if Count entry> 0 	 * @param outline 	 * @param doc 	 * @return 	 */
specifier|private
name|boolean
name|isCountEntryPositive
parameter_list|(
name|COSDictionary
name|outline
parameter_list|,
name|COSDocument
name|doc
parameter_list|)
block|{
name|COSBase
name|countBase
init|=
name|outline
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"Count"
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|COSUtils
operator|.
name|isInteger
argument_list|(
name|countBase
argument_list|,
name|doc
argument_list|)
operator|&&
operator|(
name|COSUtils
operator|.
name|getAsInteger
argument_list|(
name|countBase
argument_list|,
name|doc
argument_list|)
operator|>
literal|0
operator|)
return|;
block|}
comment|/** 	 * This method explores the Outline Item Level and call a validation method on 	 * each Outline Item. If an invalid outline item is found, the result list is 	 * updated. 	 *  	 * @param inputItem 	 *          The first outline item of the level 	 * @param handler 	 *          The document handler which provides useful data for the level 	 *          exploration (ex : access to the PDDocument) 	 * @param result 	 * @return true if all items are valid in this level. 	 * @throws ValidationException 	 */
specifier|protected
name|boolean
name|exploreOutlineLevel
parameter_list|(
name|PDOutlineItem
name|inputItem
parameter_list|,
name|DocumentHandler
name|handler
parameter_list|,
name|List
argument_list|<
name|ValidationError
argument_list|>
name|result
parameter_list|)
throws|throws
name|ValidationException
block|{
name|PDOutlineItem
name|currentItem
init|=
name|inputItem
decl_stmt|;
while|while
condition|(
name|currentItem
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|validateItem
argument_list|(
name|currentItem
argument_list|,
name|handler
argument_list|,
name|result
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|currentItem
operator|=
name|currentItem
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/** 	 * This method checks the inputItem dictionary and call the 	 * exploreOutlineLevel method on the first child if it is not null. 	 *  	 * @param inputItem 	 *          outline item to validate 	 * @param handler 	 *          The document handler which provides useful data for the level 	 *          exploration (ex : access to the PDDocument) 	 * @param result 	 * @return 	 * @throws ValidationException 	 */
specifier|protected
name|boolean
name|validateItem
parameter_list|(
name|PDOutlineItem
name|inputItem
parameter_list|,
name|DocumentHandler
name|handler
parameter_list|,
name|List
argument_list|<
name|ValidationError
argument_list|>
name|result
parameter_list|)
throws|throws
name|ValidationException
block|{
name|boolean
name|isValid
init|=
literal|true
decl_stmt|;
comment|// ---- Dest entry isn't permitted if the A entry is present
comment|// A entry isn't permitted if the Dest entry is present
comment|// If the A enntry is present, the referenced actions is validated
name|COSDictionary
name|dictionary
init|=
name|inputItem
operator|.
name|getCOSDictionary
argument_list|()
decl_stmt|;
name|COSBase
name|dest
init|=
name|dictionary
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|DICTIONARY_KEY_DESTINATION
argument_list|)
argument_list|)
decl_stmt|;
name|COSBase
name|action
init|=
name|dictionary
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|DICTIONARY_KEY_ACTION
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|action
operator|!=
literal|null
operator|&&
name|dest
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_SYNTAX_TRAILER_OUTLINES_INVALID
argument_list|,
literal|"Dest entry isn't permitted if the A entry is present"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|action
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|AbstractActionManager
argument_list|>
name|actions
init|=
name|this
operator|.
name|actionFact
operator|.
name|getActions
argument_list|(
name|dictionary
argument_list|,
name|handler
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocument
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|AbstractActionManager
name|act
range|:
name|actions
control|)
block|{
name|isValid
operator|=
name|isValid
operator|&&
name|act
operator|.
name|valid
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
comment|// else no specific validation
comment|// ---- check children
name|PDOutlineItem
name|fChild
init|=
name|inputItem
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
if|if
condition|(
name|fChild
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|isCountEntryPresent
argument_list|(
name|inputItem
operator|.
name|getCOSDictionary
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_SYNTAX_TRAILER_OUTLINES_INVALID
argument_list|,
literal|"Outline item doesn't have Count entry but has at least one descendant."
argument_list|)
argument_list|)
expr_stmt|;
name|isValid
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
comment|// ---- there are some descendants, so dictionary must have a Count
comment|// entry
name|isValid
operator|=
name|isValid
operator|&&
name|exploreOutlineLevel
argument_list|(
name|fChild
argument_list|,
name|handler
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|isValid
return|;
block|}
block|}
end_class

end_unit

