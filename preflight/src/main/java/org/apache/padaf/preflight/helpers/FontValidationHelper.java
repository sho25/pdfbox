begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|helpers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|DocumentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidatorConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationResult
operator|.
name|ValidationError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|font
operator|.
name|FontValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|font
operator|.
name|FontValidatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|font
operator|.
name|Type3FontValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|font
operator|.
name|AbstractFontContainer
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_comment
comment|/**  * This Validation helper validates font objects contained by the PDF File. This  * class stores all validated fonts in the DocumentHandler to allow some  * validation like ContentStream.  *   * So FontValidationHelper must be one of the first validation helper to be  * called.  */
end_comment

begin_class
specifier|public
class|class
name|FontValidationHelper
extends|extends
name|AbstractValidationHelper
block|{
specifier|protected
name|FontValidatorFactory
name|fontValidationFactory
init|=
literal|null
decl_stmt|;
specifier|public
name|FontValidationHelper
parameter_list|(
name|ValidatorConfig
name|cfg
parameter_list|)
throws|throws
name|ValidationException
block|{
name|super
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
name|initFontValidatorFactory
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * instantiate the FontValidatorFactory used by the FontValidationHelper 	 */
specifier|protected
name|void
name|initFontValidatorFactory
parameter_list|()
block|{
name|this
operator|.
name|fontValidationFactory
operator|=
operator|new
name|FontValidatorFactory
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ValidationError
argument_list|>
name|innerValidate
parameter_list|(
name|DocumentHandler
name|handler
parameter_list|)
throws|throws
name|ValidationException
block|{
name|List
argument_list|<
name|ValidationError
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|ValidationError
argument_list|>
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|PDDocument
name|pdfDoc
init|=
name|handler
operator|.
name|getDocument
argument_list|()
decl_stmt|;
name|COSDocument
name|cDoc
init|=
name|pdfDoc
operator|.
name|getDocument
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|lCOSObj
init|=
name|cDoc
operator|.
name|getObjects
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FontValidator
argument_list|>
name|lType3
init|=
operator|new
name|ArrayList
argument_list|<
name|FontValidator
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|lCOSObj
control|)
block|{
name|COSObject
name|cObj
init|=
operator|(
name|COSObject
operator|)
name|o
decl_stmt|;
comment|// If this object represents a Stream, the Dictionary must contain the
comment|// Length key
name|COSBase
name|cBase
init|=
name|cObj
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|cBase
operator|instanceof
name|COSDictionary
condition|)
block|{
name|COSDictionary
name|dic
init|=
operator|(
name|COSDictionary
operator|)
name|cBase
decl_stmt|;
name|String
name|type
init|=
name|dic
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|DICTIONARY_KEY_TYPE
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
operator|&&
name|FONT_DICTIONARY_VALUE_FONT
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|FontValidator
name|fontVal
init|=
name|fontValidationFactory
operator|.
name|getFontValidator
argument_list|(
name|cObj
argument_list|,
name|handler
argument_list|)
decl_stmt|;
if|if
condition|(
name|fontVal
operator|instanceof
name|Type3FontValidator
condition|)
block|{
name|lType3
operator|.
name|add
argument_list|(
name|fontVal
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|validateFont
argument_list|(
name|handler
argument_list|,
name|fontVal
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// ---- Type 3 can contain other font, so type 3 are validated at the end.
for|for
control|(
name|FontValidator
name|t3FontVal
range|:
name|lType3
control|)
block|{
name|validateFont
argument_list|(
name|handler
argument_list|,
name|t3FontVal
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|void
name|validateFont
parameter_list|(
name|DocumentHandler
name|handler
parameter_list|,
name|FontValidator
name|fontVal
parameter_list|,
name|List
argument_list|<
name|ValidationError
argument_list|>
name|result
parameter_list|)
throws|throws
name|ValidationException
block|{
if|if
condition|(
name|fontVal
operator|!=
literal|null
condition|)
block|{
name|fontVal
operator|.
name|validate
argument_list|()
expr_stmt|;
if|if
condition|(
name|fontVal
operator|.
name|getState
argument_list|()
operator|==
name|State
operator|.
name|INVALID
condition|)
block|{
name|result
operator|.
name|addAll
argument_list|(
name|fontVal
operator|.
name|getValdiationErrors
argument_list|()
argument_list|)
expr_stmt|;
comment|// If State is MAYBE, the Error must be checked when the font is used.
block|}
block|}
block|}
block|}
end_class

end_unit

