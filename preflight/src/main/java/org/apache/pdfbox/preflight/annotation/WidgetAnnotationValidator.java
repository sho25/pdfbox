begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|annotation
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|ERROR_ANNOT_FORBIDDEN_AA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|ERROR_ANNOT_MISSING_FIELDS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAnnotationWidget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|ValidationResult
operator|.
name|ValidationError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|exception
operator|.
name|ValidationException
import|;
end_import

begin_comment
comment|/**  * Validation class for the Widget Annotation  */
end_comment

begin_class
specifier|public
class|class
name|WidgetAnnotationValidator
extends|extends
name|AnnotationValidator
block|{
comment|/**    * PDFBox object which wraps the annotation dictionary    */
specifier|protected
name|PDAnnotationWidget
name|pdWidget
init|=
literal|null
decl_stmt|;
specifier|public
name|WidgetAnnotationValidator
parameter_list|(
name|PreflightContext
name|ctx
parameter_list|,
name|COSDictionary
name|annotDictionary
parameter_list|)
block|{
name|super
argument_list|(
name|ctx
argument_list|,
name|annotDictionary
argument_list|)
expr_stmt|;
name|this
operator|.
name|pdWidget
operator|=
operator|new
name|PDAnnotationWidget
argument_list|(
name|annotDictionary
argument_list|)
expr_stmt|;
name|this
operator|.
name|pdAnnot
operator|=
name|this
operator|.
name|pdWidget
expr_stmt|;
block|}
comment|/**    * In addition of the AnnotationValidator.validate() method, this method    * executes the the checkAAField method.    *     * @see org.apache.padaf.preflight.annotation.AnnotationValidator#validate(java.util.List)    */
annotation|@
name|Override
specifier|public
name|boolean
name|validate
parameter_list|()
throws|throws
name|ValidationException
block|{
name|boolean
name|isValide
init|=
name|super
operator|.
name|validate
argument_list|()
decl_stmt|;
name|isValide
operator|=
name|isValide
operator|&&
name|checkAAField
argument_list|()
expr_stmt|;
return|return
name|isValide
return|;
block|}
comment|/**    * The AA field is forbidden for the Widget annotation when the PDF is a    * PDF/A. This method return false and update the errors list if this key is    * present. returns true otherwise    *     * @return    */
specifier|protected
name|boolean
name|checkAAField
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|pdWidget
operator|.
name|getActions
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ctx
operator|.
name|addValidationError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_ANNOT_FORBIDDEN_AA
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/*    * (non-Javadoc)    *     * @seenet.awl.edoc.pdfa.validation.annotation.AnnotationValidator#    * checkMandatoryFields()    */
specifier|protected
name|boolean
name|checkMandatoryFields
parameter_list|()
block|{
name|boolean
name|subtype
init|=
name|this
operator|.
name|annotDictionary
operator|.
name|containsKey
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|)
decl_stmt|;
name|boolean
name|rect
init|=
name|this
operator|.
name|annotDictionary
operator|.
name|containsKey
argument_list|(
name|COSName
operator|.
name|RECT
argument_list|)
decl_stmt|;
name|boolean
name|f
init|=
name|this
operator|.
name|annotDictionary
operator|.
name|containsKey
argument_list|(
name|COSName
operator|.
name|F
argument_list|)
decl_stmt|;
name|boolean
name|result
init|=
operator|(
name|subtype
operator|&&
name|rect
operator|&&
name|f
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|result
condition|)
block|{
name|ctx
operator|.
name|addValidationError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_ANNOT_MISSING_FIELDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

