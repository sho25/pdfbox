begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|font
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|ttf
operator|.
name|CMAPEncodingEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|ttf
operator|.
name|CMAPTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|ttf
operator|.
name|TTFParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|ttf
operator|.
name|TrueTypeFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|encoding
operator|.
name|Encoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|encoding
operator|.
name|MacRomanEncoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|encoding
operator|.
name|WinAnsiEncoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDFontDescriptorDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|ValidationResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|ValidationResult
operator|.
name|ValidationError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|exception
operator|.
name|ValidationException
import|;
end_import

begin_class
specifier|public
class|class
name|TrueTypeFontValidator
extends|extends
name|SimpleFontValidator
block|{
specifier|public
name|TrueTypeFontValidator
parameter_list|(
name|PreflightContext
name|context
parameter_list|,
name|PDFont
name|font
parameter_list|)
throws|throws
name|ValidationException
block|{
name|super
argument_list|(
name|context
argument_list|,
name|font
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Check if mandatory fields are present. Return false if a field is missing, 	 * true otherwise. If validation fails, the FontContainer is updated. 	 */
specifier|protected
name|boolean
name|checkSpecificMandatoryFields
parameter_list|()
block|{
comment|// ---- name is required only in a PDF-1.0.
comment|// ---- Currently our grammar matches only with PDF-1.[1-4]
comment|// ---- BaseFont is required and is usually the FontName
if|if
condition|(
name|basefont
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|basefont
argument_list|)
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_DICTIONARY_INVALID
argument_list|,
literal|"BaseFont is missing"
argument_list|)
argument_list|)
expr_stmt|;
comment|// continue to process this font dictionary is useless
return|return
literal|false
return|;
block|}
name|boolean
name|allPresent
init|=
operator|(
name|firstChar
operator|>=
literal|0
operator|&&
name|lastChar
operator|>=
literal|0
operator|&&
name|widths
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|allPresent
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_DICTIONARY_INVALID
argument_list|,
literal|"Required keys are missing"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// else  ok
return|return
literal|true
return|;
block|}
comment|/* 	 * (non-Javadoc) 	 *  	 * @see 	 * net.awl.edoc.pdfa.validation.font.SimpleFontValidator#checkFontDescriptor() 	 */
annotation|@
name|Override
specifier|protected
name|boolean
name|checkFontDescriptor
parameter_list|()
throws|throws
name|ValidationException
block|{
name|boolean
name|res
init|=
name|checkFontDescriptorMandatoryFields
argument_list|()
decl_stmt|;
name|res
operator|=
name|res
operator|&&
name|checkFontName
argument_list|()
expr_stmt|;
name|res
operator|=
name|res
operator|&&
name|checkFontFileElement
argument_list|()
expr_stmt|;
return|return
name|res
return|;
block|}
comment|/** 	 * If the FontName is missing from the FontDescriptor dictionary, this method 	 * returns false and the FontContainer is updated. 	 *  	 * @return 	 */
specifier|protected
name|boolean
name|checkFontName
parameter_list|()
block|{
name|String
name|fontName
init|=
name|this
operator|.
name|pFontDesc
operator|.
name|getFontName
argument_list|()
decl_stmt|;
if|if
condition|(
name|fontName
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationResult
operator|.
name|ValidationError
argument_list|(
name|PreflightConstants
operator|.
name|ERROR_FONTS_DESCRIPTOR_INVALID
argument_list|,
literal|"The FontName in font descriptor is null"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/** 	 * This methods validates the Font Stream. If the font is damaged or missing 	 * the FontContainer is updated and false is returned. Moreover, this method 	 * checks the Encoding property of the FontDescriptor dictionary. 	 *  	 * @return 	 */
specifier|protected
name|boolean
name|checkFontFileElement
parameter_list|()
throws|throws
name|ValidationException
block|{
if|if
condition|(
name|pFontDesc
operator|instanceof
name|PDFontDescriptorDictionary
condition|)
block|{
name|PDStream
name|ff1
init|=
operator|(
operator|(
name|PDFontDescriptorDictionary
operator|)
name|pFontDesc
operator|)
operator|.
name|getFontFile
argument_list|()
decl_stmt|;
name|PDStream
name|ff2
init|=
operator|(
operator|(
name|PDFontDescriptorDictionary
operator|)
name|pFontDesc
operator|)
operator|.
name|getFontFile2
argument_list|()
decl_stmt|;
name|PDStream
name|ff3
init|=
operator|(
operator|(
name|PDFontDescriptorDictionary
operator|)
name|pFontDesc
operator|)
operator|.
name|getFontFile3
argument_list|()
decl_stmt|;
name|boolean
name|onlyOne
init|=
operator|(
name|ff1
operator|!=
literal|null
operator|&&
name|ff2
operator|==
literal|null
operator|&&
name|ff3
operator|==
literal|null
operator|)
operator|||
operator|(
name|ff1
operator|==
literal|null
operator|&&
name|ff2
operator|!=
literal|null
operator|&&
name|ff3
operator|==
literal|null
operator|)
operator|||
operator|(
name|ff1
operator|==
literal|null
operator|&&
name|ff2
operator|==
literal|null
operator|&&
name|ff3
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|ff2
operator|==
literal|null
operator|||
operator|!
name|onlyOne
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationResult
operator|.
name|ValidationError
argument_list|(
name|PreflightConstants
operator|.
name|ERROR_FONTS_FONT_FILEX_INVALID
argument_list|,
literal|"The FontFile2 is invalid"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// ---- Stream validation should be done by the StreamValidateHelper.
comment|// ---- Process font specific check
name|COSStream
name|stream
init|=
name|ff2
operator|.
name|getStream
argument_list|()
decl_stmt|;
if|if
condition|(
name|stream
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationResult
operator|.
name|ValidationError
argument_list|(
name|PreflightConstants
operator|.
name|ERROR_FONTS_FONT_FILEX_INVALID
argument_list|,
literal|"The FontFile is missing"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|fontContainer
operator|.
name|setFontProgramEmbedded
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|boolean
name|hasLength1
init|=
name|stream
operator|.
name|getInt
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|FONT_DICTIONARY_KEY_LENGTH1
argument_list|)
argument_list|)
operator|>
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|hasLength1
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationResult
operator|.
name|ValidationError
argument_list|(
name|PreflightConstants
operator|.
name|ERROR_FONTS_FONT_FILEX_INVALID
argument_list|,
literal|"The FontFile is invalid"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// ---- check the encoding part.
if|if
condition|(
name|pFontDesc
operator|.
name|isNonSymbolic
argument_list|()
condition|)
block|{
comment|// ---- only MacRomanEncoding or WinAnsiEncoding are allowed for a non
comment|// symbolic font
name|Encoding
name|encodingValue
init|=
name|this
operator|.
name|pFont
operator|.
name|getFontEncoding
argument_list|()
decl_stmt|;
if|if
condition|(
name|encodingValue
operator|==
literal|null
operator|||
operator|!
operator|(
name|encodingValue
operator|instanceof
name|MacRomanEncoding
operator|||
name|encodingValue
operator|instanceof
name|WinAnsiEncoding
operator|)
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationResult
operator|.
name|ValidationError
argument_list|(
name|PreflightConstants
operator|.
name|ERROR_FONTS_ENCODING
argument_list|,
literal|"The Encoding is invalid for the NonSymbolic TTF"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|pFontDesc
operator|.
name|isSymbolic
argument_list|()
condition|)
block|{
comment|// ---- For symbolic font, no encoding entry is allowed and only one
comment|// encoding entry is expected into the FontFile CMap
if|if
condition|(
operator|(
operator|(
name|COSDictionary
operator|)
name|this
operator|.
name|pFont
operator|.
name|getCOSObject
argument_list|()
operator|)
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|FONT_DICTIONARY_KEY_ENCODING
argument_list|)
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationResult
operator|.
name|ValidationError
argument_list|(
name|PreflightConstants
operator|.
name|ERROR_FONTS_ENCODING
argument_list|,
literal|"The Encoding should be missing for the Symbolic TTF"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// else check the content of the Font CMap (see below)
block|}
else|else
block|{
comment|// ----- should never happen
return|return
literal|true
return|;
block|}
comment|/* 			 * ---- try to load the font using the TTFParser object. If the font is 			 * invalid, an exception will be thrown. Because of it is a Embedded Font 			 * Program, some tables are required and other are optional see PDF 			 * Reference (§5.8) 			 */
name|ByteArrayInputStream
name|bis
init|=
literal|null
decl_stmt|;
try|try
block|{
name|bis
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|ff2
operator|.
name|getByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|TrueTypeFont
name|ttf
init|=
operator|new
name|TTFParser
argument_list|(
literal|true
argument_list|)
operator|.
name|parseTTF
argument_list|(
name|bis
argument_list|)
decl_stmt|;
if|if
condition|(
name|pFontDesc
operator|.
name|isSymbolic
argument_list|()
operator|&&
name|ttf
operator|.
name|getCMAP
argument_list|()
operator|.
name|getCmaps
argument_list|()
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationResult
operator|.
name|ValidationError
argument_list|(
name|PreflightConstants
operator|.
name|ERROR_FONTS_ENCODING
argument_list|,
literal|"The Encoding should be missing for the Symbolic TTF"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
operator|(
operator|(
name|TrueTypeFontContainer
operator|)
name|this
operator|.
name|fontContainer
operator|)
operator|.
name|setFontObjectAndInitializeInnerFields
argument_list|(
name|ttf
argument_list|)
expr_stmt|;
operator|(
operator|(
name|TrueTypeFontContainer
operator|)
name|this
operator|.
name|fontContainer
operator|)
operator|.
name|setCMap
argument_list|(
name|getCMapOfFontProgram
argument_list|(
name|ttf
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|checkFontFileMetaData
argument_list|(
name|pFontDesc
argument_list|,
name|ff2
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationResult
operator|.
name|ValidationError
argument_list|(
name|PreflightConstants
operator|.
name|ERROR_FONTS_TRUETYPE_DAMAGED
argument_list|,
literal|"The FontFile can't be read"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|bis
operator|!=
literal|null
condition|)
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|bis
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|ValidationException
argument_list|(
literal|"Invalid FontDescription object, expected PDFontDescriptorDictionary"
argument_list|)
throw|;
block|}
block|}
comment|/** 	 * Return the CMap encoding entry to use. This CMap belong to the TrueType 	 * Font Program. 	 *  	 * Here the selection rules : 	 *<UL> 	 *<li>For a Symbolic TrueType, the Font Program has only one CMap (Checked in 	 * the checkFontFileElement method) 	 *<li>For a Non-Symbolic TrueType, only two CMap can be used (WinAnsi 	 * (plateformId : 3 / encodingId : 1) or MacRoman (plateformId : 1 / 	 * encodingId : 0) ). This CMap returns the CMap which corresponds to the 	 * Encoding value of the FontDescriptor dictionary. 	 *</UL> 	 *  	 * @param ttf 	 *          The FontBox object which manages a TrueType Font program. 	 * @return 	 * @throws ValidationException 	 *           if the FontProgram doesn't have the expected CMap 	 */
specifier|protected
name|CMAPEncodingEntry
index|[]
name|getCMapOfFontProgram
parameter_list|(
name|TrueTypeFont
name|ttf
parameter_list|)
throws|throws
name|ValidationException
block|{
name|CMAPTable
name|cmap
init|=
name|ttf
operator|.
name|getCMAP
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|pFontDesc
operator|.
name|isSymbolic
argument_list|()
condition|)
block|{
return|return
name|cmap
operator|.
name|getCmaps
argument_list|()
return|;
block|}
else|else
block|{
name|List
argument_list|<
name|CMAPEncodingEntry
argument_list|>
name|res
init|=
operator|new
name|ArrayList
argument_list|<
name|CMAPEncodingEntry
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|firstIs31
init|=
literal|false
decl_stmt|;
for|for
control|(
name|CMAPEncodingEntry
name|cmapEntry
range|:
name|cmap
operator|.
name|getCmaps
argument_list|()
control|)
block|{
comment|// ---- Returns the WinAnsiEncoding CMap
if|if
condition|(
operator|(
name|cmapEntry
operator|.
name|getPlatformId
argument_list|()
operator|==
literal|3
operator|)
operator|&&
operator|(
name|cmapEntry
operator|.
name|getPlatformEncodingId
argument_list|()
operator|==
literal|1
operator|)
condition|)
block|{
name|res
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|cmapEntry
argument_list|)
expr_stmt|;
name|firstIs31
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|cmapEntry
operator|.
name|getPlatformId
argument_list|()
operator|==
literal|1
operator|)
operator|&&
operator|(
name|cmapEntry
operator|.
name|getPlatformEncodingId
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
if|if
condition|(
name|firstIs31
condition|)
block|{
name|res
operator|.
name|add
argument_list|(
literal|1
argument_list|,
name|cmapEntry
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|res
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|cmapEntry
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|res
operator|.
name|add
argument_list|(
name|cmapEntry
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|res
operator|.
name|toArray
argument_list|(
operator|new
name|CMAPEncodingEntry
index|[
name|res
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

