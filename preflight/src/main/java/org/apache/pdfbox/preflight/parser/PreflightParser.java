begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|FileDataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSFloat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSNumber
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSObjectKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|io
operator|.
name|RandomAccessBufferedFileInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdfparser
operator|.
name|PDFObjectStreamParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdfparser
operator|.
name|PDFParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdfparser
operator|.
name|XrefTrailerResolver
operator|.
name|XRefType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|Format
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|ValidationResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|ValidationResult
operator|.
name|ValidationError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|exception
operator|.
name|SyntaxValidationException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|ERROR_SYNTAX_ARRAY_TOO_LONG
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|ERROR_SYNTAX_CROSS_REF
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|ERROR_SYNTAX_HEXA_STRING_EVEN_NUMBER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|ERROR_SYNTAX_HEXA_STRING_INVALID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|ERROR_SYNTAX_HEXA_STRING_TOO_LONG
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|ERROR_SYNTAX_INVALID_OFFSET
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|ERROR_SYNTAX_MISSING_OFFSET
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|ERROR_SYNTAX_NAME_TOO_LONG
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|ERROR_SYNTAX_NUMERIC_RANGE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|ERROR_SYNTAX_OBJ_DELIMITER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|ERROR_SYNTAX_STREAM_DELIMITER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|ERROR_SYNTAX_TOO_MANY_ENTRIES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|ERROR_SYNTAX_TRAILER_EOF
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|MAX_ARRAY_ELEMENTS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|MAX_DICT_ENTRIES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|MAX_NAME_SIZE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|MAX_NEGATIVE_FLOAT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|MAX_POSITIVE_FLOAT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|MAX_STRING_LENGTH
import|;
end_import

begin_class
specifier|public
class|class
name|PreflightParser
extends|extends
name|PDFParser
block|{
comment|/**      * Define a one byte encoding that hasn't specific encoding in UTF-8 charset. Avoid unexpected error when the      * encoding is Cp5816      */
specifier|public
specifier|static
specifier|final
name|Charset
name|encoding
init|=
name|Charset
operator|.
name|forName
argument_list|(
literal|"ISO-8859-1"
argument_list|)
decl_stmt|;
specifier|protected
name|DataSource
name|dataSource
decl_stmt|;
specifier|protected
name|ValidationResult
name|validationResult
decl_stmt|;
specifier|protected
name|PreflightDocument
name|preflightDocument
decl_stmt|;
specifier|protected
name|PreflightContext
name|ctx
decl_stmt|;
comment|/**      * Constructor.      *      * @param file      * @throws IOException if there is a reading error.      */
specifier|public
name|PreflightParser
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO move file handling outside of the parser
name|super
argument_list|(
operator|new
name|RandomAccessBufferedFileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|setLenient
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|dataSource
operator|=
operator|new
name|FileDataSource
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor.      *      * @param filename      * @throws IOException if there is a reading error.      */
specifier|public
name|PreflightParser
parameter_list|(
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO move file handling outside of the parser
name|this
argument_list|(
operator|new
name|File
argument_list|(
name|filename
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor. This one is slower than the file and the filename constructors, because      * a temporary file will be created.      *      * @param dataSource the datasource      * @throws IOException if there is a reading error.      */
specifier|public
name|PreflightParser
parameter_list|(
name|DataSource
name|dataSource
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO move file handling outside of the parser
name|super
argument_list|(
operator|new
name|RandomAccessBufferedFileInputStream
argument_list|(
name|dataSource
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|setLenient
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|dataSource
operator|=
name|dataSource
expr_stmt|;
block|}
comment|/**      * Create an instance of ValidationResult with a ValidationError(UNKNOWN_ERROR)      *       * @return the ValidationError instance.      */
specifier|protected
specifier|static
name|ValidationResult
name|createUnknownErrorResult
parameter_list|()
block|{
name|ValidationError
name|error
init|=
operator|new
name|ValidationError
argument_list|(
name|PreflightConstants
operator|.
name|ERROR_UNKOWN_ERROR
argument_list|)
decl_stmt|;
return|return
operator|new
name|ValidationResult
argument_list|(
name|error
argument_list|)
return|;
block|}
comment|/**      * Add the error to the ValidationResult. If the validationResult is null, an instance is created using the      * isWarning boolean of the ValidationError to know if the ValidationResult must be flagged as Valid.      *       * @param error      */
specifier|protected
name|void
name|addValidationError
parameter_list|(
name|ValidationError
name|error
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|validationResult
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|validationResult
operator|=
operator|new
name|ValidationResult
argument_list|(
name|error
operator|.
name|isWarning
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|validationResult
operator|.
name|addError
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|addValidationErrors
parameter_list|(
name|List
argument_list|<
name|ValidationError
argument_list|>
name|errors
parameter_list|)
block|{
for|for
control|(
name|ValidationError
name|error
range|:
name|errors
control|)
block|{
name|addValidationError
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|parse
parameter_list|()
throws|throws
name|IOException
block|{
name|parse
argument_list|(
name|Format
operator|.
name|PDF_A1B
argument_list|)
expr_stmt|;
block|}
comment|/**      * Parse the given file and check if it is a confirming file according to the given format.      *       * @param format      *            format that the document should follow (default {@link Format#PDF_A1B})      * @throws IOException      */
specifier|public
name|void
name|parse
parameter_list|(
name|Format
name|format
parameter_list|)
throws|throws
name|IOException
block|{
name|parse
argument_list|(
name|format
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Parse the given file and check if it is a confirming file according to the given format.      *       * @param format      *            format that the document should follow (default {@link Format#PDF_A1B})      * @param config      *            Configuration bean that will be used by the PreflightDocument. If null the format is used to determine      *            the default configuration.      * @throws IOException      */
specifier|public
name|void
name|parse
parameter_list|(
name|Format
name|format
parameter_list|,
name|PreflightConfiguration
name|config
parameter_list|)
throws|throws
name|IOException
block|{
name|checkPdfHeader
argument_list|()
expr_stmt|;
try|try
block|{
name|super
operator|.
name|parse
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|addValidationError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|PreflightConstants
operator|.
name|ERROR_SYNTAX_COMMON
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SyntaxValidationException
argument_list|(
name|e
argument_list|,
name|this
operator|.
name|validationResult
argument_list|)
throw|;
block|}
finally|finally
block|{
comment|// TODO move file handling outside of the parser
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
name|Format
name|formatToUse
init|=
operator|(
name|format
operator|==
literal|null
condition|?
name|Format
operator|.
name|PDF_A1B
else|:
name|format
operator|)
decl_stmt|;
name|createPdfADocument
argument_list|(
name|formatToUse
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|createContext
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|createPdfADocument
parameter_list|(
name|Format
name|format
parameter_list|,
name|PreflightConfiguration
name|config
parameter_list|)
throws|throws
name|IOException
block|{
name|COSDocument
name|cosDocument
init|=
name|getDocument
argument_list|()
decl_stmt|;
name|this
operator|.
name|preflightDocument
operator|=
operator|new
name|PreflightDocument
argument_list|(
name|cosDocument
argument_list|,
name|format
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a validation context. This context is set to the PreflightDocument.      */
specifier|protected
name|void
name|createContext
parameter_list|()
block|{
name|this
operator|.
name|ctx
operator|=
operator|new
name|PreflightContext
argument_list|(
name|this
operator|.
name|dataSource
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|setDocument
argument_list|(
name|preflightDocument
argument_list|)
expr_stmt|;
name|preflightDocument
operator|.
name|setContext
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|setXrefTrailerResolver
argument_list|(
name|xrefTrailerResolver
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|PDDocument
name|getPDDocument
parameter_list|()
throws|throws
name|IOException
block|{
name|preflightDocument
operator|.
name|setResult
argument_list|(
name|validationResult
argument_list|)
expr_stmt|;
comment|// Add XMP MetaData
return|return
name|preflightDocument
return|;
block|}
specifier|public
name|PreflightDocument
name|getPreflightDocument
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|(
name|PreflightDocument
operator|)
name|getPDDocument
argument_list|()
return|;
block|}
comment|// --------------------------------------------------------
comment|// - Below All methods that adds controls on the PDF syntax
comment|// --------------------------------------------------------
annotation|@
name|Override
comment|/**      * Fill the CosDocument with some object that isn't set by the NonSequentialParser      */
specifier|protected
name|void
name|initialParse
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|initialParse
argument_list|()
expr_stmt|;
comment|// For each ObjectKey, we check if the object has been loaded
comment|// useful for linearized PDFs
name|Map
argument_list|<
name|COSObjectKey
argument_list|,
name|Long
argument_list|>
name|xrefTable
init|=
name|document
operator|.
name|getXrefTable
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|COSObjectKey
argument_list|,
name|Long
argument_list|>
name|entry
range|:
name|xrefTable
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|COSObject
name|co
init|=
name|document
operator|.
name|getObjectFromPool
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|co
operator|.
name|getObject
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// object isn't loaded - parse the object to load its content
name|parseObjectDynamically
argument_list|(
name|co
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Check that the PDF header match rules of the PDF/A specification. First line (offset 0) must      * be a comment with the PDF version (version 1.0 isn't conform to the PDF/A specification)      * Second line is a comment with at least 4 bytes greater than 0x80      */
specifier|protected
name|void
name|checkPdfHeader
parameter_list|()
block|{
try|try
block|{
name|source
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|String
name|firstLine
init|=
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|firstLine
operator|==
literal|null
operator|||
operator|!
name|firstLine
operator|.
name|matches
argument_list|(
literal|"%PDF-1\\.[1-9]"
argument_list|)
condition|)
block|{
name|addValidationError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|PreflightConstants
operator|.
name|ERROR_SYNTAX_HEADER
argument_list|,
literal|"First line must match %PDF-1.\\d"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|secondLine
init|=
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|secondLine
operator|!=
literal|null
condition|)
block|{
name|byte
index|[]
name|secondLineAsBytes
init|=
name|secondLine
operator|.
name|getBytes
argument_list|(
name|encoding
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|secondLineAsBytes
operator|.
name|length
operator|>=
literal|5
condition|)
block|{
if|if
condition|(
name|secondLineAsBytes
index|[
literal|0
index|]
operator|!=
literal|'%'
condition|)
block|{
name|addValidationError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|PreflightConstants
operator|.
name|ERROR_SYNTAX_HEADER
argument_list|,
literal|"Second line must begin with '%' followed by at least 4 bytes greater than 127"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|5
condition|;
operator|++
name|i
control|)
block|{
name|byte
name|b
init|=
name|secondLineAsBytes
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|(
name|b
operator|&
literal|0xFF
operator|)
operator|<
literal|0x80
condition|)
block|{
name|addValidationError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|PreflightConstants
operator|.
name|ERROR_SYNTAX_HEADER
argument_list|,
literal|"Second line must begin with '%' followed by at least 4 bytes greater than 127"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
else|else
block|{
name|addValidationError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|PreflightConstants
operator|.
name|ERROR_SYNTAX_HEADER
argument_list|,
literal|"Second line must begin with '%' followed by at least 4 bytes greater than 127"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|source
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|addValidationError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|PreflightConstants
operator|.
name|ERROR_SYNTAX_HEADER
argument_list|,
literal|"Unable to read the PDF file : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Same method than the {@linkplain PDFParser#parseXrefTable(long)} with additional controls : -      * EOL mandatory after the 'xref' keyword - Cross reference subsection header uses single white      * space as separator - and so on      *      * @param startByteOffset the offset to start at      * @return false on parsing error      * @throws IOException If an IO error occurs.      */
annotation|@
name|Override
specifier|protected
name|boolean
name|parseXrefTable
parameter_list|(
name|long
name|startByteOffset
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|source
operator|.
name|peek
argument_list|()
operator|!=
literal|'x'
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|xref
init|=
name|readString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|xref
operator|.
name|equals
argument_list|(
literal|"xref"
argument_list|)
condition|)
block|{
name|addValidationError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|PreflightConstants
operator|.
name|ERROR_SYNTAX_CROSS_REF
argument_list|,
literal|"xref must be followed by a EOL character"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|nextIsEOL
argument_list|()
condition|)
block|{
name|addValidationError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|PreflightConstants
operator|.
name|ERROR_SYNTAX_CROSS_REF
argument_list|,
literal|"xref must be followed by EOL"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// signal start of new XRef
name|xrefTrailerResolver
operator|.
name|nextXrefObj
argument_list|(
name|startByteOffset
argument_list|,
name|XRefType
operator|.
name|TABLE
argument_list|)
expr_stmt|;
comment|// Xref tables can have multiple sections. Each starts with a starting object id and a count.
while|while
condition|(
literal|true
condition|)
block|{
comment|// just after the xref<EOL> there are an integer
comment|// first obj id
name|long
name|currObjID
decl_stmt|;
comment|// the number of objects in the xref table
name|int
name|count
decl_stmt|;
name|long
name|offset
init|=
name|source
operator|.
name|getPosition
argument_list|()
decl_stmt|;
name|String
name|line
init|=
name|readLine
argument_list|()
decl_stmt|;
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(\\d+)\\s(\\d+)(\\s*)"
argument_list|)
decl_stmt|;
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|currObjID
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|count
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addValidationError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_SYNTAX_CROSS_REF
argument_list|,
literal|"Cross reference subsection header is invalid: '"
operator|+
name|line
operator|+
literal|"' at position "
operator|+
name|source
operator|.
name|getPosition
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// reset source cursor to read xref information
name|source
operator|.
name|seek
argument_list|(
name|offset
argument_list|)
expr_stmt|;
comment|// first obj id
name|currObjID
operator|=
name|readObjectNumber
argument_list|()
expr_stmt|;
comment|// the number of objects in the xref table
name|count
operator|=
name|readInt
argument_list|()
expr_stmt|;
block|}
name|skipSpaces
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|source
operator|.
name|isEOF
argument_list|()
operator|||
name|isEndOfName
argument_list|(
operator|(
name|char
operator|)
name|source
operator|.
name|peek
argument_list|()
argument_list|)
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|source
operator|.
name|peek
argument_list|()
operator|==
literal|'t'
condition|)
block|{
name|addValidationError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|PreflightConstants
operator|.
name|ERROR_SYNTAX_CROSS_REF
argument_list|,
literal|"Expected xref line but 't' found"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
comment|// Ignore table contents
name|String
name|currentLine
init|=
name|readLine
argument_list|()
decl_stmt|;
name|String
index|[]
name|splitString
init|=
name|currentLine
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
if|if
condition|(
name|splitString
operator|.
name|length
operator|<
literal|3
condition|)
block|{
name|addValidationError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|PreflightConstants
operator|.
name|ERROR_SYNTAX_CROSS_REF
argument_list|,
literal|"invalid xref line: "
operator|+
name|currentLine
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
comment|// This supports the corrupt table as reported in PDFBOX-474 (XXXX XXX XX n)
if|if
condition|(
name|splitString
index|[
name|splitString
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|equals
argument_list|(
literal|"n"
argument_list|)
condition|)
block|{
try|try
block|{
name|long
name|currOffset
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|splitString
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|int
name|currGenID
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|splitString
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|COSObjectKey
name|objKey
init|=
operator|new
name|COSObjectKey
argument_list|(
name|currObjID
argument_list|,
name|currGenID
argument_list|)
decl_stmt|;
name|xrefTrailerResolver
operator|.
name|setXRef
argument_list|(
name|objKey
argument_list|,
name|currOffset
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|addValidationError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|PreflightConstants
operator|.
name|ERROR_SYNTAX_CROSS_REF
argument_list|,
literal|"offset or genid can't be read as number "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|splitString
index|[
literal|2
index|]
operator|.
name|equals
argument_list|(
literal|"f"
argument_list|)
condition|)
block|{
name|addValidationError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|PreflightConstants
operator|.
name|ERROR_SYNTAX_CROSS_REF
argument_list|,
literal|"Corrupt XRefTable Entry - ObjID:"
operator|+
name|currObjID
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|currObjID
operator|++
expr_stmt|;
name|skipSpaces
argument_list|()
expr_stmt|;
block|}
name|skipSpaces
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|isDigit
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Wraps the {@link PDFParser#parseCOSStream} to check rules on 'stream' and 'endstream'      * keywords. {@link #checkStreamKeyWord()} and {@link #checkEndstreamKeyWord()}      *      * @param dic dictionary that goes with this stream.      *      * @return parsed pdf stream.      *      * @throws IOException if an error occurred reading the stream, like problems with reading      * length attribute, stream does not end with 'endstream' after data read, stream too short etc.      */
annotation|@
name|Override
specifier|protected
name|COSStream
name|parseCOSStream
parameter_list|(
name|COSDictionary
name|dic
parameter_list|)
throws|throws
name|IOException
block|{
name|checkStreamKeyWord
argument_list|()
expr_stmt|;
name|COSStream
name|result
init|=
name|super
operator|.
name|parseCOSStream
argument_list|(
name|dic
argument_list|)
decl_stmt|;
name|checkEndstreamKeyWord
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**      * 'stream' must be followed by&lt;CR&gt;&lt;LF&gt; or only&lt;LF&gt;      *       * @throws IOException      */
specifier|protected
name|void
name|checkStreamKeyWord
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|streamV
init|=
name|readString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|streamV
operator|.
name|equals
argument_list|(
literal|"stream"
argument_list|)
condition|)
block|{
name|addValidationError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_SYNTAX_STREAM_DELIMITER
argument_list|,
literal|"Expected 'stream' keyword but found '"
operator|+
name|streamV
operator|+
literal|"' at offset "
operator|+
name|source
operator|.
name|getPosition
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|nextChar
init|=
name|source
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
operator|(
name|nextChar
operator|==
literal|13
operator|&&
name|source
operator|.
name|peek
argument_list|()
operator|==
literal|10
operator|)
operator|||
name|nextChar
operator|==
literal|10
operator|)
condition|)
block|{
name|addValidationError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_SYNTAX_STREAM_DELIMITER
argument_list|,
literal|"Expected 'EOL' after the stream keyword at offset "
operator|+
name|source
operator|.
name|getPosition
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// set the offset before stream
name|source
operator|.
name|seek
argument_list|(
name|source
operator|.
name|getPosition
argument_list|()
operator|-
literal|7
argument_list|)
expr_stmt|;
block|}
comment|/**      * 'endstream' must be preceded by an EOL      *       * @throws IOException      */
specifier|protected
name|void
name|checkEndstreamKeyWord
parameter_list|()
throws|throws
name|IOException
block|{
name|source
operator|.
name|seek
argument_list|(
name|source
operator|.
name|getPosition
argument_list|()
operator|-
literal|10
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|nextIsEOL
argument_list|()
condition|)
block|{
name|addValidationError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_SYNTAX_STREAM_DELIMITER
argument_list|,
literal|"Expected 'EOL' before the endstream keyword at offset "
operator|+
name|source
operator|.
name|getPosition
argument_list|()
operator|+
literal|" but found '"
operator|+
name|source
operator|.
name|peek
argument_list|()
operator|+
literal|"'"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|endstreamV
init|=
name|readString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|endstreamV
operator|.
name|equals
argument_list|(
literal|"endstream"
argument_list|)
condition|)
block|{
name|addValidationError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_SYNTAX_STREAM_DELIMITER
argument_list|,
literal|"Expected 'endstream' keyword at offset "
operator|+
name|source
operator|.
name|getPosition
argument_list|()
operator|+
literal|" but found '"
operator|+
name|endstreamV
operator|+
literal|"'"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|nextIsEOL
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|succeed
init|=
literal|false
decl_stmt|;
name|int
name|nextChar
init|=
name|source
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|ASCII_CR
operator|==
name|nextChar
operator|&&
name|ASCII_LF
operator|==
name|source
operator|.
name|peek
argument_list|()
condition|)
block|{
name|source
operator|.
name|read
argument_list|()
expr_stmt|;
name|succeed
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ASCII_CR
operator|==
name|nextChar
operator|||
name|ASCII_LF
operator|==
name|nextChar
condition|)
block|{
name|succeed
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|succeed
return|;
block|}
annotation|@
name|Override
comment|/**      * Call {@link BaseParser#parseCOSArray()} and check the number of element in the array      */
specifier|protected
name|COSArray
name|parseCOSArray
parameter_list|()
throws|throws
name|IOException
block|{
name|COSArray
name|result
init|=
name|super
operator|.
name|parseCOSArray
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
operator|&&
name|result
operator|.
name|size
argument_list|()
operator|>
name|MAX_ARRAY_ELEMENTS
condition|)
block|{
name|addValidationError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_SYNTAX_ARRAY_TOO_LONG
argument_list|,
literal|"Array too long : "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
comment|/**      * Call {@link BaseParser#parseCOSName()} and check the length of the name      */
specifier|protected
name|COSName
name|parseCOSName
parameter_list|()
throws|throws
name|IOException
block|{
name|COSName
name|result
init|=
name|super
operator|.
name|parseCOSName
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
operator|&&
name|result
operator|.
name|getName
argument_list|()
operator|.
name|getBytes
argument_list|()
operator|.
name|length
operator|>
name|MAX_NAME_SIZE
condition|)
block|{
name|addValidationError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_SYNTAX_NAME_TOO_LONG
argument_list|,
literal|"Name too long: "
operator|+
name|result
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * Check that the hexa string contains only an even number of      * Hexadecimal characters. Once it is done, reset the offset at the beginning of the string and      * call {@link PDFParser#parseCOSString()}      *      * @return The parsed PDF string.      *      * @throws IOException If there is an error reading from the stream.      */
annotation|@
name|Override
specifier|protected
name|COSString
name|parseCOSString
parameter_list|()
throws|throws
name|IOException
block|{
comment|// offset reminder
name|long
name|offset
init|=
name|source
operator|.
name|getPosition
argument_list|()
decl_stmt|;
name|char
name|nextChar
init|=
operator|(
name|char
operator|)
name|source
operator|.
name|read
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|nextChar
operator|==
literal|'<'
condition|)
block|{
do|do
block|{
name|nextChar
operator|=
operator|(
name|char
operator|)
name|source
operator|.
name|read
argument_list|()
expr_stmt|;
if|if
condition|(
name|nextChar
operator|!=
literal|'>'
condition|)
block|{
if|if
condition|(
name|isWhitespace
argument_list|(
name|nextChar
argument_list|)
condition|)
block|{
comment|// ignore space characters
continue|continue;
block|}
if|if
condition|(
name|Character
operator|.
name|digit
argument_list|(
name|nextChar
argument_list|,
literal|16
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
else|else
block|{
name|addValidationError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_SYNTAX_HEXA_STRING_INVALID
argument_list|,
literal|"Hexa String must have only Hexadecimal Characters (found '"
operator|+
name|nextChar
operator|+
literal|"') at offset "
operator|+
name|source
operator|.
name|getPosition
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
do|while
condition|(
name|nextChar
operator|!=
literal|'>'
condition|)
do|;
block|}
if|if
condition|(
name|count
operator|%
literal|2
operator|!=
literal|0
condition|)
block|{
name|addValidationError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_SYNTAX_HEXA_STRING_EVEN_NUMBER
argument_list|,
literal|"Hexa string shall contain even number of non white space char at offset "
operator|+
name|source
operator|.
name|getPosition
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// reset the offset to parse the COSString
name|source
operator|.
name|seek
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|COSString
name|result
init|=
name|super
operator|.
name|parseCOSString
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|getString
argument_list|()
operator|.
name|length
argument_list|()
operator|>
name|MAX_STRING_LENGTH
condition|)
block|{
name|addValidationError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_SYNTAX_HEXA_STRING_TOO_LONG
argument_list|,
literal|"Hexa string is too long at offset "
operator|+
name|source
operator|.
name|getPosition
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * Call {@link PDFParser#parseDirObject()} check limit range for Float, Integer and number of      * Dictionary entries.      *      * @return The parsed object.      * @throws java.io.IOException if there is an error during parsing.      */
annotation|@
name|Override
specifier|protected
name|COSBase
name|parseDirObject
parameter_list|()
throws|throws
name|IOException
block|{
name|COSBase
name|result
init|=
name|super
operator|.
name|parseDirObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|instanceof
name|COSNumber
condition|)
block|{
name|COSNumber
name|number
init|=
operator|(
name|COSNumber
operator|)
name|result
decl_stmt|;
if|if
condition|(
name|number
operator|instanceof
name|COSFloat
condition|)
block|{
name|Double
name|real
init|=
name|number
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|real
operator|>
name|MAX_POSITIVE_FLOAT
operator|||
name|real
operator|<
name|MAX_NEGATIVE_FLOAT
condition|)
block|{
name|addValidationError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_SYNTAX_NUMERIC_RANGE
argument_list|,
literal|"Float is too long or too small: "
operator|+
name|real
operator|+
literal|"  at offset "
operator|+
name|source
operator|.
name|getPosition
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|long
name|numAsLong
init|=
name|number
operator|.
name|longValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|numAsLong
operator|>
name|Integer
operator|.
name|MAX_VALUE
operator|||
name|numAsLong
operator|<
name|Integer
operator|.
name|MIN_VALUE
condition|)
block|{
name|addValidationError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_SYNTAX_NUMERIC_RANGE
argument_list|,
literal|"Numeric is too long or too small: "
operator|+
name|numAsLong
operator|+
literal|"  at offset "
operator|+
name|source
operator|.
name|getPosition
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|result
operator|instanceof
name|COSDictionary
condition|)
block|{
name|COSDictionary
name|dic
init|=
operator|(
name|COSDictionary
operator|)
name|result
decl_stmt|;
if|if
condition|(
name|dic
operator|.
name|size
argument_list|()
operator|>
name|MAX_DICT_ENTRIES
condition|)
block|{
name|addValidationError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_SYNTAX_TOO_MANY_ENTRIES
argument_list|,
literal|"Too Many Entries In Dictionary at offset "
operator|+
name|source
operator|.
name|getPosition
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|protected
name|COSBase
name|parseObjectDynamically
parameter_list|(
name|long
name|objNr
parameter_list|,
name|int
name|objGenNr
parameter_list|,
name|boolean
name|requireExistingNotCompressedObj
parameter_list|)
throws|throws
name|IOException
block|{
comment|// ---- create object key and get object (container) from pool
specifier|final
name|COSObjectKey
name|objKey
init|=
operator|new
name|COSObjectKey
argument_list|(
name|objNr
argument_list|,
name|objGenNr
argument_list|)
decl_stmt|;
specifier|final
name|COSObject
name|pdfObject
init|=
name|document
operator|.
name|getObjectFromPool
argument_list|(
name|objKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|pdfObject
operator|.
name|getObject
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// not previously parsed
comment|// ---- read offset or object stream object number from xref table
name|Long
name|offsetOrObjstmObNr
init|=
name|xrefTrailerResolver
operator|.
name|getXrefTable
argument_list|()
operator|.
name|get
argument_list|(
name|objKey
argument_list|)
decl_stmt|;
comment|// sanity test to circumvent loops with broken documents
if|if
condition|(
name|requireExistingNotCompressedObj
operator|&&
operator|(
operator|(
name|offsetOrObjstmObNr
operator|==
literal|null
operator|)
operator|)
condition|)
block|{
name|addValidationError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_SYNTAX_MISSING_OFFSET
argument_list|,
literal|"Object must be defined and must not be compressed object: "
operator|+
name|objKey
operator|.
name|getNumber
argument_list|()
operator|+
literal|":"
operator|+
name|objKey
operator|.
name|getGeneration
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SyntaxValidationException
argument_list|(
literal|"Object must be defined and must not be compressed object: "
operator|+
name|objKey
operator|.
name|getNumber
argument_list|()
operator|+
literal|":"
operator|+
name|objKey
operator|.
name|getGeneration
argument_list|()
argument_list|,
name|validationResult
argument_list|)
throw|;
block|}
if|if
condition|(
name|offsetOrObjstmObNr
operator|==
literal|null
condition|)
block|{
comment|// not defined object -> NULL object (Spec. 1.7, chap. 3.2.9)
name|pdfObject
operator|.
name|setObject
argument_list|(
name|COSNull
operator|.
name|NULL
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|offsetOrObjstmObNr
operator|==
literal|0
condition|)
block|{
name|addValidationError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_SYNTAX_INVALID_OFFSET
argument_list|,
literal|"Object {"
operator|+
name|objKey
operator|.
name|getNumber
argument_list|()
operator|+
literal|":"
operator|+
name|objKey
operator|.
name|getGeneration
argument_list|()
operator|+
literal|"} has an offset of 0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|offsetOrObjstmObNr
operator|>
literal|0
condition|)
block|{
comment|// offset of indirect object in file
comment|// ---- go to object start
name|source
operator|.
name|seek
argument_list|(
name|offsetOrObjstmObNr
argument_list|)
expr_stmt|;
comment|// ---- we must have an indirect object
name|long
name|readObjNr
decl_stmt|;
name|int
name|readObjGen
decl_stmt|;
name|long
name|offset
init|=
name|source
operator|.
name|getPosition
argument_list|()
decl_stmt|;
name|String
name|line
init|=
name|readLine
argument_list|()
decl_stmt|;
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(\\d+)\\s(\\d+)\\sobj"
argument_list|)
decl_stmt|;
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|readObjNr
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|readObjGen
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addValidationError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_SYNTAX_OBJ_DELIMITER
argument_list|,
literal|"Single space expected [offset="
operator|+
name|offset
operator|+
literal|"; key="
operator|+
name|offsetOrObjstmObNr
operator|.
name|toString
argument_list|()
operator|+
literal|"; line="
operator|+
name|line
operator|+
literal|"; object="
operator|+
name|pdfObject
operator|.
name|toString
argument_list|()
operator|+
literal|"]"
argument_list|)
argument_list|)
expr_stmt|;
comment|// reset source cursor to read object information
name|source
operator|.
name|seek
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|readObjNr
operator|=
name|readObjectNumber
argument_list|()
expr_stmt|;
name|readObjGen
operator|=
name|readGenerationNumber
argument_list|()
expr_stmt|;
name|skipSpaces
argument_list|()
expr_stmt|;
comment|// skip spaces between Object Generation number and the 'obj' keyword
for|for
control|(
name|char
name|c
range|:
name|OBJ_MARKER
control|)
block|{
if|if
condition|(
name|source
operator|.
name|read
argument_list|()
operator|!=
name|c
condition|)
block|{
name|addValidationError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_SYNTAX_OBJ_DELIMITER
argument_list|,
literal|"Expected pattern '"
operator|+
operator|new
name|String
argument_list|(
name|OBJ_MARKER
argument_list|)
operator|+
literal|" but missed at character '"
operator|+
name|c
operator|+
literal|"'"
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SyntaxValidationException
argument_list|(
literal|"Expected pattern '"
operator|+
operator|new
name|String
argument_list|(
name|OBJ_MARKER
argument_list|)
operator|+
literal|" but missed at character '"
operator|+
name|c
operator|+
literal|"'"
argument_list|,
name|validationResult
argument_list|)
throw|;
block|}
block|}
block|}
comment|// ---- consistency check
if|if
condition|(
operator|(
name|readObjNr
operator|!=
name|objKey
operator|.
name|getNumber
argument_list|()
operator|)
operator|||
operator|(
name|readObjGen
operator|!=
name|objKey
operator|.
name|getGeneration
argument_list|()
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"XREF for "
operator|+
name|objKey
operator|.
name|getNumber
argument_list|()
operator|+
literal|":"
operator|+
name|objKey
operator|.
name|getGeneration
argument_list|()
operator|+
literal|" points to wrong object: "
operator|+
name|readObjNr
operator|+
literal|":"
operator|+
name|readObjGen
argument_list|)
throw|;
block|}
name|skipSpaces
argument_list|()
expr_stmt|;
name|COSBase
name|pb
init|=
name|parseDirObject
argument_list|()
decl_stmt|;
name|skipSpaces
argument_list|()
expr_stmt|;
name|long
name|endObjectOffset
init|=
name|source
operator|.
name|getPosition
argument_list|()
decl_stmt|;
name|String
name|endObjectKey
init|=
name|readString
argument_list|()
decl_stmt|;
if|if
condition|(
name|endObjectKey
operator|.
name|equals
argument_list|(
literal|"stream"
argument_list|)
condition|)
block|{
name|source
operator|.
name|seek
argument_list|(
name|endObjectOffset
argument_list|)
expr_stmt|;
if|if
condition|(
name|pb
operator|instanceof
name|COSDictionary
condition|)
block|{
name|COSStream
name|stream
init|=
name|parseCOSStream
argument_list|(
operator|(
name|COSDictionary
operator|)
name|pb
argument_list|)
decl_stmt|;
if|if
condition|(
name|securityHandler
operator|!=
literal|null
condition|)
block|{
name|securityHandler
operator|.
name|decryptStream
argument_list|(
name|stream
argument_list|,
name|objNr
argument_list|,
name|objGenNr
argument_list|)
expr_stmt|;
block|}
name|pb
operator|=
name|stream
expr_stmt|;
block|}
else|else
block|{
comment|// this is not legal
comment|// the combination of a dict and the stream/endstream forms a complete stream object
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Stream not preceded by dictionary (offset: "
operator|+
name|offsetOrObjstmObNr
operator|+
literal|")."
argument_list|)
throw|;
block|}
name|skipSpaces
argument_list|()
expr_stmt|;
name|endObjectOffset
operator|=
name|source
operator|.
name|getPosition
argument_list|()
expr_stmt|;
name|endObjectKey
operator|=
name|readString
argument_list|()
expr_stmt|;
comment|// we have case with a second 'endstream' before endobj
if|if
condition|(
operator|!
name|endObjectKey
operator|.
name|startsWith
argument_list|(
literal|"endobj"
argument_list|)
condition|)
block|{
if|if
condition|(
name|endObjectKey
operator|.
name|startsWith
argument_list|(
literal|"endstream"
argument_list|)
condition|)
block|{
name|endObjectKey
operator|=
name|endObjectKey
operator|.
name|substring
argument_list|(
literal|9
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|endObjectKey
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// no other characters in extra endstream line
name|endObjectKey
operator|=
name|readString
argument_list|()
expr_stmt|;
comment|// read next line
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|securityHandler
operator|!=
literal|null
condition|)
block|{
name|securityHandler
operator|.
name|decrypt
argument_list|(
name|pb
argument_list|,
name|objNr
argument_list|,
name|objGenNr
argument_list|)
expr_stmt|;
block|}
name|pdfObject
operator|.
name|setObject
argument_list|(
name|pb
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|endObjectKey
operator|.
name|startsWith
argument_list|(
literal|"endobj"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Object ("
operator|+
name|readObjNr
operator|+
literal|":"
operator|+
name|readObjGen
operator|+
literal|") at offset "
operator|+
name|offsetOrObjstmObNr
operator|+
literal|" does not end with 'endobj'."
argument_list|)
throw|;
block|}
else|else
block|{
name|offset
operator|=
name|source
operator|.
name|getPosition
argument_list|()
expr_stmt|;
name|source
operator|.
name|seek
argument_list|(
name|endObjectOffset
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|nextIsEOL
argument_list|()
condition|)
block|{
name|addValidationError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|PreflightConstants
operator|.
name|ERROR_SYNTAX_OBJ_DELIMITER
argument_list|,
literal|"EOL expected before the 'endobj' keyword at offset "
operator|+
name|source
operator|.
name|getPosition
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|source
operator|.
name|seek
argument_list|(
name|offset
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|nextIsEOL
argument_list|()
condition|)
block|{
name|addValidationError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|PreflightConstants
operator|.
name|ERROR_SYNTAX_OBJ_DELIMITER
argument_list|,
literal|"EOL expected after the 'endobj' keyword at offset "
operator|+
name|source
operator|.
name|getPosition
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// xref value is object nr of object stream containing object to be parsed;
comment|// since our object was not found it means object stream was not parsed so far
specifier|final
name|int
name|objstmObjNr
init|=
call|(
name|int
call|)
argument_list|(
operator|-
name|offsetOrObjstmObNr
argument_list|)
decl_stmt|;
specifier|final
name|COSBase
name|objstmBaseObj
init|=
name|parseObjectDynamically
argument_list|(
name|objstmObjNr
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|objstmBaseObj
operator|instanceof
name|COSStream
condition|)
block|{
comment|// parse object stream
name|PDFObjectStreamParser
name|parser
init|=
operator|new
name|PDFObjectStreamParser
argument_list|(
operator|(
name|COSStream
operator|)
name|objstmBaseObj
argument_list|,
name|document
argument_list|)
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|()
expr_stmt|;
comment|// get set of object numbers referenced for this object stream
specifier|final
name|Set
argument_list|<
name|Long
argument_list|>
name|refObjNrs
init|=
name|xrefTrailerResolver
operator|.
name|getContainedObjectNumbers
argument_list|(
name|objstmObjNr
argument_list|)
decl_stmt|;
comment|// register all objects which are referenced to be contained in object stream
for|for
control|(
name|COSObject
name|next
range|:
name|parser
operator|.
name|getObjects
argument_list|()
control|)
block|{
name|COSObjectKey
name|stmObjKey
init|=
operator|new
name|COSObjectKey
argument_list|(
name|next
argument_list|)
decl_stmt|;
if|if
condition|(
name|refObjNrs
operator|.
name|contains
argument_list|(
name|stmObjKey
operator|.
name|getNumber
argument_list|()
argument_list|)
condition|)
block|{
name|COSObject
name|stmObj
init|=
name|document
operator|.
name|getObjectFromPool
argument_list|(
name|stmObjKey
argument_list|)
decl_stmt|;
name|stmObj
operator|.
name|setObject
argument_list|(
name|next
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|pdfObject
operator|.
name|getObject
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|lastIndexOf
parameter_list|(
specifier|final
name|char
index|[]
name|pattern
parameter_list|,
specifier|final
name|byte
index|[]
name|buf
parameter_list|,
specifier|final
name|int
name|endOff
parameter_list|)
block|{
name|int
name|offset
init|=
name|super
operator|.
name|lastIndexOf
argument_list|(
name|pattern
argument_list|,
name|buf
argument_list|,
name|endOff
argument_list|)
decl_stmt|;
if|if
condition|(
name|offset
operator|>
literal|0
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|pattern
argument_list|,
name|EOF_MARKER
argument_list|)
condition|)
block|{
comment|// this is the offset of the last %%EOF sequence.
comment|// nothing should be present after this sequence.
name|int
name|tmpOffset
init|=
name|offset
operator|+
name|pattern
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|tmpOffset
operator|!=
name|buf
operator|.
name|length
condition|)
block|{
comment|// EOL is authorized
if|if
condition|(
operator|(
name|buf
operator|.
name|length
operator|-
name|tmpOffset
operator|)
operator|>
literal|2
operator|||
operator|(
name|buf
operator|.
name|length
operator|-
name|tmpOffset
operator|==
literal|2
operator|&&
operator|(
name|buf
index|[
name|tmpOffset
index|]
operator|!=
literal|13
operator|||
name|buf
index|[
name|tmpOffset
operator|+
literal|1
index|]
operator|!=
literal|10
operator|)
operator|)
operator|||
operator|(
name|buf
operator|.
name|length
operator|-
name|tmpOffset
operator|==
literal|1
operator|&&
operator|(
name|buf
index|[
name|tmpOffset
index|]
operator|!=
literal|13
operator|&&
name|buf
index|[
name|tmpOffset
index|]
operator|!=
literal|10
operator|)
operator|)
condition|)
block|{
name|long
name|position
decl_stmt|;
try|try
block|{
name|position
operator|=
name|source
operator|.
name|getPosition
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|excpetion
parameter_list|)
block|{
name|position
operator|=
name|Long
operator|.
name|MIN_VALUE
expr_stmt|;
block|}
name|addValidationError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_SYNTAX_TRAILER_EOF
argument_list|,
literal|"File contains data after the last %%EOF sequence at offset "
operator|+
name|position
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|offset
return|;
block|}
block|}
end_class

end_unit

