begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|ValidationResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|ValidationResult
operator|.
name|ValidationError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|exception
operator|.
name|SyntaxValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_class
specifier|public
class|class
name|XmlResultParser
block|{
specifier|public
name|Element
name|validate
parameter_list|(
name|DataSource
name|source
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|Document
name|rdocument
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newDocumentBuilder
argument_list|()
operator|.
name|newDocument
argument_list|()
decl_stmt|;
return|return
name|validate
argument_list|(
name|rdocument
argument_list|,
name|source
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to init document builder"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Element
name|validate
parameter_list|(
name|Document
name|rdocument
parameter_list|,
name|DataSource
name|source
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|pdfType
init|=
literal|null
decl_stmt|;
name|ValidationResult
name|result
decl_stmt|;
name|long
name|before
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
name|PreflightParser
name|parser
init|=
operator|new
name|PreflightParser
argument_list|(
name|source
argument_list|)
decl_stmt|;
try|try
block|{
name|parser
operator|.
name|parse
argument_list|()
expr_stmt|;
name|PreflightDocument
name|document
init|=
name|parser
operator|.
name|getPreflightDocument
argument_list|()
decl_stmt|;
name|document
operator|.
name|validate
argument_list|()
expr_stmt|;
name|pdfType
operator|=
name|document
operator|.
name|getSpecification
argument_list|()
operator|.
name|getFname
argument_list|()
expr_stmt|;
name|result
operator|=
name|document
operator|.
name|getResult
argument_list|()
expr_stmt|;
name|document
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SyntaxValidationException
name|e
parameter_list|)
block|{
name|result
operator|=
name|e
operator|.
name|getResult
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|long
name|after
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
return|return
name|generateFailureResponse
argument_list|(
name|rdocument
argument_list|,
name|source
operator|.
name|getName
argument_list|()
argument_list|,
name|after
operator|-
name|before
argument_list|,
name|pdfType
argument_list|,
name|e
argument_list|)
return|;
block|}
name|long
name|after
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|Element
name|preflight
init|=
name|generateResponseSkeleton
argument_list|(
name|rdocument
argument_list|,
name|source
operator|.
name|getName
argument_list|()
argument_list|,
name|after
operator|-
name|before
argument_list|)
decl_stmt|;
comment|// valid ?
name|Element
name|valid
init|=
name|rdocument
operator|.
name|createElement
argument_list|(
literal|"isValid"
argument_list|)
decl_stmt|;
name|valid
operator|.
name|setAttribute
argument_list|(
literal|"type"
argument_list|,
name|pdfType
argument_list|)
expr_stmt|;
name|valid
operator|.
name|setTextContent
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
name|preflight
operator|.
name|appendChild
argument_list|(
name|valid
argument_list|)
expr_stmt|;
return|return
name|preflight
return|;
block|}
else|else
block|{
name|Element
name|preflight
init|=
name|generateResponseSkeleton
argument_list|(
name|rdocument
argument_list|,
name|source
operator|.
name|getName
argument_list|()
argument_list|,
name|after
operator|-
name|before
argument_list|)
decl_stmt|;
comment|// valid ?
name|createResponseWithError
argument_list|(
name|rdocument
argument_list|,
name|pdfType
argument_list|,
name|result
argument_list|,
name|preflight
argument_list|)
expr_stmt|;
return|return
name|preflight
return|;
block|}
block|}
specifier|protected
name|void
name|createResponseWithError
parameter_list|(
name|Document
name|rdocument
parameter_list|,
name|String
name|pdfType
parameter_list|,
name|ValidationResult
name|result
parameter_list|,
name|Element
name|preflight
parameter_list|)
block|{
name|Element
name|valid
init|=
name|rdocument
operator|.
name|createElement
argument_list|(
literal|"isValid"
argument_list|)
decl_stmt|;
name|valid
operator|.
name|setAttribute
argument_list|(
literal|"type"
argument_list|,
name|pdfType
argument_list|)
expr_stmt|;
name|valid
operator|.
name|setTextContent
argument_list|(
literal|"false"
argument_list|)
expr_stmt|;
name|preflight
operator|.
name|appendChild
argument_list|(
name|valid
argument_list|)
expr_stmt|;
comment|// errors list
name|Element
name|errors
init|=
name|rdocument
operator|.
name|createElement
argument_list|(
literal|"errors"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|ValidationError
argument_list|,
name|Integer
argument_list|>
name|cleaned
init|=
name|cleanErrorList
argument_list|(
name|result
operator|.
name|getErrorsList
argument_list|()
argument_list|)
decl_stmt|;
name|preflight
operator|.
name|appendChild
argument_list|(
name|errors
argument_list|)
expr_stmt|;
name|int
name|totalCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ValidationError
argument_list|,
name|Integer
argument_list|>
name|entry
range|:
name|cleaned
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Element
name|error
init|=
name|rdocument
operator|.
name|createElement
argument_list|(
literal|"error"
argument_list|)
decl_stmt|;
name|int
name|count
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|error
operator|.
name|setAttribute
argument_list|(
literal|"count"
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"%d"
argument_list|,
name|count
argument_list|)
argument_list|)
expr_stmt|;
name|totalCount
operator|+=
name|count
expr_stmt|;
name|Element
name|code
init|=
name|rdocument
operator|.
name|createElement
argument_list|(
literal|"code"
argument_list|)
decl_stmt|;
name|ValidationError
name|ve
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|code
operator|.
name|setTextContent
argument_list|(
name|ve
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
name|error
operator|.
name|appendChild
argument_list|(
name|code
argument_list|)
expr_stmt|;
name|Element
name|detail
init|=
name|rdocument
operator|.
name|createElement
argument_list|(
literal|"details"
argument_list|)
decl_stmt|;
name|detail
operator|.
name|setTextContent
argument_list|(
name|ve
operator|.
name|getDetails
argument_list|()
argument_list|)
expr_stmt|;
name|error
operator|.
name|appendChild
argument_list|(
name|detail
argument_list|)
expr_stmt|;
if|if
condition|(
name|ve
operator|.
name|getPageNumber
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Element
name|page
init|=
name|rdocument
operator|.
name|createElement
argument_list|(
literal|"page"
argument_list|)
decl_stmt|;
name|page
operator|.
name|setTextContent
argument_list|(
name|ve
operator|.
name|getPageNumber
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|error
operator|.
name|appendChild
argument_list|(
name|page
argument_list|)
expr_stmt|;
block|}
name|errors
operator|.
name|appendChild
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
name|errors
operator|.
name|setAttribute
argument_list|(
literal|"count"
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"%d"
argument_list|,
name|totalCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Map
argument_list|<
name|ValidationError
argument_list|,
name|Integer
argument_list|>
name|cleanErrorList
parameter_list|(
name|List
argument_list|<
name|ValidationError
argument_list|>
name|errors
parameter_list|)
block|{
name|Map
argument_list|<
name|ValidationError
argument_list|,
name|Integer
argument_list|>
name|cleaned
init|=
operator|new
name|HashMap
argument_list|<
name|ValidationError
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|errors
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ValidationError
name|ve
range|:
name|errors
control|)
block|{
name|Integer
name|found
init|=
name|cleaned
operator|.
name|get
argument_list|(
name|ve
argument_list|)
decl_stmt|;
if|if
condition|(
name|found
operator|!=
literal|null
condition|)
block|{
name|cleaned
operator|.
name|put
argument_list|(
name|ve
argument_list|,
name|found
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cleaned
operator|.
name|put
argument_list|(
name|ve
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|cleaned
return|;
block|}
specifier|protected
name|Element
name|generateFailureResponse
parameter_list|(
name|Document
name|rdocument
parameter_list|,
name|String
name|name
parameter_list|,
name|long
name|duration
parameter_list|,
name|String
name|pdfType
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|Element
name|preflight
init|=
name|generateResponseSkeleton
argument_list|(
name|rdocument
argument_list|,
name|name
argument_list|,
name|duration
argument_list|)
decl_stmt|;
comment|// valid ?
name|Element
name|valid
init|=
name|rdocument
operator|.
name|createElement
argument_list|(
literal|"isValid"
argument_list|)
decl_stmt|;
name|valid
operator|.
name|setAttribute
argument_list|(
literal|"type"
argument_list|,
name|pdfType
argument_list|)
expr_stmt|;
name|valid
operator|.
name|setTextContent
argument_list|(
literal|"false"
argument_list|)
expr_stmt|;
name|preflight
operator|.
name|appendChild
argument_list|(
name|valid
argument_list|)
expr_stmt|;
comment|// exception
name|Element
name|exception
init|=
name|rdocument
operator|.
name|createElement
argument_list|(
literal|"exceptionThrown"
argument_list|)
decl_stmt|;
name|Element
name|message
init|=
name|rdocument
operator|.
name|createElement
argument_list|(
literal|"message"
argument_list|)
decl_stmt|;
name|message
operator|.
name|setTextContent
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|sw
argument_list|)
decl_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|(
name|pw
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|Element
name|stack
init|=
name|rdocument
operator|.
name|createElement
argument_list|(
literal|"stackTrace"
argument_list|)
decl_stmt|;
name|stack
operator|.
name|setTextContent
argument_list|(
name|sw
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|exception
operator|.
name|appendChild
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|exception
operator|.
name|appendChild
argument_list|(
name|stack
argument_list|)
expr_stmt|;
name|preflight
operator|.
name|appendChild
argument_list|(
name|exception
argument_list|)
expr_stmt|;
return|return
name|preflight
return|;
block|}
specifier|protected
name|Element
name|generateResponseSkeleton
parameter_list|(
name|Document
name|rdocument
parameter_list|,
name|String
name|name
parameter_list|,
name|long
name|duration
parameter_list|)
block|{
name|Element
name|preflight
init|=
name|rdocument
operator|.
name|createElement
argument_list|(
literal|"preflight"
argument_list|)
decl_stmt|;
name|preflight
operator|.
name|setAttribute
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
expr_stmt|;
comment|// duration
name|Element
name|eduration
init|=
name|rdocument
operator|.
name|createElement
argument_list|(
literal|"executionTimeMS"
argument_list|)
decl_stmt|;
name|eduration
operator|.
name|setTextContent
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%d"
argument_list|,
name|duration
argument_list|)
argument_list|)
expr_stmt|;
name|preflight
operator|.
name|appendChild
argument_list|(
name|eduration
argument_list|)
expr_stmt|;
comment|// return skeleton
return|return
name|preflight
return|;
block|}
block|}
end_class

end_unit

