begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_comment
comment|/**  * Contains a stack of objects to follow the validation path. Ex : - if the ValidationProcess computes a Type1Font  * object, this object should contains a path like PDPage|PDResources|PDFont. - if the ValidationProcess computes a  * XObject object, this object could contains a path like PDPage|PDResources|PDFontType3|PDResource|PDXObject.  */
end_comment

begin_class
specifier|public
class|class
name|PreflightPath
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|private
name|Stack
name|objectPath
init|=
operator|new
name|Stack
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|private
name|Stack
argument_list|<
name|Class
argument_list|>
name|classObjPath
init|=
operator|new
name|Stack
argument_list|<
name|Class
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|boolean
name|pushObject
parameter_list|(
name|Object
name|pathElement
parameter_list|)
block|{
name|boolean
name|pushed
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|pathElement
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|objectPath
operator|.
name|push
argument_list|(
name|pathElement
argument_list|)
expr_stmt|;
name|this
operator|.
name|classObjPath
operator|.
name|push
argument_list|(
name|pathElement
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|pushed
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|pushed
return|;
block|}
comment|/**      * Return the object at the given position. The object must be an instance of the given class.      *       * @param position      * @param expectedType      * @return the object at the given position.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getPathElement
parameter_list|(
name|int
name|position
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|expectedType
parameter_list|)
block|{
if|if
condition|(
name|position
operator|<
literal|0
operator|||
name|position
operator|>=
name|this
operator|.
name|objectPath
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|(
name|T
operator|)
name|this
operator|.
name|objectPath
operator|.
name|get
argument_list|(
name|position
argument_list|)
return|;
block|}
comment|/**      * Return the index of the first object that have the given type.      *       * @param type      * @return the object position, -1 if the type doesn't exist in the stack.      */
specifier|public
parameter_list|<
name|T
parameter_list|>
name|int
name|getClosestTypePosition
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
name|this
operator|.
name|objectPath
operator|.
name|size
argument_list|()
init|;
name|i
operator|--
operator|>
literal|0
condition|;
control|)
block|{
if|if
condition|(
name|this
operator|.
name|classObjPath
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getClosestPathElement
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|getPathElement
argument_list|(
name|getClosestTypePosition
argument_list|(
name|type
argument_list|)
argument_list|,
name|type
argument_list|)
return|;
block|}
comment|/**      * Looks at the object at the top of this stack without removing it from the stack.      *       * @return the object at the top of the stack.      */
specifier|public
name|Object
name|peek
parameter_list|()
block|{
return|return
name|this
operator|.
name|objectPath
operator|.
name|peek
argument_list|()
return|;
block|}
specifier|public
name|Object
name|pop
parameter_list|()
block|{
name|this
operator|.
name|classObjPath
operator|.
name|pop
argument_list|()
expr_stmt|;
return|return
name|this
operator|.
name|objectPath
operator|.
name|pop
argument_list|()
return|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|classObjPath
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|objectPath
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|this
operator|.
name|objectPath
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|this
operator|.
name|objectPath
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isExpectedType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|Class
name|knownType
init|=
name|this
operator|.
name|classObjPath
operator|.
name|peek
argument_list|()
decl_stmt|;
return|return
operator|(
name|knownType
operator|!=
literal|null
operator|&&
operator|(
name|type
operator|.
name|equals
argument_list|(
name|knownType
argument_list|)
operator|||
name|type
operator|.
name|isAssignableFrom
argument_list|(
name|knownType
argument_list|)
operator|)
operator|)
return|;
block|}
block|}
end_class

end_unit

