begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|content
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|ERROR_GRAPHIC_INVALID_COLOR_SPACE_CMYK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|ERROR_GRAPHIC_INVALID_COLOR_SPACE_MISSING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|ERROR_GRAPHIC_INVALID_COLOR_SPACE_RGB
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|ERROR_GRAPHIC_TOO_MANY_GRAPHIC_STATES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|ERROR_GRAPHIC_UNEXPECTED_VALUE_FOR_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|MAX_GRAPHIC_STATES
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|color
operator|.
name|ICC_ColorSpace
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDCIEBasedColorSpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDColorSpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDICCBased
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|ValidationResult
operator|.
name|ValidationError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|exception
operator|.
name|ValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|graphic
operator|.
name|ColorSpaceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|graphic
operator|.
name|ColorSpaceHelperFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|graphic
operator|.
name|ColorSpaceHelperFactory
operator|.
name|ColorSpaceRestriction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|graphic
operator|.
name|ColorSpaces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|graphic
operator|.
name|ICCProfileWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|utils
operator|.
name|COSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|utils
operator|.
name|FilterHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|utils
operator|.
name|RenderingIntents
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|PDFOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|PDFStreamEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|BeginText
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|Concatenate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|EndText
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|GRestore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|GSave
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|Invoke
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|MoveText
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|MoveTextSetLeading
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|NextLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|OperatorProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|SetCharSpacing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|SetHorizontalTextScaling
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|SetLineCapStyle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|SetLineDashPattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|SetLineJoinStyle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|SetLineWidth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|SetMatrix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|SetNonStrokingDeviceCMYKColor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|SetNonStrokingColor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|SetNonStrokingColorSpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|SetNonStrokingDeviceRGBColor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|SetStrokingDeviceCMYKColor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|SetStrokingColor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|SetStrokingColorSpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|SetStrokingDeviceRGBColor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|SetTextFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|SetTextLeading
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|SetTextRenderingMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|SetTextRise
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|SetWordSpacing
import|;
end_import

begin_comment
comment|/**  * This class inherits from org.apache.pdfbox.util.PDFStreamEngine to allow the validation of specific rules in  * ContentStream.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|ContentStreamEngine
extends|extends
name|PDFStreamEngine
block|{
specifier|private
enum|enum
name|ColorSpaceType
block|{
name|RGB
block|,
name|CMYK
block|,
name|ALL
block|}
specifier|protected
name|PreflightContext
name|context
init|=
literal|null
decl_stmt|;
specifier|protected
name|COSDocument
name|cosDocument
init|=
literal|null
decl_stmt|;
specifier|protected
name|PDPage
name|processeedPage
init|=
literal|null
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|OperatorProcessor
argument_list|>
name|contentStreamEngineOperators
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|OperatorProcessor
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|ContentStreamEngine
parameter_list|(
name|PreflightContext
name|_context
parameter_list|,
name|PDPage
name|_page
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|_context
expr_stmt|;
name|this
operator|.
name|cosDocument
operator|=
name|_context
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocument
argument_list|()
expr_stmt|;
name|this
operator|.
name|processeedPage
operator|=
name|_page
expr_stmt|;
comment|// Graphics operators
name|registerOperatorProcessor
argument_list|(
literal|"w"
argument_list|,
operator|new
name|SetLineWidth
argument_list|()
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"cm"
argument_list|,
operator|new
name|Concatenate
argument_list|()
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"CS"
argument_list|,
operator|new
name|SetStrokingColorSpace
argument_list|()
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"cs"
argument_list|,
operator|new
name|SetNonStrokingColorSpace
argument_list|()
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"d"
argument_list|,
operator|new
name|SetLineDashPattern
argument_list|()
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"Do"
argument_list|,
operator|new
name|Invoke
argument_list|()
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"j"
argument_list|,
operator|new
name|SetLineJoinStyle
argument_list|()
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"J"
argument_list|,
operator|new
name|SetLineCapStyle
argument_list|()
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"K"
argument_list|,
operator|new
name|SetStrokingDeviceCMYKColor
argument_list|()
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"k"
argument_list|,
operator|new
name|SetNonStrokingDeviceCMYKColor
argument_list|()
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"rg"
argument_list|,
operator|new
name|SetNonStrokingDeviceRGBColor
argument_list|()
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"RG"
argument_list|,
operator|new
name|SetStrokingDeviceRGBColor
argument_list|()
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"SC"
argument_list|,
operator|new
name|SetStrokingColor
argument_list|()
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"SCN"
argument_list|,
operator|new
name|SetStrokingColor
argument_list|()
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"sc"
argument_list|,
operator|new
name|SetNonStrokingColor
argument_list|()
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"scn"
argument_list|,
operator|new
name|SetNonStrokingColor
argument_list|()
argument_list|)
expr_stmt|;
comment|// Graphics state
name|registerOperatorProcessor
argument_list|(
literal|"Q"
argument_list|,
operator|new
name|GRestore
argument_list|()
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"q"
argument_list|,
operator|new
name|GSave
argument_list|()
argument_list|)
expr_stmt|;
comment|// Text operators
name|registerOperatorProcessor
argument_list|(
literal|"BT"
argument_list|,
operator|new
name|BeginText
argument_list|()
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"ET"
argument_list|,
operator|new
name|EndText
argument_list|()
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"Tf"
argument_list|,
operator|new
name|SetTextFont
argument_list|()
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"Tr"
argument_list|,
operator|new
name|SetTextRenderingMode
argument_list|()
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"Tm"
argument_list|,
operator|new
name|SetMatrix
argument_list|()
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"Td"
argument_list|,
operator|new
name|MoveText
argument_list|()
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"T*"
argument_list|,
operator|new
name|NextLine
argument_list|()
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"TD"
argument_list|,
operator|new
name|MoveTextSetLeading
argument_list|()
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"Tc"
argument_list|,
operator|new
name|SetCharSpacing
argument_list|()
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"TL"
argument_list|,
operator|new
name|SetTextLeading
argument_list|()
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"Ts"
argument_list|,
operator|new
name|SetTextRise
argument_list|()
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"Tw"
argument_list|,
operator|new
name|SetWordSpacing
argument_list|()
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"Tz"
argument_list|,
operator|new
name|SetHorizontalTextScaling
argument_list|()
argument_list|)
expr_stmt|;
comment|/*          * Do not use the PDFBox Operator, because of the PageDrawer class cast Or because the Operator doesn't exist          */
name|StubOperator
name|stubOp
init|=
operator|new
name|StubOperator
argument_list|()
decl_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"l"
argument_list|,
name|stubOp
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"re"
argument_list|,
name|stubOp
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"c"
argument_list|,
name|stubOp
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"y"
argument_list|,
name|stubOp
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"v"
argument_list|,
name|stubOp
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"n"
argument_list|,
name|stubOp
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"BI"
argument_list|,
name|stubOp
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"ID"
argument_list|,
name|stubOp
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"EI"
argument_list|,
name|stubOp
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"m"
argument_list|,
name|stubOp
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"W*"
argument_list|,
name|stubOp
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"W"
argument_list|,
name|stubOp
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"h"
argument_list|,
name|stubOp
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"Tj"
argument_list|,
name|stubOp
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"TJ"
argument_list|,
name|stubOp
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"'"
argument_list|,
name|stubOp
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"\""
argument_list|,
name|stubOp
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"b"
argument_list|,
name|stubOp
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"B"
argument_list|,
name|stubOp
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"b*"
argument_list|,
name|stubOp
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"B*"
argument_list|,
name|stubOp
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"BDC"
argument_list|,
name|stubOp
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"BMC"
argument_list|,
name|stubOp
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"DP"
argument_list|,
name|stubOp
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"EMC"
argument_list|,
name|stubOp
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"BX"
argument_list|,
name|stubOp
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"EX"
argument_list|,
name|stubOp
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"d0"
argument_list|,
name|stubOp
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"d1"
argument_list|,
name|stubOp
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"f"
argument_list|,
name|stubOp
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"F"
argument_list|,
name|stubOp
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"f*"
argument_list|,
name|stubOp
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"g"
argument_list|,
name|stubOp
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"G"
argument_list|,
name|stubOp
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"M"
argument_list|,
name|stubOp
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"MP"
argument_list|,
name|stubOp
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"gs"
argument_list|,
name|stubOp
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"h"
argument_list|,
name|stubOp
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"i"
argument_list|,
name|stubOp
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"ri"
argument_list|,
name|stubOp
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"s"
argument_list|,
name|stubOp
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"S"
argument_list|,
name|stubOp
argument_list|)
expr_stmt|;
name|registerOperatorProcessor
argument_list|(
literal|"sh"
argument_list|,
name|stubOp
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|registerOperatorProcessor
parameter_list|(
name|String
name|operator
parameter_list|,
name|OperatorProcessor
name|op
parameter_list|)
block|{
name|super
operator|.
name|registerOperatorProcessor
argument_list|(
name|operator
argument_list|,
name|op
argument_list|)
expr_stmt|;
name|contentStreamEngineOperators
operator|.
name|put
argument_list|(
name|operator
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
comment|/**      * Check operands of the "ri" operator. Operands must exist in the RenderingIntent list.      * (net.awl.edoc.pdfa.validation.utils.RenderingIntents)      *       * @param operator      *            the "ri" operator      * @param arguments      *            the "ri" operands      * @throws ContentStreamException      *             ERROR_GRAPHIC_UNEXPECTED_VALUE_FOR_KEY if the operand is invalid      */
specifier|protected
name|void
name|validRenderingIntent
parameter_list|(
name|PDFOperator
name|operator
parameter_list|,
name|List
name|arguments
parameter_list|)
throws|throws
name|ContentStreamException
block|{
if|if
condition|(
literal|"ri"
operator|.
name|equals
argument_list|(
name|operator
operator|.
name|getOperation
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|riArgument0
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|arguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|COSName
condition|)
block|{
name|riArgument0
operator|=
operator|(
operator|(
name|COSName
operator|)
name|arguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|String
condition|)
block|{
name|riArgument0
operator|=
operator|(
name|String
operator|)
name|arguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|RenderingIntents
operator|.
name|contains
argument_list|(
name|riArgument0
argument_list|)
condition|)
block|{
name|registerError
argument_list|(
literal|"Unexpected value '"
operator|+
name|arguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|+
literal|"' for ri operand. "
argument_list|,
name|ERROR_GRAPHIC_UNEXPECTED_VALUE_FOR_KEY
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
comment|/**      * Valid the number of graphic states if the operator is the Save Graphic state operator ("q")      *       * @param operator      * @throws ContentStreamException      */
specifier|protected
name|void
name|validNumberOfGraphicStates
parameter_list|(
name|PDFOperator
name|operator
parameter_list|)
throws|throws
name|ContentStreamException
block|{
if|if
condition|(
literal|"q"
operator|.
name|equals
argument_list|(
name|operator
operator|.
name|getOperation
argument_list|()
argument_list|)
condition|)
block|{
name|int
name|numberOfGraphicStates
init|=
name|this
operator|.
name|getGraphicsStack
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|numberOfGraphicStates
operator|>
name|MAX_GRAPHIC_STATES
condition|)
block|{
name|registerError
argument_list|(
literal|"Too many graphic states"
argument_list|,
name|ERROR_GRAPHIC_TOO_MANY_GRAPHIC_STATES
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
comment|/**      * Throw a ContentStreamException if the LZW filter is used in a InlinedImage.      *       * @param operator the InlinedImage object (BI to EI)      * @throws ContentStreamException      */
specifier|protected
name|void
name|validImageFilter
parameter_list|(
name|PDFOperator
name|operator
parameter_list|)
throws|throws
name|ContentStreamException
block|{
name|COSDictionary
name|dict
init|=
name|operator
operator|.
name|getImageParameters
argument_list|()
decl_stmt|;
comment|/*          * Search a Filter declaration in the InlinedImage dictionary. The LZWDecode Filter is forbidden.          */
name|COSBase
name|filter
init|=
name|dict
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|F
argument_list|,
name|COSName
operator|.
name|FILTER
argument_list|)
decl_stmt|;
name|FilterHelper
operator|.
name|isAuthorizedFilter
argument_list|(
name|context
argument_list|,
name|COSUtils
operator|.
name|getAsString
argument_list|(
name|filter
argument_list|,
name|this
operator|.
name|context
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocument
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * This method validates if the ColorSpace used by the InlinedImage is consistent with      * the color space defined in OutputIntent dictionaries.      *       * @param operator the InlinedImage object (BI to EI)      * @throws ContentStreamException      */
specifier|protected
name|void
name|validImageColorSpace
parameter_list|(
name|PDFOperator
name|operator
parameter_list|)
throws|throws
name|IOException
block|{
name|COSDictionary
name|dict
init|=
name|operator
operator|.
name|getImageParameters
argument_list|()
decl_stmt|;
name|COSBase
name|csInlinedBase
init|=
name|dict
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|CS
argument_list|)
decl_stmt|;
name|ColorSpaceHelper
name|csHelper
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|csInlinedBase
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|COSUtils
operator|.
name|isString
argument_list|(
name|csInlinedBase
argument_list|,
name|cosDocument
argument_list|)
condition|)
block|{
comment|// In InlinedImage only DeviceGray/RGB/CMYK and restricted Indexed
comment|// color spaces are allowed.
name|String
name|colorSpace
init|=
name|COSUtils
operator|.
name|getAsString
argument_list|(
name|csInlinedBase
argument_list|,
name|cosDocument
argument_list|)
decl_stmt|;
name|ColorSpaces
name|cs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cs
operator|=
name|ColorSpaces
operator|.
name|valueOf
argument_list|(
name|colorSpace
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// The color space is unknown. Try to access the resources dictionary,
comment|// the color space can be a reference.
name|PDColorSpace
name|pdCS
init|=
operator|(
name|PDColorSpace
operator|)
name|this
operator|.
name|getResources
argument_list|()
operator|.
name|getColorSpaces
argument_list|()
operator|.
name|get
argument_list|(
name|colorSpace
argument_list|)
decl_stmt|;
if|if
condition|(
name|pdCS
operator|!=
literal|null
condition|)
block|{
name|cs
operator|=
name|ColorSpaces
operator|.
name|valueOf
argument_list|(
name|pdCS
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|PreflightConfiguration
name|cfg
init|=
name|context
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|ColorSpaceHelperFactory
name|csFact
init|=
name|cfg
operator|.
name|getColorSpaceHelperFact
argument_list|()
decl_stmt|;
name|csHelper
operator|=
name|csFact
operator|.
name|getColorSpaceHelper
argument_list|(
name|context
argument_list|,
name|pdCS
argument_list|,
name|ColorSpaceRestriction
operator|.
name|ONLY_DEVICE
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|cs
operator|==
literal|null
condition|)
block|{
name|registerError
argument_list|(
literal|"The ColorSpace is unknown"
argument_list|,
name|ERROR_GRAPHIC_UNEXPECTED_VALUE_FOR_KEY
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
name|csHelper
operator|==
literal|null
condition|)
block|{
name|PDColorSpace
name|pdCS
init|=
name|PDColorSpace
operator|.
name|create
argument_list|(
name|csInlinedBase
argument_list|)
decl_stmt|;
name|PreflightConfiguration
name|cfg
init|=
name|context
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|ColorSpaceHelperFactory
name|csFact
init|=
name|cfg
operator|.
name|getColorSpaceHelperFact
argument_list|()
decl_stmt|;
name|csHelper
operator|=
name|csFact
operator|.
name|getColorSpaceHelper
argument_list|(
name|context
argument_list|,
name|pdCS
argument_list|,
name|ColorSpaceRestriction
operator|.
name|ONLY_DEVICE
argument_list|)
expr_stmt|;
block|}
name|csHelper
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * This method validates if the ColorOperator can be used with the color space      * defined in OutputIntent dictionaries.      *       * @param operation the color operator      * @throws ContentStreamException      */
specifier|protected
name|void
name|checkColorOperators
parameter_list|(
name|String
name|operation
parameter_list|)
throws|throws
name|ContentStreamException
block|{
name|PDColorSpace
name|cs
init|=
name|getColorSpace
argument_list|(
name|operation
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"rg"
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
operator|||
literal|"RG"
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|validColorSpace
argument_list|(
name|cs
argument_list|,
name|ColorSpaceType
operator|.
name|RGB
argument_list|)
condition|)
block|{
name|registerError
argument_list|(
literal|"The operator \""
operator|+
name|operation
operator|+
literal|"\" can't be used with CMYK Profile"
argument_list|,
name|ERROR_GRAPHIC_INVALID_COLOR_SPACE_RGB
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
literal|"k"
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
operator|||
literal|"K"
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|validColorSpace
argument_list|(
name|cs
argument_list|,
name|ColorSpaceType
operator|.
name|CMYK
argument_list|)
condition|)
block|{
name|registerError
argument_list|(
literal|"The operator \""
operator|+
name|operation
operator|+
literal|"\" can't be used with RGB Profile"
argument_list|,
name|ERROR_GRAPHIC_INVALID_COLOR_SPACE_CMYK
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
literal|"g"
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
operator|||
literal|"G"
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|validColorSpace
argument_list|(
name|cs
argument_list|,
name|ColorSpaceType
operator|.
name|ALL
argument_list|)
condition|)
block|{
name|registerError
argument_list|(
literal|"The operator \""
operator|+
name|operation
operator|+
literal|"\" can't be used without Color Profile"
argument_list|,
name|ERROR_GRAPHIC_INVALID_COLOR_SPACE_MISSING
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
literal|"f"
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
operator|||
literal|"F"
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
operator|||
literal|"f*"
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
operator|||
literal|"B"
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
operator|||
literal|"B*"
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
operator|||
literal|"b"
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
operator|||
literal|"b*"
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|validColorSpace
argument_list|(
name|cs
argument_list|,
name|ColorSpaceType
operator|.
name|ALL
argument_list|)
condition|)
block|{
comment|// The default fill color needs an OutputIntent
name|registerError
argument_list|(
literal|"The operator \""
operator|+
name|operation
operator|+
literal|"\" can't be used without Color Profile"
argument_list|,
name|ERROR_GRAPHIC_INVALID_COLOR_SPACE_MISSING
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
specifier|private
name|boolean
name|validColorSpace
parameter_list|(
name|PDColorSpace
name|colorSpace
parameter_list|,
name|ColorSpaceType
name|expectedType
parameter_list|)
throws|throws
name|ContentStreamException
block|{
if|if
condition|(
name|colorSpace
operator|==
literal|null
condition|)
block|{
return|return
name|validColorSpaceDestOutputProfile
argument_list|(
name|expectedType
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|isDeviceIndependent
argument_list|(
name|colorSpace
argument_list|,
name|expectedType
argument_list|)
operator|||
name|validColorSpaceDestOutputProfile
argument_list|(
name|expectedType
argument_list|)
return|;
block|}
block|}
comment|/*      * Check if the ColorProfile provided by the DestOutputProfile entry isn't null and      * if the ColorSpace represented by the Profile has the right type (RGB or CMYK)      *       * @param expectedType      * @return      */
specifier|private
name|boolean
name|validColorSpaceDestOutputProfile
parameter_list|(
name|ColorSpaceType
name|expectedType
parameter_list|)
throws|throws
name|ContentStreamException
block|{
name|boolean
name|result
init|=
literal|false
decl_stmt|;
name|ICCProfileWrapper
name|profileWrapper
decl_stmt|;
try|try
block|{
name|profileWrapper
operator|=
name|ICCProfileWrapper
operator|.
name|getOrSearchICCProfile
argument_list|(
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|profileWrapper
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|expectedType
condition|)
block|{
case|case
name|RGB
case|:
name|result
operator|=
name|profileWrapper
operator|.
name|isRGBColorSpace
argument_list|()
expr_stmt|;
break|break;
case|case
name|CMYK
case|:
name|result
operator|=
name|profileWrapper
operator|.
name|isCMYKColorSpace
argument_list|()
expr_stmt|;
break|break;
default|default:
name|result
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|ValidationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ContentStreamException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
comment|/*      * Return true if the given ColorSpace is an independent device ColorSpace.      * If the color space is an ICCBased, check the embedded profile color (RGB or CMYK)      */
specifier|private
name|boolean
name|isDeviceIndependent
parameter_list|(
name|PDColorSpace
name|cs
parameter_list|,
name|ColorSpaceType
name|expectedType
parameter_list|)
block|{
if|if
condition|(
name|cs
operator|instanceof
name|PDICCBased
condition|)
block|{
name|int
name|type
init|=
operator|(
operator|(
name|PDICCBased
operator|)
name|cs
operator|)
operator|.
name|getColorSpaceType
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|expectedType
condition|)
block|{
case|case
name|RGB
case|:
return|return
name|type
operator|==
name|ICC_ColorSpace
operator|.
name|TYPE_RGB
return|;
case|case
name|CMYK
case|:
return|return
name|type
operator|==
name|ICC_ColorSpace
operator|.
name|TYPE_CMYK
return|;
default|default:
return|return
literal|true
return|;
block|}
block|}
else|else
block|{
return|return
name|cs
operator|instanceof
name|PDCIEBasedColorSpace
return|;
block|}
block|}
comment|/*      * Return the current color space used by the operation      */
specifier|private
name|PDColorSpace
name|getColorSpace
parameter_list|(
name|String
name|operation
parameter_list|)
block|{
if|if
condition|(
name|getGraphicsState
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|operation
operator|.
name|equals
argument_list|(
literal|"rg"
argument_list|)
operator|||
name|operation
operator|.
name|equals
argument_list|(
literal|"g"
argument_list|)
operator|||
name|operation
operator|.
name|equals
argument_list|(
literal|"k"
argument_list|)
operator|||
name|operation
operator|.
name|equals
argument_list|(
literal|"f"
argument_list|)
operator|||
name|operation
operator|.
name|equals
argument_list|(
literal|"F"
argument_list|)
operator|||
name|operation
operator|.
name|equals
argument_list|(
literal|"f*"
argument_list|)
condition|)
block|{
comment|// non stroking operator
return|return
name|getGraphicsState
argument_list|()
operator|.
name|getNonStrokingColorSpace
argument_list|()
return|;
block|}
else|else
block|{
comment|// stroking operator
return|return
name|getGraphicsState
argument_list|()
operator|.
name|getStrokingColorSpace
argument_list|()
return|;
block|}
block|}
comment|/**      * This method validates if the ColorSpace used as operand is consistent with      * the color space defined in OutputIntent dictionaries.      *       * @param operator      * @param arguments      * @throws IOException      */
specifier|protected
name|void
name|checkSetColorSpaceOperators
parameter_list|(
name|PDFOperator
name|operator
parameter_list|,
name|List
argument_list|<
name|?
argument_list|>
name|arguments
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
operator|(
literal|"CS"
operator|.
name|equals
argument_list|(
name|operator
operator|.
name|getOperation
argument_list|()
argument_list|)
operator|||
literal|"cs"
operator|.
name|equals
argument_list|(
name|operator
operator|.
name|getOperation
argument_list|()
argument_list|)
operator|)
condition|)
block|{
return|return;
block|}
name|String
name|colorSpaceName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|arguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|String
condition|)
block|{
name|colorSpaceName
operator|=
operator|(
name|String
operator|)
name|arguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|COSString
condition|)
block|{
name|colorSpaceName
operator|=
operator|(
operator|(
name|COSString
operator|)
name|arguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|COSName
condition|)
block|{
name|colorSpaceName
operator|=
operator|(
operator|(
name|COSName
operator|)
name|arguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|registerError
argument_list|(
literal|"The operand doesn't have the expected type"
argument_list|,
name|ERROR_GRAPHIC_UNEXPECTED_VALUE_FOR_KEY
argument_list|)
expr_stmt|;
return|return;
block|}
name|ColorSpaceHelper
name|csHelper
init|=
literal|null
decl_stmt|;
name|ColorSpaces
name|cs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cs
operator|=
name|ColorSpaces
operator|.
name|valueOf
argument_list|(
name|colorSpaceName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|/*              * The color space is unknown. Try to access the resources dictionary, the color space can be a reference.              */
name|PDColorSpace
name|pdCS
init|=
operator|(
name|PDColorSpace
operator|)
name|this
operator|.
name|getResources
argument_list|()
operator|.
name|getColorSpaces
argument_list|()
operator|.
name|get
argument_list|(
name|colorSpaceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|pdCS
operator|!=
literal|null
condition|)
block|{
name|cs
operator|=
name|ColorSpaces
operator|.
name|valueOf
argument_list|(
name|pdCS
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|PreflightConfiguration
name|cfg
init|=
name|context
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|ColorSpaceHelperFactory
name|csFact
init|=
name|cfg
operator|.
name|getColorSpaceHelperFact
argument_list|()
decl_stmt|;
name|csHelper
operator|=
name|csFact
operator|.
name|getColorSpaceHelper
argument_list|(
name|context
argument_list|,
name|pdCS
argument_list|,
name|ColorSpaceRestriction
operator|.
name|NO_RESTRICTION
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|cs
operator|==
literal|null
condition|)
block|{
name|registerError
argument_list|(
literal|"The ColorSpace is unknown"
argument_list|,
name|ERROR_GRAPHIC_UNEXPECTED_VALUE_FOR_KEY
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|csHelper
operator|==
literal|null
condition|)
block|{
name|PDColorSpace
name|pdCS
init|=
name|PDColorSpace
operator|.
name|create
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|colorSpaceName
argument_list|)
argument_list|)
decl_stmt|;
name|PreflightConfiguration
name|cfg
init|=
name|context
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|ColorSpaceHelperFactory
name|csFact
init|=
name|cfg
operator|.
name|getColorSpaceHelperFact
argument_list|()
decl_stmt|;
name|csHelper
operator|=
name|csFact
operator|.
name|getColorSpaceHelper
argument_list|(
name|context
argument_list|,
name|pdCS
argument_list|,
name|ColorSpaceRestriction
operator|.
name|NO_RESTRICTION
argument_list|)
expr_stmt|;
block|}
name|csHelper
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
comment|/**      * Add a validation error into the PreflightContext      *       * @param msg      *            exception details      * @param errorCode      *            the error code.      */
specifier|protected
name|void
name|registerError
parameter_list|(
name|String
name|msg
parameter_list|,
name|String
name|errorCode
parameter_list|)
block|{
name|registerError
argument_list|(
name|msg
argument_list|,
name|errorCode
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|registerError
parameter_list|(
name|String
name|msg
parameter_list|,
name|String
name|errorCode
parameter_list|,
name|boolean
name|warning
parameter_list|)
block|{
name|ValidationError
name|error
init|=
operator|new
name|ValidationError
argument_list|(
name|errorCode
argument_list|,
name|msg
argument_list|)
decl_stmt|;
name|error
operator|.
name|setWarning
argument_list|(
name|warning
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|.
name|addValidationError
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

