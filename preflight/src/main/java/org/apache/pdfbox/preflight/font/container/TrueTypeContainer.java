begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|font
operator|.
name|container
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|ttf
operator|.
name|CmapSubtable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|ttf
operator|.
name|CmapTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|ttf
operator|.
name|TrueTypeFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|encoding
operator|.
name|Encoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|encoding
operator|.
name|GlyphList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDTrueTypeFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|font
operator|.
name|util
operator|.
name|GlyphException
import|;
end_import

begin_class
specifier|public
class|class
name|TrueTypeContainer
extends|extends
name|FontContainer
block|{
specifier|protected
name|TrueTypeFont
name|ttFont
decl_stmt|;
specifier|private
name|CmapSubtable
index|[]
name|cmapEncodingEntries
init|=
literal|null
decl_stmt|;
specifier|private
name|PDTrueTypeFont
name|trueTypeFont
decl_stmt|;
specifier|public
name|TrueTypeContainer
parameter_list|(
name|PDTrueTypeFont
name|font
parameter_list|)
block|{
name|super
argument_list|(
name|font
argument_list|)
expr_stmt|;
name|this
operator|.
name|trueTypeFont
operator|=
name|font
expr_stmt|;
block|}
specifier|public
name|void
name|setTrueTypeFont
parameter_list|(
name|TrueTypeFont
name|ttFont
parameter_list|)
block|{
name|this
operator|.
name|ttFont
operator|=
name|ttFont
expr_stmt|;
name|initCMapEncodingEntries
argument_list|()
expr_stmt|;
comment|// TODO appel sur le checkWidth
block|}
comment|/**      * Initialize the {@linkplain #cmapEncodingEntries} with CMaps that belong to the TrueType Font Program.      *       * Here the selection rules :      *<UL>      *<li>For a Symbolic TrueType, the Font Program has only one CMap (Checked in the checkFontFileElement method)      *<li>For a Non-Symbolic TrueType, the list of CMap is reordered to provide WinAnsi CMap first (plateformId : 3 /      * encodingId : 1) followed by MacRoman CMap (plateformId : 1 / encodingId : 0). This CMap returns the CMap which      * corresponds to the Encoding value of the FontDescriptor dictionary.      *</UL>      */
specifier|protected
name|void
name|initCMapEncodingEntries
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|cmapEncodingEntries
operator|!=
literal|null
condition|)
return|return;
try|try
block|{
name|CmapTable
name|cmap
init|=
name|this
operator|.
name|ttFont
operator|.
name|getCmap
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|trueTypeFont
operator|.
name|getFontDescriptor
argument_list|()
operator|.
name|isSymbolic
argument_list|()
condition|)
block|{
name|this
operator|.
name|cmapEncodingEntries
operator|=
name|cmap
operator|.
name|getCmaps
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|cmapEncodingEntries
operator|=
name|orderCMapEntries
argument_list|(
name|cmap
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return;
block|}
block|}
specifier|private
name|CmapSubtable
index|[]
name|orderCMapEntries
parameter_list|(
name|CmapTable
name|cmap
parameter_list|)
block|{
name|List
argument_list|<
name|CmapSubtable
argument_list|>
name|res
init|=
operator|new
name|ArrayList
argument_list|<
name|CmapSubtable
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|firstIs31
init|=
literal|false
decl_stmt|;
for|for
control|(
name|CmapSubtable
name|cmapEntry
range|:
name|cmap
operator|.
name|getCmaps
argument_list|()
control|)
block|{
comment|// WinAnsi
if|if
condition|(
operator|(
name|cmapEntry
operator|.
name|getPlatformId
argument_list|()
operator|==
literal|3
operator|)
operator|&&
operator|(
name|cmapEntry
operator|.
name|getPlatformEncodingId
argument_list|()
operator|==
literal|1
operator|)
condition|)
block|{
name|res
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|cmapEntry
argument_list|)
expr_stmt|;
name|firstIs31
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|cmapEntry
operator|.
name|getPlatformId
argument_list|()
operator|==
literal|1
operator|)
operator|&&
operator|(
name|cmapEntry
operator|.
name|getPlatformEncodingId
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
comment|// MacRoman
if|if
condition|(
name|firstIs31
condition|)
block|{
comment|// WinAnsi is present, MacRoman is set in second position
name|res
operator|.
name|add
argument_list|(
literal|1
argument_list|,
name|cmapEntry
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// WinAnsi is missing, MacRoman has the priority
name|res
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|cmapEntry
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|res
operator|.
name|add
argument_list|(
name|cmapEntry
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|res
operator|.
name|toArray
argument_list|(
operator|new
name|CmapSubtable
index|[
name|res
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|float
name|getFontProgramWidth
parameter_list|(
name|int
name|cid
parameter_list|)
throws|throws
name|GlyphException
block|{
try|try
block|{
name|float
name|result
init|=
operator|-
literal|1f
decl_stmt|;
if|if
condition|(
name|cmapEncodingEntries
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|CmapSubtable
name|entry
range|:
name|cmapEncodingEntries
control|)
block|{
name|int
name|glyphID
init|=
name|extractGlyphID
argument_list|(
name|cid
argument_list|,
name|entry
argument_list|)
decl_stmt|;
if|if
condition|(
name|glyphID
operator|>
literal|0
condition|)
block|{
name|result
operator|=
name|extractGlyphWidth
argument_list|(
name|glyphID
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GlyphException
argument_list|(
name|PreflightConstants
operator|.
name|ERROR_FONTS_GLYPH
argument_list|,
name|cid
argument_list|,
literal|"Unexpected error during the width validation for the character CID("
operator|+
name|cid
operator|+
literal|") : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * TrueType has internal CMap that map the CID used in the PDF file with an internal character identifier. This      * method converts the given CID in the internal font program identifier. (0 if no match found)      *       * @param cid      * @param cmap      * @return      */
specifier|private
name|int
name|extractGlyphID
parameter_list|(
name|int
name|cid
parameter_list|,
name|CmapSubtable
name|cmap
parameter_list|)
block|{
name|int
name|notFoundGlyphID
init|=
literal|0
decl_stmt|;
name|int
name|innerFontCid
init|=
name|cid
decl_stmt|;
if|if
condition|(
name|cmap
operator|.
name|getPlatformEncodingId
argument_list|()
operator|==
literal|1
operator|&&
name|cmap
operator|.
name|getPlatformId
argument_list|()
operator|==
literal|3
condition|)
block|{
name|Encoding
name|fontEncoding
init|=
name|this
operator|.
name|trueTypeFont
operator|.
name|getEncoding
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|fontEncoding
operator|.
name|getName
argument_list|(
name|cid
argument_list|)
decl_stmt|;
name|String
name|character
init|=
name|GlyphList
operator|.
name|getAdobeGlyphList
argument_list|()
operator|.
name|toUnicode
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|character
operator|==
literal|null
condition|)
block|{
return|return
name|notFoundGlyphID
return|;
block|}
name|char
index|[]
name|characterArray
init|=
name|character
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
if|if
condition|(
name|characterArray
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|innerFontCid
operator|=
operator|(
name|int
operator|)
name|characterArray
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
comment|// TODO OD-PDFA-87 A faire?
name|innerFontCid
operator|=
operator|(
name|int
operator|)
name|characterArray
index|[
literal|0
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|characterArray
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|cmap
operator|.
name|getGlyphId
argument_list|(
operator|(
name|int
operator|)
name|characterArray
index|[
name|i
index|]
argument_list|)
operator|==
literal|0
condition|)
block|{
return|return
name|notFoundGlyphID
return|;
comment|// TODO what we have to do here ???
block|}
block|}
block|}
block|}
comment|// search glyph
return|return
name|cmap
operator|.
name|getGlyphId
argument_list|(
name|innerFontCid
argument_list|)
return|;
block|}
specifier|private
name|float
name|extractGlyphWidth
parameter_list|(
name|int
name|glyphID
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|unitsPerEm
init|=
name|this
operator|.
name|ttFont
operator|.
name|getHeader
argument_list|()
operator|.
name|getUnitsPerEm
argument_list|()
decl_stmt|;
name|int
index|[]
name|glyphWidths
init|=
name|this
operator|.
name|ttFont
operator|.
name|getHorizontalMetrics
argument_list|()
operator|.
name|getAdvanceWidth
argument_list|()
decl_stmt|;
comment|/*          * In a Mono space font program, the length of the AdvanceWidth array must be one. According to the TrueType          * font specification, the Last Value of the AdvanceWidth array is apply to the subsequent glyphs. So if the          * GlyphId is greater than the length of the array the last entry is used.          */
name|int
name|numberOfLongHorMetrics
init|=
name|this
operator|.
name|ttFont
operator|.
name|getHorizontalHeader
argument_list|()
operator|.
name|getNumberOfHMetrics
argument_list|()
decl_stmt|;
name|float
name|glypdWidth
init|=
name|glyphWidths
index|[
name|numberOfLongHorMetrics
operator|-
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|glyphID
operator|<
name|numberOfLongHorMetrics
condition|)
block|{
name|glypdWidth
operator|=
name|glyphWidths
index|[
name|glyphID
index|]
expr_stmt|;
block|}
return|return
operator|(
operator|(
name|glypdWidth
operator|*
literal|1000
operator|)
operator|/
name|unitsPerEm
operator|)
return|;
block|}
block|}
end_class

end_unit

