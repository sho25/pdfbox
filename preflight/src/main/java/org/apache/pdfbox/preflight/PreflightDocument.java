begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|ValidationResult
operator|.
name|ValidationError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|exception
operator|.
name|ValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|utils
operator|.
name|ContextHelper
import|;
end_import

begin_class
specifier|public
class|class
name|PreflightDocument
extends|extends
name|PDDocument
block|{
specifier|protected
name|ValidationResult
name|result
decl_stmt|;
specifier|protected
name|PreflightConfiguration
name|config
decl_stmt|;
specifier|protected
name|PreflightContext
name|context
decl_stmt|;
specifier|protected
specifier|final
name|Format
name|specification
decl_stmt|;
comment|/** 	 * Create an empty preflight document  	 * and load the default configuration for the given format. 	 *  	 * @param format 	 * @throws IOException 	 */
specifier|public
name|PreflightDocument
parameter_list|(
name|Format
name|format
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|format
argument_list|,
operator|(
name|PreflightConfiguration
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Create a preflight document based on the COSDocument  	 * and load the default configuration for the given format. 	 *  	 * @param doc 	 * @param format 	 */
specifier|public
name|PreflightDocument
parameter_list|(
name|COSDocument
name|doc
parameter_list|,
name|Format
name|format
parameter_list|)
block|{
name|this
argument_list|(
name|doc
argument_list|,
name|format
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Create an empty preflight document that will use the given configuration bean to process the validation. 	 * if the configuration is null, a default configuration will be load using the given format. 	 *  	 * @param format 	 * @param cfg 	 * @throws IOException 	 */
specifier|public
name|PreflightDocument
parameter_list|(
name|Format
name|format
parameter_list|,
name|PreflightConfiguration
name|cfg
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|specification
operator|=
name|format
expr_stmt|;
name|this
operator|.
name|config
operator|=
name|cfg
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|config
operator|==
literal|null
condition|)
block|{
name|initConfiguration
argument_list|(
name|format
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Create a preflight document based on the COSDocument that will use the given configuration bean to process the validation. 	 * if the configuration is null, a default configuration will be load using the given format. 	 *  	 * @param doc 	 * @param format 	 * @param cfg 	 * @throws IOException 	 */
specifier|public
name|PreflightDocument
parameter_list|(
name|COSDocument
name|doc
parameter_list|,
name|Format
name|format
parameter_list|,
name|PreflightConfiguration
name|cfg
parameter_list|)
block|{
name|super
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|this
operator|.
name|specification
operator|=
name|format
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|config
operator|==
literal|null
condition|)
block|{
name|initConfiguration
argument_list|(
name|format
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|initConfiguration
parameter_list|(
name|Format
name|format
parameter_list|)
block|{
switch|switch
condition|(
name|format
condition|)
block|{
comment|//		case PDF_A1A:
comment|//
comment|//			break;
default|default:
comment|// default is PDF/A1-b
name|this
operator|.
name|config
operator|=
name|PreflightConfiguration
operator|.
name|createPdfA1BConfiguration
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
specifier|public
name|ValidationResult
name|getResult
parameter_list|()
block|{
return|return
name|result
return|;
block|}
specifier|public
name|void
name|setResult
parameter_list|(
name|ValidationResult
name|_result
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|result
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|result
operator|.
name|mergeResult
argument_list|(
name|_result
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|_result
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|result
operator|=
name|_result
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|result
operator|=
operator|new
name|ValidationResult
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addValidationError
parameter_list|(
name|ValidationError
name|error
parameter_list|)
block|{
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|result
operator|=
operator|new
name|ValidationResult
argument_list|(
name|error
operator|.
name|isWarning
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|result
operator|.
name|addError
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|PreflightContext
name|getContext
parameter_list|()
block|{
return|return
name|this
operator|.
name|context
return|;
block|}
specifier|public
name|void
name|setContext
parameter_list|(
name|PreflightContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
comment|/** 	 * Check that PDDocument is a valid file according to the format given during the object creation.  	 * @throws ValidationException 	 */
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|ValidationException
block|{
name|context
operator|.
name|setConfig
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|processes
init|=
name|config
operator|.
name|getProcessNames
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|processes
control|)
block|{
name|ContextHelper
operator|.
name|validateElement
argument_list|(
name|context
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Format
name|getSpecification
parameter_list|()
block|{
return|return
name|specification
return|;
block|}
block|}
end_class

end_unit

