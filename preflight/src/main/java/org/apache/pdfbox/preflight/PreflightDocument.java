begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|ValidationResult
operator|.
name|ValidationError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|exception
operator|.
name|ValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|utils
operator|.
name|ContextHelper
import|;
end_import

begin_class
specifier|public
class|class
name|PreflightDocument
extends|extends
name|PDDocument
block|{
specifier|private
name|ValidationResult
name|result
init|=
operator|new
name|ValidationResult
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|private
name|PreflightConfiguration
name|config
decl_stmt|;
specifier|private
name|PreflightContext
name|context
decl_stmt|;
specifier|private
specifier|final
name|Format
name|specification
decl_stmt|;
comment|/**      * Create a preflight document based on the COSDocument and load the default configuration for the given format.      *       * @param doc the underlying COSDocument      * @param format the format used for validation      */
specifier|public
name|PreflightDocument
parameter_list|(
name|COSDocument
name|doc
parameter_list|,
name|Format
name|format
parameter_list|)
block|{
name|this
argument_list|(
name|doc
argument_list|,
name|format
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a preflight document based on the COSDocument that will use the given configuration bean to process the      * validation. if the configuration is null, a default configuration will be load using the given format.      *       * @param doc the underlying COSDocument      * @param format the format used for validation      * @param config the configuration used for validation      */
specifier|public
name|PreflightDocument
parameter_list|(
name|COSDocument
name|doc
parameter_list|,
name|Format
name|format
parameter_list|,
name|PreflightConfiguration
name|config
parameter_list|)
block|{
name|super
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|this
operator|.
name|specification
operator|=
name|format
expr_stmt|;
comment|// PDF/A1-b is default
name|this
operator|.
name|config
operator|=
name|config
operator|==
literal|null
condition|?
name|PreflightConfiguration
operator|.
name|createPdfA1BConfiguration
argument_list|()
else|:
name|config
expr_stmt|;
block|}
comment|/**      * Returns an unmodifiable list of all validation errors.      *       * @return an unmodifiable list of all validation errors      */
specifier|public
name|List
argument_list|<
name|ValidationError
argument_list|>
name|getValidationErrors
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|result
operator|.
name|getErrorsList
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Add a validation error.      *       * @param error the validation error to be added      */
specifier|public
name|void
name|addValidationError
parameter_list|(
name|ValidationError
name|error
parameter_list|)
block|{
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|result
operator|.
name|addError
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Add a list of validation errors.      *       * @param errorList the list of validation errors      */
specifier|public
name|void
name|addValidationErrors
parameter_list|(
name|List
argument_list|<
name|ValidationError
argument_list|>
name|errorList
parameter_list|)
block|{
if|if
condition|(
name|errorList
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|result
operator|.
name|addErrors
argument_list|(
name|errorList
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns the associated preflight context. It is created after parsing the pdf.      *       * @return the associated preflight context      */
specifier|public
name|PreflightContext
name|getContext
parameter_list|()
block|{
return|return
name|this
operator|.
name|context
return|;
block|}
comment|/**      * Set the preflight context for this document.      *       * @param context the associated preflight context      */
specifier|public
name|void
name|setContext
parameter_list|(
name|PreflightContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
comment|/**      * Check that PDDocument is a valid file according to the format given during the object creation.      *       * @return the validation result      * @throws ValidationException      */
specifier|public
name|ValidationResult
name|validate
parameter_list|()
throws|throws
name|ValidationException
block|{
comment|// force early class loading to check if people forgot to use --add-modules javax.xml.bind
comment|// on java 9& 10, or to add jaxb-api on java 11 and later
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|DatatypeConverter
operator|.
name|parseInt
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
name|context
operator|.
name|setConfig
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|processes
init|=
name|config
operator|.
name|getProcessNames
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|processes
control|)
block|{
name|ContextHelper
operator|.
name|validateElement
argument_list|(
name|context
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * Returns the format which is used to valide the pdf document.      *       * @return the format used for validation      */
specifier|public
name|Format
name|getSpecification
parameter_list|()
block|{
return|return
name|specification
return|;
block|}
block|}
end_class

end_unit

