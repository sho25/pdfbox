begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|annotation
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|ERROR_ANNOT_FORBIDDEN_SUBTYPE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|ValidationResult
operator|.
name|ValidationError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|action
operator|.
name|ActionManagerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|exception
operator|.
name|ValidationException
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AnnotationValidatorFactory
block|{
specifier|protected
name|ActionManagerFactory
name|actionFact
init|=
literal|null
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|AnnotationValidator
argument_list|>
argument_list|>
name|validatorClasses
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|AnnotationValidator
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|AnnotationValidatorFactory
parameter_list|()
block|{
name|initializeClasses
argument_list|()
expr_stmt|;
block|}
specifier|public
name|AnnotationValidatorFactory
parameter_list|(
name|ActionManagerFactory
name|actionFact
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|actionFact
operator|=
name|actionFact
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|setActionFact
parameter_list|(
name|ActionManagerFactory
name|_actionFact
parameter_list|)
block|{
name|this
operator|.
name|actionFact
operator|=
name|_actionFact
expr_stmt|;
block|}
comment|/**      * Initialize the map of Validation classes used to create a validation object according to the Annotation subtype.      */
specifier|protected
specifier|abstract
name|void
name|initializeClasses
parameter_list|()
function_decl|;
comment|/**      * Return an instance of AnnotationValidator.      *       * @param ctx      * @param annotDic      * @return      */
specifier|public
specifier|final
name|AnnotationValidator
name|getAnnotationValidator
parameter_list|(
name|PreflightContext
name|ctx
parameter_list|,
name|COSDictionary
name|annotDic
parameter_list|)
throws|throws
name|ValidationException
block|{
name|AnnotationValidator
name|result
init|=
literal|null
decl_stmt|;
name|String
name|subtype
init|=
name|annotDic
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|AnnotationValidator
argument_list|>
name|clazz
init|=
name|this
operator|.
name|validatorClasses
operator|.
name|get
argument_list|(
name|subtype
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
name|ctx
operator|.
name|addValidationError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_ANNOT_FORBIDDEN_SUBTYPE
argument_list|,
literal|"The subtype isn't authorized : "
operator|+
name|subtype
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|Constructor
argument_list|<
name|?
extends|extends
name|AnnotationValidator
argument_list|>
name|constructor
init|=
name|clazz
operator|.
name|getConstructor
argument_list|(
name|PreflightContext
operator|.
name|class
argument_list|,
name|COSDictionary
operator|.
name|class
argument_list|)
decl_stmt|;
name|result
operator|=
name|constructor
operator|.
name|newInstance
argument_list|(
name|ctx
argument_list|,
name|annotDic
argument_list|)
expr_stmt|;
name|result
operator|.
name|setFactory
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ValidationException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

