begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|process
operator|.
name|reflect
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConfiguration
operator|.
name|ACTIONS_PROCESS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConfiguration
operator|.
name|ANNOTATIONS_PROCESS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConfiguration
operator|.
name|GRAPHIC_PROCESS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConfiguration
operator|.
name|RESOURCES_PROCESS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|ERROR_GRAPHIC_INVALID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|ERROR_GRAPHIC_TRANSPARENCY_GROUP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|ERROR_UNKOWN_ERROR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|PAGE_DICTIONARY_VALUE_THUMB
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|XOBJECT_DICTIONARY_KEY_GROUP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|XOBJECT_DICTIONARY_VALUE_S_TRANSPARENCY
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDColorSpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|image
operator|.
name|PDImageXObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|PDXObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|ValidationResult
operator|.
name|ValidationError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|content
operator|.
name|PreflightContentStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|exception
operator|.
name|ValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|graphic
operator|.
name|ColorSpaceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|graphic
operator|.
name|ColorSpaceHelperFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|graphic
operator|.
name|ColorSpaceHelperFactory
operator|.
name|ColorSpaceRestriction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|process
operator|.
name|AbstractProcess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|utils
operator|.
name|COSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|utils
operator|.
name|ContextHelper
import|;
end_import

begin_class
specifier|public
class|class
name|SinglePageValidationProcess
extends|extends
name|AbstractProcess
block|{
specifier|public
name|void
name|validate
parameter_list|(
name|PreflightContext
name|context
parameter_list|)
throws|throws
name|ValidationException
block|{
name|PreflightPath
name|vPath
init|=
name|context
operator|.
name|getValidationPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|vPath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
elseif|else
if|if
condition|(
operator|!
name|vPath
operator|.
name|isExpectedType
argument_list|(
name|PDPage
operator|.
name|class
argument_list|)
condition|)
block|{
name|addValidationError
argument_list|(
name|context
argument_list|,
operator|new
name|ValidationError
argument_list|(
name|PreflightConstants
operator|.
name|ERROR_PDF_PROCESSING_MISSING
argument_list|,
literal|"Page validation required at least a PDPage"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PDPage
name|page
init|=
operator|(
name|PDPage
operator|)
name|vPath
operator|.
name|peek
argument_list|()
decl_stmt|;
name|validateActions
argument_list|(
name|context
argument_list|,
name|page
argument_list|)
expr_stmt|;
name|validateAnnotation
argument_list|(
name|context
argument_list|,
name|page
argument_list|)
expr_stmt|;
name|validateColorSpaces
argument_list|(
name|context
argument_list|,
name|page
argument_list|)
expr_stmt|;
name|validateResources
argument_list|(
name|context
argument_list|,
name|page
argument_list|)
expr_stmt|;
name|validateGraphicObjects
argument_list|(
name|context
argument_list|,
name|page
argument_list|)
expr_stmt|;
name|validateGroupTransparency
argument_list|(
name|context
argument_list|,
name|page
argument_list|)
expr_stmt|;
comment|// TODO
comment|// add MetaData validation ?
name|validateContent
argument_list|(
name|context
argument_list|,
name|page
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This method checks additional actions contained in the given Page object.      *       * @param context      * @param page      * @return      * @throws ValidationException      */
specifier|protected
name|void
name|validateActions
parameter_list|(
name|PreflightContext
name|context
parameter_list|,
name|PDPage
name|page
parameter_list|)
throws|throws
name|ValidationException
block|{
name|ContextHelper
operator|.
name|validateElement
argument_list|(
name|context
argument_list|,
name|page
operator|.
name|getCOSObject
argument_list|()
argument_list|,
name|ACTIONS_PROCESS
argument_list|)
expr_stmt|;
block|}
comment|/**      * Check that all ColorSpace present in the Resource dictionary are conforming to the ISO 19005:2005-1      * specification.      *       * @param context      * @param page      */
specifier|protected
name|void
name|validateColorSpaces
parameter_list|(
name|PreflightContext
name|context
parameter_list|,
name|PDPage
name|page
parameter_list|)
throws|throws
name|ValidationException
block|{
name|PDResources
name|resources
init|=
name|page
operator|.
name|getResources
argument_list|()
decl_stmt|;
if|if
condition|(
name|resources
operator|!=
literal|null
condition|)
block|{
name|PreflightConfiguration
name|config
init|=
name|context
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|ColorSpaceHelperFactory
name|colorSpaceFactory
init|=
name|config
operator|.
name|getColorSpaceHelperFact
argument_list|()
decl_stmt|;
for|for
control|(
name|COSName
name|name
range|:
name|resources
operator|.
name|getColorSpaceNames
argument_list|()
control|)
block|{
try|try
block|{
name|PDColorSpace
name|pdCS
init|=
name|resources
operator|.
name|getColorSpace
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|ColorSpaceHelper
name|csHelper
init|=
name|colorSpaceFactory
operator|.
name|getColorSpaceHelper
argument_list|(
name|context
argument_list|,
name|pdCS
argument_list|,
name|ColorSpaceRestriction
operator|.
name|NO_RESTRICTION
argument_list|)
decl_stmt|;
name|csHelper
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// fixme: this code was previously in PDResources
comment|// LOG.error("error while creating a colorspace", exception);
block|}
block|}
block|}
block|}
comment|/**      * Check that all XObject references in the PDResource of the page and in the Thumb entry are confirming to the      * PDF/A specification.      *       * @param context      * @param page      * @throws ValidationException      */
specifier|protected
name|void
name|validateGraphicObjects
parameter_list|(
name|PreflightContext
name|context
parameter_list|,
name|PDPage
name|page
parameter_list|)
throws|throws
name|ValidationException
block|{
name|COSBase
name|thumbBase
init|=
name|page
operator|.
name|getCOSObject
argument_list|()
operator|.
name|getItem
argument_list|(
name|PAGE_DICTIONARY_VALUE_THUMB
argument_list|)
decl_stmt|;
if|if
condition|(
name|thumbBase
operator|!=
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
name|thumbBase
operator|instanceof
name|COSObject
condition|)
block|{
name|thumbBase
operator|=
operator|(
operator|(
name|COSObject
operator|)
name|thumbBase
operator|)
operator|.
name|getObject
argument_list|()
expr_stmt|;
block|}
name|PDXObject
name|thumbImg
init|=
name|PDImageXObject
operator|.
name|createThumbnail
argument_list|(
operator|(
name|COSStream
operator|)
name|thumbBase
argument_list|)
decl_stmt|;
name|ContextHelper
operator|.
name|validateElement
argument_list|(
name|context
argument_list|,
name|thumbImg
argument_list|,
name|GRAPHIC_PROCESS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|context
operator|.
name|addValidationError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_GRAPHIC_INVALID
argument_list|,
literal|"Unable to read Thumb image : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|validateResources
parameter_list|(
name|PreflightContext
name|context
parameter_list|,
name|PDPage
name|page
parameter_list|)
throws|throws
name|ValidationException
block|{
name|ContextHelper
operator|.
name|validateElement
argument_list|(
name|context
argument_list|,
name|page
operator|.
name|getResources
argument_list|()
argument_list|,
name|RESOURCES_PROCESS
argument_list|)
expr_stmt|;
block|}
comment|/**      *       * @param page      * @param context      * @return      * @throws ValidationException      */
specifier|protected
name|void
name|validateContent
parameter_list|(
name|PreflightContext
name|context
parameter_list|,
name|PDPage
name|page
parameter_list|)
throws|throws
name|ValidationException
block|{
comment|// TODO add this wrapper in the config object ?
try|try
block|{
name|PreflightContentStream
name|csWrapper
init|=
operator|new
name|PreflightContentStream
argument_list|(
name|context
argument_list|,
name|page
argument_list|)
decl_stmt|;
name|csWrapper
operator|.
name|validPageContentStream
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|context
operator|.
name|addValidationError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_UNKOWN_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      *       * @param page      * @return      * @throws ValidationException      */
specifier|protected
name|void
name|validateAnnotation
parameter_list|(
name|PreflightContext
name|context
parameter_list|,
name|PDPage
name|page
parameter_list|)
throws|throws
name|ValidationException
block|{
try|try
block|{
name|List
argument_list|<
name|?
argument_list|>
name|lAnnots
init|=
name|page
operator|.
name|getAnnotations
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|object
range|:
name|lAnnots
control|)
block|{
if|if
condition|(
name|object
operator|instanceof
name|PDAnnotation
condition|)
block|{
name|COSDictionary
name|cosAnnot
init|=
operator|(
operator|(
name|PDAnnotation
operator|)
name|object
operator|)
operator|.
name|getDictionary
argument_list|()
decl_stmt|;
name|ContextHelper
operator|.
name|validateElement
argument_list|(
name|context
argument_list|,
name|cosAnnot
argument_list|,
name|ANNOTATIONS_PROCESS
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|ValidationException
condition|)
block|{
throw|throw
operator|(
name|ValidationException
operator|)
name|e
throw|;
block|}
comment|// TODO IOException probably due to Encrypt
throw|throw
operator|new
name|ValidationException
argument_list|(
literal|"Unable to access Annotation"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Check that the group dictionary doesn't have a Transparency attribute      *       * @param context      * @param page      * @throws ValidationException      */
specifier|protected
name|void
name|validateGroupTransparency
parameter_list|(
name|PreflightContext
name|context
parameter_list|,
name|PDPage
name|page
parameter_list|)
throws|throws
name|ValidationException
block|{
name|COSBase
name|baseGroup
init|=
name|page
operator|.
name|getCOSObject
argument_list|()
operator|.
name|getItem
argument_list|(
name|XOBJECT_DICTIONARY_KEY_GROUP
argument_list|)
decl_stmt|;
name|COSDictionary
name|groupDictionary
init|=
name|COSUtils
operator|.
name|getAsDictionary
argument_list|(
name|baseGroup
argument_list|,
name|context
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocument
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupDictionary
operator|!=
literal|null
condition|)
block|{
name|String
name|sVal
init|=
name|groupDictionary
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|S
argument_list|)
decl_stmt|;
if|if
condition|(
name|XOBJECT_DICTIONARY_VALUE_S_TRANSPARENCY
operator|.
name|equals
argument_list|(
name|sVal
argument_list|)
condition|)
block|{
name|context
operator|.
name|addValidationError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_GRAPHIC_TRANSPARENCY_GROUP
argument_list|,
literal|"Group has a transparency S entry or the S entry is null."
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
end_class

end_unit

