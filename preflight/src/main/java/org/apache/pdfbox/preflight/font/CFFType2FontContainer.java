begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|font
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|ttf
operator|.
name|TrueTypeFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
import|;
end_import

begin_class
specifier|public
class|class
name|CFFType2FontContainer
extends|extends
name|AbstractFontContainer
block|{
comment|/** 	 * Object which contains the TrueType font data (used in the CFFType2 font)  	 * extracted by the TrueTypeParser object 	 */
specifier|private
name|TrueTypeFont
name|fontObject
init|=
literal|null
decl_stmt|;
specifier|private
name|CIDToGIDMap
name|cidToGidMap
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|numberOfLongHorMetrics
decl_stmt|;
specifier|private
name|int
name|unitsPerEm
decl_stmt|;
specifier|private
name|int
index|[]
name|glyphWidths
decl_stmt|;
specifier|public
name|CFFType2FontContainer
parameter_list|(
name|CompositeFontContainer
name|container
parameter_list|)
block|{
name|super
argument_list|(
name|container
operator|.
name|getFont
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|cidKnownByFont
operator|.
name|putAll
argument_list|(
name|container
operator|.
name|cidKnownByFont
argument_list|)
expr_stmt|;
name|this
operator|.
name|isFontProgramEmbedded
operator|=
name|container
operator|.
name|isFontProgramEmbedded
expr_stmt|;
name|this
operator|.
name|errors
operator|.
name|addAll
argument_list|(
name|container
operator|.
name|errors
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|checkCID
parameter_list|(
name|int
name|cid
parameter_list|)
throws|throws
name|GlyphException
block|{
if|if
condition|(
name|isAlreadyComputedCid
argument_list|(
name|cid
argument_list|)
condition|)
block|{
return|return;
block|}
specifier|final
name|float
name|widthProvidedByPdfDictionary
init|=
name|this
operator|.
name|font
operator|.
name|getFontWidth
argument_list|(
name|cid
argument_list|)
decl_stmt|;
specifier|final
name|int
name|glyphIndex
init|=
name|getGlyphIndex
argument_list|(
name|cid
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|fontObject
operator|.
name|getGlyph
argument_list|()
operator|.
name|getGlyphs
argument_list|()
operator|.
name|length
operator|<=
name|glyphIndex
condition|)
block|{
name|GlyphException
name|ge
init|=
operator|new
name|GlyphException
argument_list|(
name|PreflightConstants
operator|.
name|ERROR_FONTS_GLYPH_MISSING
argument_list|,
name|cid
argument_list|,
literal|"CID "
operator|+
name|cid
operator|+
literal|" is missing from font \""
operator|+
name|this
operator|.
name|font
operator|.
name|getBaseFont
argument_list|()
operator|+
literal|"\""
argument_list|)
decl_stmt|;
name|addKnownCidElement
argument_list|(
operator|new
name|GlyphDetail
argument_list|(
name|cid
argument_list|,
name|ge
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|ge
throw|;
block|}
comment|// glyph exists we can check the width
name|float
name|glypdWidth
init|=
name|glyphWidths
index|[
name|numberOfLongHorMetrics
operator|-
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|glyphIndex
operator|<
name|numberOfLongHorMetrics
condition|)
block|{
name|glypdWidth
operator|=
name|glyphWidths
index|[
name|glyphIndex
index|]
expr_stmt|;
block|}
name|float
name|widthInFontProgram
init|=
operator|(
operator|(
name|glypdWidth
operator|*
literal|1000
operator|)
operator|/
name|unitsPerEm
operator|)
decl_stmt|;
name|checkWidthsConsistency
argument_list|(
name|cid
argument_list|,
name|widthProvidedByPdfDictionary
argument_list|,
name|widthInFontProgram
argument_list|)
expr_stmt|;
name|addKnownCidElement
argument_list|(
operator|new
name|GlyphDetail
argument_list|(
name|cid
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * If CIDToGID map is Identity, the GID equals to the CID. 	 * Otherwise the conversion is done by the CIDToGID map 	 * @param cid 	 * @return 	 * @throws GlyphException 	 */
specifier|private
name|int
name|getGlyphIndex
parameter_list|(
name|int
name|cid
parameter_list|)
throws|throws
name|GlyphException
block|{
name|int
name|glyphIndex
init|=
name|cid
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|cidToGidMap
operator|!=
literal|null
condition|)
block|{
name|glyphIndex
operator|=
name|cidToGidMap
operator|.
name|getGID
argument_list|(
name|cid
argument_list|)
expr_stmt|;
if|if
condition|(
name|glyphIndex
operator|==
name|cidToGidMap
operator|.
name|NOTDEF_GLYPH_INDEX
condition|)
block|{
name|GlyphException
name|ge
init|=
operator|new
name|GlyphException
argument_list|(
name|PreflightConstants
operator|.
name|ERROR_FONTS_GLYPH_MISSING
argument_list|,
name|cid
argument_list|,
literal|"CID "
operator|+
name|cid
operator|+
literal|" can't be found in the cidToGid map"
argument_list|)
decl_stmt|;
name|addKnownCidElement
argument_list|(
operator|new
name|GlyphDetail
argument_list|(
name|cid
argument_list|,
name|ge
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|ge
throw|;
block|}
block|}
return|return
name|glyphIndex
return|;
block|}
name|void
name|setFontObject
parameter_list|(
name|TrueTypeFont
name|fontObject
parameter_list|)
block|{
name|this
operator|.
name|fontObject
operator|=
name|fontObject
expr_stmt|;
block|}
name|void
name|setCmap
parameter_list|(
name|CIDToGIDMap
name|cmap
parameter_list|)
block|{
name|this
operator|.
name|cidToGidMap
operator|=
name|cmap
expr_stmt|;
block|}
name|void
name|setNumberOfLongHorMetrics
parameter_list|(
name|int
name|numberOfLongHorMetrics
parameter_list|)
block|{
name|this
operator|.
name|numberOfLongHorMetrics
operator|=
name|numberOfLongHorMetrics
expr_stmt|;
block|}
name|void
name|setUnitsPerEm
parameter_list|(
name|int
name|unitsPerEm
parameter_list|)
block|{
name|this
operator|.
name|unitsPerEm
operator|=
name|unitsPerEm
expr_stmt|;
block|}
name|void
name|setGlyphWidths
parameter_list|(
name|int
index|[]
name|_glyphWidths
parameter_list|)
block|{
name|this
operator|.
name|glyphWidths
operator|=
operator|new
name|int
index|[
name|_glyphWidths
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|_glyphWidths
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|this
operator|.
name|glyphWidths
index|[
name|i
index|]
operator|=
name|_glyphWidths
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

