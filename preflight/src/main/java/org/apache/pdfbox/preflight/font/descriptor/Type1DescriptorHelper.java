begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|font
operator|.
name|descriptor
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|ERROR_FONTS_CHARSET_MISSING_FOR_SUBSET
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|ERROR_FONTS_CID_DAMAGED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|ERROR_FONTS_FONT_FILEX_INVALID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|ERROR_FONTS_TYPE1_DAMAGED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|FONT_DICTIONARY_KEY_LENGTH2
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|FONT_DICTIONARY_KEY_LENGTH3
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|font
operator|.
name|FontValidator
operator|.
name|isSubSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Font
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|FontFormatException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cff
operator|.
name|CFFFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cff
operator|.
name|CFFParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDFontDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDSimpleFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|ValidationResult
operator|.
name|ValidationError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|exception
operator|.
name|ValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|font
operator|.
name|container
operator|.
name|Type1Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|font
operator|.
name|util
operator|.
name|Type1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|font
operator|.
name|util
operator|.
name|Type1Parser
import|;
end_import

begin_class
specifier|public
class|class
name|Type1DescriptorHelper
extends|extends
name|FontDescriptorHelper
argument_list|<
name|Type1Container
argument_list|>
block|{
specifier|private
name|boolean
name|isFontFile1
init|=
literal|true
decl_stmt|;
specifier|public
name|Type1DescriptorHelper
parameter_list|(
name|PreflightContext
name|context
parameter_list|,
name|PDFont
name|font
parameter_list|,
name|Type1Container
name|fontContainer
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|font
argument_list|,
name|fontContainer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|checkMandatoryFields
parameter_list|(
name|COSDictionary
name|fDescriptor
parameter_list|)
block|{
name|boolean
name|result
init|=
name|super
operator|.
name|checkMandatoryFields
argument_list|(
name|fDescriptor
argument_list|)
decl_stmt|;
comment|/*          * if the this font is a Subset, the CharSet entry must be present in the FontDescriptor          */
if|if
condition|(
name|isSubSet
argument_list|(
name|fontDescriptor
operator|.
name|getFontName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|charsetStr
init|=
name|fontDescriptor
operator|.
name|getCharSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|charsetStr
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|charsetStr
argument_list|)
condition|)
block|{
name|this
operator|.
name|fContainer
operator|.
name|push
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_CHARSET_MISSING_FOR_SUBSET
argument_list|,
literal|"The Charset entry is missing for the Type1 Subset"
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
literal|false
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|PDStream
name|extractFontFile
parameter_list|(
name|PDFontDescriptor
name|fontDescriptor
parameter_list|)
block|{
name|PDStream
name|ff1
init|=
name|fontDescriptor
operator|.
name|getFontFile
argument_list|()
decl_stmt|;
name|PDStream
name|ff3
init|=
name|fontDescriptor
operator|.
name|getFontFile3
argument_list|()
decl_stmt|;
if|if
condition|(
name|ff1
operator|!=
literal|null
condition|)
block|{
name|COSStream
name|stream
init|=
name|ff1
operator|.
name|getStream
argument_list|()
decl_stmt|;
if|if
condition|(
name|stream
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|fContainer
operator|.
name|push
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_FONT_FILEX_INVALID
argument_list|,
literal|"The FontFile is missing for "
operator|+
name|fontDescriptor
operator|.
name|getFontName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|fContainer
operator|.
name|notEmbedded
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
name|boolean
name|hasLength1
init|=
name|stream
operator|.
name|getInt
argument_list|(
name|COSName
operator|.
name|LENGTH1
argument_list|)
operator|>
literal|0
decl_stmt|;
name|boolean
name|hasLength2
init|=
name|stream
operator|.
name|getInt
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|FONT_DICTIONARY_KEY_LENGTH2
argument_list|)
argument_list|)
operator|>
literal|0
decl_stmt|;
name|boolean
name|hasLength3
init|=
name|stream
operator|.
name|getInt
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|FONT_DICTIONARY_KEY_LENGTH3
argument_list|)
argument_list|)
operator|>=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|hasLength1
operator|&&
name|hasLength2
operator|&&
name|hasLength3
operator|)
condition|)
block|{
name|this
operator|.
name|fContainer
operator|.
name|push
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_FONT_FILEX_INVALID
argument_list|,
literal|"The FontFile is invalid for "
operator|+
name|fontDescriptor
operator|.
name|getFontName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|ff1
return|;
block|}
else|else
block|{
name|this
operator|.
name|isFontFile1
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|fContainer
operator|.
name|setFontFile1
argument_list|(
name|isFontFile1
argument_list|)
expr_stmt|;
return|return
name|ff3
return|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|processFontFile
parameter_list|(
name|PDFontDescriptor
name|fontDescriptor
parameter_list|,
name|PDStream
name|fontFile
parameter_list|)
block|{
if|if
condition|(
name|isFontFile1
condition|)
block|{
name|processFontFile1
argument_list|(
name|fontDescriptor
argument_list|,
name|fontFile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|processFontFile3
argument_list|(
name|fontDescriptor
argument_list|,
name|fontFile
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Try to load the font using the java.awt.font object. if the font is      * invalid, an exception will be pushed in the font container      *      * @param fontDescriptor      * @param fontFile      */
specifier|protected
name|void
name|processFontFile1
parameter_list|(
name|PDFontDescriptor
name|fontDescriptor
parameter_list|,
name|PDStream
name|fontFile
parameter_list|)
block|{
name|ByteArrayInputStream
name|bis
init|=
literal|null
decl_stmt|;
try|try
block|{
name|bis
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|fontFile
operator|.
name|getByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|Font
operator|.
name|createFont
argument_list|(
name|Font
operator|.
name|TYPE1_FONT
argument_list|,
name|bis
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|bis
argument_list|)
expr_stmt|;
comment|// Parse the Type1 Font program in order to extract Glyph Width
name|COSStream
name|streamObj
init|=
name|fontFile
operator|.
name|getStream
argument_list|()
decl_stmt|;
name|int
name|length1
init|=
name|streamObj
operator|.
name|getInt
argument_list|(
name|COSName
operator|.
name|LENGTH1
argument_list|)
decl_stmt|;
name|int
name|length2
init|=
name|streamObj
operator|.
name|getInt
argument_list|(
name|COSName
operator|.
name|LENGTH2
argument_list|)
decl_stmt|;
name|bis
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|fontFile
operator|.
name|getByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|Type1Parser
name|parserForMetrics
init|=
name|Type1Parser
operator|.
name|createParserWithEncodingObject
argument_list|(
name|bis
argument_list|,
name|length1
argument_list|,
name|length2
argument_list|,
operator|(
operator|(
name|PDSimpleFont
operator|)
name|font
operator|)
operator|.
name|getEncoding
argument_list|()
argument_list|)
decl_stmt|;
name|Type1
name|parsedData
init|=
name|parserForMetrics
operator|.
name|parse
argument_list|()
decl_stmt|;
name|this
operator|.
name|fContainer
operator|.
name|setType1Font
argument_list|(
name|parsedData
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|fContainer
operator|.
name|push
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_TYPE1_DAMAGED
argument_list|,
literal|"The FontFile can't be read for "
operator|+
name|font
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FontFormatException
name|e
parameter_list|)
block|{
name|this
operator|.
name|fContainer
operator|.
name|push
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_TYPE1_DAMAGED
argument_list|,
literal|"The FontFile is damaged for "
operator|+
name|font
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|bis
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Type1C is a CFF font format, extract all CFFFont object from the stream      *      * @return      * @throws ValidationException      */
specifier|protected
name|void
name|processFontFile3
parameter_list|(
name|PDFontDescriptor
name|fontDescriptor
parameter_list|,
name|PDStream
name|fontFile
parameter_list|)
block|{
try|try
block|{
name|CFFParser
name|cffParser
init|=
operator|new
name|CFFParser
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CFFFont
argument_list|>
name|lCFonts
init|=
name|cffParser
operator|.
name|parse
argument_list|(
name|fontFile
operator|.
name|getByteArray
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lCFonts
operator|==
literal|null
operator|||
name|lCFonts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|fContainer
operator|.
name|push
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_CID_DAMAGED
argument_list|,
literal|"The FontFile can't be read"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|fContainer
operator|.
name|setCFFFontObjects
argument_list|(
name|lCFonts
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|fContainer
operator|.
name|push
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_CID_DAMAGED
argument_list|,
literal|"The FontFile can't be read"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

