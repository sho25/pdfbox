begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|font
operator|.
name|container
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|ValidationResult
operator|.
name|ValidationError
import|;
end_import

begin_class
specifier|public
class|class
name|Type0Container
extends|extends
name|FontContainer
block|{
specifier|private
name|FontContainer
name|delegateFontContainer
decl_stmt|;
specifier|public
name|Type0Container
parameter_list|(
name|PDFont
name|font
parameter_list|)
block|{
name|super
argument_list|(
name|font
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setDelegateFontContainer
parameter_list|(
name|FontContainer
name|delegateFontContainer
parameter_list|)
block|{
name|this
operator|.
name|delegateFontContainer
operator|=
name|delegateFontContainer
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|ValidationError
argument_list|>
name|getAllErrors
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|delegateFontContainer
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|errorBuffer
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|delegateFontContainer
operator|.
name|getAllErrors
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|errorBuffer
return|;
block|}
specifier|public
name|boolean
name|isValid
parameter_list|()
block|{
name|boolean
name|result
init|=
operator|(
name|this
operator|.
name|errorBuffer
operator|.
name|isEmpty
argument_list|()
operator|&&
name|isEmbeddedFont
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|delegateFontContainer
operator|!=
literal|null
condition|)
block|{
name|result
operator|&=
name|this
operator|.
name|delegateFontContainer
operator|.
name|isValid
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|boolean
name|isEmbeddedFont
parameter_list|()
block|{
name|boolean
name|result
init|=
name|embeddedFont
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|delegateFontContainer
operator|!=
literal|null
condition|)
block|{
name|result
operator|&=
name|this
operator|.
name|delegateFontContainer
operator|.
name|isEmbeddedFont
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasGlyph
parameter_list|(
name|int
name|code
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|this
operator|.
name|delegateFontContainer
operator|.
name|hasGlyph
argument_list|(
name|code
argument_list|)
return|;
block|}
block|}
end_class

end_unit

