begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|font
operator|.
name|container
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDFontLike
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|ValidationResult
operator|.
name|ValidationError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|font
operator|.
name|util
operator|.
name|GlyphDetail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|font
operator|.
name|util
operator|.
name|GlyphException
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|FontContainer
parameter_list|<
name|T
extends|extends
name|PDFontLike
parameter_list|>
block|{
comment|/**      * List of validation errors that occur during the font validation. If the font is used by an object in the PDF, all      * these errors will be appended to the Error list of the PreflightContext.      */
specifier|protected
name|List
argument_list|<
name|ValidationError
argument_list|>
name|errorBuffer
init|=
operator|new
name|ArrayList
argument_list|<
name|ValidationError
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Boolean used to known if the font is embedded.      */
specifier|protected
name|boolean
name|embeddedFont
init|=
literal|true
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|GlyphDetail
argument_list|>
name|codeToDetail
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|GlyphDetail
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|errorsAlreadyMerged
init|=
literal|false
decl_stmt|;
comment|/**      * Font-like object.      */
specifier|protected
specifier|final
name|T
name|font
decl_stmt|;
specifier|public
name|FontContainer
parameter_list|(
name|T
name|font
parameter_list|)
block|{
name|this
operator|.
name|font
operator|=
name|font
expr_stmt|;
block|}
specifier|public
name|void
name|push
parameter_list|(
name|ValidationError
name|error
parameter_list|)
block|{
name|this
operator|.
name|errorBuffer
operator|.
name|add
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|push
parameter_list|(
name|List
argument_list|<
name|ValidationError
argument_list|>
name|errors
parameter_list|)
block|{
name|this
operator|.
name|errorBuffer
operator|.
name|addAll
argument_list|(
name|errors
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|ValidationError
argument_list|>
name|getAllErrors
parameter_list|()
block|{
return|return
name|this
operator|.
name|errorBuffer
return|;
block|}
specifier|public
name|boolean
name|isValid
parameter_list|()
block|{
return|return
name|this
operator|.
name|errorBuffer
operator|.
name|isEmpty
argument_list|()
operator|&&
name|isEmbeddedFont
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|errorsAleadyMerged
parameter_list|()
block|{
return|return
name|errorsAlreadyMerged
return|;
block|}
specifier|public
name|void
name|setErrorsAlreadyMerged
parameter_list|(
name|boolean
name|errorsAlreadyMerged
parameter_list|)
block|{
name|this
operator|.
name|errorsAlreadyMerged
operator|=
name|errorsAlreadyMerged
expr_stmt|;
block|}
specifier|public
name|boolean
name|isEmbeddedFont
parameter_list|()
block|{
return|return
name|embeddedFont
return|;
block|}
specifier|public
name|void
name|notEmbedded
parameter_list|()
block|{
name|this
operator|.
name|embeddedFont
operator|=
literal|false
expr_stmt|;
block|}
comment|/**      * Check that the Width or W entry in the PDF matches the widths in the embedded font program.      *      * @param code character code      * @throws GlyphException      */
specifier|public
name|void
name|checkGlyphWidth
parameter_list|(
name|int
name|code
parameter_list|)
throws|throws
name|GlyphException
block|{
if|if
condition|(
name|isAlreadyProcessed
argument_list|(
name|code
argument_list|)
condition|)
block|{
return|return;
block|}
try|try
block|{
comment|// check for missing glyphs
if|if
condition|(
operator|!
name|hasGlyph
argument_list|(
name|code
argument_list|)
condition|)
block|{
name|GlyphException
name|e
init|=
operator|new
name|GlyphException
argument_list|(
name|PreflightConstants
operator|.
name|ERROR_FONTS_GLYPH_MISSING
argument_list|,
name|code
argument_list|,
literal|"The character code "
operator|+
name|code
operator|+
literal|" in the font program \""
operator|+
name|font
operator|.
name|getName
argument_list|()
operator|+
literal|"\" is missing from the Character Encoding"
argument_list|)
decl_stmt|;
name|markAsInvalid
argument_list|(
name|code
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
comment|// check widths
name|float
name|expectedWidth
init|=
name|font
operator|.
name|getWidth
argument_list|(
name|code
argument_list|)
decl_stmt|;
name|float
name|foundWidth
init|=
name|font
operator|.
name|getWidthFromFont
argument_list|(
name|code
argument_list|)
decl_stmt|;
name|checkWidthsConsistency
argument_list|(
name|code
argument_list|,
name|expectedWidth
argument_list|,
name|foundWidth
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GlyphException
argument_list|(
name|PreflightConstants
operator|.
name|ERROR_FONTS_GLYPH
argument_list|,
name|code
argument_list|,
literal|"Unexpected error during the width validation for the character code "
operator|+
name|code
operator|+
literal|" : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * Checks if the embedded font contains a glyph for the given character code.      *      * @param code character code      */
specifier|protected
specifier|abstract
name|boolean
name|hasGlyph
parameter_list|(
name|int
name|code
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Check if the given character code has already been processed.      *       * @param code character code      * @return true if the CID has previously been marked as valid, false otherwise      * @throws GlyphException if the code has previously been marked as invalid // TODO useful ??      */
specifier|private
name|boolean
name|isAlreadyProcessed
parameter_list|(
name|int
name|code
parameter_list|)
throws|throws
name|GlyphException
block|{
name|boolean
name|already
init|=
literal|false
decl_stmt|;
name|GlyphDetail
name|detail
init|=
name|codeToDetail
operator|.
name|get
argument_list|(
name|code
argument_list|)
decl_stmt|;
if|if
condition|(
name|detail
operator|!=
literal|null
condition|)
block|{
name|detail
operator|.
name|throwExceptionIfNotValid
argument_list|()
expr_stmt|;
name|already
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|already
return|;
block|}
comment|/**      * Test if both widths are consistent. At the end of this method, the CID is      * marked as valid or invalid.      *      * @param code character code      * @param expectedWidth expected with given in the PDF file      * @param foundWidth the glyph width found in the font program, a negative      * value if the CID is missing from the font.      * @throws GlyphException the appropriate exception if the CID is invalid.      */
specifier|private
name|void
name|checkWidthsConsistency
parameter_list|(
name|int
name|code
parameter_list|,
name|float
name|expectedWidth
parameter_list|,
name|float
name|foundWidth
parameter_list|)
throws|throws
name|GlyphException
block|{
comment|// consistent is defined to be a difference of no more than 1/1000 unit.
if|if
condition|(
name|Math
operator|.
name|abs
argument_list|(
name|foundWidth
operator|-
name|expectedWidth
argument_list|)
operator|>
literal|1
condition|)
block|{
name|GlyphException
name|e
init|=
operator|new
name|GlyphException
argument_list|(
name|PreflightConstants
operator|.
name|ERROR_FONTS_METRICS
argument_list|,
name|code
argument_list|,
literal|"Width ("
operator|+
name|foundWidth
operator|+
literal|") of the character \""
operator|+
name|code
operator|+
literal|"\" in the font program \""
operator|+
name|this
operator|.
name|font
operator|.
name|getName
argument_list|()
operator|+
literal|"\" is inconsistent with the width ("
operator|+
name|expectedWidth
operator|+
literal|") in the PDF dictionary."
argument_list|)
decl_stmt|;
name|markAsInvalid
argument_list|(
name|code
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|markAsValid
argument_list|(
name|code
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|markAsValid
parameter_list|(
name|int
name|code
parameter_list|)
block|{
name|this
operator|.
name|codeToDetail
operator|.
name|put
argument_list|(
name|code
argument_list|,
operator|new
name|GlyphDetail
argument_list|(
name|code
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|markAsInvalid
parameter_list|(
name|int
name|code
parameter_list|,
name|GlyphException
name|e
parameter_list|)
block|{
name|this
operator|.
name|codeToDetail
operator|.
name|put
argument_list|(
name|code
argument_list|,
operator|new
name|GlyphDetail
argument_list|(
name|code
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

