begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSObjectKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|action
operator|.
name|PDAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|action
operator|.
name|PDActionGoTo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|action
operator|.
name|PDActionHide
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|action
operator|.
name|PDActionImportData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|action
operator|.
name|PDActionJavaScript
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|action
operator|.
name|PDActionLaunch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|action
operator|.
name|PDActionMovie
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|action
operator|.
name|PDActionNamed
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|action
operator|.
name|PDActionRemoteGoTo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|action
operator|.
name|PDActionResetForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|action
operator|.
name|PDActionSound
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|action
operator|.
name|PDActionSubmitForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|action
operator|.
name|PDActionThread
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|action
operator|.
name|PDActionURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|ValidationResult
operator|.
name|ValidationError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|exception
operator|.
name|ValidationException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|ACTION_DICTIONARY_VALUE_ATYPE_NOOP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|ACTION_DICTIONARY_VALUE_ATYPE_SETSTATE
import|;
end_import

begin_class
specifier|public
class|class
name|ActionManagerFactory
block|{
comment|/**      * This method extract actions from the given dictionary. An action is identified by the following entries :      *<UL>      *<li>A (Action) : Available in Annotations, Outline items      *<li>OpenAction (OpenAction) : Available in the Catalog dictionary      *<li>AA (Additional Action) : Available in the Catalog dictionary, Annotations, Pages      *</UL>      *       * If there are no action, an empty list is returned.      *       * @param ctx the preflight context.      * @param dictionary the dictionary to retrieve the actions from.      * @return the list of actions from the given dictionary.      * @throws ValidationException      */
specifier|public
specifier|final
name|List
argument_list|<
name|AbstractActionManager
argument_list|>
name|getActionManagers
parameter_list|(
name|PreflightContext
name|ctx
parameter_list|,
name|COSDictionary
name|dictionary
parameter_list|)
throws|throws
name|ValidationException
block|{
name|List
argument_list|<
name|AbstractActionManager
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|COSObjectKey
argument_list|,
name|Boolean
argument_list|>
name|alreadyCreated
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|COSBase
name|aDict
init|=
name|dictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|A
argument_list|)
decl_stmt|;
if|if
condition|(
name|aDict
operator|!=
literal|null
condition|)
block|{
name|callCreateAction
argument_list|(
name|aDict
argument_list|,
name|ctx
argument_list|,
name|result
argument_list|,
name|alreadyCreated
argument_list|)
expr_stmt|;
block|}
name|COSBase
name|oaDict
init|=
name|dictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|OPEN_ACTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|oaDict
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|oaDict
operator|instanceof
name|COSArray
operator|)
condition|)
block|{
name|callCreateAction
argument_list|(
name|oaDict
argument_list|,
name|ctx
argument_list|,
name|result
argument_list|,
name|alreadyCreated
argument_list|)
expr_stmt|;
block|}
comment|// else nothing to do because an array contains a Destination and not an Action.
name|COSDictionary
name|aaDict
init|=
name|dictionary
operator|.
name|getCOSDictionary
argument_list|(
name|COSName
operator|.
name|AA
argument_list|)
decl_stmt|;
if|if
condition|(
name|aaDict
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|COSName
name|name
range|:
name|aaDict
operator|.
name|keySet
argument_list|()
control|)
block|{
name|callCreateAction
argument_list|(
name|aaDict
operator|.
name|getDictionaryObject
argument_list|(
name|name
argument_list|)
argument_list|,
name|ctx
argument_list|,
name|result
argument_list|,
name|name
operator|.
name|getName
argument_list|()
argument_list|,
name|alreadyCreated
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**      * Call the callCreateAction(COSBase, COSDocument, List<ActionManager>, String) method with null as isAA parameter.      *       * @param aDict      *            a COSBase object (COSObject or COSDictionary) which represent the action dictionary.      * @param ctx      *            the preflight context.      * @param result      *            the list of ActionManager to updated if the aDict parameter is valid.      * @param alreadyCreated      *            This map is used to know if an Action has already been validated. It is useful to avoid infinite loop      *            in an action which has a Next entry.      * @throws ValidationException      */
specifier|private
name|void
name|callCreateAction
parameter_list|(
name|COSBase
name|aDict
parameter_list|,
name|PreflightContext
name|ctx
parameter_list|,
name|List
argument_list|<
name|AbstractActionManager
argument_list|>
name|result
parameter_list|,
name|Map
argument_list|<
name|COSObjectKey
argument_list|,
name|Boolean
argument_list|>
name|alreadyCreated
parameter_list|)
throws|throws
name|ValidationException
block|{
name|callCreateAction
argument_list|(
name|aDict
argument_list|,
name|ctx
argument_list|,
name|result
argument_list|,
literal|null
argument_list|,
name|alreadyCreated
argument_list|)
expr_stmt|;
block|}
comment|/**      * Call the create action to add the ActionManager to the result list. If the aDict parameter isn't an instance of      * COSDictionary, this method throws a ValdiationException. If the aDict parameter is a reference to a      * COSDicitonary, the action manager is create only if the linked COSObjectKey is missing from the "alreadyCreated"      * map, in this case the action is added to the map. If the aDict parameter is an instance of COSDIctionary, it is      * impossible to check if the ActionManager already exists in the "alreadyCreated" map.      *       * @param aDict      *            a COSBase object (COSObject or COSDictionary) which represent the action dictionary.      * @param ctx      *            the preflight validation context.      * @param result      *            the list of ActionManager to updated if the aDict parameter is valid.      * @param additionActionKey      *            the Action identifier if it is an additional action      * @param alreadyCreated      *            This map is used to know if an Action has already been validated. It is useful to avoid infinite loop      *            in an action which has a Next entry.      * @throws ValidationException      */
specifier|private
name|void
name|callCreateAction
parameter_list|(
name|COSBase
name|aDict
parameter_list|,
name|PreflightContext
name|ctx
parameter_list|,
name|List
argument_list|<
name|AbstractActionManager
argument_list|>
name|result
parameter_list|,
name|String
name|additionActionKey
parameter_list|,
name|Map
argument_list|<
name|COSObjectKey
argument_list|,
name|Boolean
argument_list|>
name|alreadyCreated
parameter_list|)
throws|throws
name|ValidationException
block|{
if|if
condition|(
name|aDict
operator|instanceof
name|COSDictionary
operator|||
name|aDict
operator|instanceof
name|COSObject
operator|&&
operator|(
operator|(
name|COSObject
operator|)
name|aDict
operator|)
operator|.
name|getObject
argument_list|()
operator|instanceof
name|COSDictionary
condition|)
block|{
if|if
condition|(
name|aDict
operator|instanceof
name|COSObject
condition|)
block|{
name|COSObjectKey
name|cok
init|=
operator|new
name|COSObjectKey
argument_list|(
operator|(
name|COSObject
operator|)
name|aDict
argument_list|)
decl_stmt|;
name|COSDictionary
name|indirectDict
init|=
call|(
name|COSDictionary
call|)
argument_list|(
operator|(
name|COSObject
operator|)
name|aDict
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|alreadyCreated
operator|.
name|containsKey
argument_list|(
name|cok
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|createActionManager
argument_list|(
name|ctx
argument_list|,
name|indirectDict
argument_list|,
name|additionActionKey
argument_list|)
argument_list|)
expr_stmt|;
name|alreadyCreated
operator|.
name|put
argument_list|(
name|cok
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|result
operator|.
name|add
argument_list|(
name|createActionManager
argument_list|(
name|ctx
argument_list|,
operator|(
name|COSDictionary
operator|)
name|aDict
argument_list|,
name|additionActionKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|ctx
operator|.
name|addValidationError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|PreflightConstants
operator|.
name|ERROR_ACTION_INVALID_TYPE
argument_list|,
literal|"Action entry isn't an instance of COSDictionary"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns all actions contained by the Next entry. If the action dictionary doesn't have Next action, the result is      * an empty list.      *       * @param ctx the preflight context.      * @param actionDictionary the dictionary to retrieve the actions from.      * @return the list of actions from the given dictionary.      * @throws ValidationException      */
specifier|public
specifier|final
name|List
argument_list|<
name|AbstractActionManager
argument_list|>
name|getNextActions
parameter_list|(
name|PreflightContext
name|ctx
parameter_list|,
name|COSDictionary
name|actionDictionary
parameter_list|)
throws|throws
name|ValidationException
block|{
name|List
argument_list|<
name|AbstractActionManager
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|COSObjectKey
argument_list|,
name|Boolean
argument_list|>
name|alreadyCreated
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|COSBase
name|nextDict
init|=
name|actionDictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|NEXT
argument_list|)
decl_stmt|;
if|if
condition|(
name|nextDict
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|nextDict
operator|instanceof
name|COSArray
condition|)
block|{
name|COSArray
name|array
init|=
operator|(
name|COSArray
operator|)
name|nextDict
decl_stmt|;
comment|// ---- Next may contains an array of Action dictionary
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|callCreateAction
argument_list|(
name|array
operator|.
name|getObject
argument_list|(
name|i
argument_list|)
argument_list|,
name|ctx
argument_list|,
name|result
argument_list|,
name|alreadyCreated
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// ---- Next field contains a Dictionary or a reference to a Dictionary
name|callCreateAction
argument_list|(
name|nextDict
argument_list|,
name|ctx
argument_list|,
name|result
argument_list|,
name|alreadyCreated
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**      * Create an instance of ActionManager according to the value of the S entry. If the type entry isn't Action, a      * ValidationException will be thrown.      *       * If the action type isn't authorized in a PDF/A file, an instance of InvalidAction is returned.      *       * @param ctx the preflight context.      * @param action      *            the action dictionary used to instantiate the ActionManager      * @param aaKey      *            the Action identifier if it is an additional action      * @return the ActionManager instance.      * @throws ValidationException      */
specifier|protected
name|AbstractActionManager
name|createActionManager
parameter_list|(
name|PreflightContext
name|ctx
parameter_list|,
name|COSDictionary
name|action
parameter_list|,
name|String
name|aaKey
parameter_list|)
throws|throws
name|ValidationException
block|{
name|String
name|type
init|=
name|action
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
operator|&&
operator|!
name|PDAction
operator|.
name|TYPE
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ValidationException
argument_list|(
literal|"The given dictionary isn't the dictionary of an Action"
argument_list|)
throw|;
block|}
comment|// ---- S is a mandatory fields. If S entry is missing, the return will
comment|// return the InvalidAction manager
name|String
name|s
init|=
name|action
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|S
argument_list|)
decl_stmt|;
comment|// --- Here is authorized actions
if|if
condition|(
name|PDActionGoTo
operator|.
name|SUB_TYPE
operator|.
name|equals
argument_list|(
name|s
argument_list|)
condition|)
block|{
return|return
operator|new
name|GoToAction
argument_list|(
name|this
argument_list|,
name|action
argument_list|,
name|ctx
argument_list|,
name|aaKey
argument_list|)
return|;
block|}
if|if
condition|(
name|PDActionRemoteGoTo
operator|.
name|SUB_TYPE
operator|.
name|equals
argument_list|(
name|s
argument_list|)
condition|)
block|{
return|return
operator|new
name|GoToRemoteAction
argument_list|(
name|this
argument_list|,
name|action
argument_list|,
name|ctx
argument_list|,
name|aaKey
argument_list|)
return|;
block|}
if|if
condition|(
name|PDActionThread
operator|.
name|SUB_TYPE
operator|.
name|equals
argument_list|(
name|s
argument_list|)
condition|)
block|{
return|return
operator|new
name|ThreadAction
argument_list|(
name|this
argument_list|,
name|action
argument_list|,
name|ctx
argument_list|,
name|aaKey
argument_list|)
return|;
block|}
if|if
condition|(
name|PDActionURI
operator|.
name|SUB_TYPE
operator|.
name|equals
argument_list|(
name|s
argument_list|)
condition|)
block|{
return|return
operator|new
name|UriAction
argument_list|(
name|this
argument_list|,
name|action
argument_list|,
name|ctx
argument_list|,
name|aaKey
argument_list|)
return|;
block|}
if|if
condition|(
name|PDActionHide
operator|.
name|SUB_TYPE
operator|.
name|equals
argument_list|(
name|s
argument_list|)
condition|)
block|{
return|return
operator|new
name|HideAction
argument_list|(
name|this
argument_list|,
name|action
argument_list|,
name|ctx
argument_list|,
name|aaKey
argument_list|)
return|;
block|}
if|if
condition|(
name|PDActionNamed
operator|.
name|SUB_TYPE
operator|.
name|equals
argument_list|(
name|s
argument_list|)
condition|)
block|{
return|return
operator|new
name|NamedAction
argument_list|(
name|this
argument_list|,
name|action
argument_list|,
name|ctx
argument_list|,
name|aaKey
argument_list|)
return|;
block|}
if|if
condition|(
name|PDActionSubmitForm
operator|.
name|SUB_TYPE
operator|.
name|equals
argument_list|(
name|s
argument_list|)
condition|)
block|{
return|return
operator|new
name|SubmitAction
argument_list|(
name|this
argument_list|,
name|action
argument_list|,
name|ctx
argument_list|,
name|aaKey
argument_list|)
return|;
block|}
comment|// --- Here is forbidden actions
if|if
condition|(
name|PDActionLaunch
operator|.
name|SUB_TYPE
operator|.
name|equals
argument_list|(
name|s
argument_list|)
operator|||
name|PDActionSound
operator|.
name|SUB_TYPE
operator|.
name|equals
argument_list|(
name|s
argument_list|)
operator|||
name|PDActionMovie
operator|.
name|SUB_TYPE
operator|.
name|equals
argument_list|(
name|s
argument_list|)
operator|||
name|PDActionResetForm
operator|.
name|SUB_TYPE
operator|.
name|equals
argument_list|(
name|s
argument_list|)
operator|||
name|PDActionImportData
operator|.
name|SUB_TYPE
operator|.
name|equals
argument_list|(
name|s
argument_list|)
operator|||
name|PDActionJavaScript
operator|.
name|SUB_TYPE
operator|.
name|equals
argument_list|(
name|s
argument_list|)
operator|||
name|ACTION_DICTIONARY_VALUE_ATYPE_SETSTATE
operator|.
name|equals
argument_list|(
name|s
argument_list|)
operator|||
name|ACTION_DICTIONARY_VALUE_ATYPE_NOOP
operator|.
name|equals
argument_list|(
name|s
argument_list|)
condition|)
block|{
return|return
operator|new
name|InvalidAction
argument_list|(
name|this
argument_list|,
name|action
argument_list|,
name|ctx
argument_list|,
name|aaKey
argument_list|,
name|s
argument_list|)
return|;
block|}
comment|// ---- The default ActionManager is the undefined one.
comment|// Actions defined in a PDF Reference greater than 1.4 will be considered as
comment|// Undefined actions, here the list of new actions until the PDF 1.6 :
comment|// # GoToE (1.6) : Not PDF/A, uses EmbeddedFiles.
comment|// # SetOCGState (1.5) : Not PDF/A, uses optional content.
comment|// # Rendition (1.5) : Not PDF/A, use multimedia content.
comment|// # Trans (1.5) : ??
comment|// # GoTo3DView (1.6) : ??
return|return
operator|new
name|UndefAction
argument_list|(
name|this
argument_list|,
name|action
argument_list|,
name|ctx
argument_list|,
name|aaKey
argument_list|,
name|s
argument_list|)
return|;
block|}
block|}
end_class

end_unit

