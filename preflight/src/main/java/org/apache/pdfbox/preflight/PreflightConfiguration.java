begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|action
operator|.
name|ActionManagerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|annotation
operator|.
name|AnnotationValidatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|annotation
operator|.
name|pdfa
operator|.
name|PDFAbAnnotationFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|exception
operator|.
name|MissingValidationProcessException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|exception
operator|.
name|ValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|graphic
operator|.
name|ColorSpaceHelperFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|process
operator|.
name|AcroFormValidationProcess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|process
operator|.
name|BookmarkValidationProcess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|process
operator|.
name|CatalogValidationProcess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|process
operator|.
name|EmptyValidationProcess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|process
operator|.
name|FileSpecificationValidationProcess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|process
operator|.
name|MetadataValidationProcess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|process
operator|.
name|PageTreeValidationProcess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|process
operator|.
name|StreamValidationProcess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|process
operator|.
name|TrailerValidationProcess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|process
operator|.
name|ValidationProcess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|process
operator|.
name|XRefValidationProcess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|process
operator|.
name|reflect
operator|.
name|ActionsValidationProcess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|process
operator|.
name|reflect
operator|.
name|AnnotationValidationProcess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|process
operator|.
name|reflect
operator|.
name|DestinationValidationProcess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|process
operator|.
name|reflect
operator|.
name|ExtGStateValidationProcess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|process
operator|.
name|reflect
operator|.
name|FontValidationProcess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|process
operator|.
name|reflect
operator|.
name|GraphicObjectPageValidationProcess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|process
operator|.
name|reflect
operator|.
name|ResourcesValidationProcess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|process
operator|.
name|reflect
operator|.
name|ShaddingPatternValidationProcess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|process
operator|.
name|reflect
operator|.
name|SinglePageValidationProcess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|process
operator|.
name|reflect
operator|.
name|TilingPatternValidationProcess
import|;
end_import

begin_class
specifier|public
class|class
name|PreflightConfiguration
block|{
comment|// TODO documentation
specifier|public
specifier|static
specifier|final
name|String
name|CATALOG_PROCESS
init|=
literal|"catalog-process"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|STREAM_PROCESS
init|=
literal|"stream-process"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TRAILER_PROCESS
init|=
literal|"trailer-process"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|XREF_PROCESS
init|=
literal|"xref-process"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|BOOKMARK_PROCESS
init|=
literal|"bookmark-process"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ACRO_FORM_PROCESS
init|=
literal|"acro-form-process"
decl_stmt|;
comment|// MayBe rename in Interactive Object validation
specifier|public
specifier|static
specifier|final
name|String
name|FILE_SPECIF_PROCESS
init|=
literal|"file-specification-process"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PAGES_TREE_PROCESS
init|=
literal|"pages-tree-process"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|META_DATA_PROCESS
init|=
literal|"metadata-process"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PAGE_PROCESS
init|=
literal|"page-process"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|RESOURCES_PROCESS
init|=
literal|"resources-process"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ACTIONS_PROCESS
init|=
literal|"actions-process"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ANNOTATIONS_PROCESS
init|=
literal|"annotations-process"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|GRAPHIC_PROCESS
init|=
literal|"graphic-process"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|FONT_PROCESS
init|=
literal|"font-process"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|EXTGSTATE_PROCESS
init|=
literal|"extgstate-process"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SHADDING_PATTERN_PROCESS
init|=
literal|"shadding-pattern-process"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TILING_PATTERN_PROCESS
init|=
literal|"tiling-pattern-process"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DESTINATION_PROCESS
init|=
literal|"destination-process"
decl_stmt|;
comment|/*      * TODO other configuration option should be possible : - skip some validation process ? - ???      */
comment|/**      * Boolean to know if an exception must be thrown if a ValidationProcess is missing.      */
specifier|private
name|boolean
name|errorOnMissingProcess
init|=
literal|true
decl_stmt|;
comment|/**      * Boolean to know mark some error as a Warning, if the validation result contains only warning the validation is      * successful      */
specifier|private
name|boolean
name|lazyValidation
init|=
literal|false
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|ValidationProcess
argument_list|>
argument_list|>
name|processes
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|ValidationProcess
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// TODO use annotation to mark these validation processes as inner page validation and factorize the access method
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|ValidationProcess
argument_list|>
argument_list|>
name|innerProcesses
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|ValidationProcess
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Define the AnnotationFactory used by ValidationProcess      */
specifier|private
name|AnnotationValidatorFactory
name|annotFact
decl_stmt|;
comment|/**      * Define the ActionManagerFactory used by ValidationProcess      */
specifier|private
name|ActionManagerFactory
name|actionFact
decl_stmt|;
comment|/**      * Define the ColorSpaceHelperFactory used by the validationProcess.      */
specifier|private
name|ColorSpaceHelperFactory
name|colorSpaceHelperFact
decl_stmt|;
specifier|public
specifier|static
name|PreflightConfiguration
name|createPdfA1BConfiguration
parameter_list|()
block|{
name|PreflightConfiguration
name|configuration
init|=
operator|new
name|PreflightConfiguration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|replaceProcess
argument_list|(
name|CATALOG_PROCESS
argument_list|,
name|CatalogValidationProcess
operator|.
name|class
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|replaceProcess
argument_list|(
name|FILE_SPECIF_PROCESS
argument_list|,
name|FileSpecificationValidationProcess
operator|.
name|class
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|replaceProcess
argument_list|(
name|TRAILER_PROCESS
argument_list|,
name|TrailerValidationProcess
operator|.
name|class
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|replaceProcess
argument_list|(
name|XREF_PROCESS
argument_list|,
name|XRefValidationProcess
operator|.
name|class
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|replaceProcess
argument_list|(
name|ACRO_FORM_PROCESS
argument_list|,
name|AcroFormValidationProcess
operator|.
name|class
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|replaceProcess
argument_list|(
name|BOOKMARK_PROCESS
argument_list|,
name|BookmarkValidationProcess
operator|.
name|class
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|replaceProcess
argument_list|(
name|PAGES_TREE_PROCESS
argument_list|,
name|PageTreeValidationProcess
operator|.
name|class
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|replaceProcess
argument_list|(
name|META_DATA_PROCESS
argument_list|,
name|MetadataValidationProcess
operator|.
name|class
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|replaceProcess
argument_list|(
name|STREAM_PROCESS
argument_list|,
name|StreamValidationProcess
operator|.
name|class
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|replacePageProcess
argument_list|(
name|PAGE_PROCESS
argument_list|,
name|SinglePageValidationProcess
operator|.
name|class
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|replacePageProcess
argument_list|(
name|EXTGSTATE_PROCESS
argument_list|,
name|ExtGStateValidationProcess
operator|.
name|class
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|replacePageProcess
argument_list|(
name|SHADDING_PATTERN_PROCESS
argument_list|,
name|ShaddingPatternValidationProcess
operator|.
name|class
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|replacePageProcess
argument_list|(
name|GRAPHIC_PROCESS
argument_list|,
name|GraphicObjectPageValidationProcess
operator|.
name|class
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|replacePageProcess
argument_list|(
name|TILING_PATTERN_PROCESS
argument_list|,
name|TilingPatternValidationProcess
operator|.
name|class
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|replacePageProcess
argument_list|(
name|RESOURCES_PROCESS
argument_list|,
name|ResourcesValidationProcess
operator|.
name|class
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|replacePageProcess
argument_list|(
name|FONT_PROCESS
argument_list|,
name|FontValidationProcess
operator|.
name|class
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|replacePageProcess
argument_list|(
name|ACTIONS_PROCESS
argument_list|,
name|ActionsValidationProcess
operator|.
name|class
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|replacePageProcess
argument_list|(
name|ANNOTATIONS_PROCESS
argument_list|,
name|AnnotationValidationProcess
operator|.
name|class
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|replacePageProcess
argument_list|(
name|DESTINATION_PROCESS
argument_list|,
name|DestinationValidationProcess
operator|.
name|class
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|actionFact
operator|=
operator|new
name|ActionManagerFactory
argument_list|()
expr_stmt|;
name|configuration
operator|.
name|annotFact
operator|=
operator|new
name|PDFAbAnnotationFactory
argument_list|()
expr_stmt|;
name|configuration
operator|.
name|colorSpaceHelperFact
operator|=
operator|new
name|ColorSpaceHelperFactory
argument_list|()
expr_stmt|;
return|return
name|configuration
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getProcessNames
parameter_list|()
block|{
return|return
name|this
operator|.
name|processes
operator|.
name|keySet
argument_list|()
return|;
block|}
comment|/**      * Return the validation process linked with the given name      *       * @param processName      * @return an instance of validationProcess, null if it doesn't exist and if the errorOnMissingProcess is false      * @throws MissingValidationProcessException      *             if the Process doesn't exist (errorOnMissingProcess is true)      */
specifier|public
name|ValidationProcess
name|getInstanceOfProcess
parameter_list|(
name|String
name|processName
parameter_list|)
throws|throws
name|MissingValidationProcessException
throws|,
name|ValidationException
block|{
name|Class
argument_list|<
name|?
extends|extends
name|ValidationProcess
argument_list|>
name|clazz
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|processes
operator|.
name|containsKey
argument_list|(
name|processName
argument_list|)
condition|)
block|{
name|clazz
operator|=
name|processes
operator|.
name|get
argument_list|(
name|processName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|innerProcesses
operator|.
name|containsKey
argument_list|(
name|processName
argument_list|)
condition|)
block|{
name|clazz
operator|=
name|innerProcesses
operator|.
name|get
argument_list|(
name|processName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|errorOnMissingProcess
condition|)
block|{
throw|throw
operator|new
name|MissingValidationProcessException
argument_list|(
name|processName
argument_list|)
throw|;
block|}
else|else
block|{
return|return
operator|new
name|EmptyValidationProcess
argument_list|()
return|;
block|}
try|try
block|{
return|return
name|clazz
operator|.
name|newInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ValidationException
argument_list|(
name|processName
operator|+
literal|" can't be created"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ValidationException
argument_list|(
name|processName
operator|+
literal|" can't be created"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|replaceProcess
parameter_list|(
name|String
name|processName
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|ValidationProcess
argument_list|>
name|process
parameter_list|)
block|{
if|if
condition|(
name|process
operator|==
literal|null
condition|)
block|{
name|removeProcess
argument_list|(
name|processName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|processes
operator|.
name|put
argument_list|(
name|processName
argument_list|,
name|process
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|removeProcess
parameter_list|(
name|String
name|processName
parameter_list|)
block|{
name|this
operator|.
name|processes
operator|.
name|remove
argument_list|(
name|processName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getPageValidationProcessNames
parameter_list|()
block|{
return|return
name|this
operator|.
name|innerProcesses
operator|.
name|keySet
argument_list|()
return|;
block|}
specifier|public
name|void
name|replacePageProcess
parameter_list|(
name|String
name|processName
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|ValidationProcess
argument_list|>
name|process
parameter_list|)
block|{
if|if
condition|(
name|process
operator|==
literal|null
condition|)
block|{
name|removePageProcess
argument_list|(
name|processName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|innerProcesses
operator|.
name|put
argument_list|(
name|processName
argument_list|,
name|process
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|removePageProcess
parameter_list|(
name|String
name|processName
parameter_list|)
block|{
name|this
operator|.
name|innerProcesses
operator|.
name|remove
argument_list|(
name|processName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isErrorOnMissingProcess
parameter_list|()
block|{
return|return
name|errorOnMissingProcess
return|;
block|}
specifier|public
name|void
name|setErrorOnMissingProcess
parameter_list|(
name|boolean
name|errorOnMissingProcess
parameter_list|)
block|{
name|this
operator|.
name|errorOnMissingProcess
operator|=
name|errorOnMissingProcess
expr_stmt|;
block|}
specifier|public
name|boolean
name|isLazyValidation
parameter_list|()
block|{
return|return
name|lazyValidation
return|;
block|}
specifier|public
name|void
name|setLazyValidation
parameter_list|(
name|boolean
name|lazyValidation
parameter_list|)
block|{
name|this
operator|.
name|lazyValidation
operator|=
name|lazyValidation
expr_stmt|;
block|}
specifier|public
name|AnnotationValidatorFactory
name|getAnnotFact
parameter_list|()
block|{
return|return
name|annotFact
return|;
block|}
specifier|public
name|void
name|setAnnotFact
parameter_list|(
name|AnnotationValidatorFactory
name|annotFact
parameter_list|)
block|{
name|this
operator|.
name|annotFact
operator|=
name|annotFact
expr_stmt|;
block|}
specifier|public
name|ActionManagerFactory
name|getActionFact
parameter_list|()
block|{
return|return
name|actionFact
return|;
block|}
specifier|public
name|void
name|setActionFact
parameter_list|(
name|ActionManagerFactory
name|actionFact
parameter_list|)
block|{
name|this
operator|.
name|actionFact
operator|=
name|actionFact
expr_stmt|;
block|}
specifier|public
name|ColorSpaceHelperFactory
name|getColorSpaceHelperFact
parameter_list|()
block|{
return|return
name|colorSpaceHelperFact
return|;
block|}
specifier|public
name|void
name|setColorSpaceHelperFact
parameter_list|(
name|ColorSpaceHelperFactory
name|colorSpaceHelperFact
parameter_list|)
block|{
name|this
operator|.
name|colorSpaceHelperFact
operator|=
name|colorSpaceHelperFact
expr_stmt|;
block|}
block|}
end_class

end_unit

