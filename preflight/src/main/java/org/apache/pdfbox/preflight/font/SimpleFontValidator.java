begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|font
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDFontDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDFontDescriptorAFM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDFontDescriptorDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|ValidationResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|ValidationResult
operator|.
name|ValidationError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|exception
operator|.
name|ValidationException
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|SimpleFontValidator
extends|extends
name|AbstractFontValidator
block|{
specifier|protected
name|String
name|basefont
decl_stmt|;
specifier|protected
name|int
name|firstChar
decl_stmt|;
specifier|protected
name|int
name|lastChar
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|Float
argument_list|>
name|widths
decl_stmt|;
comment|/** 	 * The PdfBox font descriptor dictionary wrapper. 	 */
specifier|protected
name|PDFontDescriptor
name|pFontDesc
init|=
literal|null
decl_stmt|;
specifier|public
name|SimpleFontValidator
parameter_list|(
name|PreflightContext
name|context
parameter_list|,
name|PDFont
name|font
parameter_list|)
throws|throws
name|ValidationException
block|{
name|super
argument_list|(
name|context
argument_list|,
name|font
argument_list|)
expr_stmt|;
name|this
operator|.
name|pFontDesc
operator|=
name|font
operator|.
name|getFontDescriptor
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Extract element from the COSObject to avoid useless access to this object. 	 */
specifier|private
name|void
name|extractElementsToCheck
parameter_list|()
block|{
comment|// here is required elements
name|this
operator|.
name|basefont
operator|=
name|pFont
operator|.
name|getBaseFont
argument_list|()
expr_stmt|;
name|this
operator|.
name|firstChar
operator|=
name|pFont
operator|.
name|getFirstChar
argument_list|()
expr_stmt|;
name|this
operator|.
name|lastChar
operator|=
name|pFont
operator|.
name|getLastChar
argument_list|()
expr_stmt|;
name|this
operator|.
name|widths
operator|=
name|pFont
operator|.
name|getWidths
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Check if All required fields of a Font Dictionary are present. If there are 	 * some missing fields, this method returns false and the FontContainer is 	 * updated. 	 *  	 * @return 	 */
specifier|protected
name|boolean
name|checkMandatoryFields
parameter_list|()
block|{
name|String
name|type
init|=
name|pFont
operator|.
name|getBaseFont
argument_list|()
decl_stmt|;
name|String
name|subtype
init|=
name|pFont
operator|.
name|getSubType
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|pFontDesc
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_FONT_FILEX_INVALID
argument_list|,
literal|"The FontDescriptor is missing, so the Font Program isn't embedded."
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|fontContainer
operator|.
name|setFontProgramEmbedded
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|(
name|type
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|type
argument_list|)
operator|)
operator|||
operator|(
name|subtype
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|subtype
argument_list|)
operator|)
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_DICTIONARY_INVALID
argument_list|,
literal|"Type and/or Subtype keys are missing"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
name|extractElementsToCheck
argument_list|()
expr_stmt|;
comment|// ---- according to the subtype, the validation process isn't the same.
return|return
name|checkSpecificMandatoryFields
argument_list|()
return|;
block|}
block|}
comment|/** 	 * This method checks the presence of some fields according to the Font type 	 *  	 * @return 	 */
specifier|protected
specifier|abstract
name|boolean
name|checkSpecificMandatoryFields
parameter_list|()
function_decl|;
comment|/** 	 * Check if the widths array contains integer and if its length is valid. If 	 * the validation fails, the FontContainer is updated. 	 *  	 * @param cDoc 	 */
specifier|protected
name|boolean
name|checkWidthsArray
parameter_list|(
name|COSDocument
name|cDoc
parameter_list|)
block|{
if|if
condition|(
name|widths
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_DICTIONARY_INVALID
argument_list|,
literal|"The Widths array is unreachable"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|int
name|expectedLength
init|=
operator|(
name|lastChar
operator|-
name|firstChar
operator|)
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|widths
operator|.
name|size
argument_list|()
operator|!=
name|expectedLength
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_DICTIONARY_INVALID
argument_list|,
literal|"The length of Witdhs array is invalid. Expected : \""
operator|+
name|expectedLength
operator|+
literal|"\" Current : \""
operator|+
name|widths
operator|.
name|size
argument_list|()
operator|+
literal|"\""
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|protected
name|boolean
name|checkEncoding
parameter_list|(
name|COSDocument
name|cDoc
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
specifier|protected
name|boolean
name|checkToUnicode
parameter_list|(
name|COSDocument
name|cDoc
parameter_list|)
block|{
comment|// Check the toUnicode -- Useless for PDF/A 1-b
return|return
literal|true
return|;
block|}
comment|/** 	 * This method checks the font descriptor dictionary and embedded font files. 	 * If the FontDescriptor validation fails, the FontContainer is updated. 	 *  	 * @return 	 */
specifier|protected
specifier|abstract
name|boolean
name|checkFontDescriptor
parameter_list|()
throws|throws
name|ValidationException
function_decl|;
comment|/** 	 * Check if all required fields are present in the PDF file to describe the 	 * Font Descriptor. If validation fails, FontConatiner is updated and false is 	 * returned. 	 */
specifier|protected
name|boolean
name|checkFontDescriptorMandatoryFields
parameter_list|()
throws|throws
name|ValidationException
block|{
name|boolean
name|fname
init|=
literal|false
decl_stmt|,
name|flags
init|=
literal|false
decl_stmt|,
name|itangle
init|=
literal|false
decl_stmt|,
name|cheight
init|=
literal|false
decl_stmt|;
name|boolean
name|fbbox
init|=
literal|false
decl_stmt|,
name|asc
init|=
literal|false
decl_stmt|,
name|desc
init|=
literal|false
decl_stmt|,
name|stemv
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|pFontDesc
operator|instanceof
name|PDFontDescriptorDictionary
condition|)
block|{
name|COSDictionary
name|fDescriptor
init|=
operator|(
operator|(
name|PDFontDescriptorDictionary
operator|)
name|pFontDesc
operator|)
operator|.
name|getCOSDictionary
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|key
range|:
name|fDescriptor
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|key
operator|instanceof
name|COSName
operator|)
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationResult
operator|.
name|ValidationError
argument_list|(
name|PreflightConstants
operator|.
name|ERROR_SYNTAX_DICTIONARY_KEY_INVALID
argument_list|,
literal|"Invalid key in The font descriptor"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|String
name|cosName
init|=
operator|(
operator|(
name|COSName
operator|)
name|key
operator|)
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|cosName
operator|.
name|equals
argument_list|(
name|FONT_DICTIONARY_KEY_FONTNAME
argument_list|)
condition|)
block|{
name|fname
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|cosName
operator|.
name|equals
argument_list|(
name|FONT_DICTIONARY_KEY_FLAGS
argument_list|)
condition|)
block|{
name|flags
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|cosName
operator|.
name|equals
argument_list|(
name|FONT_DICTIONARY_KEY_ITALICANGLE
argument_list|)
condition|)
block|{
name|itangle
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|cosName
operator|.
name|equals
argument_list|(
name|FONT_DICTIONARY_KEY_CAPHEIGHT
argument_list|)
condition|)
block|{
name|cheight
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|cosName
operator|.
name|equals
argument_list|(
name|FONT_DICTIONARY_KEY_FONTBBOX
argument_list|)
condition|)
block|{
name|fbbox
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|cosName
operator|.
name|equals
argument_list|(
name|FONT_DICTIONARY_KEY_ASCENT
argument_list|)
condition|)
block|{
name|asc
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|cosName
operator|.
name|equals
argument_list|(
name|FONT_DICTIONARY_KEY_DESCENT
argument_list|)
condition|)
block|{
name|desc
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|cosName
operator|.
name|equals
argument_list|(
name|FONT_DICTIONARY_KEY_STEMV
argument_list|)
condition|)
block|{
name|stemv
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
operator|(
name|fname
operator|&&
name|flags
operator|&&
name|itangle
operator|&&
name|cheight
operator|&&
name|fbbox
operator|&&
name|asc
operator|&&
name|desc
operator|&&
name|stemv
operator|)
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_DESCRIPTOR_INVALID
argument_list|,
literal|"Some mandatory fields are missing"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|pFontDesc
operator|instanceof
name|PDFontDescriptorAFM
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|addError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_DESCRIPTOR_INVALID
argument_list|,
literal|"Font Descriptor is missing"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|ValidationException
argument_list|(
literal|"Invalid FontDescription object, expected PDFontDescriptorDictionary"
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
comment|/* 	 * (non-Javadoc) 	 *  	 * @see 	 * net.awl.edoc.pdfa.validation.font.FontValidator#validate(java.util.List) 	 */
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|ValidationException
block|{
name|COSDocument
name|cDoc
init|=
name|context
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocument
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|checkMandatoryFields
argument_list|()
condition|)
block|{
return|return ;
block|}
name|boolean
name|result
init|=
literal|true
decl_stmt|;
name|result
operator|=
name|result
operator|&&
name|checkWidthsArray
argument_list|(
name|cDoc
argument_list|)
expr_stmt|;
name|result
operator|=
name|result
operator|&&
name|checkFontDescriptor
argument_list|()
expr_stmt|;
name|result
operator|=
name|result
operator|&&
name|checkEncoding
argument_list|(
name|cDoc
argument_list|)
expr_stmt|;
name|result
operator|=
name|result
operator|&&
name|checkToUnicode
argument_list|(
name|cDoc
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

