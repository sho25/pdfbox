begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|process
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|ValidationResult
operator|.
name|ValidationError
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractProcess
implements|implements
name|ValidationProcess
block|{
specifier|protected
name|void
name|addValidationError
parameter_list|(
name|PreflightContext
name|ctx
parameter_list|,
name|ValidationError
name|error
parameter_list|)
block|{
name|ctx
operator|.
name|addValidationError
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|addValidationErrors
parameter_list|(
name|PreflightContext
name|ctx
parameter_list|,
name|List
argument_list|<
name|ValidationError
argument_list|>
name|errors
parameter_list|)
block|{
for|for
control|(
name|ValidationError
name|error
range|:
name|errors
control|)
block|{
name|addValidationError
argument_list|(
name|ctx
argument_list|,
name|error
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * PDFont loads embedded fonts in its constructor so we have to handle IOExceptions      * from PDFont and translate them into validation errors.      */
specifier|protected
name|void
name|addFontError
parameter_list|(
name|COSDictionary
name|dictionary
parameter_list|,
name|PreflightContext
name|context
parameter_list|,
name|IOException
name|e
parameter_list|)
block|{
name|COSName
name|type
init|=
name|dictionary
operator|.
name|getCOSName
argument_list|(
name|COSName
operator|.
name|TYPE
argument_list|,
name|COSName
operator|.
name|FONT
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|COSName
operator|.
name|FONT
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|addValidationError
argument_list|(
name|context
argument_list|,
operator|new
name|ValidationError
argument_list|(
name|PreflightConstants
operator|.
name|ERROR_FONTS_UNKNOWN_FONT_TYPE
argument_list|,
literal|"Expected 'Font' dictionary but found '"
operator|+
name|type
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|fontName
init|=
literal|"Unknown"
decl_stmt|;
if|if
condition|(
name|dictionary
operator|.
name|containsKey
argument_list|(
name|COSName
operator|.
name|BASE_FONT
argument_list|)
condition|)
block|{
name|fontName
operator|=
name|dictionary
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|BASE_FONT
argument_list|)
expr_stmt|;
block|}
name|COSName
name|subType
init|=
name|dictionary
operator|.
name|getCOSName
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|COSName
operator|.
name|TYPE1
operator|.
name|equals
argument_list|(
name|subType
argument_list|)
condition|)
block|{
name|addValidationError
argument_list|(
name|context
argument_list|,
operator|new
name|ValidationError
argument_list|(
name|PreflightConstants
operator|.
name|ERROR_FONTS_TYPE1_DAMAGED
argument_list|,
literal|"The FontFile can't be read for "
operator|+
name|fontName
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|COSName
operator|.
name|MM_TYPE1
operator|.
name|equals
argument_list|(
name|subType
argument_list|)
condition|)
block|{
name|addValidationError
argument_list|(
name|context
argument_list|,
operator|new
name|ValidationError
argument_list|(
name|PreflightConstants
operator|.
name|ERROR_FONTS_TYPE1_DAMAGED
argument_list|,
literal|"The FontFile can't be read for "
operator|+
name|fontName
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|COSName
operator|.
name|TRUE_TYPE
operator|.
name|equals
argument_list|(
name|subType
argument_list|)
condition|)
block|{
name|addValidationError
argument_list|(
name|context
argument_list|,
operator|new
name|ValidationError
argument_list|(
name|PreflightConstants
operator|.
name|ERROR_FONTS_TRUETYPE_DAMAGED
argument_list|,
literal|"The FontFile can't be read for "
operator|+
name|fontName
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|COSName
operator|.
name|TYPE3
operator|.
name|equals
argument_list|(
name|subType
argument_list|)
condition|)
block|{
name|addValidationError
argument_list|(
name|context
argument_list|,
operator|new
name|ValidationError
argument_list|(
name|PreflightConstants
operator|.
name|ERROR_FONTS_TYPE3_DAMAGED
argument_list|,
literal|"The FontFile can't be read for "
operator|+
name|fontName
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|COSName
operator|.
name|TYPE0
operator|.
name|equals
argument_list|(
name|subType
argument_list|)
condition|)
block|{
name|addValidationError
argument_list|(
name|context
argument_list|,
operator|new
name|ValidationError
argument_list|(
name|PreflightConstants
operator|.
name|ERROR_FONTS_CID_DAMAGED
argument_list|,
literal|"The FontFile can't be read for "
operator|+
name|fontName
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|COSName
operator|.
name|CID_FONT_TYPE0
operator|.
name|equals
argument_list|(
name|subType
argument_list|)
condition|)
block|{
name|addValidationError
argument_list|(
name|context
argument_list|,
operator|new
name|ValidationError
argument_list|(
name|PreflightConstants
operator|.
name|ERROR_FONTS_UNKNOWN_FONT_TYPE
argument_list|,
literal|"Unexpected CIDFontType0 descendant font for "
operator|+
name|fontName
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|COSName
operator|.
name|CID_FONT_TYPE2
operator|.
name|equals
argument_list|(
name|subType
argument_list|)
condition|)
block|{
name|addValidationError
argument_list|(
name|context
argument_list|,
operator|new
name|ValidationError
argument_list|(
name|PreflightConstants
operator|.
name|ERROR_FONTS_UNKNOWN_FONT_TYPE
argument_list|,
literal|"Unexpected CIDFontType2 descendant font for "
operator|+
name|fontName
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addValidationError
argument_list|(
name|context
argument_list|,
operator|new
name|ValidationError
argument_list|(
name|PreflightConstants
operator|.
name|ERROR_FONTS_UNKNOWN_FONT_TYPE
argument_list|,
literal|"Unknown font type for "
operator|+
name|fontName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

