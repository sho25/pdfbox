begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|process
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|ERROR_SYNTAX_STREAM_FX_KEYS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|ERROR_SYNTAX_STREAM_INVALID_FILTER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|ERROR_SYNTAX_STREAM_LENGTH_MISSING
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSObjectKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|ValidationResult
operator|.
name|ValidationError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|exception
operator|.
name|ValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|utils
operator|.
name|FilterHelper
import|;
end_import

begin_class
specifier|public
class|class
name|StreamValidationProcess
extends|extends
name|AbstractProcess
block|{
annotation|@
name|Override
specifier|public
name|void
name|validate
parameter_list|(
name|PreflightContext
name|ctx
parameter_list|)
throws|throws
name|ValidationException
block|{
name|COSDocument
name|cosDocument
init|=
name|ctx
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocument
argument_list|()
decl_stmt|;
comment|// get all keys with a positive offset in ascending order to read the pdf linear
name|List
argument_list|<
name|COSObjectKey
argument_list|>
name|objectKeys
init|=
name|cosDocument
operator|.
name|getXrefTable
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
comment|//
operator|.
name|filter
argument_list|(
name|e
lambda|->
name|e
operator|.
name|getValue
argument_list|()
operator|>
literal|0L
argument_list|)
comment|//
operator|.
name|sorted
argument_list|(
parameter_list|(
name|e1
parameter_list|,
name|e2
parameter_list|)
lambda|->
name|e1
operator|.
name|getValue
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
comment|//
operator|.
name|map
argument_list|(
name|Entry
operator|::
name|getKey
argument_list|)
comment|//
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|COSObjectKey
name|objectKey
range|:
name|objectKeys
control|)
block|{
comment|// If this object represents a Stream, the Dictionary must contain the Length key
name|COSBase
name|cBase
init|=
name|cosDocument
operator|.
name|getObjectFromPool
argument_list|(
name|objectKey
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|cBase
operator|instanceof
name|COSStream
condition|)
block|{
name|validateStreamObject
argument_list|(
name|ctx
argument_list|,
name|cBase
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|validateStreamObject
parameter_list|(
name|PreflightContext
name|context
parameter_list|,
name|COSBase
name|cObj
parameter_list|)
block|{
name|COSStream
name|streamObj
init|=
operator|(
name|COSStream
operator|)
name|cObj
decl_stmt|;
comment|// ---- Check dictionary entries
comment|// ---- Only the Length entry is mandatory
comment|// ---- In a PDF/A file, F, FFilter and FDecodeParms are forbidden
name|checkDictionaryEntries
argument_list|(
name|context
argument_list|,
name|streamObj
argument_list|)
expr_stmt|;
comment|// ---- Check the Filter value(s)
name|checkFilters
argument_list|(
name|streamObj
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
comment|/**      * This method checks if one of declared Filter is LZWdecode. If LZW is found, the result list is updated with an      * error code.      *       * @param stream the stream to check.      * @param context the preflight context.      */
specifier|protected
name|void
name|checkFilters
parameter_list|(
name|COSStream
name|stream
parameter_list|,
name|PreflightContext
name|context
parameter_list|)
block|{
name|COSBase
name|bFilter
init|=
name|stream
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|FILTER
argument_list|)
decl_stmt|;
if|if
condition|(
name|bFilter
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|bFilter
operator|instanceof
name|COSArray
condition|)
block|{
name|COSArray
name|afName
init|=
operator|(
name|COSArray
operator|)
name|bFilter
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|afName
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|FilterHelper
operator|.
name|isAuthorizedFilter
argument_list|(
name|context
argument_list|,
name|afName
operator|.
name|getString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|bFilter
operator|instanceof
name|COSName
condition|)
block|{
name|String
name|fName
init|=
operator|(
operator|(
name|COSName
operator|)
name|bFilter
operator|)
operator|.
name|getName
argument_list|()
decl_stmt|;
name|FilterHelper
operator|.
name|isAuthorizedFilter
argument_list|(
name|context
argument_list|,
name|fName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// ---- The filter type is invalid
name|addValidationError
argument_list|(
name|context
argument_list|,
operator|new
name|ValidationError
argument_list|(
name|ERROR_SYNTAX_STREAM_INVALID_FILTER
argument_list|,
literal|"Filter should be a Name or an Array"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// else Filter entry is optional
block|}
comment|/**      * Check dictionary entries. Only the Length entry is mandatory. In a PDF/A file, F, FFilter and FDecodeParms are      * forbidden      *       * @param context the preflight context.      * @param streamObj the stream to check.      */
specifier|protected
name|void
name|checkDictionaryEntries
parameter_list|(
name|PreflightContext
name|context
parameter_list|,
name|COSStream
name|streamObj
parameter_list|)
block|{
name|boolean
name|len
init|=
name|streamObj
operator|.
name|containsKey
argument_list|(
name|COSName
operator|.
name|LENGTH
argument_list|)
decl_stmt|;
name|boolean
name|f
init|=
name|streamObj
operator|.
name|containsKey
argument_list|(
name|COSName
operator|.
name|F
argument_list|)
decl_stmt|;
name|boolean
name|ffilter
init|=
name|streamObj
operator|.
name|containsKey
argument_list|(
name|COSName
operator|.
name|F_FILTER
argument_list|)
decl_stmt|;
name|boolean
name|fdecParams
init|=
name|streamObj
operator|.
name|containsKey
argument_list|(
name|COSName
operator|.
name|F_DECODE_PARMS
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|len
condition|)
block|{
name|addValidationError
argument_list|(
name|context
argument_list|,
operator|new
name|ValidationError
argument_list|(
name|ERROR_SYNTAX_STREAM_LENGTH_MISSING
argument_list|,
literal|"Stream length is missing"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|f
operator|||
name|ffilter
operator|||
name|fdecParams
condition|)
block|{
name|addValidationError
argument_list|(
name|context
argument_list|,
operator|new
name|ValidationError
argument_list|(
name|ERROR_SYNTAX_STREAM_FX_KEYS
argument_list|,
literal|"F, FFilter or FDecodeParms keys are present in the stream dictionary"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

