begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|font
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|ERROR_FONTS_CIDKEYED_CIDTOGID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|ERROR_FONTS_CIDKEYED_SYSINFO
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|ERROR_FONTS_DICTIONARY_INVALID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|FONT_DICTIONARY_VALUE_CMAP_IDENTITY
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDCIDFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|ValidationResult
operator|.
name|ValidationError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|font
operator|.
name|container
operator|.
name|FontContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|utils
operator|.
name|COSUtils
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|DescendantFontValidator
parameter_list|<
name|T
extends|extends
name|FontContainer
parameter_list|>
extends|extends
name|SimpleFontValidator
argument_list|<
name|T
argument_list|>
block|{
specifier|protected
name|COSDocument
name|cosDocument
init|=
literal|null
decl_stmt|;
specifier|public
name|DescendantFontValidator
parameter_list|(
name|PreflightContext
name|context
parameter_list|,
name|PDCIDFont
name|font
parameter_list|,
name|T
name|fContainer
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|font
argument_list|,
name|font
operator|.
name|getCOSObject
argument_list|()
argument_list|,
name|fContainer
argument_list|)
expr_stmt|;
name|cosDocument
operator|=
name|context
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocument
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|checkMandatoryField
parameter_list|()
block|{
name|boolean
name|arePresent
init|=
name|fontDictionary
operator|.
name|containsKey
argument_list|(
name|COSName
operator|.
name|TYPE
argument_list|)
decl_stmt|;
name|arePresent
operator|&=
name|fontDictionary
operator|.
name|containsKey
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|)
expr_stmt|;
name|arePresent
operator|&=
name|fontDictionary
operator|.
name|containsKey
argument_list|(
name|COSName
operator|.
name|BASE_FONT
argument_list|)
expr_stmt|;
name|arePresent
operator|&=
name|fontDictionary
operator|.
name|containsKey
argument_list|(
name|COSName
operator|.
name|CIDSYSTEMINFO
argument_list|)
expr_stmt|;
name|arePresent
operator|&=
name|fontDictionary
operator|.
name|containsKey
argument_list|(
name|COSName
operator|.
name|FONT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|arePresent
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|push
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_DICTIONARY_INVALID
argument_list|,
literal|"Required keys are missing"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|checkCIDSystemInfo
argument_list|(
name|fontDictionary
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|CIDSYSTEMINFO
argument_list|)
argument_list|)
expr_stmt|;
name|checkCIDToGIDMap
argument_list|(
name|fontDictionary
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|CID_TO_GID_MAP
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Check the content of the CIDSystemInfo dictionary. A CIDSystemInfo dictionary must contain :      *<UL>      *<li>a Name - Registry      *<li>a Name - Ordering      *<li>a Integer - Supplement      *</UL>      *       * @param sysinfo      */
specifier|protected
name|void
name|checkCIDSystemInfo
parameter_list|(
name|COSBase
name|sysinfo
parameter_list|)
block|{
name|COSDictionary
name|cidSysInfo
init|=
name|COSUtils
operator|.
name|getAsDictionary
argument_list|(
name|sysinfo
argument_list|,
name|cosDocument
argument_list|)
decl_stmt|;
if|if
condition|(
name|cidSysInfo
operator|!=
literal|null
condition|)
block|{
name|COSBase
name|reg
init|=
name|cidSysInfo
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|REGISTRY
argument_list|)
decl_stmt|;
name|COSBase
name|ord
init|=
name|cidSysInfo
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|ORDERING
argument_list|)
decl_stmt|;
name|COSBase
name|sup
init|=
name|cidSysInfo
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|SUPPLEMENT
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|COSUtils
operator|.
name|isString
argument_list|(
name|reg
argument_list|,
name|cosDocument
argument_list|)
operator|&&
name|COSUtils
operator|.
name|isString
argument_list|(
name|ord
argument_list|,
name|cosDocument
argument_list|)
operator|&&
name|COSUtils
operator|.
name|isInteger
argument_list|(
name|sup
argument_list|,
name|cosDocument
argument_list|)
operator|)
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|push
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_CIDKEYED_SYSINFO
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|this
operator|.
name|fontContainer
operator|.
name|push
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_CIDKEYED_SYSINFO
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This method checks the CIDtoGIDMap entry of the Font dictionary. call the      * {@linkplain #checkCIDToGIDMap(COSBase, boolean)} with right parameters      * according to the instance of DescendantFontValidator      *      * @param ctog      */
specifier|protected
specifier|abstract
name|void
name|checkCIDToGIDMap
parameter_list|(
name|COSBase
name|ctog
parameter_list|)
function_decl|;
comment|/**      * This method checks the CIDtoGIDMap entry of the Font dictionary. This      * element must be a Stream or a Name. If it is a name, it must be      * "Identity" otherwise, the PDF file isn't a PDF/A-1b.      *      * If the validation fails the list of errors in the FontContainer is      * updated.      *      * If the CIDtoGIDMap is a Stream, it is parsed as a CMap and the result is      * returned.      *      * @param ctog      * @param mandatory true for CIDType2 , false for CIDType0      * @return      */
specifier|protected
name|void
name|checkCIDToGIDMap
parameter_list|(
name|COSBase
name|ctog
parameter_list|,
name|boolean
name|mandatory
parameter_list|)
block|{
if|if
condition|(
name|COSUtils
operator|.
name|isString
argument_list|(
name|ctog
argument_list|,
name|cosDocument
argument_list|)
condition|)
block|{
comment|// ---- valid only if the string is Identity
name|String
name|ctogStr
init|=
name|COSUtils
operator|.
name|getAsString
argument_list|(
name|ctog
argument_list|,
name|cosDocument
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|FONT_DICTIONARY_VALUE_CMAP_IDENTITY
operator|.
name|equals
argument_list|(
name|ctogStr
argument_list|)
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|push
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_CIDKEYED_CIDTOGID
argument_list|,
literal|"The CIDToGID entry is invalid"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|COSUtils
operator|.
name|isStream
argument_list|(
name|ctog
argument_list|,
name|cosDocument
argument_list|)
condition|)
block|{
try|try
block|{
name|COSStream
name|stream
init|=
name|COSUtils
operator|.
name|getAsStream
argument_list|(
name|ctog
argument_list|,
name|cosDocument
argument_list|)
decl_stmt|;
comment|// todo: check the map's content? (won't pdfbox do this?)
name|InputStream
name|is
init|=
name|stream
operator|.
name|getUnfilteredStream
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|byte
index|[]
name|map
init|=
name|os
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// map can be invalid, return a Validation Error
name|this
operator|.
name|fontContainer
operator|.
name|push
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_CIDKEYED_CIDTOGID
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|mandatory
condition|)
block|{
name|this
operator|.
name|fontContainer
operator|.
name|push
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|ERROR_FONTS_CIDKEYED_CIDTOGID
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

