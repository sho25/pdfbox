begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|process
operator|.
name|reflect
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|FONT_DICTIONARY_VALUE_COMPOSITE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|FONT_DICTIONARY_VALUE_MMTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|FONT_DICTIONARY_VALUE_TRUETYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|FONT_DICTIONARY_VALUE_TYPE0
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|FONT_DICTIONARY_VALUE_TYPE0C
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|FONT_DICTIONARY_VALUE_TYPE1
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|FONT_DICTIONARY_VALUE_TYPE1C
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|FONT_DICTIONARY_VALUE_TYPE2
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
operator|.
name|FONT_DICTIONARY_VALUE_TYPE3
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDSimpleFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDTrueTypeFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDType3Font
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|exception
operator|.
name|ValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|font
operator|.
name|FontValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|font
operator|.
name|TrueTypeFontValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|font
operator|.
name|Type0FontValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|font
operator|.
name|Type1FontValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|font
operator|.
name|Type3FontValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|font
operator|.
name|container
operator|.
name|FontContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|process
operator|.
name|AbstractProcess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|ValidationResult
operator|.
name|ValidationError
import|;
end_import

begin_class
specifier|public
class|class
name|FontValidationProcess
extends|extends
name|AbstractProcess
block|{
annotation|@
name|Override
specifier|public
name|void
name|validate
parameter_list|(
name|PreflightContext
name|context
parameter_list|)
throws|throws
name|ValidationException
block|{
name|PreflightPath
name|vPath
init|=
name|context
operator|.
name|getValidationPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|vPath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|vPath
operator|.
name|isExpectedType
argument_list|(
name|PDFont
operator|.
name|class
argument_list|)
condition|)
block|{
name|context
operator|.
name|addValidationError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|PreflightConstants
operator|.
name|ERROR_FONTS_INVALID_DATA
argument_list|,
literal|"Font validation process needs at least one PDFont object"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PDFont
name|font
init|=
operator|(
name|PDFont
operator|)
name|vPath
operator|.
name|peek
argument_list|()
decl_stmt|;
name|FontContainer
argument_list|<
name|?
argument_list|>
name|fontContainer
init|=
name|context
operator|.
name|getFontContainer
argument_list|(
name|font
operator|.
name|getCOSObject
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fontContainer
operator|==
literal|null
condition|)
block|{
comment|// if fontContainer isn't null the font is already checked
name|FontValidator
argument_list|<
name|?
extends|extends
name|FontContainer
argument_list|<
name|?
extends|extends
name|PDFont
argument_list|>
argument_list|>
name|validator
init|=
name|getFontValidator
argument_list|(
name|context
argument_list|,
name|font
argument_list|)
decl_stmt|;
if|if
condition|(
name|validator
operator|!=
literal|null
condition|)
block|{
name|validator
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Create the right "Validator" object for the given font type      *       * @param context the preflight context.      * @param font the font object.      * @return the font validator instance for the font type.      */
specifier|protected
name|FontValidator
argument_list|<
name|?
extends|extends
name|FontContainer
argument_list|<
name|?
extends|extends
name|PDFont
argument_list|>
argument_list|>
name|getFontValidator
parameter_list|(
name|PreflightContext
name|context
parameter_list|,
name|PDFont
name|font
parameter_list|)
block|{
name|String
name|subtype
init|=
name|font
operator|.
name|getSubType
argument_list|()
decl_stmt|;
if|if
condition|(
name|FONT_DICTIONARY_VALUE_TRUETYPE
operator|.
name|equals
argument_list|(
name|subtype
argument_list|)
condition|)
block|{
return|return
operator|new
name|TrueTypeFontValidator
argument_list|(
name|context
argument_list|,
operator|(
name|PDTrueTypeFont
operator|)
name|font
argument_list|)
return|;
block|}
if|if
condition|(
name|FONT_DICTIONARY_VALUE_MMTYPE
operator|.
name|equals
argument_list|(
name|subtype
argument_list|)
operator|||
name|FONT_DICTIONARY_VALUE_TYPE1
operator|.
name|equals
argument_list|(
name|subtype
argument_list|)
condition|)
block|{
return|return
operator|new
name|Type1FontValidator
argument_list|(
name|context
argument_list|,
operator|(
name|PDSimpleFont
operator|)
name|font
argument_list|)
return|;
block|}
if|if
condition|(
name|FONT_DICTIONARY_VALUE_TYPE3
operator|.
name|equals
argument_list|(
name|subtype
argument_list|)
condition|)
block|{
return|return
operator|new
name|Type3FontValidator
argument_list|(
name|context
argument_list|,
operator|(
name|PDType3Font
operator|)
name|font
argument_list|)
return|;
block|}
if|if
condition|(
name|FONT_DICTIONARY_VALUE_COMPOSITE
operator|.
name|equals
argument_list|(
name|subtype
argument_list|)
condition|)
block|{
return|return
operator|new
name|Type0FontValidator
argument_list|(
name|context
argument_list|,
name|font
argument_list|)
return|;
block|}
if|if
condition|(
name|FONT_DICTIONARY_VALUE_TYPE2
operator|.
name|equals
argument_list|(
name|subtype
argument_list|)
operator|||
name|FONT_DICTIONARY_VALUE_TYPE1C
operator|.
name|equals
argument_list|(
name|subtype
argument_list|)
operator|||
name|FONT_DICTIONARY_VALUE_TYPE0C
operator|.
name|equals
argument_list|(
name|subtype
argument_list|)
operator|||
name|FONT_DICTIONARY_VALUE_TYPE0
operator|.
name|equals
argument_list|(
name|subtype
argument_list|)
condition|)
block|{
comment|// ---- Font managed by a Composite font.
comment|// this dictionary will be checked by a CompositeFontValidator
return|return
literal|null
return|;
block|}
name|context
operator|.
name|addValidationError
argument_list|(
operator|new
name|ValidationError
argument_list|(
name|PreflightConstants
operator|.
name|ERROR_FONTS_UNKNOWN_FONT_TYPE
argument_list|,
literal|"Unknown font type: "
operator|+
name|subtype
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

