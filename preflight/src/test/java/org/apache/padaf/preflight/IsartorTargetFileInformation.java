begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_class
specifier|public
class|class
name|IsartorTargetFileInformation
block|{
specifier|protected
name|File
name|targetFile
init|=
literal|null
decl_stmt|;
specifier|protected
name|String
name|expectedError
init|=
literal|null
decl_stmt|;
specifier|public
name|IsartorTargetFileInformation
parameter_list|(
name|File
name|targetFile
parameter_list|,
name|String
name|expectedError
parameter_list|)
block|{
name|this
operator|.
name|targetFile
operator|=
name|targetFile
expr_stmt|;
name|this
operator|.
name|expectedError
operator|=
name|expectedError
expr_stmt|;
block|}
specifier|public
name|File
name|getTargetFile
parameter_list|()
block|{
return|return
name|targetFile
return|;
block|}
specifier|public
name|String
name|getExpectedError
parameter_list|()
block|{
return|return
name|expectedError
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|IsartorTargetFileInformation
argument_list|>
name|loadConfiguration
parameter_list|(
name|File
name|root
parameter_list|)
throws|throws
name|Exception
block|{
comment|// load config
name|InputStream
name|expected
init|=
name|IsartorTargetFileInformation
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/expected_errors.txt"
argument_list|)
decl_stmt|;
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|load
argument_list|(
name|expected
argument_list|)
expr_stmt|;
comment|// list files
name|List
argument_list|<
name|IsartorTargetFileInformation
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|IsartorTargetFileInformation
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|root
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|Collection
argument_list|<
name|?
argument_list|>
name|col
init|=
name|FileUtils
operator|.
name|listFiles
argument_list|(
name|root
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"pdf"
block|}
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|col
control|)
block|{
name|File
name|file
init|=
operator|(
name|File
operator|)
name|o
decl_stmt|;
name|IsartorTargetFileInformation
name|info
init|=
name|getInformation
argument_list|(
name|file
argument_list|,
name|props
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|result
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|root
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|getInformation
argument_list|(
name|root
argument_list|,
name|props
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|protected
specifier|static
name|IsartorTargetFileInformation
name|getInformation
parameter_list|(
name|File
name|file
parameter_list|,
name|Properties
name|props
parameter_list|)
block|{
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
literal|"test.isartor"
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|file
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|line
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
comment|// only one parameter for the moment
name|String
name|error
init|=
operator|new
name|StringTokenizer
argument_list|(
name|line
argument_list|,
literal|"//"
argument_list|)
operator|.
name|nextToken
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
return|return
operator|new
name|IsartorTargetFileInformation
argument_list|(
name|file
argument_list|,
name|error
argument_list|)
return|;
block|}
else|else
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"There is no expected error for "
operator|+
name|key
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

