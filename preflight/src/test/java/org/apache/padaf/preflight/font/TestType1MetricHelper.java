begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|font
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationConstants
operator|.
name|FONT_DICTIONARY_VALUE_ENCODING_WIN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|font
operator|.
name|Type1MetricHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestType1MetricHelper
block|{
annotation|@
name|Test
comment|/**    * This test validates the Glyph Width extraction of a Valid Type 1 Font Program    */
specifier|public
name|void
name|testNominal
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|length1
init|=
literal|926
decl_stmt|;
name|int
name|length2
init|=
literal|12270
decl_stmt|;
name|int
name|first
init|=
literal|32
decl_stmt|;
name|int
name|last
init|=
literal|160
decl_stmt|;
name|int
index|[]
name|widths
init|=
block|{
literal|278
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|191
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|556
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|611
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|556
block|,
literal|0
block|,
literal|556
block|,
literal|556
block|,
literal|278
block|,
literal|556
block|,
literal|556
block|,
literal|222
block|,
literal|0
block|,
literal|0
block|,
literal|222
block|,
literal|833
block|,
literal|556
block|,
literal|556
block|,
literal|556
block|,
literal|0
block|,
literal|0
block|,
literal|500
block|,
literal|278
block|,
literal|0
block|,
literal|0
block|,
literal|722
block|,
literal|500
block|,
literal|500
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|278
block|}
decl_stmt|;
name|InputStream
name|font
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"subset_type1_valid.font"
argument_list|)
decl_stmt|;
name|Type1MetricHelper
name|helper
init|=
operator|new
name|Type1MetricHelper
argument_list|(
name|font
argument_list|,
name|length1
argument_list|,
name|length2
argument_list|,
name|FONT_DICTIONARY_VALUE_ENCODING_WIN
argument_list|)
decl_stmt|;
name|helper
operator|.
name|parse
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
operator|(
name|last
operator|-
name|first
operator|+
literal|1
operator|)
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|widths
index|[
name|i
index|]
operator|!=
literal|0
condition|)
block|{
name|assertTrue
argument_list|(
name|widths
index|[
name|i
index|]
operator|==
name|helper
operator|.
name|getWidth
argument_list|(
name|first
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ValidationException
operator|.
name|class
argument_list|)
comment|/**    * A invalid Type1 Font program is parsed by the MetricHelper.    * A ValidationException is expected.    *     * (The Font Program is a TrueType Font.)    */
specifier|public
name|void
name|testInvalidFont
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|length1
init|=
literal|926
decl_stmt|;
name|int
name|length2
init|=
literal|12270
decl_stmt|;
name|InputStream
name|font
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"true_type.ttf"
argument_list|)
decl_stmt|;
name|Type1MetricHelper
name|helper
init|=
operator|new
name|Type1MetricHelper
argument_list|(
name|font
argument_list|,
name|length1
argument_list|,
name|length2
argument_list|,
name|FONT_DICTIONARY_VALUE_ENCODING_WIN
argument_list|)
decl_stmt|;
name|helper
operator|.
name|parse
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Test
comment|/**    * A Missing character code shouldn't cause Exception but return a Width of 0.    */
specifier|public
name|void
name|testMissingGlyph
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|length1
init|=
literal|926
decl_stmt|;
name|int
name|length2
init|=
literal|12270
decl_stmt|;
name|int
name|first
init|=
literal|32
decl_stmt|;
name|int
name|last
init|=
literal|160
decl_stmt|;
name|int
index|[]
name|widths
init|=
block|{
literal|278
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|191
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|556
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|611
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|556
block|,
literal|0
block|,
literal|556
block|,
literal|556
block|,
literal|278
block|,
literal|556
block|,
literal|556
block|,
literal|222
block|,
literal|0
block|,
literal|0
block|,
literal|222
block|,
literal|833
block|,
literal|556
block|,
literal|556
block|,
literal|556
block|,
literal|0
block|,
literal|0
block|,
literal|500
block|,
literal|278
block|,
literal|0
block|,
literal|0
block|,
literal|722
block|,
literal|500
block|,
literal|500
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|278
block|}
decl_stmt|;
name|InputStream
name|font
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"subset_type1_valid.font"
argument_list|)
decl_stmt|;
name|Type1MetricHelper
name|helper
init|=
operator|new
name|Type1MetricHelper
argument_list|(
name|font
argument_list|,
name|length1
argument_list|,
name|length2
argument_list|,
name|FONT_DICTIONARY_VALUE_ENCODING_WIN
argument_list|)
decl_stmt|;
name|helper
operator|.
name|parse
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
operator|(
name|last
operator|-
name|first
operator|+
literal|1
operator|)
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|widths
index|[
name|i
index|]
operator|!=
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|widths
index|[
name|i
index|]
operator|+
literal|" "
operator|+
name|helper
operator|.
name|getWidth
argument_list|(
name|first
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|widths
index|[
name|i
index|]
operator|==
name|helper
operator|.
name|getWidth
argument_list|(
name|first
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// ---- Missing Glyph returns notdef width 278 in the tested font
name|assertTrue
argument_list|(
name|helper
operator|.
name|getWidth
argument_list|(
literal|200
argument_list|)
operator|==
literal|278
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

