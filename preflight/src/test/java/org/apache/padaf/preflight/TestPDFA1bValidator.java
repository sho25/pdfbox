begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|FileDataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|PdfA1bValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|PdfAValidatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|padaf
operator|.
name|preflight
operator|.
name|ValidationResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestPDFA1bValidator
block|{
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ValidationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testIOExceptionOnJavaCCParser
parameter_list|()
throws|throws
name|ValidationException
block|{
name|DummyPdfaValidator
name|totest
init|=
operator|new
name|DummyPdfaValidator
argument_list|()
block|{
specifier|public
specifier|synchronized
name|ValidationResult
name|validate
parameter_list|(
name|DataSource
name|source
parameter_list|)
throws|throws
name|ValidationException
block|{
return|return
name|super
operator|.
name|validate
argument_list|(
operator|new
name|IODataSource
argument_list|()
argument_list|)
return|;
block|}
empty_stmt|;
block|}
decl_stmt|;
name|totest
operator|.
name|validate
argument_list|(
operator|new
name|FileDataSource
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
class|class
name|IODataSource
implements|implements
name|DataSource
block|{
comment|/*      * (non-Javadoc)      *       * @see javax.activation.DataSource#getContentType()      */
specifier|public
name|String
name|getContentType
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see javax.activation.DataSource#getInputStream()      */
specifier|public
name|InputStream
name|getInputStream
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Exception fo code coverage"
argument_list|)
throw|;
block|}
comment|/*      * (non-Javadoc)      *       * @see javax.activation.DataSource#getName()      */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see javax.activation.DataSource#getOutputStream()      */
specifier|public
name|OutputStream
name|getOutputStream
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Exception fo code coverage"
argument_list|)
throw|;
block|}
block|}
specifier|private
class|class
name|DummyPdfaValidator
extends|extends
name|PdfA1bValidator
block|{
specifier|public
name|DummyPdfaValidator
parameter_list|()
throws|throws
name|ValidationException
block|{
name|super
argument_list|(
name|PdfAValidatorFactory
operator|.
name|getStandardPDFA1BConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

