begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************************  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *   ****************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|metadata
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|PreflightDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|ValidationResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|exception
operator|.
name|SyntaxValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|preflight
operator|.
name|parser
operator|.
name|PreflightParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestMetadataFiles
block|{
annotation|@
name|Test
argument_list|()
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|testfileDirectory
init|=
literal|"src/test/resources/org/apache/pdfbox/preflight/metadata/"
decl_stmt|;
name|File
name|validFile
init|=
operator|new
name|File
argument_list|(
name|testfileDirectory
operator|+
literal|"PDFAMetaDataValidationTestTrailingNul.pdf"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Metadata test file "
operator|+
name|validFile
operator|+
literal|" has to be valid "
argument_list|,
name|checkPDF
argument_list|(
name|validFile
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|invalidFile1
init|=
operator|new
name|File
argument_list|(
name|testfileDirectory
operator|+
literal|"PDFAMetaDataValidationTestTrailingSpaces.pdf"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Metadata test file "
operator|+
name|invalidFile1
operator|+
literal|" has to be invalid "
argument_list|,
name|checkPDF
argument_list|(
name|invalidFile1
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|invalidFile2
init|=
operator|new
name|File
argument_list|(
name|testfileDirectory
operator|+
literal|"PDFAMetaDataValidationTestTrailingControlChar.pdf"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Metadata test file "
operator|+
name|invalidFile2
operator|+
literal|" has to be invalid "
argument_list|,
name|checkPDF
argument_list|(
name|invalidFile2
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|invalidFile3
init|=
operator|new
name|File
argument_list|(
name|testfileDirectory
operator|+
literal|"PDFAMetaDataValidationTestMiddleNul.pdf"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Metadata test file "
operator|+
name|invalidFile3
operator|+
literal|" has to be invalid "
argument_list|,
name|checkPDF
argument_list|(
name|invalidFile3
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|invalidFile4
init|=
operator|new
name|File
argument_list|(
name|testfileDirectory
operator|+
literal|"PDFAMetaDataValidationTestMiddleControlChar.pdf"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Metadata test file "
operator|+
name|invalidFile4
operator|+
literal|" has to be invalid "
argument_list|,
name|checkPDF
argument_list|(
name|invalidFile4
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|checkPDF
parameter_list|(
name|File
name|pdf
parameter_list|)
block|{
name|PreflightDocument
name|document
init|=
literal|null
decl_stmt|;
name|boolean
name|testResult
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|pdf
operator|.
name|exists
argument_list|()
condition|)
block|{
name|ValidationResult
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|PreflightParser
name|parser
init|=
operator|new
name|PreflightParser
argument_list|(
name|pdf
argument_list|)
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|()
expr_stmt|;
name|document
operator|=
operator|(
name|PreflightDocument
operator|)
name|parser
operator|.
name|getPDDocument
argument_list|()
expr_stmt|;
name|document
operator|.
name|validate
argument_list|()
expr_stmt|;
name|result
operator|=
name|document
operator|.
name|getResult
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SyntaxValidationException
name|e
parameter_list|)
block|{
name|result
operator|=
name|e
operator|.
name|getResult
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"An exception occured while parsing the PDF "
operator|+
name|pdf
operator|+
literal|": "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|testResult
operator|=
name|result
operator|.
name|isValid
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|document
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|document
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// shouldn't happen;
block|}
block|}
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Can't find the given file "
operator|+
name|pdf
argument_list|)
expr_stmt|;
block|}
return|return
name|testResult
return|;
block|}
block|}
end_class

end_unit

