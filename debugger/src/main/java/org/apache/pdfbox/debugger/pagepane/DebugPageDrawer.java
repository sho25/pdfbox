begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|debugger
operator|.
name|pagepane
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|BasicStroke
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Graphics2D
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Shape
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Stroke
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|AffineTransform
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|GeneralPath
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDType3Font
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDVectorFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|rendering
operator|.
name|PageDrawer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|rendering
operator|.
name|PageDrawerParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|Matrix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_comment
comment|/**  * A custom PageDrawer with debugging overlays.  *   * @author John Hewson  */
end_comment

begin_class
specifier|final
class|class
name|DebugPageDrawer
extends|extends
name|PageDrawer
block|{
specifier|private
specifier|final
name|boolean
name|showGlyphBounds
decl_stmt|;
name|DebugPageDrawer
parameter_list|(
name|PageDrawerParameters
name|parameters
parameter_list|,
name|boolean
name|showGlyphBounds
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
name|this
operator|.
name|showGlyphBounds
operator|=
name|showGlyphBounds
expr_stmt|;
block|}
comment|/**      * Glyph bounding boxes.      */
annotation|@
name|Override
specifier|protected
name|void
name|showGlyph
parameter_list|(
name|Matrix
name|textRenderingMatrix
parameter_list|,
name|PDFont
name|font
parameter_list|,
name|int
name|code
parameter_list|,
name|String
name|unicode
parameter_list|,
name|Vector
name|displacement
parameter_list|)
throws|throws
name|IOException
block|{
comment|// draw glyph
name|super
operator|.
name|showGlyph
argument_list|(
name|textRenderingMatrix
argument_list|,
name|font
argument_list|,
name|code
argument_list|,
name|unicode
argument_list|,
name|displacement
argument_list|)
expr_stmt|;
if|if
condition|(
name|showGlyphBounds
condition|)
block|{
name|Shape
name|bbox
decl_stmt|;
comment|// compute visual bounds
if|if
condition|(
name|font
operator|instanceof
name|PDType3Font
condition|)
block|{
comment|// todo: implement me
return|return;
block|}
else|else
block|{
name|AffineTransform
name|at
init|=
name|textRenderingMatrix
operator|.
name|createAffineTransform
argument_list|()
decl_stmt|;
name|at
operator|.
name|concatenate
argument_list|(
name|font
operator|.
name|getFontMatrix
argument_list|()
operator|.
name|createAffineTransform
argument_list|()
argument_list|)
expr_stmt|;
comment|// get the path
name|PDVectorFont
name|vectorFont
init|=
operator|(
name|PDVectorFont
operator|)
name|font
decl_stmt|;
name|GeneralPath
name|path
init|=
name|vectorFont
operator|.
name|getNormalizedPath
argument_list|(
name|code
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// stretch non-embedded glyph if it does not match the width contained in the PDF
if|if
condition|(
operator|!
name|font
operator|.
name|isEmbedded
argument_list|()
condition|)
block|{
name|float
name|fontWidth
init|=
name|font
operator|.
name|getWidthFromFont
argument_list|(
name|code
argument_list|)
decl_stmt|;
if|if
condition|(
name|fontWidth
operator|>
literal|0
operator|&&
comment|// ignore spaces
name|Math
operator|.
name|abs
argument_list|(
name|fontWidth
operator|-
name|displacement
operator|.
name|getX
argument_list|()
operator|*
literal|1000
argument_list|)
operator|>
literal|0.0001
condition|)
block|{
name|float
name|pdfWidth
init|=
name|displacement
operator|.
name|getX
argument_list|()
operator|*
literal|1000
decl_stmt|;
name|at
operator|.
name|scale
argument_list|(
name|pdfWidth
operator|/
name|fontWidth
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|Shape
name|glyph
init|=
name|at
operator|.
name|createTransformedShape
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|bbox
operator|=
name|glyph
operator|.
name|getBounds2D
argument_list|()
expr_stmt|;
block|}
comment|// save
name|Graphics2D
name|graphics
init|=
name|getGraphics
argument_list|()
decl_stmt|;
name|Color
name|color
init|=
name|graphics
operator|.
name|getColor
argument_list|()
decl_stmt|;
name|Stroke
name|stroke
init|=
name|graphics
operator|.
name|getStroke
argument_list|()
decl_stmt|;
name|Shape
name|clip
init|=
name|graphics
operator|.
name|getClip
argument_list|()
decl_stmt|;
comment|// draw
name|graphics
operator|.
name|setClip
argument_list|(
name|graphics
operator|.
name|getDeviceConfiguration
argument_list|()
operator|.
name|getBounds
argument_list|()
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|setColor
argument_list|(
name|Color
operator|.
name|cyan
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|setStroke
argument_list|(
operator|new
name|BasicStroke
argument_list|(
literal|.5f
argument_list|)
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|draw
argument_list|(
name|bbox
argument_list|)
expr_stmt|;
comment|// restore
name|graphics
operator|.
name|setStroke
argument_list|(
name|stroke
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|setColor
argument_list|(
name|color
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|setClip
argument_list|(
name|clip
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

