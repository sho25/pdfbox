begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|debugger
operator|.
name|ui
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|prefs
operator|.
name|Preferences
import|;
end_import

begin_comment
comment|/**  * A class to save recent file history in preference using java Preference api.  */
end_comment

begin_class
specifier|public
class|class
name|RecentFiles
block|{
specifier|private
specifier|static
specifier|final
name|String
name|KEY
init|=
literal|"recent_files_"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PATH_KEY
init|=
literal|"recent_files_%d_%d"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PIECES_LENGTH_KEY
init|=
literal|"recent_files_%d_length"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HISTORY_LENGTH
init|=
literal|"history_length"
decl_stmt|;
specifier|private
specifier|final
name|Preferences
name|pref
decl_stmt|;
specifier|private
name|Queue
argument_list|<
name|String
argument_list|>
name|filePaths
decl_stmt|;
specifier|private
specifier|final
name|int
name|maximum
decl_stmt|;
comment|/**      * Constructor.      *      * @param className the class for which this Recentfiles object is created and it will be used      * to create preference instance.      * @param maximumFile the number of recent files to remember.      */
specifier|public
name|RecentFiles
parameter_list|(
name|Class
name|className
parameter_list|,
name|int
name|maximumFile
parameter_list|)
block|{
name|this
operator|.
name|maximum
operator|=
name|maximumFile
expr_stmt|;
name|this
operator|.
name|pref
operator|=
name|Preferences
operator|.
name|userNodeForPackage
argument_list|(
name|className
argument_list|)
expr_stmt|;
name|filePaths
operator|=
name|readHistoryFromPref
argument_list|()
expr_stmt|;
if|if
condition|(
name|filePaths
operator|==
literal|null
condition|)
block|{
name|filePaths
operator|=
operator|new
name|ArrayDeque
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Clear the previous recent file history.      */
specifier|public
name|void
name|removeAll
parameter_list|()
block|{
name|filePaths
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**      * Check if file history is empty.      *      * @return if history is empty return true otherwise return false.      */
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|filePaths
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/**      * Add a new file in recent file history.      *      * @param path path to the file. this path means File#getPath() method returned String.      */
specifier|public
name|void
name|addFile
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|filePaths
operator|.
name|size
argument_list|()
operator|>=
name|maximum
operator|+
literal|1
operator|&&
name|path
operator|!=
literal|null
condition|)
block|{
name|filePaths
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|filePaths
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
comment|/**      * Remove a file from recent file history.      *      * @param path path string to the file. this path means File#getPath() method returned String.      */
specifier|public
name|void
name|removeFile
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|filePaths
operator|.
name|contains
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|filePaths
operator|.
name|remove
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This gives the file in descending order where order is according to the time it is added.      * This checks for file's existence in file history.      *      * @return return the file paths in a List.      */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getFiles
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|files
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|filePaths
control|)
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|files
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|files
operator|.
name|size
argument_list|()
operator|>
name|maximum
condition|)
block|{
name|files
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|files
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * This method save the present recent file history in the preference. To get the recent file      * history in next session this method must be called.      *      * @throws IOException if saving in preference doesn't success.      */
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|writeHistoryToPref
argument_list|(
name|filePaths
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
index|[]
name|breakString
parameter_list|(
name|String
name|fullPath
parameter_list|)
block|{
name|int
name|allowedStringLength
init|=
name|Preferences
operator|.
name|MAX_VALUE_LENGTH
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|pieces
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|beginIndex
init|=
literal|0
decl_stmt|;
name|int
name|remainingLength
init|=
name|fullPath
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|endIndex
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|remainingLength
operator|>
literal|0
condition|)
block|{
name|endIndex
operator|+=
name|remainingLength
operator|>=
name|allowedStringLength
condition|?
name|allowedStringLength
else|:
name|remainingLength
expr_stmt|;
name|pieces
operator|.
name|add
argument_list|(
name|fullPath
operator|.
name|substring
argument_list|(
name|beginIndex
argument_list|,
name|endIndex
argument_list|)
argument_list|)
expr_stmt|;
name|beginIndex
operator|=
name|endIndex
expr_stmt|;
name|remainingLength
operator|=
name|fullPath
operator|.
name|length
argument_list|()
operator|-
name|endIndex
expr_stmt|;
block|}
return|return
name|pieces
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|pieces
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|private
name|void
name|writeHistoryToPref
parameter_list|(
name|Queue
argument_list|<
name|String
argument_list|>
name|filePaths
parameter_list|)
block|{
if|if
condition|(
name|filePaths
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|Preferences
name|node
init|=
name|pref
operator|.
name|node
argument_list|(
name|KEY
argument_list|)
decl_stmt|;
name|node
operator|.
name|putInt
argument_list|(
name|HISTORY_LENGTH
argument_list|,
name|filePaths
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|fileCount
init|=
literal|1
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|filePaths
control|)
block|{
name|String
index|[]
name|pieces
init|=
name|breakString
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|node
operator|.
name|putInt
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|PIECES_LENGTH_KEY
argument_list|,
name|fileCount
argument_list|)
argument_list|,
name|pieces
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pieces
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|node
operator|.
name|put
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|PATH_KEY
argument_list|,
name|fileCount
argument_list|,
name|i
argument_list|)
argument_list|,
name|pieces
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|fileCount
operator|++
expr_stmt|;
block|}
block|}
specifier|private
name|Queue
argument_list|<
name|String
argument_list|>
name|readHistoryFromPref
parameter_list|()
block|{
name|Preferences
name|node
init|=
name|pref
operator|.
name|node
argument_list|(
name|KEY
argument_list|)
decl_stmt|;
name|int
name|historyLength
init|=
name|node
operator|.
name|getInt
argument_list|(
name|HISTORY_LENGTH
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|historyLength
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Queue
argument_list|<
name|String
argument_list|>
name|history
init|=
operator|new
name|ArrayDeque
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|historyLength
condition|;
name|i
operator|++
control|)
block|{
name|int
name|totalPieces
init|=
name|node
operator|.
name|getInt
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|PIECES_LENGTH_KEY
argument_list|,
name|i
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|StringBuilder
name|stringBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|totalPieces
condition|;
name|j
operator|++
control|)
block|{
name|String
name|piece
init|=
name|node
operator|.
name|get
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|PATH_KEY
argument_list|,
name|i
argument_list|,
name|j
argument_list|)
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|stringBuilder
operator|.
name|append
argument_list|(
name|piece
argument_list|)
expr_stmt|;
block|}
name|history
operator|.
name|add
argument_list|(
name|stringBuilder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|history
return|;
block|}
block|}
end_class

end_unit

