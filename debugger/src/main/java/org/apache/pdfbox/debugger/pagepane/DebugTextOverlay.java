begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2015 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|debugger
operator|.
name|pagepane
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|BasicStroke
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Graphics2D
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Shape
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|AffineTransform
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|GeneralPath
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|Rectangle2D
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|util
operator|.
name|BoundingBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDRectangle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDType3Font
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|pagenavigation
operator|.
name|PDThreadBead
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|text
operator|.
name|PDFTextStripper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|text
operator|.
name|TextPosition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|Matrix
import|;
end_import

begin_comment
comment|/**  * Draws an overlay showing the locations of text found by PDFTextStripper and another heuristic.  *  * @author Ben Litchfield  * @author Tilman Hausherr  * @author John Hewson  */
end_comment

begin_class
specifier|final
class|class
name|DebugTextOverlay
block|{
specifier|private
specifier|final
name|PDDocument
name|document
decl_stmt|;
specifier|private
specifier|final
name|int
name|pageIndex
decl_stmt|;
specifier|private
specifier|final
name|float
name|scale
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|showTextStripper
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|showTextStripperBeads
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|showFontBBox
decl_stmt|;
specifier|private
class|class
name|DebugTextStripper
extends|extends
name|PDFTextStripper
block|{
specifier|private
specifier|final
name|Graphics2D
name|graphics
decl_stmt|;
specifier|private
name|AffineTransform
name|flip
decl_stmt|;
name|DebugTextStripper
parameter_list|(
name|Graphics2D
name|graphics
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|graphics
operator|=
name|graphics
expr_stmt|;
block|}
specifier|public
name|void
name|stripPage
parameter_list|(
name|PDDocument
name|document
parameter_list|,
name|PDPage
name|page
parameter_list|,
name|int
name|pageIndex
parameter_list|,
name|float
name|scale
parameter_list|)
throws|throws
name|IOException
block|{
comment|// flip y-axis
name|PDRectangle
name|cropBox
init|=
name|page
operator|.
name|getCropBox
argument_list|()
decl_stmt|;
name|this
operator|.
name|flip
operator|=
operator|new
name|AffineTransform
argument_list|()
expr_stmt|;
name|flip
operator|.
name|translate
argument_list|(
literal|0
argument_list|,
name|cropBox
operator|.
name|getHeight
argument_list|()
argument_list|)
expr_stmt|;
name|flip
operator|.
name|scale
argument_list|(
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// scale and rotate
name|transform
argument_list|(
name|graphics
argument_list|,
name|page
argument_list|,
name|scale
argument_list|)
expr_stmt|;
comment|// set stroke width
name|graphics
operator|.
name|setStroke
argument_list|(
operator|new
name|BasicStroke
argument_list|(
literal|0.5f
argument_list|)
argument_list|)
expr_stmt|;
name|setStartPage
argument_list|(
name|pageIndex
operator|+
literal|1
argument_list|)
expr_stmt|;
name|setEndPage
argument_list|(
name|pageIndex
operator|+
literal|1
argument_list|)
expr_stmt|;
name|Writer
name|dummy
init|=
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|ByteArrayOutputStream
argument_list|()
argument_list|)
decl_stmt|;
name|writeText
argument_list|(
name|document
argument_list|,
name|dummy
argument_list|)
expr_stmt|;
if|if
condition|(
name|DebugTextOverlay
operator|.
name|this
operator|.
name|showTextStripperBeads
condition|)
block|{
comment|// beads in green
name|List
argument_list|<
name|PDThreadBead
argument_list|>
name|pageArticles
init|=
name|page
operator|.
name|getThreadBeads
argument_list|()
decl_stmt|;
for|for
control|(
name|PDThreadBead
name|bead
range|:
name|pageArticles
control|)
block|{
if|if
condition|(
name|bead
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|PDRectangle
name|r
init|=
name|bead
operator|.
name|getRectangle
argument_list|()
decl_stmt|;
name|GeneralPath
name|p
init|=
name|r
operator|.
name|transform
argument_list|(
name|Matrix
operator|.
name|getTranslateInstance
argument_list|(
operator|-
name|cropBox
operator|.
name|getLowerLeftX
argument_list|()
argument_list|,
name|cropBox
operator|.
name|getLowerLeftY
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Shape
name|s
init|=
name|flip
operator|.
name|createTransformedShape
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|graphics
operator|.
name|setColor
argument_list|(
name|Color
operator|.
name|green
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|draw
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// scale rotate translate
specifier|private
name|void
name|transform
parameter_list|(
name|Graphics2D
name|graphics
parameter_list|,
name|PDPage
name|page
parameter_list|,
name|float
name|scale
parameter_list|)
block|{
name|graphics
operator|.
name|scale
argument_list|(
name|scale
argument_list|,
name|scale
argument_list|)
expr_stmt|;
name|int
name|rotationAngle
init|=
name|page
operator|.
name|getRotation
argument_list|()
decl_stmt|;
name|PDRectangle
name|cropBox
init|=
name|page
operator|.
name|getCropBox
argument_list|()
decl_stmt|;
if|if
condition|(
name|rotationAngle
operator|!=
literal|0
condition|)
block|{
name|float
name|translateX
init|=
literal|0
decl_stmt|;
name|float
name|translateY
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|rotationAngle
condition|)
block|{
case|case
literal|90
case|:
name|translateX
operator|=
name|cropBox
operator|.
name|getHeight
argument_list|()
expr_stmt|;
break|break;
case|case
literal|270
case|:
name|translateY
operator|=
name|cropBox
operator|.
name|getWidth
argument_list|()
expr_stmt|;
break|break;
case|case
literal|180
case|:
name|translateX
operator|=
name|cropBox
operator|.
name|getWidth
argument_list|()
expr_stmt|;
name|translateY
operator|=
name|cropBox
operator|.
name|getHeight
argument_list|()
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|graphics
operator|.
name|translate
argument_list|(
name|translateX
argument_list|,
name|translateY
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|rotate
argument_list|(
operator|(
name|float
operator|)
name|Math
operator|.
name|toRadians
argument_list|(
name|rotationAngle
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|writeString
parameter_list|(
name|String
name|string
parameter_list|,
name|List
argument_list|<
name|TextPosition
argument_list|>
name|textPositions
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|TextPosition
name|text
range|:
name|textPositions
control|)
block|{
if|if
condition|(
name|DebugTextOverlay
operator|.
name|this
operator|.
name|showTextStripper
condition|)
block|{
name|AffineTransform
name|at
init|=
operator|(
name|AffineTransform
operator|)
name|flip
operator|.
name|clone
argument_list|()
decl_stmt|;
name|at
operator|.
name|concatenate
argument_list|(
name|text
operator|.
name|getTextMatrix
argument_list|()
operator|.
name|createAffineTransform
argument_list|()
argument_list|)
expr_stmt|;
comment|// in red:
comment|// show rectangles with the "height" (not a real height, but used for text extraction
comment|// heuristics, it is 1/2 of the bounding box height and starts at y=0)
name|Rectangle2D
operator|.
name|Float
name|rect
init|=
operator|new
name|Rectangle2D
operator|.
name|Float
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|text
operator|.
name|getWidthDirAdj
argument_list|()
operator|/
name|text
operator|.
name|getTextMatrix
argument_list|()
operator|.
name|getScalingFactorX
argument_list|()
argument_list|,
name|text
operator|.
name|getHeightDir
argument_list|()
operator|/
name|text
operator|.
name|getTextMatrix
argument_list|()
operator|.
name|getScalingFactorY
argument_list|()
argument_list|)
decl_stmt|;
name|graphics
operator|.
name|setColor
argument_list|(
name|Color
operator|.
name|red
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|draw
argument_list|(
name|at
operator|.
name|createTransformedShape
argument_list|(
name|rect
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|DebugTextOverlay
operator|.
name|this
operator|.
name|showFontBBox
condition|)
block|{
comment|// in blue:
comment|// show rectangle with the real vertical bounds, based on the font bounding box y values
comment|// usually, the height is identical to what you see when marking text in Adobe Reader
name|PDFont
name|font
init|=
name|text
operator|.
name|getFont
argument_list|()
decl_stmt|;
name|BoundingBox
name|bbox
init|=
name|font
operator|.
name|getBoundingBox
argument_list|()
decl_stmt|;
comment|// advance width, bbox height (glyph space)
name|float
name|xadvance
init|=
name|font
operator|.
name|getWidth
argument_list|(
name|text
operator|.
name|getCharacterCodes
argument_list|()
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
comment|// todo: should iterate all chars
name|Rectangle2D
name|rect
init|=
operator|new
name|Rectangle2D
operator|.
name|Float
argument_list|(
literal|0
argument_list|,
name|bbox
operator|.
name|getLowerLeftY
argument_list|()
argument_list|,
name|xadvance
argument_list|,
name|bbox
operator|.
name|getHeight
argument_list|()
argument_list|)
decl_stmt|;
comment|// glyph space -> user space
comment|// note: text.getTextMatrix() is *not* the Text Matrix, it's the Text Rendering Matrix
name|AffineTransform
name|at
init|=
operator|(
name|AffineTransform
operator|)
name|flip
operator|.
name|clone
argument_list|()
decl_stmt|;
name|at
operator|.
name|concatenate
argument_list|(
name|text
operator|.
name|getTextMatrix
argument_list|()
operator|.
name|createAffineTransform
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|font
operator|instanceof
name|PDType3Font
condition|)
block|{
comment|// bbox and font matrix are unscaled
name|at
operator|.
name|concatenate
argument_list|(
name|font
operator|.
name|getFontMatrix
argument_list|()
operator|.
name|createAffineTransform
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// bbox and font matrix are already scaled to 1000
name|at
operator|.
name|scale
argument_list|(
literal|1
operator|/
literal|1000f
argument_list|,
literal|1
operator|/
literal|1000f
argument_list|)
expr_stmt|;
block|}
name|graphics
operator|.
name|setColor
argument_list|(
name|Color
operator|.
name|blue
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|draw
argument_list|(
name|at
operator|.
name|createTransformedShape
argument_list|(
name|rect
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|DebugTextOverlay
parameter_list|(
name|PDDocument
name|document
parameter_list|,
name|int
name|pageIndex
parameter_list|,
name|float
name|scale
parameter_list|,
name|boolean
name|showTextStripper
parameter_list|,
name|boolean
name|showTextStripperBeads
parameter_list|,
name|boolean
name|showFontBBox
parameter_list|)
block|{
name|this
operator|.
name|document
operator|=
name|document
expr_stmt|;
name|this
operator|.
name|pageIndex
operator|=
name|pageIndex
expr_stmt|;
name|this
operator|.
name|scale
operator|=
name|scale
expr_stmt|;
name|this
operator|.
name|showTextStripper
operator|=
name|showTextStripper
expr_stmt|;
name|this
operator|.
name|showTextStripperBeads
operator|=
name|showTextStripperBeads
expr_stmt|;
name|this
operator|.
name|showFontBBox
operator|=
name|showFontBBox
expr_stmt|;
block|}
specifier|public
name|void
name|renderTo
parameter_list|(
name|Graphics2D
name|graphics
parameter_list|)
throws|throws
name|IOException
block|{
name|DebugTextStripper
name|stripper
init|=
operator|new
name|DebugTextStripper
argument_list|(
name|graphics
argument_list|)
decl_stmt|;
name|stripper
operator|.
name|stripPage
argument_list|(
name|this
operator|.
name|document
argument_list|,
name|this
operator|.
name|document
operator|.
name|getPage
argument_list|(
name|pageIndex
argument_list|)
argument_list|,
name|this
operator|.
name|pageIndex
argument_list|,
name|this
operator|.
name|scale
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

