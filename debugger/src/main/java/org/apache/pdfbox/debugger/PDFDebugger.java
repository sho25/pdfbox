begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|debugger
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|BorderLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Dimension
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|FileDialog
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Toolkit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|datatransfer
operator|.
name|DataFlavor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|datatransfer
operator|.
name|Transferable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|datatransfer
operator|.
name|UnsupportedFlavorException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|InputEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|KeyEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|WindowEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|print
operator|.
name|PrinterException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|print
operator|.
name|PrinterJob
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilenameFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|AbstractAction
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JCheckBoxMenuItem
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JComponent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JFrame
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JLabel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JMenu
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JMenuBar
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JMenuItem
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JOptionPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPanel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPasswordField
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JScrollPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|KeyStroke
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|TransferHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|UIManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|border
operator|.
name|BevelBorder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|TreeSelectionEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|TreeSelectionListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|filechooser
operator|.
name|FileFilter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|TreePath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSFloat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|debugger
operator|.
name|colorpane
operator|.
name|CSArrayBased
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|debugger
operator|.
name|colorpane
operator|.
name|CSDeviceN
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|debugger
operator|.
name|colorpane
operator|.
name|CSIndexed
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|debugger
operator|.
name|colorpane
operator|.
name|CSSeparation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|debugger
operator|.
name|flagbitspane
operator|.
name|FlagBitsPane
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|debugger
operator|.
name|fontencodingpane
operator|.
name|FontEncodingPaneController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|debugger
operator|.
name|pagepane
operator|.
name|PagePane
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|debugger
operator|.
name|streampane
operator|.
name|StreamPane
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|debugger
operator|.
name|stringpane
operator|.
name|StringPane
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|debugger
operator|.
name|treestatus
operator|.
name|TreeStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|debugger
operator|.
name|treestatus
operator|.
name|TreeStatusPane
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|debugger
operator|.
name|ui
operator|.
name|ArrayEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|debugger
operator|.
name|ui
operator|.
name|DocumentEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|debugger
operator|.
name|ui
operator|.
name|ErrorDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|debugger
operator|.
name|ui
operator|.
name|ExtensionFileFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|debugger
operator|.
name|ui
operator|.
name|FileOpenSaveDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|debugger
operator|.
name|ui
operator|.
name|LogDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|debugger
operator|.
name|ui
operator|.
name|MapEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|debugger
operator|.
name|ui
operator|.
name|OSXAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|debugger
operator|.
name|ui
operator|.
name|PDFTreeCellRenderer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|debugger
operator|.
name|ui
operator|.
name|PDFTreeModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|debugger
operator|.
name|ui
operator|.
name|PageEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|debugger
operator|.
name|ui
operator|.
name|ReaderBottomPanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|debugger
operator|.
name|ui
operator|.
name|RecentFiles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|debugger
operator|.
name|ui
operator|.
name|RotationMenu
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|debugger
operator|.
name|ui
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|debugger
operator|.
name|ui
operator|.
name|ZoomMenu
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|encryption
operator|.
name|InvalidPasswordException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|printing
operator|.
name|PDFPageable
import|;
end_import

begin_comment
comment|/**  * PDF Debugger.  *   * @author wurtz  * @author Ben Litchfield  * @author Khyrul Bashar  */
end_comment

begin_class
specifier|public
class|class
name|PDFDebugger
extends|extends
name|JFrame
block|{
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|COSName
argument_list|>
name|SPECIALCOLORSPACES
init|=
operator|new
name|HashSet
argument_list|<
name|COSName
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|COSName
operator|.
name|INDEXED
argument_list|,
name|COSName
operator|.
name|SEPARATION
argument_list|,
name|COSName
operator|.
name|DEVICEN
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|COSName
argument_list|>
name|OTHERCOLORSPACES
init|=
operator|new
name|HashSet
argument_list|<
name|COSName
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|COSName
operator|.
name|ICCBASED
argument_list|,
name|COSName
operator|.
name|PATTERN
argument_list|,
name|COSName
operator|.
name|CALGRAY
argument_list|,
name|COSName
operator|.
name|CALRGB
argument_list|,
name|COSName
operator|.
name|LAB
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PASSWORD
init|=
literal|"-password"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|VIEW_STRUCTURE
init|=
literal|"-viewstructure"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|SHORCUT_KEY_MASK
init|=
name|Toolkit
operator|.
name|getDefaultToolkit
argument_list|()
operator|.
name|getMenuShortcutKeyMask
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OS_NAME
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|IS_MAC_OS
init|=
name|OS_NAME
operator|.
name|startsWith
argument_list|(
literal|"mac os x"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|JPanel
name|documentPanel
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
specifier|private
name|TreeStatusPane
name|statusPane
decl_stmt|;
specifier|private
name|RecentFiles
name|recentFiles
decl_stmt|;
specifier|private
name|boolean
name|isPageMode
decl_stmt|;
specifier|private
name|PDDocument
name|document
decl_stmt|;
specifier|private
name|String
name|currentFilePath
decl_stmt|;
specifier|private
name|JScrollPane
name|jScrollPane1
decl_stmt|;
specifier|private
name|JScrollPane
name|jScrollPane2
decl_stmt|;
specifier|private
name|javax
operator|.
name|swing
operator|.
name|JSplitPane
name|jSplitPane1
decl_stmt|;
specifier|private
name|javax
operator|.
name|swing
operator|.
name|JTextPane
name|jTextPane1
decl_stmt|;
specifier|private
name|ReaderBottomPanel
name|statusBar
decl_stmt|;
specifier|private
name|Tree
name|tree
decl_stmt|;
comment|// file menu
specifier|private
name|JMenuItem
name|saveAsMenuItem
decl_stmt|;
specifier|private
name|JMenuItem
name|saveMenuItem
decl_stmt|;
specifier|private
name|JMenu
name|recentFilesMenu
decl_stmt|;
specifier|private
name|JMenuItem
name|printMenuItem
decl_stmt|;
comment|// edit> find menu
specifier|private
name|JMenu
name|findMenu
decl_stmt|;
specifier|private
name|JMenuItem
name|findMenuItem
decl_stmt|;
specifier|private
name|JMenuItem
name|findNextMenuItem
decl_stmt|;
specifier|private
name|JMenuItem
name|findPreviousMenuItem
decl_stmt|;
comment|// view menu
specifier|private
name|JMenuItem
name|viewModeItem
decl_stmt|;
specifier|public
specifier|static
name|JCheckBoxMenuItem
name|showTextStripper
decl_stmt|;
specifier|public
specifier|static
name|JCheckBoxMenuItem
name|showTextStripperBeads
decl_stmt|;
specifier|public
specifier|static
name|JCheckBoxMenuItem
name|showFontBBox
decl_stmt|;
specifier|public
specifier|static
name|JCheckBoxMenuItem
name|showGlyphBounds
decl_stmt|;
comment|// configuration
specifier|public
specifier|static
name|Properties
name|configuration
decl_stmt|;
comment|/**      * Constructor.      */
specifier|public
name|PDFDebugger
parameter_list|()
block|{
name|this
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor.      */
specifier|public
name|PDFDebugger
parameter_list|(
name|boolean
name|viewPages
parameter_list|)
block|{
name|isPageMode
operator|=
name|viewPages
expr_stmt|;
name|loadConfiguration
argument_list|()
expr_stmt|;
name|initComponents
argument_list|()
expr_stmt|;
comment|// use our custom logger
name|LogDialog
operator|.
name|init
argument_list|(
name|this
argument_list|,
name|statusBar
operator|.
name|getLogLabel
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"org.apache.commons.logging.Log"
argument_list|,
literal|"org.apache.pdfbox.debugger.ui.DebugLog"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Entry point.      *       * @param args the command line arguments      * @throws Exception If anything goes wrong.      */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|UIManager
operator|.
name|setLookAndFeel
argument_list|(
name|UIManager
operator|.
name|getSystemLookAndFeelClassName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"apple.laf.useScreenMenuBar"
argument_list|)
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"apple.laf.useScreenMenuBar"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
comment|// handle uncaught exceptions
name|Thread
operator|.
name|setDefaultUncaughtExceptionHandler
argument_list|(
operator|new
name|Thread
operator|.
name|UncaughtExceptionHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|uncaughtException
parameter_list|(
name|Thread
name|thread
parameter_list|,
name|Throwable
name|throwable
parameter_list|)
block|{
operator|new
name|ErrorDialog
argument_list|(
name|throwable
argument_list|)
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// open file, if any
name|String
name|filename
init|=
literal|null
decl_stmt|;
name|String
name|password
init|=
literal|""
decl_stmt|;
name|boolean
name|viewPages
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|PASSWORD
argument_list|)
condition|)
block|{
name|i
operator|++
expr_stmt|;
if|if
condition|(
name|i
operator|>=
name|args
operator|.
name|length
condition|)
block|{
name|usage
argument_list|()
expr_stmt|;
block|}
name|password
operator|=
name|args
index|[
name|i
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|VIEW_STRUCTURE
argument_list|)
condition|)
block|{
name|viewPages
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|filename
operator|=
name|args
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
specifier|final
name|PDFDebugger
name|viewer
init|=
operator|new
name|PDFDebugger
argument_list|(
name|viewPages
argument_list|)
decl_stmt|;
if|if
condition|(
name|filename
operator|!=
literal|null
condition|)
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|filename
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|viewer
operator|.
name|readPDFFile
argument_list|(
name|filename
argument_list|,
name|password
argument_list|)
expr_stmt|;
block|}
block|}
name|viewer
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will print out a message telling how to use this utility.      */
specifier|private
specifier|static
name|void
name|usage
parameter_list|()
block|{
name|String
name|message
init|=
literal|"Usage: java -jar pdfbox-app-x.y.z.jar PDFDebugger [options]<inputfile>\n"
operator|+
literal|"\nOptions:\n"
operator|+
literal|"  -password<password> : Password to decrypt the document\n"
operator|+
literal|"  -viewstructure       : activate structure mode on startup\n"
operator|+
literal|"<inputfile>          : The PDF document to be loaded\n"
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**      * Loads the local configuration file, if any.      */
specifier|private
name|void
name|loadConfiguration
parameter_list|()
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
literal|"config.properties"
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
try|try
block|{
name|InputStream
name|is
init|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|configuration
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
name|configuration
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|configuration
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * This method is called from within the constructor to initialize the form.      */
specifier|private
name|void
name|initComponents
parameter_list|()
block|{
name|jSplitPane1
operator|=
operator|new
name|javax
operator|.
name|swing
operator|.
name|JSplitPane
argument_list|()
expr_stmt|;
name|jScrollPane1
operator|=
operator|new
name|JScrollPane
argument_list|()
expr_stmt|;
name|tree
operator|=
operator|new
name|Tree
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|jScrollPane2
operator|=
operator|new
name|JScrollPane
argument_list|()
expr_stmt|;
name|jTextPane1
operator|=
operator|new
name|javax
operator|.
name|swing
operator|.
name|JTextPane
argument_list|()
expr_stmt|;
name|tree
operator|.
name|setCellRenderer
argument_list|(
operator|new
name|PDFTreeCellRenderer
argument_list|()
argument_list|)
expr_stmt|;
name|tree
operator|.
name|setModel
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|setTitle
argument_list|(
literal|"Apache PDFBox Debugger"
argument_list|)
expr_stmt|;
name|addWindowListener
argument_list|(
operator|new
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|WindowAdapter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|windowOpened
parameter_list|(
name|WindowEvent
name|windowEvent
parameter_list|)
block|{
name|tree
operator|.
name|requestFocusInWindow
argument_list|()
expr_stmt|;
name|super
operator|.
name|windowOpened
argument_list|(
name|windowEvent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|windowClosing
parameter_list|(
name|WindowEvent
name|evt
parameter_list|)
block|{
name|exitForm
argument_list|(
name|evt
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|jScrollPane1
operator|.
name|setBorder
argument_list|(
operator|new
name|BevelBorder
argument_list|(
name|BevelBorder
operator|.
name|RAISED
argument_list|)
argument_list|)
expr_stmt|;
name|jScrollPane1
operator|.
name|setPreferredSize
argument_list|(
operator|new
name|Dimension
argument_list|(
literal|350
argument_list|,
literal|500
argument_list|)
argument_list|)
expr_stmt|;
name|tree
operator|.
name|addTreeSelectionListener
argument_list|(
operator|new
name|TreeSelectionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|valueChanged
parameter_list|(
name|TreeSelectionEvent
name|evt
parameter_list|)
block|{
name|jTree1ValueChanged
argument_list|(
name|evt
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|jScrollPane1
operator|.
name|setViewportView
argument_list|(
name|tree
argument_list|)
expr_stmt|;
name|jSplitPane1
operator|.
name|setRightComponent
argument_list|(
name|jScrollPane2
argument_list|)
expr_stmt|;
name|jSplitPane1
operator|.
name|setDividerSize
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|jScrollPane2
operator|.
name|setPreferredSize
argument_list|(
operator|new
name|Dimension
argument_list|(
literal|300
argument_list|,
literal|500
argument_list|)
argument_list|)
expr_stmt|;
name|jScrollPane2
operator|.
name|setViewportView
argument_list|(
name|jTextPane1
argument_list|)
expr_stmt|;
name|jSplitPane1
operator|.
name|setLeftComponent
argument_list|(
name|jScrollPane1
argument_list|)
expr_stmt|;
name|JScrollPane
name|documentScroller
init|=
operator|new
name|JScrollPane
argument_list|()
decl_stmt|;
name|documentScroller
operator|.
name|setViewportView
argument_list|(
name|documentPanel
argument_list|)
expr_stmt|;
name|statusPane
operator|=
operator|new
name|TreeStatusPane
argument_list|(
name|tree
argument_list|)
expr_stmt|;
name|statusPane
operator|.
name|getPanel
argument_list|()
operator|.
name|setBorder
argument_list|(
operator|new
name|BevelBorder
argument_list|(
name|BevelBorder
operator|.
name|RAISED
argument_list|)
argument_list|)
expr_stmt|;
name|statusPane
operator|.
name|getPanel
argument_list|()
operator|.
name|setPreferredSize
argument_list|(
operator|new
name|Dimension
argument_list|(
literal|300
argument_list|,
literal|25
argument_list|)
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|statusPane
operator|.
name|getPanel
argument_list|()
argument_list|,
name|BorderLayout
operator|.
name|PAGE_START
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|jSplitPane1
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|statusBar
operator|=
operator|new
name|ReaderBottomPanel
argument_list|()
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|statusBar
argument_list|,
name|BorderLayout
operator|.
name|SOUTH
argument_list|)
expr_stmt|;
comment|// create menus
name|JMenuBar
name|menuBar
init|=
operator|new
name|JMenuBar
argument_list|()
decl_stmt|;
name|menuBar
operator|.
name|add
argument_list|(
name|createFileMenu
argument_list|()
argument_list|)
expr_stmt|;
name|menuBar
operator|.
name|add
argument_list|(
name|createEditMenu
argument_list|()
argument_list|)
expr_stmt|;
name|menuBar
operator|.
name|add
argument_list|(
name|createViewMenu
argument_list|()
argument_list|)
expr_stmt|;
name|setJMenuBar
argument_list|(
name|menuBar
argument_list|)
expr_stmt|;
name|Dimension
name|screenSize
init|=
name|Toolkit
operator|.
name|getDefaultToolkit
argument_list|()
operator|.
name|getScreenSize
argument_list|()
decl_stmt|;
name|int
name|width
init|=
literal|1000
decl_stmt|;
name|int
name|height
init|=
literal|970
decl_stmt|;
name|setBounds
argument_list|(
operator|(
name|screenSize
operator|.
name|width
operator|-
name|width
operator|)
operator|/
literal|2
argument_list|,
operator|(
name|screenSize
operator|.
name|height
operator|-
name|height
operator|)
operator|/
literal|2
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
comment|// drag and drop to open files
name|setTransferHandler
argument_list|(
operator|new
name|TransferHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|canImport
parameter_list|(
name|TransferSupport
name|transferSupport
parameter_list|)
block|{
return|return
name|transferSupport
operator|.
name|isDataFlavorSupported
argument_list|(
name|DataFlavor
operator|.
name|javaFileListFlavor
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|boolean
name|importData
parameter_list|(
name|TransferSupport
name|transferSupport
parameter_list|)
block|{
try|try
block|{
name|Transferable
name|transferable
init|=
name|transferSupport
operator|.
name|getTransferable
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|files
init|=
operator|(
name|List
argument_list|<
name|File
argument_list|>
operator|)
name|transferable
operator|.
name|getTransferData
argument_list|(
name|DataFlavor
operator|.
name|javaFileListFlavor
argument_list|)
decl_stmt|;
name|readPDFFile
argument_list|(
name|files
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
operator|new
name|ErrorDialog
argument_list|(
name|e
argument_list|)
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedFlavorException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Mac OS X file open/quit handler
if|if
condition|(
name|IS_MAC_OS
condition|)
block|{
try|try
block|{
name|Method
name|osxOpenFiles
init|=
name|getClass
argument_list|()
operator|.
name|getDeclaredMethod
argument_list|(
literal|"osxOpenFiles"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|osxOpenFiles
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|OSXAdapter
operator|.
name|setFileHandler
argument_list|(
name|this
argument_list|,
name|osxOpenFiles
argument_list|)
expr_stmt|;
name|Method
name|osxQuit
init|=
name|getClass
argument_list|()
operator|.
name|getDeclaredMethod
argument_list|(
literal|"osxQuit"
argument_list|)
decl_stmt|;
name|osxQuit
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|OSXAdapter
operator|.
name|setQuitHandler
argument_list|(
name|this
argument_list|,
name|osxQuit
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|JMenu
name|createFileMenu
parameter_list|()
block|{
name|JMenuItem
name|openMenuItem
init|=
operator|new
name|JMenuItem
argument_list|(
literal|"Open..."
argument_list|)
decl_stmt|;
name|openMenuItem
operator|.
name|setAccelerator
argument_list|(
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|KeyEvent
operator|.
name|VK_O
argument_list|,
name|SHORCUT_KEY_MASK
argument_list|)
argument_list|)
expr_stmt|;
name|openMenuItem
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|evt
parameter_list|)
block|{
name|openMenuItemActionPerformed
argument_list|(
name|evt
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|JMenu
name|fileMenu
init|=
operator|new
name|JMenu
argument_list|(
literal|"File"
argument_list|)
decl_stmt|;
name|fileMenu
operator|.
name|add
argument_list|(
name|openMenuItem
argument_list|)
expr_stmt|;
name|JMenuItem
name|openUrlMenuItem
init|=
operator|new
name|JMenuItem
argument_list|(
literal|"Open URL..."
argument_list|)
decl_stmt|;
name|openUrlMenuItem
operator|.
name|setAccelerator
argument_list|(
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|KeyEvent
operator|.
name|VK_U
argument_list|,
name|SHORCUT_KEY_MASK
argument_list|)
argument_list|)
expr_stmt|;
name|openUrlMenuItem
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|evt
parameter_list|)
block|{
name|String
name|urlString
init|=
name|JOptionPane
operator|.
name|showInputDialog
argument_list|(
literal|"Enter an URL"
argument_list|)
decl_stmt|;
if|if
condition|(
name|urlString
operator|==
literal|null
operator|||
name|urlString
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
try|try
block|{
name|readPDFurl
argument_list|(
name|urlString
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|fileMenu
operator|.
name|add
argument_list|(
name|openUrlMenuItem
argument_list|)
expr_stmt|;
try|try
block|{
name|recentFiles
operator|=
operator|new
name|RecentFiles
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|recentFilesMenu
operator|=
operator|new
name|JMenu
argument_list|(
literal|"Open Recent"
argument_list|)
expr_stmt|;
name|recentFilesMenu
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|addRecentFileItems
argument_list|()
expr_stmt|;
name|fileMenu
operator|.
name|add
argument_list|(
name|recentFilesMenu
argument_list|)
expr_stmt|;
name|printMenuItem
operator|=
operator|new
name|JMenuItem
argument_list|(
literal|"Print"
argument_list|)
expr_stmt|;
name|printMenuItem
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|printMenuItem
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|evt
parameter_list|)
block|{
name|printMenuItemActionPerformed
argument_list|(
name|evt
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|IS_MAC_OS
condition|)
block|{
name|fileMenu
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|fileMenu
operator|.
name|add
argument_list|(
name|printMenuItem
argument_list|)
expr_stmt|;
block|}
name|JMenuItem
name|exitMenuItem
init|=
operator|new
name|JMenuItem
argument_list|(
literal|"Exit"
argument_list|)
decl_stmt|;
name|exitMenuItem
operator|.
name|setAccelerator
argument_list|(
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
literal|"alt F4"
argument_list|)
argument_list|)
expr_stmt|;
name|exitMenuItem
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|evt
parameter_list|)
block|{
name|exitMenuItemActionPerformed
argument_list|(
name|evt
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|IS_MAC_OS
condition|)
block|{
name|fileMenu
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|fileMenu
operator|.
name|add
argument_list|(
name|exitMenuItem
argument_list|)
expr_stmt|;
block|}
return|return
name|fileMenu
return|;
block|}
specifier|private
name|JMenu
name|createEditMenu
parameter_list|()
block|{
name|JMenu
name|editMenu
init|=
operator|new
name|JMenu
argument_list|(
literal|"Edit"
argument_list|)
decl_stmt|;
name|JMenuItem
name|cutMenuItem
init|=
operator|new
name|JMenuItem
argument_list|(
literal|"Cut"
argument_list|)
decl_stmt|;
name|cutMenuItem
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|editMenu
operator|.
name|add
argument_list|(
name|cutMenuItem
argument_list|)
expr_stmt|;
name|JMenuItem
name|copyMenuItem
init|=
operator|new
name|JMenuItem
argument_list|(
literal|"Copy"
argument_list|)
decl_stmt|;
name|copyMenuItem
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|editMenu
operator|.
name|add
argument_list|(
name|copyMenuItem
argument_list|)
expr_stmt|;
name|JMenuItem
name|pasteMenuItem
init|=
operator|new
name|JMenuItem
argument_list|(
literal|"Paste"
argument_list|)
decl_stmt|;
name|pasteMenuItem
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|editMenu
operator|.
name|add
argument_list|(
name|pasteMenuItem
argument_list|)
expr_stmt|;
name|JMenuItem
name|deleteMenuItem
init|=
operator|new
name|JMenuItem
argument_list|(
literal|"Delete"
argument_list|)
decl_stmt|;
name|deleteMenuItem
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|editMenu
operator|.
name|add
argument_list|(
name|deleteMenuItem
argument_list|)
expr_stmt|;
name|editMenu
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|editMenu
operator|.
name|add
argument_list|(
name|createFindMenu
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|editMenu
return|;
block|}
specifier|private
name|JMenu
name|createViewMenu
parameter_list|()
block|{
name|JMenu
name|viewMenu
init|=
operator|new
name|JMenu
argument_list|(
literal|"View"
argument_list|)
decl_stmt|;
if|if
condition|(
name|isPageMode
condition|)
block|{
name|viewModeItem
operator|=
operator|new
name|JMenuItem
argument_list|(
literal|"Show Internal Structure"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|viewModeItem
operator|=
operator|new
name|JMenuItem
argument_list|(
literal|"Show Pages"
argument_list|)
expr_stmt|;
block|}
name|viewModeItem
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|actionEvent
parameter_list|)
block|{
if|if
condition|(
name|isPageMode
condition|)
block|{
name|viewModeItem
operator|.
name|setText
argument_list|(
literal|"Show Pages"
argument_list|)
expr_stmt|;
name|isPageMode
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|viewModeItem
operator|.
name|setText
argument_list|(
literal|"Show Internal Structure"
argument_list|)
expr_stmt|;
name|isPageMode
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|document
operator|!=
literal|null
condition|)
block|{
name|initTree
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|viewMenu
operator|.
name|add
argument_list|(
name|viewModeItem
argument_list|)
expr_stmt|;
name|ZoomMenu
name|zoomMenu
init|=
name|ZoomMenu
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|zoomMenu
operator|.
name|setEnableMenu
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|viewMenu
operator|.
name|add
argument_list|(
name|zoomMenu
operator|.
name|getMenu
argument_list|()
argument_list|)
expr_stmt|;
name|RotationMenu
name|rotationMenu
init|=
name|RotationMenu
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|rotationMenu
operator|.
name|setEnableMenu
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|viewMenu
operator|.
name|add
argument_list|(
name|rotationMenu
operator|.
name|getMenu
argument_list|()
argument_list|)
expr_stmt|;
name|viewMenu
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|showTextStripper
operator|=
operator|new
name|JCheckBoxMenuItem
argument_list|(
literal|"Show TextStripper TextPositions"
argument_list|)
expr_stmt|;
name|showTextStripper
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|viewMenu
operator|.
name|add
argument_list|(
name|showTextStripper
argument_list|)
expr_stmt|;
name|showTextStripperBeads
operator|=
operator|new
name|JCheckBoxMenuItem
argument_list|(
literal|"Show TextStripper Beads"
argument_list|)
expr_stmt|;
name|showTextStripperBeads
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|viewMenu
operator|.
name|add
argument_list|(
name|showTextStripperBeads
argument_list|)
expr_stmt|;
name|showFontBBox
operator|=
operator|new
name|JCheckBoxMenuItem
argument_list|(
literal|"Show Approximate Text Bounds"
argument_list|)
expr_stmt|;
name|showFontBBox
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|viewMenu
operator|.
name|add
argument_list|(
name|showFontBBox
argument_list|)
expr_stmt|;
name|showGlyphBounds
operator|=
operator|new
name|JCheckBoxMenuItem
argument_list|(
literal|"Show Glyph Bounds"
argument_list|)
expr_stmt|;
name|showGlyphBounds
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|viewMenu
operator|.
name|add
argument_list|(
name|showGlyphBounds
argument_list|)
expr_stmt|;
return|return
name|viewMenu
return|;
block|}
specifier|private
name|JMenu
name|createFindMenu
parameter_list|()
block|{
name|findMenu
operator|=
operator|new
name|JMenu
argument_list|(
literal|"Find"
argument_list|)
expr_stmt|;
name|findMenu
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|findMenuItem
operator|=
operator|new
name|JMenuItem
argument_list|(
literal|"Find..."
argument_list|)
expr_stmt|;
name|findMenuItem
operator|.
name|setActionCommand
argument_list|(
literal|"find"
argument_list|)
expr_stmt|;
name|findMenuItem
operator|.
name|setAccelerator
argument_list|(
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|KeyEvent
operator|.
name|VK_F
argument_list|,
name|SHORCUT_KEY_MASK
argument_list|)
argument_list|)
expr_stmt|;
name|findNextMenuItem
operator|=
operator|new
name|JMenuItem
argument_list|(
literal|"Find Next"
argument_list|)
expr_stmt|;
if|if
condition|(
name|IS_MAC_OS
condition|)
block|{
name|findNextMenuItem
operator|.
name|setAccelerator
argument_list|(
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|KeyEvent
operator|.
name|VK_G
argument_list|,
name|SHORCUT_KEY_MASK
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|findNextMenuItem
operator|.
name|setAccelerator
argument_list|(
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
literal|"F3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|findPreviousMenuItem
operator|=
operator|new
name|JMenuItem
argument_list|(
literal|"Find Previous"
argument_list|)
expr_stmt|;
if|if
condition|(
name|IS_MAC_OS
condition|)
block|{
name|findPreviousMenuItem
operator|.
name|setAccelerator
argument_list|(
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|KeyEvent
operator|.
name|VK_G
argument_list|,
name|SHORCUT_KEY_MASK
operator||
name|InputEvent
operator|.
name|SHIFT_DOWN_MASK
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|findPreviousMenuItem
operator|.
name|setAccelerator
argument_list|(
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|KeyEvent
operator|.
name|VK_F3
argument_list|,
name|InputEvent
operator|.
name|SHIFT_DOWN_MASK
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|findMenu
operator|.
name|add
argument_list|(
name|findMenuItem
argument_list|)
expr_stmt|;
name|findMenu
operator|.
name|add
argument_list|(
name|findNextMenuItem
argument_list|)
expr_stmt|;
name|findMenu
operator|.
name|add
argument_list|(
name|findPreviousMenuItem
argument_list|)
expr_stmt|;
return|return
name|findMenu
return|;
block|}
comment|/**      * Returns the File menu.      */
specifier|public
name|JMenu
name|getFindMenu
parameter_list|()
block|{
return|return
name|findMenu
return|;
block|}
comment|/**      * Returns the Edit&gt; Find&gt; Find menu item.      */
specifier|public
name|JMenuItem
name|getFindMenuItem
parameter_list|()
block|{
return|return
name|findMenuItem
return|;
block|}
comment|/**      * Returns the Edit&gt; Find&gt; Find Next menu item.      */
specifier|public
name|JMenuItem
name|getFindNextMenuItem
parameter_list|()
block|{
return|return
name|findNextMenuItem
return|;
block|}
comment|/**      * Returns the Edit&gt; Find&gt; Find Previous menu item.      */
specifier|public
name|JMenuItem
name|getFindPreviousMenuItem
parameter_list|()
block|{
return|return
name|findPreviousMenuItem
return|;
block|}
comment|/**      * This method is called via reflection on Mac OS X.      */
specifier|private
name|void
name|osxOpenFiles
parameter_list|(
name|String
name|filename
parameter_list|)
block|{
try|try
block|{
name|readPDFFile
argument_list|(
name|filename
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * This method is called via reflection on Mac OS X.      */
specifier|private
name|void
name|osxQuit
parameter_list|()
block|{
name|exitMenuItemActionPerformed
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|openMenuItemActionPerformed
parameter_list|(
name|ActionEvent
name|evt
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|IS_MAC_OS
condition|)
block|{
name|FileDialog
name|openDialog
init|=
operator|new
name|FileDialog
argument_list|(
name|this
argument_list|,
literal|"Open"
argument_list|)
decl_stmt|;
name|openDialog
operator|.
name|setFilenameFilter
argument_list|(
operator|new
name|FilenameFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|s
parameter_list|)
block|{
return|return
name|file
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".pdf"
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|openDialog
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|openDialog
operator|.
name|getFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|readPDFFile
argument_list|(
name|openDialog
operator|.
name|getFile
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|String
index|[]
name|extensions
init|=
operator|new
name|String
index|[]
block|{
literal|"pdf"
block|,
literal|"PDF"
block|}
decl_stmt|;
name|FileFilter
name|pdfFilter
init|=
operator|new
name|ExtensionFileFilter
argument_list|(
name|extensions
argument_list|,
literal|"PDF Files (*.pdf)"
argument_list|)
decl_stmt|;
name|FileOpenSaveDialog
name|openDialog
init|=
operator|new
name|FileOpenSaveDialog
argument_list|(
name|this
argument_list|,
name|pdfFilter
argument_list|)
decl_stmt|;
name|File
name|file
init|=
name|openDialog
operator|.
name|openFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
name|readPDFFile
argument_list|(
name|file
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|jTree1ValueChanged
parameter_list|(
name|TreeSelectionEvent
name|evt
parameter_list|)
block|{
name|TreePath
name|path
init|=
name|tree
operator|.
name|getSelectionPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Object
name|selectedNode
init|=
name|path
operator|.
name|getLastPathComponent
argument_list|()
decl_stmt|;
name|statusBar
operator|.
name|getStatusLabel
argument_list|()
operator|.
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|isPage
argument_list|(
name|selectedNode
argument_list|)
condition|)
block|{
name|showPage
argument_list|(
name|selectedNode
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|isSpecialColorSpace
argument_list|(
name|selectedNode
argument_list|)
operator|||
name|isOtherColorSpace
argument_list|(
name|selectedNode
argument_list|)
condition|)
block|{
name|showColorPane
argument_list|(
name|selectedNode
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|path
operator|.
name|getParentPath
argument_list|()
operator|!=
literal|null
operator|&&
name|isFlagNode
argument_list|(
name|selectedNode
argument_list|,
name|path
operator|.
name|getParentPath
argument_list|()
operator|.
name|getLastPathComponent
argument_list|()
argument_list|)
condition|)
block|{
name|Object
name|parentNode
init|=
name|path
operator|.
name|getParentPath
argument_list|()
operator|.
name|getLastPathComponent
argument_list|()
decl_stmt|;
name|showFlagPane
argument_list|(
name|parentNode
argument_list|,
name|selectedNode
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|isStream
argument_list|(
name|selectedNode
argument_list|)
condition|)
block|{
name|showStream
argument_list|(
operator|(
name|COSStream
operator|)
name|getUnderneathObject
argument_list|(
name|selectedNode
argument_list|)
argument_list|,
name|path
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|isFont
argument_list|(
name|selectedNode
argument_list|)
condition|)
block|{
name|showFont
argument_list|(
name|selectedNode
argument_list|,
name|path
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|isString
argument_list|(
name|selectedNode
argument_list|)
condition|)
block|{
name|showString
argument_list|(
name|selectedNode
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|jSplitPane1
operator|.
name|getRightComponent
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|jSplitPane1
operator|.
name|getRightComponent
argument_list|()
operator|.
name|equals
argument_list|(
name|jScrollPane2
argument_list|)
condition|)
block|{
name|replaceRightComponent
argument_list|(
name|jScrollPane2
argument_list|)
expr_stmt|;
block|}
name|jTextPane1
operator|.
name|setText
argument_list|(
name|convertToString
argument_list|(
name|selectedNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|boolean
name|isSpecialColorSpace
parameter_list|(
name|Object
name|selectedNode
parameter_list|)
block|{
name|selectedNode
operator|=
name|getUnderneathObject
argument_list|(
name|selectedNode
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedNode
operator|instanceof
name|COSArray
operator|&&
operator|(
operator|(
name|COSArray
operator|)
name|selectedNode
operator|)
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|COSBase
name|arrayEntry
init|=
operator|(
operator|(
name|COSArray
operator|)
name|selectedNode
operator|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|arrayEntry
operator|instanceof
name|COSName
condition|)
block|{
name|COSName
name|name
init|=
operator|(
name|COSName
operator|)
name|arrayEntry
decl_stmt|;
return|return
name|SPECIALCOLORSPACES
operator|.
name|contains
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|isOtherColorSpace
parameter_list|(
name|Object
name|selectedNode
parameter_list|)
block|{
name|selectedNode
operator|=
name|getUnderneathObject
argument_list|(
name|selectedNode
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedNode
operator|instanceof
name|COSArray
operator|&&
operator|(
operator|(
name|COSArray
operator|)
name|selectedNode
operator|)
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|COSBase
name|arrayEntry
init|=
operator|(
operator|(
name|COSArray
operator|)
name|selectedNode
operator|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|arrayEntry
operator|instanceof
name|COSName
condition|)
block|{
name|COSName
name|name
init|=
operator|(
name|COSName
operator|)
name|arrayEntry
decl_stmt|;
return|return
name|OTHERCOLORSPACES
operator|.
name|contains
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|isPage
parameter_list|(
name|Object
name|selectedNode
parameter_list|)
block|{
name|selectedNode
operator|=
name|getUnderneathObject
argument_list|(
name|selectedNode
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedNode
operator|instanceof
name|COSDictionary
condition|)
block|{
name|COSDictionary
name|dict
init|=
operator|(
name|COSDictionary
operator|)
name|selectedNode
decl_stmt|;
name|COSBase
name|typeItem
init|=
name|dict
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|COSName
operator|.
name|PAGE
operator|.
name|equals
argument_list|(
name|typeItem
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|selectedNode
operator|instanceof
name|PageEntry
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|isFlagNode
parameter_list|(
name|Object
name|selectedNode
parameter_list|,
name|Object
name|parentNode
parameter_list|)
block|{
if|if
condition|(
name|selectedNode
operator|instanceof
name|MapEntry
condition|)
block|{
name|Object
name|key
init|=
operator|(
operator|(
name|MapEntry
operator|)
name|selectedNode
operator|)
operator|.
name|getKey
argument_list|()
decl_stmt|;
return|return
operator|(
name|COSName
operator|.
name|FLAGS
operator|.
name|equals
argument_list|(
name|key
argument_list|)
operator|&&
name|isFontDescriptor
argument_list|(
name|parentNode
argument_list|)
operator|)
operator|||
operator|(
name|COSName
operator|.
name|F
operator|.
name|equals
argument_list|(
name|key
argument_list|)
operator|&&
name|isAnnot
argument_list|(
name|parentNode
argument_list|)
operator|)
operator|||
name|COSName
operator|.
name|FF
operator|.
name|equals
argument_list|(
name|key
argument_list|)
operator|||
name|COSName
operator|.
name|PANOSE
operator|.
name|equals
argument_list|(
name|key
argument_list|)
operator|||
name|COSName
operator|.
name|SIG_FLAGS
operator|.
name|equals
argument_list|(
name|key
argument_list|)
operator|||
operator|(
name|COSName
operator|.
name|P
operator|.
name|equals
argument_list|(
name|key
argument_list|)
operator|&&
name|isEncrypt
argument_list|(
name|parentNode
argument_list|)
operator|)
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|isEncrypt
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|MapEntry
condition|)
block|{
name|MapEntry
name|entry
init|=
operator|(
name|MapEntry
operator|)
name|obj
decl_stmt|;
return|return
operator|(
name|COSName
operator|.
name|ENCRYPT
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|&&
name|entry
operator|.
name|getValue
argument_list|()
operator|instanceof
name|COSDictionary
operator|)
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|isFontDescriptor
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
name|Object
name|underneathObject
init|=
name|getUnderneathObject
argument_list|(
name|obj
argument_list|)
decl_stmt|;
return|return
name|underneathObject
operator|instanceof
name|COSDictionary
operator|&&
operator|(
operator|(
name|COSDictionary
operator|)
name|underneathObject
operator|)
operator|.
name|containsKey
argument_list|(
name|COSName
operator|.
name|TYPE
argument_list|)
operator|&&
operator|(
operator|(
name|COSDictionary
operator|)
name|underneathObject
operator|)
operator|.
name|getCOSName
argument_list|(
name|COSName
operator|.
name|TYPE
argument_list|)
operator|.
name|equals
argument_list|(
name|COSName
operator|.
name|FONT_DESC
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isAnnot
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
name|Object
name|underneathObject
init|=
name|getUnderneathObject
argument_list|(
name|obj
argument_list|)
decl_stmt|;
return|return
name|underneathObject
operator|instanceof
name|COSDictionary
operator|&&
operator|(
operator|(
name|COSDictionary
operator|)
name|underneathObject
operator|)
operator|.
name|containsKey
argument_list|(
name|COSName
operator|.
name|TYPE
argument_list|)
operator|&&
operator|(
operator|(
name|COSDictionary
operator|)
name|underneathObject
operator|)
operator|.
name|getCOSName
argument_list|(
name|COSName
operator|.
name|TYPE
argument_list|)
operator|.
name|equals
argument_list|(
name|COSName
operator|.
name|ANNOT
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isStream
parameter_list|(
name|Object
name|selectedNode
parameter_list|)
block|{
return|return
name|getUnderneathObject
argument_list|(
name|selectedNode
argument_list|)
operator|instanceof
name|COSStream
return|;
block|}
specifier|private
name|boolean
name|isString
parameter_list|(
name|Object
name|selectedNode
parameter_list|)
block|{
return|return
name|getUnderneathObject
argument_list|(
name|selectedNode
argument_list|)
operator|instanceof
name|COSString
return|;
block|}
specifier|private
name|boolean
name|isFont
parameter_list|(
name|Object
name|selectedNode
parameter_list|)
block|{
name|selectedNode
operator|=
name|getUnderneathObject
argument_list|(
name|selectedNode
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedNode
operator|instanceof
name|COSDictionary
condition|)
block|{
name|COSDictionary
name|dic
init|=
operator|(
name|COSDictionary
operator|)
name|selectedNode
decl_stmt|;
return|return
name|dic
operator|.
name|containsKey
argument_list|(
name|COSName
operator|.
name|TYPE
argument_list|)
operator|&&
name|dic
operator|.
name|getCOSName
argument_list|(
name|COSName
operator|.
name|TYPE
argument_list|)
operator|.
name|equals
argument_list|(
name|COSName
operator|.
name|FONT
argument_list|)
operator|&&
operator|!
name|isCIDFont
argument_list|(
name|dic
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|isCIDFont
parameter_list|(
name|COSDictionary
name|dic
parameter_list|)
block|{
return|return
name|dic
operator|.
name|containsKey
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|)
operator|&&
operator|(
name|dic
operator|.
name|getCOSName
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|)
operator|.
name|equals
argument_list|(
name|COSName
operator|.
name|CID_FONT_TYPE0
argument_list|)
operator|||
name|dic
operator|.
name|getCOSName
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|)
operator|.
name|equals
argument_list|(
name|COSName
operator|.
name|CID_FONT_TYPE2
argument_list|)
operator|)
return|;
block|}
comment|/**      * Show a Panel describing color spaces in more detail and interactive way.      * @param csNode the special color space containing node.      */
specifier|private
name|void
name|showColorPane
parameter_list|(
name|Object
name|csNode
parameter_list|)
block|{
name|csNode
operator|=
name|getUnderneathObject
argument_list|(
name|csNode
argument_list|)
expr_stmt|;
if|if
condition|(
name|csNode
operator|instanceof
name|COSArray
operator|&&
operator|(
operator|(
name|COSArray
operator|)
name|csNode
operator|)
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|COSArray
name|array
init|=
operator|(
name|COSArray
operator|)
name|csNode
decl_stmt|;
name|COSBase
name|arrayEntry
init|=
name|array
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|arrayEntry
operator|instanceof
name|COSName
condition|)
block|{
name|COSName
name|csName
init|=
operator|(
name|COSName
operator|)
name|arrayEntry
decl_stmt|;
if|if
condition|(
name|csName
operator|.
name|equals
argument_list|(
name|COSName
operator|.
name|SEPARATION
argument_list|)
condition|)
block|{
name|replaceRightComponent
argument_list|(
operator|new
name|CSSeparation
argument_list|(
name|array
argument_list|)
operator|.
name|getPanel
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|csName
operator|.
name|equals
argument_list|(
name|COSName
operator|.
name|DEVICEN
argument_list|)
condition|)
block|{
name|replaceRightComponent
argument_list|(
operator|new
name|CSDeviceN
argument_list|(
name|array
argument_list|)
operator|.
name|getPanel
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|csName
operator|.
name|equals
argument_list|(
name|COSName
operator|.
name|INDEXED
argument_list|)
condition|)
block|{
name|replaceRightComponent
argument_list|(
operator|new
name|CSIndexed
argument_list|(
name|array
argument_list|)
operator|.
name|getPanel
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|OTHERCOLORSPACES
operator|.
name|contains
argument_list|(
name|csName
argument_list|)
condition|)
block|{
name|replaceRightComponent
argument_list|(
operator|new
name|CSArrayBased
argument_list|(
name|array
argument_list|)
operator|.
name|getPanel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|showPage
parameter_list|(
name|Object
name|selectedNode
parameter_list|)
block|{
name|selectedNode
operator|=
name|getUnderneathObject
argument_list|(
name|selectedNode
argument_list|)
expr_stmt|;
name|COSDictionary
name|page
decl_stmt|;
if|if
condition|(
name|selectedNode
operator|instanceof
name|COSDictionary
condition|)
block|{
name|page
operator|=
operator|(
name|COSDictionary
operator|)
name|selectedNode
expr_stmt|;
block|}
else|else
block|{
name|page
operator|=
operator|(
operator|(
name|PageEntry
operator|)
name|selectedNode
operator|)
operator|.
name|getDict
argument_list|()
expr_stmt|;
block|}
name|COSBase
name|typeItem
init|=
name|page
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|COSName
operator|.
name|PAGE
operator|.
name|equals
argument_list|(
name|typeItem
argument_list|)
condition|)
block|{
name|PagePane
name|pagePane
init|=
operator|new
name|PagePane
argument_list|(
name|document
argument_list|,
name|page
argument_list|,
name|statusBar
operator|.
name|getStatusLabel
argument_list|()
argument_list|)
decl_stmt|;
name|replaceRightComponent
argument_list|(
operator|new
name|JScrollPane
argument_list|(
name|pagePane
operator|.
name|getPanel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|showFlagPane
parameter_list|(
name|Object
name|parentNode
parameter_list|,
name|Object
name|selectedNode
parameter_list|)
block|{
name|parentNode
operator|=
name|getUnderneathObject
argument_list|(
name|parentNode
argument_list|)
expr_stmt|;
if|if
condition|(
name|parentNode
operator|instanceof
name|COSDictionary
condition|)
block|{
name|selectedNode
operator|=
operator|(
operator|(
name|MapEntry
operator|)
name|selectedNode
operator|)
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|selectedNode
operator|=
name|getUnderneathObject
argument_list|(
name|selectedNode
argument_list|)
expr_stmt|;
name|FlagBitsPane
name|flagBitsPane
init|=
operator|new
name|FlagBitsPane
argument_list|(
operator|(
name|COSDictionary
operator|)
name|parentNode
argument_list|,
operator|(
name|COSName
operator|)
name|selectedNode
argument_list|)
decl_stmt|;
name|replaceRightComponent
argument_list|(
name|flagBitsPane
operator|.
name|getPane
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|showStream
parameter_list|(
name|COSStream
name|stream
parameter_list|,
name|TreePath
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|isContentStream
init|=
literal|false
decl_stmt|;
name|boolean
name|isThumb
init|=
literal|false
decl_stmt|;
name|COSName
name|key
init|=
name|getNodeKey
argument_list|(
name|path
operator|.
name|getLastPathComponent
argument_list|()
argument_list|)
decl_stmt|;
name|COSName
name|parentKey
init|=
name|getNodeKey
argument_list|(
name|path
operator|.
name|getParentPath
argument_list|()
operator|.
name|getLastPathComponent
argument_list|()
argument_list|)
decl_stmt|;
name|COSDictionary
name|resourcesDic
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|COSName
operator|.
name|CONTENTS
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|Object
name|pageObj
init|=
name|path
operator|.
name|getParentPath
argument_list|()
operator|.
name|getLastPathComponent
argument_list|()
decl_stmt|;
name|COSDictionary
name|page
init|=
operator|(
name|COSDictionary
operator|)
name|getUnderneathObject
argument_list|(
name|pageObj
argument_list|)
decl_stmt|;
name|resourcesDic
operator|=
operator|(
name|COSDictionary
operator|)
name|page
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|RESOURCES
argument_list|)
expr_stmt|;
name|isContentStream
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|COSName
operator|.
name|CONTENTS
operator|.
name|equals
argument_list|(
name|parentKey
argument_list|)
operator|||
name|COSName
operator|.
name|CHAR_PROCS
operator|.
name|equals
argument_list|(
name|parentKey
argument_list|)
condition|)
block|{
name|Object
name|pageObj
init|=
name|path
operator|.
name|getParentPath
argument_list|()
operator|.
name|getParentPath
argument_list|()
operator|.
name|getLastPathComponent
argument_list|()
decl_stmt|;
name|COSDictionary
name|page
init|=
operator|(
name|COSDictionary
operator|)
name|getUnderneathObject
argument_list|(
name|pageObj
argument_list|)
decl_stmt|;
name|resourcesDic
operator|=
operator|(
name|COSDictionary
operator|)
name|page
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|RESOURCES
argument_list|)
expr_stmt|;
name|isContentStream
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|COSName
operator|.
name|FORM
operator|.
name|equals
argument_list|(
name|stream
operator|.
name|getCOSName
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|)
argument_list|)
operator|||
name|COSName
operator|.
name|PATTERN
operator|.
name|equals
argument_list|(
name|stream
operator|.
name|getCOSName
argument_list|(
name|COSName
operator|.
name|TYPE
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|stream
operator|.
name|containsKey
argument_list|(
name|COSName
operator|.
name|RESOURCES
argument_list|)
condition|)
block|{
name|resourcesDic
operator|=
operator|(
name|COSDictionary
operator|)
name|stream
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|RESOURCES
argument_list|)
expr_stmt|;
block|}
name|isContentStream
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|COSName
operator|.
name|THUMB
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|resourcesDic
operator|=
literal|null
expr_stmt|;
name|isThumb
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|COSName
operator|.
name|IMAGE
operator|.
name|equals
argument_list|(
operator|(
name|stream
operator|)
operator|.
name|getCOSName
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|)
argument_list|)
condition|)
block|{
comment|// not to be used for /Thumb, even if it contains /Subtype /Image
name|Object
name|resourcesObj
init|=
name|path
operator|.
name|getParentPath
argument_list|()
operator|.
name|getParentPath
argument_list|()
operator|.
name|getLastPathComponent
argument_list|()
decl_stmt|;
name|resourcesDic
operator|=
operator|(
name|COSDictionary
operator|)
name|getUnderneathObject
argument_list|(
name|resourcesObj
argument_list|)
expr_stmt|;
block|}
name|StreamPane
name|streamPane
init|=
operator|new
name|StreamPane
argument_list|(
name|stream
argument_list|,
name|isContentStream
argument_list|,
name|isThumb
argument_list|,
name|resourcesDic
argument_list|)
decl_stmt|;
name|replaceRightComponent
argument_list|(
name|streamPane
operator|.
name|getPanel
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|showFont
parameter_list|(
name|Object
name|selectedNode
parameter_list|,
name|TreePath
name|path
parameter_list|)
block|{
name|COSName
name|fontName
init|=
name|getNodeKey
argument_list|(
name|selectedNode
argument_list|)
decl_stmt|;
name|COSDictionary
name|resourceDic
init|=
operator|(
name|COSDictionary
operator|)
name|getUnderneathObject
argument_list|(
name|path
operator|.
name|getParentPath
argument_list|()
operator|.
name|getParentPath
argument_list|()
operator|.
name|getLastPathComponent
argument_list|()
argument_list|)
decl_stmt|;
name|FontEncodingPaneController
name|fontEncodingPaneController
init|=
operator|new
name|FontEncodingPaneController
argument_list|(
name|fontName
argument_list|,
name|resourceDic
argument_list|)
decl_stmt|;
name|JPanel
name|pane
init|=
name|fontEncodingPaneController
operator|.
name|getPane
argument_list|()
decl_stmt|;
if|if
condition|(
name|pane
operator|==
literal|null
condition|)
block|{
comment|// unsupported font type
name|replaceRightComponent
argument_list|(
name|jScrollPane2
argument_list|)
expr_stmt|;
return|return;
block|}
name|replaceRightComponent
argument_list|(
name|pane
argument_list|)
expr_stmt|;
block|}
comment|// replace the right component while keeping divider position
specifier|private
name|void
name|replaceRightComponent
parameter_list|(
name|Component
name|pane
parameter_list|)
block|{
name|int
name|div
init|=
name|jSplitPane1
operator|.
name|getDividerLocation
argument_list|()
decl_stmt|;
name|jSplitPane1
operator|.
name|setRightComponent
argument_list|(
name|pane
argument_list|)
expr_stmt|;
name|jSplitPane1
operator|.
name|setDividerLocation
argument_list|(
name|div
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|showString
parameter_list|(
name|Object
name|selectedNode
parameter_list|)
block|{
name|COSString
name|string
init|=
operator|(
name|COSString
operator|)
name|getUnderneathObject
argument_list|(
name|selectedNode
argument_list|)
decl_stmt|;
name|replaceRightComponent
argument_list|(
operator|new
name|StringPane
argument_list|(
name|string
argument_list|)
operator|.
name|getPane
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|COSName
name|getNodeKey
parameter_list|(
name|Object
name|selectedNode
parameter_list|)
block|{
if|if
condition|(
name|selectedNode
operator|instanceof
name|MapEntry
condition|)
block|{
return|return
operator|(
operator|(
name|MapEntry
operator|)
name|selectedNode
operator|)
operator|.
name|getKey
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|Object
name|getUnderneathObject
parameter_list|(
name|Object
name|selectedNode
parameter_list|)
block|{
if|if
condition|(
name|selectedNode
operator|instanceof
name|MapEntry
condition|)
block|{
name|selectedNode
operator|=
operator|(
operator|(
name|MapEntry
operator|)
name|selectedNode
operator|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedNode
operator|instanceof
name|ArrayEntry
condition|)
block|{
name|selectedNode
operator|=
operator|(
operator|(
name|ArrayEntry
operator|)
name|selectedNode
operator|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedNode
operator|instanceof
name|PageEntry
condition|)
block|{
name|selectedNode
operator|=
operator|(
operator|(
name|PageEntry
operator|)
name|selectedNode
operator|)
operator|.
name|getDict
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|selectedNode
operator|instanceof
name|COSObject
condition|)
block|{
name|selectedNode
operator|=
operator|(
operator|(
name|COSObject
operator|)
name|selectedNode
operator|)
operator|.
name|getObject
argument_list|()
expr_stmt|;
block|}
return|return
name|selectedNode
return|;
block|}
specifier|private
name|String
name|convertToString
parameter_list|(
name|Object
name|selectedNode
parameter_list|)
block|{
name|String
name|data
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|selectedNode
operator|instanceof
name|COSBoolean
condition|)
block|{
name|data
operator|=
literal|""
operator|+
operator|(
operator|(
name|COSBoolean
operator|)
name|selectedNode
operator|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedNode
operator|instanceof
name|COSFloat
condition|)
block|{
name|data
operator|=
literal|""
operator|+
operator|(
operator|(
name|COSFloat
operator|)
name|selectedNode
operator|)
operator|.
name|floatValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedNode
operator|instanceof
name|COSNull
condition|)
block|{
name|data
operator|=
literal|"null"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedNode
operator|instanceof
name|COSInteger
condition|)
block|{
name|data
operator|=
literal|""
operator|+
operator|(
operator|(
name|COSInteger
operator|)
name|selectedNode
operator|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedNode
operator|instanceof
name|COSName
condition|)
block|{
name|data
operator|=
literal|""
operator|+
operator|(
operator|(
name|COSName
operator|)
name|selectedNode
operator|)
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedNode
operator|instanceof
name|COSString
condition|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|COSString
operator|)
name|selectedNode
operator|)
operator|.
name|getString
argument_list|()
decl_stmt|;
comment|// display unprintable strings as hex
for|for
control|(
name|char
name|c
range|:
name|text
operator|.
name|toCharArray
argument_list|()
control|)
block|{
if|if
condition|(
name|Character
operator|.
name|isISOControl
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|text
operator|=
literal|"<"
operator|+
operator|(
operator|(
name|COSString
operator|)
name|selectedNode
operator|)
operator|.
name|toHexString
argument_list|()
operator|+
literal|">"
expr_stmt|;
break|break;
block|}
block|}
name|data
operator|=
literal|""
operator|+
name|text
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedNode
operator|instanceof
name|COSStream
condition|)
block|{
try|try
block|{
name|COSStream
name|stream
init|=
operator|(
name|COSStream
operator|)
name|selectedNode
decl_stmt|;
name|InputStream
name|ioStream
init|=
name|stream
operator|.
name|createInputStream
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|byteArray
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|int
name|amountRead
decl_stmt|;
while|while
condition|(
operator|(
name|amountRead
operator|=
name|ioStream
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|byteArray
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|amountRead
argument_list|)
expr_stmt|;
block|}
name|data
operator|=
name|byteArray
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|selectedNode
operator|instanceof
name|MapEntry
condition|)
block|{
name|data
operator|=
name|convertToString
argument_list|(
operator|(
operator|(
name|MapEntry
operator|)
name|selectedNode
operator|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedNode
operator|instanceof
name|ArrayEntry
condition|)
block|{
name|data
operator|=
name|convertToString
argument_list|(
operator|(
operator|(
name|ArrayEntry
operator|)
name|selectedNode
operator|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|data
return|;
block|}
specifier|private
name|void
name|exitMenuItemActionPerformed
parameter_list|(
name|ActionEvent
name|evt
parameter_list|)
block|{
if|if
condition|(
name|document
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|document
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|currentFilePath
operator|.
name|startsWith
argument_list|(
literal|"http"
argument_list|)
condition|)
block|{
name|recentFiles
operator|.
name|addFile
argument_list|(
name|currentFilePath
argument_list|)
expr_stmt|;
block|}
name|recentFiles
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|printMenuItemActionPerformed
parameter_list|(
name|ActionEvent
name|evt
parameter_list|)
block|{
if|if
condition|(
name|document
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|PrinterJob
name|job
init|=
name|PrinterJob
operator|.
name|getPrinterJob
argument_list|()
decl_stmt|;
name|job
operator|.
name|setPageable
argument_list|(
operator|new
name|PDFPageable
argument_list|(
name|document
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|job
operator|.
name|printDialog
argument_list|()
condition|)
block|{
name|job
operator|.
name|print
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|PrinterException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Exit the Application.      */
specifier|private
name|void
name|exitForm
parameter_list|(
name|WindowEvent
name|evt
parameter_list|)
block|{
if|if
condition|(
name|document
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|document
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|currentFilePath
operator|.
name|startsWith
argument_list|(
literal|"http"
argument_list|)
condition|)
block|{
name|recentFiles
operator|.
name|addFile
argument_list|(
name|currentFilePath
argument_list|)
expr_stmt|;
block|}
name|recentFiles
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|readPDFFile
parameter_list|(
name|String
name|filePath
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|readPDFFile
argument_list|(
name|file
argument_list|,
name|password
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|readPDFFile
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|document
operator|!=
literal|null
condition|)
block|{
name|document
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|currentFilePath
operator|.
name|startsWith
argument_list|(
literal|"http"
argument_list|)
condition|)
block|{
name|recentFiles
operator|.
name|addFile
argument_list|(
name|currentFilePath
argument_list|)
expr_stmt|;
block|}
block|}
name|currentFilePath
operator|=
name|file
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|recentFiles
operator|.
name|removeFile
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|LogDialog
operator|.
name|instance
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|parseDocument
argument_list|(
name|file
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|initTree
argument_list|()
expr_stmt|;
if|if
condition|(
name|IS_MAC_OS
condition|)
block|{
name|setTitle
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|getRootPane
argument_list|()
operator|.
name|putClientProperty
argument_list|(
literal|"Window.documentFile"
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setTitle
argument_list|(
literal|"PDF Debugger - "
operator|+
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|addRecentFileItems
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|readPDFurl
parameter_list|(
name|String
name|urlString
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|document
operator|!=
literal|null
condition|)
block|{
name|document
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|currentFilePath
operator|.
name|startsWith
argument_list|(
literal|"http"
argument_list|)
condition|)
block|{
name|recentFiles
operator|.
name|addFile
argument_list|(
name|currentFilePath
argument_list|)
expr_stmt|;
block|}
block|}
name|currentFilePath
operator|=
name|urlString
expr_stmt|;
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|urlString
argument_list|)
decl_stmt|;
name|document
operator|=
name|PDDocument
operator|.
name|load
argument_list|(
name|url
operator|.
name|openStream
argument_list|()
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|printMenuItem
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|initTree
argument_list|()
expr_stmt|;
if|if
condition|(
name|IS_MAC_OS
condition|)
block|{
name|setTitle
argument_list|(
name|urlString
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setTitle
argument_list|(
literal|"PDF Debugger - "
operator|+
name|urlString
argument_list|)
expr_stmt|;
block|}
name|addRecentFileItems
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|initTree
parameter_list|()
block|{
name|TreeStatus
name|treeStatus
init|=
operator|new
name|TreeStatus
argument_list|(
name|document
operator|.
name|getDocument
argument_list|()
operator|.
name|getTrailer
argument_list|()
argument_list|)
decl_stmt|;
name|statusPane
operator|.
name|updateTreeStatus
argument_list|(
name|treeStatus
argument_list|)
expr_stmt|;
if|if
condition|(
name|isPageMode
condition|)
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|currentFilePath
argument_list|)
decl_stmt|;
name|DocumentEntry
name|documentEntry
init|=
operator|new
name|DocumentEntry
argument_list|(
name|document
argument_list|,
name|file
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|ZoomMenu
operator|.
name|getInstance
argument_list|()
operator|.
name|resetZoom
argument_list|()
expr_stmt|;
name|tree
operator|.
name|setModel
argument_list|(
operator|new
name|PDFTreeModel
argument_list|(
name|documentEntry
argument_list|)
argument_list|)
expr_stmt|;
comment|// Root/Pages/Kids/[0] is not always the first page, so use the first row instead:
name|tree
operator|.
name|setSelectionPath
argument_list|(
name|tree
operator|.
name|getPathForRow
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tree
operator|.
name|setModel
argument_list|(
operator|new
name|PDFTreeModel
argument_list|(
name|document
argument_list|)
argument_list|)
expr_stmt|;
name|tree
operator|.
name|setSelectionPath
argument_list|(
name|treeStatus
operator|.
name|getPathForString
argument_list|(
literal|"Root"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This will parse a document.      *      * @param file The file addressing the document.      *      * @throws IOException If there is an error parsing the document.      */
specifier|private
name|void
name|parseDocument
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|document
operator|=
name|PDDocument
operator|.
name|load
argument_list|(
name|file
argument_list|,
name|password
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidPasswordException
name|ipe
parameter_list|)
block|{
comment|// https://stackoverflow.com/questions/8881213/joptionpane-to-get-password
name|JPanel
name|panel
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
name|JLabel
name|label
init|=
operator|new
name|JLabel
argument_list|(
literal|"Password:"
argument_list|)
decl_stmt|;
name|JPasswordField
name|pass
init|=
operator|new
name|JPasswordField
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|label
argument_list|)
expr_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|pass
argument_list|)
expr_stmt|;
name|String
index|[]
name|options
init|=
operator|new
name|String
index|[]
block|{
literal|"OK"
block|,
literal|"Cancel"
block|}
decl_stmt|;
name|int
name|option
init|=
name|JOptionPane
operator|.
name|showOptionDialog
argument_list|(
literal|null
argument_list|,
name|panel
argument_list|,
literal|"Enter password"
argument_list|,
name|JOptionPane
operator|.
name|NO_OPTION
argument_list|,
name|JOptionPane
operator|.
name|PLAIN_MESSAGE
argument_list|,
literal|null
argument_list|,
name|options
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|option
operator|==
literal|0
condition|)
block|{
name|password
operator|=
operator|new
name|String
argument_list|(
name|pass
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
throw|throw
name|ipe
throw|;
block|}
break|break;
block|}
name|printMenuItem
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addRecentFileItems
parameter_list|()
block|{
name|Action
name|recentMenuAction
init|=
operator|new
name|AbstractAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|actionEvent
parameter_list|)
block|{
name|String
name|filePath
init|=
call|(
name|String
call|)
argument_list|(
operator|(
name|JComponent
operator|)
name|actionEvent
operator|.
name|getSource
argument_list|()
argument_list|)
operator|.
name|getClientProperty
argument_list|(
literal|"path"
argument_list|)
decl_stmt|;
try|try
block|{
name|readPDFFile
argument_list|(
name|filePath
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
if|if
condition|(
operator|!
name|recentFiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|recentFilesMenu
operator|.
name|removeAll
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|files
init|=
name|recentFiles
operator|.
name|getFiles
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|files
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|String
name|path
init|=
name|files
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|name
init|=
operator|new
name|File
argument_list|(
name|path
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
name|JMenuItem
name|recentFileMenuItem
init|=
operator|new
name|JMenuItem
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|recentFileMenuItem
operator|.
name|putClientProperty
argument_list|(
literal|"path"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|recentFileMenuItem
operator|.
name|addActionListener
argument_list|(
name|recentMenuAction
argument_list|)
expr_stmt|;
name|recentFilesMenu
operator|.
name|add
argument_list|(
name|recentFileMenuItem
argument_list|)
expr_stmt|;
block|}
name|recentFilesMenu
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

