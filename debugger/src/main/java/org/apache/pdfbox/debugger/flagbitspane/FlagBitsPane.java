begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|debugger
operator|.
name|flagbitspane
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_comment
comment|/**  * @author Khyrul Bashar  *  * A class that displays flag bits in a table in detail.  */
end_comment

begin_class
specifier|public
class|class
name|FlagBitsPane
block|{
specifier|private
name|FlagBitsPaneView
name|view
decl_stmt|;
comment|/**      * Constructor.      * @param dictionary COSDictionary instance.      * @param flagType COSName instance.      */
specifier|public
name|FlagBitsPane
parameter_list|(
specifier|final
name|COSDictionary
name|dictionary
parameter_list|,
name|COSName
name|flagType
parameter_list|)
block|{
name|createPane
argument_list|(
name|dictionary
argument_list|,
name|flagType
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createPane
parameter_list|(
specifier|final
name|COSDictionary
name|dictionary
parameter_list|,
specifier|final
name|COSName
name|flagType
parameter_list|)
block|{
name|Flag
name|flag
decl_stmt|;
if|if
condition|(
name|COSName
operator|.
name|FLAGS
operator|.
name|equals
argument_list|(
name|flagType
argument_list|)
condition|)
block|{
name|flag
operator|=
operator|new
name|FontFlag
argument_list|(
name|dictionary
argument_list|)
expr_stmt|;
name|view
operator|=
operator|new
name|FlagBitsPaneView
argument_list|(
name|flag
operator|.
name|getFlagType
argument_list|()
argument_list|,
name|flag
operator|.
name|getFlagValue
argument_list|()
argument_list|,
name|flag
operator|.
name|getFlagBits
argument_list|()
argument_list|,
name|flag
operator|.
name|getColumnNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|COSName
operator|.
name|F
operator|.
name|equals
argument_list|(
name|flagType
argument_list|)
condition|)
block|{
name|flag
operator|=
operator|new
name|AnnotFlag
argument_list|(
name|dictionary
argument_list|)
expr_stmt|;
name|view
operator|=
operator|new
name|FlagBitsPaneView
argument_list|(
name|flag
operator|.
name|getFlagType
argument_list|()
argument_list|,
name|flag
operator|.
name|getFlagValue
argument_list|()
argument_list|,
name|flag
operator|.
name|getFlagBits
argument_list|()
argument_list|,
name|flag
operator|.
name|getColumnNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|COSName
operator|.
name|FF
operator|.
name|equals
argument_list|(
name|flagType
argument_list|)
condition|)
block|{
name|flag
operator|=
operator|new
name|FieldFlag
argument_list|(
name|dictionary
argument_list|)
expr_stmt|;
name|view
operator|=
operator|new
name|FlagBitsPaneView
argument_list|(
name|flag
operator|.
name|getFlagType
argument_list|()
argument_list|,
name|flag
operator|.
name|getFlagValue
argument_list|()
argument_list|,
name|flag
operator|.
name|getFlagBits
argument_list|()
argument_list|,
name|flag
operator|.
name|getColumnNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|COSName
operator|.
name|PANOSE
operator|.
name|equals
argument_list|(
name|flagType
argument_list|)
condition|)
block|{
name|flag
operator|=
operator|new
name|PanoseFlag
argument_list|(
name|dictionary
argument_list|)
expr_stmt|;
name|view
operator|=
operator|new
name|FlagBitsPaneView
argument_list|(
name|flag
operator|.
name|getFlagType
argument_list|()
argument_list|,
name|flag
operator|.
name|getFlagValue
argument_list|()
argument_list|,
name|flag
operator|.
name|getFlagBits
argument_list|()
argument_list|,
name|flag
operator|.
name|getColumnNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|COSName
operator|.
name|P
operator|.
name|equals
argument_list|(
name|flagType
argument_list|)
condition|)
block|{
name|flag
operator|=
operator|new
name|EncryptFlag
argument_list|(
name|dictionary
argument_list|)
expr_stmt|;
name|view
operator|=
operator|new
name|FlagBitsPaneView
argument_list|(
name|flag
operator|.
name|getFlagType
argument_list|()
argument_list|,
name|flag
operator|.
name|getFlagValue
argument_list|()
argument_list|,
name|flag
operator|.
name|getFlagBits
argument_list|()
argument_list|,
name|flag
operator|.
name|getColumnNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns the Pane itself      * @return JPanel instance      */
specifier|public
name|JPanel
name|getPane
parameter_list|()
block|{
return|return
name|view
operator|.
name|getPanel
argument_list|()
return|;
block|}
block|}
end_class

end_unit

