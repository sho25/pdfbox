begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|debugger
operator|.
name|ui
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|ButtonGroup
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JMenu
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JRadioButtonMenuItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|rendering
operator|.
name|RenderDestination
import|;
end_import

begin_comment
comment|/**  * @author Tilman Hausherr  *  * A singleton class that provides the RenderDestination menu for the menubar. To act upon the menu  * item selection, the user of the class must add ActionListener which will check for the action  * command and act accordingly.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|RenderDestinationMenu
extends|extends
name|MenuBase
block|{
specifier|public
specifier|static
specifier|final
name|String
name|RENDER_DESTINATION_EXPORT
init|=
literal|"Export"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|RENDER_DESTINATION_PRINT
init|=
literal|"Print"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|RENDER_DESTINATION_VIEW
init|=
literal|"View"
decl_stmt|;
specifier|private
specifier|static
name|RenderDestinationMenu
name|instance
decl_stmt|;
specifier|private
name|JRadioButtonMenuItem
name|exportItem
decl_stmt|;
specifier|private
name|JRadioButtonMenuItem
name|printItem
decl_stmt|;
specifier|private
name|JRadioButtonMenuItem
name|viewItem
decl_stmt|;
comment|/**      * Constructor.      */
specifier|private
name|RenderDestinationMenu
parameter_list|()
block|{
name|setMenu
argument_list|(
name|createMenu
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Provides the RenderDestination instance.      * @return RenderDestination instance.      */
specifier|public
specifier|static
name|RenderDestinationMenu
name|getInstance
parameter_list|()
block|{
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
name|instance
operator|=
operator|new
name|RenderDestinationMenu
argument_list|()
expr_stmt|;
block|}
return|return
name|instance
return|;
block|}
comment|/**      * Set the render destination selection.      * @param selection String instance.      */
specifier|public
name|void
name|setRenderDestinationSelection
parameter_list|(
name|String
name|selection
parameter_list|)
block|{
if|if
condition|(
name|RENDER_DESTINATION_EXPORT
operator|.
name|equals
argument_list|(
name|selection
argument_list|)
condition|)
block|{
name|exportItem
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|RENDER_DESTINATION_PRINT
operator|.
name|equals
argument_list|(
name|selection
argument_list|)
condition|)
block|{
name|printItem
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|RENDER_DESTINATION_VIEW
operator|.
name|equals
argument_list|(
name|selection
argument_list|)
condition|)
block|{
name|viewItem
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|isRenderDestinationMenu
parameter_list|(
name|String
name|actionCommand
parameter_list|)
block|{
return|return
name|RENDER_DESTINATION_EXPORT
operator|.
name|equals
argument_list|(
name|actionCommand
argument_list|)
operator|||
name|RENDER_DESTINATION_PRINT
operator|.
name|equals
argument_list|(
name|actionCommand
argument_list|)
operator|||
name|RENDER_DESTINATION_VIEW
operator|.
name|equals
argument_list|(
name|actionCommand
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|RenderDestination
name|getRenderDestination
parameter_list|()
block|{
if|if
condition|(
name|instance
operator|.
name|printItem
operator|.
name|isSelected
argument_list|()
condition|)
block|{
return|return
name|RenderDestination
operator|.
name|PRINT
return|;
block|}
if|if
condition|(
name|instance
operator|.
name|viewItem
operator|.
name|isSelected
argument_list|()
condition|)
block|{
return|return
name|RenderDestination
operator|.
name|VIEW
return|;
block|}
return|return
name|RenderDestination
operator|.
name|EXPORT
return|;
block|}
specifier|public
specifier|static
name|RenderDestination
name|getRenderDestination
parameter_list|(
name|String
name|actionCommand
parameter_list|)
block|{
if|if
condition|(
name|RENDER_DESTINATION_EXPORT
operator|.
name|equals
argument_list|(
name|actionCommand
argument_list|)
condition|)
block|{
return|return
name|RenderDestination
operator|.
name|EXPORT
return|;
block|}
elseif|else
if|if
condition|(
name|RENDER_DESTINATION_PRINT
operator|.
name|equals
argument_list|(
name|actionCommand
argument_list|)
condition|)
block|{
return|return
name|RenderDestination
operator|.
name|PRINT
return|;
block|}
elseif|else
if|if
condition|(
name|RENDER_DESTINATION_VIEW
operator|.
name|equals
argument_list|(
name|actionCommand
argument_list|)
condition|)
block|{
return|return
name|RenderDestination
operator|.
name|VIEW
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
block|}
specifier|private
name|JMenu
name|createMenu
parameter_list|()
block|{
name|JMenu
name|menu
init|=
operator|new
name|JMenu
argument_list|()
decl_stmt|;
name|menu
operator|.
name|setText
argument_list|(
literal|"Render destination"
argument_list|)
expr_stmt|;
name|exportItem
operator|=
operator|new
name|JRadioButtonMenuItem
argument_list|()
expr_stmt|;
name|printItem
operator|=
operator|new
name|JRadioButtonMenuItem
argument_list|()
expr_stmt|;
name|viewItem
operator|=
operator|new
name|JRadioButtonMenuItem
argument_list|()
expr_stmt|;
name|exportItem
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ButtonGroup
name|bg
init|=
operator|new
name|ButtonGroup
argument_list|()
decl_stmt|;
name|bg
operator|.
name|add
argument_list|(
name|exportItem
argument_list|)
expr_stmt|;
name|bg
operator|.
name|add
argument_list|(
name|printItem
argument_list|)
expr_stmt|;
name|bg
operator|.
name|add
argument_list|(
name|viewItem
argument_list|)
expr_stmt|;
name|exportItem
operator|.
name|setText
argument_list|(
name|RENDER_DESTINATION_EXPORT
argument_list|)
expr_stmt|;
name|printItem
operator|.
name|setText
argument_list|(
name|RENDER_DESTINATION_PRINT
argument_list|)
expr_stmt|;
name|viewItem
operator|.
name|setText
argument_list|(
name|RENDER_DESTINATION_VIEW
argument_list|)
expr_stmt|;
name|menu
operator|.
name|add
argument_list|(
name|exportItem
argument_list|)
expr_stmt|;
name|menu
operator|.
name|add
argument_list|(
name|printItem
argument_list|)
expr_stmt|;
name|menu
operator|.
name|add
argument_list|(
name|viewItem
argument_list|)
expr_stmt|;
return|return
name|menu
return|;
block|}
block|}
end_class

end_unit

