begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2016 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|debugger
operator|.
name|ui
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Frame
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JDialog
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JLabel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JScrollPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTextPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|BadLocationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|SimpleAttributeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|StyleConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|StyledDocument
import|;
end_import

begin_comment
comment|/**  * Custom log dialog.  *  * @author John Hewson  */
end_comment

begin_class
specifier|public
class|class
name|LogDialog
extends|extends
name|JDialog
block|{
specifier|private
specifier|static
name|LogDialog
name|instance
decl_stmt|;
specifier|public
specifier|static
name|void
name|init
parameter_list|(
name|Frame
name|owner
parameter_list|,
name|JLabel
name|logLabel
parameter_list|)
block|{
name|instance
operator|=
operator|new
name|LogDialog
argument_list|(
name|owner
argument_list|,
name|logLabel
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|LogDialog
name|instance
parameter_list|()
block|{
return|return
name|instance
return|;
block|}
specifier|private
specifier|final
name|JLabel
name|logLabel
decl_stmt|;
specifier|private
specifier|final
name|JTextPane
name|textPane
decl_stmt|;
specifier|private
specifier|final
name|JScrollPane
name|scrollPane
decl_stmt|;
specifier|private
name|int
name|fatalCount
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|errorCount
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|warnCount
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|otherCount
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|exceptionCount
init|=
literal|0
decl_stmt|;
specifier|private
name|LogDialog
parameter_list|(
name|Frame
name|owner
parameter_list|,
name|JLabel
name|logLabel
parameter_list|)
block|{
name|super
argument_list|(
name|owner
argument_list|)
expr_stmt|;
name|this
operator|.
name|logLabel
operator|=
name|logLabel
expr_stmt|;
name|textPane
operator|=
operator|new
name|JTextPane
argument_list|()
expr_stmt|;
name|scrollPane
operator|=
operator|new
name|JScrollPane
argument_list|(
name|textPane
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|scrollPane
argument_list|)
expr_stmt|;
name|this
operator|.
name|pack
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|log
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|level
parameter_list|,
name|Object
name|o
parameter_list|,
name|Throwable
name|throwable
parameter_list|)
block|{
name|StyledDocument
name|doc
init|=
name|textPane
operator|.
name|getStyledDocument
argument_list|()
decl_stmt|;
name|String
name|levelText
decl_stmt|;
name|SimpleAttributeSet
name|levelStyle
init|=
operator|new
name|SimpleAttributeSet
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|level
condition|)
block|{
case|case
literal|"fatal"
case|:
name|levelText
operator|=
literal|"Fatal"
expr_stmt|;
name|StyleConstants
operator|.
name|setForeground
argument_list|(
name|levelStyle
argument_list|,
name|Color
operator|.
name|WHITE
argument_list|)
expr_stmt|;
name|StyleConstants
operator|.
name|setBackground
argument_list|(
name|levelStyle
argument_list|,
name|Color
operator|.
name|BLACK
argument_list|)
expr_stmt|;
name|fatalCount
operator|++
expr_stmt|;
break|break;
case|case
literal|"error"
case|:
name|levelText
operator|=
literal|"Error"
expr_stmt|;
name|StyleConstants
operator|.
name|setForeground
argument_list|(
name|levelStyle
argument_list|,
operator|new
name|Color
argument_list|(
literal|0xFF291F
argument_list|)
argument_list|)
expr_stmt|;
name|StyleConstants
operator|.
name|setBackground
argument_list|(
name|levelStyle
argument_list|,
operator|new
name|Color
argument_list|(
literal|0xFFF0F0
argument_list|)
argument_list|)
expr_stmt|;
name|errorCount
operator|++
expr_stmt|;
break|break;
case|case
literal|"warn"
case|:
name|levelText
operator|=
literal|"Warning"
expr_stmt|;
name|StyleConstants
operator|.
name|setForeground
argument_list|(
name|levelStyle
argument_list|,
operator|new
name|Color
argument_list|(
literal|0x614201
argument_list|)
argument_list|)
expr_stmt|;
name|StyleConstants
operator|.
name|setBackground
argument_list|(
name|levelStyle
argument_list|,
operator|new
name|Color
argument_list|(
literal|0xFFFCE5
argument_list|)
argument_list|)
expr_stmt|;
name|warnCount
operator|++
expr_stmt|;
break|break;
case|case
literal|"info"
case|:
name|levelText
operator|=
literal|"Info"
expr_stmt|;
name|StyleConstants
operator|.
name|setForeground
argument_list|(
name|levelStyle
argument_list|,
operator|new
name|Color
argument_list|(
literal|0x203261
argument_list|)
argument_list|)
expr_stmt|;
name|StyleConstants
operator|.
name|setBackground
argument_list|(
name|levelStyle
argument_list|,
operator|new
name|Color
argument_list|(
literal|0xE2E8FF
argument_list|)
argument_list|)
expr_stmt|;
name|otherCount
operator|++
expr_stmt|;
break|break;
case|case
literal|"debug"
case|:
name|levelText
operator|=
literal|"Debug"
expr_stmt|;
name|StyleConstants
operator|.
name|setForeground
argument_list|(
name|levelStyle
argument_list|,
operator|new
name|Color
argument_list|(
literal|0x32612E
argument_list|)
argument_list|)
expr_stmt|;
name|StyleConstants
operator|.
name|setBackground
argument_list|(
name|levelStyle
argument_list|,
operator|new
name|Color
argument_list|(
literal|0xF4FFEC
argument_list|)
argument_list|)
expr_stmt|;
name|otherCount
operator|++
expr_stmt|;
break|break;
case|case
literal|"trace"
case|:
name|levelText
operator|=
literal|"Trace"
expr_stmt|;
name|StyleConstants
operator|.
name|setForeground
argument_list|(
name|levelStyle
argument_list|,
operator|new
name|Color
argument_list|(
literal|0x64438D
argument_list|)
argument_list|)
expr_stmt|;
name|StyleConstants
operator|.
name|setBackground
argument_list|(
name|levelStyle
argument_list|,
operator|new
name|Color
argument_list|(
literal|0xFEF3FF
argument_list|)
argument_list|)
expr_stmt|;
name|otherCount
operator|++
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|Error
argument_list|(
name|level
argument_list|)
throw|;
block|}
name|SimpleAttributeSet
name|nameStyle
init|=
operator|new
name|SimpleAttributeSet
argument_list|()
decl_stmt|;
name|StyleConstants
operator|.
name|setForeground
argument_list|(
name|nameStyle
argument_list|,
operator|new
name|Color
argument_list|(
literal|0x6A6A6A
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|shortName
init|=
name|name
operator|.
name|substring
argument_list|(
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|String
name|message
init|=
name|o
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|throwable
operator|!=
literal|null
condition|)
block|{
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|throwable
operator|.
name|printStackTrace
argument_list|(
operator|new
name|PrintWriter
argument_list|(
name|sw
argument_list|)
argument_list|)
expr_stmt|;
name|message
operator|+=
literal|"\n    "
operator|+
name|sw
operator|.
name|toString
argument_list|()
expr_stmt|;
name|exceptionCount
operator|++
expr_stmt|;
block|}
try|try
block|{
name|doc
operator|.
name|insertString
argument_list|(
name|doc
operator|.
name|getLength
argument_list|()
argument_list|,
literal|" "
operator|+
name|levelText
operator|+
literal|" "
argument_list|,
name|levelStyle
argument_list|)
expr_stmt|;
name|doc
operator|.
name|insertString
argument_list|(
name|doc
operator|.
name|getLength
argument_list|()
argument_list|,
literal|" ["
operator|+
name|shortName
operator|+
literal|"]"
argument_list|,
name|nameStyle
argument_list|)
expr_stmt|;
name|doc
operator|.
name|insertString
argument_list|(
name|doc
operator|.
name|getLength
argument_list|()
argument_list|,
literal|" "
operator|+
name|message
operator|+
literal|"\n"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadLocationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Error
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|textPane
operator|.
name|setCaretPosition
argument_list|(
name|doc
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// update status bar with new counts
name|updateStatusBar
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|updateStatusBar
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|infos
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|exceptionCount
operator|>
literal|0
condition|)
block|{
name|infos
operator|.
name|add
argument_list|(
name|exceptionCount
operator|+
literal|" exception"
operator|+
operator|(
name|errorCount
operator|>
literal|1
condition|?
literal|"s"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fatalCount
operator|>
literal|0
condition|)
block|{
name|infos
operator|.
name|add
argument_list|(
name|errorCount
operator|+
literal|" error"
operator|+
operator|(
name|errorCount
operator|>
literal|1
condition|?
literal|"s"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|errorCount
operator|>
literal|0
condition|)
block|{
name|infos
operator|.
name|add
argument_list|(
name|errorCount
operator|+
literal|" error"
operator|+
operator|(
name|errorCount
operator|>
literal|1
condition|?
literal|"s"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|warnCount
operator|>
literal|0
condition|)
block|{
name|infos
operator|.
name|add
argument_list|(
name|warnCount
operator|+
literal|" warning"
operator|+
operator|(
name|warnCount
operator|>
literal|1
condition|?
literal|"s"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|otherCount
operator|>
literal|0
condition|)
block|{
name|infos
operator|.
name|add
argument_list|(
name|otherCount
operator|+
literal|" message"
operator|+
operator|(
name|otherCount
operator|>
literal|1
condition|?
literal|"s"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
block|}
name|String
name|info
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|str
range|:
name|infos
control|)
block|{
if|if
condition|(
name|info
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|info
operator|+=
literal|", "
expr_stmt|;
block|}
name|info
operator|+=
name|str
expr_stmt|;
block|}
name|logLabel
operator|.
name|setText
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|fatalCount
operator|=
literal|0
expr_stmt|;
name|errorCount
operator|=
literal|0
expr_stmt|;
name|warnCount
operator|=
literal|0
expr_stmt|;
name|otherCount
operator|=
literal|0
expr_stmt|;
name|exceptionCount
operator|=
literal|0
expr_stmt|;
name|textPane
operator|.
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|logLabel
operator|.
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

