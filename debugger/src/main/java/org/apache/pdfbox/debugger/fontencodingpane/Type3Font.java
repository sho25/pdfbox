begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2015 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|debugger
operator|.
name|fontencodingpane
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|BufferedImage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|util
operator|.
name|BoundingBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPageContentStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPageContentStream
operator|.
name|AppendMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDRectangle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDSimpleFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDType3CharProc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDType3Font
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|rendering
operator|.
name|PDFRenderer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|Matrix
import|;
end_import

begin_comment
comment|/**  * @author Khyrul Bashar  * @author Tilman Hausherr  *   * A class that shows the glyph table along with unicode characters for PDType3Font.  */
end_comment

begin_class
class|class
name|Type3Font
extends|extends
name|FontPane
block|{
specifier|public
specifier|static
specifier|final
name|String
name|NO_GLYPH
init|=
literal|"No glyph"
decl_stmt|;
specifier|private
specifier|final
name|FontEncodingView
name|view
decl_stmt|;
specifier|private
name|int
name|totalAvailableGlyph
init|=
literal|0
decl_stmt|;
specifier|private
name|PDRectangle
name|fontBBox
decl_stmt|;
specifier|private
specifier|final
name|PDResources
name|resources
decl_stmt|;
comment|/**      * Constructor.      * @param font PDSimpleFont instance.      * @throws IOException If fails to parse unicode characters.      */
name|Type3Font
parameter_list|(
name|PDType3Font
name|font
parameter_list|,
name|PDResources
name|resources
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|resources
operator|=
name|resources
expr_stmt|;
name|calcBBox
argument_list|(
name|font
argument_list|)
expr_stmt|;
name|Object
index|[]
index|[]
name|tableData
init|=
name|getGlyphs
argument_list|(
name|font
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attributes
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|attributes
operator|.
name|put
argument_list|(
literal|"Font"
argument_list|,
name|font
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
literal|"Encoding"
argument_list|,
name|getEncodingName
argument_list|(
name|font
argument_list|)
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
literal|"Glyphs"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|totalAvailableGlyph
argument_list|)
argument_list|)
expr_stmt|;
name|view
operator|=
operator|new
name|FontEncodingView
argument_list|(
name|tableData
argument_list|,
name|attributes
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Code"
block|,
literal|"Glyph Name"
block|,
literal|"Unicode Character"
block|,
literal|"Glyph"
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|calcBBox
parameter_list|(
name|PDType3Font
name|font
parameter_list|)
throws|throws
name|IOException
block|{
name|double
name|minX
init|=
literal|0
decl_stmt|;
name|double
name|maxX
init|=
literal|0
decl_stmt|;
name|double
name|minY
init|=
literal|0
decl_stmt|;
name|double
name|maxY
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<=
literal|255
condition|;
operator|++
name|index
control|)
block|{
name|PDType3CharProc
name|charProc
init|=
name|font
operator|.
name|getCharProc
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|charProc
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|PDRectangle
name|glyphBBox
init|=
name|charProc
operator|.
name|getGlyphBBox
argument_list|()
decl_stmt|;
if|if
condition|(
name|glyphBBox
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|minX
operator|=
name|Math
operator|.
name|min
argument_list|(
name|minX
argument_list|,
name|glyphBBox
operator|.
name|getLowerLeftX
argument_list|()
argument_list|)
expr_stmt|;
name|maxX
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxX
argument_list|,
name|glyphBBox
operator|.
name|getUpperRightX
argument_list|()
argument_list|)
expr_stmt|;
name|minY
operator|=
name|Math
operator|.
name|min
argument_list|(
name|minY
argument_list|,
name|glyphBBox
operator|.
name|getLowerLeftY
argument_list|()
argument_list|)
expr_stmt|;
name|maxY
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxY
argument_list|,
name|glyphBBox
operator|.
name|getUpperRightY
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|fontBBox
operator|=
operator|new
name|PDRectangle
argument_list|(
operator|(
name|float
operator|)
name|minX
argument_list|,
operator|(
name|float
operator|)
name|minY
argument_list|,
call|(
name|float
call|)
argument_list|(
name|maxX
operator|-
name|minX
argument_list|)
argument_list|,
call|(
name|float
call|)
argument_list|(
name|maxY
operator|-
name|minY
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|fontBBox
operator|.
name|getWidth
argument_list|()
operator|<=
literal|0
operator|||
name|fontBBox
operator|.
name|getHeight
argument_list|()
operator|<=
literal|0
condition|)
block|{
comment|// less reliable, but good as a fallback solution for PDF.js issue 10717
name|BoundingBox
name|boundingBox
init|=
name|font
operator|.
name|getBoundingBox
argument_list|()
decl_stmt|;
name|fontBBox
operator|=
operator|new
name|PDRectangle
argument_list|(
name|boundingBox
operator|.
name|getLowerLeftX
argument_list|()
argument_list|,
name|boundingBox
operator|.
name|getLowerLeftY
argument_list|()
argument_list|,
name|boundingBox
operator|.
name|getWidth
argument_list|()
argument_list|,
name|boundingBox
operator|.
name|getHeight
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Object
index|[]
index|[]
name|getGlyphs
parameter_list|(
name|PDType3Font
name|font
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|isEmpty
init|=
name|fontBBox
operator|.
name|toGeneralPath
argument_list|()
operator|.
name|getBounds2D
argument_list|()
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
name|Object
index|[]
index|[]
name|glyphs
init|=
operator|new
name|Object
index|[
literal|256
index|]
index|[
literal|4
index|]
decl_stmt|;
comment|// map needed to lessen memory footprint for files with duplicates
comment|// e.g. PDF.js issue 10717
name|Map
argument_list|<
name|String
argument_list|,
name|BufferedImage
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<=
literal|255
condition|;
name|index
operator|++
control|)
block|{
name|glyphs
index|[
name|index
index|]
index|[
literal|0
index|]
operator|=
name|index
expr_stmt|;
if|if
condition|(
name|font
operator|.
name|getEncoding
argument_list|()
operator|.
name|contains
argument_list|(
name|index
argument_list|)
operator|||
name|font
operator|.
name|toUnicode
argument_list|(
name|index
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
name|name
init|=
name|font
operator|.
name|getEncoding
argument_list|()
operator|.
name|getName
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|glyphs
index|[
name|index
index|]
index|[
literal|1
index|]
operator|=
name|name
expr_stmt|;
name|glyphs
index|[
name|index
index|]
index|[
literal|2
index|]
operator|=
name|font
operator|.
name|toUnicode
argument_list|(
name|index
argument_list|)
expr_stmt|;
if|if
condition|(
name|isEmpty
condition|)
block|{
name|glyphs
index|[
name|index
index|]
index|[
literal|3
index|]
operator|=
name|NO_GLYPH
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|glyphs
index|[
name|index
index|]
index|[
literal|3
index|]
operator|=
name|map
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|BufferedImage
name|image
init|=
name|renderType3Glyph
argument_list|(
name|font
argument_list|,
name|index
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|image
argument_list|)
expr_stmt|;
name|glyphs
index|[
name|index
index|]
index|[
literal|3
index|]
operator|=
name|image
expr_stmt|;
block|}
name|totalAvailableGlyph
operator|++
expr_stmt|;
block|}
else|else
block|{
name|glyphs
index|[
name|index
index|]
index|[
literal|1
index|]
operator|=
name|NO_GLYPH
expr_stmt|;
name|glyphs
index|[
name|index
index|]
index|[
literal|2
index|]
operator|=
name|NO_GLYPH
expr_stmt|;
name|glyphs
index|[
name|index
index|]
index|[
literal|3
index|]
operator|=
name|NO_GLYPH
expr_stmt|;
block|}
block|}
return|return
name|glyphs
return|;
block|}
comment|// Kindof an overkill to create a PDF for one glyph, but there is no better way at this time.
comment|// Isn't called if no bounds are available
specifier|private
name|BufferedImage
name|renderType3Glyph
parameter_list|(
name|PDType3Font
name|font
parameter_list|,
name|int
name|index
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|PDDocument
name|doc
init|=
operator|new
name|PDDocument
argument_list|()
init|)
block|{
name|int
name|scale
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|fontBBox
operator|.
name|getWidth
argument_list|()
operator|<
literal|72
operator|||
name|fontBBox
operator|.
name|getHeight
argument_list|()
operator|<
literal|72
condition|)
block|{
comment|// e.g. T4 font of PDFBOX-2959
name|scale
operator|=
call|(
name|int
call|)
argument_list|(
literal|72
operator|/
name|Math
operator|.
name|min
argument_list|(
name|fontBBox
operator|.
name|getWidth
argument_list|()
argument_list|,
name|fontBBox
operator|.
name|getHeight
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|PDPage
name|page
init|=
operator|new
name|PDPage
argument_list|(
operator|new
name|PDRectangle
argument_list|(
name|fontBBox
operator|.
name|getWidth
argument_list|()
operator|*
name|scale
argument_list|,
name|fontBBox
operator|.
name|getHeight
argument_list|()
operator|*
name|scale
argument_list|)
argument_list|)
decl_stmt|;
name|page
operator|.
name|setResources
argument_list|(
name|resources
argument_list|)
expr_stmt|;
try|try
init|(
name|PDPageContentStream
name|cs
init|=
operator|new
name|PDPageContentStream
argument_list|(
name|doc
argument_list|,
name|page
argument_list|,
name|AppendMode
operator|.
name|APPEND
argument_list|,
literal|false
argument_list|)
init|)
block|{
comment|// any changes here must be done carefully and each file must be tested again
comment|// just inverting didn't work with
comment|// https://www.treasury.gov/ofac/downloads/sdnlist.pdf (has rotated matrix)
comment|// also test PDFBOX-4228-type3.pdf (identity matrix)
comment|// Root/Pages/Kids/[0]/Resources/XObject/X1/Resources/XObject/X3/Resources/Font/F10
comment|// PDFBOX-1794-vattenfall.pdf (scale 0.001)
name|float
name|scalingFactorX
init|=
name|font
operator|.
name|getFontMatrix
argument_list|()
operator|.
name|getScalingFactorX
argument_list|()
decl_stmt|;
name|float
name|scalingFactorY
init|=
name|font
operator|.
name|getFontMatrix
argument_list|()
operator|.
name|getScalingFactorY
argument_list|()
decl_stmt|;
name|float
name|translateX
init|=
name|scalingFactorX
operator|>
literal|0
condition|?
operator|-
name|fontBBox
operator|.
name|getLowerLeftX
argument_list|()
else|:
name|fontBBox
operator|.
name|getUpperRightX
argument_list|()
decl_stmt|;
name|float
name|translateY
init|=
name|scalingFactorY
operator|>
literal|0
condition|?
operator|-
name|fontBBox
operator|.
name|getLowerLeftY
argument_list|()
else|:
name|fontBBox
operator|.
name|getUpperRightY
argument_list|()
decl_stmt|;
name|cs
operator|.
name|transform
argument_list|(
name|Matrix
operator|.
name|getTranslateInstance
argument_list|(
name|translateX
operator|*
name|scale
argument_list|,
name|translateY
operator|*
name|scale
argument_list|)
argument_list|)
expr_stmt|;
name|cs
operator|.
name|beginText
argument_list|()
expr_stmt|;
name|cs
operator|.
name|setFont
argument_list|(
name|font
argument_list|,
name|scale
operator|/
name|Math
operator|.
name|min
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|scalingFactorX
argument_list|)
argument_list|,
name|Math
operator|.
name|abs
argument_list|(
name|scalingFactorY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// can't use showText() because there's no guarantee we have the unicode
name|cs
operator|.
name|appendRawCommands
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"<%02X> Tj\n"
argument_list|,
name|index
argument_list|)
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|ISO_8859_1
argument_list|)
argument_list|)
expr_stmt|;
name|cs
operator|.
name|endText
argument_list|()
expr_stmt|;
block|}
name|doc
operator|.
name|addPage
argument_list|(
name|page
argument_list|)
expr_stmt|;
comment|// for debug you can save the PDF here
return|return
operator|new
name|PDFRenderer
argument_list|(
name|doc
argument_list|)
operator|.
name|renderImage
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
specifier|private
name|String
name|getEncodingName
parameter_list|(
name|PDSimpleFont
name|font
parameter_list|)
block|{
return|return
name|font
operator|.
name|getEncoding
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|JPanel
name|getPanel
parameter_list|()
block|{
return|return
name|view
operator|.
name|getPanel
argument_list|()
return|;
block|}
block|}
end_class

end_unit

