begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|debugger
operator|.
name|hexviewer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Dimension
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Graphics
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Graphics2D
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Point
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Rectangle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|KeyEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|KeyListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|MouseEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|MouseListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|MouseMotionListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|font
operator|.
name|TextAttribute
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|AttributedString
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPanel
import|;
end_import

begin_comment
comment|/**  * @author Khyrul Bashar  *  * HexPane shows the byte in a Grid table where every row has 16 bytes. It only draws bytes those are  * only visible at a given time.  */
end_comment

begin_class
class|class
name|HexPane
extends|extends
name|JPanel
implements|implements
name|KeyListener
implements|,
name|MouseListener
implements|,
name|MouseMotionListener
implements|,
name|HexModelChangeListener
block|{
specifier|private
specifier|final
name|HexModel
name|model
decl_stmt|;
specifier|private
name|int
name|selectedIndex
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
name|EDIT
init|=
literal|2
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
name|SELECTED
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
name|NORMAL
init|=
literal|0
decl_stmt|;
specifier|private
name|byte
name|state
init|=
name|NORMAL
decl_stmt|;
specifier|private
name|int
name|selectedChar
init|=
literal|0
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|HexChangeListener
argument_list|>
name|hexChangeListeners
init|=
operator|new
name|ArrayList
argument_list|<
name|HexChangeListener
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|SelectionChangeListener
argument_list|>
name|selectionChangeListeners
init|=
operator|new
name|ArrayList
argument_list|<
name|SelectionChangeListener
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Constructor.      * @param model HexModel instance.      */
name|HexPane
parameter_list|(
name|HexModel
name|model
parameter_list|)
block|{
name|this
operator|.
name|model
operator|=
name|model
expr_stmt|;
name|model
operator|.
name|addHexModelChangeListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|setPreferredSize
argument_list|(
operator|new
name|Dimension
argument_list|(
name|HexView
operator|.
name|HEX_PANE_WIDTH
argument_list|,
name|HexView
operator|.
name|CHAR_HEIGHT
operator|*
operator|(
name|model
operator|.
name|totalLine
argument_list|()
operator|+
literal|1
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|addMouseListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|addMouseMotionListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|addKeyListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|setAutoscrolls
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setFont
argument_list|(
name|HexView
operator|.
name|FONT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|paintComponent
parameter_list|(
name|Graphics
name|g
parameter_list|)
block|{
name|super
operator|.
name|paintComponent
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|Graphics2D
name|g2d
init|=
operator|(
name|Graphics2D
operator|)
name|g
decl_stmt|;
name|g2d
operator|.
name|setRenderingHints
argument_list|(
name|HexView
operator|.
name|RENDERING_HINTS
argument_list|)
expr_stmt|;
name|Rectangle
name|bound
init|=
name|getVisibleRect
argument_list|()
decl_stmt|;
name|g
operator|.
name|clearRect
argument_list|(
name|bound
operator|.
name|x
argument_list|,
name|bound
operator|.
name|y
argument_list|,
name|bound
operator|.
name|width
argument_list|,
name|bound
operator|.
name|height
argument_list|)
expr_stmt|;
name|g
operator|.
name|setColor
argument_list|(
name|Color
operator|.
name|WHITE
argument_list|)
expr_stmt|;
name|g
operator|.
name|fillRect
argument_list|(
name|bound
operator|.
name|x
argument_list|,
name|bound
operator|.
name|y
argument_list|,
name|bound
operator|.
name|width
argument_list|,
name|bound
operator|.
name|height
argument_list|)
expr_stmt|;
name|int
name|x
init|=
name|HexView
operator|.
name|LINE_INSET
decl_stmt|;
name|int
name|y
init|=
name|bound
operator|.
name|y
decl_stmt|;
if|if
condition|(
name|y
operator|==
literal|0
operator|||
name|y
operator|%
name|HexView
operator|.
name|CHAR_HEIGHT
operator|!=
literal|0
condition|)
block|{
name|y
operator|+=
name|HexView
operator|.
name|CHAR_HEIGHT
operator|-
name|y
operator|%
name|HexView
operator|.
name|CHAR_HEIGHT
expr_stmt|;
block|}
name|int
name|firstLine
init|=
name|y
operator|/
name|HexView
operator|.
name|CHAR_HEIGHT
decl_stmt|;
name|g
operator|.
name|setColor
argument_list|(
name|Color
operator|.
name|BLACK
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|firstLine
init|;
name|i
operator|<=
name|firstLine
operator|+
name|bound
operator|.
name|height
operator|/
name|HexView
operator|.
name|CHAR_HEIGHT
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
name|model
operator|.
name|totalLine
argument_list|()
condition|)
block|{
break|break;
block|}
name|byte
index|[]
name|bytes
init|=
name|model
operator|.
name|getBytesForLine
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|index
init|=
operator|(
name|i
operator|-
literal|1
operator|)
operator|*
literal|16
decl_stmt|;
for|for
control|(
name|byte
name|by
range|:
name|bytes
control|)
block|{
name|String
name|str
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%02X"
argument_list|,
name|by
argument_list|)
decl_stmt|;
if|if
condition|(
name|selectedIndex
operator|==
name|index
operator|&&
name|state
operator|==
name|SELECTED
condition|)
block|{
name|g
operator|.
name|drawString
argument_list|(
name|getSelectedString
argument_list|(
name|str
argument_list|)
operator|.
name|getIterator
argument_list|()
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|selectedIndex
operator|==
name|index
operator|&&
name|state
operator|==
name|EDIT
condition|)
block|{
name|paintInEdit
argument_list|(
name|g
argument_list|,
name|by
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|g
operator|.
name|drawString
argument_list|(
name|str
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
name|x
operator|+=
name|HexView
operator|.
name|CHAR_WIDTH
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
name|x
operator|=
name|HexView
operator|.
name|LINE_INSET
expr_stmt|;
name|y
operator|+=
name|HexView
operator|.
name|CHAR_HEIGHT
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|paintInEdit
parameter_list|(
name|Graphics
name|g
parameter_list|,
name|byte
name|content
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
block|{
name|g
operator|.
name|setFont
argument_list|(
name|HexView
operator|.
name|BOLD_FONT
argument_list|)
expr_stmt|;
name|g
operator|.
name|setColor
argument_list|(
name|Color
operator|.
name|white
argument_list|)
expr_stmt|;
name|char
index|[]
name|chars
init|=
name|getChars
argument_list|(
name|content
argument_list|)
decl_stmt|;
if|if
condition|(
name|selectedChar
operator|==
literal|0
condition|)
block|{
name|g
operator|.
name|setColor
argument_list|(
name|HexView
operator|.
name|SELECTED_COLOR
argument_list|)
expr_stmt|;
name|g
operator|.
name|drawChars
argument_list|(
name|chars
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|g
operator|.
name|setColor
argument_list|(
name|Color
operator|.
name|black
argument_list|)
expr_stmt|;
name|g
operator|.
name|drawChars
argument_list|(
name|chars
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|x
operator|+
name|g
operator|.
name|getFontMetrics
argument_list|()
operator|.
name|charWidth
argument_list|(
name|chars
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|g
operator|.
name|setColor
argument_list|(
name|Color
operator|.
name|black
argument_list|)
expr_stmt|;
name|g
operator|.
name|drawChars
argument_list|(
name|chars
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|g
operator|.
name|setColor
argument_list|(
name|HexView
operator|.
name|SELECTED_COLOR
argument_list|)
expr_stmt|;
name|g
operator|.
name|drawChars
argument_list|(
name|chars
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|x
operator|+
name|g
operator|.
name|getFontMetrics
argument_list|()
operator|.
name|charWidth
argument_list|(
name|chars
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
name|setDefault
argument_list|(
name|g
argument_list|)
expr_stmt|;
block|}
specifier|private
name|AttributedString
name|getSelectedString
parameter_list|(
name|String
name|str
parameter_list|)
block|{
name|AttributedString
name|string
init|=
operator|new
name|AttributedString
argument_list|(
name|str
argument_list|)
decl_stmt|;
name|string
operator|.
name|addAttribute
argument_list|(
name|TextAttribute
operator|.
name|FONT
argument_list|,
name|HexView
operator|.
name|BOLD_FONT
argument_list|)
expr_stmt|;
name|string
operator|.
name|addAttribute
argument_list|(
name|TextAttribute
operator|.
name|FOREGROUND
argument_list|,
name|HexView
operator|.
name|SELECTED_COLOR
argument_list|)
expr_stmt|;
return|return
name|string
return|;
block|}
specifier|private
name|void
name|setDefault
parameter_list|(
name|Graphics
name|g
parameter_list|)
block|{
name|g
operator|.
name|setColor
argument_list|(
name|Color
operator|.
name|black
argument_list|)
expr_stmt|;
name|g
operator|.
name|setFont
argument_list|(
name|this
operator|.
name|getFont
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the index for a given point If there is any byte in there.      * @param point Point instance.      * @return index.      */
specifier|private
name|int
name|getIndexForPoint
parameter_list|(
name|Point
name|point
parameter_list|)
block|{
if|if
condition|(
name|point
operator|.
name|x
operator|<=
literal|20
operator|||
name|point
operator|.
name|x
operator|>=
operator|(
literal|16
operator|*
name|HexView
operator|.
name|CHAR_WIDTH
operator|)
operator|+
literal|20
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|int
name|y
init|=
name|point
operator|.
name|y
decl_stmt|;
name|int
name|lineNumber
init|=
operator|(
name|y
operator|+
operator|(
name|HexView
operator|.
name|CHAR_HEIGHT
operator|-
operator|(
name|y
operator|%
name|HexView
operator|.
name|CHAR_HEIGHT
operator|)
operator|)
operator|)
operator|/
name|HexView
operator|.
name|CHAR_HEIGHT
decl_stmt|;
name|int
name|x
init|=
name|point
operator|.
name|x
operator|-
literal|20
decl_stmt|;
name|int
name|elementNumber
init|=
operator|(
name|x
operator|/
name|HexView
operator|.
name|CHAR_WIDTH
operator|)
decl_stmt|;
return|return
operator|(
name|lineNumber
operator|-
literal|1
operator|)
operator|*
literal|16
operator|+
name|elementNumber
return|;
block|}
comment|/**      * Returns the starting point in the view for any index.      * @param index int.      * @return Point instance.      */
specifier|private
name|Point
name|getPointForIndex
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|int
name|x
init|=
name|HexView
operator|.
name|LINE_INSET
operator|+
name|HexModel
operator|.
name|elementIndexInLine
argument_list|(
name|index
argument_list|)
operator|*
name|HexView
operator|.
name|CHAR_WIDTH
decl_stmt|;
name|int
name|y
init|=
name|HexModel
operator|.
name|lineNumber
argument_list|(
name|index
argument_list|)
operator|*
name|HexView
operator|.
name|CHAR_HEIGHT
decl_stmt|;
return|return
operator|new
name|Point
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
return|;
block|}
comment|/**      * Puts an index in selected state or in other word it selects the byte of the index.      * @param index      */
specifier|private
name|void
name|putInSelected
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|state
operator|=
name|SELECTED
expr_stmt|;
name|selectedChar
operator|=
literal|0
expr_stmt|;
name|Point
name|point
init|=
name|getPointForIndex
argument_list|(
name|index
argument_list|)
decl_stmt|;
comment|//for column one
if|if
condition|(
name|index
operator|%
literal|16
operator|==
literal|0
condition|)
block|{
name|scrollRectToVisible
argument_list|(
operator|new
name|Rectangle
argument_list|(
literal|0
argument_list|,
name|HexModel
operator|.
name|lineNumber
argument_list|(
name|index
argument_list|)
operator|*
name|HexView
operator|.
name|CHAR_HEIGHT
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|getVisibleRect
argument_list|()
operator|.
name|intersects
argument_list|(
name|point
operator|.
name|x
argument_list|,
name|point
operator|.
name|y
argument_list|,
name|HexView
operator|.
name|CHAR_WIDTH
argument_list|,
name|HexView
operator|.
name|CHAR_HEIGHT
argument_list|)
condition|)
block|{
name|scrollRectToVisible
argument_list|(
operator|new
name|Rectangle
argument_list|(
name|point
operator|.
name|x
argument_list|,
name|point
operator|.
name|y
argument_list|,
name|HexView
operator|.
name|CHAR_WIDTH
argument_list|,
name|HexView
operator|.
name|CHAR_HEIGHT
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|selectedIndex
operator|=
name|index
expr_stmt|;
name|repaint
argument_list|()
expr_stmt|;
name|requestFocusInWindow
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|fireSelectionChanged
parameter_list|(
name|SelectEvent
name|event
parameter_list|)
block|{
for|for
control|(
name|SelectionChangeListener
name|listener
range|:
name|selectionChangeListeners
control|)
block|{
name|listener
operator|.
name|selectionChanged
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|fireHexValueChanged
parameter_list|(
name|byte
name|value
parameter_list|,
name|int
name|index
parameter_list|)
block|{
for|for
control|(
name|HexChangeListener
name|listener
range|:
name|hexChangeListeners
control|)
block|{
name|listener
operator|.
name|hexChanged
argument_list|(
operator|new
name|HexChangedEvent
argument_list|(
name|value
argument_list|,
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addSelectionChangeListener
parameter_list|(
name|SelectionChangeListener
name|listener
parameter_list|)
block|{
name|selectionChangeListeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addHexChangeListeners
parameter_list|(
name|HexChangeListener
name|listener
parameter_list|)
block|{
name|hexChangeListeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|keyTyped
parameter_list|(
name|KeyEvent
name|keyEvent
parameter_list|)
block|{
if|if
condition|(
name|selectedIndex
operator|!=
operator|-
literal|1
condition|)
block|{
name|char
name|c
init|=
name|keyEvent
operator|.
name|getKeyChar
argument_list|()
decl_stmt|;
if|if
condition|(
name|isHexChar
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|byte
name|previousByte
init|=
name|model
operator|.
name|getByte
argument_list|(
name|selectedIndex
argument_list|)
decl_stmt|;
name|char
index|[]
name|chars
init|=
name|getChars
argument_list|(
name|previousByte
argument_list|)
decl_stmt|;
name|chars
index|[
name|selectedChar
index|]
operator|=
name|c
expr_stmt|;
name|byte
name|editByte
init|=
name|getByte
argument_list|(
name|chars
argument_list|)
decl_stmt|;
if|if
condition|(
name|selectedChar
operator|==
literal|0
condition|)
block|{
name|state
operator|=
name|EDIT
expr_stmt|;
name|selectedChar
operator|=
literal|1
expr_stmt|;
name|fireHexValueChanged
argument_list|(
name|editByte
argument_list|,
name|selectedIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fireHexValueChanged
argument_list|(
name|editByte
argument_list|,
name|selectedIndex
argument_list|)
expr_stmt|;
name|fireSelectionChanged
argument_list|(
operator|new
name|SelectEvent
argument_list|(
name|selectedIndex
argument_list|,
name|SelectEvent
operator|.
name|NEXT
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|keyPressed
parameter_list|(
name|KeyEvent
name|keyEvent
parameter_list|)
block|{
if|if
condition|(
name|state
operator|==
name|SELECTED
operator|||
name|state
operator|==
name|EDIT
condition|)
block|{
switch|switch
condition|(
name|keyEvent
operator|.
name|getKeyCode
argument_list|()
condition|)
block|{
case|case
literal|37
case|:
if|if
condition|(
name|state
operator|==
name|EDIT
operator|&&
name|selectedChar
operator|==
literal|1
condition|)
block|{
name|selectedChar
operator|=
literal|0
expr_stmt|;
name|repaint
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|fireSelectionChanged
argument_list|(
operator|new
name|SelectEvent
argument_list|(
name|selectedIndex
argument_list|,
name|SelectEvent
operator|.
name|PREVIOUS
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|39
case|:
name|fireSelectionChanged
argument_list|(
operator|new
name|SelectEvent
argument_list|(
name|selectedIndex
argument_list|,
name|SelectEvent
operator|.
name|NEXT
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|38
case|:
name|fireSelectionChanged
argument_list|(
operator|new
name|SelectEvent
argument_list|(
name|selectedIndex
argument_list|,
name|SelectEvent
operator|.
name|UP
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|40
case|:
name|fireSelectionChanged
argument_list|(
operator|new
name|SelectEvent
argument_list|(
name|selectedIndex
argument_list|,
name|SelectEvent
operator|.
name|DOWN
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|keyReleased
parameter_list|(
name|KeyEvent
name|keyEvent
parameter_list|)
block|{      }
annotation|@
name|Override
specifier|public
name|void
name|mouseClicked
parameter_list|(
name|MouseEvent
name|mouseEvent
parameter_list|)
block|{
name|int
name|index
init|=
name|getIndexForPoint
argument_list|(
name|mouseEvent
operator|.
name|getPoint
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
operator|-
literal|1
condition|)
block|{
name|fireSelectionChanged
argument_list|(
operator|new
name|SelectEvent
argument_list|(
operator|-
literal|1
argument_list|,
name|SelectEvent
operator|.
name|NONE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|fireSelectionChanged
argument_list|(
operator|new
name|SelectEvent
argument_list|(
name|index
argument_list|,
name|SelectEvent
operator|.
name|IN
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|mousePressed
parameter_list|(
name|MouseEvent
name|mouseEvent
parameter_list|)
block|{      }
annotation|@
name|Override
specifier|public
name|void
name|mouseReleased
parameter_list|(
name|MouseEvent
name|mouseEvent
parameter_list|)
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|mouseEntered
parameter_list|(
name|MouseEvent
name|mouseEvent
parameter_list|)
block|{      }
annotation|@
name|Override
specifier|public
name|void
name|mouseExited
parameter_list|(
name|MouseEvent
name|mouseEvent
parameter_list|)
block|{      }
annotation|@
name|Override
specifier|public
name|void
name|mouseDragged
parameter_list|(
name|MouseEvent
name|mouseEvent
parameter_list|)
block|{      }
annotation|@
name|Override
specifier|public
name|void
name|mouseMoved
parameter_list|(
name|MouseEvent
name|mouseEvent
parameter_list|)
block|{      }
specifier|private
specifier|static
name|boolean
name|isHexChar
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
operator|(
name|c
operator|>=
literal|'0'
operator|&&
name|c
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|c
operator|>=
literal|'a'
operator|&&
name|c
operator|<=
literal|'f'
operator|)
operator|||
operator|(
name|c
operator|>=
literal|'A'
operator|&&
name|c
operator|<=
literal|'F'
operator|)
return|;
block|}
specifier|private
name|char
index|[]
name|getChars
parameter_list|(
name|byte
name|b
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%02X"
argument_list|,
name|b
operator|&
literal|0XFF
argument_list|)
operator|.
name|toCharArray
argument_list|()
return|;
block|}
specifier|private
name|byte
name|getByte
parameter_list|(
name|char
index|[]
name|chars
parameter_list|)
block|{
return|return
call|(
name|byte
call|)
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
operator|new
name|String
argument_list|(
name|chars
argument_list|)
argument_list|,
literal|16
argument_list|)
operator|&
literal|0XFF
argument_list|)
return|;
block|}
specifier|public
name|void
name|setSelected
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|index
operator|!=
name|selectedIndex
condition|)
block|{
name|putInSelected
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|hexModelChanged
parameter_list|(
name|HexModelChangedEvent
name|event
parameter_list|)
block|{
name|repaint
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

