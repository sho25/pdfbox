begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2016 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|debugger
operator|.
name|ui
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_comment
comment|/**  * Custom Log implementation which forwards to LogDialog.  *  * @author John Hewson  */
end_comment

begin_class
specifier|public
class|class
name|DebugLog
implements|implements
name|Log
block|{
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
comment|// hardcoded, but kept to aid with debugging custom builds
specifier|private
specifier|final
name|boolean
name|INFO
init|=
literal|true
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|TRACE
init|=
literal|false
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|DEBUG
init|=
literal|false
decl_stmt|;
specifier|public
name|DebugLog
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|debug
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|DEBUG
condition|)
block|{
name|LogDialog
operator|.
name|instance
argument_list|()
operator|.
name|log
argument_list|(
name|name
argument_list|,
literal|"debug"
argument_list|,
name|o
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|debug
parameter_list|(
name|Object
name|o
parameter_list|,
name|Throwable
name|throwable
parameter_list|)
block|{
if|if
condition|(
name|DEBUG
condition|)
block|{
name|LogDialog
operator|.
name|instance
argument_list|()
operator|.
name|log
argument_list|(
name|name
argument_list|,
literal|"debug"
argument_list|,
name|o
argument_list|,
name|throwable
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|error
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|LogDialog
operator|.
name|instance
argument_list|()
operator|.
name|log
argument_list|(
name|name
argument_list|,
literal|"error"
argument_list|,
name|o
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|error
parameter_list|(
name|Object
name|o
parameter_list|,
name|Throwable
name|throwable
parameter_list|)
block|{
name|LogDialog
operator|.
name|instance
argument_list|()
operator|.
name|log
argument_list|(
name|name
argument_list|,
literal|"error"
argument_list|,
name|o
argument_list|,
name|throwable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|fatal
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|LogDialog
operator|.
name|instance
argument_list|()
operator|.
name|log
argument_list|(
name|name
argument_list|,
literal|"fatal"
argument_list|,
name|o
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|fatal
parameter_list|(
name|Object
name|o
parameter_list|,
name|Throwable
name|throwable
parameter_list|)
block|{
name|LogDialog
operator|.
name|instance
argument_list|()
operator|.
name|log
argument_list|(
name|name
argument_list|,
literal|"fatal"
argument_list|,
name|o
argument_list|,
name|throwable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|info
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|INFO
condition|)
block|{
name|LogDialog
operator|.
name|instance
argument_list|()
operator|.
name|log
argument_list|(
name|name
argument_list|,
literal|"info"
argument_list|,
name|o
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|info
parameter_list|(
name|Object
name|o
parameter_list|,
name|Throwable
name|throwable
parameter_list|)
block|{
if|if
condition|(
name|INFO
condition|)
block|{
name|LogDialog
operator|.
name|instance
argument_list|()
operator|.
name|log
argument_list|(
name|name
argument_list|,
literal|"info"
argument_list|,
name|o
argument_list|,
name|throwable
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isDebugEnabled
parameter_list|()
block|{
return|return
name|DEBUG
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isErrorEnabled
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isFatalEnabled
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isInfoEnabled
parameter_list|()
block|{
return|return
name|INFO
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isTraceEnabled
parameter_list|()
block|{
return|return
name|TRACE
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isWarnEnabled
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|trace
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|TRACE
condition|)
block|{
name|LogDialog
operator|.
name|instance
argument_list|()
operator|.
name|log
argument_list|(
name|name
argument_list|,
literal|"trace"
argument_list|,
name|o
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|trace
parameter_list|(
name|Object
name|o
parameter_list|,
name|Throwable
name|throwable
parameter_list|)
block|{
if|if
condition|(
name|TRACE
condition|)
block|{
name|LogDialog
operator|.
name|instance
argument_list|()
operator|.
name|log
argument_list|(
name|name
argument_list|,
literal|"trace"
argument_list|,
name|o
argument_list|,
name|throwable
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|warn
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|LogDialog
operator|.
name|instance
argument_list|()
operator|.
name|log
argument_list|(
name|name
argument_list|,
literal|"warn"
argument_list|,
name|o
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|warn
parameter_list|(
name|Object
name|o
parameter_list|,
name|Throwable
name|throwable
parameter_list|)
block|{
name|LogDialog
operator|.
name|instance
argument_list|()
operator|.
name|log
argument_list|(
name|name
argument_list|,
literal|"warn"
argument_list|,
name|o
argument_list|,
name|throwable
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

