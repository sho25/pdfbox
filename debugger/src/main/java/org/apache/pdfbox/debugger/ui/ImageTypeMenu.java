begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|debugger
operator|.
name|ui
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|ButtonGroup
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JMenu
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JRadioButtonMenuItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|rendering
operator|.
name|ImageType
import|;
end_import

begin_comment
comment|/**  * @author Tilman Hausherr  *  * A singleton class that provides the imagetype menu for the menubar. To act upon the menu item  * selection, the user of the class must add ActionListener which will check for the action command  * and act accordingly.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|ImageTypeMenu
extends|extends
name|MenuBase
block|{
specifier|public
specifier|static
specifier|final
name|String
name|IMAGETYPE_RGB
init|=
literal|"RGB"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|IMAGETYPE_ARGB
init|=
literal|"ARGB"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|IMAGETYPE_GRAY
init|=
literal|"Gray"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|IMAGETYPE_BITONAL
init|=
literal|"Bitonal"
decl_stmt|;
specifier|private
specifier|static
name|ImageTypeMenu
name|instance
decl_stmt|;
specifier|private
name|JRadioButtonMenuItem
name|rgbItem
decl_stmt|;
specifier|private
name|JRadioButtonMenuItem
name|argbItem
decl_stmt|;
specifier|private
name|JRadioButtonMenuItem
name|grayItem
decl_stmt|;
specifier|private
name|JRadioButtonMenuItem
name|bitonalItem
decl_stmt|;
comment|/**      * Constructor.      */
specifier|private
name|ImageTypeMenu
parameter_list|()
block|{
name|setMenu
argument_list|(
name|createMenu
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Provides the ImageTypeMenu instance.      * @return ImageTypeMenu instance.      */
specifier|public
specifier|static
name|ImageTypeMenu
name|getInstance
parameter_list|()
block|{
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
name|instance
operator|=
operator|new
name|ImageTypeMenu
argument_list|()
expr_stmt|;
block|}
return|return
name|instance
return|;
block|}
comment|/**      * Set the image type selection.      * @param selection String instance.      */
specifier|public
name|void
name|setImageTypeSelection
parameter_list|(
name|String
name|selection
parameter_list|)
block|{
if|if
condition|(
name|IMAGETYPE_RGB
operator|.
name|equals
argument_list|(
name|selection
argument_list|)
condition|)
block|{
name|rgbItem
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|IMAGETYPE_ARGB
operator|.
name|equals
argument_list|(
name|selection
argument_list|)
condition|)
block|{
name|argbItem
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|IMAGETYPE_GRAY
operator|.
name|equals
argument_list|(
name|selection
argument_list|)
condition|)
block|{
name|grayItem
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|IMAGETYPE_BITONAL
operator|.
name|equals
argument_list|(
name|selection
argument_list|)
condition|)
block|{
name|bitonalItem
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|isImageTypeMenu
parameter_list|(
name|String
name|actionCommand
parameter_list|)
block|{
return|return
name|IMAGETYPE_RGB
operator|.
name|equals
argument_list|(
name|actionCommand
argument_list|)
operator|||
name|IMAGETYPE_ARGB
operator|.
name|equals
argument_list|(
name|actionCommand
argument_list|)
operator|||
name|IMAGETYPE_GRAY
operator|.
name|equals
argument_list|(
name|actionCommand
argument_list|)
operator|||
name|IMAGETYPE_BITONAL
operator|.
name|equals
argument_list|(
name|actionCommand
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ImageType
name|getImageType
parameter_list|()
block|{
if|if
condition|(
name|instance
operator|.
name|argbItem
operator|.
name|isSelected
argument_list|()
condition|)
block|{
return|return
name|ImageType
operator|.
name|ARGB
return|;
block|}
if|if
condition|(
name|instance
operator|.
name|grayItem
operator|.
name|isSelected
argument_list|()
condition|)
block|{
return|return
name|ImageType
operator|.
name|GRAY
return|;
block|}
if|if
condition|(
name|instance
operator|.
name|bitonalItem
operator|.
name|isSelected
argument_list|()
condition|)
block|{
return|return
name|ImageType
operator|.
name|BINARY
return|;
block|}
return|return
name|ImageType
operator|.
name|RGB
return|;
block|}
specifier|public
specifier|static
name|ImageType
name|getImageType
parameter_list|(
name|String
name|actionCommand
parameter_list|)
block|{
if|if
condition|(
name|IMAGETYPE_RGB
operator|.
name|equals
argument_list|(
name|actionCommand
argument_list|)
condition|)
block|{
return|return
name|ImageType
operator|.
name|RGB
return|;
block|}
elseif|else
if|if
condition|(
name|IMAGETYPE_ARGB
operator|.
name|equals
argument_list|(
name|actionCommand
argument_list|)
condition|)
block|{
return|return
name|ImageType
operator|.
name|ARGB
return|;
block|}
elseif|else
if|if
condition|(
name|IMAGETYPE_GRAY
operator|.
name|equals
argument_list|(
name|actionCommand
argument_list|)
condition|)
block|{
return|return
name|ImageType
operator|.
name|GRAY
return|;
block|}
elseif|else
if|if
condition|(
name|IMAGETYPE_BITONAL
operator|.
name|equals
argument_list|(
name|actionCommand
argument_list|)
condition|)
block|{
return|return
name|ImageType
operator|.
name|BINARY
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
block|}
specifier|private
name|JMenu
name|createMenu
parameter_list|()
block|{
name|JMenu
name|menu
init|=
operator|new
name|JMenu
argument_list|()
decl_stmt|;
name|menu
operator|.
name|setText
argument_list|(
literal|"Image type"
argument_list|)
expr_stmt|;
name|rgbItem
operator|=
operator|new
name|JRadioButtonMenuItem
argument_list|()
expr_stmt|;
name|argbItem
operator|=
operator|new
name|JRadioButtonMenuItem
argument_list|()
expr_stmt|;
name|grayItem
operator|=
operator|new
name|JRadioButtonMenuItem
argument_list|()
expr_stmt|;
name|bitonalItem
operator|=
operator|new
name|JRadioButtonMenuItem
argument_list|()
expr_stmt|;
name|rgbItem
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ButtonGroup
name|bg
init|=
operator|new
name|ButtonGroup
argument_list|()
decl_stmt|;
name|bg
operator|.
name|add
argument_list|(
name|rgbItem
argument_list|)
expr_stmt|;
name|bg
operator|.
name|add
argument_list|(
name|argbItem
argument_list|)
expr_stmt|;
name|bg
operator|.
name|add
argument_list|(
name|grayItem
argument_list|)
expr_stmt|;
name|bg
operator|.
name|add
argument_list|(
name|bitonalItem
argument_list|)
expr_stmt|;
name|rgbItem
operator|.
name|setText
argument_list|(
name|IMAGETYPE_RGB
argument_list|)
expr_stmt|;
name|argbItem
operator|.
name|setText
argument_list|(
name|IMAGETYPE_ARGB
argument_list|)
expr_stmt|;
name|grayItem
operator|.
name|setText
argument_list|(
name|IMAGETYPE_GRAY
argument_list|)
expr_stmt|;
name|bitonalItem
operator|.
name|setText
argument_list|(
name|IMAGETYPE_BITONAL
argument_list|)
expr_stmt|;
name|menu
operator|.
name|add
argument_list|(
name|rgbItem
argument_list|)
expr_stmt|;
name|menu
operator|.
name|add
argument_list|(
name|argbItem
argument_list|)
expr_stmt|;
name|menu
operator|.
name|add
argument_list|(
name|grayItem
argument_list|)
expr_stmt|;
name|menu
operator|.
name|add
argument_list|(
name|bitonalItem
argument_list|)
expr_stmt|;
return|return
name|menu
return|;
block|}
block|}
end_class

end_unit

