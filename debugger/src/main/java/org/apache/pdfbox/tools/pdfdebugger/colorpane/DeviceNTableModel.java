begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|tools
operator|.
name|pdfdebugger
operator|.
name|colorpane
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|AbstractTableModel
import|;
end_import

begin_comment
comment|/**  * @author Khyrul Bashar.  */
end_comment

begin_comment
comment|/**  * This the table model for showing DeviceN color space which extends AbstractTableModel.  */
end_comment

begin_class
specifier|public
class|class
name|DeviceNTableModel
extends|extends
name|AbstractTableModel
block|{
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|COLUMNNAMES
init|=
operator|new
name|String
index|[]
block|{
literal|"Colorant"
block|,
literal|"Maximum"
block|,
literal|"Minimum"
block|}
decl_stmt|;
specifier|private
specifier|final
name|DeviceNColorant
index|[]
name|data
decl_stmt|;
comment|/**      * Constructor      * @param colorants array of DeviceNColorant      */
specifier|public
name|DeviceNTableModel
parameter_list|(
name|DeviceNColorant
index|[]
name|colorants
parameter_list|)
block|{
name|data
operator|=
name|colorants
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getRowCount
parameter_list|()
block|{
return|return
name|data
operator|.
name|length
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getColumnCount
parameter_list|()
block|{
return|return
name|COLUMNNAMES
operator|.
name|length
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getValueAt
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
switch|switch
condition|(
name|column
condition|)
block|{
case|case
literal|0
case|:
return|return
name|data
index|[
name|row
index|]
operator|.
name|getName
argument_list|()
return|;
case|case
literal|1
case|:
return|return
name|data
index|[
name|row
index|]
operator|.
name|getMaximum
argument_list|()
return|;
case|case
literal|2
case|:
return|return
name|data
index|[
name|row
index|]
operator|.
name|getMinimum
argument_list|()
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getColumnName
parameter_list|(
name|int
name|column
parameter_list|)
block|{
return|return
name|COLUMNNAMES
index|[
name|column
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getColumnClass
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
switch|switch
condition|(
name|columnIndex
condition|)
block|{
case|case
literal|0
case|:
return|return
name|String
operator|.
name|class
return|;
case|case
literal|1
case|:
case|case
literal|2
case|:
return|return
name|Color
operator|.
name|class
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

