begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright (c) 2006, www.jempbox.org  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are met:  *  * 1. Redistributions of source code must retain the above copyright notice,  *    this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright notice,  *    this list of conditions and the following disclaimer in the documentation  *    and/or other materials provided with the distribution.  * 3. Neither the name of pdfbox; nor the names of its  *    contributors may be used to endorse or promote products derived from this  *    software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * http://www.jempbox.org  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|jempbox
operator|.
name|xmp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_comment
comment|/**  * Define XMP properties used with Adobe Photoshop documents.  *   * @author $Author: benlitchfield $  * @version $Revision: 1.2 $  */
end_comment

begin_class
specifier|public
class|class
name|XMPSchemaPhotoshop
extends|extends
name|XMPSchema
block|{
comment|/**      * The namespace for this schema.      */
specifier|public
specifier|static
specifier|final
name|String
name|NAMESPACE
init|=
literal|"http://ns.adobe.com/photoshop/1.0/"
decl_stmt|;
comment|/**      * Construct a new blank Photoshop schema.      *       * @param parent      *            The parent metadata schema that this will be part of.      */
specifier|public
name|XMPSchemaPhotoshop
parameter_list|(
name|XMPMetadata
name|parent
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
literal|"photoshop"
argument_list|,
name|NAMESPACE
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor for existing XML element.      *       * @param element The XML element.      * @param aPrefix The XML prefix; photoshop.      */
specifier|public
name|XMPSchemaPhotoshop
parameter_list|(
name|Element
name|element
parameter_list|,
name|String
name|aPrefix
parameter_list|)
block|{
name|super
argument_list|(
name|element
argument_list|,
name|aPrefix
argument_list|)
expr_stmt|;
block|}
comment|/**      * By-line title.      *       * @param s The authors position.      */
specifier|public
name|void
name|setAuthorsPosition
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|setTextProperty
argument_list|(
name|prefix
operator|+
literal|":AuthorsPosition"
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
comment|/**      * By-line title.      *       * @return The authors position.      */
specifier|public
name|String
name|getAuthorsPosition
parameter_list|()
block|{
return|return
name|getTextProperty
argument_list|(
name|prefix
operator|+
literal|":AuthorsPosition"
argument_list|)
return|;
block|}
comment|/**      * Writer/editor.      *       * @param s The caption writer.      */
specifier|public
name|void
name|setCaptionWriter
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|setTextProperty
argument_list|(
name|prefix
operator|+
literal|":CaptionWriter"
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
comment|/**      * Writer/editor.      *       * @return The caption writer.      */
specifier|public
name|String
name|getCaptionWriter
parameter_list|()
block|{
return|return
name|getTextProperty
argument_list|(
name|prefix
operator|+
literal|":CaptionWriter"
argument_list|)
return|;
block|}
comment|/**      * Category; limited to 3 7-bit characters.      * @param s The category.      */
specifier|public
name|void
name|setCategory
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|!=
literal|null
operator|&&
name|s
operator|.
name|length
argument_list|()
operator|>
literal|3
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error: photoshop:Category is limited to three characters value='"
operator|+
name|s
operator|+
literal|"'"
argument_list|)
throw|;
block|}
name|setTextProperty
argument_list|(
name|prefix
operator|+
literal|":Category"
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
comment|/**      * The category.      *       * @return The category.      */
specifier|public
name|String
name|getCategory
parameter_list|()
block|{
return|return
name|getTextProperty
argument_list|(
name|prefix
operator|+
literal|":Category"
argument_list|)
return|;
block|}
comment|/**      * The city.      *       * @param s The city.      */
specifier|public
name|void
name|setCity
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|setTextProperty
argument_list|(
name|prefix
operator|+
literal|":City"
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
comment|/**      * The city.      *       * @return The city.      */
specifier|public
name|String
name|getCity
parameter_list|()
block|{
return|return
name|getTextProperty
argument_list|(
name|prefix
operator|+
literal|":City"
argument_list|)
return|;
block|}
comment|/**      * The country.      *       * @param s The country.      */
specifier|public
name|void
name|setCountry
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|setTextProperty
argument_list|(
name|prefix
operator|+
literal|":Country"
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
comment|/**      * The country.      *       * @return The country.      */
specifier|public
name|String
name|getCountry
parameter_list|()
block|{
return|return
name|getTextProperty
argument_list|(
name|prefix
operator|+
literal|":Country"
argument_list|)
return|;
block|}
comment|/**      * Credit.      *       * @param s The credit property.      */
specifier|public
name|void
name|setCredit
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|setTextProperty
argument_list|(
name|prefix
operator|+
literal|":Credit"
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
comment|/**      * The credit property.      *       * @return The credit property.      */
specifier|public
name|String
name|getCredit
parameter_list|()
block|{
return|return
name|getTextProperty
argument_list|(
name|prefix
operator|+
literal|":Credit"
argument_list|)
return|;
block|}
comment|/**      * Date created; creation date of the source document which may be      * earlier than the digital representation.      *       * @param s The date created.      */
specifier|public
name|void
name|setDateCreated
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|setTextProperty
argument_list|(
name|prefix
operator|+
literal|":DateCreated"
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creation date.      *       * @return The creation date.      */
specifier|public
name|String
name|getDateCreated
parameter_list|()
block|{
return|return
name|getTextProperty
argument_list|(
name|prefix
operator|+
literal|":DateCreated"
argument_list|)
return|;
block|}
comment|/**      * The headline.      *       * @param s The headline.      */
specifier|public
name|void
name|setHeadline
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|setTextProperty
argument_list|(
name|prefix
operator|+
literal|":Headline"
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
comment|/**      * Headline.      *       * @return The headline.      */
specifier|public
name|String
name|getHeadline
parameter_list|()
block|{
return|return
name|getTextProperty
argument_list|(
name|prefix
operator|+
literal|":Headline"
argument_list|)
return|;
block|}
comment|/**      * Instructions.      *       * @param s The instructions.      */
specifier|public
name|void
name|setInstructions
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|setTextProperty
argument_list|(
name|prefix
operator|+
literal|":Instructions"
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
comment|/**      * The instructions.      *       * @return The instructions.      */
specifier|public
name|String
name|getInstructions
parameter_list|()
block|{
return|return
name|getTextProperty
argument_list|(
name|prefix
operator|+
literal|":Instructions"
argument_list|)
return|;
block|}
comment|/**      * The source.      *       * @param s The source.      */
specifier|public
name|void
name|setSource
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|setTextProperty
argument_list|(
name|prefix
operator|+
literal|":Source"
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
comment|/**      * The source.      *       * @return The source.      */
specifier|public
name|String
name|getSource
parameter_list|()
block|{
return|return
name|getTextProperty
argument_list|(
name|prefix
operator|+
literal|":Source"
argument_list|)
return|;
block|}
comment|/**      * The state.      *       * @param s The state.      */
specifier|public
name|void
name|setState
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|setTextProperty
argument_list|(
name|prefix
operator|+
literal|":State"
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
comment|/**      * The state.      *       * @return The state.      */
specifier|public
name|String
name|getState
parameter_list|()
block|{
return|return
name|getTextProperty
argument_list|(
name|prefix
operator|+
literal|":State"
argument_list|)
return|;
block|}
comment|/**      * Add a new supplemental category.      *       * @param s The supplemental category.      */
specifier|public
name|void
name|addSupplementalCategory
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|addBagValue
argument_list|(
name|prefix
operator|+
literal|":SupplementalCategories"
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get a list of all supplemental categories.      *       * @return The supplemental categories.      */
specifier|public
name|List
name|getSupplementalCategories
parameter_list|()
block|{
return|return
name|getBagList
argument_list|(
name|prefix
operator|+
literal|":SupplementalCategories"
argument_list|)
return|;
block|}
comment|/**      * Remove a supplemental category.      *       * @param s The supplemental category.      */
specifier|public
name|void
name|removeSupplementalCategory
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|removeBagValue
argument_list|(
name|prefix
operator|+
literal|":SupplementalCategories"
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
comment|/**      * The transmission reference.      *        * @param s The transmission reference.      */
specifier|public
name|void
name|setTransmissionReference
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|setTextProperty
argument_list|(
name|prefix
operator|+
literal|":TransmissionReference"
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
comment|/**      * The transmission reference.      *       * @return The transmission reference.      */
specifier|public
name|String
name|getTransmissionReference
parameter_list|()
block|{
return|return
name|getTextProperty
argument_list|(
name|prefix
operator|+
literal|":TransmissionReference"
argument_list|)
return|;
block|}
comment|/**      * The urgency.      *       * @param s The urgency.      */
specifier|public
name|void
name|setUrgency
parameter_list|(
name|Integer
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|s
operator|.
name|intValue
argument_list|()
operator|<
literal|1
operator|||
name|s
operator|.
name|intValue
argument_list|()
operator|>
literal|8
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error: photoshop:Urgency must be between 1 and 8.  value="
operator|+
name|s
argument_list|)
throw|;
block|}
block|}
name|setIntegerProperty
argument_list|(
name|prefix
operator|+
literal|":Urgency"
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
comment|/**      * The urgency.      *       * @return The urgency.      */
specifier|public
name|Integer
name|getUrgency
parameter_list|()
block|{
return|return
name|getIntegerProperty
argument_list|(
name|prefix
operator|+
literal|":Urgency"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

