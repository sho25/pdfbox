begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright (c) 2006, www.jempbox.org  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are met:  *  * 1. Redistributions of source code must retain the above copyright notice,  *    this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright notice,  *    this list of conditions and the following disclaimer in the documentation  *    and/or other materials provided with the distribution.  * 3. Neither the name of pdfbox; nor the names of its  *    contributors may be used to endorse or promote products derived from this  *    software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * http://www.jempbox.org  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|jempbox
operator|.
name|xmp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jempbox
operator|.
name|impl
operator|.
name|XMLUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_comment
comment|/**  * Define XMP properties that are related to digital asset management.  *   * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.2 $  */
end_comment

begin_class
specifier|public
class|class
name|XMPSchemaMediaManagement
extends|extends
name|XMPSchema
block|{
comment|/**      * The namespace for this schema.      */
specifier|public
specifier|static
specifier|final
name|String
name|NAMESPACE
init|=
literal|"http://ns.adobe.com/xap/1.0/mm/"
decl_stmt|;
comment|/**      * Construct a new blank PDF schema.      *      * @param parent The parent metadata schema that this will be part of.      */
specifier|public
name|XMPSchemaMediaManagement
parameter_list|(
name|XMPMetadata
name|parent
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
literal|"xmpMM"
argument_list|,
name|NAMESPACE
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor from existing XML element.      *       * @param element The existing element.      * @param prefix The schema prefix.      */
specifier|public
name|XMPSchemaMediaManagement
parameter_list|(
name|Element
name|element
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|super
argument_list|(
name|element
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get a reference to the original document that this document is      * derived from.      *       * @return A reference to the derived document, or null if one does not exist.      */
specifier|public
name|ResourceRef
name|getDerivedFrom
parameter_list|()
block|{
name|ResourceRef
name|retval
init|=
literal|null
decl_stmt|;
name|NodeList
name|nodes
init|=
name|schema
operator|.
name|getElementsByTagName
argument_list|(
name|prefix
operator|+
literal|":DerivedFrom"
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodes
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Element
name|derived
init|=
operator|(
name|Element
operator|)
name|nodes
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|retval
operator|=
operator|new
name|ResourceRef
argument_list|(
name|derived
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//the old name was RenditionOf, this is now deprecated but lets
comment|//try to find it in case of older XMP documents.
name|NodeList
name|deprecatedNodes
init|=
name|schema
operator|.
name|getElementsByTagName
argument_list|(
literal|"xmpMM:RenditionOf"
argument_list|)
decl_stmt|;
if|if
condition|(
name|deprecatedNodes
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Element
name|derived
init|=
operator|(
name|Element
operator|)
name|deprecatedNodes
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|retval
operator|=
operator|new
name|ResourceRef
argument_list|(
name|derived
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|retval
return|;
block|}
comment|/**      * Create a new Derived From resource ref that can be populated.  You      * will still need to call setDerivedFrom after this is created.      *       * @return A new blank derived from instance.      */
specifier|public
name|ResourceRef
name|createDerivedFrom
parameter_list|()
block|{
name|Element
name|node
init|=
name|schema
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|createElement
argument_list|(
name|prefix
operator|+
literal|":DerivedFrom"
argument_list|)
decl_stmt|;
name|ResourceRef
name|ref
init|=
operator|new
name|ResourceRef
argument_list|(
name|node
argument_list|)
decl_stmt|;
return|return
name|ref
return|;
block|}
comment|/**      * Set or clear the derived from value.      *       * @param resource The resource reference to set.      *       * @see XMPSchemaMediaManagement#createDerivedFrom()      */
specifier|public
name|void
name|setDerivedFrom
parameter_list|(
name|ResourceRef
name|resource
parameter_list|)
block|{
name|XMLUtil
operator|.
name|setElementableValue
argument_list|(
name|schema
argument_list|,
name|prefix
operator|+
literal|":DerivedFrom"
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the common identifier to all versions of this document.  It should      * be based on a UUID.      *      * @param id An identifier for the document.      */
specifier|public
name|void
name|setDocumentID
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|setTextProperty
argument_list|(
name|prefix
operator|+
literal|":DocumentID"
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get id that identifies all versions of this document.      *      * @return The document id.      */
specifier|public
name|String
name|getDocumentID
parameter_list|()
block|{
return|return
name|getTextProperty
argument_list|(
name|prefix
operator|+
literal|":DocumentID"
argument_list|)
return|;
block|}
comment|/**      *      * @param id An identifier for the current version.      */
specifier|public
name|void
name|setVersionID
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|setTextProperty
argument_list|(
name|prefix
operator|+
literal|":VersionID"
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
comment|/**      *      * @return The current version id.      */
specifier|public
name|String
name|getVersionID
parameter_list|()
block|{
return|return
name|getTextProperty
argument_list|(
name|prefix
operator|+
literal|":VersionID"
argument_list|)
return|;
block|}
comment|/**      * Get a list of all historical events that have occured for this resource.      *       * @return A list of ResourceEvent objects or null.      */
specifier|public
name|List
name|getHistory
parameter_list|()
block|{
return|return
name|getEventSequenceList
argument_list|(
name|prefix
operator|+
literal|":History"
argument_list|)
return|;
block|}
comment|/**      * Remove an event from the list of events.      *       * @param event The event to remove.      */
specifier|public
name|void
name|removeHistory
parameter_list|(
name|ResourceEvent
name|event
parameter_list|)
block|{
name|removeSequenceValue
argument_list|(
name|prefix
operator|+
literal|":History"
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add a new historical event.      *       * @param event The event to add to the list of history.      */
specifier|public
name|void
name|addHistory
parameter_list|(
name|ResourceEvent
name|event
parameter_list|)
block|{
name|addSequenceValue
argument_list|(
name|prefix
operator|+
literal|":History"
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get a reference to the document prior to it being managed.      *       * @return A reference to the managed document.      */
specifier|public
name|ResourceRef
name|getManagedFrom
parameter_list|()
block|{
name|ResourceRef
name|retval
init|=
literal|null
decl_stmt|;
name|NodeList
name|nodes
init|=
name|schema
operator|.
name|getElementsByTagName
argument_list|(
name|prefix
operator|+
literal|":ManagedFrom"
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodes
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Element
name|derived
init|=
operator|(
name|Element
operator|)
name|nodes
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|retval
operator|=
operator|new
name|ResourceRef
argument_list|(
name|derived
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * Create a new Managed From resource ref that can be populated.  You      * will still need to call setManagedFrom after this is created.      *       * @return A new blank managed from instance.      */
specifier|public
name|ResourceRef
name|createManagedFrom
parameter_list|()
block|{
name|Element
name|node
init|=
name|schema
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|createElement
argument_list|(
name|prefix
operator|+
literal|":ManagedFrom"
argument_list|)
decl_stmt|;
name|ResourceRef
name|ref
init|=
operator|new
name|ResourceRef
argument_list|(
name|node
argument_list|)
decl_stmt|;
return|return
name|ref
return|;
block|}
comment|/**      * Set or clear the managed from value.      *       * @param resource The resource reference to set.      *       * @see XMPSchemaMediaManagement#createManagedFrom()      */
specifier|public
name|void
name|setManagedFrom
parameter_list|(
name|ResourceRef
name|resource
parameter_list|)
block|{
name|XMLUtil
operator|.
name|setElementableValue
argument_list|(
name|schema
argument_list|,
name|prefix
operator|+
literal|":DerivedFrom"
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the asset management system that manages this resource.      *      * @param manager The name of the asset management system.      */
specifier|public
name|void
name|setManager
parameter_list|(
name|String
name|manager
parameter_list|)
block|{
name|setTextProperty
argument_list|(
name|prefix
operator|+
literal|":Manager"
argument_list|,
name|manager
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the name of the asset management system that manages this resource.      *      * @return The name of the asset management system.      */
specifier|public
name|String
name|getManager
parameter_list|()
block|{
return|return
name|getTextProperty
argument_list|(
name|prefix
operator|+
literal|":Manager"
argument_list|)
return|;
block|}
comment|/**      * Set the URI identifying the managed resource.      *      * @param uri URI to the managed resource.      */
specifier|public
name|void
name|setManageTo
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|setTextProperty
argument_list|(
name|prefix
operator|+
literal|":ManageTo"
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the URI to the managed resource.      *      * @return The managed resource URI.      */
specifier|public
name|String
name|getManageTo
parameter_list|()
block|{
return|return
name|getTextProperty
argument_list|(
name|prefix
operator|+
literal|":ManageTo"
argument_list|)
return|;
block|}
comment|/**      * Set the URI identifying information about the managed resource.      *      * @param uri URI to the managed resource info.      */
specifier|public
name|void
name|setManageUI
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|setTextProperty
argument_list|(
name|prefix
operator|+
literal|":ManageUI"
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the URI to the managed resource information.      *      * @return The managed resource information URI.      */
specifier|public
name|String
name|getManageUI
parameter_list|()
block|{
return|return
name|getTextProperty
argument_list|(
name|prefix
operator|+
literal|":ManageUI"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

