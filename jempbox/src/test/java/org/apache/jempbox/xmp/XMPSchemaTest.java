begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jempbox
operator|.
name|xmp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jempbox
operator|.
name|impl
operator|.
name|DateConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jempbox
operator|.
name|xmp
operator|.
name|XMPMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jempbox
operator|.
name|xmp
operator|.
name|XMPSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_comment
comment|/**  * Tests for the XMPSchema class.  *   * @author $Author: benlitchfield $  * @version $Revision: 1.2 $ ($Date: 2007/02/28 02:30:30 $)  *   */
end_comment

begin_class
specifier|public
class|class
name|XMPSchemaTest
extends|extends
name|TestCase
block|{
comment|/**      * Check whether the schema correctly sets the rdf:Description element.      *       * @throws IOException Signals an error with the XMP processing.      * @throws ParserConfigurationException Signals an error with the XMP processing.      */
specifier|public
name|void
name|testRDFDescription
parameter_list|()
throws|throws
name|IOException
throws|,
name|ParserConfigurationException
block|{
comment|// Check constructor using an element
name|XMPMetadata
name|xmp
init|=
operator|new
name|XMPMetadata
argument_list|()
decl_stmt|;
name|XMPSchema
name|basic
init|=
operator|new
name|XMPSchema
argument_list|(
name|xmp
argument_list|,
literal|"test"
argument_list|,
literal|"http://test.com/test"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|basic
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"rdf:Description"
argument_list|,
name|basic
operator|.
name|getElement
argument_list|()
operator|.
name|getTagName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Then Check using the Document Builder Factory
name|DocumentBuilderFactory
name|builderFactory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|DocumentBuilder
name|builder
init|=
name|builderFactory
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|Element
name|e
init|=
name|builder
operator|.
name|newDocument
argument_list|()
operator|.
name|createElement
argument_list|(
literal|"rdf:Description"
argument_list|)
decl_stmt|;
name|XMPSchema
name|schema
init|=
operator|new
name|XMPSchema
argument_list|(
name|e
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|e
argument_list|,
name|schema
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"rdf:Description"
argument_list|,
name|schema
operator|.
name|getElement
argument_list|()
operator|.
name|getTagName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that text properties are correctly handeled.      *       * @throws IOException Signals an error with the XMP processing.      */
specifier|public
name|void
name|testTextProperty
parameter_list|()
throws|throws
name|IOException
block|{
name|XMPMetadata
name|xmp
init|=
operator|new
name|XMPMetadata
argument_list|()
decl_stmt|;
name|XMPSchema
name|schema
init|=
operator|new
name|XMPSchema
argument_list|(
name|xmp
argument_list|,
literal|"test"
argument_list|,
literal|"http://test.com/test"
argument_list|)
decl_stmt|;
name|schema
operator|.
name|setTextProperty
argument_list|(
literal|"test:title"
argument_list|,
literal|"The advanced Flux-Compensation for Delawney-Separation"
argument_list|)
expr_stmt|;
name|Element
name|e
init|=
name|schema
operator|.
name|getElement
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"The advanced Flux-Compensation for Delawney-Separation"
argument_list|,
name|e
operator|.
name|getAttribute
argument_list|(
literal|"test:title"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The advanced Flux-Compensation for Delawney-Separation"
argument_list|,
name|schema
operator|.
name|getTextProperty
argument_list|(
literal|"test:title"
argument_list|)
argument_list|)
expr_stmt|;
name|schema
operator|.
name|setTextProperty
argument_list|(
literal|"test:title"
argument_list|,
literal|"Bacon's Dictum and Healey's Heaven"
argument_list|)
expr_stmt|;
name|e
operator|=
name|schema
operator|.
name|getElement
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Bacon's Dictum and Healey's Heaven"
argument_list|,
name|e
operator|.
name|getAttribute
argument_list|(
literal|"test:title"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Bacon's Dictum and Healey's Heaven"
argument_list|,
name|schema
operator|.
name|getTextProperty
argument_list|(
literal|"test:title"
argument_list|)
argument_list|)
expr_stmt|;
name|schema
operator|.
name|setTextProperty
argument_list|(
literal|"test:abstract"
argument_list|,
literal|"   The abstract\n can go \n \n on several"
operator|+
literal|" \n lines with \n many \n\n empty ones in \n between."
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"   The abstract\n can go \n \n on several"
operator|+
literal|" \n lines with \n many \n\n empty ones in \n between."
argument_list|,
name|schema
operator|.
name|getTextProperty
argument_list|(
literal|"test:abstract"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that integer properties are correctly handled.      *       * @throws IOException Signals an error with the XMP processing.      */
specifier|public
name|void
name|testIntegerProperty
parameter_list|()
throws|throws
name|IOException
block|{
name|XMPMetadata
name|xmp
init|=
operator|new
name|XMPMetadata
argument_list|()
decl_stmt|;
name|XMPSchema
name|schema
init|=
operator|new
name|XMPSchema
argument_list|(
name|xmp
argument_list|,
literal|"test"
argument_list|,
literal|"http://test.com/test"
argument_list|)
decl_stmt|;
name|schema
operator|.
name|setIntegerProperty
argument_list|(
literal|"test:intvalue"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|14
argument_list|)
argument_list|)
expr_stmt|;
name|Element
name|e
init|=
name|schema
operator|.
name|getElement
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"14"
argument_list|,
name|e
operator|.
name|getAttribute
argument_list|(
literal|"test:intvalue"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Integer
argument_list|(
literal|14
argument_list|)
argument_list|,
name|schema
operator|.
name|getIntegerProperty
argument_list|(
literal|"test:intvalue"
argument_list|)
argument_list|)
expr_stmt|;
name|schema
operator|.
name|setIntegerProperty
argument_list|(
literal|"test:intvalue"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|=
name|schema
operator|.
name|getElement
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"16"
argument_list|,
name|e
operator|.
name|getAttribute
argument_list|(
literal|"test:intvalue"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Integer
argument_list|(
literal|16
argument_list|)
argument_list|,
name|schema
operator|.
name|getIntegerProperty
argument_list|(
literal|"test:intvalue"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Check bag properties.      *       * @throws IOException Signals an error with the XMP processing.      */
specifier|public
name|void
name|testBags
parameter_list|()
throws|throws
name|IOException
block|{
name|XMPMetadata
name|xmp
init|=
operator|new
name|XMPMetadata
argument_list|()
decl_stmt|;
name|XMPSchema
name|schema
init|=
operator|new
name|XMPSchema
argument_list|(
name|xmp
argument_list|,
literal|"test"
argument_list|,
literal|"http://test.com/test"
argument_list|)
decl_stmt|;
name|schema
operator|.
name|addBagValue
argument_list|(
literal|"author"
argument_list|,
literal|"Tom DeMarco"
argument_list|)
expr_stmt|;
name|schema
operator|.
name|addBagValue
argument_list|(
literal|"author"
argument_list|,
literal|"Kent Beck"
argument_list|)
expr_stmt|;
block|{
name|List
argument_list|<
name|String
argument_list|>
name|l
init|=
name|schema
operator|.
name|getBagList
argument_list|(
literal|"author"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
literal|"Tom DeMarco"
argument_list|)
operator|||
name|l
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
literal|"Tom DeMarco"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
literal|"Kent Beck"
argument_list|)
operator|||
name|l
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
literal|"Kent Beck"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|schema
operator|.
name|removeBagValue
argument_list|(
literal|"author"
argument_list|,
literal|"Kent Beck"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|l
init|=
name|schema
operator|.
name|getBagList
argument_list|(
literal|"author"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
literal|"Tom DeMarco"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
comment|// Already removed
name|schema
operator|.
name|removeBagValue
argument_list|(
literal|"author"
argument_list|,
literal|"Kent Beck"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|l
init|=
name|schema
operator|.
name|getBagList
argument_list|(
literal|"author"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
literal|"Tom DeMarco"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
comment|// Duplicates allowed!
name|schema
operator|.
name|addBagValue
argument_list|(
literal|"author"
argument_list|,
literal|"Tom DeMarco"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|l
init|=
name|schema
operator|.
name|getBagList
argument_list|(
literal|"author"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
literal|"Tom DeMarco"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
literal|"Tom DeMarco"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
comment|// Removes both
name|schema
operator|.
name|removeBagValue
argument_list|(
literal|"author"
argument_list|,
literal|"Tom DeMarco"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|l
init|=
name|schema
operator|.
name|getBagList
argument_list|(
literal|"author"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Test adding and removing from a sequence list.      *       * @throws IOException Signals an error with the XMP processing.      */
specifier|public
name|void
name|testSeqList
parameter_list|()
throws|throws
name|IOException
block|{
name|XMPMetadata
name|xmp
init|=
operator|new
name|XMPMetadata
argument_list|()
decl_stmt|;
name|XMPSchema
name|schema
init|=
operator|new
name|XMPSchema
argument_list|(
name|xmp
argument_list|,
literal|"test"
argument_list|,
literal|"http://test.com/test"
argument_list|)
decl_stmt|;
name|schema
operator|.
name|addSequenceValue
argument_list|(
literal|"author"
argument_list|,
literal|"Tom DeMarco"
argument_list|)
expr_stmt|;
name|schema
operator|.
name|addSequenceValue
argument_list|(
literal|"author"
argument_list|,
literal|"Kent Beck"
argument_list|)
expr_stmt|;
block|{
name|List
argument_list|<
name|String
argument_list|>
name|l
init|=
name|schema
operator|.
name|getSequenceList
argument_list|(
literal|"author"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Tom DeMarco"
argument_list|,
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Kent Beck"
argument_list|,
name|l
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|schema
operator|.
name|removeSequenceValue
argument_list|(
literal|"author"
argument_list|,
literal|"Tom DeMarco"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|l
init|=
name|schema
operator|.
name|getSequenceList
argument_list|(
literal|"author"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
literal|"Kent Beck"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
comment|// Already removed
name|schema
operator|.
name|removeSequenceValue
argument_list|(
literal|"author"
argument_list|,
literal|"Tom DeMarco"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|l
init|=
name|schema
operator|.
name|getSequenceList
argument_list|(
literal|"author"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
literal|"Kent Beck"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
comment|// Duplicates allowed!
name|schema
operator|.
name|addSequenceValue
argument_list|(
literal|"author"
argument_list|,
literal|"Kent Beck"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|l
init|=
name|schema
operator|.
name|getSequenceList
argument_list|(
literal|"author"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
literal|"Kent Beck"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
literal|"Kent Beck"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
comment|// Remvoes all
name|schema
operator|.
name|removeSequenceValue
argument_list|(
literal|"author"
argument_list|,
literal|"Kent Beck"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|l
init|=
name|schema
operator|.
name|getSequenceList
argument_list|(
literal|"author"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Compares two dates.      *       * @param expected The expected date.      * @param actual The actual date.      */
specifier|public
name|void
name|assertEquals
parameter_list|(
name|Calendar
name|expected
parameter_list|,
name|Calendar
name|actual
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
argument_list|,
name|actual
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
argument_list|,
name|actual
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
argument_list|,
name|actual
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|HOUR
argument_list|)
argument_list|,
name|actual
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|HOUR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|)
argument_list|,
name|actual
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|)
argument_list|,
name|actual
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|ZONE_OFFSET
argument_list|)
operator|+
name|expected
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DST_OFFSET
argument_list|)
argument_list|,
name|actual
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|ZONE_OFFSET
argument_list|)
operator|+
name|actual
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DST_OFFSET
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getTimeInMillis
argument_list|()
argument_list|,
name|actual
operator|.
name|getTimeInMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test ISO-8601 date conversion.      *       * @throws IOException If the conversion did not work as expected.      */
specifier|public
name|void
name|testDateConversionNegativeTimeZone
parameter_list|()
throws|throws
name|IOException
block|{
name|Calendar
name|c1
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|c1
operator|.
name|setTimeZone
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"GMT-5"
argument_list|)
argument_list|)
expr_stmt|;
name|c1
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|String
name|convertedDate
init|=
name|DateConverter
operator|.
name|toISO8601
argument_list|(
name|c1
argument_list|)
decl_stmt|;
name|Calendar
name|converted
init|=
name|DateConverter
operator|.
name|toCalendar
argument_list|(
name|convertedDate
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|c1
argument_list|,
name|converted
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test ISO-8601 date conversion.      *       * @throws IOException If the conversion did not work as expected.      */
specifier|public
name|void
name|testDateConversionPositiveTimeZone
parameter_list|()
throws|throws
name|IOException
block|{
name|Calendar
name|c1
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"Australia/Sydney "
argument_list|)
argument_list|)
decl_stmt|;
name|c1
operator|.
name|clear
argument_list|()
expr_stmt|;
name|c1
operator|.
name|set
argument_list|(
literal|2007
argument_list|,
literal|1
argument_list|,
literal|27
argument_list|,
literal|13
argument_list|,
literal|12
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|String
name|convertedDate
init|=
name|DateConverter
operator|.
name|toISO8601
argument_list|(
name|c1
argument_list|)
decl_stmt|;
name|Calendar
name|converted
init|=
name|DateConverter
operator|.
name|toCalendar
argument_list|(
name|convertedDate
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|c1
argument_list|,
name|converted
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests adding and removing from a date list.      *       * @throws IOException Signals an error with the XMP processing.      */
specifier|public
name|void
name|testDateList
parameter_list|()
throws|throws
name|IOException
block|{
name|XMPMetadata
name|xmp
init|=
operator|new
name|XMPMetadata
argument_list|()
decl_stmt|;
name|XMPSchema
name|schema
init|=
operator|new
name|XMPSchema
argument_list|(
name|xmp
argument_list|,
literal|"test"
argument_list|,
literal|"http://test.com/test"
argument_list|)
decl_stmt|;
name|Calendar
name|c1
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|c1
operator|.
name|set
argument_list|(
literal|1999
argument_list|,
literal|11
argument_list|,
literal|31
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|c1
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Calendar
name|c2
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|c2
operator|.
name|set
argument_list|(
literal|2000
argument_list|,
literal|11
argument_list|,
literal|31
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|c2
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// System.out.println( DateConverter.toISO8601(c1));
name|schema
operator|.
name|addSequenceDateValue
argument_list|(
literal|"test:importantDates"
argument_list|,
name|c1
argument_list|)
expr_stmt|;
name|schema
operator|.
name|addSequenceDateValue
argument_list|(
literal|"test:importantDates"
argument_list|,
name|c2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Calendar
argument_list|>
name|l
init|=
name|schema
operator|.
name|getSequenceDateList
argument_list|(
literal|"test:importantDates"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c1
argument_list|,
operator|(
name|Calendar
operator|)
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c2
argument_list|,
operator|(
name|Calendar
operator|)
name|l
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|schema
operator|.
name|removeSequenceDateValue
argument_list|(
literal|"test:importantDates"
argument_list|,
name|c1
argument_list|)
expr_stmt|;
name|l
operator|=
name|schema
operator|.
name|getSequenceDateList
argument_list|(
literal|"test:importantDates"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c2
argument_list|,
operator|(
name|Calendar
operator|)
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Already removed
name|schema
operator|.
name|removeSequenceDateValue
argument_list|(
literal|"test:importantDates"
argument_list|,
name|c1
argument_list|)
expr_stmt|;
name|l
operator|=
name|schema
operator|.
name|getSequenceDateList
argument_list|(
literal|"test:importantDates"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c2
argument_list|,
operator|(
name|Calendar
operator|)
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Duplicates Allowed
name|schema
operator|.
name|addSequenceDateValue
argument_list|(
literal|"test:importantDates"
argument_list|,
name|c2
argument_list|)
expr_stmt|;
name|l
operator|=
name|schema
operator|.
name|getSequenceDateList
argument_list|(
literal|"test:importantDates"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c2
argument_list|,
operator|(
name|Calendar
operator|)
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c2
argument_list|,
operator|(
name|Calendar
operator|)
name|l
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Remvoes all
name|schema
operator|.
name|removeSequenceDateValue
argument_list|(
literal|"test:importantDates"
argument_list|,
name|c2
argument_list|)
expr_stmt|;
name|l
operator|=
name|schema
operator|.
name|getSequenceDateList
argument_list|(
literal|"test:importantDates"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

