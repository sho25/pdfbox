begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jempbox
operator|.
name|xmp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_comment
comment|/**  * Define XMP properties that are common to all schemas.  *   * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.4 $  */
end_comment

begin_class
specifier|public
class|class
name|XMPSchemaBasic
extends|extends
name|XMPSchema
block|{
comment|/**      * The namespace of this schema.      */
specifier|public
specifier|static
specifier|final
name|String
name|NAMESPACE
init|=
literal|"http://ns.adobe.com/xap/1.0/"
decl_stmt|;
comment|/**      * Construct a new blank PDF schema.      *      * @param parent The parent metadata schema that this will be part of.      */
specifier|public
name|XMPSchemaBasic
parameter_list|(
name|XMPMetadata
name|parent
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
literal|"xmp"
argument_list|,
name|NAMESPACE
argument_list|)
expr_stmt|;
name|schema
operator|.
name|setAttributeNS
argument_list|(
name|NS_NAMESPACE
argument_list|,
literal|"xmlns:xapGImg"
argument_list|,
literal|"http://ns.adobe.com/xap/1.0/g/img/"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor from existing XML element.      *       * @param element The existing element.      * @param prefix The schema prefix.      */
specifier|public
name|XMPSchemaBasic
parameter_list|(
name|Element
name|element
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|super
argument_list|(
name|element
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
if|if
condition|(
name|schema
operator|.
name|getAttribute
argument_list|(
literal|"xmlns:xapGImg"
argument_list|)
operator|==
literal|null
condition|)
block|{
name|schema
operator|.
name|setAttributeNS
argument_list|(
name|NS_NAMESPACE
argument_list|,
literal|"xmlns:xapGImg"
argument_list|,
literal|"http://ns.adobe.com/xap/1.0/g/img/"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Remove an Advisory xpath expression.      *      * @param advisory An xpath expression specifying properties that      * were edited outside of the authoring application.      */
specifier|public
name|void
name|removeAdvisory
parameter_list|(
name|String
name|advisory
parameter_list|)
block|{
name|removeBagValue
argument_list|(
name|prefix
operator|+
literal|":Advisory"
argument_list|,
name|advisory
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add an advisory to the list.      *      * @param advisory The new advisory xpath expression.      */
specifier|public
name|void
name|addAdvisory
parameter_list|(
name|String
name|advisory
parameter_list|)
block|{
name|addBagValue
argument_list|(
name|prefix
operator|+
literal|":Advisory"
argument_list|,
name|advisory
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the complete list of advisories.      *      * @return The list of advisories.      */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAdvisories
parameter_list|()
block|{
return|return
name|getBagList
argument_list|(
name|prefix
operator|+
literal|":Advisory"
argument_list|)
return|;
block|}
comment|/**      * The base URL of the resource, for relative URLs in the document.      *      * @param url The base URL.      */
specifier|public
name|void
name|setBaseURL
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|setTextProperty
argument_list|(
name|prefix
operator|+
literal|":BaseURL"
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the base URL of the resource.      *      * @return The base URL.      */
specifier|public
name|String
name|getBaseURL
parameter_list|()
block|{
return|return
name|getTextProperty
argument_list|(
name|prefix
operator|+
literal|":BaseURL"
argument_list|)
return|;
block|}
comment|/**      * Set the creation date of the resource.      *      * @param date The creation date of the resource.      */
specifier|public
name|void
name|setCreateDate
parameter_list|(
name|Calendar
name|date
parameter_list|)
block|{
name|setDateProperty
argument_list|(
name|prefix
operator|+
literal|":CreateDate"
argument_list|,
name|date
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the creation date of the resource.      *      * @return The creation date of the resource.      *       * @throws IOException If there is an error while converting this property to      * a date.      */
specifier|public
name|Calendar
name|getCreateDate
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getDateProperty
argument_list|(
name|prefix
operator|+
literal|":CreateDate"
argument_list|)
return|;
block|}
comment|/**      * The creator tool for the resource.  In the form of "vendor app version", ie      * "Adobe Acrobat Distiller 5.0"      *      * @param creator The tool that was used to create the resource.      */
specifier|public
name|void
name|setCreatorTool
parameter_list|(
name|String
name|creator
parameter_list|)
block|{
name|setTextProperty
argument_list|(
name|prefix
operator|+
literal|":CreatorTool"
argument_list|,
name|creator
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the tool that created this resource, in the form of "vendor app version", ie      * "Adobe Acrobat Distiller 5.0".      *      * @return The creator tool.      */
specifier|public
name|String
name|getCreatorTool
parameter_list|()
block|{
return|return
name|getTextProperty
argument_list|(
name|prefix
operator|+
literal|":CreatorTool"
argument_list|)
return|;
block|}
comment|/**      * Remove an identifier to this resource.      *      * @param id An identifier to this resource.      */
specifier|public
name|void
name|removeIdentifier
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|removeBagValue
argument_list|(
name|prefix
operator|+
literal|":Identifier"
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add a new identifier for this resource.      *      * @param id A new identifier for this resource.      */
specifier|public
name|void
name|addIdentifier
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|addBagValue
argument_list|(
name|prefix
operator|+
literal|":Identifier"
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the complete list of identifiers.      *      * @return The list of identifiers.      */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getIdentifiers
parameter_list|()
block|{
return|return
name|getBagList
argument_list|(
name|prefix
operator|+
literal|":Identifier"
argument_list|)
return|;
block|}
comment|/**      * Set a short phrase that identifies this resource.      *      * @param label A short description of this resource.      */
specifier|public
name|void
name|setLabel
parameter_list|(
name|String
name|label
parameter_list|)
block|{
name|setTextProperty
argument_list|(
name|prefix
operator|+
literal|":Label"
argument_list|,
name|label
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the short phrase that describes this resource.      *      * @return The label for this resource.      */
specifier|public
name|String
name|getLabel
parameter_list|()
block|{
return|return
name|getTextProperty
argument_list|(
name|prefix
operator|+
literal|"p:Label"
argument_list|)
return|;
block|}
comment|/**      * Set a Title for this resource.      *      * @param title A title denoting this resource      */
specifier|public
name|void
name|setTitle
parameter_list|(
name|String
name|title
parameter_list|)
block|{
name|setTextProperty
argument_list|(
name|prefix
operator|+
literal|":Title"
argument_list|,
name|title
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the title for this resource.      *      * @return The titled denoting this resource.      */
specifier|public
name|String
name|getTitle
parameter_list|()
block|{
return|return
name|getTextProperty
argument_list|(
name|prefix
operator|+
literal|":Title"
argument_list|)
return|;
block|}
comment|/**      * Set the date that any metadata was updated.      *      * @param date The metadata change date for this resource.      */
specifier|public
name|void
name|setMetadataDate
parameter_list|(
name|Calendar
name|date
parameter_list|)
block|{
name|setDateProperty
argument_list|(
name|prefix
operator|+
literal|":MetadataDate"
argument_list|,
name|date
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the metadata change date for this resource.      *      * @return The metadata change date of the resource.      *       * @throws IOException If there is an error while converting this property to      * a date.      */
specifier|public
name|Calendar
name|getMetadataDate
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getDateProperty
argument_list|(
name|prefix
operator|+
literal|":MetadataDate"
argument_list|)
return|;
block|}
comment|/**      * Set the date that the resource was last modified.      *      * @param date The modify date for this resource.      */
specifier|public
name|void
name|setModifyDate
parameter_list|(
name|Calendar
name|date
parameter_list|)
block|{
name|setDateProperty
argument_list|(
name|prefix
operator|+
literal|":ModifyDate"
argument_list|,
name|date
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the date the resource was last modified.      *      * @return The modify date of the resource.      *       * @throws IOException If there is an error while converting this property to      * a date.      */
specifier|public
name|Calendar
name|getModifyDate
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getDateProperty
argument_list|(
name|prefix
operator|+
literal|":ModifyDate"
argument_list|)
return|;
block|}
comment|/**      * Set a short informal name for the resource.      *      * @param nickname A short name of this resource.      */
specifier|public
name|void
name|setNickname
parameter_list|(
name|String
name|nickname
parameter_list|)
block|{
name|setTextProperty
argument_list|(
name|prefix
operator|+
literal|":Nickname"
argument_list|,
name|nickname
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the short informal name for this resource.      *      * @return The short name for this resource.      */
specifier|public
name|String
name|getNickname
parameter_list|()
block|{
return|return
name|getTextProperty
argument_list|(
name|prefix
operator|+
literal|":Nickname"
argument_list|)
return|;
block|}
comment|/**      * Get a number that indicates the documents status.      *       * @return The rating of the document.      */
specifier|public
name|Integer
name|getRating
parameter_list|()
block|{
return|return
name|getIntegerProperty
argument_list|(
name|prefix
operator|+
literal|":Rating"
argument_list|)
return|;
block|}
comment|/**      * Set the document status.      *       * @param rating A number indicating status relative to other documents.      */
specifier|public
name|void
name|setRating
parameter_list|(
name|Integer
name|rating
parameter_list|)
block|{
name|setIntegerProperty
argument_list|(
name|prefix
operator|+
literal|":Rating"
argument_list|,
name|rating
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the default value for the thumbnail.      *      * @param thumbnail The thumbnail of this resource.      */
specifier|public
name|void
name|setThumbnail
parameter_list|(
name|Thumbnail
name|thumbnail
parameter_list|)
block|{
name|setThumbnailProperty
argument_list|(
name|prefix
operator|+
literal|":Thumbnails"
argument_list|,
literal|null
argument_list|,
name|thumbnail
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the default value for the thumbnail.      *      * @return The thumbnail of this resource.      */
specifier|public
name|Thumbnail
name|getThumbnail
parameter_list|()
block|{
return|return
name|getThumbnailProperty
argument_list|(
name|prefix
operator|+
literal|":Thumbnails"
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Set the thumbnail of this resource in a specific language.      *      * @param language The language code.      * @param thumbnail The thumbnail in a specific language.      */
specifier|public
name|void
name|setThumbnail
parameter_list|(
name|String
name|language
parameter_list|,
name|Thumbnail
name|thumbnail
parameter_list|)
block|{
name|setThumbnailProperty
argument_list|(
name|prefix
operator|+
literal|":Thumbnails"
argument_list|,
name|language
argument_list|,
name|thumbnail
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the thumbnail in a specific language.      *      * @param language The language code to get the description for.      *      * @return The thumbnail in the specified language or null if it does not exist.      */
specifier|public
name|Thumbnail
name|getThumbnail
parameter_list|(
name|String
name|language
parameter_list|)
block|{
return|return
name|getThumbnailProperty
argument_list|(
name|prefix
operator|+
literal|":Thumbnails"
argument_list|,
name|language
argument_list|)
return|;
block|}
comment|/**      * Get a list of all languages that a thumbnail exists for.      *      * @return A non-null list of languages, potentially an empty list.      */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getThumbnailLanguages
parameter_list|()
block|{
return|return
name|getLanguagePropertyLanguages
argument_list|(
name|prefix
operator|+
literal|":Thumbnails"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

