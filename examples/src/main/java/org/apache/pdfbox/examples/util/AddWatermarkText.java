begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|examples
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdfparser
operator|.
name|PDFParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPageContentStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDType1Font
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|blend
operator|.
name|BlendMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|state
operator|.
name|PDExtendedGraphicsState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|Matrix
import|;
end_import

begin_comment
comment|/**  * Add a diagonal watermark text to each page of a PDF.  *  * @author Tilman Hausherr  */
end_comment

begin_class
specifier|public
class|class
name|AddWatermarkText
block|{
specifier|private
name|AddWatermarkText
parameter_list|()
block|{     }
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|3
condition|)
block|{
name|usage
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|File
name|srcFile
init|=
operator|new
name|File
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|File
name|dstFile
init|=
operator|new
name|File
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|String
name|text
init|=
name|args
index|[
literal|2
index|]
decl_stmt|;
try|try
init|(
name|PDDocument
name|doc
init|=
name|PDFParser
operator|.
name|load
argument_list|(
name|srcFile
argument_list|)
init|)
block|{
for|for
control|(
name|PDPage
name|page
range|:
name|doc
operator|.
name|getPages
argument_list|()
control|)
block|{
name|PDFont
name|font
init|=
name|PDType1Font
operator|.
name|HELVETICA
decl_stmt|;
name|addWatermarkText
argument_list|(
name|doc
argument_list|,
name|page
argument_list|,
name|font
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
name|doc
operator|.
name|save
argument_list|(
name|dstFile
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|addWatermarkText
parameter_list|(
name|PDDocument
name|doc
parameter_list|,
name|PDPage
name|page
parameter_list|,
name|PDFont
name|font
parameter_list|,
name|String
name|text
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|PDPageContentStream
name|cs
init|=
operator|new
name|PDPageContentStream
argument_list|(
name|doc
argument_list|,
name|page
argument_list|,
name|PDPageContentStream
operator|.
name|AppendMode
operator|.
name|APPEND
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
init|)
block|{
name|float
name|fontHeight
init|=
literal|100
decl_stmt|;
comment|// arbitrary for short text
name|float
name|width
init|=
name|page
operator|.
name|getMediaBox
argument_list|()
operator|.
name|getWidth
argument_list|()
decl_stmt|;
name|float
name|height
init|=
name|page
operator|.
name|getMediaBox
argument_list|()
operator|.
name|getHeight
argument_list|()
decl_stmt|;
name|float
name|stringWidth
init|=
name|font
operator|.
name|getStringWidth
argument_list|(
name|text
argument_list|)
operator|/
literal|1000
operator|*
name|fontHeight
decl_stmt|;
name|float
name|diagonalLength
init|=
operator|(
name|float
operator|)
name|Math
operator|.
name|sqrt
argument_list|(
name|width
operator|*
name|width
operator|+
name|height
operator|*
name|height
argument_list|)
decl_stmt|;
name|float
name|angle
init|=
operator|(
name|float
operator|)
name|Math
operator|.
name|atan2
argument_list|(
name|height
argument_list|,
name|width
argument_list|)
decl_stmt|;
name|float
name|x
init|=
operator|(
name|diagonalLength
operator|-
name|stringWidth
operator|)
operator|/
literal|2
decl_stmt|;
comment|// "horizontal" position in rotated world
name|float
name|y
init|=
operator|-
name|fontHeight
operator|/
literal|4
decl_stmt|;
comment|// 4 is a trial-and-error thing, this lowers the text a bit
name|cs
operator|.
name|transform
argument_list|(
name|Matrix
operator|.
name|getRotateInstance
argument_list|(
name|angle
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setFont
argument_list|(
name|font
argument_list|,
name|fontHeight
argument_list|)
expr_stmt|;
comment|// cs.setRenderingMode(RenderingMode.STROKE) // for "hollow" effect
name|PDExtendedGraphicsState
name|gs
init|=
operator|new
name|PDExtendedGraphicsState
argument_list|()
decl_stmt|;
name|gs
operator|.
name|setNonStrokingAlphaConstant
argument_list|(
literal|0.2f
argument_list|)
expr_stmt|;
name|gs
operator|.
name|setStrokingAlphaConstant
argument_list|(
literal|0.2f
argument_list|)
expr_stmt|;
name|gs
operator|.
name|setBlendMode
argument_list|(
name|BlendMode
operator|.
name|MULTIPLY
argument_list|)
expr_stmt|;
name|gs
operator|.
name|setLineWidth
argument_list|(
literal|3f
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setGraphicsStateParameters
argument_list|(
name|gs
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setNonStrokingColor
argument_list|(
name|Color
operator|.
name|red
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setStrokingColor
argument_list|(
name|Color
operator|.
name|red
argument_list|)
expr_stmt|;
name|cs
operator|.
name|beginText
argument_list|()
expr_stmt|;
name|cs
operator|.
name|newLineAtOffset
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|cs
operator|.
name|showText
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|cs
operator|.
name|endText
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * This will print the usage.      */
specifier|private
specifier|static
name|void
name|usage
parameter_list|()
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java "
operator|+
name|AddWatermarkText
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"<input-pdf><output-pdf><short text>"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

