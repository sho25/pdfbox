begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|examples
operator|.
name|rendering
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|BasicStroke
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Graphics2D
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Paint
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Shape
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Stroke
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|AffineTransform
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|Rectangle2D
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|BufferedImage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|ImageIO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|contentstream
operator|.
name|PDFGraphicsStreamEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDColor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|rendering
operator|.
name|PDFRenderer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|rendering
operator|.
name|PageDrawer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|rendering
operator|.
name|PageDrawerParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|Matrix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_comment
comment|/**  * Example showing custom rendering by subclassing PageDrawer.  *   *<p>If you want to do custom graphics processing rather than Graphics2D rendering, then you should  * subclass {@link PDFGraphicsStreamEngine} instead. Subclassing PageDrawer is only suitable for  * cases where the goal is to render onto a Graphics2D surface.  *  * @author John Hewson  */
end_comment

begin_class
specifier|public
class|class
name|CustomPageDrawer
block|{
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
literal|"src/main/resources/org/apache/pdfbox/examples/rendering/"
argument_list|,
literal|"custom-render-demo.pdf"
argument_list|)
decl_stmt|;
name|PDDocument
name|doc
init|=
name|PDDocument
operator|.
name|load
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|PDFRenderer
name|renderer
init|=
operator|new
name|MyPDFRenderer
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|BufferedImage
name|image
init|=
name|renderer
operator|.
name|renderImage
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ImageIO
operator|.
name|write
argument_list|(
name|image
argument_list|,
literal|"PNG"
argument_list|,
operator|new
name|File
argument_list|(
literal|"custom-render.png"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * Example PDFRenderer subclass, uses MyPageDrawer for custom rendering.      */
specifier|private
specifier|static
class|class
name|MyPDFRenderer
extends|extends
name|PDFRenderer
block|{
name|MyPDFRenderer
parameter_list|(
name|PDDocument
name|document
parameter_list|)
block|{
name|super
argument_list|(
name|document
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|PageDrawer
name|createPageDrawer
parameter_list|(
name|PageDrawerParameters
name|parameters
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|MyPageDrawer
argument_list|(
name|parameters
argument_list|)
return|;
block|}
block|}
comment|/**      * Example PageDrawer subclass with custom rendering.      */
specifier|private
specifier|static
class|class
name|MyPageDrawer
extends|extends
name|PageDrawer
block|{
name|MyPageDrawer
parameter_list|(
name|PageDrawerParameters
name|parameters
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
block|}
comment|/**          * Color replacement.          */
annotation|@
name|Override
specifier|protected
name|Paint
name|getPaint
parameter_list|(
name|PDColor
name|color
parameter_list|)
throws|throws
name|IOException
block|{
comment|// if this is the non-stroking color
if|if
condition|(
name|getGraphicsState
argument_list|()
operator|.
name|getNonStrokingColor
argument_list|()
operator|==
name|color
condition|)
block|{
comment|// find red, ignoring alpha channel
if|if
condition|(
name|color
operator|.
name|toRGB
argument_list|()
operator|==
operator|(
name|Color
operator|.
name|RED
operator|.
name|getRGB
argument_list|()
operator|&
literal|0x00FFFFFF
operator|)
condition|)
block|{
comment|// replace it with blue
return|return
name|Color
operator|.
name|BLUE
return|;
block|}
block|}
return|return
name|super
operator|.
name|getPaint
argument_list|(
name|color
argument_list|)
return|;
block|}
comment|/**          * Glyph bounding boxes.          */
annotation|@
name|Override
specifier|protected
name|void
name|showGlyph
parameter_list|(
name|Matrix
name|textRenderingMatrix
parameter_list|,
name|PDFont
name|font
parameter_list|,
name|int
name|code
parameter_list|,
name|String
name|unicode
parameter_list|,
name|Vector
name|displacement
parameter_list|)
throws|throws
name|IOException
block|{
comment|// draw glyph
name|super
operator|.
name|showGlyph
argument_list|(
name|textRenderingMatrix
argument_list|,
name|font
argument_list|,
name|code
argument_list|,
name|unicode
argument_list|,
name|displacement
argument_list|)
expr_stmt|;
comment|// bbox in EM -> user units
name|Shape
name|bbox
init|=
operator|new
name|Rectangle2D
operator|.
name|Float
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|font
operator|.
name|getWidth
argument_list|(
name|code
argument_list|)
operator|/
literal|1000
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|AffineTransform
name|at
init|=
name|textRenderingMatrix
operator|.
name|createAffineTransform
argument_list|()
decl_stmt|;
name|bbox
operator|=
name|at
operator|.
name|createTransformedShape
argument_list|(
name|bbox
argument_list|)
expr_stmt|;
comment|// save
name|Graphics2D
name|graphics
init|=
name|getGraphics
argument_list|()
decl_stmt|;
name|Color
name|color
init|=
name|graphics
operator|.
name|getColor
argument_list|()
decl_stmt|;
name|Stroke
name|stroke
init|=
name|graphics
operator|.
name|getStroke
argument_list|()
decl_stmt|;
name|Shape
name|clip
init|=
name|graphics
operator|.
name|getClip
argument_list|()
decl_stmt|;
comment|// draw
name|graphics
operator|.
name|setClip
argument_list|(
name|graphics
operator|.
name|getDeviceConfiguration
argument_list|()
operator|.
name|getBounds
argument_list|()
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|setColor
argument_list|(
name|Color
operator|.
name|RED
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|setStroke
argument_list|(
operator|new
name|BasicStroke
argument_list|(
literal|.5f
argument_list|)
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|draw
argument_list|(
name|bbox
argument_list|)
expr_stmt|;
comment|// restore
name|graphics
operator|.
name|setStroke
argument_list|(
name|stroke
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|setColor
argument_list|(
name|color
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|setClip
argument_list|(
name|clip
argument_list|)
expr_stmt|;
block|}
comment|/**          * Filled path bounding boxes.          */
annotation|@
name|Override
specifier|public
name|void
name|fillPath
parameter_list|(
name|int
name|windingRule
parameter_list|)
throws|throws
name|IOException
block|{
comment|// bbox in user units
name|Shape
name|bbox
init|=
name|getLinePath
argument_list|()
operator|.
name|getBounds2D
argument_list|()
decl_stmt|;
comment|// draw path (note that getLinePath() is now reset)
name|super
operator|.
name|fillPath
argument_list|(
name|windingRule
argument_list|)
expr_stmt|;
comment|// save
name|Graphics2D
name|graphics
init|=
name|getGraphics
argument_list|()
decl_stmt|;
name|Color
name|color
init|=
name|graphics
operator|.
name|getColor
argument_list|()
decl_stmt|;
name|Stroke
name|stroke
init|=
name|graphics
operator|.
name|getStroke
argument_list|()
decl_stmt|;
name|Shape
name|clip
init|=
name|graphics
operator|.
name|getClip
argument_list|()
decl_stmt|;
comment|// draw
name|graphics
operator|.
name|setClip
argument_list|(
name|graphics
operator|.
name|getDeviceConfiguration
argument_list|()
operator|.
name|getBounds
argument_list|()
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|setColor
argument_list|(
name|Color
operator|.
name|GREEN
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|setStroke
argument_list|(
operator|new
name|BasicStroke
argument_list|(
literal|.5f
argument_list|)
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|draw
argument_list|(
name|bbox
argument_list|)
expr_stmt|;
comment|// restore
name|graphics
operator|.
name|setStroke
argument_list|(
name|stroke
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|setColor
argument_list|(
name|color
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|setClip
argument_list|(
name|clip
argument_list|)
expr_stmt|;
block|}
comment|/**          * Custom annotation rendering.          */
annotation|@
name|Override
specifier|public
name|void
name|showAnnotation
parameter_list|(
name|PDAnnotation
name|annotation
parameter_list|)
throws|throws
name|IOException
block|{
comment|// save
name|saveGraphicsState
argument_list|()
expr_stmt|;
comment|// 35% alpha
name|getGraphicsState
argument_list|()
operator|.
name|setNonStrokeAlphaConstants
argument_list|(
literal|0.35
argument_list|)
expr_stmt|;
name|super
operator|.
name|showAnnotation
argument_list|(
name|annotation
argument_list|)
expr_stmt|;
comment|// restore
name|restoreGraphicsState
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

