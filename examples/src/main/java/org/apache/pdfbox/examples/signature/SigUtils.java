begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2017 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|examples
operator|.
name|signature
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateParsingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|digitalsignature
operator|.
name|PDSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|x509
operator|.
name|KeyPurposeId
import|;
end_import

begin_comment
comment|/**  * Utility class for the signature / timestamp examples.  *   * @author Tilman Hausherr  */
end_comment

begin_class
specifier|public
class|class
name|SigUtils
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SigUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|SigUtils
parameter_list|()
block|{     }
comment|/**      * Get the access permissions granted for this document in the DocMDP transform parameters      * dictionary. Details are described in the table "Entries in the DocMDP transform parameters      * dictionary" in the PDF specification.      *      * @param doc document.      * @return the permission value. 0 means no DocMDP transform parameters dictionary exists. Other      * return values are 1, 2 or 3. 2 is also returned if the DocMDP transform parameters dictionary      * is found but did not contain a /P entry, or if the value is outside the valid range.      */
specifier|public
specifier|static
name|int
name|getMDPPermission
parameter_list|(
name|PDDocument
name|doc
parameter_list|)
block|{
name|COSBase
name|base
init|=
name|doc
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|getCOSObject
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|PERMS
argument_list|)
decl_stmt|;
if|if
condition|(
name|base
operator|instanceof
name|COSDictionary
condition|)
block|{
name|COSDictionary
name|permsDict
init|=
operator|(
name|COSDictionary
operator|)
name|base
decl_stmt|;
name|base
operator|=
name|permsDict
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|DOCMDP
argument_list|)
expr_stmt|;
if|if
condition|(
name|base
operator|instanceof
name|COSDictionary
condition|)
block|{
name|COSDictionary
name|signatureDict
init|=
operator|(
name|COSDictionary
operator|)
name|base
decl_stmt|;
name|base
operator|=
name|signatureDict
operator|.
name|getDictionaryObject
argument_list|(
literal|"Reference"
argument_list|)
expr_stmt|;
if|if
condition|(
name|base
operator|instanceof
name|COSArray
condition|)
block|{
name|COSArray
name|refArray
init|=
operator|(
name|COSArray
operator|)
name|base
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|refArray
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|base
operator|=
name|refArray
operator|.
name|getObject
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|base
operator|instanceof
name|COSDictionary
condition|)
block|{
name|COSDictionary
name|sigRefDict
init|=
operator|(
name|COSDictionary
operator|)
name|base
decl_stmt|;
if|if
condition|(
name|COSName
operator|.
name|DOCMDP
operator|.
name|equals
argument_list|(
name|sigRefDict
operator|.
name|getDictionaryObject
argument_list|(
literal|"TransformMethod"
argument_list|)
argument_list|)
condition|)
block|{
name|base
operator|=
name|sigRefDict
operator|.
name|getDictionaryObject
argument_list|(
literal|"TransformParams"
argument_list|)
expr_stmt|;
if|if
condition|(
name|base
operator|instanceof
name|COSDictionary
condition|)
block|{
name|COSDictionary
name|transformDict
init|=
operator|(
name|COSDictionary
operator|)
name|base
decl_stmt|;
name|int
name|accessPermissions
init|=
name|transformDict
operator|.
name|getInt
argument_list|(
name|COSName
operator|.
name|P
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|accessPermissions
argument_list|<
literal|1
operator|||
name|accessPermissions
argument_list|>
literal|3
condition|)
block|{
name|accessPermissions
operator|=
literal|2
expr_stmt|;
block|}
return|return
name|accessPermissions
return|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
return|return
literal|0
return|;
block|}
comment|/**      * Set the access permissions granted for this document in the DocMDP transform parameters      * dictionary. Details are described in the table "Entries in the DocMDP transform parameters      * dictionary" in the PDF specification.      *      * @param doc The document.      * @param signature The signature object.      * @param accessPermissions The permission value (1, 2 or 3).      */
specifier|static
specifier|public
name|void
name|setMDPPermission
parameter_list|(
name|PDDocument
name|doc
parameter_list|,
name|PDSignature
name|signature
parameter_list|,
name|int
name|accessPermissions
parameter_list|)
block|{
name|COSDictionary
name|sigDict
init|=
name|signature
operator|.
name|getCOSObject
argument_list|()
decl_stmt|;
comment|// DocMDP specific stuff
name|COSDictionary
name|transformParameters
init|=
operator|new
name|COSDictionary
argument_list|()
decl_stmt|;
name|transformParameters
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|TYPE
argument_list|,
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"TransformParams"
argument_list|)
argument_list|)
expr_stmt|;
name|transformParameters
operator|.
name|setInt
argument_list|(
name|COSName
operator|.
name|P
argument_list|,
name|accessPermissions
argument_list|)
expr_stmt|;
name|transformParameters
operator|.
name|setName
argument_list|(
name|COSName
operator|.
name|V
argument_list|,
literal|"1.2"
argument_list|)
expr_stmt|;
name|transformParameters
operator|.
name|setNeedToBeUpdated
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|COSDictionary
name|referenceDict
init|=
operator|new
name|COSDictionary
argument_list|()
decl_stmt|;
name|referenceDict
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|TYPE
argument_list|,
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"SigRef"
argument_list|)
argument_list|)
expr_stmt|;
name|referenceDict
operator|.
name|setItem
argument_list|(
literal|"TransformMethod"
argument_list|,
name|COSName
operator|.
name|DOCMDP
argument_list|)
expr_stmt|;
name|referenceDict
operator|.
name|setItem
argument_list|(
literal|"DigestMethod"
argument_list|,
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"SHA1"
argument_list|)
argument_list|)
expr_stmt|;
name|referenceDict
operator|.
name|setItem
argument_list|(
literal|"TransformParams"
argument_list|,
name|transformParameters
argument_list|)
expr_stmt|;
name|referenceDict
operator|.
name|setNeedToBeUpdated
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|COSArray
name|referenceArray
init|=
operator|new
name|COSArray
argument_list|()
decl_stmt|;
name|referenceArray
operator|.
name|add
argument_list|(
name|referenceDict
argument_list|)
expr_stmt|;
name|sigDict
operator|.
name|setItem
argument_list|(
literal|"Reference"
argument_list|,
name|referenceArray
argument_list|)
expr_stmt|;
name|referenceArray
operator|.
name|setNeedToBeUpdated
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Catalog
name|COSDictionary
name|catalogDict
init|=
name|doc
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|getCOSObject
argument_list|()
decl_stmt|;
name|COSDictionary
name|permsDict
init|=
operator|new
name|COSDictionary
argument_list|()
decl_stmt|;
name|catalogDict
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|PERMS
argument_list|,
name|permsDict
argument_list|)
expr_stmt|;
name|permsDict
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|DOCMDP
argument_list|,
name|signature
argument_list|)
expr_stmt|;
name|catalogDict
operator|.
name|setNeedToBeUpdated
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|permsDict
operator|.
name|setNeedToBeUpdated
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Log if the certificate is not valid for signature usage. Doing this      * anyway results in Adobe Reader failing to validate the PDF.      *      * @param x509Certificate       * @throws java.security.cert.CertificateParsingException       */
specifier|public
specifier|static
name|void
name|checkCertificateUsage
parameter_list|(
name|X509Certificate
name|x509Certificate
parameter_list|)
throws|throws
name|CertificateParsingException
block|{
comment|// Check whether signer certificate is "valid for usage"
comment|// https://stackoverflow.com/a/52765021/535646
comment|// https://www.adobe.com/devnet-docs/acrobatetk/tools/DigSig/changes.html#id1
name|boolean
index|[]
name|keyUsage
init|=
name|x509Certificate
operator|.
name|getKeyUsage
argument_list|()
decl_stmt|;
if|if
condition|(
name|keyUsage
operator|!=
literal|null
operator|&&
operator|!
name|keyUsage
index|[
literal|0
index|]
operator|&&
operator|!
name|keyUsage
index|[
literal|1
index|]
condition|)
block|{
comment|// (unclear what "signTransaction" is)
comment|// https://tools.ietf.org/html/rfc5280#section-4.2.1.3
name|LOG
operator|.
name|error
argument_list|(
literal|"Certificate key usage does not include "
operator|+
literal|"digitalSignature nor nonRepudiation"
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|extendedKeyUsage
init|=
name|x509Certificate
operator|.
name|getExtendedKeyUsage
argument_list|()
decl_stmt|;
if|if
condition|(
name|extendedKeyUsage
operator|!=
literal|null
operator|&&
operator|!
name|extendedKeyUsage
operator|.
name|contains
argument_list|(
name|KeyPurposeId
operator|.
name|id_kp_emailProtection
operator|.
name|toString
argument_list|()
argument_list|)
operator|&&
operator|!
name|extendedKeyUsage
operator|.
name|contains
argument_list|(
name|KeyPurposeId
operator|.
name|id_kp_codeSigning
operator|.
name|toString
argument_list|()
argument_list|)
operator|&&
operator|!
name|extendedKeyUsage
operator|.
name|contains
argument_list|(
name|KeyPurposeId
operator|.
name|anyExtendedKeyUsage
operator|.
name|toString
argument_list|()
argument_list|)
operator|&&
operator|!
name|extendedKeyUsage
operator|.
name|contains
argument_list|(
literal|"1.2.840.113583.1.1.5"
argument_list|)
operator|&&
comment|// not mentioned in Adobe document, but tolerated in practice
operator|!
name|extendedKeyUsage
operator|.
name|contains
argument_list|(
literal|"1.3.6.1.4.1.311.10.3.12"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Certificate extended key usage does not include "
operator|+
literal|"emailProtection, nor codeSigning, nor anyExtendedKeyUsage, "
operator|+
literal|"nor 'Adobe Authentic Documents Trust'"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Log if the certificate is not valid for timestamping.      *      * @param x509Certificate       * @throws java.security.cert.CertificateParsingException       */
specifier|public
specifier|static
name|void
name|checkTimeStampCertificateUsage
parameter_list|(
name|X509Certificate
name|x509Certificate
parameter_list|)
throws|throws
name|CertificateParsingException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|extendedKeyUsage
init|=
name|x509Certificate
operator|.
name|getExtendedKeyUsage
argument_list|()
decl_stmt|;
comment|// https://tools.ietf.org/html/rfc5280#section-4.2.1.12
if|if
condition|(
name|extendedKeyUsage
operator|!=
literal|null
operator|&&
operator|!
name|extendedKeyUsage
operator|.
name|contains
argument_list|(
name|KeyPurposeId
operator|.
name|id_kp_timeStamping
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Certificate extended key usage does not include timeStamping"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Log if the certificate is not valid for responding.      *      * @param x509Certificate       * @throws java.security.cert.CertificateParsingException       */
specifier|public
specifier|static
name|void
name|checkResponderCertificateUsage
parameter_list|(
name|X509Certificate
name|x509Certificate
parameter_list|)
throws|throws
name|CertificateParsingException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|extendedKeyUsage
init|=
name|x509Certificate
operator|.
name|getExtendedKeyUsage
argument_list|()
decl_stmt|;
comment|// https://tools.ietf.org/html/rfc5280#section-4.2.1.12
if|if
condition|(
name|extendedKeyUsage
operator|!=
literal|null
operator|&&
operator|!
name|extendedKeyUsage
operator|.
name|contains
argument_list|(
name|KeyPurposeId
operator|.
name|id_kp_OCSPSigning
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Certificate extended key usage does not include OCSP responding"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Gets the last relevant signature in the document, i.e. the one with the highest offset.      *       * @param document to get its last signature      * @return last signature or null when none found      */
specifier|public
specifier|static
name|PDSignature
name|getLastRelevantSignature
parameter_list|(
name|PDDocument
name|document
parameter_list|)
block|{
name|SortedMap
argument_list|<
name|Integer
argument_list|,
name|PDSignature
argument_list|>
name|sortedMap
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|PDSignature
name|signature
range|:
name|document
operator|.
name|getSignatureDictionaries
argument_list|()
control|)
block|{
name|int
name|sigOffset
init|=
name|signature
operator|.
name|getByteRange
argument_list|()
index|[
literal|1
index|]
decl_stmt|;
name|sortedMap
operator|.
name|put
argument_list|(
name|sigOffset
argument_list|,
name|signature
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sortedMap
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|PDSignature
name|lastSignature
init|=
name|sortedMap
operator|.
name|get
argument_list|(
name|sortedMap
operator|.
name|lastKey
argument_list|()
argument_list|)
decl_stmt|;
name|COSBase
name|type
init|=
name|lastSignature
operator|.
name|getCOSObject
argument_list|()
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|COSName
operator|.
name|SIG
argument_list|)
operator|||
name|type
operator|.
name|equals
argument_list|(
name|COSName
operator|.
name|DOC_TIME_STAMP
argument_list|)
condition|)
block|{
return|return
name|lastSignature
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

