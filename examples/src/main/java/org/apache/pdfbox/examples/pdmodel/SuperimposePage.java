begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|examples
operator|.
name|pdmodel
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDRectangle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|edit
operator|.
name|PDPageContentStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDType1Font
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|form
operator|.
name|PDFormXObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|LayerUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|Matrix
import|;
end_import

begin_comment
comment|/**  * Example to show superimposing a PDF page onto another PDF.  */
end_comment

begin_class
specifier|public
class|class
name|SuperimposePage
block|{
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"usage: "
operator|+
name|SuperimposePage
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"<source-pdf><dest-pdf>"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|sourcePath
init|=
name|args
index|[
literal|0
index|]
decl_stmt|;
name|String
name|destPath
init|=
name|args
index|[
literal|1
index|]
decl_stmt|;
name|PDDocument
name|sourceDoc
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// load the source PDF
name|sourceDoc
operator|=
name|PDDocument
operator|.
name|load
argument_list|(
operator|new
name|File
argument_list|(
name|sourcePath
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|sourcePage
init|=
literal|1
decl_stmt|;
comment|// create a new PDF and add a blank page
name|PDDocument
name|doc
init|=
operator|new
name|PDDocument
argument_list|()
decl_stmt|;
name|PDPage
name|page
init|=
operator|new
name|PDPage
argument_list|()
decl_stmt|;
name|doc
operator|.
name|addPage
argument_list|(
name|page
argument_list|)
expr_stmt|;
comment|// write some sample text to the new page
name|PDPageContentStream
name|contents
init|=
operator|new
name|PDPageContentStream
argument_list|(
name|doc
argument_list|,
name|page
argument_list|)
decl_stmt|;
name|contents
operator|.
name|beginText
argument_list|()
expr_stmt|;
name|contents
operator|.
name|setFont
argument_list|(
name|PDType1Font
operator|.
name|HELVETICA_BOLD
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|contents
operator|.
name|newLineAtOffset
argument_list|(
literal|2
argument_list|,
name|PDRectangle
operator|.
name|LETTER
operator|.
name|getHeight
argument_list|()
operator|-
literal|12
argument_list|)
expr_stmt|;
name|contents
operator|.
name|showText
argument_list|(
literal|"Sample text"
argument_list|)
expr_stmt|;
name|contents
operator|.
name|endText
argument_list|()
expr_stmt|;
comment|// Create a Form XObject from the source document using LayerUtility
name|LayerUtility
name|layerUtility
init|=
operator|new
name|LayerUtility
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|PDFormXObject
name|form
init|=
name|layerUtility
operator|.
name|importPageAsForm
argument_list|(
name|sourceDoc
argument_list|,
name|sourcePage
operator|-
literal|1
argument_list|)
decl_stmt|;
name|form
operator|.
name|getPDStream
argument_list|()
operator|.
name|addCompression
argument_list|()
expr_stmt|;
comment|// use gzip for data
comment|// draw the full form
name|contents
operator|.
name|drawForm
argument_list|(
name|form
argument_list|)
expr_stmt|;
comment|// draw a scaled form
name|contents
operator|.
name|saveGraphicsState
argument_list|()
expr_stmt|;
name|Matrix
name|matrix
init|=
name|Matrix
operator|.
name|getScaleInstance
argument_list|(
literal|0.5f
argument_list|,
literal|0.5f
argument_list|)
decl_stmt|;
name|contents
operator|.
name|transform
argument_list|(
name|matrix
argument_list|)
expr_stmt|;
name|contents
operator|.
name|drawForm
argument_list|(
name|form
argument_list|)
expr_stmt|;
name|contents
operator|.
name|restoreGraphicsState
argument_list|()
expr_stmt|;
comment|// draw a scaled and rotated form
name|contents
operator|.
name|saveGraphicsState
argument_list|()
expr_stmt|;
name|matrix
operator|.
name|rotate
argument_list|(
literal|1.8
operator|*
name|Math
operator|.
name|PI
argument_list|)
expr_stmt|;
comment|// radians
name|contents
operator|.
name|transform
argument_list|(
name|matrix
argument_list|)
expr_stmt|;
name|contents
operator|.
name|drawForm
argument_list|(
name|form
argument_list|)
expr_stmt|;
name|contents
operator|.
name|restoreGraphicsState
argument_list|()
expr_stmt|;
name|contents
operator|.
name|close
argument_list|()
expr_stmt|;
name|doc
operator|.
name|save
argument_list|(
name|destPath
argument_list|)
expr_stmt|;
name|doc
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|sourceDoc
operator|!=
literal|null
condition|)
block|{
name|sourceDoc
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

