begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|examples
operator|.
name|signature
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|AffineTransform
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|Rectangle2D
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStoreException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|UnrecoverableKeyException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPageContentStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDRectangle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDType1Font
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|form
operator|.
name|PDFormXObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|image
operator|.
name|PDImageXObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAnnotationWidget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAppearanceDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAppearanceStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|digitalsignature
operator|.
name|ExternalSigningSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|digitalsignature
operator|.
name|PDSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|digitalsignature
operator|.
name|SignatureInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|digitalsignature
operator|.
name|SignatureOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|form
operator|.
name|PDAcroForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|form
operator|.
name|PDField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|form
operator|.
name|PDSignatureField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|Hex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|Matrix
import|;
end_import

begin_comment
comment|/**  * This is a second example for visual signing a pdf. It doesn't use the "design pattern" influenced  * PDVisibleSignDesigner, and doesn't create its complex multilevel forms described in the Adobe  * document  *<a href="https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/PPKAppearances.pdf">Digital  * Signature Appearances</a>, because this isn't required by the PDF specification. See the  * discussion in December 2017 in PDFBOX-3198.  *  * @author Vakhtang Koroghlishvili  * @author Tilman Hausherr  */
end_comment

begin_class
specifier|public
class|class
name|CreateVisibleSignature2
extends|extends
name|CreateSignatureBase
block|{
specifier|private
name|SignatureOptions
name|signatureOptions
decl_stmt|;
specifier|private
name|boolean
name|lateExternalSigning
init|=
literal|false
decl_stmt|;
specifier|private
name|File
name|imageFile
decl_stmt|;
comment|/**      * Initialize the signature creator with a keystore (pkcs12) and pin that      * should be used for the signature.      *      * @param keystore is a pkcs12 keystore.      * @param pin is the pin for the keystore / private key      * @throws KeyStoreException if the keystore has not been initialized (loaded)      * @throws NoSuchAlgorithmException if the algorithm for recovering the key cannot be found      * @throws UnrecoverableKeyException if the given password is wrong      * @throws CertificateException if the certificate is not valid as signing time      * @throws IOException if no certificate could be found      */
specifier|public
name|CreateVisibleSignature2
parameter_list|(
name|KeyStore
name|keystore
parameter_list|,
name|char
index|[]
name|pin
parameter_list|)
throws|throws
name|KeyStoreException
throws|,
name|UnrecoverableKeyException
throws|,
name|NoSuchAlgorithmException
throws|,
name|IOException
throws|,
name|CertificateException
block|{
name|super
argument_list|(
name|keystore
argument_list|,
name|pin
argument_list|)
expr_stmt|;
block|}
specifier|public
name|File
name|getImageFile
parameter_list|()
block|{
return|return
name|imageFile
return|;
block|}
specifier|public
name|void
name|setImageFile
parameter_list|(
name|File
name|imageFile
parameter_list|)
block|{
name|this
operator|.
name|imageFile
operator|=
name|imageFile
expr_stmt|;
block|}
specifier|public
name|boolean
name|isLateExternalSigning
parameter_list|()
block|{
return|return
name|lateExternalSigning
return|;
block|}
comment|/**      * Set late external signing. Enable this if you want to activate the demo code where the      * signature is kept and added in an extra step without using PDFBox methods. This is disabled      * by default.      *      * @param lateExternalSigning      */
specifier|public
name|void
name|setLateExternalSigning
parameter_list|(
name|boolean
name|lateExternalSigning
parameter_list|)
block|{
name|this
operator|.
name|lateExternalSigning
operator|=
name|lateExternalSigning
expr_stmt|;
block|}
comment|/**      * Sign pdf file and create new file that ends with "_signed.pdf".      *      * @param inputFile The source pdf document file.      * @param signedFile The file to be signed.      * @param humanRect rectangle from a human viewpoint (coordinates start at top left)      * @param tsaUrl optional TSA url      * @throws IOException      */
specifier|public
name|void
name|signPDF
parameter_list|(
name|File
name|inputFile
parameter_list|,
name|File
name|signedFile
parameter_list|,
name|Rectangle2D
name|humanRect
parameter_list|,
name|String
name|tsaUrl
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|signPDF
argument_list|(
name|inputFile
argument_list|,
name|signedFile
argument_list|,
name|humanRect
argument_list|,
name|tsaUrl
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sign pdf file and create new file that ends with "_signed.pdf".      *      * @param inputFile The source pdf document file.      * @param signedFile The file to be signed.      * @param humanRect rectangle from a human viewpoint (coordinates start at top left)      * @param tsaUrl optional TSA url      * @param signatureFieldName optional name of an existing (unsigned) signature field      * @throws IOException      */
specifier|public
name|void
name|signPDF
parameter_list|(
name|File
name|inputFile
parameter_list|,
name|File
name|signedFile
parameter_list|,
name|Rectangle2D
name|humanRect
parameter_list|,
name|String
name|tsaUrl
parameter_list|,
name|String
name|signatureFieldName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|inputFile
operator|==
literal|null
operator|||
operator|!
name|inputFile
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Document for signing does not exist"
argument_list|)
throw|;
block|}
name|setTsaUrl
argument_list|(
name|tsaUrl
argument_list|)
expr_stmt|;
comment|// creating output document and prepare the IO streams.
try|try
init|(
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
name|signedFile
argument_list|)
init|;
name|PDDocument
name|doc
operator|=
name|PDDocument
operator|.
name|load
argument_list|(
name|inputFile
argument_list|)
init|)
block|{
name|int
name|accessPermissions
init|=
name|SigUtils
operator|.
name|getMDPPermission
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|accessPermissions
operator|==
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No changes to the document are permitted due to DocMDP transform parameters dictionary"
argument_list|)
throw|;
block|}
comment|// Note that PDFBox has a bug that visual signing on certified files with permission 2
comment|// doesn't work properly, see PDFBOX-3699. As long as this issue is open, you may want to
comment|// be careful with such files.
name|PDSignature
name|signature
init|=
literal|null
decl_stmt|;
name|PDAcroForm
name|acroForm
init|=
name|doc
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|getAcroForm
argument_list|()
decl_stmt|;
name|PDRectangle
name|rect
init|=
literal|null
decl_stmt|;
comment|// sign a PDF with an existing empty signature, as created by the CreateEmptySignatureForm example.
if|if
condition|(
name|acroForm
operator|!=
literal|null
condition|)
block|{
name|signature
operator|=
name|findExistingSignature
argument_list|(
name|acroForm
argument_list|,
name|signatureFieldName
argument_list|)
expr_stmt|;
if|if
condition|(
name|signature
operator|!=
literal|null
condition|)
block|{
name|rect
operator|=
name|acroForm
operator|.
name|getField
argument_list|(
name|signatureFieldName
argument_list|)
operator|.
name|getWidgets
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRectangle
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|signature
operator|==
literal|null
condition|)
block|{
comment|// create signature dictionary
name|signature
operator|=
operator|new
name|PDSignature
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|rect
operator|==
literal|null
condition|)
block|{
name|rect
operator|=
name|createSignatureRectangle
argument_list|(
name|doc
argument_list|,
name|humanRect
argument_list|)
expr_stmt|;
block|}
comment|// Optional: certify
comment|// can be done only if version is at least 1.5 and if not already set
comment|// doing this on a PDF/A-1b file fails validation by Adobe preflight (PDFBOX-3821)
comment|// PDF/A-1b requires PDF version 1.4 max, so don't increase the version on such files.
if|if
condition|(
name|doc
operator|.
name|getVersion
argument_list|()
operator|>=
literal|1.5f
operator|&&
name|accessPermissions
operator|==
literal|0
condition|)
block|{
name|SigUtils
operator|.
name|setMDPPermission
argument_list|(
name|doc
argument_list|,
name|signature
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|acroForm
operator|!=
literal|null
operator|&&
name|acroForm
operator|.
name|getNeedAppearances
argument_list|()
condition|)
block|{
comment|// PDFBOX-3738 NeedAppearances true results in visible signature becoming invisible
comment|// with Adobe Reader
if|if
condition|(
name|acroForm
operator|.
name|getFields
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// we can safely delete it if there are no fields
name|acroForm
operator|.
name|getCOSObject
argument_list|()
operator|.
name|removeItem
argument_list|(
name|COSName
operator|.
name|NEED_APPEARANCES
argument_list|)
expr_stmt|;
comment|// note that if you've set MDP permissions, the removal of this item
comment|// may result in Adobe Reader claiming that the document has been changed.
comment|// and/or that field content won't be displayed properly.
comment|// ==> decide what you prefer and adjust your code accordingly.
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"/NeedAppearances is set, signature may be ignored by Adobe Reader"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// default filter
name|signature
operator|.
name|setFilter
argument_list|(
name|PDSignature
operator|.
name|FILTER_ADOBE_PPKLITE
argument_list|)
expr_stmt|;
comment|// subfilter for basic and PAdES Part 2 signatures
name|signature
operator|.
name|setSubFilter
argument_list|(
name|PDSignature
operator|.
name|SUBFILTER_ADBE_PKCS7_DETACHED
argument_list|)
expr_stmt|;
name|signature
operator|.
name|setName
argument_list|(
literal|"Name"
argument_list|)
expr_stmt|;
name|signature
operator|.
name|setLocation
argument_list|(
literal|"Location"
argument_list|)
expr_stmt|;
name|signature
operator|.
name|setReason
argument_list|(
literal|"Reason"
argument_list|)
expr_stmt|;
comment|// the signing date, needed for valid signature
name|signature
operator|.
name|setSignDate
argument_list|(
name|Calendar
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
comment|// do not set SignatureInterface instance, if external signing used
name|SignatureInterface
name|signatureInterface
init|=
name|isExternalSigning
argument_list|()
condition|?
literal|null
else|:
name|this
decl_stmt|;
comment|// register signature dictionary and sign interface
name|signatureOptions
operator|=
operator|new
name|SignatureOptions
argument_list|()
expr_stmt|;
name|signatureOptions
operator|.
name|setVisualSignature
argument_list|(
name|createVisualSignatureTemplate
argument_list|(
name|doc
argument_list|,
literal|0
argument_list|,
name|rect
argument_list|)
argument_list|)
expr_stmt|;
name|signatureOptions
operator|.
name|setPage
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addSignature
argument_list|(
name|signature
argument_list|,
name|signatureInterface
argument_list|,
name|signatureOptions
argument_list|)
expr_stmt|;
if|if
condition|(
name|isExternalSigning
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Signing externally "
operator|+
name|signedFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ExternalSigningSupport
name|externalSigning
init|=
name|doc
operator|.
name|saveIncrementalForExternalSigning
argument_list|(
name|fos
argument_list|)
decl_stmt|;
comment|// invoke external signature service
name|byte
index|[]
name|cmsSignature
init|=
name|sign
argument_list|(
name|externalSigning
operator|.
name|getContent
argument_list|()
argument_list|)
decl_stmt|;
comment|// Explanation of late external signing (off by default):
comment|// If you want to add the signature in a separate step, then set an empty byte array
comment|// and call signature.getByteRange() and remember the offset signature.getByteRange()[1]+1.
comment|// you can write the ascii hex signature at a later time even if you don't have this
comment|// PDDocument object anymore, with classic java file random access methods.
comment|// If you can't remember the offset value from ByteRange because your context has changed,
comment|// then open the file with PDFBox, find the field with findExistingSignature() or
comment|// PODDocument.getLastSignatureDictionary() and get the ByteRange from there.
comment|// Close the file and then write the signature as explained earlier in this comment.
if|if
condition|(
name|isLateExternalSigning
argument_list|()
condition|)
block|{
comment|// this saves the file with a 0 signature
name|externalSigning
operator|.
name|setSignature
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// remember the offset (add 1 because of "<")
name|int
name|offset
init|=
name|signature
operator|.
name|getByteRange
argument_list|()
index|[
literal|1
index|]
operator|+
literal|1
decl_stmt|;
comment|// now write the signature at the correct offset without any PDFBox methods
try|try
init|(
name|RandomAccessFile
name|raf
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|signedFile
argument_list|,
literal|"rw"
argument_list|)
init|)
block|{
name|raf
operator|.
name|seek
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|raf
operator|.
name|write
argument_list|(
name|Hex
operator|.
name|getBytes
argument_list|(
name|cmsSignature
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// set signature bytes received from the service and save the file
name|externalSigning
operator|.
name|setSignature
argument_list|(
name|cmsSignature
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// write incremental (only for signing purpose)
name|doc
operator|.
name|saveIncremental
argument_list|(
name|fos
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Do not close signatureOptions before saving, because some COSStream objects within
comment|// are transferred to the signed document.
comment|// Do not allow signatureOptions get out of scope before saving, because then the COSDocument
comment|// in signature options might by closed by gc, which would close COSStream objects prematurely.
comment|// See https://issues.apache.org/jira/browse/PDFBOX-3743
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|signatureOptions
argument_list|)
expr_stmt|;
block|}
specifier|private
name|PDRectangle
name|createSignatureRectangle
parameter_list|(
name|PDDocument
name|doc
parameter_list|,
name|Rectangle2D
name|humanRect
parameter_list|)
block|{
name|float
name|x
init|=
operator|(
name|float
operator|)
name|humanRect
operator|.
name|getX
argument_list|()
decl_stmt|;
name|float
name|y
init|=
operator|(
name|float
operator|)
name|humanRect
operator|.
name|getY
argument_list|()
decl_stmt|;
name|float
name|width
init|=
operator|(
name|float
operator|)
name|humanRect
operator|.
name|getWidth
argument_list|()
decl_stmt|;
name|float
name|height
init|=
operator|(
name|float
operator|)
name|humanRect
operator|.
name|getHeight
argument_list|()
decl_stmt|;
name|PDPage
name|page
init|=
name|doc
operator|.
name|getPage
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|PDRectangle
name|pageRect
init|=
name|page
operator|.
name|getCropBox
argument_list|()
decl_stmt|;
name|PDRectangle
name|rect
init|=
operator|new
name|PDRectangle
argument_list|()
decl_stmt|;
comment|// signing should be at the same position regardless of page rotation.
switch|switch
condition|(
name|page
operator|.
name|getRotation
argument_list|()
condition|)
block|{
case|case
literal|90
case|:
name|rect
operator|.
name|setLowerLeftY
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|rect
operator|.
name|setUpperRightY
argument_list|(
name|x
operator|+
name|width
argument_list|)
expr_stmt|;
name|rect
operator|.
name|setLowerLeftX
argument_list|(
name|y
argument_list|)
expr_stmt|;
name|rect
operator|.
name|setUpperRightX
argument_list|(
name|y
operator|+
name|height
argument_list|)
expr_stmt|;
break|break;
case|case
literal|180
case|:
name|rect
operator|.
name|setUpperRightX
argument_list|(
name|pageRect
operator|.
name|getWidth
argument_list|()
operator|-
name|x
argument_list|)
expr_stmt|;
name|rect
operator|.
name|setLowerLeftX
argument_list|(
name|pageRect
operator|.
name|getWidth
argument_list|()
operator|-
name|x
operator|-
name|width
argument_list|)
expr_stmt|;
name|rect
operator|.
name|setLowerLeftY
argument_list|(
name|y
argument_list|)
expr_stmt|;
name|rect
operator|.
name|setUpperRightY
argument_list|(
name|y
operator|+
name|height
argument_list|)
expr_stmt|;
break|break;
case|case
literal|270
case|:
name|rect
operator|.
name|setLowerLeftY
argument_list|(
name|pageRect
operator|.
name|getHeight
argument_list|()
operator|-
name|x
operator|-
name|width
argument_list|)
expr_stmt|;
name|rect
operator|.
name|setUpperRightY
argument_list|(
name|pageRect
operator|.
name|getHeight
argument_list|()
operator|-
name|x
argument_list|)
expr_stmt|;
name|rect
operator|.
name|setLowerLeftX
argument_list|(
name|pageRect
operator|.
name|getWidth
argument_list|()
operator|-
name|y
operator|-
name|height
argument_list|)
expr_stmt|;
name|rect
operator|.
name|setUpperRightX
argument_list|(
name|pageRect
operator|.
name|getWidth
argument_list|()
operator|-
name|y
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0
case|:
default|default:
name|rect
operator|.
name|setLowerLeftX
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|rect
operator|.
name|setUpperRightX
argument_list|(
name|x
operator|+
name|width
argument_list|)
expr_stmt|;
name|rect
operator|.
name|setLowerLeftY
argument_list|(
name|pageRect
operator|.
name|getHeight
argument_list|()
operator|-
name|y
operator|-
name|height
argument_list|)
expr_stmt|;
name|rect
operator|.
name|setUpperRightY
argument_list|(
name|pageRect
operator|.
name|getHeight
argument_list|()
operator|-
name|y
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|rect
return|;
block|}
comment|// create a template PDF document with empty signature and return it as a stream.
specifier|private
name|InputStream
name|createVisualSignatureTemplate
parameter_list|(
name|PDDocument
name|srcDoc
parameter_list|,
name|int
name|pageNum
parameter_list|,
name|PDRectangle
name|rect
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|PDDocument
name|doc
init|=
operator|new
name|PDDocument
argument_list|()
init|)
block|{
name|PDPage
name|page
init|=
operator|new
name|PDPage
argument_list|(
name|srcDoc
operator|.
name|getPage
argument_list|(
name|pageNum
argument_list|)
operator|.
name|getMediaBox
argument_list|()
argument_list|)
decl_stmt|;
name|doc
operator|.
name|addPage
argument_list|(
name|page
argument_list|)
expr_stmt|;
name|PDAcroForm
name|acroForm
init|=
operator|new
name|PDAcroForm
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|doc
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|setAcroForm
argument_list|(
name|acroForm
argument_list|)
expr_stmt|;
name|PDSignatureField
name|signatureField
init|=
operator|new
name|PDSignatureField
argument_list|(
name|acroForm
argument_list|)
decl_stmt|;
name|PDAnnotationWidget
name|widget
init|=
name|signatureField
operator|.
name|getWidgets
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PDField
argument_list|>
name|acroFormFields
init|=
name|acroForm
operator|.
name|getFields
argument_list|()
decl_stmt|;
name|acroForm
operator|.
name|setSignaturesExist
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|acroForm
operator|.
name|setAppendOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|acroForm
operator|.
name|getCOSObject
argument_list|()
operator|.
name|setDirect
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|acroFormFields
operator|.
name|add
argument_list|(
name|signatureField
argument_list|)
expr_stmt|;
name|widget
operator|.
name|setRectangle
argument_list|(
name|rect
argument_list|)
expr_stmt|;
comment|// from PDVisualSigBuilder.createHolderForm()
name|PDStream
name|stream
init|=
operator|new
name|PDStream
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|PDFormXObject
name|form
init|=
operator|new
name|PDFormXObject
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|PDResources
name|res
init|=
operator|new
name|PDResources
argument_list|()
decl_stmt|;
name|form
operator|.
name|setResources
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|form
operator|.
name|setFormType
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|PDRectangle
name|bbox
init|=
operator|new
name|PDRectangle
argument_list|(
name|rect
operator|.
name|getWidth
argument_list|()
argument_list|,
name|rect
operator|.
name|getHeight
argument_list|()
argument_list|)
decl_stmt|;
name|float
name|height
init|=
name|bbox
operator|.
name|getHeight
argument_list|()
decl_stmt|;
name|Matrix
name|initialScale
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|srcDoc
operator|.
name|getPage
argument_list|(
name|pageNum
argument_list|)
operator|.
name|getRotation
argument_list|()
condition|)
block|{
case|case
literal|90
case|:
name|form
operator|.
name|setMatrix
argument_list|(
name|AffineTransform
operator|.
name|getQuadrantRotateInstance
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|initialScale
operator|=
name|Matrix
operator|.
name|getScaleInstance
argument_list|(
name|bbox
operator|.
name|getWidth
argument_list|()
operator|/
name|bbox
operator|.
name|getHeight
argument_list|()
argument_list|,
name|bbox
operator|.
name|getHeight
argument_list|()
operator|/
name|bbox
operator|.
name|getWidth
argument_list|()
argument_list|)
expr_stmt|;
name|height
operator|=
name|bbox
operator|.
name|getWidth
argument_list|()
expr_stmt|;
break|break;
case|case
literal|180
case|:
name|form
operator|.
name|setMatrix
argument_list|(
name|AffineTransform
operator|.
name|getQuadrantRotateInstance
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|270
case|:
name|form
operator|.
name|setMatrix
argument_list|(
name|AffineTransform
operator|.
name|getQuadrantRotateInstance
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|initialScale
operator|=
name|Matrix
operator|.
name|getScaleInstance
argument_list|(
name|bbox
operator|.
name|getWidth
argument_list|()
operator|/
name|bbox
operator|.
name|getHeight
argument_list|()
argument_list|,
name|bbox
operator|.
name|getHeight
argument_list|()
operator|/
name|bbox
operator|.
name|getWidth
argument_list|()
argument_list|)
expr_stmt|;
name|height
operator|=
name|bbox
operator|.
name|getWidth
argument_list|()
expr_stmt|;
break|break;
case|case
literal|0
case|:
default|default:
break|break;
block|}
name|form
operator|.
name|setBBox
argument_list|(
name|bbox
argument_list|)
expr_stmt|;
name|PDFont
name|font
init|=
name|PDType1Font
operator|.
name|HELVETICA_BOLD
decl_stmt|;
comment|// from PDVisualSigBuilder.createAppearanceDictionary()
name|PDAppearanceDictionary
name|appearance
init|=
operator|new
name|PDAppearanceDictionary
argument_list|()
decl_stmt|;
name|appearance
operator|.
name|getCOSObject
argument_list|()
operator|.
name|setDirect
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|PDAppearanceStream
name|appearanceStream
init|=
operator|new
name|PDAppearanceStream
argument_list|(
name|form
operator|.
name|getCOSObject
argument_list|()
argument_list|)
decl_stmt|;
name|appearance
operator|.
name|setNormalAppearance
argument_list|(
name|appearanceStream
argument_list|)
expr_stmt|;
name|widget
operator|.
name|setAppearance
argument_list|(
name|appearance
argument_list|)
expr_stmt|;
try|try
init|(
name|PDPageContentStream
name|cs
init|=
operator|new
name|PDPageContentStream
argument_list|(
name|doc
argument_list|,
name|appearanceStream
argument_list|)
init|)
block|{
comment|// for 90Â° and 270Â° scale ratio of width / height
comment|// not really sure about this
comment|// why does scale have no effect when done in the form matrix???
if|if
condition|(
name|initialScale
operator|!=
literal|null
condition|)
block|{
name|cs
operator|.
name|transform
argument_list|(
name|initialScale
argument_list|)
expr_stmt|;
block|}
comment|// show background (just for debugging, to see the rect size + position)
name|cs
operator|.
name|setNonStrokingColor
argument_list|(
name|Color
operator|.
name|yellow
argument_list|)
expr_stmt|;
name|cs
operator|.
name|addRect
argument_list|(
operator|-
literal|5000
argument_list|,
operator|-
literal|5000
argument_list|,
literal|10000
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|cs
operator|.
name|fill
argument_list|()
expr_stmt|;
comment|// show background image
comment|// save and restore graphics if the image is too large and needs to be scaled
name|cs
operator|.
name|saveGraphicsState
argument_list|()
expr_stmt|;
name|cs
operator|.
name|transform
argument_list|(
name|Matrix
operator|.
name|getScaleInstance
argument_list|(
literal|0.25f
argument_list|,
literal|0.25f
argument_list|)
argument_list|)
expr_stmt|;
name|PDImageXObject
name|img
init|=
name|PDImageXObject
operator|.
name|createFromFileByExtension
argument_list|(
name|imageFile
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|cs
operator|.
name|drawImage
argument_list|(
name|img
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cs
operator|.
name|restoreGraphicsState
argument_list|()
expr_stmt|;
comment|// show text
name|float
name|fontSize
init|=
literal|10
decl_stmt|;
name|float
name|leading
init|=
name|fontSize
operator|*
literal|1.5f
decl_stmt|;
name|cs
operator|.
name|beginText
argument_list|()
expr_stmt|;
name|cs
operator|.
name|setFont
argument_list|(
name|font
argument_list|,
name|fontSize
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setNonStrokingColor
argument_list|(
name|Color
operator|.
name|black
argument_list|)
expr_stmt|;
name|cs
operator|.
name|newLineAtOffset
argument_list|(
name|fontSize
argument_list|,
name|height
operator|-
name|leading
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setLeading
argument_list|(
name|leading
argument_list|)
expr_stmt|;
name|cs
operator|.
name|showText
argument_list|(
literal|"(Signature very wide line 1)"
argument_list|)
expr_stmt|;
name|cs
operator|.
name|newLine
argument_list|()
expr_stmt|;
name|cs
operator|.
name|showText
argument_list|(
literal|"(Signature very wide line 2)"
argument_list|)
expr_stmt|;
name|cs
operator|.
name|newLine
argument_list|()
expr_stmt|;
name|cs
operator|.
name|showText
argument_list|(
literal|"(Signature very wide line 3)"
argument_list|)
expr_stmt|;
name|cs
operator|.
name|endText
argument_list|()
expr_stmt|;
block|}
comment|// no need to set annotations and /P entry
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|doc
operator|.
name|save
argument_list|(
name|baos
argument_list|)
expr_stmt|;
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|// Find an existing signature (assumed to be empty). You will usually not need this.
specifier|private
name|PDSignature
name|findExistingSignature
parameter_list|(
name|PDAcroForm
name|acroForm
parameter_list|,
name|String
name|sigFieldName
parameter_list|)
block|{
name|PDSignature
name|signature
init|=
literal|null
decl_stmt|;
name|PDSignatureField
name|signatureField
decl_stmt|;
if|if
condition|(
name|acroForm
operator|!=
literal|null
condition|)
block|{
name|signatureField
operator|=
operator|(
name|PDSignatureField
operator|)
name|acroForm
operator|.
name|getField
argument_list|(
name|sigFieldName
argument_list|)
expr_stmt|;
if|if
condition|(
name|signatureField
operator|!=
literal|null
condition|)
block|{
comment|// retrieve signature dictionary
name|signature
operator|=
name|signatureField
operator|.
name|getSignature
argument_list|()
expr_stmt|;
if|if
condition|(
name|signature
operator|==
literal|null
condition|)
block|{
name|signature
operator|=
operator|new
name|PDSignature
argument_list|()
expr_stmt|;
comment|// after solving PDFBOX-3524
comment|// signatureField.setValue(signature)
comment|// until then:
name|signatureField
operator|.
name|getCOSObject
argument_list|()
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|V
argument_list|,
name|signature
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"The signature field "
operator|+
name|sigFieldName
operator|+
literal|" is already signed."
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|signature
return|;
block|}
comment|/**      * Arguments are      * [0] key store      * [1] pin      * [2] document that will be signed      * [3] image of visible signature      *      * @param args      * @throws java.security.KeyStoreException      * @throws java.security.cert.CertificateException      * @throws java.io.IOException      * @throws java.security.NoSuchAlgorithmException      * @throws java.security.UnrecoverableKeyException      */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|KeyStoreException
throws|,
name|CertificateException
throws|,
name|IOException
throws|,
name|NoSuchAlgorithmException
throws|,
name|UnrecoverableKeyException
block|{
comment|// generate with
comment|// keytool -storepass 123456 -storetype PKCS12 -keystore file.p12 -genkey -alias client -keyalg RSA
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|4
condition|)
block|{
name|usage
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|tsaUrl
init|=
literal|null
decl_stmt|;
comment|// External signing is needed if you are using an external signing service, e.g. to sign
comment|// several files at once.
name|boolean
name|externalSig
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-tsa"
argument_list|)
condition|)
block|{
name|i
operator|++
expr_stmt|;
if|if
condition|(
name|i
operator|>=
name|args
operator|.
name|length
condition|)
block|{
name|usage
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|tsaUrl
operator|=
name|args
index|[
name|i
index|]
expr_stmt|;
block|}
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-e"
argument_list|)
condition|)
block|{
name|externalSig
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|File
name|ksFile
init|=
operator|new
name|File
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|KeyStore
name|keystore
init|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
literal|"PKCS12"
argument_list|)
decl_stmt|;
name|char
index|[]
name|pin
init|=
name|args
index|[
literal|1
index|]
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|keystore
operator|.
name|load
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|ksFile
argument_list|)
argument_list|,
name|pin
argument_list|)
expr_stmt|;
name|File
name|documentFile
init|=
operator|new
name|File
argument_list|(
name|args
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|CreateVisibleSignature2
name|signing
init|=
operator|new
name|CreateVisibleSignature2
argument_list|(
name|keystore
argument_list|,
name|pin
operator|.
name|clone
argument_list|()
argument_list|)
decl_stmt|;
name|signing
operator|.
name|setImageFile
argument_list|(
operator|new
name|File
argument_list|(
name|args
index|[
literal|3
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|signedDocumentFile
decl_stmt|;
name|String
name|name
init|=
name|documentFile
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|substring
init|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
decl_stmt|;
name|signedDocumentFile
operator|=
operator|new
name|File
argument_list|(
name|documentFile
operator|.
name|getParent
argument_list|()
argument_list|,
name|substring
operator|+
literal|"_signed.pdf"
argument_list|)
expr_stmt|;
name|signing
operator|.
name|setExternalSigning
argument_list|(
name|externalSig
argument_list|)
expr_stmt|;
comment|// Set the signature rectangle
comment|// Although PDF coordinates start from the bottom, humans start from the top.
comment|// So a human would want to position a signature (x,y) units from the
comment|// top left of the displayed page, and the field has a horizontal width and a vertical height
comment|// regardless of page rotation.
name|Rectangle2D
name|humanRect
init|=
operator|new
name|Rectangle2D
operator|.
name|Float
argument_list|(
literal|100
argument_list|,
literal|200
argument_list|,
literal|150
argument_list|,
literal|50
argument_list|)
decl_stmt|;
name|signing
operator|.
name|signPDF
argument_list|(
name|documentFile
argument_list|,
name|signedDocumentFile
argument_list|,
name|humanRect
argument_list|,
name|tsaUrl
argument_list|,
literal|"Signature1"
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will print the usage for this program.      */
specifier|private
specifier|static
name|void
name|usage
parameter_list|()
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java "
operator|+
name|CreateVisibleSignature2
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"<pkcs12-keystore-file><pin><input-pdf><sign-image>\n"
operator|+
literal|""
operator|+
literal|"options:\n"
operator|+
literal|"  -tsa<url>    sign timestamp using the given TSA server\n"
operator|+
literal|"  -e            sign using external signature creation scenario"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

