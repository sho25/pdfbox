begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|examples
operator|.
name|interactive
operator|.
name|form
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAnnotationWidget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|form
operator|.
name|PDAcroForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|form
operator|.
name|PDField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|form
operator|.
name|PDTextField
import|;
end_import

begin_comment
comment|/**  * Determine if text length fits the field.  *   * This sample builds on the form generated by @link CreateSimpleForm so you need to run that first.  *   */
end_comment

begin_class
specifier|public
class|class
name|DetermineTextFitsField
block|{
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Load the PDF document created by SimpleForm.java
name|PDDocument
name|document
init|=
name|PDDocument
operator|.
name|load
argument_list|(
operator|new
name|File
argument_list|(
literal|"target/SimpleForm.pdf"
argument_list|)
argument_list|)
decl_stmt|;
name|PDAcroForm
name|acroForm
init|=
name|document
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|getAcroForm
argument_list|()
decl_stmt|;
comment|// Get the field and the widget associated to it.
comment|// Note: there might be multiple widgets
name|PDField
name|field
init|=
name|acroForm
operator|.
name|getField
argument_list|(
literal|"SampleField"
argument_list|)
decl_stmt|;
name|PDAnnotationWidget
name|widget
init|=
name|field
operator|.
name|getWidgets
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Get the width of the fields box
name|float
name|widthOfField
init|=
name|widget
operator|.
name|getRectangle
argument_list|()
operator|.
name|getWidth
argument_list|()
decl_stmt|;
comment|// Get the font and the font size setting
comment|// This is currently a little awkward and needs improvement to have a better API
comment|// for that. In many cases the string will be built like that:
comment|//    /Helv 12 Tf 0 g
comment|// We could use PDFStreamParser to do the parsing. For the sample we split the
comment|// string.
name|String
name|defaultAppearance
init|=
operator|(
operator|(
name|PDTextField
operator|)
name|field
operator|)
operator|.
name|getDefaultAppearance
argument_list|()
decl_stmt|;
name|String
index|[]
name|parts
init|=
name|defaultAppearance
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
comment|// Get the font name
name|COSName
name|fontName
init|=
name|COSName
operator|.
name|getPDFName
argument_list|(
name|parts
index|[
literal|0
index|]
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|float
name|fontSize
init|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|parts
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
comment|// Get the font resource.
comment|// First look up the font from the widgets appearance stream.
comment|// This will be the case if there is already a value.
comment|// If the value hasn't been set yet the font resource needs to be looked up from
comment|// the AcroForm default resources
name|PDFont
name|font
init|=
literal|null
decl_stmt|;
name|PDResources
name|resources
init|=
literal|null
decl_stmt|;
name|resources
operator|=
name|widget
operator|.
name|getNormalAppearanceStream
argument_list|()
operator|.
name|getResources
argument_list|()
expr_stmt|;
if|if
condition|(
name|resources
operator|!=
literal|null
condition|)
block|{
name|font
operator|=
name|resources
operator|.
name|getFont
argument_list|(
name|fontName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|font
operator|==
literal|null
condition|)
block|{
name|font
operator|=
name|acroForm
operator|.
name|getDefaultResources
argument_list|()
operator|.
name|getFont
argument_list|(
name|fontName
argument_list|)
expr_stmt|;
block|}
name|String
name|willFit
init|=
literal|"short string"
decl_stmt|;
name|String
name|willNotFit
init|=
literal|"this is a very long string which will not fit the width of the widget"
decl_stmt|;
comment|// calculate the string width at a certain font size
name|float
name|willFitWidth
init|=
name|font
operator|.
name|getStringWidth
argument_list|(
name|willFit
argument_list|)
operator|*
name|fontSize
operator|/
literal|1000
decl_stmt|;
name|float
name|willNotFitWidth
init|=
name|font
operator|.
name|getStringWidth
argument_list|(
name|willNotFit
argument_list|)
operator|*
name|fontSize
operator|/
literal|1000
decl_stmt|;
assert|assert
name|willFitWidth
operator|<
name|widthOfField
assert|;
assert|assert
name|willNotFitWidth
operator|>
name|widthOfField
assert|;
name|document
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

