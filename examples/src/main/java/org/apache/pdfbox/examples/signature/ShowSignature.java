begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|examples
operator|.
name|signature
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|InvalidAlgorithmParameterException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStoreException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Security
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateExpiredException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateNotYetValidException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|PKIXParameters
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|TrustAnchor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|examples
operator|.
name|signature
operator|.
name|cert
operator|.
name|CertificateVerificationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|examples
operator|.
name|signature
operator|.
name|cert
operator|.
name|CertificateVerifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|io
operator|.
name|RandomAccessBufferedFileInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdfparser
operator|.
name|PDFParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocumentCatalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|encryption
operator|.
name|SecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|digitalsignature
operator|.
name|PDSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|Hex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|cms
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|cms
operator|.
name|CMSAttributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|x509
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cert
operator|.
name|X509CertificateHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cert
operator|.
name|jcajce
operator|.
name|JcaCertStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cert
operator|.
name|jcajce
operator|.
name|JcaX509CertificateConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cms
operator|.
name|CMSException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cms
operator|.
name|CMSProcessable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cms
operator|.
name|CMSProcessableByteArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cms
operator|.
name|CMSSignedData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cms
operator|.
name|SignerInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cms
operator|.
name|jcajce
operator|.
name|JcaSimpleSignerInfoVerifierBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|operator
operator|.
name|OperatorCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|tsp
operator|.
name|TSPException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|tsp
operator|.
name|TimeStampToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|util
operator|.
name|CollectionStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|util
operator|.
name|Selector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|util
operator|.
name|Store
import|;
end_import

begin_comment
comment|/**  * This will get the signature(s) from the document, do some verifications and  * show the signature(s) and the certificates. This is a complex topic - the  * code here is an example and not a production-ready solution.  *  * @author Ben Litchfield  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|ShowSignature
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ShowSignature
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|SimpleDateFormat
name|sdf
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"dd.MM.yyyy HH:mm:ss"
argument_list|)
decl_stmt|;
specifier|private
name|ShowSignature
parameter_list|()
block|{     }
comment|/**      * This is the entry point for the application.      *      * @param args The command-line arguments.      *      * @throws IOException If there is an error reading the file.      * @throws org.bouncycastle.tsp.TSPException      * @throws org.apache.pdfbox.examples.signature.cert.CertificateVerificationException      * @throws java.security.GeneralSecurityException      */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
throws|,
name|TSPException
throws|,
name|CertificateVerificationException
throws|,
name|GeneralSecurityException
block|{
comment|// register BouncyCastle provider, needed for "exotic" algorithms
name|Security
operator|.
name|addProvider
argument_list|(
name|SecurityProvider
operator|.
name|getProvider
argument_list|()
argument_list|)
expr_stmt|;
name|ShowSignature
name|show
init|=
operator|new
name|ShowSignature
argument_list|()
decl_stmt|;
name|show
operator|.
name|showSignature
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|showSignature
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
throws|,
name|GeneralSecurityException
throws|,
name|TSPException
throws|,
name|CertificateVerificationException
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
name|usage
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|String
name|password
init|=
name|args
index|[
literal|0
index|]
decl_stmt|;
name|File
name|infile
init|=
operator|new
name|File
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
comment|// use old-style document loading to disable leniency
comment|// see also https://www.pdf-insecurity.org/
name|RandomAccessBufferedFileInputStream
name|raFile
init|=
operator|new
name|RandomAccessBufferedFileInputStream
argument_list|(
name|infile
argument_list|)
decl_stmt|;
comment|// If your files are not too large, you can also download the PDF into a byte array
comment|// with IOUtils.toByteArray() and pass a RandomAccessBuffer() object to the
comment|// PDFParser constructor.
name|PDFParser
name|parser
init|=
operator|new
name|PDFParser
argument_list|(
name|raFile
argument_list|,
name|password
argument_list|)
decl_stmt|;
try|try
init|(
name|PDDocument
name|document
init|=
name|parser
operator|.
name|parse
argument_list|(
literal|false
argument_list|)
init|)
block|{
for|for
control|(
name|PDSignature
name|sig
range|:
name|document
operator|.
name|getSignatureDictionaries
argument_list|()
control|)
block|{
name|COSDictionary
name|sigDict
init|=
name|sig
operator|.
name|getCOSObject
argument_list|()
decl_stmt|;
name|COSString
name|contents
init|=
operator|(
name|COSString
operator|)
name|sigDict
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|CONTENTS
argument_list|)
decl_stmt|;
comment|// download the signed content
name|byte
index|[]
name|buf
decl_stmt|;
try|try
init|(
name|FileInputStream
name|fis
init|=
operator|new
name|FileInputStream
argument_list|(
name|infile
argument_list|)
init|)
block|{
name|buf
operator|=
name|sig
operator|.
name|getSignedContent
argument_list|(
name|fis
argument_list|)
expr_stmt|;
comment|// alternatively, pass a byte array here
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Signature found"
argument_list|)
expr_stmt|;
if|if
condition|(
name|sig
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Name:     "
operator|+
name|sig
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sig
operator|.
name|getSignDate
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Modified: "
operator|+
name|sdf
operator|.
name|format
argument_list|(
name|sig
operator|.
name|getSignDate
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|subFilter
init|=
name|sig
operator|.
name|getSubFilter
argument_list|()
decl_stmt|;
if|if
condition|(
name|subFilter
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|subFilter
condition|)
block|{
case|case
literal|"adbe.pkcs7.detached"
case|:
case|case
literal|"ETSI.CAdES.detached"
case|:
name|verifyPKCS7
argument_list|(
name|buf
argument_list|,
name|contents
argument_list|,
name|sig
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"adbe.pkcs7.sha1"
case|:
block|{
comment|// example: PDFBOX-1452.pdf
name|byte
index|[]
name|certData
init|=
name|contents
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|CertificateFactory
name|factory
init|=
name|CertificateFactory
operator|.
name|getInstance
argument_list|(
literal|"X.509"
argument_list|)
decl_stmt|;
name|ByteArrayInputStream
name|certStream
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|certData
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|?
extends|extends
name|Certificate
argument_list|>
name|certs
init|=
name|factory
operator|.
name|generateCertificates
argument_list|(
name|certStream
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"certs="
operator|+
name|certs
argument_list|)
expr_stmt|;
name|byte
index|[]
name|hash
init|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"SHA1"
argument_list|)
operator|.
name|digest
argument_list|(
name|buf
argument_list|)
decl_stmt|;
name|verifyPKCS7
argument_list|(
name|hash
argument_list|,
name|contents
argument_list|,
name|sig
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|"adbe.x509.rsa_sha1"
case|:
block|{
comment|// example: PDFBOX-2693.pdf
name|COSString
name|certString
init|=
operator|(
name|COSString
operator|)
name|sigDict
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|CERT
argument_list|)
decl_stmt|;
comment|//TODO this could also be an array.
if|if
condition|(
name|certString
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The /Cert certificate string is missing in the signature dictionary"
argument_list|)
expr_stmt|;
return|return;
block|}
name|byte
index|[]
name|certData
init|=
name|certString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|CertificateFactory
name|factory
init|=
name|CertificateFactory
operator|.
name|getInstance
argument_list|(
literal|"X.509"
argument_list|)
decl_stmt|;
name|ByteArrayInputStream
name|certStream
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|certData
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|?
extends|extends
name|Certificate
argument_list|>
name|certs
init|=
name|factory
operator|.
name|generateCertificates
argument_list|(
name|certStream
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"certs="
operator|+
name|certs
argument_list|)
expr_stmt|;
name|X509Certificate
name|cert
init|=
operator|(
name|X509Certificate
operator|)
name|certs
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// to verify signature, see code at
comment|// https://stackoverflow.com/questions/43383859/
try|try
block|{
if|if
condition|(
name|sig
operator|.
name|getSignDate
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|cert
operator|.
name|checkValidity
argument_list|(
name|sig
operator|.
name|getSignDate
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Certificate valid at signing time"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Certificate cannot be verified without signing time"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|CertificateExpiredException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Certificate expired at signing time"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CertificateNotYetValidException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Certificate not yet valid at signing time"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|CertificateVerifier
operator|.
name|isSelfSigned
argument_list|(
name|cert
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Certificate is self-signed, LOL!"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Certificate is not self-signed"
argument_list|)
expr_stmt|;
if|if
condition|(
name|sig
operator|.
name|getSignDate
argument_list|()
operator|!=
literal|null
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Store
argument_list|<
name|X509CertificateHolder
argument_list|>
name|store
init|=
operator|new
name|JcaCertStore
argument_list|(
name|certs
argument_list|)
decl_stmt|;
name|verifyCertificateChain
argument_list|(
name|store
argument_list|,
name|cert
argument_list|,
name|sig
operator|.
name|getSignDate
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
block|}
case|case
literal|"ETSI.RFC3161"
case|:
comment|// e.g. PDFBOX-1848, file_timestamped.pdf
name|verifyETSIdotRFC3161
argument_list|(
name|buf
argument_list|,
name|contents
argument_list|)
expr_stmt|;
comment|// verifyPKCS7(hash, contents, sig) does not work
break|break;
default|default:
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Unknown certificate type: "
operator|+
name|subFilter
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Missing subfilter for cert dictionary"
argument_list|)
throw|;
block|}
name|int
index|[]
name|byteRange
init|=
name|sig
operator|.
name|getByteRange
argument_list|()
decl_stmt|;
if|if
condition|(
name|byteRange
operator|.
name|length
operator|!=
literal|4
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Signature byteRange must have 4 items"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|long
name|fileLen
init|=
name|infile
operator|.
name|length
argument_list|()
decl_stmt|;
name|long
name|rangeMax
init|=
name|byteRange
index|[
literal|2
index|]
operator|+
operator|(
name|long
operator|)
name|byteRange
index|[
literal|3
index|]
decl_stmt|;
comment|// multiply content length with 2 (because it is in hex in the PDF) and add 2 for< and>
name|int
name|contentLen
init|=
name|contents
operator|.
name|getString
argument_list|()
operator|.
name|length
argument_list|()
operator|*
literal|2
operator|+
literal|2
decl_stmt|;
if|if
condition|(
name|fileLen
operator|!=
name|rangeMax
operator|||
name|byteRange
index|[
literal|0
index|]
operator|!=
literal|0
operator|||
name|byteRange
index|[
literal|1
index|]
operator|+
name|contentLen
operator|!=
name|byteRange
index|[
literal|2
index|]
condition|)
block|{
comment|// a false result doesn't necessarily mean that the PDF is a fake
comment|// see this answer why:
comment|// https://stackoverflow.com/a/48185913/535646
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Signature does not cover whole document"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Signature covers whole document"
argument_list|)
expr_stmt|;
block|}
name|checkContentValueWithFile
argument_list|(
name|infile
argument_list|,
name|byteRange
argument_list|,
name|contents
argument_list|)
expr_stmt|;
block|}
block|}
name|analyseDSS
argument_list|(
name|document
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CMSException
decl||
name|OperatorCreationException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Analyzed: "
operator|+
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkContentValueWithFile
parameter_list|(
name|File
name|file
parameter_list|,
name|int
index|[]
name|byteRange
parameter_list|,
name|COSString
name|contents
parameter_list|)
throws|throws
name|IOException
block|{
comment|// https://stackoverflow.com/questions/55049270
comment|// comment by mkl: check whether gap contains a hex value equal
comment|// byte-by-byte to the Content value, to prevent attacker from using a literal string
comment|// to allow extra space
try|try
init|(
name|RandomAccessBufferedFileInputStream
name|raf
init|=
operator|new
name|RandomAccessBufferedFileInputStream
argument_list|(
name|file
argument_list|)
init|)
block|{
name|raf
operator|.
name|seek
argument_list|(
name|byteRange
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|int
name|c
init|=
name|raf
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|'<'
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"'<' expected at offset "
operator|+
name|byteRange
index|[
literal|1
index|]
operator|+
literal|", but got "
operator|+
operator|(
name|char
operator|)
name|c
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|contentFromFile
init|=
operator|new
name|byte
index|[
name|byteRange
index|[
literal|2
index|]
operator|-
name|byteRange
index|[
literal|1
index|]
operator|-
literal|2
index|]
decl_stmt|;
name|int
name|contentBytesRead
init|=
name|raf
operator|.
name|read
argument_list|(
name|contentFromFile
argument_list|)
decl_stmt|;
name|byte
index|[]
name|contentAsHex
init|=
name|Hex
operator|.
name|getString
argument_list|(
name|contents
operator|.
name|getBytes
argument_list|()
argument_list|)
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|US_ASCII
argument_list|)
decl_stmt|;
if|if
condition|(
name|contentBytesRead
operator|!=
name|contentAsHex
operator|.
name|length
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Raw content length from file is "
operator|+
name|contentBytesRead
operator|+
literal|", but internal content string in hex has length "
operator|+
name|contentAsHex
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|// Compare the two, we can't do byte comparison because of upper/lower case
comment|// also check that it is really hex
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|contentBytesRead
condition|;
operator|++
name|i
control|)
block|{
try|try
block|{
if|if
condition|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
operator|(
name|char
operator|)
name|contentFromFile
index|[
name|i
index|]
argument_list|)
argument_list|,
literal|16
argument_list|)
operator|!=
name|Integer
operator|.
name|parseInt
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
operator|(
name|char
operator|)
name|contentAsHex
index|[
name|i
index|]
argument_list|)
argument_list|,
literal|16
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Possible manipulation at file offset "
operator|+
operator|(
name|byteRange
index|[
literal|1
index|]
operator|+
name|i
operator|+
literal|1
operator|)
operator|+
literal|" in signature content"
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Incorrect hex value"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Possible manipulation at file offset "
operator|+
operator|(
name|byteRange
index|[
literal|1
index|]
operator|+
name|i
operator|+
literal|1
operator|)
operator|+
literal|" in signature content"
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|c
operator|=
name|raf
operator|.
name|read
argument_list|()
expr_stmt|;
if|if
condition|(
name|c
operator|!=
literal|'>'
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"'>' expected at offset "
operator|+
name|byteRange
index|[
literal|2
index|]
operator|+
literal|", but got "
operator|+
operator|(
name|char
operator|)
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Verify ETSI.RFC3161 TImeStampToken      *      * @param byteArray the byte sequence that has been signed      * @param contents the /Contents field as a COSString      * @throws CMSException      * @throws NoSuchAlgorithmException      * @throws IOException      * @throws TSPException      * @throws OperatorCreationException      * @throws CertificateVerificationException      * @throws CertificateException       */
specifier|private
name|void
name|verifyETSIdotRFC3161
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|,
name|COSString
name|contents
parameter_list|)
throws|throws
name|CMSException
throws|,
name|NoSuchAlgorithmException
throws|,
name|IOException
throws|,
name|TSPException
throws|,
name|OperatorCreationException
throws|,
name|CertificateVerificationException
throws|,
name|CertificateException
block|{
name|TimeStampToken
name|timeStampToken
init|=
operator|new
name|TimeStampToken
argument_list|(
operator|new
name|CMSSignedData
argument_list|(
name|contents
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Time stamp gen time: "
operator|+
name|timeStampToken
operator|.
name|getTimeStampInfo
argument_list|()
operator|.
name|getGenTime
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Time stamp tsa name: "
operator|+
name|timeStampToken
operator|.
name|getTimeStampInfo
argument_list|()
operator|.
name|getTsa
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|CertificateFactory
name|factory
init|=
name|CertificateFactory
operator|.
name|getInstance
argument_list|(
literal|"X.509"
argument_list|)
decl_stmt|;
name|ByteArrayInputStream
name|certStream
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|contents
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|?
extends|extends
name|Certificate
argument_list|>
name|certs
init|=
name|factory
operator|.
name|generateCertificates
argument_list|(
name|certStream
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"certs="
operator|+
name|certs
argument_list|)
expr_stmt|;
name|String
name|hashAlgorithm
init|=
name|timeStampToken
operator|.
name|getTimeStampInfo
argument_list|()
operator|.
name|getMessageImprintAlgOID
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
comment|// compare the hash of the signed content with the hash in the timestamp
if|if
condition|(
name|Arrays
operator|.
name|equals
argument_list|(
name|MessageDigest
operator|.
name|getInstance
argument_list|(
name|hashAlgorithm
argument_list|)
operator|.
name|digest
argument_list|(
name|buf
argument_list|)
argument_list|,
name|timeStampToken
operator|.
name|getTimeStampInfo
argument_list|()
operator|.
name|getMessageImprintDigest
argument_list|()
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ETSI.RFC3161 timestamp signature verified"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ETSI.RFC3161 timestamp signature verification failed"
argument_list|)
expr_stmt|;
block|}
name|X509Certificate
name|certFromTimeStamp
init|=
operator|(
name|X509Certificate
operator|)
name|certs
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|SigUtils
operator|.
name|checkTimeStampCertificateUsage
argument_list|(
name|certFromTimeStamp
argument_list|)
expr_stmt|;
name|SigUtils
operator|.
name|validateTimestampToken
argument_list|(
name|timeStampToken
argument_list|)
expr_stmt|;
name|verifyCertificateChain
argument_list|(
name|timeStampToken
operator|.
name|getCertificates
argument_list|()
argument_list|,
name|certFromTimeStamp
argument_list|,
name|timeStampToken
operator|.
name|getTimeStampInfo
argument_list|()
operator|.
name|getGenTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Verify a PKCS7 signature.      *      * @param byteArray the byte sequence that has been signed      * @param contents the /Contents field as a COSString      * @param sig the PDF signature (the /V dictionary)      * @throws CMSException      * @throws OperatorCreationException      * @throws GeneralSecurityException      * @throws CertificateVerificationException      */
specifier|private
name|void
name|verifyPKCS7
parameter_list|(
name|byte
index|[]
name|byteArray
parameter_list|,
name|COSString
name|contents
parameter_list|,
name|PDSignature
name|sig
parameter_list|)
throws|throws
name|CMSException
throws|,
name|OperatorCreationException
throws|,
name|CertificateVerificationException
throws|,
name|GeneralSecurityException
throws|,
name|TSPException
throws|,
name|IOException
block|{
comment|// inspiration:
comment|// http://stackoverflow.com/a/26702631/535646
comment|// http://stackoverflow.com/a/9261365/535646
name|CMSProcessable
name|signedContent
init|=
operator|new
name|CMSProcessableByteArray
argument_list|(
name|byteArray
argument_list|)
decl_stmt|;
name|CMSSignedData
name|signedData
init|=
operator|new
name|CMSSignedData
argument_list|(
name|signedContent
argument_list|,
name|contents
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|Store
argument_list|<
name|X509CertificateHolder
argument_list|>
name|certificatesStore
init|=
name|signedData
operator|.
name|getCertificates
argument_list|()
decl_stmt|;
if|if
condition|(
name|certificatesStore
operator|.
name|getMatches
argument_list|(
literal|null
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No certificates in signature"
argument_list|)
throw|;
block|}
name|Collection
argument_list|<
name|SignerInformation
argument_list|>
name|signers
init|=
name|signedData
operator|.
name|getSignerInfos
argument_list|()
operator|.
name|getSigners
argument_list|()
decl_stmt|;
if|if
condition|(
name|signers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No signers in signature"
argument_list|)
throw|;
block|}
name|SignerInformation
name|signerInformation
init|=
name|signers
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Collection
argument_list|<
name|X509CertificateHolder
argument_list|>
name|matches
init|=
name|certificatesStore
operator|.
name|getMatches
argument_list|(
operator|(
name|Selector
argument_list|<
name|X509CertificateHolder
argument_list|>
operator|)
name|signerInformation
operator|.
name|getSID
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|matches
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Signer '"
operator|+
name|signerInformation
operator|.
name|getSID
argument_list|()
operator|.
name|getIssuer
argument_list|()
operator|+
literal|", serial# "
operator|+
name|signerInformation
operator|.
name|getSID
argument_list|()
operator|.
name|getSerialNumber
argument_list|()
operator|+
literal|" does not match any certificates"
argument_list|)
throw|;
block|}
name|X509CertificateHolder
name|certificateHolder
init|=
name|matches
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|X509Certificate
name|certFromSignedData
init|=
operator|new
name|JcaX509CertificateConverter
argument_list|()
operator|.
name|getCertificate
argument_list|(
name|certificateHolder
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"certFromSignedData: "
operator|+
name|certFromSignedData
argument_list|)
expr_stmt|;
name|SigUtils
operator|.
name|checkCertificateUsage
argument_list|(
name|certFromSignedData
argument_list|)
expr_stmt|;
comment|// Embedded timestamp
name|TimeStampToken
name|timeStampToken
init|=
name|SigUtils
operator|.
name|extractTimeStampTokenFromSignerInformation
argument_list|(
name|signerInformation
argument_list|)
decl_stmt|;
if|if
condition|(
name|timeStampToken
operator|!=
literal|null
condition|)
block|{
comment|// tested with QV_RCA1_RCA3_CPCPS_V4_11.pdf
comment|// https://www.quovadisglobal.com/~/media/Files/Repository/QV_RCA1_RCA3_CPCPS_V4_11.ashx
comment|// also 021496.pdf and 036351.pdf from digitalcorpora
name|SigUtils
operator|.
name|validateTimestampToken
argument_list|(
name|timeStampToken
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// TimeStampToken.getSID() is untyped
name|Collection
argument_list|<
name|X509CertificateHolder
argument_list|>
name|tstMatches
init|=
name|timeStampToken
operator|.
name|getCertificates
argument_list|()
operator|.
name|getMatches
argument_list|(
operator|(
name|Selector
argument_list|<
name|X509CertificateHolder
argument_list|>
operator|)
name|timeStampToken
operator|.
name|getSID
argument_list|()
argument_list|)
decl_stmt|;
name|X509CertificateHolder
name|tstCertHolder
init|=
name|tstMatches
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|X509Certificate
name|certFromTimeStamp
init|=
operator|new
name|JcaX509CertificateConverter
argument_list|()
operator|.
name|getCertificate
argument_list|(
name|tstCertHolder
argument_list|)
decl_stmt|;
comment|// merge both stores using a set to remove duplicates
name|HashSet
argument_list|<
name|X509CertificateHolder
argument_list|>
name|certificateHolderSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|certificateHolderSet
operator|.
name|addAll
argument_list|(
name|certificatesStore
operator|.
name|getMatches
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|certificateHolderSet
operator|.
name|addAll
argument_list|(
name|timeStampToken
operator|.
name|getCertificates
argument_list|()
operator|.
name|getMatches
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|verifyCertificateChain
argument_list|(
operator|new
name|CollectionStore
argument_list|<>
argument_list|(
name|certificateHolderSet
argument_list|)
argument_list|,
name|certFromTimeStamp
argument_list|,
name|timeStampToken
operator|.
name|getTimeStampInfo
argument_list|()
operator|.
name|getGenTime
argument_list|()
argument_list|)
expr_stmt|;
name|SigUtils
operator|.
name|checkTimeStampCertificateUsage
argument_list|(
name|certFromTimeStamp
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|sig
operator|.
name|getSignDate
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|certFromSignedData
operator|.
name|checkValidity
argument_list|(
name|sig
operator|.
name|getSignDate
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Certificate valid at signing time"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Certificate cannot be verified without signing time"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|CertificateExpiredException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Certificate expired at signing time"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CertificateNotYetValidException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Certificate not yet valid at signing time"
argument_list|)
expr_stmt|;
block|}
comment|// usually not available
if|if
condition|(
name|signerInformation
operator|.
name|getSignedAttributes
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// From SignedMailValidator.getSignatureTime()
name|Attribute
name|signingTime
init|=
name|signerInformation
operator|.
name|getSignedAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|CMSAttributes
operator|.
name|signingTime
argument_list|)
decl_stmt|;
if|if
condition|(
name|signingTime
operator|!=
literal|null
condition|)
block|{
name|Time
name|timeInstance
init|=
name|Time
operator|.
name|getInstance
argument_list|(
name|signingTime
operator|.
name|getAttrValues
argument_list|()
operator|.
name|getObjectAt
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|certFromSignedData
operator|.
name|checkValidity
argument_list|(
name|timeInstance
operator|.
name|getDate
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Certificate valid at signing time: "
operator|+
name|timeInstance
operator|.
name|getDate
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CertificateExpiredException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Certificate expired at signing time"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CertificateNotYetValidException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Certificate not yet valid at signing time"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|signerInformation
operator|.
name|verify
argument_list|(
operator|new
name|JcaSimpleSignerInfoVerifierBuilder
argument_list|()
operator|.
name|setProvider
argument_list|(
name|SecurityProvider
operator|.
name|getProvider
argument_list|()
argument_list|)
operator|.
name|build
argument_list|(
name|certFromSignedData
argument_list|)
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Signature verified"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Signature verification failed"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|CertificateVerifier
operator|.
name|isSelfSigned
argument_list|(
name|certFromSignedData
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Certificate is self-signed, LOL!"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Certificate is not self-signed"
argument_list|)
expr_stmt|;
if|if
condition|(
name|sig
operator|.
name|getSignDate
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|verifyCertificateChain
argument_list|(
name|certificatesStore
argument_list|,
name|certFromSignedData
argument_list|,
name|sig
operator|.
name|getSignDate
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Certificate cannot be verified without signing time"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|verifyCertificateChain
parameter_list|(
name|Store
argument_list|<
name|X509CertificateHolder
argument_list|>
name|certificatesStore
parameter_list|,
name|X509Certificate
name|certFromSignedData
parameter_list|,
name|Date
name|signDate
parameter_list|)
throws|throws
name|CertificateVerificationException
throws|,
name|CertificateException
block|{
comment|// Verify certificate chain (new since 10/2018)
comment|// Please post bad PDF files that succeed and
comment|// good PDF files that fail in
comment|// https://issues.apache.org/jira/browse/PDFBOX-3017
name|Collection
argument_list|<
name|X509CertificateHolder
argument_list|>
name|certificateHolders
init|=
name|certificatesStore
operator|.
name|getMatches
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|X509Certificate
argument_list|>
name|additionalCerts
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|JcaX509CertificateConverter
name|certificateConverter
init|=
operator|new
name|JcaX509CertificateConverter
argument_list|()
decl_stmt|;
for|for
control|(
name|X509CertificateHolder
name|certHolder
range|:
name|certificateHolders
control|)
block|{
name|X509Certificate
name|certificate
init|=
name|certificateConverter
operator|.
name|getCertificate
argument_list|(
name|certHolder
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|certificate
operator|.
name|equals
argument_list|(
name|certFromSignedData
argument_list|)
condition|)
block|{
name|additionalCerts
operator|.
name|add
argument_list|(
name|certificate
argument_list|)
expr_stmt|;
block|}
block|}
name|CertificateVerifier
operator|.
name|verifyCertificate
argument_list|(
name|certFromSignedData
argument_list|,
name|additionalCerts
argument_list|,
literal|true
argument_list|,
name|signDate
argument_list|)
expr_stmt|;
comment|//TODO check whether the root certificate is in our trusted list.
comment|// For the EU, get a list here:
comment|// https://ec.europa.eu/digital-single-market/en/eu-trusted-lists-trust-service-providers
comment|// ( getRootCertificates() is not helpful because these are SSL certificates)
block|}
comment|// for later use: get all root certificates. Will be used to check
comment|// whether we trust the root in the certificate chain.
specifier|private
name|Set
argument_list|<
name|X509Certificate
argument_list|>
name|getRootCertificates
parameter_list|()
throws|throws
name|GeneralSecurityException
throws|,
name|IOException
block|{
name|Set
argument_list|<
name|X509Certificate
argument_list|>
name|rootCertificates
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// https://stackoverflow.com/questions/3508050/
name|String
name|filename
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.home"
argument_list|)
operator|+
literal|"/lib/security/cacerts"
decl_stmt|;
name|KeyStore
name|keystore
decl_stmt|;
try|try
init|(
name|FileInputStream
name|is
init|=
operator|new
name|FileInputStream
argument_list|(
name|filename
argument_list|)
init|)
block|{
name|keystore
operator|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
name|KeyStore
operator|.
name|getDefaultType
argument_list|()
argument_list|)
expr_stmt|;
name|keystore
operator|.
name|load
argument_list|(
name|is
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|PKIXParameters
name|params
init|=
operator|new
name|PKIXParameters
argument_list|(
name|keystore
argument_list|)
decl_stmt|;
for|for
control|(
name|TrustAnchor
name|trustAnchor
range|:
name|params
operator|.
name|getTrustAnchors
argument_list|()
control|)
block|{
name|rootCertificates
operator|.
name|add
argument_list|(
name|trustAnchor
operator|.
name|getTrustedCert
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// https://www.oracle.com/technetwork/articles/javase/security-137537.html
try|try
block|{
name|keystore
operator|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
literal|"Windows-ROOT"
argument_list|)
expr_stmt|;
name|keystore
operator|.
name|load
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|params
operator|=
operator|new
name|PKIXParameters
argument_list|(
name|keystore
argument_list|)
expr_stmt|;
for|for
control|(
name|TrustAnchor
name|trustAnchor
range|:
name|params
operator|.
name|getTrustAnchors
argument_list|()
control|)
block|{
name|rootCertificates
operator|.
name|add
argument_list|(
name|trustAnchor
operator|.
name|getTrustedCert
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InvalidAlgorithmParameterException
decl||
name|KeyStoreException
name|ex
parameter_list|)
block|{
comment|// empty or not windows
block|}
return|return
name|rootCertificates
return|;
block|}
comment|/**      * Analyzes the DSS-Dictionary (Document Security Store) of the document. Which is used for signature validation.      * The DSS is defined in PAdES Part 4 - Long Term Validation.      *       * @param document PDDocument, to get the DSS from      */
specifier|private
name|void
name|analyseDSS
parameter_list|(
name|PDDocument
name|document
parameter_list|)
throws|throws
name|IOException
block|{
name|PDDocumentCatalog
name|catalog
init|=
name|document
operator|.
name|getDocumentCatalog
argument_list|()
decl_stmt|;
name|COSBase
name|dssElement
init|=
name|catalog
operator|.
name|getCOSObject
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
literal|"DSS"
argument_list|)
decl_stmt|;
if|if
condition|(
name|dssElement
operator|instanceof
name|COSDictionary
condition|)
block|{
name|COSDictionary
name|dss
init|=
operator|(
name|COSDictionary
operator|)
name|dssElement
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"DSS Dictionary: "
operator|+
name|dss
argument_list|)
expr_stmt|;
name|COSBase
name|certsElement
init|=
name|dss
operator|.
name|getDictionaryObject
argument_list|(
literal|"Certs"
argument_list|)
decl_stmt|;
if|if
condition|(
name|certsElement
operator|instanceof
name|COSArray
condition|)
block|{
name|printStreamsFromArray
argument_list|(
operator|(
name|COSArray
operator|)
name|certsElement
argument_list|,
literal|"Cert"
argument_list|)
expr_stmt|;
block|}
name|COSBase
name|ocspsElement
init|=
name|dss
operator|.
name|getDictionaryObject
argument_list|(
literal|"OCSPs"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ocspsElement
operator|instanceof
name|COSArray
condition|)
block|{
name|printStreamsFromArray
argument_list|(
operator|(
name|COSArray
operator|)
name|ocspsElement
argument_list|,
literal|"Ocsp"
argument_list|)
expr_stmt|;
block|}
name|COSBase
name|crlElement
init|=
name|dss
operator|.
name|getDictionaryObject
argument_list|(
literal|"CRLs"
argument_list|)
decl_stmt|;
if|if
condition|(
name|crlElement
operator|instanceof
name|COSArray
condition|)
block|{
name|printStreamsFromArray
argument_list|(
operator|(
name|COSArray
operator|)
name|crlElement
argument_list|,
literal|"CRL"
argument_list|)
expr_stmt|;
block|}
comment|// TODO: go through VRIs (which indirectly point to the DSS-Data)
block|}
block|}
comment|/**      * Go through the elements of a COSArray containing each an COSStream to print in Hex.      *       * @param elements COSArray of elements containing a COS Stream      * @param description to append on Print      * @throws IOException      */
specifier|private
name|void
name|printStreamsFromArray
parameter_list|(
name|COSArray
name|elements
parameter_list|,
name|String
name|description
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|COSBase
name|baseElem
range|:
name|elements
control|)
block|{
name|COSObject
name|streamObj
init|=
operator|(
name|COSObject
operator|)
name|baseElem
decl_stmt|;
if|if
condition|(
name|streamObj
operator|.
name|getObject
argument_list|()
operator|instanceof
name|COSStream
condition|)
block|{
name|COSStream
name|cosStream
init|=
operator|(
name|COSStream
operator|)
name|streamObj
operator|.
name|getObject
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
name|cosStream
operator|.
name|createInputStream
argument_list|()
init|)
block|{
name|byte
index|[]
name|streamBytes
init|=
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|description
operator|+
literal|" ("
operator|+
name|elements
operator|.
name|indexOf
argument_list|(
name|streamObj
argument_list|)
operator|+
literal|"): "
operator|+
name|Hex
operator|.
name|getString
argument_list|(
name|streamBytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * This will print a usage message.      */
specifier|private
specifier|static
name|void
name|usage
parameter_list|()
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"usage: java "
operator|+
name|ShowSignature
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"<password (usually empty)><inputfile>"
argument_list|)
expr_stmt|;
comment|// The password is for encrypted files and has nothing to do with the signature.
comment|// (A PDF can be both encrypted and signed)
block|}
block|}
end_class

end_unit

