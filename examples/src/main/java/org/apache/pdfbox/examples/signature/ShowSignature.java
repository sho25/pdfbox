begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|examples
operator|.
name|signature
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_comment
comment|/**  * This will read a document from the filesystem, decrypt it and do something with the signature.  * usage: java org.apache.pdfbox.examples.signature.ShowSignature&lt;password&gt;&lt;inputfile&gt;  *  * @author Ben Litchfield  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|ShowSignature
block|{
specifier|private
name|ShowSignature
parameter_list|()
block|{     }
comment|/**      * This is the entry point for the application.      *      * @param args The command-line arguments.      *      * @throws IOException If there is an error reading the file.      * @throws CertificateException      */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
throws|,
name|CertificateException
block|{
name|ShowSignature
name|show
init|=
operator|new
name|ShowSignature
argument_list|()
decl_stmt|;
name|show
operator|.
name|showSignature
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|showSignature
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
throws|,
name|CertificateException
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
name|usage
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|String
name|password
init|=
name|args
index|[
literal|0
index|]
decl_stmt|;
name|String
name|infile
init|=
name|args
index|[
literal|1
index|]
decl_stmt|;
name|PDDocument
name|document
init|=
literal|null
decl_stmt|;
try|try
block|{
name|document
operator|=
name|PDDocument
operator|.
name|load
argument_list|(
operator|new
name|File
argument_list|(
name|infile
argument_list|)
argument_list|,
name|password
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|document
operator|.
name|isEncrypted
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Warning: Document is not encrypted."
argument_list|)
expr_stmt|;
block|}
name|COSDictionary
name|trailer
init|=
name|document
operator|.
name|getDocument
argument_list|()
operator|.
name|getTrailer
argument_list|()
decl_stmt|;
name|COSDictionary
name|root
init|=
operator|(
name|COSDictionary
operator|)
name|trailer
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|ROOT
argument_list|)
decl_stmt|;
name|COSDictionary
name|acroForm
init|=
operator|(
name|COSDictionary
operator|)
name|root
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|ACRO_FORM
argument_list|)
decl_stmt|;
name|COSArray
name|fields
init|=
operator|(
name|COSArray
operator|)
name|acroForm
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|FIELDS
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|COSDictionary
name|field
init|=
operator|(
name|COSDictionary
operator|)
name|fields
operator|.
name|getObject
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|COSName
name|type
init|=
name|field
operator|.
name|getCOSName
argument_list|(
name|COSName
operator|.
name|FT
argument_list|)
decl_stmt|;
if|if
condition|(
name|COSName
operator|.
name|SIG
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|COSDictionary
name|cert
init|=
operator|(
name|COSDictionary
operator|)
name|field
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|V
argument_list|)
decl_stmt|;
if|if
condition|(
name|cert
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Certificate found"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Name="
operator|+
name|cert
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Modified="
operator|+
name|cert
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|M
argument_list|)
argument_list|)
expr_stmt|;
name|COSName
name|subFilter
init|=
operator|(
name|COSName
operator|)
name|cert
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|SUB_FILTER
argument_list|)
decl_stmt|;
if|if
condition|(
name|subFilter
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|subFilter
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"adbe.x509.rsa_sha1"
argument_list|)
condition|)
block|{
name|COSString
name|certString
init|=
operator|(
name|COSString
operator|)
name|cert
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"Cert"
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|certData
init|=
name|certString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|CertificateFactory
name|factory
init|=
name|CertificateFactory
operator|.
name|getInstance
argument_list|(
literal|"X.509"
argument_list|)
decl_stmt|;
name|ByteArrayInputStream
name|certStream
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|certData
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|?
extends|extends
name|Certificate
argument_list|>
name|certs
init|=
name|factory
operator|.
name|generateCertificates
argument_list|(
name|certStream
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"certs="
operator|+
name|certs
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|subFilter
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"adbe.pkcs7.sha1"
argument_list|)
condition|)
block|{
name|COSString
name|certString
init|=
operator|(
name|COSString
operator|)
name|cert
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|CONTENTS
argument_list|)
decl_stmt|;
name|byte
index|[]
name|certData
init|=
name|certString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|CertificateFactory
name|factory
init|=
name|CertificateFactory
operator|.
name|getInstance
argument_list|(
literal|"X.509"
argument_list|)
decl_stmt|;
name|ByteArrayInputStream
name|certStream
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|certData
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|?
extends|extends
name|Certificate
argument_list|>
name|certs
init|=
name|factory
operator|.
name|generateCertificates
argument_list|(
name|certStream
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"certs="
operator|+
name|certs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Unknown certificate type:"
operator|+
name|subFilter
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Missing subfilter for cert dictionary"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Signature found, but no certificate"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|document
operator|!=
literal|null
condition|)
block|{
name|document
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * This will print a usage message.      */
specifier|private
specifier|static
name|void
name|usage
parameter_list|()
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"usage: java org.apache.pdfbox.examples.signature.ShowSignature "
operator|+
literal|"<password><inputfile>"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

