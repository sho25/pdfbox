begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|examples
operator|.
name|pdfa
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jempbox
operator|.
name|xmp
operator|.
name|XMPMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jempbox
operator|.
name|xmp
operator|.
name|pdfa
operator|.
name|XMPSchemaPDFAId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocumentCatalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|edit
operator|.
name|PDPageContentStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDTrueTypeFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDOutputIntent
import|;
end_import

begin_comment
comment|/**  * This is an example that creates a simple PDF/A document.  *  */
end_comment

begin_class
specifier|public
class|class
name|CreatePDFA
block|{
comment|/**      * Constructor.      */
specifier|public
name|CreatePDFA
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**      * Create a simple PDF/A document.      *       * This example is based on HelloWorld example.      *       * As it is a simple case, to conform the PDF/A norm, are added :      * - the font used in the document      * - a light xmp block with only PDF identification schema (the only mandatory)      * - an output intent      *      * @param file The file to write the PDF to.      * @param message The message to write in the file.      *      * @throws Exception If something bad occurs      */
specifier|public
name|void
name|doIt
parameter_list|(
name|String
name|file
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|Exception
block|{
comment|// the document
name|PDDocument
name|doc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|doc
operator|=
operator|new
name|PDDocument
argument_list|()
expr_stmt|;
name|PDPage
name|page
init|=
operator|new
name|PDPage
argument_list|()
decl_stmt|;
name|doc
operator|.
name|addPage
argument_list|(
name|page
argument_list|)
expr_stmt|;
comment|// load the font from pdfbox.jar
name|InputStream
name|fontStream
init|=
name|CreatePDFA
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/org/apache/pdfbox/resources/ttf/ArialMT.ttf"
argument_list|)
decl_stmt|;
name|PDFont
name|font
init|=
name|PDTrueTypeFont
operator|.
name|loadTTF
argument_list|(
name|doc
argument_list|,
name|fontStream
argument_list|)
decl_stmt|;
comment|// create a page with the message where needed
name|PDPageContentStream
name|contentStream
init|=
operator|new
name|PDPageContentStream
argument_list|(
name|doc
argument_list|,
name|page
argument_list|)
decl_stmt|;
name|contentStream
operator|.
name|beginText
argument_list|()
expr_stmt|;
name|contentStream
operator|.
name|setFont
argument_list|(
name|font
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|moveTextPositionByAmount
argument_list|(
literal|100
argument_list|,
literal|700
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|drawString
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|endText
argument_list|()
expr_stmt|;
name|contentStream
operator|.
name|saveGraphicsState
argument_list|()
expr_stmt|;
name|contentStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|PDDocumentCatalog
name|cat
init|=
name|doc
operator|.
name|getDocumentCatalog
argument_list|()
decl_stmt|;
name|PDMetadata
name|metadata
init|=
operator|new
name|PDMetadata
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|cat
operator|.
name|setMetadata
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
comment|// jempbox version
name|XMPMetadata
name|xmp
init|=
operator|new
name|XMPMetadata
argument_list|()
decl_stmt|;
name|XMPSchemaPDFAId
name|pdfaid
init|=
operator|new
name|XMPSchemaPDFAId
argument_list|(
name|xmp
argument_list|)
decl_stmt|;
name|xmp
operator|.
name|addSchema
argument_list|(
name|pdfaid
argument_list|)
expr_stmt|;
name|pdfaid
operator|.
name|setConformance
argument_list|(
literal|"B"
argument_list|)
expr_stmt|;
name|pdfaid
operator|.
name|setPart
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|pdfaid
operator|.
name|setAbout
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|importXMPMetadata
argument_list|(
name|xmp
argument_list|)
expr_stmt|;
comment|// retrieve icc
comment|// this file cannot be added in PDFBox, it must be downloaded
comment|// its localization is http://www.color.org/sRGB_IEC61966-2-1_black_scaled.icc
comment|// UNIX command to retrieve :
comment|// wget -O target/sRGB_IEC61966-2-1_black_scaled.icc http://www.color.org/sRGB_IEC61966-2-1_black_scaled.icc
name|InputStream
name|colorProfile
init|=
operator|new
name|FileInputStream
argument_list|(
literal|"target/sRGB_IEC61966-2-1_black_scaled.icc"
argument_list|)
decl_stmt|;
comment|// create output intent
name|PDOutputIntent
name|oi
init|=
operator|new
name|PDOutputIntent
argument_list|(
name|doc
argument_list|,
name|colorProfile
argument_list|)
decl_stmt|;
name|oi
operator|.
name|setInfo
argument_list|(
literal|"sRGB IEC61966-2.1"
argument_list|)
expr_stmt|;
name|oi
operator|.
name|setOutputCondition
argument_list|(
literal|"sRGB IEC61966-2.1"
argument_list|)
expr_stmt|;
name|oi
operator|.
name|setOutputConditionIdentifier
argument_list|(
literal|"sRGB IEC61966-2.1"
argument_list|)
expr_stmt|;
name|oi
operator|.
name|setRegistryName
argument_list|(
literal|"http://www.color.org"
argument_list|)
expr_stmt|;
name|cat
operator|.
name|addOutputIntent
argument_list|(
name|oi
argument_list|)
expr_stmt|;
name|doc
operator|.
name|save
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
block|{
name|doc
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * This will create a hello world PDF/A document.      *<br />      * see usage() for commandline      *      * @param args Command line arguments.      */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|CreatePDFA
name|app
init|=
operator|new
name|CreatePDFA
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
name|app
operator|.
name|usage
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|app
operator|.
name|doIt
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|,
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * This will print out a message telling how to use this example.      */
specifier|private
name|void
name|usage
parameter_list|()
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"usage: "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"<output-file><Message>"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

