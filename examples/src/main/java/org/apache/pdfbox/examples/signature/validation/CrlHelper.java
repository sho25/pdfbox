begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|examples
operator|.
name|signature
operator|.
name|validation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CRLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509CRL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|jcajce
operator|.
name|provider
operator|.
name|asymmetric
operator|.
name|x509
operator|.
name|CertificateFactory
import|;
end_import

begin_comment
comment|/**  * Helper class to get CRL (Certificate revocation list) from given crlUrl and check if Certificate  * has been revoked.  *  * @author Alexis Suter  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|CrlHelper
block|{
specifier|private
name|CrlHelper
parameter_list|()
block|{     }
comment|/**      * Performs the CRL-Request and checks if the given certificate has been revoked.      *      * @param crlUrl to get the CRL from      * @param cert to be checked if it is inside the CRL      * @param issuerKey public key of the issuer certificate to verify the CRL signature      * @return CRL-Response; might be very big depending on the issuer.      * @throws GeneralSecurityException if an error occurred getting the CRL, or parsing it, or      * verifying it.      * @throws RevokedCertificateException      */
specifier|public
specifier|static
name|byte
index|[]
name|performCrlRequestAndCheck
parameter_list|(
name|String
name|crlUrl
parameter_list|,
name|X509Certificate
name|cert
parameter_list|,
name|PublicKey
name|issuerKey
parameter_list|)
throws|throws
name|RevokedCertificateException
throws|,
name|GeneralSecurityException
block|{
try|try
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|crlUrl
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|con
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
if|if
condition|(
name|con
operator|.
name|getResponseCode
argument_list|()
operator|!=
literal|200
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unsuccessful CRL request. Status: "
operator|+
name|con
operator|.
name|getResponseCode
argument_list|()
operator|+
literal|" Url: "
operator|+
name|crlUrl
argument_list|)
throw|;
block|}
name|CertificateFactory
name|certFac
init|=
operator|new
name|CertificateFactory
argument_list|()
decl_stmt|;
name|X509CRL
name|crl
decl_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
name|con
operator|.
name|getInputStream
argument_list|()
init|)
block|{
name|crl
operator|=
operator|(
name|X509CRL
operator|)
name|certFac
operator|.
name|engineGenerateCRL
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|crl
operator|.
name|verify
argument_list|(
name|issuerKey
argument_list|)
expr_stmt|;
block|}
comment|//TODO should be checked for signing time, see CRLVerifier.verifyCertificateCRLs
if|if
condition|(
name|crl
operator|.
name|isRevoked
argument_list|(
name|cert
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RevokedCertificateException
argument_list|(
literal|"The Certificate was found on the CRL and is revoked!"
argument_list|)
throw|;
block|}
return|return
name|crl
operator|.
name|getEncoded
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CRLException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

