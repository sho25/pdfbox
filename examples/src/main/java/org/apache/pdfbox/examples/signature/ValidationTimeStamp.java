begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|examples
operator|.
name|signature
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|ASN1Encodable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|ASN1EncodableVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|ASN1ObjectIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|ASN1Primitive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|DERSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|cms
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|cms
operator|.
name|AttributeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|cms
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|pkcs
operator|.
name|PKCSObjectIdentifiers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cms
operator|.
name|CMSSignedData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cms
operator|.
name|SignerInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cms
operator|.
name|SignerInformationStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|tsp
operator|.
name|TSPException
import|;
end_import

begin_comment
comment|/**  * This class wraps the TSAClient and the work that has to be done with it. Like Adding Signed  * TimeStamps to a signature, or creating a CMS timestamp attribute (with a signed timestamp)  *  * @author Others  * @author Alexis Suter  */
end_comment

begin_class
specifier|public
class|class
name|ValidationTimeStamp
block|{
specifier|private
name|TSAClient
name|tsaClient
decl_stmt|;
comment|/**      * @param tsaUrl The url where TS-Request will be done.      * @throws NoSuchAlgorithmException      * @throws MalformedURLException      */
specifier|public
name|ValidationTimeStamp
parameter_list|(
name|String
name|tsaUrl
parameter_list|)
throws|throws
name|NoSuchAlgorithmException
throws|,
name|MalformedURLException
block|{
if|if
condition|(
name|tsaUrl
operator|!=
literal|null
condition|)
block|{
name|MessageDigest
name|digest
init|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"SHA-256"
argument_list|)
decl_stmt|;
name|this
operator|.
name|tsaClient
operator|=
operator|new
name|TSAClient
argument_list|(
operator|new
name|URL
argument_list|(
name|tsaUrl
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|digest
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Creates a signed timestamp token by the given input stream.      *       * @param content InputStream of the content to sign      * @return      * @throws IOException      */
specifier|public
name|byte
index|[]
name|getTimeStampToken
parameter_list|(
name|InputStream
name|content
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|tsaClient
operator|.
name|getTimeStampToken
argument_list|(
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|content
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Extend cms signed data with TimeStamp first or to all signers      *      * @param signedData Generated CMS signed data      * @return CMSSignedData Extended CMS signed data      * @throws IOException      * @throws org.bouncycastle.tsp.TSPException      */
specifier|public
name|CMSSignedData
name|addSignedTimeStamp
parameter_list|(
name|CMSSignedData
name|signedData
parameter_list|)
throws|throws
name|IOException
throws|,
name|TSPException
block|{
name|SignerInformationStore
name|signerStore
init|=
name|signedData
operator|.
name|getSignerInfos
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SignerInformation
argument_list|>
name|newSigners
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|SignerInformation
name|signer
range|:
name|signerStore
operator|.
name|getSigners
argument_list|()
control|)
block|{
comment|// This adds a timestamp to every signer (into his unsigend attributes) in the signature.
name|newSigners
operator|.
name|add
argument_list|(
name|signTimeStamp
argument_list|(
name|signer
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Because new SignerInformation is created, new SignerInfoStore has to be created
comment|// and also be replaced in signedData. Which creates a new signedData object.
return|return
name|CMSSignedData
operator|.
name|replaceSigners
argument_list|(
name|signedData
argument_list|,
operator|new
name|SignerInformationStore
argument_list|(
name|newSigners
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Extend CMS Signer Information with the TimeStampToken into the unsigned Attributes.      *      * @param signer information about signer      * @return information about SignerInformation      */
specifier|private
name|SignerInformation
name|signTimeStamp
parameter_list|(
name|SignerInformation
name|signer
parameter_list|)
throws|throws
name|IOException
throws|,
name|TSPException
block|{
name|AttributeTable
name|unsignedAttributes
init|=
name|signer
operator|.
name|getUnsignedAttributes
argument_list|()
decl_stmt|;
name|ASN1EncodableVector
name|vector
init|=
operator|new
name|ASN1EncodableVector
argument_list|()
decl_stmt|;
if|if
condition|(
name|unsignedAttributes
operator|!=
literal|null
condition|)
block|{
name|vector
operator|=
name|unsignedAttributes
operator|.
name|toASN1EncodableVector
argument_list|()
expr_stmt|;
block|}
name|byte
index|[]
name|token
init|=
name|tsaClient
operator|.
name|getTimeStampToken
argument_list|(
name|signer
operator|.
name|getSignature
argument_list|()
argument_list|)
decl_stmt|;
name|ASN1ObjectIdentifier
name|oid
init|=
name|PKCSObjectIdentifiers
operator|.
name|id_aa_signatureTimeStampToken
decl_stmt|;
name|ASN1Encodable
name|signatureTimeStamp
init|=
operator|new
name|Attribute
argument_list|(
name|oid
argument_list|,
operator|new
name|DERSet
argument_list|(
name|ASN1Primitive
operator|.
name|fromByteArray
argument_list|(
name|token
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|vector
operator|.
name|add
argument_list|(
name|signatureTimeStamp
argument_list|)
expr_stmt|;
name|Attributes
name|signedAttributes
init|=
operator|new
name|Attributes
argument_list|(
name|vector
argument_list|)
decl_stmt|;
comment|// There is no other way changing the unsigned attributes of the signer information.
comment|// result is never null, new SignerInformation always returned,
comment|// see source code of replaceUnsignedAttributes
return|return
name|SignerInformation
operator|.
name|replaceUnsignedAttributes
argument_list|(
name|signer
argument_list|,
operator|new
name|AttributeTable
argument_list|(
name|signedAttributes
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

