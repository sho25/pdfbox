begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|examples
operator|.
name|interactive
operator|.
name|form
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|Rectangle2D
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDAppearanceContentStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDRectangle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDType1Font
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDColor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDDeviceRGB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAnnotationWidget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAppearanceCharacteristicsDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAppearanceDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAppearanceEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAppearanceStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDBorderStyleDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|form
operator|.
name|PDAcroForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|form
operator|.
name|PDCheckBox
import|;
end_import

begin_comment
comment|/**  * Example to create a checkbox.  *  * @author Tilman Hausherr  */
end_comment

begin_class
specifier|public
class|class
name|CreateCheckBox
block|{
specifier|private
name|CreateCheckBox
parameter_list|()
block|{     }
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|PDDocument
name|document
init|=
operator|new
name|PDDocument
argument_list|()
init|)
block|{
name|PDPage
name|page
init|=
operator|new
name|PDPage
argument_list|()
decl_stmt|;
name|document
operator|.
name|addPage
argument_list|(
name|page
argument_list|)
expr_stmt|;
name|PDAcroForm
name|acroForm
init|=
operator|new
name|PDAcroForm
argument_list|(
name|document
argument_list|)
decl_stmt|;
name|document
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|setAcroForm
argument_list|(
name|acroForm
argument_list|)
expr_stmt|;
comment|// if you want to see what Adobe does, activate this, open with Adobe
comment|// save the file, and then open it with PDFDebugger
comment|//acroForm.setNeedAppearances(true)
name|float
name|x
init|=
literal|50
decl_stmt|;
name|float
name|y
init|=
name|page
operator|.
name|getMediaBox
argument_list|()
operator|.
name|getHeight
argument_list|()
operator|-
literal|50
decl_stmt|;
name|PDRectangle
name|rect
init|=
operator|new
name|PDRectangle
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
literal|20
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|PDCheckBox
name|checkbox
init|=
operator|new
name|PDCheckBox
argument_list|(
name|acroForm
argument_list|)
decl_stmt|;
name|checkbox
operator|.
name|setPartialName
argument_list|(
literal|"MyCheckBox"
argument_list|)
expr_stmt|;
name|PDAnnotationWidget
name|widget
init|=
name|checkbox
operator|.
name|getWidgets
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|widget
operator|.
name|setPage
argument_list|(
name|page
argument_list|)
expr_stmt|;
name|widget
operator|.
name|setRectangle
argument_list|(
name|rect
argument_list|)
expr_stmt|;
name|widget
operator|.
name|setPrinted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|PDAppearanceCharacteristicsDictionary
name|appearanceCharacteristics
init|=
operator|new
name|PDAppearanceCharacteristicsDictionary
argument_list|(
operator|new
name|COSDictionary
argument_list|()
argument_list|)
decl_stmt|;
name|appearanceCharacteristics
operator|.
name|setBorderColour
argument_list|(
operator|new
name|PDColor
argument_list|(
operator|new
name|float
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|0
block|}
argument_list|,
name|PDDeviceRGB
operator|.
name|INSTANCE
argument_list|)
argument_list|)
expr_stmt|;
name|appearanceCharacteristics
operator|.
name|setBackground
argument_list|(
operator|new
name|PDColor
argument_list|(
operator|new
name|float
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|0
block|}
argument_list|,
name|PDDeviceRGB
operator|.
name|INSTANCE
argument_list|)
argument_list|)
expr_stmt|;
comment|// 8 = cross; 4 = checkmark; H = star; u = diamond; n = square, l = dot
name|appearanceCharacteristics
operator|.
name|setNormalCaption
argument_list|(
literal|"4"
argument_list|)
expr_stmt|;
name|widget
operator|.
name|setAppearanceCharacteristics
argument_list|(
name|appearanceCharacteristics
argument_list|)
expr_stmt|;
name|PDBorderStyleDictionary
name|borderStyleDictionary
init|=
operator|new
name|PDBorderStyleDictionary
argument_list|()
decl_stmt|;
name|borderStyleDictionary
operator|.
name|setWidth
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|borderStyleDictionary
operator|.
name|setStyle
argument_list|(
name|PDBorderStyleDictionary
operator|.
name|STYLE_SOLID
argument_list|)
expr_stmt|;
name|widget
operator|.
name|setBorderStyle
argument_list|(
name|borderStyleDictionary
argument_list|)
expr_stmt|;
name|PDAppearanceDictionary
name|ap
init|=
operator|new
name|PDAppearanceDictionary
argument_list|()
decl_stmt|;
name|widget
operator|.
name|setAppearance
argument_list|(
name|ap
argument_list|)
expr_stmt|;
name|PDAppearanceEntry
name|normalAppearance
init|=
name|ap
operator|.
name|getNormalAppearance
argument_list|()
decl_stmt|;
name|COSDictionary
name|normalAppearanceDict
init|=
name|normalAppearance
operator|.
name|getCOSObject
argument_list|()
decl_stmt|;
name|normalAppearanceDict
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|Off
argument_list|,
name|createRadioButtonAppearanceStream
argument_list|(
name|document
argument_list|,
name|widget
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|normalAppearanceDict
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|YES
argument_list|,
name|createRadioButtonAppearanceStream
argument_list|(
name|document
argument_list|,
name|widget
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// If we ever decide to implement a /D (down) appearance, just
comment|// replace the background colors c with c * 0.75
name|page
operator|.
name|getAnnotations
argument_list|()
operator|.
name|add
argument_list|(
name|checkbox
operator|.
name|getWidgets
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|acroForm
operator|.
name|getFields
argument_list|()
operator|.
name|add
argument_list|(
name|checkbox
argument_list|)
expr_stmt|;
name|checkbox
operator|.
name|check
argument_list|()
expr_stmt|;
name|document
operator|.
name|save
argument_list|(
literal|"CheckBoxSample.pdf"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|PDAppearanceStream
name|createRadioButtonAppearanceStream
parameter_list|(
specifier|final
name|PDDocument
name|document
parameter_list|,
name|PDAnnotationWidget
name|widget
parameter_list|,
name|boolean
name|on
parameter_list|)
throws|throws
name|IOException
block|{
name|PDRectangle
name|rect
init|=
name|widget
operator|.
name|getRectangle
argument_list|()
decl_stmt|;
name|PDAppearanceCharacteristicsDictionary
name|appearanceCharacteristics
decl_stmt|;
name|PDAppearanceStream
name|yesAP
init|=
operator|new
name|PDAppearanceStream
argument_list|(
name|document
argument_list|)
decl_stmt|;
name|yesAP
operator|.
name|setBBox
argument_list|(
operator|new
name|PDRectangle
argument_list|(
name|rect
operator|.
name|getWidth
argument_list|()
argument_list|,
name|rect
operator|.
name|getHeight
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|yesAP
operator|.
name|setResources
argument_list|(
operator|new
name|PDResources
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|PDAppearanceContentStream
name|yesAPCS
init|=
operator|new
name|PDAppearanceContentStream
argument_list|(
name|yesAP
argument_list|)
init|)
block|{
name|appearanceCharacteristics
operator|=
name|widget
operator|.
name|getAppearanceCharacteristics
argument_list|()
expr_stmt|;
name|PDColor
name|backgroundColor
init|=
name|appearanceCharacteristics
operator|.
name|getBackground
argument_list|()
decl_stmt|;
name|PDColor
name|borderColor
init|=
name|appearanceCharacteristics
operator|.
name|getBorderColour
argument_list|()
decl_stmt|;
name|float
name|lineWidth
init|=
name|getLineWidth
argument_list|(
name|widget
argument_list|)
decl_stmt|;
name|yesAPCS
operator|.
name|setBorderLine
argument_list|(
name|lineWidth
argument_list|,
name|widget
operator|.
name|getBorderStyle
argument_list|()
argument_list|,
name|widget
operator|.
name|getBorder
argument_list|()
argument_list|)
expr_stmt|;
name|yesAPCS
operator|.
name|setNonStrokingColor
argument_list|(
name|backgroundColor
argument_list|)
expr_stmt|;
name|yesAPCS
operator|.
name|addRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|rect
operator|.
name|getWidth
argument_list|()
argument_list|,
name|rect
operator|.
name|getHeight
argument_list|()
argument_list|)
expr_stmt|;
name|yesAPCS
operator|.
name|fill
argument_list|()
expr_stmt|;
name|yesAPCS
operator|.
name|setStrokingColor
argument_list|(
name|borderColor
argument_list|)
expr_stmt|;
name|yesAPCS
operator|.
name|addRect
argument_list|(
name|lineWidth
operator|/
literal|2
argument_list|,
name|lineWidth
operator|/
literal|2
argument_list|,
name|rect
operator|.
name|getWidth
argument_list|()
operator|-
name|lineWidth
argument_list|,
name|rect
operator|.
name|getHeight
argument_list|()
operator|-
name|lineWidth
argument_list|)
expr_stmt|;
name|yesAPCS
operator|.
name|stroke
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|on
condition|)
block|{
return|return
name|yesAP
return|;
block|}
name|yesAPCS
operator|.
name|addRect
argument_list|(
name|lineWidth
argument_list|,
name|lineWidth
argument_list|,
name|rect
operator|.
name|getWidth
argument_list|()
operator|-
name|lineWidth
operator|*
literal|2
argument_list|,
name|rect
operator|.
name|getHeight
argument_list|()
operator|-
name|lineWidth
operator|*
literal|2
argument_list|)
expr_stmt|;
name|yesAPCS
operator|.
name|clip
argument_list|()
expr_stmt|;
name|String
name|normalCaption
init|=
name|appearanceCharacteristics
operator|.
name|getNormalCaption
argument_list|()
decl_stmt|;
if|if
condition|(
name|normalCaption
operator|==
literal|null
condition|)
block|{
name|normalCaption
operator|=
literal|"4"
expr_stmt|;
comment|// Adobe behaviour
block|}
if|if
condition|(
literal|"8"
operator|.
name|equals
argument_list|(
name|normalCaption
argument_list|)
condition|)
block|{
comment|// Adobe paints a cross instead of using the Zapf Dingbats cross symbol
name|yesAPCS
operator|.
name|setStrokingColor
argument_list|(
literal|0f
argument_list|)
expr_stmt|;
name|yesAPCS
operator|.
name|moveTo
argument_list|(
name|lineWidth
operator|*
literal|2
argument_list|,
name|rect
operator|.
name|getHeight
argument_list|()
operator|-
name|lineWidth
operator|*
literal|2
argument_list|)
expr_stmt|;
name|yesAPCS
operator|.
name|lineTo
argument_list|(
name|rect
operator|.
name|getWidth
argument_list|()
operator|-
name|lineWidth
operator|*
literal|2
argument_list|,
name|lineWidth
operator|*
literal|2
argument_list|)
expr_stmt|;
name|yesAPCS
operator|.
name|moveTo
argument_list|(
name|rect
operator|.
name|getWidth
argument_list|()
operator|-
name|lineWidth
operator|*
literal|2
argument_list|,
name|rect
operator|.
name|getHeight
argument_list|()
operator|-
name|lineWidth
operator|*
literal|2
argument_list|)
expr_stmt|;
name|yesAPCS
operator|.
name|lineTo
argument_list|(
name|lineWidth
operator|*
literal|2
argument_list|,
name|lineWidth
operator|*
literal|2
argument_list|)
expr_stmt|;
name|yesAPCS
operator|.
name|stroke
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// The caption is not unicode, but the Zapf Dingbats code in the PDF
comment|// Thus convert it back to unicode
comment|// Assume that only the first character is used.
name|String
name|name
init|=
name|PDType1Font
operator|.
name|ZAPF_DINGBATS
operator|.
name|codeToName
argument_list|(
name|normalCaption
operator|.
name|codePointAt
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|unicode
init|=
name|PDType1Font
operator|.
name|ZAPF_DINGBATS
operator|.
name|getGlyphList
argument_list|()
operator|.
name|toUnicode
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Rectangle2D
name|bounds
init|=
name|PDType1Font
operator|.
name|ZAPF_DINGBATS
operator|.
name|getPath
argument_list|(
name|name
argument_list|)
operator|.
name|getBounds2D
argument_list|()
decl_stmt|;
name|float
name|size
init|=
operator|(
name|float
operator|)
name|Math
operator|.
name|min
argument_list|(
name|bounds
operator|.
name|getWidth
argument_list|()
argument_list|,
name|bounds
operator|.
name|getHeight
argument_list|()
argument_list|)
operator|/
literal|1000
decl_stmt|;
comment|// assume that checkmark has square size
comment|// the calculations approximate what Adobe is doing, i.e. put the glyph in the middle
name|float
name|fontSize
init|=
operator|(
name|rect
operator|.
name|getWidth
argument_list|()
operator|-
name|lineWidth
operator|*
literal|2
operator|)
operator|/
name|size
operator|*
literal|0.6666f
decl_stmt|;
name|float
name|xOffset
init|=
call|(
name|float
call|)
argument_list|(
name|rect
operator|.
name|getWidth
argument_list|()
operator|-
operator|(
name|bounds
operator|.
name|getWidth
argument_list|()
operator|)
operator|/
literal|1000
operator|*
name|fontSize
argument_list|)
operator|/
literal|2
decl_stmt|;
name|xOffset
operator|-=
name|bounds
operator|.
name|getX
argument_list|()
operator|/
literal|1000
operator|*
name|fontSize
expr_stmt|;
name|float
name|yOffset
init|=
call|(
name|float
call|)
argument_list|(
name|rect
operator|.
name|getHeight
argument_list|()
operator|-
operator|(
name|bounds
operator|.
name|getHeight
argument_list|()
operator|)
operator|/
literal|1000
operator|*
name|fontSize
argument_list|)
operator|/
literal|2
decl_stmt|;
name|yOffset
operator|-=
name|bounds
operator|.
name|getY
argument_list|()
operator|/
literal|1000
operator|*
name|fontSize
expr_stmt|;
name|yesAPCS
operator|.
name|setNonStrokingColor
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|yesAPCS
operator|.
name|beginText
argument_list|()
expr_stmt|;
name|yesAPCS
operator|.
name|setFont
argument_list|(
name|PDType1Font
operator|.
name|ZAPF_DINGBATS
argument_list|,
name|fontSize
argument_list|)
expr_stmt|;
name|yesAPCS
operator|.
name|newLineAtOffset
argument_list|(
name|xOffset
argument_list|,
name|yOffset
argument_list|)
expr_stmt|;
name|yesAPCS
operator|.
name|showText
argument_list|(
name|unicode
argument_list|)
expr_stmt|;
name|yesAPCS
operator|.
name|endText
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|yesAP
return|;
block|}
specifier|static
name|float
name|getLineWidth
parameter_list|(
name|PDAnnotationWidget
name|widget
parameter_list|)
block|{
name|PDBorderStyleDictionary
name|bs
init|=
name|widget
operator|.
name|getBorderStyle
argument_list|()
decl_stmt|;
if|if
condition|(
name|bs
operator|!=
literal|null
condition|)
block|{
return|return
name|bs
operator|.
name|getWidth
argument_list|()
return|;
block|}
return|return
literal|1
return|;
block|}
block|}
end_class

end_unit

