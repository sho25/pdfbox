begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|examples
operator|.
name|printing
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|print
operator|.
name|Book
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|print
operator|.
name|PageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|print
operator|.
name|Paper
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|print
operator|.
name|PrinterException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|print
operator|.
name|PrinterJob
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|print
operator|.
name|attribute
operator|.
name|HashPrintRequestAttributeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|print
operator|.
name|attribute
operator|.
name|PrintRequestAttributeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|print
operator|.
name|attribute
operator|.
name|standard
operator|.
name|PageRanges
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|print
operator|.
name|attribute
operator|.
name|standard
operator|.
name|Sides
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|viewerpreferences
operator|.
name|PDViewerPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|printing
operator|.
name|PDFPageable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|printing
operator|.
name|PDFPrintable
import|;
end_import

begin_comment
comment|/**  * Examples of various different ways to print PDFs using PDFBox.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|Printing
block|{
specifier|private
name|Printing
parameter_list|()
block|{     }
comment|/**      * Entry point.      */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|args
index|[]
parameter_list|)
throws|throws
name|PrinterException
throws|,
name|IOException
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"usage: java "
operator|+
name|Printing
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"<input>"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|filename
init|=
name|args
index|[
literal|0
index|]
decl_stmt|;
try|try
init|(
name|PDDocument
name|document
init|=
name|PDDocument
operator|.
name|load
argument_list|(
operator|new
name|File
argument_list|(
name|filename
argument_list|)
argument_list|)
init|)
block|{
comment|// choose your printing method:
name|print
argument_list|(
name|document
argument_list|)
expr_stmt|;
comment|//printWithAttributes(document);
comment|//printWithDialog(document);
comment|//printWithDialogAndAttributes(document);
comment|//printWithPaper(document);
block|}
block|}
comment|/**      * Prints the document at its actual size. This is the recommended way to print.      */
specifier|private
specifier|static
name|void
name|print
parameter_list|(
name|PDDocument
name|document
parameter_list|)
throws|throws
name|PrinterException
block|{
name|PrinterJob
name|job
init|=
name|PrinterJob
operator|.
name|getPrinterJob
argument_list|()
decl_stmt|;
name|job
operator|.
name|setPageable
argument_list|(
operator|new
name|PDFPageable
argument_list|(
name|document
argument_list|)
argument_list|)
expr_stmt|;
name|job
operator|.
name|print
argument_list|()
expr_stmt|;
block|}
comment|/**      * Prints using custom PrintRequestAttribute values.      */
specifier|private
specifier|static
name|void
name|printWithAttributes
parameter_list|(
name|PDDocument
name|document
parameter_list|)
throws|throws
name|PrinterException
block|{
name|PrinterJob
name|job
init|=
name|PrinterJob
operator|.
name|getPrinterJob
argument_list|()
decl_stmt|;
name|job
operator|.
name|setPageable
argument_list|(
operator|new
name|PDFPageable
argument_list|(
name|document
argument_list|)
argument_list|)
expr_stmt|;
name|PrintRequestAttributeSet
name|attr
init|=
operator|new
name|HashPrintRequestAttributeSet
argument_list|()
decl_stmt|;
name|attr
operator|.
name|add
argument_list|(
operator|new
name|PageRanges
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// pages 1 to 1
name|job
operator|.
name|print
argument_list|(
name|attr
argument_list|)
expr_stmt|;
block|}
comment|/**      * Prints with a print preview dialog.      */
specifier|private
specifier|static
name|void
name|printWithDialog
parameter_list|(
name|PDDocument
name|document
parameter_list|)
throws|throws
name|PrinterException
block|{
name|PrinterJob
name|job
init|=
name|PrinterJob
operator|.
name|getPrinterJob
argument_list|()
decl_stmt|;
name|job
operator|.
name|setPageable
argument_list|(
operator|new
name|PDFPageable
argument_list|(
name|document
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|job
operator|.
name|printDialog
argument_list|()
condition|)
block|{
name|job
operator|.
name|print
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Prints with a print preview dialog and custom PrintRequestAttribute values.      */
specifier|private
specifier|static
name|void
name|printWithDialogAndAttributes
parameter_list|(
name|PDDocument
name|document
parameter_list|)
throws|throws
name|PrinterException
block|{
name|PrinterJob
name|job
init|=
name|PrinterJob
operator|.
name|getPrinterJob
argument_list|()
decl_stmt|;
name|job
operator|.
name|setPageable
argument_list|(
operator|new
name|PDFPageable
argument_list|(
name|document
argument_list|)
argument_list|)
expr_stmt|;
name|PrintRequestAttributeSet
name|attr
init|=
operator|new
name|HashPrintRequestAttributeSet
argument_list|()
decl_stmt|;
name|attr
operator|.
name|add
argument_list|(
operator|new
name|PageRanges
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// pages 1 to 1
name|PDViewerPreferences
name|vp
init|=
name|document
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|getViewerPreferences
argument_list|()
decl_stmt|;
if|if
condition|(
name|vp
operator|!=
literal|null
operator|&&
name|vp
operator|.
name|getDuplex
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|dp
init|=
name|vp
operator|.
name|getDuplex
argument_list|()
decl_stmt|;
if|if
condition|(
name|PDViewerPreferences
operator|.
name|DUPLEX
operator|.
name|DuplexFlipLongEdge
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|dp
argument_list|)
condition|)
block|{
name|attr
operator|.
name|add
argument_list|(
name|Sides
operator|.
name|TWO_SIDED_LONG_EDGE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|PDViewerPreferences
operator|.
name|DUPLEX
operator|.
name|DuplexFlipShortEdge
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|dp
argument_list|)
condition|)
block|{
name|attr
operator|.
name|add
argument_list|(
name|Sides
operator|.
name|TWO_SIDED_SHORT_EDGE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|PDViewerPreferences
operator|.
name|DUPLEX
operator|.
name|Simplex
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|dp
argument_list|)
condition|)
block|{
name|attr
operator|.
name|add
argument_list|(
name|Sides
operator|.
name|ONE_SIDED
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|job
operator|.
name|printDialog
argument_list|(
name|attr
argument_list|)
condition|)
block|{
name|job
operator|.
name|print
argument_list|(
name|attr
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Prints using a custom page size and custom margins.      */
specifier|private
specifier|static
name|void
name|printWithPaper
parameter_list|(
name|PDDocument
name|document
parameter_list|)
throws|throws
name|PrinterException
block|{
name|PrinterJob
name|job
init|=
name|PrinterJob
operator|.
name|getPrinterJob
argument_list|()
decl_stmt|;
name|job
operator|.
name|setPageable
argument_list|(
operator|new
name|PDFPageable
argument_list|(
name|document
argument_list|)
argument_list|)
expr_stmt|;
comment|// define custom paper
name|Paper
name|paper
init|=
operator|new
name|Paper
argument_list|()
decl_stmt|;
name|paper
operator|.
name|setSize
argument_list|(
literal|306
argument_list|,
literal|396
argument_list|)
expr_stmt|;
comment|// 1/72 inch
name|paper
operator|.
name|setImageableArea
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|paper
operator|.
name|getWidth
argument_list|()
argument_list|,
name|paper
operator|.
name|getHeight
argument_list|()
argument_list|)
expr_stmt|;
comment|// no margins
comment|// custom page format
name|PageFormat
name|pageFormat
init|=
operator|new
name|PageFormat
argument_list|()
decl_stmt|;
name|pageFormat
operator|.
name|setPaper
argument_list|(
name|paper
argument_list|)
expr_stmt|;
comment|// override the page format
name|Book
name|book
init|=
operator|new
name|Book
argument_list|()
decl_stmt|;
comment|// append all pages
name|book
operator|.
name|append
argument_list|(
operator|new
name|PDFPrintable
argument_list|(
name|document
argument_list|)
argument_list|,
name|pageFormat
argument_list|,
name|document
operator|.
name|getNumberOfPages
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|setPageable
argument_list|(
name|book
argument_list|)
expr_stmt|;
name|job
operator|.
name|print
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

