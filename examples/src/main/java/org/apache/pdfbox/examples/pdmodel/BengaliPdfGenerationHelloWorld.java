begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|examples
operator|.
name|pdmodel
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPageContentStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDType0Font
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|image
operator|.
name|PDImageXObject
import|;
end_import

begin_comment
comment|/**  * Inspired from<a href=  * "https://svn.apache.org/viewvc/pdfbox/trunk/examples/src/main/java/org/apache/pdfbox/examples/pdmodel/HelloWorldTTF.java?view=markup">PdfBox  * Example</a>. This attempts to correctly demonstrate to what extent Bengali text rendering is  * supported. First, we render some text, and then embed an image with the correct text displayed on  * the next page.  *  * @author Palash Ray  *  */
end_comment

begin_class
specifier|public
class|class
name|BengaliPdfGenerationHelloWorld
block|{
specifier|private
name|BengaliPdfGenerationHelloWorld
parameter_list|()
block|{             }
comment|/**      * The unicode of this is given below:      *       *<pre>      * \u0986\u09ae\u09bf  \u0995\u09cb\u09a8 \u09aa\u09a5\u09c7  \u0995\u09cd\u09b7\u09c0\u09b0\u09c7\u09b0 \u09b7\u09a8\u09cd\u09a1  \u09aa\u09c1\u09a4\u09c1\u09b2 \u09b0\u09c1\u09aa\u09cb  \u0997\u0999\u09cd\u0997\u09be \u098b\u09b7\u09bf      *</pre>      *       */
specifier|private
specifier|static
specifier|final
name|String
name|BANGLA_TEXT_1
init|=
literal|"আমি কোন পথে ক্ষীরের লক্ষ্মী ষন্ড পুতুল রুপো গঙ্গা ঋষি"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BANGLA_TEXT_2
init|=
literal|"দ্রুত গাঢ় শেয়াল অলস কুকুর জুড়ে জাম্প ধুর্ত  হঠাৎ ভাঙেনি মৌলিক ঐশি দৈ"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BANGLA_TEXT_3
init|=
literal|"ঋষি কল্লোল ব্যাস নির্ভয় "
decl_stmt|;
static|static
block|{
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.version"
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"1.8"
argument_list|)
condition|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"sun.java2d.cmm"
argument_list|,
literal|"sun.java2d.cmm.kcms.KcmsServiceProvider"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"usage: "
operator|+
name|BengaliPdfGenerationHelloWorld
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"<output-file> "
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|filename
init|=
name|args
index|[
literal|0
index|]
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"The generated pdf filename is: "
operator|+
name|filename
argument_list|)
expr_stmt|;
try|try
init|(
name|PDDocument
name|doc
init|=
operator|new
name|PDDocument
argument_list|()
init|)
block|{
name|PDPage
name|page1
init|=
operator|new
name|PDPage
argument_list|()
decl_stmt|;
name|doc
operator|.
name|addPage
argument_list|(
name|page1
argument_list|)
expr_stmt|;
name|PDFont
name|font
init|=
name|PDType0Font
operator|.
name|load
argument_list|(
name|doc
argument_list|,
name|BengaliPdfGenerationHelloWorld
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/org/apache/pdfbox/resources/ttf/Lohit-Bengali.ttf"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
init|(
name|PDPageContentStream
name|contents
init|=
operator|new
name|PDPageContentStream
argument_list|(
name|doc
argument_list|,
name|page1
argument_list|)
init|)
block|{
name|contents
operator|.
name|beginText
argument_list|()
expr_stmt|;
name|contents
operator|.
name|setFont
argument_list|(
name|font
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|contents
operator|.
name|newLineAtOffset
argument_list|(
literal|10
argument_list|,
literal|750
argument_list|)
expr_stmt|;
name|contents
operator|.
name|showText
argument_list|(
name|BANGLA_TEXT_1
argument_list|)
expr_stmt|;
name|contents
operator|.
name|newLineAtOffset
argument_list|(
literal|0
argument_list|,
operator|-
literal|50
argument_list|)
expr_stmt|;
name|contents
operator|.
name|showText
argument_list|(
name|BANGLA_TEXT_2
argument_list|)
expr_stmt|;
name|contents
operator|.
name|newLineAtOffset
argument_list|(
literal|0
argument_list|,
operator|-
literal|30
argument_list|)
expr_stmt|;
name|contents
operator|.
name|showText
argument_list|(
name|BANGLA_TEXT_3
argument_list|)
expr_stmt|;
name|contents
operator|.
name|endText
argument_list|()
expr_stmt|;
name|PDImageXObject
name|pdImage
init|=
name|PDImageXObject
operator|.
name|createFromFile
argument_list|(
name|BengaliPdfGenerationHelloWorld
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"/org/apache/pdfbox/resources/ttf/bengali-correct-text.png"
argument_list|)
comment|// getFile() doesn't work if there is a space in the path
operator|.
name|toURI
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|contents
operator|.
name|drawImage
argument_list|(
name|pdImage
argument_list|,
literal|0
argument_list|,
literal|300
argument_list|,
name|pdImage
operator|.
name|getWidth
argument_list|()
argument_list|,
name|pdImage
operator|.
name|getHeight
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|doc
operator|.
name|save
argument_list|(
name|filename
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

