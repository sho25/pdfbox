begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|examples
operator|.
name|pdmodel
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPageContentStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDRectangle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDType0Font
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|Charsets
import|;
end_import

begin_comment
comment|/**  * Inspired from<a href=  * "https://svn.apache.org/viewvc/pdfbox/trunk/examples/src/main/java/org/apache/pdfbox/examples/pdmodel/HelloWorldTTF.java?view=markup">PdfBox  * Example</a>. This attempts to correctly demonstrate to what extent Bengali text rendering is  * supported. We read large amount of text from a file and try to render it properly.  *  * @author Palash Ray  *  */
end_comment

begin_class
specifier|public
class|class
name|BengaliPdfGenerationHelloWorld
block|{
specifier|private
specifier|static
specifier|final
name|int
name|LINE_GAP
init|=
literal|5
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LOHIT_BENGALI_TTF
init|=
literal|"/org/apache/pdfbox/resources/ttf/Lohit-Bengali.ttf"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEXT_SOURCE_FILE
init|=
literal|"/org/apache/pdfbox/resources/ttf/bengali-samples.txt"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|FONT_SIZE
init|=
literal|20
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MARGIN
init|=
literal|20
decl_stmt|;
specifier|private
name|BengaliPdfGenerationHelloWorld
parameter_list|()
block|{     }
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"usage: "
operator|+
name|BengaliPdfGenerationHelloWorld
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"<output-file> "
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|filename
init|=
name|args
index|[
literal|0
index|]
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"The generated pdf filename is: "
operator|+
name|filename
argument_list|)
expr_stmt|;
try|try
init|(
name|PDDocument
name|doc
init|=
operator|new
name|PDDocument
argument_list|()
init|)
block|{
name|PDFont
name|font
init|=
name|PDType0Font
operator|.
name|load
argument_list|(
name|doc
argument_list|,
name|BengaliPdfGenerationHelloWorld
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|LOHIT_BENGALI_TTF
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|PDRectangle
name|rectangle
init|=
name|getPageSize
argument_list|()
decl_stmt|;
name|float
name|workablePageWidth
init|=
name|rectangle
operator|.
name|getWidth
argument_list|()
operator|-
literal|2
operator|*
name|MARGIN
decl_stmt|;
name|float
name|workablePageHeight
init|=
name|rectangle
operator|.
name|getHeight
argument_list|()
operator|-
literal|2
operator|*
name|MARGIN
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|pagedTexts
init|=
name|getReAlignedTextBasedOnPageHeight
argument_list|(
name|getReAlignedTextBasedOnPageWidth
argument_list|(
name|getBengaliTextFromFile
argument_list|()
argument_list|,
name|font
argument_list|,
name|workablePageWidth
argument_list|)
argument_list|,
name|font
argument_list|,
name|workablePageHeight
argument_list|)
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|String
argument_list|>
name|linesForPage
range|:
name|pagedTexts
control|)
block|{
name|PDPage
name|page
init|=
operator|new
name|PDPage
argument_list|(
name|getPageSize
argument_list|()
argument_list|)
decl_stmt|;
name|doc
operator|.
name|addPage
argument_list|(
name|page
argument_list|)
expr_stmt|;
try|try
init|(
name|PDPageContentStream
name|contents
init|=
operator|new
name|PDPageContentStream
argument_list|(
name|doc
argument_list|,
name|page
argument_list|)
init|)
block|{
name|contents
operator|.
name|beginText
argument_list|()
expr_stmt|;
name|contents
operator|.
name|setFont
argument_list|(
name|font
argument_list|,
name|FONT_SIZE
argument_list|)
expr_stmt|;
name|contents
operator|.
name|newLineAtOffset
argument_list|(
name|rectangle
operator|.
name|getLowerLeftX
argument_list|()
operator|+
name|MARGIN
argument_list|,
name|rectangle
operator|.
name|getUpperRightY
argument_list|()
operator|-
name|MARGIN
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|line
range|:
name|linesForPage
control|)
block|{
name|contents
operator|.
name|showText
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|contents
operator|.
name|newLineAtOffset
argument_list|(
literal|0
argument_list|,
operator|-
operator|(
name|FONT_SIZE
operator|+
name|LINE_GAP
operator|)
argument_list|)
expr_stmt|;
block|}
name|contents
operator|.
name|endText
argument_list|()
expr_stmt|;
block|}
block|}
name|doc
operator|.
name|save
argument_list|(
name|filename
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getReAlignedTextBasedOnPageHeight
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|originalLines
parameter_list|,
name|PDFont
name|font
parameter_list|,
name|float
name|workablePageHeight
parameter_list|)
block|{
specifier|final
name|float
name|newLineHeight
init|=
name|font
operator|.
name|getFontDescriptor
argument_list|()
operator|.
name|getFontBoundingBox
argument_list|()
operator|.
name|getHeight
argument_list|()
operator|/
literal|1000
operator|*
name|FONT_SIZE
operator|+
name|LINE_GAP
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|realignedTexts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|float
name|consumedHeight
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|linesInAPage
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|line
range|:
name|originalLines
control|)
block|{
if|if
condition|(
name|newLineHeight
operator|+
name|consumedHeight
operator|<
name|workablePageHeight
condition|)
block|{
name|consumedHeight
operator|+=
name|newLineHeight
expr_stmt|;
block|}
else|else
block|{
name|consumedHeight
operator|=
name|newLineHeight
expr_stmt|;
name|realignedTexts
operator|.
name|add
argument_list|(
name|linesInAPage
argument_list|)
expr_stmt|;
name|linesInAPage
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|linesInAPage
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
name|realignedTexts
operator|.
name|add
argument_list|(
name|linesInAPage
argument_list|)
expr_stmt|;
return|return
name|realignedTexts
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getReAlignedTextBasedOnPageWidth
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|originalLines
parameter_list|,
name|PDFont
name|font
parameter_list|,
name|float
name|workablePageWidth
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|uniformlyWideTexts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|float
name|consumedWidth
init|=
literal|0
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|line
range|:
name|originalLines
control|)
block|{
name|float
name|newTokenWidth
init|=
literal|0
decl_stmt|;
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|line
argument_list|,
literal|" "
argument_list|,
literal|true
argument_list|)
decl_stmt|;
while|while
condition|(
name|st
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|token
init|=
name|st
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|newTokenWidth
operator|=
name|font
operator|.
name|getStringWidth
argument_list|(
name|token
argument_list|)
operator|/
literal|1000
operator|*
name|FONT_SIZE
expr_stmt|;
if|if
condition|(
name|newTokenWidth
operator|+
name|consumedWidth
operator|<
name|workablePageWidth
condition|)
block|{
name|consumedWidth
operator|+=
name|newTokenWidth
expr_stmt|;
block|}
else|else
block|{
comment|// add a new text chunk
name|uniformlyWideTexts
operator|.
name|add
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|consumedWidth
operator|=
name|newTokenWidth
expr_stmt|;
name|sb
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
comment|// add a new text chunk
name|uniformlyWideTexts
operator|.
name|add
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|consumedWidth
operator|=
name|newTokenWidth
expr_stmt|;
name|sb
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
block|}
return|return
name|uniformlyWideTexts
return|;
block|}
specifier|private
specifier|static
name|PDRectangle
name|getPageSize
parameter_list|()
block|{
return|return
name|PDRectangle
operator|.
name|A4
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getBengaliTextFromFile
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|lines
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|BengaliPdfGenerationHelloWorld
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|TEXT_SOURCE_FILE
argument_list|)
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
init|;
init|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|String
name|line
init|=
name|br
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
break|break;
block|}
if|if
condition|(
operator|!
name|line
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
name|lines
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|lines
return|;
block|}
block|}
end_class

end_unit

