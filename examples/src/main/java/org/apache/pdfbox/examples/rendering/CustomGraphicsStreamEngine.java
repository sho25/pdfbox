begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|examples
operator|.
name|rendering
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|Point2D
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|contentstream
operator|.
name|PDFGraphicsStreamEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|contentstream
operator|.
name|PDFStreamEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|image
operator|.
name|PDImage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|Matrix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_comment
comment|/**  * Example of a custom PDFGraphicsStreamEngine subclass. Allows text and graphics to be processed  * in a custom manner. This example simply prints the operations to stdout.  *  *<p>See {@link PDFStreamEngine} for further methods which may be overridden.  *   * @author John Hewson  */
end_comment

begin_class
specifier|public
class|class
name|CustomGraphicsStreamEngine
extends|extends
name|PDFGraphicsStreamEngine
block|{
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
literal|"src/main/resources/org/apache/pdfbox/examples/rendering/"
argument_list|,
literal|"custom-render-demo.pdf"
argument_list|)
decl_stmt|;
try|try
init|(
name|PDDocument
name|doc
init|=
name|PDDocument
operator|.
name|load
argument_list|(
name|file
argument_list|)
init|)
block|{
name|PDPage
name|page
init|=
name|doc
operator|.
name|getPage
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|CustomGraphicsStreamEngine
name|engine
init|=
operator|new
name|CustomGraphicsStreamEngine
argument_list|(
name|page
argument_list|)
decl_stmt|;
name|engine
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Constructor.      *      * @param page PDF Page      */
specifier|protected
name|CustomGraphicsStreamEngine
parameter_list|(
name|PDPage
name|page
parameter_list|)
block|{
name|super
argument_list|(
name|page
argument_list|)
expr_stmt|;
block|}
comment|/**      * Runs the engine on the current page.      *      * @throws IOException If there is an IO error while drawing the page.      */
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|IOException
block|{
name|processPage
argument_list|(
name|getPage
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|PDAnnotation
name|annotation
range|:
name|getPage
argument_list|()
operator|.
name|getAnnotations
argument_list|()
control|)
block|{
name|showAnnotation
argument_list|(
name|annotation
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|appendRectangle
parameter_list|(
name|Point2D
name|p0
parameter_list|,
name|Point2D
name|p1
parameter_list|,
name|Point2D
name|p2
parameter_list|,
name|Point2D
name|p3
parameter_list|)
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"appendRectangle %.2f %.2f, %.2f %.2f, %.2f %.2f, %.2f %.2f\n"
argument_list|,
name|p0
operator|.
name|getX
argument_list|()
argument_list|,
name|p0
operator|.
name|getY
argument_list|()
argument_list|,
name|p1
operator|.
name|getX
argument_list|()
argument_list|,
name|p1
operator|.
name|getY
argument_list|()
argument_list|,
name|p2
operator|.
name|getX
argument_list|()
argument_list|,
name|p2
operator|.
name|getY
argument_list|()
argument_list|,
name|p3
operator|.
name|getX
argument_list|()
argument_list|,
name|p3
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|drawImage
parameter_list|(
name|PDImage
name|pdImage
parameter_list|)
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"drawImage"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clip
parameter_list|(
name|int
name|windingRule
parameter_list|)
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"clip"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|moveTo
parameter_list|(
name|float
name|x
parameter_list|,
name|float
name|y
parameter_list|)
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"moveTo %.2f %.2f\n"
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|lineTo
parameter_list|(
name|float
name|x
parameter_list|,
name|float
name|y
parameter_list|)
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"lineTo %.2f %.2f\n"
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|curveTo
parameter_list|(
name|float
name|x1
parameter_list|,
name|float
name|y1
parameter_list|,
name|float
name|x2
parameter_list|,
name|float
name|y2
parameter_list|,
name|float
name|x3
parameter_list|,
name|float
name|y3
parameter_list|)
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"curveTo %.2f %.2f, %.2f %.2f, %.2f %.2f\n"
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|x3
argument_list|,
name|y3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Point2D
name|getCurrentPoint
parameter_list|()
throws|throws
name|IOException
block|{
comment|// if you want to build paths, you'll need to keep track of this like PageDrawer does
return|return
operator|new
name|Point2D
operator|.
name|Float
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|closePath
parameter_list|()
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"closePath"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|endPath
parameter_list|()
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"endPath"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|strokePath
parameter_list|()
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"strokePath"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|fillPath
parameter_list|(
name|int
name|windingRule
parameter_list|)
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"fillPath"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|fillAndStrokePath
parameter_list|(
name|int
name|windingRule
parameter_list|)
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"fillAndStrokePath"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|shadingFill
parameter_list|(
name|COSName
name|shadingName
parameter_list|)
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"shadingFill "
operator|+
name|shadingName
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Overridden from PDFStreamEngine.      */
annotation|@
name|Override
specifier|public
name|void
name|showTextString
parameter_list|(
name|byte
index|[]
name|string
parameter_list|)
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"showTextString \""
argument_list|)
expr_stmt|;
name|super
operator|.
name|showTextString
argument_list|(
name|string
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
block|}
comment|/**      * Overridden from PDFStreamEngine.      */
annotation|@
name|Override
specifier|public
name|void
name|showTextStrings
parameter_list|(
name|COSArray
name|array
parameter_list|)
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"showTextStrings \""
argument_list|)
expr_stmt|;
name|super
operator|.
name|showTextStrings
argument_list|(
name|array
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
block|}
comment|/**      * Overridden from PDFStreamEngine.      */
annotation|@
name|Override
specifier|protected
name|void
name|showGlyph
parameter_list|(
name|Matrix
name|textRenderingMatrix
parameter_list|,
name|PDFont
name|font
parameter_list|,
name|int
name|code
parameter_list|,
name|String
name|unicode
parameter_list|,
name|Vector
name|displacement
parameter_list|)
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|unicode
argument_list|)
expr_stmt|;
name|super
operator|.
name|showGlyph
argument_list|(
name|textRenderingMatrix
argument_list|,
name|font
argument_list|,
name|code
argument_list|,
name|unicode
argument_list|,
name|displacement
argument_list|)
expr_stmt|;
block|}
comment|// NOTE: there are may more methods in PDFStreamEngine which can be overridden here too.
block|}
end_class

end_unit

