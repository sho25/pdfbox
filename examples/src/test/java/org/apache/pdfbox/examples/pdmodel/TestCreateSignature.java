begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|examples
operator|.
name|pdmodel
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|BufferedImage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|DataBufferInt
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStoreException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|UnrecoverableKeyException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|Loader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|examples
operator|.
name|interactive
operator|.
name|form
operator|.
name|CreateSimpleForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|examples
operator|.
name|signature
operator|.
name|CreateEmptySignatureForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|examples
operator|.
name|signature
operator|.
name|CreateSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|examples
operator|.
name|signature
operator|.
name|CreateVisibleSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPageContentStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAppearanceDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|digitalsignature
operator|.
name|PDSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|form
operator|.
name|PDField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|rendering
operator|.
name|PDFRenderer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|Hex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wink
operator|.
name|client
operator|.
name|MockHttpServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cert
operator|.
name|X509CertificateHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cms
operator|.
name|CMSException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cms
operator|.
name|CMSProcessableByteArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cms
operator|.
name|CMSSignedData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cms
operator|.
name|SignerInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cms
operator|.
name|jcajce
operator|.
name|JcaSimpleSignerInfoVerifierBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|operator
operator|.
name|OperatorCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|tsp
operator|.
name|TSPValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|util
operator|.
name|Selector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|util
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_comment
comment|/**  * Test for CreateSignature. Each test case will run twice: once with SignatureInterface  * and once using external signature creation scenario.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestCreateSignature
block|{
specifier|private
specifier|static
specifier|final
name|String
name|inDir
init|=
literal|"src/test/resources/org/apache/pdfbox/examples/signature/"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|outDir
init|=
literal|"target/test-output/"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|keystorePath
init|=
name|inDir
operator|+
literal|"keystore.p12"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|jpegPath
init|=
name|inDir
operator|+
literal|"stamp.jpg"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|password
init|=
literal|"123456"
decl_stmt|;
specifier|private
specifier|static
name|Certificate
name|certificate
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameter
specifier|public
name|boolean
name|externallySign
decl_stmt|;
comment|/**      * Values for {@link #externallySign} test parameter to specify if signing should be conducted      * using externally signing scenario ({@code true}) or SignatureInterface ({@code false}).      */
annotation|@
name|Parameterized
operator|.
name|Parameters
specifier|public
specifier|static
name|Collection
argument_list|<
name|Boolean
argument_list|>
name|signingTypes
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|File
argument_list|(
literal|"target/test-output"
argument_list|)
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|KeyStore
name|keystore
init|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
literal|"PKCS12"
argument_list|)
decl_stmt|;
name|keystore
operator|.
name|load
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|keystorePath
argument_list|)
argument_list|,
name|password
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
name|certificate
operator|=
name|keystore
operator|.
name|getCertificateChain
argument_list|(
name|keystore
operator|.
name|aliases
argument_list|()
operator|.
name|nextElement
argument_list|()
argument_list|)
index|[
literal|0
index|]
expr_stmt|;
block|}
comment|/**      * Signs a PDF using the "adbe.pkcs7.detached" SubFilter with the SHA-256 digest.      *      * @throws IOException      * @throws GeneralSecurityException      * @throws CMSException      * @throws OperatorCreationException      */
annotation|@
name|Test
specifier|public
name|void
name|testDetachedSHA256
parameter_list|()
throws|throws
name|IOException
throws|,
name|CMSException
throws|,
name|OperatorCreationException
throws|,
name|GeneralSecurityException
block|{
comment|// load the keystore
name|KeyStore
name|keystore
init|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
literal|"PKCS12"
argument_list|)
decl_stmt|;
name|keystore
operator|.
name|load
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|keystorePath
argument_list|)
argument_list|,
name|password
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
comment|// sign PDF
name|CreateSignature
name|signing
init|=
operator|new
name|CreateSignature
argument_list|(
name|keystore
argument_list|,
name|password
operator|.
name|toCharArray
argument_list|()
argument_list|)
decl_stmt|;
name|signing
operator|.
name|setExternalSigning
argument_list|(
name|externallySign
argument_list|)
expr_stmt|;
specifier|final
name|String
name|fileName
init|=
name|getOutputFileName
argument_list|(
literal|"signed{0}.pdf"
argument_list|)
decl_stmt|;
name|signing
operator|.
name|signDetached
argument_list|(
operator|new
name|File
argument_list|(
name|inDir
operator|+
literal|"sign_me.pdf"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|outDir
operator|+
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
name|checkSignature
argument_list|(
operator|new
name|File
argument_list|(
name|inDir
argument_list|,
literal|"sign_me.pdf"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|outDir
argument_list|,
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Signs a PDF using the "adbe.pkcs7.detached" SubFilter with the SHA-256 digest and a signed      * timestamp from a Time Stamping Authority (TSA) server.      *      * This is not a complete test because we don't have the ability to return a valid response, so      * we return a cached response which is well-formed, but does not match the timestamp or nonce      * in the request. This allows us to test the basic TSA mechanism and test the nonce, which is a      * good start.      *      * @throws IOException      * @throws GeneralSecurityException      * @throws CMSException      * @throws OperatorCreationException      */
annotation|@
name|Test
specifier|public
name|void
name|testDetachedSHA256WithTSA
parameter_list|()
throws|throws
name|IOException
throws|,
name|CMSException
throws|,
name|OperatorCreationException
throws|,
name|GeneralSecurityException
block|{
name|byte
index|[]
name|content
decl_stmt|;
comment|// mock TSA response content
try|try
init|(
name|InputStream
name|input
init|=
operator|new
name|FileInputStream
argument_list|(
name|inDir
operator|+
literal|"tsa_response.asn1"
argument_list|)
init|)
block|{
name|content
operator|=
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
comment|// mock TSA server (RFC 3161)
name|MockHttpServer
name|mockServer
init|=
operator|new
name|MockHttpServer
argument_list|(
literal|15371
argument_list|)
decl_stmt|;
name|mockServer
operator|.
name|startServer
argument_list|()
expr_stmt|;
name|String
name|tsaUrl
init|=
literal|"http://localhost:"
operator|+
name|mockServer
operator|.
name|getServerPort
argument_list|()
operator|+
literal|"/"
decl_stmt|;
name|MockHttpServer
operator|.
name|MockHttpServerResponse
name|response
init|=
operator|new
name|MockHttpServer
operator|.
name|MockHttpServerResponse
argument_list|()
decl_stmt|;
name|response
operator|.
name|setMockResponseContent
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|response
operator|.
name|setMockResponseContentType
argument_list|(
literal|"application/timestamp-reply"
argument_list|)
expr_stmt|;
name|response
operator|.
name|setMockResponseCode
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|mockServer
operator|.
name|setMockHttpServerResponses
argument_list|(
name|response
argument_list|)
expr_stmt|;
comment|// load the keystore
name|KeyStore
name|keystore
init|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
literal|"PKCS12"
argument_list|)
decl_stmt|;
name|keystore
operator|.
name|load
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|keystorePath
argument_list|)
argument_list|,
name|password
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
comment|// sign PDF (will fail due to nonce and timestamp differing)
try|try
block|{
name|String
name|inPath
init|=
name|inDir
operator|+
literal|"sign_me_tsa.pdf"
decl_stmt|;
name|String
name|outPath
init|=
name|outDir
operator|+
name|getOutputFileName
argument_list|(
literal|"signed{0}_tsa.pdf"
argument_list|)
decl_stmt|;
name|CreateSignature
name|signing
init|=
operator|new
name|CreateSignature
argument_list|(
name|keystore
argument_list|,
name|password
operator|.
name|toCharArray
argument_list|()
argument_list|)
decl_stmt|;
name|signing
operator|.
name|setExternalSigning
argument_list|(
name|externallySign
argument_list|)
expr_stmt|;
name|signing
operator|.
name|signDetached
argument_list|(
operator|new
name|File
argument_list|(
name|inPath
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|outPath
argument_list|)
argument_list|,
name|tsaUrl
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|TSPValidationException
argument_list|)
expr_stmt|;
block|}
comment|// TODO verify the signed PDF file
comment|// TODO create a file signed with TSA
block|}
comment|/**      * Test creating visual signature.      *      * @throws IOException      * @throws CMSException      * @throws OperatorCreationException      * @throws GeneralSecurityException      */
annotation|@
name|Test
specifier|public
name|void
name|testCreateVisibleSignature
parameter_list|()
throws|throws
name|IOException
throws|,
name|CMSException
throws|,
name|OperatorCreationException
throws|,
name|GeneralSecurityException
block|{
comment|// load the keystore
name|KeyStore
name|keystore
init|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
literal|"PKCS12"
argument_list|)
decl_stmt|;
name|keystore
operator|.
name|load
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|keystorePath
argument_list|)
argument_list|,
name|password
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
comment|// sign PDF
name|String
name|inPath
init|=
name|inDir
operator|+
literal|"sign_me.pdf"
decl_stmt|;
name|File
name|destFile
decl_stmt|;
try|try
init|(
name|FileInputStream
name|fis
init|=
operator|new
name|FileInputStream
argument_list|(
name|jpegPath
argument_list|)
init|)
block|{
name|CreateVisibleSignature
name|signing
init|=
operator|new
name|CreateVisibleSignature
argument_list|(
name|keystore
argument_list|,
name|password
operator|.
name|toCharArray
argument_list|()
argument_list|)
decl_stmt|;
name|signing
operator|.
name|setVisibleSignDesigner
argument_list|(
name|inPath
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|50
argument_list|,
name|fis
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|signing
operator|.
name|setVisibleSignatureProperties
argument_list|(
literal|"name"
argument_list|,
literal|"location"
argument_list|,
literal|"Security"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|signing
operator|.
name|setExternalSigning
argument_list|(
name|externallySign
argument_list|)
expr_stmt|;
name|destFile
operator|=
operator|new
name|File
argument_list|(
name|outDir
operator|+
name|getOutputFileName
argument_list|(
literal|"signed{0}_visible.pdf"
argument_list|)
argument_list|)
expr_stmt|;
name|signing
operator|.
name|signPDF
argument_list|(
operator|new
name|File
argument_list|(
name|inPath
argument_list|)
argument_list|,
name|destFile
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|checkSignature
argument_list|(
operator|new
name|File
argument_list|(
name|inPath
argument_list|)
argument_list|,
name|destFile
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test when visually signing externally on an existing signature field on a file which has      * been signed before.      *       * @throws IOException      * @throws NoSuchAlgorithmException      * @throws KeyStoreException      * @throws CertificateException      * @throws UnrecoverableKeyException      * @throws CMSException      * @throws OperatorCreationException      * @throws GeneralSecurityException       */
annotation|@
name|Test
specifier|public
name|void
name|testPDFBox3978
parameter_list|()
throws|throws
name|IOException
throws|,
name|NoSuchAlgorithmException
throws|,
name|KeyStoreException
throws|,
name|CertificateException
throws|,
name|UnrecoverableKeyException
throws|,
name|CMSException
throws|,
name|OperatorCreationException
throws|,
name|GeneralSecurityException
block|{
name|String
name|filename
init|=
name|outDir
operator|+
literal|"EmptySignatureForm.pdf"
decl_stmt|;
name|String
name|filenameSigned1
init|=
name|outDir
operator|+
literal|"EmptySignatureForm-signed1.pdf"
decl_stmt|;
name|String
name|filenameSigned2
init|=
name|outDir
operator|+
literal|"EmptySignatureForm-signed2.pdf"
decl_stmt|;
if|if
condition|(
operator|!
name|externallySign
condition|)
block|{
return|return;
block|}
comment|// load the keystore
name|KeyStore
name|keystore
init|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
literal|"PKCS12"
argument_list|)
decl_stmt|;
name|keystore
operator|.
name|load
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|keystorePath
argument_list|)
argument_list|,
name|password
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
comment|// create file with empty signature
name|CreateEmptySignatureForm
operator|.
name|main
argument_list|(
operator|new
name|String
index|[]
block|{
name|filename
block|}
argument_list|)
expr_stmt|;
comment|// sign PDF
name|CreateSignature
name|signing1
init|=
operator|new
name|CreateSignature
argument_list|(
name|keystore
argument_list|,
name|password
operator|.
name|toCharArray
argument_list|()
argument_list|)
decl_stmt|;
name|signing1
operator|.
name|setExternalSigning
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|signing1
operator|.
name|signDetached
argument_list|(
operator|new
name|File
argument_list|(
name|filename
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|filenameSigned1
argument_list|)
argument_list|)
expr_stmt|;
name|checkSignature
argument_list|(
operator|new
name|File
argument_list|(
name|filename
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|filenameSigned1
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|PDDocument
name|doc1
init|=
name|Loader
operator|.
name|loadPDF
argument_list|(
operator|new
name|File
argument_list|(
name|filenameSigned1
argument_list|)
argument_list|)
init|)
block|{
name|List
argument_list|<
name|PDSignature
argument_list|>
name|signatureDictionaries
init|=
name|doc1
operator|.
name|getSignatureDictionaries
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|signatureDictionaries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// do visual signing in the field
try|try
init|(
name|FileInputStream
name|fis
init|=
operator|new
name|FileInputStream
argument_list|(
name|jpegPath
argument_list|)
init|)
block|{
name|CreateVisibleSignature
name|signing2
init|=
operator|new
name|CreateVisibleSignature
argument_list|(
name|keystore
argument_list|,
name|password
operator|.
name|toCharArray
argument_list|()
argument_list|)
decl_stmt|;
name|signing2
operator|.
name|setVisibleSignDesigner
argument_list|(
name|filenameSigned1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|50
argument_list|,
name|fis
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|signing2
operator|.
name|setVisibleSignatureProperties
argument_list|(
literal|"name"
argument_list|,
literal|"location"
argument_list|,
literal|"Security"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|signing2
operator|.
name|setExternalSigning
argument_list|(
name|externallySign
argument_list|)
expr_stmt|;
name|signing2
operator|.
name|signPDF
argument_list|(
operator|new
name|File
argument_list|(
name|filenameSigned1
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|filenameSigned2
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|"Signature1"
argument_list|)
expr_stmt|;
block|}
name|checkSignature
argument_list|(
operator|new
name|File
argument_list|(
name|filenameSigned1
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|filenameSigned2
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|PDDocument
name|doc2
init|=
name|Loader
operator|.
name|loadPDF
argument_list|(
operator|new
name|File
argument_list|(
name|filenameSigned2
argument_list|)
argument_list|)
init|)
block|{
name|List
argument_list|<
name|PDSignature
argument_list|>
name|signatureDictionaries
init|=
name|doc2
operator|.
name|getSignatureDictionaries
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|signatureDictionaries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|getOutputFileName
parameter_list|(
name|String
name|filePattern
parameter_list|)
block|{
return|return
name|MessageFormat
operator|.
name|format
argument_list|(
name|filePattern
argument_list|,
operator|(
name|externallySign
condition|?
literal|"_ext"
else|:
literal|""
operator|)
argument_list|)
return|;
block|}
comment|// This check fails with a file created with the code before PDFBOX-3011 was solved.
specifier|private
name|void
name|checkSignature
parameter_list|(
name|File
name|origFile
parameter_list|,
name|File
name|signedFile
parameter_list|)
throws|throws
name|IOException
throws|,
name|CMSException
throws|,
name|OperatorCreationException
throws|,
name|GeneralSecurityException
block|{
name|String
name|origPageKey
decl_stmt|;
try|try
init|(
name|PDDocument
name|document
init|=
name|Loader
operator|.
name|loadPDF
argument_list|(
name|origFile
argument_list|)
init|)
block|{
comment|// get string representation of pages COSObject
name|origPageKey
operator|=
name|document
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|getCOSObject
argument_list|()
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|PAGES
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
try|try
init|(
name|PDDocument
name|document
init|=
name|Loader
operator|.
name|loadPDF
argument_list|(
name|signedFile
argument_list|)
init|)
block|{
comment|// PDFBOX-4261: check that object number stays the same
name|Assert
operator|.
name|assertEquals
argument_list|(
name|origPageKey
argument_list|,
name|document
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|getCOSObject
argument_list|()
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|PAGES
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PDSignature
argument_list|>
name|signatureDictionaries
init|=
name|document
operator|.
name|getSignatureDictionaries
argument_list|()
decl_stmt|;
if|if
condition|(
name|signatureDictionaries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"no signature found"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PDSignature
name|sig
range|:
name|document
operator|.
name|getSignatureDictionaries
argument_list|()
control|)
block|{
name|COSString
name|contents
init|=
operator|(
name|COSString
operator|)
name|sig
operator|.
name|getCOSObject
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|CONTENTS
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buf
init|=
name|sig
operator|.
name|getSignedContent
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|signedFile
argument_list|)
argument_list|)
decl_stmt|;
comment|// verify that getSignedContent() brings the same content
comment|// regardless whether from an InputStream or from a byte array
try|try
init|(
name|FileInputStream
name|fis
init|=
operator|new
name|FileInputStream
argument_list|(
name|signedFile
argument_list|)
init|)
block|{
name|byte
index|[]
name|buf2
init|=
name|sig
operator|.
name|getSignedContent
argument_list|(
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|fis
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|buf
argument_list|,
name|buf2
argument_list|)
expr_stmt|;
block|}
comment|// verify that all getContents() methods returns the same content
try|try
init|(
name|FileInputStream
name|fis
init|=
operator|new
name|FileInputStream
argument_list|(
name|signedFile
argument_list|)
init|)
block|{
name|byte
index|[]
name|contents2
init|=
name|sig
operator|.
name|getContents
argument_list|(
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|fis
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|contents
operator|.
name|getBytes
argument_list|()
argument_list|,
name|contents2
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|contents3
init|=
name|sig
operator|.
name|getContents
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|signedFile
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|contents
operator|.
name|getBytes
argument_list|()
argument_list|,
name|contents3
argument_list|)
expr_stmt|;
comment|// inspiration:
comment|// http://stackoverflow.com/a/26702631/535646
comment|// http://stackoverflow.com/a/9261365/535646
name|CMSSignedData
name|signedData
init|=
operator|new
name|CMSSignedData
argument_list|(
operator|new
name|CMSProcessableByteArray
argument_list|(
name|buf
argument_list|)
argument_list|,
name|contents
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|Store
argument_list|<
name|X509CertificateHolder
argument_list|>
name|certificatesStore
init|=
name|signedData
operator|.
name|getCertificates
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|SignerInformation
argument_list|>
name|signers
init|=
name|signedData
operator|.
name|getSignerInfos
argument_list|()
operator|.
name|getSigners
argument_list|()
decl_stmt|;
name|SignerInformation
name|signerInformation
init|=
name|signers
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Collection
argument_list|<
name|X509CertificateHolder
argument_list|>
name|matches
init|=
name|certificatesStore
operator|.
name|getMatches
argument_list|(
operator|(
name|Selector
argument_list|<
name|X509CertificateHolder
argument_list|>
operator|)
name|signerInformation
operator|.
name|getSID
argument_list|()
argument_list|)
decl_stmt|;
name|X509CertificateHolder
name|certificateHolder
init|=
operator|(
name|X509CertificateHolder
operator|)
name|matches
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|certificate
operator|.
name|getEncoded
argument_list|()
argument_list|,
name|certificateHolder
operator|.
name|getEncoded
argument_list|()
argument_list|)
expr_stmt|;
comment|// CMSVerifierCertificateNotValidException means that the keystore wasn't valid at signing time
if|if
condition|(
operator|!
name|signerInformation
operator|.
name|verify
argument_list|(
operator|new
name|JcaSimpleSignerInfoVerifierBuilder
argument_list|()
operator|.
name|build
argument_list|(
name|certificateHolder
argument_list|)
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Signature verification failed"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|String
name|calculateDigestString
parameter_list|(
name|InputStream
name|inputStream
parameter_list|)
throws|throws
name|NoSuchAlgorithmException
throws|,
name|IOException
block|{
name|MessageDigest
name|md
init|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"SHA-256"
argument_list|)
decl_stmt|;
return|return
name|Hex
operator|.
name|getString
argument_list|(
name|md
operator|.
name|digest
argument_list|(
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|inputStream
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * PDFBOX-3811: make sure that calling saveIncrementalForExternalSigning() more than once      * brings the same result.      *       * @throws IOException      * @throws NoSuchAlgorithmException       */
annotation|@
name|Test
specifier|public
name|void
name|testPDFBox3811
parameter_list|()
throws|throws
name|IOException
throws|,
name|NoSuchAlgorithmException
block|{
if|if
condition|(
operator|!
name|externallySign
condition|)
block|{
return|return;
block|}
comment|// create simple PDF
name|PDDocument
name|document
init|=
operator|new
name|PDDocument
argument_list|()
decl_stmt|;
name|PDPage
name|page
init|=
operator|new
name|PDPage
argument_list|()
decl_stmt|;
name|document
operator|.
name|addPage
argument_list|(
name|page
argument_list|)
expr_stmt|;
operator|new
name|PDPageContentStream
argument_list|(
name|document
argument_list|,
name|page
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|document
operator|.
name|save
argument_list|(
name|baos
argument_list|)
expr_stmt|;
name|document
operator|.
name|close
argument_list|()
expr_stmt|;
name|document
operator|=
name|Loader
operator|.
name|loadPDF
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
comment|// for stable digest
name|document
operator|.
name|setDocumentId
argument_list|(
literal|12345L
argument_list|)
expr_stmt|;
name|PDSignature
name|signature
init|=
operator|new
name|PDSignature
argument_list|()
decl_stmt|;
name|signature
operator|.
name|setFilter
argument_list|(
name|PDSignature
operator|.
name|FILTER_ADOBE_PPKLITE
argument_list|)
expr_stmt|;
name|signature
operator|.
name|setSubFilter
argument_list|(
name|PDSignature
operator|.
name|SUBFILTER_ADBE_PKCS7_DETACHED
argument_list|)
expr_stmt|;
name|document
operator|.
name|addSignature
argument_list|(
name|signature
argument_list|)
expr_stmt|;
name|int
index|[]
name|reserveByteRange
init|=
name|signature
operator|.
name|getByteRange
argument_list|()
decl_stmt|;
name|String
name|digestString
init|=
name|calculateDigestString
argument_list|(
name|document
operator|.
name|saveIncrementalForExternalSigning
argument_list|(
operator|new
name|ByteArrayOutputStream
argument_list|()
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|caught
init|=
literal|false
decl_stmt|;
try|try
block|{
name|document
operator|.
name|saveIncrementalForExternalSigning
argument_list|(
operator|new
name|ByteArrayOutputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ex
parameter_list|)
block|{
name|caught
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"IllegalStateException should have been thrown"
argument_list|,
name|caught
argument_list|)
expr_stmt|;
name|signature
operator|.
name|setByteRange
argument_list|(
name|reserveByteRange
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|digestString
argument_list|,
name|calculateDigestString
argument_list|(
name|document
operator|.
name|saveIncrementalForExternalSigning
argument_list|(
operator|new
name|ByteArrayOutputStream
argument_list|()
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a simple form PDF, sign it, reload it, change a field value, incrementally save it.      * This should not break the signature, and the value and its display must have changed as      * expected. Do this both for the old and new incremental save methods.      *      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testSaveIncrementalAfterSign
parameter_list|()
throws|throws
name|Exception
block|{
name|BufferedImage
name|oldImage
decl_stmt|,
name|expectedImage1
decl_stmt|,
name|actualImage1
decl_stmt|;
name|CreateSimpleForm
operator|.
name|main
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// creates "target/SimpleForm.pdf"
comment|// load the keystore
name|KeyStore
name|keystore
init|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
literal|"PKCS12"
argument_list|)
decl_stmt|;
name|keystore
operator|.
name|load
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|keystorePath
argument_list|)
argument_list|,
name|password
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
comment|// sign PDF
name|CreateSignature
name|signing
init|=
operator|new
name|CreateSignature
argument_list|(
name|keystore
argument_list|,
name|password
operator|.
name|toCharArray
argument_list|()
argument_list|)
decl_stmt|;
name|signing
operator|.
name|setExternalSigning
argument_list|(
name|externallySign
argument_list|)
expr_stmt|;
specifier|final
name|String
name|fileNameSigned
init|=
name|getOutputFileName
argument_list|(
literal|"SimpleForm_signed{0}.pdf"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|fileNameResaved1
init|=
name|getOutputFileName
argument_list|(
literal|"SimpleForm_signed{0}_incrementallyresaved1.pdf"
argument_list|)
decl_stmt|;
name|signing
operator|.
name|signDetached
argument_list|(
operator|new
name|File
argument_list|(
literal|"target/SimpleForm.pdf"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|outDir
operator|+
name|fileNameSigned
argument_list|)
argument_list|)
expr_stmt|;
name|checkSignature
argument_list|(
operator|new
name|File
argument_list|(
literal|"target/SimpleForm.pdf"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|outDir
argument_list|,
name|fileNameSigned
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|PDDocument
name|doc
init|=
name|Loader
operator|.
name|loadPDF
argument_list|(
operator|new
name|File
argument_list|(
name|outDir
argument_list|,
name|fileNameSigned
argument_list|)
argument_list|)
init|)
block|{
name|oldImage
operator|=
operator|new
name|PDFRenderer
argument_list|(
name|doc
argument_list|)
operator|.
name|renderImage
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|FileOutputStream
name|fileOutputStream
init|=
operator|new
name|FileOutputStream
argument_list|(
operator|new
name|File
argument_list|(
name|outDir
argument_list|,
name|fileNameResaved1
argument_list|)
argument_list|)
decl_stmt|;
name|PDField
name|field
init|=
name|doc
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|getAcroForm
argument_list|()
operator|.
name|getField
argument_list|(
literal|"SampleField"
argument_list|)
decl_stmt|;
name|field
operator|.
name|setValue
argument_list|(
literal|"New Value 1"
argument_list|)
expr_stmt|;
comment|// Test of PDFBOX-4509: only "Helv" font should be there
name|Collection
argument_list|<
name|COSName
argument_list|>
name|fonts
init|=
operator|(
name|Collection
argument_list|<
name|COSName
argument_list|>
operator|)
name|field
operator|.
name|getWidgets
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAppearance
argument_list|()
operator|.
name|getNormalAppearance
argument_list|()
operator|.
name|getAppearanceStream
argument_list|()
operator|.
name|getResources
argument_list|()
operator|.
name|getFontNames
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fonts
operator|.
name|contains
argument_list|(
name|COSName
operator|.
name|HELV
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fonts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|expectedImage1
operator|=
operator|new
name|PDFRenderer
argument_list|(
name|doc
argument_list|)
operator|.
name|renderImage
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// compare images, image must has changed
name|Assert
operator|.
name|assertEquals
argument_list|(
name|oldImage
operator|.
name|getWidth
argument_list|()
argument_list|,
name|expectedImage1
operator|.
name|getWidth
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|oldImage
operator|.
name|getHeight
argument_list|()
argument_list|,
name|expectedImage1
operator|.
name|getHeight
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|oldImage
operator|.
name|getType
argument_list|()
argument_list|,
name|expectedImage1
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|DataBufferInt
name|expectedData
init|=
operator|(
name|DataBufferInt
operator|)
name|oldImage
operator|.
name|getRaster
argument_list|()
operator|.
name|getDataBuffer
argument_list|()
decl_stmt|;
name|DataBufferInt
name|actualData
init|=
operator|(
name|DataBufferInt
operator|)
name|expectedImage1
operator|.
name|getRaster
argument_list|()
operator|.
name|getDataBuffer
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedData
operator|.
name|getData
argument_list|()
operator|.
name|length
argument_list|,
name|actualData
operator|.
name|getData
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|expectedData
operator|.
name|getData
argument_list|()
argument_list|,
name|actualData
operator|.
name|getData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// old style incremental save: create a "path" from the root to the objects that need an update
name|doc
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|getCOSObject
argument_list|()
operator|.
name|setNeedToBeUpdated
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|doc
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|getAcroForm
argument_list|()
operator|.
name|getCOSObject
argument_list|()
operator|.
name|setNeedToBeUpdated
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|field
operator|.
name|getCOSObject
argument_list|()
operator|.
name|setNeedToBeUpdated
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|PDAppearanceDictionary
name|appearance
init|=
name|field
operator|.
name|getWidgets
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAppearance
argument_list|()
decl_stmt|;
name|appearance
operator|.
name|getCOSObject
argument_list|()
operator|.
name|setNeedToBeUpdated
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|appearance
operator|.
name|getNormalAppearance
argument_list|()
operator|.
name|getCOSObject
argument_list|()
operator|.
name|setNeedToBeUpdated
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|doc
operator|.
name|saveIncremental
argument_list|(
name|fileOutputStream
argument_list|)
expr_stmt|;
block|}
name|checkSignature
argument_list|(
operator|new
name|File
argument_list|(
literal|"target/SimpleForm.pdf"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|outDir
argument_list|,
name|fileNameResaved1
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|PDDocument
name|doc
init|=
name|Loader
operator|.
name|loadPDF
argument_list|(
operator|new
name|File
argument_list|(
name|outDir
argument_list|,
name|fileNameResaved1
argument_list|)
argument_list|)
init|)
block|{
name|PDField
name|field
init|=
name|doc
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|getAcroForm
argument_list|()
operator|.
name|getField
argument_list|(
literal|"SampleField"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"New Value 1"
argument_list|,
name|field
operator|.
name|getValueAsString
argument_list|()
argument_list|)
expr_stmt|;
name|actualImage1
operator|=
operator|new
name|PDFRenderer
argument_list|(
name|doc
argument_list|)
operator|.
name|renderImage
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// compare images, equality proves that the appearance has been updated too
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedImage1
operator|.
name|getWidth
argument_list|()
argument_list|,
name|actualImage1
operator|.
name|getWidth
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedImage1
operator|.
name|getHeight
argument_list|()
argument_list|,
name|actualImage1
operator|.
name|getHeight
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedImage1
operator|.
name|getType
argument_list|()
argument_list|,
name|actualImage1
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|DataBufferInt
name|expectedData
init|=
operator|(
name|DataBufferInt
operator|)
name|expectedImage1
operator|.
name|getRaster
argument_list|()
operator|.
name|getDataBuffer
argument_list|()
decl_stmt|;
name|DataBufferInt
name|actualData
init|=
operator|(
name|DataBufferInt
operator|)
name|actualImage1
operator|.
name|getRaster
argument_list|()
operator|.
name|getDataBuffer
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|expectedData
operator|.
name|getData
argument_list|()
argument_list|,
name|actualData
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

