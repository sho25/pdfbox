begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|examples
operator|.
name|pdmodel
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|examples
operator|.
name|signature
operator|.
name|CreateSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|examples
operator|.
name|signature
operator|.
name|CreateVisibleSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|examples
operator|.
name|signature
operator|.
name|TSAClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wink
operator|.
name|client
operator|.
name|MockHttpServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cert
operator|.
name|X509CertificateHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cert
operator|.
name|jcajce
operator|.
name|JcaX509CertificateConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cms
operator|.
name|CMSException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cms
operator|.
name|CMSSignedData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cms
operator|.
name|SignerInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|operator
operator|.
name|OperatorCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|tsp
operator|.
name|TSPValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|util
operator|.
name|Store
import|;
end_import

begin_comment
comment|/**  * Test for CreateSignature  */
end_comment

begin_class
specifier|public
class|class
name|TestCreateSignature
extends|extends
name|TestCase
block|{
specifier|private
specifier|final
name|String
name|inDir
init|=
literal|"src/test/resources/org/apache/pdfbox/examples/signature/"
decl_stmt|;
specifier|private
specifier|final
name|String
name|outDir
init|=
literal|"target/test-output/"
decl_stmt|;
specifier|private
specifier|final
name|String
name|keystorePath
init|=
name|inDir
operator|+
literal|"keystore.p12"
decl_stmt|;
specifier|private
specifier|final
name|String
name|jpegPath
init|=
name|inDir
operator|+
literal|"stamp.jpg"
decl_stmt|;
specifier|private
specifier|final
name|String
name|password
init|=
literal|"123456"
decl_stmt|;
specifier|private
name|Certificate
name|certificate
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
operator|new
name|File
argument_list|(
literal|"target/test-output"
argument_list|)
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|KeyStore
name|keystore
init|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
literal|"PKCS12"
argument_list|)
decl_stmt|;
name|keystore
operator|.
name|load
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|keystorePath
argument_list|)
argument_list|,
name|password
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
name|certificate
operator|=
name|keystore
operator|.
name|getCertificateChain
argument_list|(
name|keystore
operator|.
name|aliases
argument_list|()
operator|.
name|nextElement
argument_list|()
argument_list|)
index|[
literal|0
index|]
expr_stmt|;
block|}
comment|/**      * Signs a PDF using the "adbe.pkcs7.detached" SubFilter with the SHA-256 digest.      *      * @throws IOException      * @throws GeneralSecurityException      */
specifier|public
name|void
name|testDetachedSHA256
parameter_list|()
throws|throws
name|IOException
throws|,
name|CMSException
throws|,
name|OperatorCreationException
throws|,
name|GeneralSecurityException
block|{
comment|// load the keystore
name|KeyStore
name|keystore
init|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
literal|"PKCS12"
argument_list|)
decl_stmt|;
name|keystore
operator|.
name|load
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|keystorePath
argument_list|)
argument_list|,
name|password
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
comment|// sign PDF
name|CreateSignature
name|signing
init|=
operator|new
name|CreateSignature
argument_list|(
name|keystore
argument_list|,
name|password
operator|.
name|toCharArray
argument_list|()
argument_list|)
decl_stmt|;
name|signing
operator|.
name|signDetached
argument_list|(
operator|new
name|File
argument_list|(
name|inDir
operator|+
literal|"sign_me.pdf"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|outDir
operator|+
literal|"signed.pdf"
argument_list|)
argument_list|)
expr_stmt|;
name|checkSignature
argument_list|(
operator|new
name|File
argument_list|(
name|outDir
operator|+
literal|"signed.pdf"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Signs a PDF using the "adbe.pkcs7.detached" SubFilter with the SHA-256 digest and a signed      * timestamp from a Time Stamping Authority (TSA) server.      *      * This is not a complete test because we don't have the ability to return a valid response, so      * we return a cached response which is well-formed, but does not match the timestamp or nonce      * in the request. This allows us to test the basic TSA mechanism and test the nonce, which is a      * good start.      *      * @throws IOException      * @throws GeneralSecurityException      */
specifier|public
name|void
name|testDetachedSHA256WithTSA
parameter_list|()
throws|throws
name|IOException
throws|,
name|CMSException
throws|,
name|OperatorCreationException
throws|,
name|GeneralSecurityException
block|{
comment|// mock TSA response content
name|InputStream
name|input
init|=
operator|new
name|FileInputStream
argument_list|(
name|inDir
operator|+
literal|"tsa_response.asn1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|content
init|=
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|input
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// mock TSA server (RFC 3161)
name|MockHttpServer
name|mockServer
init|=
operator|new
name|MockHttpServer
argument_list|(
literal|15371
argument_list|)
decl_stmt|;
name|mockServer
operator|.
name|startServer
argument_list|()
expr_stmt|;
name|String
name|tsaUrl
init|=
literal|"http://localhost:"
operator|+
name|mockServer
operator|.
name|getServerPort
argument_list|()
operator|+
literal|"/"
decl_stmt|;
name|MockHttpServer
operator|.
name|MockHttpServerResponse
name|response
init|=
operator|new
name|MockHttpServer
operator|.
name|MockHttpServerResponse
argument_list|()
decl_stmt|;
name|response
operator|.
name|setMockResponseContent
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|response
operator|.
name|setMockResponseContentType
argument_list|(
literal|"application/timestamp-reply"
argument_list|)
expr_stmt|;
name|response
operator|.
name|setMockResponseCode
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|mockServer
operator|.
name|setMockHttpServerResponses
argument_list|(
name|response
argument_list|)
expr_stmt|;
comment|// TSA client
name|MessageDigest
name|digest
init|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"SHA-256"
argument_list|)
decl_stmt|;
name|TSAClient
name|tsaClient
init|=
operator|new
name|TSAClient
argument_list|(
operator|new
name|URL
argument_list|(
name|tsaUrl
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|digest
argument_list|)
decl_stmt|;
comment|// load the keystore
name|KeyStore
name|keystore
init|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
literal|"PKCS12"
argument_list|)
decl_stmt|;
name|keystore
operator|.
name|load
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|keystorePath
argument_list|)
argument_list|,
name|password
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
comment|// sign PDF (will fail due to nonce and timestamp differing)
try|try
block|{
name|String
name|inPath
init|=
name|inDir
operator|+
literal|"sign_me_tsa.pdf"
decl_stmt|;
name|String
name|outPath
init|=
name|outDir
operator|+
literal|"signed_tsa.pdf"
decl_stmt|;
name|CreateSignature
name|signing
init|=
operator|new
name|CreateSignature
argument_list|(
name|keystore
argument_list|,
name|password
operator|.
name|toCharArray
argument_list|()
argument_list|)
decl_stmt|;
name|signing
operator|.
name|signDetached
argument_list|(
operator|new
name|File
argument_list|(
name|inPath
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|outPath
argument_list|)
argument_list|,
name|tsaClient
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|TSPValidationException
argument_list|)
expr_stmt|;
block|}
comment|// TODO verify the signed PDF file
comment|// TODO create a file signed with TSA
block|}
comment|/**      * Test creating visual signature.      *      * @throws IOException      * @throws GeneralSecurityException      */
specifier|public
name|void
name|testCreateVisibleSignature
parameter_list|()
throws|throws
name|IOException
throws|,
name|CMSException
throws|,
name|OperatorCreationException
throws|,
name|GeneralSecurityException
block|{
comment|// load the keystore
name|KeyStore
name|keystore
init|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
literal|"PKCS12"
argument_list|)
decl_stmt|;
name|keystore
operator|.
name|load
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|keystorePath
argument_list|)
argument_list|,
name|password
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
comment|// sign PDF
name|String
name|inPath
init|=
name|inDir
operator|+
literal|"sign_me.pdf"
decl_stmt|;
name|FileInputStream
name|fis
init|=
operator|new
name|FileInputStream
argument_list|(
name|jpegPath
argument_list|)
decl_stmt|;
name|CreateVisibleSignature
name|signing
init|=
operator|new
name|CreateVisibleSignature
argument_list|(
name|keystore
argument_list|,
name|password
operator|.
name|toCharArray
argument_list|()
argument_list|)
decl_stmt|;
name|signing
operator|.
name|setVisibleSignatureProperties
argument_list|(
name|inPath
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|50
argument_list|,
name|fis
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|signing
operator|.
name|setSignatureProperties
argument_list|(
literal|"name"
argument_list|,
literal|"location"
argument_list|,
literal|"Security"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|File
name|destFile
init|=
operator|new
name|File
argument_list|(
name|outDir
operator|+
literal|"signed_visible.pdf"
argument_list|)
decl_stmt|;
name|signing
operator|.
name|signPDF
argument_list|(
operator|new
name|File
argument_list|(
name|inPath
argument_list|)
argument_list|,
name|destFile
argument_list|)
expr_stmt|;
name|checkSignature
argument_list|(
name|destFile
argument_list|)
expr_stmt|;
block|}
comment|//TODO expand this into a full verify (if possible)
comment|// This check fails with a file created with the code before PDFBOX-3011 was solved.
specifier|private
name|void
name|checkSignature
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
throws|,
name|CMSException
throws|,
name|OperatorCreationException
throws|,
name|GeneralSecurityException
block|{
name|PDDocument
name|document
init|=
name|PDDocument
operator|.
name|load
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|COSDictionary
name|trailer
init|=
name|document
operator|.
name|getDocument
argument_list|()
operator|.
name|getTrailer
argument_list|()
decl_stmt|;
name|COSDictionary
name|root
init|=
operator|(
name|COSDictionary
operator|)
name|trailer
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|ROOT
argument_list|)
decl_stmt|;
name|COSDictionary
name|acroForm
init|=
operator|(
name|COSDictionary
operator|)
name|root
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|ACRO_FORM
argument_list|)
decl_stmt|;
name|COSArray
name|fields
init|=
operator|(
name|COSArray
operator|)
name|acroForm
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|FIELDS
argument_list|)
decl_stmt|;
name|COSDictionary
name|sig
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|COSDictionary
name|field
init|=
operator|(
name|COSDictionary
operator|)
name|fields
operator|.
name|getObject
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|COSName
operator|.
name|SIG
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getCOSName
argument_list|(
name|COSName
operator|.
name|FT
argument_list|)
argument_list|)
condition|)
block|{
name|sig
operator|=
operator|(
name|COSDictionary
operator|)
name|field
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|V
argument_list|)
expr_stmt|;
name|COSString
name|contents
init|=
operator|(
name|COSString
operator|)
name|sig
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|CONTENTS
argument_list|)
decl_stmt|;
comment|// inspiration:
comment|// http://stackoverflow.com/a/26702631/535646
name|CMSSignedData
name|signedData
init|=
operator|new
name|CMSSignedData
argument_list|(
name|contents
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|Store
name|certificatesStore
init|=
name|signedData
operator|.
name|getCertificates
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|SignerInformation
argument_list|>
name|signers
init|=
name|signedData
operator|.
name|getSignerInfos
argument_list|()
operator|.
name|getSigners
argument_list|()
decl_stmt|;
name|SignerInformation
name|signerInformation
init|=
name|signers
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|Collection
name|matches
init|=
name|certificatesStore
operator|.
name|getMatches
argument_list|(
name|signerInformation
operator|.
name|getSID
argument_list|()
argument_list|)
decl_stmt|;
name|X509CertificateHolder
name|certificateHolder
init|=
operator|(
name|X509CertificateHolder
operator|)
name|matches
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|X509Certificate
name|certFromSignedData
init|=
operator|new
name|JcaX509CertificateConverter
argument_list|()
operator|.
name|getCertificate
argument_list|(
name|certificateHolder
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|certificate
argument_list|,
name|certFromSignedData
argument_list|)
expr_stmt|;
comment|// code below doesn't work - maybe because the signature can indeed not be verified?
comment|//                if (signerInformation.verify(new JcaSimpleSignerInfoVerifierBuilder().build(certFromSignedData)))
comment|//                {
comment|//                    System.out.println("Signature verified");
comment|//                }
comment|//                else
comment|//                {
comment|//                    System.out.println("Signature verification failed");
comment|//                }
break|break;
block|}
block|}
if|if
condition|(
name|sig
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"no signature found"
argument_list|)
expr_stmt|;
block|}
name|document
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

