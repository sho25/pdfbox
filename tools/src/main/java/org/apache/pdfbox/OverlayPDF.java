begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|exceptions
operator|.
name|COSVisitorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|io
operator|.
name|RandomAccessBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdfparser
operator|.
name|BaseParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocumentCatalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDRectangle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|MapUtil
import|;
end_import

begin_comment
comment|/**  * Adds an overlay to an existing PDF document.  *    * Based on code contributed by Balazs Jerk.   *   */
end_comment

begin_class
specifier|public
class|class
name|OverlayPDF
block|{
comment|/**      *   Possible loacation of the overlayed pages: foreground or background.      */
specifier|private
enum|enum
name|Position
block|{
name|FOREGROUND
block|,
name|BACKGROUND
block|}
empty_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|BaseParser
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|XOBJECT_PREFIX
init|=
literal|"OL"
decl_stmt|;
specifier|private
name|LayoutPage
name|defaultOverlayPage
decl_stmt|;
specifier|private
name|LayoutPage
name|firstPageOverlayPage
decl_stmt|;
specifier|private
name|LayoutPage
name|lastPageOverlayPage
decl_stmt|;
specifier|private
name|LayoutPage
name|oddPageOverlayPage
decl_stmt|;
specifier|private
name|LayoutPage
name|evenPageOverlayPage
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|Integer
argument_list|,
name|PDDocument
argument_list|>
name|specificPageOverlay
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|PDDocument
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|Integer
argument_list|,
name|LayoutPage
argument_list|>
name|specificPageOverlayPage
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|LayoutPage
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Position
name|overlayPosition
init|=
name|Position
operator|.
name|BACKGROUND
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|useNonSeqParser
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
name|String
name|inputFile
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|String
name|outputFile
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|String
name|defaultOverlayFile
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|String
name|firstPageOverlayFile
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|String
name|lastPageOverlayFile
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|String
name|oddPageOverlayFile
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|String
name|evenPageOverlayFile
init|=
literal|null
decl_stmt|;
comment|// Command line options
specifier|private
specifier|static
specifier|final
name|String
name|POSITION
init|=
literal|"-position"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ODD
init|=
literal|"-odd"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EVEN
init|=
literal|"-even"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FIRST
init|=
literal|"-first"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LAST
init|=
literal|"-last"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PAGE
init|=
literal|"-page"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NONSEQ
init|=
literal|"-nonSeq"
decl_stmt|;
comment|/**      * This will overlay a document and write out the results.      *      * @param args command line arguments      * @throws Exception if something went wrong      * @see #USAGE      */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
specifier|final
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|specificPageOverlayFile
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// input arguments
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|arg
init|=
name|args
index|[
name|i
index|]
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|inputFile
operator|=
name|arg
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
operator|(
name|args
operator|.
name|length
operator|-
literal|1
operator|)
condition|)
block|{
name|outputFile
operator|=
name|arg
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
name|POSITION
argument_list|)
operator|&&
operator|(
operator|(
name|i
operator|+
literal|1
operator|)
operator|<
name|args
operator|.
name|length
operator|)
condition|)
block|{
if|if
condition|(
name|Position
operator|.
name|FOREGROUND
operator|.
name|toString
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|args
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
name|overlayPosition
operator|=
name|Position
operator|.
name|FOREGROUND
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Position
operator|.
name|BACKGROUND
operator|.
name|toString
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|args
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
name|overlayPosition
operator|=
name|Position
operator|.
name|BACKGROUND
expr_stmt|;
block|}
else|else
block|{
name|usage
argument_list|()
expr_stmt|;
block|}
name|i
operator|+=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
name|ODD
argument_list|)
operator|&&
operator|(
operator|(
name|i
operator|+
literal|1
operator|)
operator|<
name|args
operator|.
name|length
operator|)
condition|)
block|{
name|oddPageOverlayFile
operator|=
name|args
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|trim
argument_list|()
expr_stmt|;
name|i
operator|+=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
name|EVEN
argument_list|)
operator|&&
operator|(
operator|(
name|i
operator|+
literal|1
operator|)
operator|<
name|args
operator|.
name|length
operator|)
condition|)
block|{
name|evenPageOverlayFile
operator|=
name|args
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|trim
argument_list|()
expr_stmt|;
name|i
operator|+=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
name|FIRST
argument_list|)
operator|&&
operator|(
operator|(
name|i
operator|+
literal|1
operator|)
operator|<
name|args
operator|.
name|length
operator|)
condition|)
block|{
name|firstPageOverlayFile
operator|=
name|args
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|trim
argument_list|()
expr_stmt|;
name|i
operator|+=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
name|LAST
argument_list|)
operator|&&
operator|(
operator|(
name|i
operator|+
literal|1
operator|)
operator|<
name|args
operator|.
name|length
operator|)
condition|)
block|{
name|lastPageOverlayFile
operator|=
name|args
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|trim
argument_list|()
expr_stmt|;
name|i
operator|+=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
name|PAGE
argument_list|)
operator|&&
operator|(
operator|(
name|i
operator|+
literal|2
operator|)
operator|<
name|args
operator|.
name|length
operator|)
operator|&&
operator|(
name|isInteger
argument_list|(
name|args
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|trim
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|specificPageOverlayFile
operator|.
name|put
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|,
name|args
index|[
name|i
operator|+
literal|2
index|]
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|NONSEQ
argument_list|)
condition|)
block|{
name|useNonSeqParser
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|defaultOverlayFile
operator|==
literal|null
condition|)
block|{
name|defaultOverlayFile
operator|=
name|arg
expr_stmt|;
block|}
else|else
block|{
name|usage
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|(
name|inputFile
operator|==
literal|null
operator|)
operator|||
operator|(
name|outputFile
operator|==
literal|null
operator|)
condition|)
block|{
name|usage
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|OverlayPDF
name|overlayer
init|=
operator|new
name|OverlayPDF
argument_list|()
decl_stmt|;
name|overlayer
operator|.
name|overlay
argument_list|(
name|specificPageOverlayFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Overlay failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|private
specifier|static
name|void
name|usage
parameter_list|()
block|{
name|StringBuilder
name|message
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|message
operator|.
name|append
argument_list|(
literal|"usage: java -jar pdfbox-app-x.y.z.jar OverlayPDF<input.pdf> [OPTIONS]<output.pdf>\n"
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
literal|"<input.pdf>                                        input file\n"
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
literal|"<defaultOverlay.pdf>                               default overlay file\n"
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
literal|"  -odd<oddPageOverlay.pdf>                          overlay file used for odd pages\n"
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
literal|"  -even<evenPageOverlay.pdf>                        overlay file used for even pages\n"
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
literal|"  -first<firstPageOverlay.pdf>                      overlay file used for the first page\n"
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
literal|"  -last<lastPageOverlay.pdf>                        overlay file used for the last page\n"
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
literal|"  -page<pageNumber><specificPageOverlay.pdf>       overlay file used for "
operator|+
literal|"the given page number, may occur more than once\n"
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
literal|"  -position foreground|background                    where to put the overlay "
operator|+
literal|"file: foreground or background\n"
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
literal|"  -nonSeq                                            enables the new non-sequential parser\n"
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
literal|"<output.pdf>                                       output file\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|message
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will add overlays to a documents.      *      * @param specificPageOverlayFile map of overlay files for specific pages      * @throws IOException exception      * @throws COSVisitorException exception      */
specifier|public
name|void
name|overlay
parameter_list|(
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|specificPageOverlayFile
parameter_list|)
throws|throws
name|IOException
throws|,
name|COSVisitorException
block|{
name|PDDocument
name|sourcePDFDocument
init|=
literal|null
decl_stmt|;
name|PDDocument
name|defaultOverlay
init|=
literal|null
decl_stmt|;
name|PDDocument
name|firstPageOverlay
init|=
literal|null
decl_stmt|;
name|PDDocument
name|lastPageOverlay
init|=
literal|null
decl_stmt|;
name|PDDocument
name|oddPageOverlay
init|=
literal|null
decl_stmt|;
name|PDDocument
name|evenPageOverlay
init|=
literal|null
decl_stmt|;
try|try
block|{
name|sourcePDFDocument
operator|=
name|PDDocument
operator|.
name|load
argument_list|(
name|inputFile
argument_list|)
expr_stmt|;
if|if
condition|(
name|defaultOverlayFile
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|useNonSeqParser
condition|)
block|{
name|defaultOverlay
operator|=
name|PDDocument
operator|.
name|loadNonSeq
argument_list|(
operator|new
name|File
argument_list|(
name|defaultOverlayFile
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|defaultOverlay
operator|=
name|PDDocument
operator|.
name|load
argument_list|(
name|defaultOverlayFile
argument_list|)
expr_stmt|;
block|}
name|defaultOverlayPage
operator|=
name|getLayoutPage
argument_list|(
name|defaultOverlay
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|firstPageOverlayFile
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|useNonSeqParser
condition|)
block|{
name|firstPageOverlay
operator|=
name|PDDocument
operator|.
name|loadNonSeq
argument_list|(
operator|new
name|File
argument_list|(
name|firstPageOverlayFile
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|firstPageOverlay
operator|=
name|PDDocument
operator|.
name|load
argument_list|(
name|firstPageOverlayFile
argument_list|)
expr_stmt|;
block|}
name|firstPageOverlayPage
operator|=
name|getLayoutPage
argument_list|(
name|firstPageOverlay
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lastPageOverlayFile
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|useNonSeqParser
condition|)
block|{
name|lastPageOverlay
operator|=
name|PDDocument
operator|.
name|loadNonSeq
argument_list|(
operator|new
name|File
argument_list|(
name|lastPageOverlayFile
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lastPageOverlay
operator|=
name|PDDocument
operator|.
name|load
argument_list|(
name|lastPageOverlayFile
argument_list|)
expr_stmt|;
block|}
name|lastPageOverlayPage
operator|=
name|getLayoutPage
argument_list|(
name|lastPageOverlay
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|oddPageOverlayFile
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|useNonSeqParser
condition|)
block|{
name|oddPageOverlay
operator|=
name|PDDocument
operator|.
name|loadNonSeq
argument_list|(
operator|new
name|File
argument_list|(
name|oddPageOverlayFile
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|oddPageOverlay
operator|=
name|PDDocument
operator|.
name|load
argument_list|(
name|oddPageOverlayFile
argument_list|)
expr_stmt|;
block|}
name|oddPageOverlayPage
operator|=
name|getLayoutPage
argument_list|(
name|oddPageOverlay
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|evenPageOverlayFile
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|useNonSeqParser
condition|)
block|{
name|evenPageOverlay
operator|=
name|PDDocument
operator|.
name|loadNonSeq
argument_list|(
operator|new
name|File
argument_list|(
name|evenPageOverlayFile
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|evenPageOverlay
operator|=
name|PDDocument
operator|.
name|load
argument_list|(
name|evenPageOverlayFile
argument_list|)
expr_stmt|;
block|}
name|evenPageOverlayPage
operator|=
name|getLayoutPage
argument_list|(
name|evenPageOverlay
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|e
range|:
name|specificPageOverlayFile
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|PDDocument
name|doc
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|useNonSeqParser
condition|)
block|{
name|doc
operator|=
name|PDDocument
operator|.
name|loadNonSeq
argument_list|(
operator|new
name|File
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doc
operator|=
name|PDDocument
operator|.
name|load
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|specificPageOverlay
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|specificPageOverlayPage
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|getLayoutPage
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|PDDocumentCatalog
name|pdfCatalog
init|=
name|sourcePDFDocument
operator|.
name|getDocumentCatalog
argument_list|()
decl_stmt|;
name|processPages
argument_list|(
name|pdfCatalog
operator|.
name|getAllPages
argument_list|()
argument_list|)
expr_stmt|;
name|sourcePDFDocument
operator|.
name|save
argument_list|(
name|outputFile
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|sourcePDFDocument
operator|!=
literal|null
condition|)
block|{
name|sourcePDFDocument
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|defaultOverlay
operator|!=
literal|null
condition|)
block|{
name|defaultOverlay
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|firstPageOverlay
operator|!=
literal|null
condition|)
block|{
name|firstPageOverlay
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|lastPageOverlay
operator|!=
literal|null
condition|)
block|{
name|lastPageOverlay
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|oddPageOverlay
operator|!=
literal|null
condition|)
block|{
name|oddPageOverlay
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|evenPageOverlay
operator|!=
literal|null
condition|)
block|{
name|evenPageOverlay
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|PDDocument
argument_list|>
name|e
range|:
name|specificPageOverlay
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|specificPageOverlay
operator|.
name|clear
argument_list|()
expr_stmt|;
name|specificPageOverlayPage
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|isInteger
parameter_list|(
name|String
name|str
parameter_list|)
block|{
try|try
block|{
name|Integer
operator|.
name|parseInt
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Stores the overlay page information.      */
specifier|private
specifier|static
class|class
name|LayoutPage
block|{
specifier|private
specifier|final
name|PDRectangle
name|overlayMediaBox
decl_stmt|;
specifier|private
specifier|final
name|COSStream
name|overlayContentStream
decl_stmt|;
specifier|private
specifier|final
name|COSDictionary
name|overlayResources
decl_stmt|;
specifier|private
name|LayoutPage
parameter_list|(
name|PDRectangle
name|mediaBox
parameter_list|,
name|COSStream
name|contentStream
parameter_list|,
name|COSDictionary
name|resources
parameter_list|)
block|{
name|overlayMediaBox
operator|=
name|mediaBox
expr_stmt|;
name|overlayContentStream
operator|=
name|contentStream
expr_stmt|;
name|overlayResources
operator|=
name|resources
expr_stmt|;
block|}
block|}
specifier|private
name|LayoutPage
name|getLayoutPage
parameter_list|(
name|PDDocument
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|PDDocumentCatalog
name|catalog
init|=
name|doc
operator|.
name|getDocumentCatalog
argument_list|()
decl_stmt|;
name|PDPage
name|page
init|=
operator|(
name|PDPage
operator|)
name|catalog
operator|.
name|getAllPages
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|COSBase
name|contents
init|=
name|page
operator|.
name|getCOSDictionary
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|CONTENTS
argument_list|)
decl_stmt|;
name|PDResources
name|resources
init|=
name|page
operator|.
name|findResources
argument_list|()
decl_stmt|;
if|if
condition|(
name|resources
operator|==
literal|null
condition|)
block|{
name|resources
operator|=
operator|new
name|PDResources
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|LayoutPage
argument_list|(
name|page
operator|.
name|getMediaBox
argument_list|()
argument_list|,
name|createContentStream
argument_list|(
name|contents
argument_list|)
argument_list|,
name|resources
operator|.
name|getCOSDictionary
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|COSStream
name|createContentStream
parameter_list|(
name|COSBase
name|contents
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|COSStream
argument_list|>
name|contentStreams
init|=
name|createContentStreamList
argument_list|(
name|contents
argument_list|)
decl_stmt|;
comment|// concatenate streams
name|COSStream
name|concatStream
init|=
operator|new
name|COSStream
argument_list|(
operator|new
name|RandomAccessBuffer
argument_list|()
argument_list|)
decl_stmt|;
name|OutputStream
name|out
init|=
name|concatStream
operator|.
name|createUnfilteredStream
argument_list|()
decl_stmt|;
for|for
control|(
name|COSStream
name|contentStream
range|:
name|contentStreams
control|)
block|{
name|InputStream
name|in
init|=
name|contentStream
operator|.
name|getUnfilteredStream
argument_list|()
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|2048
index|]
decl_stmt|;
name|int
name|n
decl_stmt|;
while|while
condition|(
operator|(
name|n
operator|=
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|concatStream
operator|.
name|setFilters
argument_list|(
name|COSName
operator|.
name|FLATE_DECODE
argument_list|)
expr_stmt|;
return|return
name|concatStream
return|;
block|}
specifier|private
name|List
argument_list|<
name|COSStream
argument_list|>
name|createContentStreamList
parameter_list|(
name|COSBase
name|contents
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|COSStream
argument_list|>
name|contentStreams
init|=
operator|new
name|ArrayList
argument_list|<
name|COSStream
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|contents
operator|instanceof
name|COSStream
condition|)
block|{
name|contentStreams
operator|.
name|add
argument_list|(
operator|(
name|COSStream
operator|)
name|contents
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|contents
operator|instanceof
name|COSArray
condition|)
block|{
for|for
control|(
name|COSBase
name|item
range|:
operator|(
name|COSArray
operator|)
name|contents
control|)
block|{
name|contentStreams
operator|.
name|addAll
argument_list|(
name|createContentStreamList
argument_list|(
name|item
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|contents
operator|instanceof
name|COSObject
condition|)
block|{
name|contentStreams
operator|.
name|addAll
argument_list|(
name|createContentStreamList
argument_list|(
operator|(
operator|(
name|COSObject
operator|)
name|contents
operator|)
operator|.
name|getObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Contents are unknown type:"
operator|+
name|contents
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|contentStreams
return|;
block|}
specifier|private
name|void
name|processPages
parameter_list|(
name|List
argument_list|<
name|?
argument_list|>
name|pages
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|pageCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Object
name|pageObject
range|:
name|pages
control|)
block|{
name|PDPage
name|page
init|=
operator|(
name|PDPage
operator|)
name|pageObject
decl_stmt|;
name|COSDictionary
name|pageDictionary
init|=
name|page
operator|.
name|getCOSDictionary
argument_list|()
decl_stmt|;
name|COSBase
name|contents
init|=
name|pageDictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|CONTENTS
argument_list|)
decl_stmt|;
name|COSArray
name|contentArray
init|=
operator|new
name|COSArray
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|overlayPosition
condition|)
block|{
case|case
name|FOREGROUND
case|:
comment|// save state
name|contentArray
operator|.
name|add
argument_list|(
name|createStream
argument_list|(
literal|"q\n"
argument_list|)
argument_list|)
expr_stmt|;
comment|// original content
if|if
condition|(
name|contents
operator|instanceof
name|COSStream
condition|)
block|{
name|contentArray
operator|.
name|add
argument_list|(
name|contents
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|contents
operator|instanceof
name|COSArray
condition|)
block|{
name|contentArray
operator|.
name|addAll
argument_list|(
operator|(
name|COSArray
operator|)
name|contents
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown content type:"
operator|+
name|contents
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|// restore state
name|contentArray
operator|.
name|add
argument_list|(
name|createStream
argument_list|(
literal|"Q\n"
argument_list|)
argument_list|)
expr_stmt|;
comment|// overlay content
name|overlayPage
argument_list|(
name|contentArray
argument_list|,
name|page
argument_list|,
name|pageCount
operator|+
literal|1
argument_list|,
name|pages
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|BACKGROUND
case|:
comment|// overlay content
name|overlayPage
argument_list|(
name|contentArray
argument_list|,
name|page
argument_list|,
name|pageCount
operator|+
literal|1
argument_list|,
name|pages
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// original content
if|if
condition|(
name|contents
operator|instanceof
name|COSStream
condition|)
block|{
name|contentArray
operator|.
name|add
argument_list|(
name|contents
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|contents
operator|instanceof
name|COSArray
condition|)
block|{
name|contentArray
operator|.
name|addAll
argument_list|(
operator|(
name|COSArray
operator|)
name|contents
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown content type:"
operator|+
name|contents
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown type of position:"
operator|+
name|overlayPosition
argument_list|)
throw|;
block|}
name|pageDictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|CONTENTS
argument_list|,
name|contentArray
argument_list|)
expr_stmt|;
name|pageCount
operator|++
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|overlayPage
parameter_list|(
name|COSArray
name|array
parameter_list|,
name|PDPage
name|page
parameter_list|,
name|int
name|pageNumber
parameter_list|,
name|int
name|numberOfPages
parameter_list|)
throws|throws
name|IOException
block|{
name|LayoutPage
name|layoutPage
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|specificPageOverlayPage
operator|.
name|containsKey
argument_list|(
name|pageNumber
argument_list|)
condition|)
block|{
name|layoutPage
operator|=
name|specificPageOverlayPage
operator|.
name|get
argument_list|(
name|pageNumber
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|pageNumber
operator|==
literal|1
operator|)
operator|&&
operator|(
name|firstPageOverlayPage
operator|!=
literal|null
operator|)
condition|)
block|{
name|layoutPage
operator|=
name|firstPageOverlayPage
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|pageNumber
operator|==
name|numberOfPages
operator|)
operator|&&
operator|(
name|lastPageOverlayPage
operator|!=
literal|null
operator|)
condition|)
block|{
name|layoutPage
operator|=
name|lastPageOverlayPage
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|pageNumber
operator|%
literal|2
operator|==
literal|1
operator|)
operator|&&
operator|(
name|oddPageOverlayPage
operator|!=
literal|null
operator|)
condition|)
block|{
name|layoutPage
operator|=
name|oddPageOverlayPage
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|pageNumber
operator|%
literal|2
operator|==
literal|0
operator|)
operator|&&
operator|(
name|evenPageOverlayPage
operator|!=
literal|null
operator|)
condition|)
block|{
name|layoutPage
operator|=
name|evenPageOverlayPage
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|defaultOverlayPage
operator|!=
literal|null
condition|)
block|{
name|layoutPage
operator|=
name|defaultOverlayPage
expr_stmt|;
block|}
if|if
condition|(
name|layoutPage
operator|!=
literal|null
condition|)
block|{
name|PDResources
name|resources
init|=
name|page
operator|.
name|findResources
argument_list|()
decl_stmt|;
if|if
condition|(
name|resources
operator|==
literal|null
condition|)
block|{
name|resources
operator|=
operator|new
name|PDResources
argument_list|()
expr_stmt|;
name|page
operator|.
name|setResources
argument_list|(
name|resources
argument_list|)
expr_stmt|;
block|}
name|String
name|xObjectId
init|=
name|createOverlayXObject
argument_list|(
name|page
argument_list|,
name|layoutPage
argument_list|,
name|layoutPage
operator|.
name|overlayContentStream
argument_list|)
decl_stmt|;
name|array
operator|.
name|add
argument_list|(
name|createOverlayStream
argument_list|(
name|page
argument_list|,
name|layoutPage
argument_list|,
name|xObjectId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|createOverlayXObject
parameter_list|(
name|PDPage
name|page
parameter_list|,
name|LayoutPage
name|layoutPage
parameter_list|,
name|COSStream
name|contentStream
parameter_list|)
block|{
name|PDResources
name|resources
init|=
name|page
operator|.
name|findResources
argument_list|()
decl_stmt|;
comment|// determine new ID
name|COSDictionary
name|dict
init|=
operator|(
name|COSDictionary
operator|)
name|resources
operator|.
name|getCOSDictionary
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|XOBJECT
argument_list|)
decl_stmt|;
if|if
condition|(
name|dict
operator|==
literal|null
condition|)
block|{
name|dict
operator|=
operator|new
name|COSDictionary
argument_list|()
expr_stmt|;
name|resources
operator|.
name|getCOSDictionary
argument_list|()
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|XOBJECT
argument_list|,
name|dict
argument_list|)
expr_stmt|;
block|}
name|String
name|xObjectId
init|=
name|MapUtil
operator|.
name|getNextUniqueKey
argument_list|(
name|resources
operator|.
name|getXObjects
argument_list|()
argument_list|,
name|XOBJECT_PREFIX
argument_list|)
decl_stmt|;
comment|// wrap the layout content in a BBox and add it to page
name|COSStream
name|xobj
init|=
name|contentStream
decl_stmt|;
name|xobj
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|RESOURCES
argument_list|,
name|layoutPage
operator|.
name|overlayResources
argument_list|)
expr_stmt|;
name|xobj
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|TYPE
argument_list|,
name|COSName
operator|.
name|XOBJECT
argument_list|)
expr_stmt|;
name|xobj
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|,
name|COSName
operator|.
name|FORM
argument_list|)
expr_stmt|;
name|xobj
operator|.
name|setInt
argument_list|(
name|COSName
operator|.
name|FORMTYPE
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|COSArray
name|matrix
init|=
operator|new
name|COSArray
argument_list|()
decl_stmt|;
name|matrix
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|matrix
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|matrix
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|matrix
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|matrix
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|matrix
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|xobj
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|MATRIX
argument_list|,
name|matrix
argument_list|)
expr_stmt|;
name|COSArray
name|bbox
init|=
operator|new
name|COSArray
argument_list|()
decl_stmt|;
name|bbox
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|bbox
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|bbox
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
operator|(
name|int
operator|)
name|layoutPage
operator|.
name|overlayMediaBox
operator|.
name|getWidth
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|bbox
operator|.
name|add
argument_list|(
name|COSInteger
operator|.
name|get
argument_list|(
operator|(
name|int
operator|)
name|layoutPage
operator|.
name|overlayMediaBox
operator|.
name|getHeight
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|xobj
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|BBOX
argument_list|,
name|bbox
argument_list|)
expr_stmt|;
name|dict
operator|.
name|setItem
argument_list|(
name|xObjectId
argument_list|,
name|xobj
argument_list|)
expr_stmt|;
return|return
name|xObjectId
return|;
block|}
specifier|private
name|COSStream
name|createOverlayStream
parameter_list|(
name|PDPage
name|page
parameter_list|,
name|LayoutPage
name|layoutPage
parameter_list|,
name|String
name|xObjectId
parameter_list|)
throws|throws
name|IOException
block|{
comment|// create a new content stream that executes the XObject content
name|PDRectangle
name|pageMediaBox
init|=
name|page
operator|.
name|getMediaBox
argument_list|()
decl_stmt|;
name|float
name|scale
init|=
literal|1
decl_stmt|;
name|float
name|hShift
init|=
operator|(
name|pageMediaBox
operator|.
name|getWidth
argument_list|()
operator|-
name|layoutPage
operator|.
name|overlayMediaBox
operator|.
name|getWidth
argument_list|()
operator|)
operator|/
literal|2.0f
decl_stmt|;
name|float
name|vShift
init|=
operator|(
name|pageMediaBox
operator|.
name|getHeight
argument_list|()
operator|-
name|layoutPage
operator|.
name|overlayMediaBox
operator|.
name|getHeight
argument_list|()
operator|)
operator|/
literal|2.0f
decl_stmt|;
return|return
name|createStream
argument_list|(
literal|"q\nq "
operator|+
name|scale
operator|+
literal|" 0 0 "
operator|+
name|scale
operator|+
literal|" "
operator|+
name|hShift
operator|+
literal|" "
operator|+
name|vShift
operator|+
literal|" cm /"
operator|+
name|xObjectId
operator|+
literal|" Do Q\nQ\n"
argument_list|)
return|;
block|}
specifier|private
name|COSStream
name|createStream
parameter_list|(
name|String
name|content
parameter_list|)
throws|throws
name|IOException
block|{
name|COSStream
name|stream
init|=
operator|new
name|COSStream
argument_list|(
operator|new
name|RandomAccessBuffer
argument_list|()
argument_list|)
decl_stmt|;
name|OutputStream
name|out
init|=
name|stream
operator|.
name|createUnfilteredStream
argument_list|()
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|content
operator|.
name|getBytes
argument_list|(
literal|"ISO-8859-1"
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|stream
operator|.
name|setFilters
argument_list|(
name|COSName
operator|.
name|FLATE_DECODE
argument_list|)
expr_stmt|;
return|return
name|stream
return|;
block|}
block|}
end_class

end_unit

