begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDStream
import|;
end_import

begin_comment
comment|/**  * load document and write with all streams decoded.  *  * @author Michael Traut  */
end_comment

begin_class
specifier|public
class|class
name|WriteDecodedDoc
block|{
specifier|private
specifier|static
specifier|final
name|String
name|PASSWORD
init|=
literal|"-password"
decl_stmt|;
comment|/**      * Constructor.      */
specifier|public
name|WriteDecodedDoc
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**      * This will perform the document reading, decoding and writing.      *      * @param in The filename used for input.      * @param out The filename used for output.      * @param password The password to open the document.      *      * @throws IOException if the output could not be written      */
specifier|public
name|void
name|doIt
parameter_list|(
name|String
name|in
parameter_list|,
name|String
name|out
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|IOException
block|{
name|PDDocument
name|doc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|doc
operator|=
name|PDDocument
operator|.
name|load
argument_list|(
operator|new
name|File
argument_list|(
name|in
argument_list|)
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setAllSecurityToBeRemoved
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|COSObject
argument_list|>
name|i
init|=
name|doc
operator|.
name|getDocument
argument_list|()
operator|.
name|getObjects
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|COSBase
name|base
init|=
name|i
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|base
operator|instanceof
name|COSStream
condition|)
block|{
name|COSStream
name|stream
init|=
operator|(
name|COSStream
operator|)
name|base
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
operator|new
name|PDStream
argument_list|(
name|stream
argument_list|)
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|stream
operator|.
name|removeItem
argument_list|(
name|COSName
operator|.
name|FILTER
argument_list|)
expr_stmt|;
name|OutputStream
name|streamOut
init|=
name|stream
operator|.
name|createOutputStream
argument_list|()
decl_stmt|;
name|streamOut
operator|.
name|write
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|streamOut
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|doc
operator|.
name|getDocumentCatalog
argument_list|()
expr_stmt|;
name|doc
operator|.
name|save
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
block|{
name|doc
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * This will write a PDF document with completely decoded streams.      *<br />      * see usage() for commandline      *      * @param args command line arguments      * @throws java.io.IOException if the output could not be written      */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
comment|// suppress the Dock icon on OS X
name|System
operator|.
name|setProperty
argument_list|(
literal|"apple.awt.UIElement"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|WriteDecodedDoc
name|app
init|=
operator|new
name|WriteDecodedDoc
argument_list|()
decl_stmt|;
name|String
name|password
init|=
literal|""
decl_stmt|;
name|String
name|pdfFile
init|=
literal|null
decl_stmt|;
name|String
name|outputFile
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|PASSWORD
argument_list|)
condition|)
block|{
name|i
operator|++
expr_stmt|;
if|if
condition|(
name|i
operator|>=
name|args
operator|.
name|length
condition|)
block|{
name|usage
argument_list|()
expr_stmt|;
block|}
name|password
operator|=
name|args
index|[
name|i
index|]
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|pdfFile
operator|==
literal|null
condition|)
block|{
name|pdfFile
operator|=
name|args
index|[
name|i
index|]
expr_stmt|;
block|}
else|else
block|{
name|outputFile
operator|=
name|args
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|pdfFile
operator|==
literal|null
condition|)
block|{
name|usage
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|outputFile
operator|==
literal|null
condition|)
block|{
name|outputFile
operator|=
name|calculateOutputFilename
argument_list|(
name|pdfFile
argument_list|)
expr_stmt|;
block|}
name|app
operator|.
name|doIt
argument_list|(
name|pdfFile
argument_list|,
name|outputFile
argument_list|,
name|password
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|String
name|calculateOutputFilename
parameter_list|(
name|String
name|filename
parameter_list|)
block|{
name|String
name|outputFilename
decl_stmt|;
if|if
condition|(
name|filename
operator|.
name|toLowerCase
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".pdf"
argument_list|)
condition|)
block|{
name|outputFilename
operator|=
name|filename
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|filename
operator|.
name|length
argument_list|()
operator|-
literal|4
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|outputFilename
operator|=
name|filename
expr_stmt|;
block|}
name|outputFilename
operator|+=
literal|"_unc.pdf"
expr_stmt|;
return|return
name|outputFilename
return|;
block|}
comment|/**      * This will print out a message telling how to use this example.      */
specifier|private
specifier|static
name|void
name|usage
parameter_list|()
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"usage: java -jar pdfbox-app-x.y.z.jar WriteDecodedDoc [OPTIONS]<input-file> [output-file]\n"
operator|+
literal|"  -password<password>      Password to decrypt the document\n"
operator|+
literal|"<input-file>              The PDF document to be decompressed\n"
operator|+
literal|"  [output-file]             The filename for the decompressed pdf\n"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

