begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|tools
operator|.
name|imageio
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|ImageWriteParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|metadata
operator|.
name|IIOInvalidTreeException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|metadata
operator|.
name|IIOMetadata
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|metadata
operator|.
name|IIOMetadataNode
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|BufferedImage
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|tools
operator|.
name|imageio
operator|.
name|MetaUtil
operator|.
name|SUN_TIFF_FORMAT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|tools
operator|.
name|imageio
operator|.
name|MetaUtil
operator|.
name|debugLogMetadata
import|;
end_import

begin_comment
comment|/**  * Used by ImageIOUtil to write TIFF files.  * @author Tilman Hausherr  */
end_comment

begin_class
specifier|final
class|class
name|TIFFUtil
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TIFFUtil
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|TIFFUtil
parameter_list|()
block|{     }
comment|/**      * Sets the ImageIO parameter compression type based on the given image.      * @param image buffered image used to decide compression type      * @param param ImageIO write parameter to update      */
specifier|public
specifier|static
name|void
name|setCompressionType
parameter_list|(
name|ImageWriteParam
name|param
parameter_list|,
name|BufferedImage
name|image
parameter_list|)
block|{
comment|// avoid error: first compression type is RLE, not optimal and incorrect for color images
comment|// TODO expose this choice to the user?
if|if
condition|(
name|image
operator|.
name|getType
argument_list|()
operator|==
name|BufferedImage
operator|.
name|TYPE_BYTE_BINARY
operator|&&
name|image
operator|.
name|getColorModel
argument_list|()
operator|.
name|getPixelSize
argument_list|()
operator|==
literal|1
condition|)
block|{
name|param
operator|.
name|setCompressionType
argument_list|(
literal|"CCITT T.6"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|param
operator|.
name|setCompressionType
argument_list|(
literal|"LZW"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Updates the given ImageIO metadata with Sun's custom TIFF tags.      * {@see https://svn.apache.org/repos/asf/xmlgraphics/commons/tags/commons-1_3_1/src/java/org/      *       apache/xmlgraphics/image/writer/imageio/ImageIOTIFFImageWriter.java}      * {@see http://download.java.net/media/jai-imageio/javadoc/1.0_01/com/sun/media/imageio/      *       plugins/tiff/package-summary.html}      * {@see http://partners.adobe.com/public/developer/tiff/index.html}      * @param image buffered image which will be written      * @param metadata ImageIO metadata      * @param dpi image dots per inch      */
specifier|public
specifier|static
name|void
name|updateMetadata
parameter_list|(
name|IIOMetadata
name|metadata
parameter_list|,
name|BufferedImage
name|image
parameter_list|,
name|int
name|dpi
parameter_list|)
block|{
name|debugLogMetadata
argument_list|(
name|metadata
argument_list|,
name|SUN_TIFF_FORMAT
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|SUN_TIFF_FORMAT
operator|.
name|equals
argument_list|(
name|metadata
operator|.
name|getNativeMetadataFormatName
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using unknown TIFF image writer: "
operator|+
name|metadata
operator|.
name|getNativeMetadataFormatName
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|IIOMetadataNode
name|root
init|=
operator|new
name|IIOMetadataNode
argument_list|(
name|SUN_TIFF_FORMAT
argument_list|)
decl_stmt|;
name|IIOMetadataNode
name|ifd
decl_stmt|;
if|if
condition|(
name|root
operator|.
name|getElementsByTagName
argument_list|(
literal|"TIFFIFD"
argument_list|)
operator|.
name|getLength
argument_list|()
operator|==
literal|0
condition|)
block|{
name|ifd
operator|=
operator|new
name|IIOMetadataNode
argument_list|(
literal|"TIFFIFD"
argument_list|)
expr_stmt|;
name|ifd
operator|.
name|setAttribute
argument_list|(
literal|"tagSets"
argument_list|,
literal|"com.sun.media.imageio.plugins.tiff.BaselineTIFFTagSet"
argument_list|)
expr_stmt|;
name|root
operator|.
name|appendChild
argument_list|(
name|ifd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ifd
operator|=
operator|(
name|IIOMetadataNode
operator|)
name|root
operator|.
name|getElementsByTagName
argument_list|(
literal|"TIFFIFD"
argument_list|)
operator|.
name|item
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// standard metadata does not work, so we set the DPI manually
name|ifd
operator|.
name|appendChild
argument_list|(
name|createRationalField
argument_list|(
literal|282
argument_list|,
literal|"XResolution"
argument_list|,
name|dpi
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ifd
operator|.
name|appendChild
argument_list|(
name|createRationalField
argument_list|(
literal|283
argument_list|,
literal|"YResolution"
argument_list|,
name|dpi
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ifd
operator|.
name|appendChild
argument_list|(
name|createShortField
argument_list|(
literal|296
argument_list|,
literal|"ResolutionUnit"
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Inch
name|ifd
operator|.
name|appendChild
argument_list|(
name|createLongField
argument_list|(
literal|278
argument_list|,
literal|"RowsPerStrip"
argument_list|,
name|image
operator|.
name|getHeight
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ifd
operator|.
name|appendChild
argument_list|(
name|createAsciiField
argument_list|(
literal|305
argument_list|,
literal|"Software"
argument_list|,
literal|"PDFBOX"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|image
operator|.
name|getType
argument_list|()
operator|==
name|BufferedImage
operator|.
name|TYPE_BYTE_BINARY
operator|&&
name|image
operator|.
name|getColorModel
argument_list|()
operator|.
name|getPixelSize
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// set PhotometricInterpretation WhiteIsZero
comment|// because of bug in Windows XP preview
name|ifd
operator|.
name|appendChild
argument_list|(
name|createShortField
argument_list|(
literal|262
argument_list|,
literal|"PhotometricInterpretation"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|metadata
operator|.
name|mergeTree
argument_list|(
name|SUN_TIFF_FORMAT
argument_list|,
name|root
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IIOInvalidTreeException
name|e
parameter_list|)
block|{
comment|// should never happen
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|debugLogMetadata
argument_list|(
name|metadata
argument_list|,
name|SUN_TIFF_FORMAT
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|IIOMetadataNode
name|createShortField
parameter_list|(
name|int
name|tiffTagNumber
parameter_list|,
name|String
name|name
parameter_list|,
name|int
name|val
parameter_list|)
block|{
name|IIOMetadataNode
name|field
decl_stmt|,
name|arrayNode
decl_stmt|,
name|valueNode
decl_stmt|;
name|field
operator|=
operator|new
name|IIOMetadataNode
argument_list|(
literal|"TIFFField"
argument_list|)
expr_stmt|;
name|field
operator|.
name|setAttribute
argument_list|(
literal|"number"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|tiffTagNumber
argument_list|)
argument_list|)
expr_stmt|;
name|field
operator|.
name|setAttribute
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|arrayNode
operator|=
operator|new
name|IIOMetadataNode
argument_list|(
literal|"TIFFShorts"
argument_list|)
expr_stmt|;
name|field
operator|.
name|appendChild
argument_list|(
name|arrayNode
argument_list|)
expr_stmt|;
name|valueNode
operator|=
operator|new
name|IIOMetadataNode
argument_list|(
literal|"TIFFShort"
argument_list|)
expr_stmt|;
name|arrayNode
operator|.
name|appendChild
argument_list|(
name|valueNode
argument_list|)
expr_stmt|;
name|valueNode
operator|.
name|setAttribute
argument_list|(
literal|"value"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|field
return|;
block|}
specifier|private
specifier|static
name|IIOMetadataNode
name|createAsciiField
parameter_list|(
name|int
name|number
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|)
block|{
name|IIOMetadataNode
name|field
decl_stmt|,
name|arrayNode
decl_stmt|,
name|valueNode
decl_stmt|;
name|field
operator|=
operator|new
name|IIOMetadataNode
argument_list|(
literal|"TIFFField"
argument_list|)
expr_stmt|;
name|field
operator|.
name|setAttribute
argument_list|(
literal|"number"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|number
argument_list|)
argument_list|)
expr_stmt|;
name|field
operator|.
name|setAttribute
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|arrayNode
operator|=
operator|new
name|IIOMetadataNode
argument_list|(
literal|"TIFFAsciis"
argument_list|)
expr_stmt|;
name|field
operator|.
name|appendChild
argument_list|(
name|arrayNode
argument_list|)
expr_stmt|;
name|valueNode
operator|=
operator|new
name|IIOMetadataNode
argument_list|(
literal|"TIFFAscii"
argument_list|)
expr_stmt|;
name|arrayNode
operator|.
name|appendChild
argument_list|(
name|valueNode
argument_list|)
expr_stmt|;
name|valueNode
operator|.
name|setAttribute
argument_list|(
literal|"value"
argument_list|,
name|val
argument_list|)
expr_stmt|;
return|return
name|field
return|;
block|}
specifier|private
specifier|static
name|IIOMetadataNode
name|createLongField
parameter_list|(
name|int
name|number
parameter_list|,
name|String
name|name
parameter_list|,
name|long
name|val
parameter_list|)
block|{
name|IIOMetadataNode
name|field
decl_stmt|,
name|arrayNode
decl_stmt|,
name|valueNode
decl_stmt|;
name|field
operator|=
operator|new
name|IIOMetadataNode
argument_list|(
literal|"TIFFField"
argument_list|)
expr_stmt|;
name|field
operator|.
name|setAttribute
argument_list|(
literal|"number"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|number
argument_list|)
argument_list|)
expr_stmt|;
name|field
operator|.
name|setAttribute
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|arrayNode
operator|=
operator|new
name|IIOMetadataNode
argument_list|(
literal|"TIFFLongs"
argument_list|)
expr_stmt|;
name|field
operator|.
name|appendChild
argument_list|(
name|arrayNode
argument_list|)
expr_stmt|;
name|valueNode
operator|=
operator|new
name|IIOMetadataNode
argument_list|(
literal|"TIFFLong"
argument_list|)
expr_stmt|;
name|arrayNode
operator|.
name|appendChild
argument_list|(
name|valueNode
argument_list|)
expr_stmt|;
name|valueNode
operator|.
name|setAttribute
argument_list|(
literal|"value"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|field
return|;
block|}
specifier|private
specifier|static
name|IIOMetadataNode
name|createRationalField
parameter_list|(
name|int
name|number
parameter_list|,
name|String
name|name
parameter_list|,
name|int
name|numerator
parameter_list|,
name|int
name|denominator
parameter_list|)
block|{
name|IIOMetadataNode
name|field
decl_stmt|,
name|arrayNode
decl_stmt|,
name|valueNode
decl_stmt|;
name|field
operator|=
operator|new
name|IIOMetadataNode
argument_list|(
literal|"TIFFField"
argument_list|)
expr_stmt|;
name|field
operator|.
name|setAttribute
argument_list|(
literal|"number"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|number
argument_list|)
argument_list|)
expr_stmt|;
name|field
operator|.
name|setAttribute
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|arrayNode
operator|=
operator|new
name|IIOMetadataNode
argument_list|(
literal|"TIFFRationals"
argument_list|)
expr_stmt|;
name|field
operator|.
name|appendChild
argument_list|(
name|arrayNode
argument_list|)
expr_stmt|;
name|valueNode
operator|=
operator|new
name|IIOMetadataNode
argument_list|(
literal|"TIFFRational"
argument_list|)
expr_stmt|;
name|arrayNode
operator|.
name|appendChild
argument_list|(
name|valueNode
argument_list|)
expr_stmt|;
name|valueNode
operator|.
name|setAttribute
argument_list|(
literal|"value"
argument_list|,
name|numerator
operator|+
literal|"/"
operator|+
name|denominator
argument_list|)
expr_stmt|;
return|return
name|field
return|;
block|}
block|}
end_class

end_unit

