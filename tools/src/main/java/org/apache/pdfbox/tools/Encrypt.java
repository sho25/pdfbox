begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|encryption
operator|.
name|AccessPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|encryption
operator|.
name|PublicKeyProtectionPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|encryption
operator|.
name|PublicKeyRecipient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|encryption
operator|.
name|StandardProtectionPolicy
import|;
end_import

begin_comment
comment|/**  * This will read a document from the filesystem, encrypt it and and then write  * the results to the filesystem.  *  * @author  Ben Litchfield  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|Encrypt
block|{
specifier|private
name|Encrypt
parameter_list|()
block|{     }
comment|/**      * This is the entry point for the application.      *      * @param args The command-line arguments.      *      * @throws IOException If there is an error decrypting the document.      * @throws CertificateException If there is an error with a certificate.      */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
throws|,
name|CertificateException
block|{
comment|// suppress the Dock icon on OS X
name|System
operator|.
name|setProperty
argument_list|(
literal|"apple.awt.UIElement"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|Encrypt
name|encrypt
init|=
operator|new
name|Encrypt
argument_list|()
decl_stmt|;
name|encrypt
operator|.
name|encrypt
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|encrypt
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
throws|,
name|CertificateException
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|1
condition|)
block|{
name|usage
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|AccessPermission
name|ap
init|=
operator|new
name|AccessPermission
argument_list|()
decl_stmt|;
name|String
name|infile
init|=
literal|null
decl_stmt|;
name|String
name|outfile
init|=
literal|null
decl_stmt|;
name|String
name|certFile
init|=
literal|null
decl_stmt|;
name|String
name|userPassword
init|=
literal|""
decl_stmt|;
name|String
name|ownerPassword
init|=
literal|""
decl_stmt|;
name|int
name|keyLength
init|=
literal|256
decl_stmt|;
name|PDDocument
name|document
init|=
literal|null
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|key
init|=
name|args
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"-O"
argument_list|)
condition|)
block|{
name|ownerPassword
operator|=
name|args
index|[
operator|++
name|i
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"-U"
argument_list|)
condition|)
block|{
name|userPassword
operator|=
name|args
index|[
operator|++
name|i
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"-canAssemble"
argument_list|)
condition|)
block|{
name|ap
operator|.
name|setCanAssembleDocument
argument_list|(
name|args
index|[
operator|++
name|i
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"-canExtractContent"
argument_list|)
condition|)
block|{
name|ap
operator|.
name|setCanExtractContent
argument_list|(
name|args
index|[
operator|++
name|i
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"-canExtractForAccessibility"
argument_list|)
condition|)
block|{
name|ap
operator|.
name|setCanExtractForAccessibility
argument_list|(
name|args
index|[
operator|++
name|i
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"-canFillInForm"
argument_list|)
condition|)
block|{
name|ap
operator|.
name|setCanFillInForm
argument_list|(
name|args
index|[
operator|++
name|i
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"-canModify"
argument_list|)
condition|)
block|{
name|ap
operator|.
name|setCanModify
argument_list|(
name|args
index|[
operator|++
name|i
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"-canModifyAnnotations"
argument_list|)
condition|)
block|{
name|ap
operator|.
name|setCanModifyAnnotations
argument_list|(
name|args
index|[
operator|++
name|i
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"-canPrint"
argument_list|)
condition|)
block|{
name|ap
operator|.
name|setCanPrint
argument_list|(
name|args
index|[
operator|++
name|i
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"-canPrintDegraded"
argument_list|)
condition|)
block|{
name|ap
operator|.
name|setCanPrintDegraded
argument_list|(
name|args
index|[
operator|++
name|i
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"-certFile"
argument_list|)
condition|)
block|{
name|certFile
operator|=
name|args
index|[
operator|++
name|i
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"-keyLength"
argument_list|)
condition|)
block|{
try|try
block|{
name|keyLength
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|NumberFormatException
argument_list|(
literal|"Error: -keyLength is not an integer '"
operator|+
name|args
index|[
name|i
index|]
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|infile
operator|==
literal|null
condition|)
block|{
name|infile
operator|=
name|key
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|outfile
operator|==
literal|null
condition|)
block|{
name|outfile
operator|=
name|key
expr_stmt|;
block|}
else|else
block|{
name|usage
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|infile
operator|==
literal|null
condition|)
block|{
name|usage
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|outfile
operator|==
literal|null
condition|)
block|{
name|outfile
operator|=
name|infile
expr_stmt|;
block|}
name|document
operator|=
name|PDDocument
operator|.
name|load
argument_list|(
operator|new
name|File
argument_list|(
name|infile
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|document
operator|.
name|isEncrypted
argument_list|()
condition|)
block|{
if|if
condition|(
name|certFile
operator|!=
literal|null
condition|)
block|{
name|PublicKeyProtectionPolicy
name|ppp
init|=
operator|new
name|PublicKeyProtectionPolicy
argument_list|()
decl_stmt|;
name|PublicKeyRecipient
name|recip
init|=
operator|new
name|PublicKeyRecipient
argument_list|()
decl_stmt|;
name|recip
operator|.
name|setPermission
argument_list|(
name|ap
argument_list|)
expr_stmt|;
name|CertificateFactory
name|cf
init|=
name|CertificateFactory
operator|.
name|getInstance
argument_list|(
literal|"X.509"
argument_list|)
decl_stmt|;
try|try
init|(
name|InputStream
name|inStream
init|=
operator|new
name|FileInputStream
argument_list|(
name|certFile
argument_list|)
init|)
block|{
name|X509Certificate
name|certificate
init|=
operator|(
name|X509Certificate
operator|)
name|cf
operator|.
name|generateCertificate
argument_list|(
name|inStream
argument_list|)
decl_stmt|;
name|recip
operator|.
name|setX509
argument_list|(
name|certificate
argument_list|)
expr_stmt|;
block|}
name|ppp
operator|.
name|addRecipient
argument_list|(
name|recip
argument_list|)
expr_stmt|;
name|ppp
operator|.
name|setEncryptionKeyLength
argument_list|(
name|keyLength
argument_list|)
expr_stmt|;
name|document
operator|.
name|protect
argument_list|(
name|ppp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|StandardProtectionPolicy
name|spp
init|=
operator|new
name|StandardProtectionPolicy
argument_list|(
name|ownerPassword
argument_list|,
name|userPassword
argument_list|,
name|ap
argument_list|)
decl_stmt|;
name|spp
operator|.
name|setEncryptionKeyLength
argument_list|(
name|keyLength
argument_list|)
expr_stmt|;
name|document
operator|.
name|protect
argument_list|(
name|spp
argument_list|)
expr_stmt|;
block|}
name|document
operator|.
name|save
argument_list|(
name|outfile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error: Document is already encrypted."
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|document
operator|!=
literal|null
condition|)
block|{
name|document
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * This will print a usage message.      */
specifier|private
specifier|static
name|void
name|usage
parameter_list|()
block|{
name|String
name|message
init|=
literal|"Usage: java -jar pdfbox-app-x.y.z.jar Encrypt [options]<inputfile> [outputfile]\n"
operator|+
literal|"\nOptions:\n"
operator|+
literal|"  -O<password>                            : Set the owner password (ignored if certFile is set)\n"
operator|+
literal|"  -U<password>                            : Set the user password (ignored if certFile is set)\n"
operator|+
literal|"  -certFile<path to cert>                 : Path to X.509 certificate\n"
operator|+
literal|"  -canAssemble<true|false>                : Set the assemble permission\n"
operator|+
literal|"  -canExtractContent<true|false>          : Set the extraction permission\n"
operator|+
literal|"  -canExtractForAccessibility<true|false> : Set the extraction permission\n"
operator|+
literal|"  -canFillInForm<true|false>              : Set the fill in form permission\n"
operator|+
literal|"  -canModify<true|false>                  : Set the modify permission\n"
operator|+
literal|"  -canModifyAnnotations<true|false>       : Set the modify annots permission\n"
operator|+
literal|"  -canPrint<true|false>                   : Set the print permission\n"
operator|+
literal|"  -canPrintDegraded<true|false>           : Set the print degraded permission\n"
operator|+
literal|"  -keyLength<length>                      : Key length in bits "
operator|+
literal|"(valid values: 40, 128 or 256, default is 256)\n"
operator|+
literal|"\nNote: By default all permissions are set to true!"
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

