begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|print
operator|.
name|PrinterJob
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|print
operator|.
name|PrintService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|rendering
operator|.
name|PDFPrinter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|rendering
operator|.
name|PDFRenderer
import|;
end_import

begin_comment
comment|/**  * This is a command line program that will print a PDF document.  *   * @author<a href="ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.4 $  */
end_comment

begin_class
specifier|public
class|class
name|PrintPDF
block|{
specifier|private
specifier|static
specifier|final
name|String
name|PASSWORD
init|=
literal|"-password"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SILENT
init|=
literal|"-silentPrint"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PRINTER_NAME
init|=
literal|"-printerName"
decl_stmt|;
comment|/**      * private constructor.      */
specifier|private
name|PrintPDF
parameter_list|()
block|{
comment|// static class
block|}
comment|/**      * Infamous main method.      *       * @param args Command line arguments, should be one and a reference to a file.      *       * @throws Exception If there is an error parsing the document.      */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|password
init|=
literal|""
decl_stmt|;
name|String
name|pdfFile
init|=
literal|null
decl_stmt|;
name|boolean
name|silentPrint
init|=
literal|false
decl_stmt|;
name|String
name|printerName
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|PASSWORD
argument_list|)
condition|)
block|{
name|i
operator|++
expr_stmt|;
if|if
condition|(
name|i
operator|>=
name|args
operator|.
name|length
condition|)
block|{
name|usage
argument_list|()
expr_stmt|;
block|}
name|password
operator|=
name|args
index|[
name|i
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|PRINTER_NAME
argument_list|)
condition|)
block|{
name|i
operator|++
expr_stmt|;
if|if
condition|(
name|i
operator|>=
name|args
operator|.
name|length
condition|)
block|{
name|usage
argument_list|()
expr_stmt|;
block|}
name|printerName
operator|=
name|args
index|[
name|i
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|SILENT
argument_list|)
condition|)
block|{
name|silentPrint
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|pdfFile
operator|=
name|args
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
if|if
condition|(
name|pdfFile
operator|==
literal|null
condition|)
block|{
name|usage
argument_list|()
expr_stmt|;
block|}
name|PDDocument
name|document
init|=
literal|null
decl_stmt|;
try|try
block|{
name|document
operator|=
name|PDDocument
operator|.
name|load
argument_list|(
name|pdfFile
argument_list|)
expr_stmt|;
if|if
condition|(
name|document
operator|.
name|isEncrypted
argument_list|()
condition|)
block|{
name|document
operator|.
name|decrypt
argument_list|(
name|password
argument_list|)
expr_stmt|;
block|}
name|PrinterJob
name|printJob
init|=
name|PrinterJob
operator|.
name|getPrinterJob
argument_list|()
decl_stmt|;
name|printJob
operator|.
name|setJobName
argument_list|(
operator|new
name|File
argument_list|(
name|pdfFile
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|printerName
operator|!=
literal|null
condition|)
block|{
name|PrintService
index|[]
name|printService
init|=
name|PrinterJob
operator|.
name|lookupPrintServices
argument_list|()
decl_stmt|;
name|boolean
name|printerFound
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
operator|!
name|printerFound
operator|&&
name|i
operator|<
name|printService
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|printService
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|.
name|indexOf
argument_list|(
name|printerName
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|printJob
operator|.
name|setPrintService
argument_list|(
name|printService
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|printerFound
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
name|PDFPrinter
name|printer
init|=
operator|new
name|PDFPrinter
argument_list|(
name|document
argument_list|)
decl_stmt|;
if|if
condition|(
name|silentPrint
condition|)
block|{
name|printer
operator|.
name|silentPrint
argument_list|(
name|printJob
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|printJob
operator|.
name|printDialog
argument_list|()
condition|)
block|{
name|printer
operator|.
name|print
argument_list|(
name|printJob
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|document
operator|!=
literal|null
condition|)
block|{
name|document
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * This will print the usage requirements and exit.      */
specifier|private
specifier|static
name|void
name|usage
parameter_list|()
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java -jar pdfbox-app-x.y.z.jar PrintPDF [OPTIONS]<PDF file>\n"
operator|+
literal|"  -password<password>        Password to decrypt document\n"
operator|+
literal|"  -silentPrint                 Print without prompting for printer info\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

