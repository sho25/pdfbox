begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|tools
operator|.
name|pdfdebugger
operator|.
name|streampane
operator|.
name|tooltip
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|BadLocationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|JTextComponent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDResources
import|;
end_import

begin_interface
interface|interface
name|ToolTip
block|{
name|String
name|getToolTipText
parameter_list|()
function_decl|;
block|}
end_interface

begin_comment
comment|/**  * @author Khyrul Bashar  * A class that provieds the tooltip for an operator.  */
end_comment

begin_class
specifier|public
class|class
name|ToolTipController
block|{
specifier|private
specifier|final
specifier|static
name|String
name|FONT_OPERATOR
init|=
literal|"Tf"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|STROKING_COLOR
init|=
literal|"SCN"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|STROKING_COLOR_SPACE
init|=
literal|"CS"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|NON_STROKING_COLOR_SPACE
init|=
literal|"cs"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|NON_STROKING_COLOR
init|=
literal|"scn"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|RGB_STROKING_COLOR
init|=
literal|"RG"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|RGB_NON_STROKING_COLOR
init|=
literal|"rg"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|CMYK_STROKING_COLOR
init|=
literal|"K"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|CMYK_NON_STROKING_COLOR
init|=
literal|"k"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|GRAY_STROKING_COLOR
init|=
literal|"G"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|GRAY_NON_STROKING_COLOR
init|=
literal|"g"
decl_stmt|;
specifier|private
specifier|final
name|PDResources
name|resources
decl_stmt|;
specifier|private
name|JTextComponent
name|textComponent
decl_stmt|;
comment|/**      * Constructor.      * @param resources PDResources instance.      */
specifier|public
name|ToolTipController
parameter_list|(
name|PDResources
name|resources
parameter_list|)
block|{
name|this
operator|.
name|resources
operator|=
name|resources
expr_stmt|;
block|}
specifier|static
name|ArrayList
argument_list|<
name|String
argument_list|>
name|getWords
parameter_list|(
name|String
name|str
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|words
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|string
range|:
name|str
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
control|)
block|{
name|string
operator|=
name|string
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|string
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|&&
operator|!
name|string
operator|.
name|equals
argument_list|(
literal|"\n"
argument_list|)
condition|)
block|{
name|words
operator|.
name|add
argument_list|(
name|string
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|words
return|;
block|}
comment|/**      * Returns the tooltip text for the operator. null if there isn't any tooltip.      * @param offset The position of the mouse in the text component.      * @param textComponent JTextComponent instance.      * @return Tooltip text, String instance.      */
specifier|public
name|String
name|getToolTip
parameter_list|(
name|int
name|offset
parameter_list|,
name|JTextComponent
name|textComponent
parameter_list|)
block|{
name|this
operator|.
name|textComponent
operator|=
name|textComponent
expr_stmt|;
name|String
name|word
init|=
name|getWord
argument_list|(
name|offset
argument_list|)
decl_stmt|;
name|String
name|rowText
init|=
name|getRowText
argument_list|(
name|offset
argument_list|)
decl_stmt|;
if|if
condition|(
name|word
operator|!=
literal|null
condition|)
block|{
name|ToolTip
name|toolTip
decl_stmt|;
if|if
condition|(
name|word
operator|.
name|equals
argument_list|(
name|FONT_OPERATOR
argument_list|)
condition|)
block|{
name|toolTip
operator|=
operator|new
name|FontToolTip
argument_list|(
name|resources
argument_list|,
name|rowText
argument_list|)
expr_stmt|;
return|return
name|toolTip
operator|.
name|getToolTipText
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|word
operator|.
name|equals
argument_list|(
name|STROKING_COLOR
argument_list|)
condition|)
block|{
name|String
name|colorSpaceName
init|=
name|findColorSapce
argument_list|(
name|offset
argument_list|,
name|STROKING_COLOR_SPACE
argument_list|)
decl_stmt|;
if|if
condition|(
name|colorSpaceName
operator|!=
literal|null
condition|)
block|{
name|toolTip
operator|=
operator|new
name|SCNToolTip
argument_list|(
name|resources
argument_list|,
name|colorSpaceName
argument_list|,
name|rowText
argument_list|)
expr_stmt|;
return|return
name|toolTip
operator|.
name|getToolTipText
argument_list|()
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|word
operator|.
name|equals
argument_list|(
name|NON_STROKING_COLOR
argument_list|)
condition|)
block|{
name|String
name|colorSpaceName
init|=
name|findColorSapce
argument_list|(
name|offset
argument_list|,
name|NON_STROKING_COLOR_SPACE
argument_list|)
decl_stmt|;
if|if
condition|(
name|colorSpaceName
operator|!=
literal|null
condition|)
block|{
name|toolTip
operator|=
operator|new
name|SCNToolTip
argument_list|(
name|resources
argument_list|,
name|colorSpaceName
argument_list|,
name|rowText
argument_list|)
expr_stmt|;
return|return
name|toolTip
operator|.
name|getToolTipText
argument_list|()
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|word
operator|.
name|equals
argument_list|(
name|RGB_STROKING_COLOR
argument_list|)
operator|||
name|word
operator|.
name|equals
argument_list|(
name|RGB_NON_STROKING_COLOR
argument_list|)
condition|)
block|{
name|toolTip
operator|=
operator|new
name|RGToolTip
argument_list|(
name|rowText
argument_list|)
expr_stmt|;
return|return
name|toolTip
operator|.
name|getToolTipText
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|word
operator|.
name|equals
argument_list|(
name|CMYK_STROKING_COLOR
argument_list|)
operator|||
name|word
operator|.
name|equals
argument_list|(
name|CMYK_NON_STROKING_COLOR
argument_list|)
condition|)
block|{
name|toolTip
operator|=
operator|new
name|KToolTip
argument_list|(
name|rowText
argument_list|)
expr_stmt|;
return|return
name|toolTip
operator|.
name|getToolTipText
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|word
operator|.
name|equals
argument_list|(
name|GRAY_STROKING_COLOR
argument_list|)
operator|||
name|word
operator|.
name|equals
argument_list|(
name|GRAY_NON_STROKING_COLOR
argument_list|)
condition|)
block|{
name|toolTip
operator|=
operator|new
name|GToolTip
argument_list|(
name|rowText
argument_list|)
expr_stmt|;
return|return
name|toolTip
operator|.
name|getToolTipText
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|String
name|findColorSapce
parameter_list|(
name|int
name|offset
parameter_list|,
name|String
name|colorSpaceType
parameter_list|)
block|{
try|try
block|{
while|while
condition|(
name|offset
operator|!=
operator|-
literal|1
condition|)
block|{
name|offset
operator|=
name|Utilities
operator|.
name|getPositionAbove
argument_list|(
name|textComponent
argument_list|,
name|offset
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|String
name|previousRowText
init|=
name|getRowText
argument_list|(
name|offset
argument_list|)
decl_stmt|;
if|if
condition|(
name|isColorSpace
argument_list|(
name|colorSpaceType
argument_list|,
name|previousRowText
argument_list|)
condition|)
block|{
if|if
condition|(
name|previousRowText
operator|!=
literal|null
condition|)
block|{
return|return
name|previousRowText
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
index|[
literal|0
index|]
return|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|BadLocationException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|boolean
name|isColorSpace
parameter_list|(
name|String
name|colorSpaceType
parameter_list|,
name|String
name|rowText
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|words
init|=
name|getWords
argument_list|(
name|rowText
argument_list|)
decl_stmt|;
if|if
condition|(
name|words
operator|.
name|size
argument_list|()
operator|==
literal|2
condition|)
block|{
if|if
condition|(
name|words
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
name|colorSpaceType
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|String
name|getWord
parameter_list|(
name|int
name|offset
parameter_list|)
block|{
try|try
block|{
name|int
name|start
init|=
name|Utilities
operator|.
name|getWordStart
argument_list|(
name|textComponent
argument_list|,
name|offset
argument_list|)
decl_stmt|;
name|int
name|end
init|=
name|Utilities
operator|.
name|getWordEnd
argument_list|(
name|textComponent
argument_list|,
name|offset
argument_list|)
decl_stmt|;
return|return
name|textComponent
operator|.
name|getDocument
argument_list|()
operator|.
name|getText
argument_list|(
name|start
argument_list|,
name|end
operator|-
name|start
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|BadLocationException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|String
name|getRowText
parameter_list|(
name|int
name|offset
parameter_list|)
block|{
try|try
block|{
name|int
name|rowStart
init|=
name|Utilities
operator|.
name|getRowStart
argument_list|(
name|textComponent
argument_list|,
name|offset
argument_list|)
decl_stmt|;
name|int
name|rowEnd
init|=
name|Utilities
operator|.
name|getRowEnd
argument_list|(
name|textComponent
argument_list|,
name|offset
argument_list|)
decl_stmt|;
return|return
name|textComponent
operator|.
name|getDocument
argument_list|()
operator|.
name|getText
argument_list|(
name|rowStart
argument_list|,
name|rowEnd
operator|-
name|rowStart
operator|+
literal|1
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|BadLocationException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

