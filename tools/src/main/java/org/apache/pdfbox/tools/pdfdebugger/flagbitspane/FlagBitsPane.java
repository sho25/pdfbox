begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|tools
operator|.
name|pdfdebugger
operator|.
name|flagbitspane
package|;
end_package

begin_comment
comment|/**  * @author Khyrul Bashar  */
end_comment

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Dimension
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Font
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|GridBagConstraints
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|GridBagLayout
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|Box
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JLabel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPanel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JScrollPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDFontDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAnnotation
import|;
end_import

begin_comment
comment|/**  * A class that displays flag bits found in many Flags entry in PDF document's dictionaries  * detail whether a particular bit is set or unset.  */
end_comment

begin_class
specifier|public
class|class
name|FlagBitsPane
block|{
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|COLUMNNAMES
init|=
block|{
literal|"Bit\nPosition"
block|,
literal|"Name"
block|,
literal|"Status"
block|}
decl_stmt|;
specifier|private
name|JPanel
name|panel
decl_stmt|;
comment|/**      * Constructor      * @param dictionary COSDictionary instance that contains the flag      * @param flagKey the flag key in the dictionary      */
specifier|public
name|FlagBitsPane
parameter_list|(
name|COSDictionary
name|dictionary
parameter_list|,
name|COSName
name|flagKey
parameter_list|)
block|{
name|initUI
argument_list|(
name|dictionary
argument_list|,
name|flagKey
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initUI
parameter_list|(
specifier|final
name|COSDictionary
name|dictionary
parameter_list|,
specifier|final
name|COSName
name|flagKey
parameter_list|)
block|{
name|Object
index|[]
index|[]
name|flagBits
init|=
name|getFlagBits
argument_list|(
name|dictionary
argument_list|,
name|flagKey
argument_list|)
decl_stmt|;
name|panel
operator|=
operator|new
name|JPanel
argument_list|()
expr_stmt|;
name|panel
operator|.
name|setLayout
argument_list|(
operator|new
name|GridBagLayout
argument_list|()
argument_list|)
expr_stmt|;
name|panel
operator|.
name|setPreferredSize
argument_list|(
operator|new
name|Dimension
argument_list|(
literal|300
argument_list|,
literal|500
argument_list|)
argument_list|)
expr_stmt|;
name|JLabel
name|flagLabel
init|=
operator|new
name|JLabel
argument_list|(
name|getFlagTypeString
argument_list|(
name|dictionary
argument_list|,
name|flagKey
argument_list|)
operator|+
literal|" Flags"
argument_list|)
decl_stmt|;
name|flagLabel
operator|.
name|setAlignmentX
argument_list|(
name|Component
operator|.
name|CENTER_ALIGNMENT
argument_list|)
expr_stmt|;
name|flagLabel
operator|.
name|setFont
argument_list|(
operator|new
name|Font
argument_list|(
name|Font
operator|.
name|MONOSPACED
argument_list|,
name|Font
operator|.
name|BOLD
argument_list|,
literal|30
argument_list|)
argument_list|)
expr_stmt|;
name|JPanel
name|flagLabelPanel
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
name|flagLabelPanel
operator|.
name|setAlignmentX
argument_list|(
name|Component
operator|.
name|LEFT_ALIGNMENT
argument_list|)
expr_stmt|;
name|flagLabelPanel
operator|.
name|add
argument_list|(
name|flagLabel
argument_list|)
expr_stmt|;
name|JLabel
name|flagValueLabel
init|=
operator|new
name|JLabel
argument_list|(
literal|"Flag value: "
operator|+
name|getFlagValue
argument_list|(
name|dictionary
argument_list|,
name|flagKey
argument_list|)
argument_list|)
decl_stmt|;
name|flagValueLabel
operator|.
name|setAlignmentX
argument_list|(
name|Component
operator|.
name|LEFT_ALIGNMENT
argument_list|)
expr_stmt|;
name|flagValueLabel
operator|.
name|setFont
argument_list|(
operator|new
name|Font
argument_list|(
name|Font
operator|.
name|MONOSPACED
argument_list|,
name|Font
operator|.
name|BOLD
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|JTable
name|table
init|=
operator|new
name|JTable
argument_list|(
name|flagBits
argument_list|,
name|COLUMNNAMES
argument_list|)
decl_stmt|;
name|JScrollPane
name|scrollPane
init|=
operator|new
name|JScrollPane
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|table
operator|.
name|setFillsViewportHeight
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scrollPane
operator|.
name|setAlignmentX
argument_list|(
name|Component
operator|.
name|LEFT_ALIGNMENT
argument_list|)
expr_stmt|;
name|Box
name|box
init|=
name|Box
operator|.
name|createVerticalBox
argument_list|()
decl_stmt|;
name|box
operator|.
name|add
argument_list|(
name|flagValueLabel
argument_list|)
expr_stmt|;
name|box
operator|.
name|add
argument_list|(
name|scrollPane
argument_list|)
expr_stmt|;
name|box
operator|.
name|setAlignmentX
argument_list|(
name|Component
operator|.
name|LEFT_ALIGNMENT
argument_list|)
expr_stmt|;
name|GridBagConstraints
name|gbc
init|=
operator|new
name|GridBagConstraints
argument_list|()
decl_stmt|;
name|gbc
operator|.
name|gridx
operator|=
literal|0
expr_stmt|;
name|gbc
operator|.
name|gridy
operator|=
literal|0
expr_stmt|;
name|gbc
operator|.
name|weighty
operator|=
literal|0.05
expr_stmt|;
name|gbc
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|HORIZONTAL
expr_stmt|;
name|gbc
operator|.
name|anchor
operator|=
name|GridBagConstraints
operator|.
name|PAGE_START
expr_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|flagLabelPanel
argument_list|,
name|gbc
argument_list|)
expr_stmt|;
name|gbc
operator|.
name|gridy
operator|=
literal|2
expr_stmt|;
name|gbc
operator|.
name|weighty
operator|=
literal|0.9
expr_stmt|;
name|gbc
operator|.
name|weightx
operator|=
literal|1
expr_stmt|;
name|gbc
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|BOTH
expr_stmt|;
name|gbc
operator|.
name|anchor
operator|=
name|GridBagConstraints
operator|.
name|BELOW_BASELINE
expr_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|box
argument_list|,
name|gbc
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getFlagTypeString
parameter_list|(
specifier|final
name|COSDictionary
name|dictionary
parameter_list|,
specifier|final
name|COSName
name|flagKey
parameter_list|)
block|{
if|if
condition|(
name|dictionary
operator|.
name|getCOSName
argument_list|(
name|COSName
operator|.
name|TYPE
argument_list|)
operator|.
name|equals
argument_list|(
name|COSName
operator|.
name|FONT_DESC
argument_list|)
operator|&&
name|flagKey
operator|.
name|equals
argument_list|(
name|COSName
operator|.
name|FLAGS
argument_list|)
condition|)
block|{
return|return
literal|"Font"
return|;
block|}
elseif|else
if|if
condition|(
name|dictionary
operator|.
name|getCOSName
argument_list|(
name|COSName
operator|.
name|TYPE
argument_list|)
operator|.
name|equals
argument_list|(
name|COSName
operator|.
name|ANNOT
argument_list|)
operator|&&
name|flagKey
operator|.
name|equals
argument_list|(
name|COSName
operator|.
name|F
argument_list|)
condition|)
block|{
return|return
literal|"Annot:"
operator|+
name|dictionary
operator|.
name|getCOSName
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|)
operator|.
name|getName
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|flagKey
operator|.
name|equals
argument_list|(
name|COSName
operator|.
name|FF
argument_list|)
operator|&&
name|flagKey
operator|.
name|equals
argument_list|(
name|COSName
operator|.
name|FF
argument_list|)
condition|)
block|{
if|if
condition|(
name|dictionary
operator|.
name|getCOSName
argument_list|(
name|COSName
operator|.
name|FT
argument_list|)
operator|.
name|equals
argument_list|(
name|COSName
operator|.
name|TX
argument_list|)
condition|)
block|{
return|return
literal|"Text field"
return|;
block|}
elseif|else
if|if
condition|(
name|dictionary
operator|.
name|getCOSName
argument_list|(
name|COSName
operator|.
name|FT
argument_list|)
operator|.
name|equals
argument_list|(
name|COSName
operator|.
name|BTN
argument_list|)
condition|)
block|{
return|return
literal|"Button field"
return|;
block|}
elseif|else
if|if
condition|(
name|dictionary
operator|.
name|getCOSName
argument_list|(
name|COSName
operator|.
name|FT
argument_list|)
operator|.
name|equals
argument_list|(
name|COSName
operator|.
name|CH
argument_list|)
condition|)
block|{
return|return
literal|"Choice field"
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|int
name|getFlagValue
parameter_list|(
specifier|final
name|COSDictionary
name|dictionary
parameter_list|,
specifier|final
name|COSName
name|flagKey
parameter_list|)
block|{
if|if
condition|(
name|dictionary
operator|.
name|getCOSName
argument_list|(
name|COSName
operator|.
name|TYPE
argument_list|)
operator|.
name|equals
argument_list|(
name|COSName
operator|.
name|FONT_DESC
argument_list|)
operator|&&
name|flagKey
operator|.
name|equals
argument_list|(
name|COSName
operator|.
name|FLAGS
argument_list|)
condition|)
block|{
return|return
name|dictionary
operator|.
name|getInt
argument_list|(
name|COSName
operator|.
name|FLAGS
argument_list|)
return|;
block|}
comment|//TODO Type key is not Required field in the dictionary. So we need a better way to Identify.
if|if
condition|(
name|dictionary
operator|.
name|getCOSName
argument_list|(
name|COSName
operator|.
name|TYPE
argument_list|)
operator|.
name|equals
argument_list|(
name|COSName
operator|.
name|ANNOT
argument_list|)
operator|&&
name|flagKey
operator|.
name|equals
argument_list|(
name|COSName
operator|.
name|F
argument_list|)
condition|)
block|{
return|return
name|dictionary
operator|.
name|getInt
argument_list|(
name|COSName
operator|.
name|F
argument_list|)
return|;
block|}
if|if
condition|(
name|dictionary
operator|.
name|containsKey
argument_list|(
name|COSName
operator|.
name|FT
argument_list|)
condition|)
block|{
return|return
name|dictionary
operator|.
name|getInt
argument_list|(
name|COSName
operator|.
name|FF
argument_list|)
return|;
block|}
return|return
literal|0
return|;
block|}
specifier|private
name|Object
index|[]
index|[]
name|getFlagBits
parameter_list|(
specifier|final
name|COSDictionary
name|dictionary
parameter_list|,
name|COSName
name|flagKey
parameter_list|)
block|{
if|if
condition|(
name|dictionary
operator|.
name|getCOSName
argument_list|(
name|COSName
operator|.
name|TYPE
argument_list|)
operator|.
name|equals
argument_list|(
name|COSName
operator|.
name|FONT_DESC
argument_list|)
operator|&&
name|flagKey
operator|.
name|equals
argument_list|(
name|COSName
operator|.
name|FLAGS
argument_list|)
condition|)
block|{
return|return
name|getFontFlagBits
argument_list|(
name|dictionary
argument_list|)
return|;
block|}
if|if
condition|(
name|dictionary
operator|.
name|getCOSName
argument_list|(
name|COSName
operator|.
name|TYPE
argument_list|)
operator|.
name|equals
argument_list|(
name|COSName
operator|.
name|ANNOT
argument_list|)
operator|&&
name|flagKey
operator|.
name|equals
argument_list|(
name|COSName
operator|.
name|F
argument_list|)
condition|)
block|{
return|return
name|getAnnotFlagBits
argument_list|(
name|dictionary
argument_list|)
return|;
block|}
if|if
condition|(
name|dictionary
operator|.
name|containsKey
argument_list|(
name|COSName
operator|.
name|FT
argument_list|)
operator|&&
name|flagKey
operator|.
name|equals
argument_list|(
name|COSName
operator|.
name|FF
argument_list|)
condition|)
block|{
return|return
name|getFieldFlagBits
argument_list|(
name|dictionary
argument_list|,
name|flagKey
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|Object
index|[]
index|[]
name|getAnnotFlagBits
parameter_list|(
name|COSDictionary
name|dictionary
parameter_list|)
block|{
name|PDAnnotation
name|annotation
init|=
operator|new
name|PDAnnotation
argument_list|(
name|dictionary
argument_list|)
block|{         }
decl_stmt|;
return|return
operator|new
name|Object
index|[]
index|[]
block|{
operator|new
name|Object
index|[]
block|{
literal|1
block|,
literal|"Invisible"
block|,
name|annotation
operator|.
name|isInvisible
argument_list|()
block|}
block|,
operator|new
name|Object
index|[]
block|{
literal|2
block|,
literal|"Hidden"
block|,
name|annotation
operator|.
name|isHidden
argument_list|()
block|}
block|,
operator|new
name|Object
index|[]
block|{
literal|3
block|,
literal|"Print"
block|,
name|annotation
operator|.
name|isPrinted
argument_list|()
block|}
block|,
operator|new
name|Object
index|[]
block|{
literal|4
block|,
literal|"NoZoom"
block|,
name|annotation
operator|.
name|isNoZoom
argument_list|()
block|}
block|,
operator|new
name|Object
index|[]
block|{
literal|5
block|,
literal|"NoRotate"
block|,
name|annotation
operator|.
name|isNoRotate
argument_list|()
block|}
block|,
operator|new
name|Object
index|[]
block|{
literal|6
block|,
literal|"NoView"
block|,
name|annotation
operator|.
name|isNoView
argument_list|()
block|}
block|,
operator|new
name|Object
index|[]
block|{
literal|7
block|,
literal|"ReadOnly"
block|,
name|annotation
operator|.
name|isReadOnly
argument_list|()
block|}
block|,
operator|new
name|Object
index|[]
block|{
literal|8
block|,
literal|"Locked"
block|,
name|annotation
operator|.
name|isLocked
argument_list|()
block|}
block|,
operator|new
name|Object
index|[]
block|{
literal|9
block|,
literal|"ToggleNoView"
block|,
name|annotation
operator|.
name|isToggleNoView
argument_list|()
block|}
block|,
operator|new
name|Object
index|[]
block|{
literal|10
block|,
literal|"LockedContents"
block|,
name|annotation
operator|.
name|isLocked
argument_list|()
block|}
block|}
return|;
block|}
specifier|private
name|Object
index|[]
index|[]
name|getFontFlagBits
parameter_list|(
specifier|final
name|COSDictionary
name|dictionary
parameter_list|)
block|{
name|PDFontDescriptor
name|fontDesc
init|=
operator|new
name|PDFontDescriptor
argument_list|(
name|dictionary
argument_list|)
decl_stmt|;
return|return
operator|new
name|Object
index|[]
index|[]
block|{
operator|new
name|Object
index|[]
block|{
literal|1
block|,
literal|"FixedPitch"
block|,
name|fontDesc
operator|.
name|isFixedPitch
argument_list|()
block|}
block|,
operator|new
name|Object
index|[]
block|{
literal|2
block|,
literal|"Serif"
block|,
name|fontDesc
operator|.
name|isSerif
argument_list|()
block|}
block|,
operator|new
name|Object
index|[]
block|{
literal|3
block|,
literal|"Symbolic"
block|,
name|fontDesc
operator|.
name|isSymbolic
argument_list|()
block|}
block|,
operator|new
name|Object
index|[]
block|{
literal|4
block|,
literal|"Script"
block|,
name|fontDesc
operator|.
name|isScript
argument_list|()
block|}
block|,
operator|new
name|Object
index|[]
block|{
literal|6
block|,
literal|"NonSymbolic"
block|,
name|fontDesc
operator|.
name|isNonSymbolic
argument_list|()
block|}
block|,
operator|new
name|Object
index|[]
block|{
literal|7
block|,
literal|"Italic"
block|,
name|fontDesc
operator|.
name|isItalic
argument_list|()
block|}
block|,
operator|new
name|Object
index|[]
block|{
literal|17
block|,
literal|"AllCap"
block|,
name|fontDesc
operator|.
name|isAllCap
argument_list|()
block|}
block|,
operator|new
name|Object
index|[]
block|{
literal|18
block|,
literal|"SmallCap"
block|,
name|fontDesc
operator|.
name|isSmallCap
argument_list|()
block|}
block|,
operator|new
name|Object
index|[]
block|{
literal|19
block|,
literal|"ForceBold"
block|,
name|fontDesc
operator|.
name|isForceBold
argument_list|()
block|}
block|}
return|;
block|}
specifier|private
name|Object
index|[]
index|[]
name|getFieldFlagBits
parameter_list|(
specifier|final
name|COSDictionary
name|dictionary
parameter_list|,
specifier|final
name|COSName
name|flagKey
parameter_list|)
block|{
name|int
name|flagValue
init|=
name|getFlagValue
argument_list|(
name|dictionary
argument_list|,
name|flagKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|dictionary
operator|.
name|getCOSName
argument_list|(
name|COSName
operator|.
name|FT
argument_list|)
operator|.
name|equals
argument_list|(
name|COSName
operator|.
name|TX
argument_list|)
condition|)
block|{
return|return
name|getTextFieldFlagBits
argument_list|(
name|flagValue
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|dictionary
operator|.
name|getCOSName
argument_list|(
name|COSName
operator|.
name|FT
argument_list|)
operator|.
name|equals
argument_list|(
name|COSName
operator|.
name|BTN
argument_list|)
condition|)
block|{
return|return
name|getButtonFieldFlagBits
argument_list|(
name|flagValue
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|dictionary
operator|.
name|getCOSName
argument_list|(
name|COSName
operator|.
name|FT
argument_list|)
operator|.
name|equals
argument_list|(
name|COSName
operator|.
name|CH
argument_list|)
condition|)
block|{
return|return
name|getChoiceFieldFlagBits
argument_list|(
name|flagValue
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|Object
index|[]
index|[]
name|getTextFieldFlagBits
parameter_list|(
specifier|final
name|int
name|flagValue
parameter_list|)
block|{
return|return
operator|new
name|Object
index|[]
index|[]
block|{
operator|new
name|Object
index|[]
block|{
literal|1
block|,
literal|"ReadOnly"
block|,
name|isFlagBitSet
argument_list|(
name|flagValue
argument_list|,
literal|1
argument_list|)
block|}
block|,
operator|new
name|Object
index|[]
block|{
literal|2
block|,
literal|"Required"
block|,
name|isFlagBitSet
argument_list|(
name|flagValue
argument_list|,
literal|2
argument_list|)
block|}
block|,
operator|new
name|Object
index|[]
block|{
literal|3
block|,
literal|"NoExport"
block|,
name|isFlagBitSet
argument_list|(
name|flagValue
argument_list|,
literal|3
argument_list|)
block|}
block|,
operator|new
name|Object
index|[]
block|{
literal|13
block|,
literal|"Multiline"
block|,
name|isFlagBitSet
argument_list|(
name|flagValue
argument_list|,
literal|13
argument_list|)
block|}
block|,
operator|new
name|Object
index|[]
block|{
literal|14
block|,
literal|"Password"
block|,
name|isFlagBitSet
argument_list|(
name|flagValue
argument_list|,
literal|14
argument_list|)
block|}
block|,
operator|new
name|Object
index|[]
block|{
literal|21
block|,
literal|"FileSelect"
block|,
name|isFlagBitSet
argument_list|(
name|flagValue
argument_list|,
literal|21
argument_list|)
block|}
block|,
operator|new
name|Object
index|[]
block|{
literal|23
block|,
literal|"DoNotSpellCheck"
block|,
name|isFlagBitSet
argument_list|(
name|flagValue
argument_list|,
literal|23
argument_list|)
block|}
block|,
operator|new
name|Object
index|[]
block|{
literal|24
block|,
literal|"DoNotScroll"
block|,
name|isFlagBitSet
argument_list|(
name|flagValue
argument_list|,
literal|24
argument_list|)
block|}
block|,
operator|new
name|Object
index|[]
block|{
literal|25
block|,
literal|"Comb"
block|,
name|isFlagBitSet
argument_list|(
name|flagValue
argument_list|,
literal|25
argument_list|)
block|}
block|,
operator|new
name|Object
index|[]
block|{
literal|26
block|,
literal|"RichText"
block|,
name|isFlagBitSet
argument_list|(
name|flagValue
argument_list|,
literal|26
argument_list|)
block|}
block|}
return|;
block|}
specifier|private
name|Object
index|[]
index|[]
name|getButtonFieldFlagBits
parameter_list|(
specifier|final
name|int
name|flagValue
parameter_list|)
block|{
return|return
operator|new
name|Object
index|[]
index|[]
block|{
operator|new
name|Object
index|[]
block|{
literal|1
block|,
literal|"ReadOnly"
block|,
name|isFlagBitSet
argument_list|(
name|flagValue
argument_list|,
literal|1
argument_list|)
block|}
block|,
operator|new
name|Object
index|[]
block|{
literal|2
block|,
literal|"Required"
block|,
name|isFlagBitSet
argument_list|(
name|flagValue
argument_list|,
literal|2
argument_list|)
block|}
block|,
operator|new
name|Object
index|[]
block|{
literal|3
block|,
literal|"NoExport"
block|,
name|isFlagBitSet
argument_list|(
name|flagValue
argument_list|,
literal|3
argument_list|)
block|}
block|,
operator|new
name|Object
index|[]
block|{
literal|15
block|,
literal|"NoToggleToOff"
block|,
name|isFlagBitSet
argument_list|(
name|flagValue
argument_list|,
literal|15
argument_list|)
block|}
block|,
operator|new
name|Object
index|[]
block|{
literal|16
block|,
literal|"Radio"
block|,
name|isFlagBitSet
argument_list|(
name|flagValue
argument_list|,
literal|16
argument_list|)
block|}
block|,
operator|new
name|Object
index|[]
block|{
literal|17
block|,
literal|"Pushbutton"
block|,
name|isFlagBitSet
argument_list|(
name|flagValue
argument_list|,
literal|17
argument_list|)
block|}
block|,
operator|new
name|Object
index|[]
block|{
literal|26
block|,
literal|"RadiosInUnison"
block|,
name|isFlagBitSet
argument_list|(
name|flagValue
argument_list|,
literal|26
argument_list|)
block|}
block|}
return|;
block|}
specifier|private
name|Object
index|[]
index|[]
name|getChoiceFieldFlagBits
parameter_list|(
specifier|final
name|int
name|flagValue
parameter_list|)
block|{
return|return
operator|new
name|Object
index|[]
index|[]
block|{
operator|new
name|Object
index|[]
block|{
literal|1
block|,
literal|"ReadOnly"
block|,
name|isFlagBitSet
argument_list|(
name|flagValue
argument_list|,
literal|1
argument_list|)
block|}
block|,
operator|new
name|Object
index|[]
block|{
literal|2
block|,
literal|"Required"
block|,
name|isFlagBitSet
argument_list|(
name|flagValue
argument_list|,
literal|2
argument_list|)
block|}
block|,
operator|new
name|Object
index|[]
block|{
literal|3
block|,
literal|"NoExport"
block|,
name|isFlagBitSet
argument_list|(
name|flagValue
argument_list|,
literal|3
argument_list|)
block|}
block|,
operator|new
name|Object
index|[]
block|{
literal|18
block|,
literal|"Combo"
block|,
name|isFlagBitSet
argument_list|(
name|flagValue
argument_list|,
literal|18
argument_list|)
block|}
block|,
operator|new
name|Object
index|[]
block|{
literal|19
block|,
literal|"Edit"
block|,
name|isFlagBitSet
argument_list|(
name|flagValue
argument_list|,
literal|19
argument_list|)
block|}
block|,
operator|new
name|Object
index|[]
block|{
literal|20
block|,
literal|"Sort"
block|,
name|isFlagBitSet
argument_list|(
name|flagValue
argument_list|,
literal|20
argument_list|)
block|}
block|,
operator|new
name|Object
index|[]
block|{
literal|22
block|,
literal|"MultiSelect"
block|,
name|isFlagBitSet
argument_list|(
name|flagValue
argument_list|,
literal|22
argument_list|)
block|}
block|,
operator|new
name|Object
index|[]
block|{
literal|23
block|,
literal|"DoNotSpellCheck"
block|,
name|isFlagBitSet
argument_list|(
name|flagValue
argument_list|,
literal|23
argument_list|)
block|}
block|,
operator|new
name|Object
index|[]
block|{
literal|27
block|,
literal|"CommitOnSelChange"
block|,
name|isFlagBitSet
argument_list|(
name|flagValue
argument_list|,
literal|27
argument_list|)
block|}
block|}
return|;
block|}
comment|/**      * Check the corresponding flag bit if set or not      * @param flagValue the flag integer      * @param bitPosition bit position to check      * @return if set return true else false      */
specifier|private
name|boolean
name|isFlagBitSet
parameter_list|(
name|int
name|flagValue
parameter_list|,
name|int
name|bitPosition
parameter_list|)
block|{
name|int
name|binaryFormat
init|=
literal|1
operator|<<
operator|(
name|bitPosition
operator|-
literal|1
operator|)
decl_stmt|;
return|return
operator|(
name|flagValue
operator|&
name|binaryFormat
operator|)
operator|==
name|binaryFormat
return|;
block|}
comment|/**      * @return returns the JPanel instance      */
specifier|public
name|JPanel
name|getPanel
parameter_list|()
block|{
return|return
name|panel
return|;
block|}
block|}
end_class

end_unit

