begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *   Licensed to the Apache Software Foundation (ASF) under one or more  *   contributor license agreements.  See the NOTICE file distributed with  *   this work for additional information regarding copyright ownership.  *   The ASF licenses this file to You under the Apache License, Version 2.0  *   (the "License"); you may not use this file except in compliance with  *   the License.  You may obtain a copy of the License at  *  *        http://www.apache.org/licenses/LICENSE-2.0  *  *   Unless required by applicable law or agreed to in writing, software  *   distributed under the License is distributed on an "AS IS" BASIS,  *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *   See the License for the specific language governing permissions and  *   limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|tools
operator|.
name|pdfdebugger
operator|.
name|flagbitspane
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDPanose
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDPanoseClassification
import|;
end_import

begin_comment
comment|/**  * @author Khyrul Bashar  * A class that provide Panose classification data  */
end_comment

begin_class
specifier|public
class|class
name|PanoseFlag
extends|extends
name|Flag
block|{
specifier|final
specifier|private
name|byte
index|[]
name|bytes
decl_stmt|;
specifier|private
specifier|final
name|COSString
name|byteValue
decl_stmt|;
comment|/**      * Constructor.      * @param dictionary COSDictionary instance. style dictionary that contains panose object.      */
specifier|public
name|PanoseFlag
parameter_list|(
name|COSDictionary
name|dictionary
parameter_list|)
block|{
name|byteValue
operator|=
operator|(
name|COSString
operator|)
name|dictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|PANOSE
argument_list|)
expr_stmt|;
name|bytes
operator|=
name|getPanoseBytes
argument_list|(
name|dictionary
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|String
name|getFlagType
parameter_list|()
block|{
return|return
literal|"Panose classification"
return|;
block|}
annotation|@
name|Override
name|String
name|getFlagValue
parameter_list|()
block|{
return|return
literal|"Panose byte :"
operator|+
name|byteValue
operator|.
name|toHexString
argument_list|()
return|;
block|}
annotation|@
name|Override
name|Object
index|[]
index|[]
name|getFlagBits
parameter_list|()
block|{
name|PDPanoseClassification
name|pc
init|=
operator|new
name|PDPanose
argument_list|(
name|bytes
argument_list|)
operator|.
name|getPanose
argument_list|()
decl_stmt|;
return|return
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|2
block|,
literal|"Family Kind"
block|,
name|pc
operator|.
name|getFamilyKind
argument_list|()
block|,
name|getFamilyKindValue
argument_list|(
name|pc
operator|.
name|getFamilyKind
argument_list|()
argument_list|)
block|}
block|,
block|{
literal|3
block|,
literal|"Serif Style"
block|,
name|pc
operator|.
name|getSerifStyle
argument_list|()
block|,
name|getSerifStyleValue
argument_list|(
name|pc
operator|.
name|getSerifStyle
argument_list|()
argument_list|)
block|}
block|,
block|{
literal|4
block|,
literal|"Weight"
block|,
name|pc
operator|.
name|getWeight
argument_list|()
block|,
name|getWeightValue
argument_list|(
name|pc
operator|.
name|getWeight
argument_list|()
argument_list|)
block|}
block|,
block|{
literal|5
block|,
literal|"Proportion"
block|,
name|pc
operator|.
name|getProportion
argument_list|()
block|,
name|getProportionValue
argument_list|(
name|pc
operator|.
name|getProportion
argument_list|()
argument_list|)
block|}
block|,
block|{
literal|6
block|,
literal|"Contrast"
block|,
name|pc
operator|.
name|getContrast
argument_list|()
block|,
name|getContrastValue
argument_list|(
name|pc
operator|.
name|getContrast
argument_list|()
argument_list|)
block|}
block|,
block|{
literal|7
block|,
literal|"Stroke Variation"
block|,
name|pc
operator|.
name|getStrokeVariation
argument_list|()
block|,
name|getStrokeVariationValue
argument_list|(
name|pc
operator|.
name|getStrokeVariation
argument_list|()
argument_list|)
block|}
block|,
block|{
literal|8
block|,
literal|"Arm Style"
block|,
name|pc
operator|.
name|getArmStyle
argument_list|()
block|,
name|getArmStyleValue
argument_list|(
name|pc
operator|.
name|getArmStyle
argument_list|()
argument_list|)
block|}
block|,
block|{
literal|9
block|,
literal|"Letterform"
block|,
name|pc
operator|.
name|getLetterform
argument_list|()
block|,
name|getLetterformValue
argument_list|(
name|pc
operator|.
name|getLetterform
argument_list|()
argument_list|)
block|}
block|,
block|{
literal|10
block|,
literal|"Midline"
block|,
name|pc
operator|.
name|getMidline
argument_list|()
block|,
name|getMidlineValue
argument_list|(
name|pc
operator|.
name|getMidline
argument_list|()
argument_list|)
block|}
block|,
block|{
literal|11
block|,
literal|"X-height"
block|,
name|pc
operator|.
name|getXHeight
argument_list|()
block|,
name|getXHeightValue
argument_list|(
name|pc
operator|.
name|getXHeight
argument_list|()
argument_list|)
block|}
block|,         }
return|;
block|}
annotation|@
name|Override
name|String
index|[]
name|getColumnNames
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"Byte Position"
block|,
literal|"Name"
block|,
literal|"Byte Value"
block|,
literal|"Value"
block|}
return|;
block|}
specifier|private
name|String
name|getFamilyKindValue
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"Any"
block|,
literal|"No Fit"
block|,
literal|"Latin Text"
block|,
literal|"Latin Hand Written"
block|,
literal|"Latin Decorative"
block|,
literal|"Latin Symbol"
block|}
index|[
name|index
index|]
return|;
block|}
specifier|private
name|String
name|getSerifStyleValue
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"Any"
block|,
literal|"No Fit"
block|,
literal|"Cove"
block|,
literal|"Obtuse Cove"
block|,
literal|"Square Cove"
block|,
literal|"Obtuse Square Cove"
block|,
literal|"Square"
block|,
literal|"Thin"
block|,
literal|"Oval"
block|,
literal|"Exaggerated"
block|,
literal|"Triangle"
block|,
literal|"Normal Sans"
block|,
literal|"Obtuse Sans"
block|,
literal|"Perpendicular Sans"
block|,
literal|"Flared"
block|,
literal|"Rounded"
block|}
index|[
name|index
index|]
return|;
block|}
specifier|private
name|String
name|getWeightValue
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"Any"
block|,
literal|"No Fit"
block|,
literal|"Very Light"
block|,
literal|"Light"
block|,
literal|"Thin"
block|,
literal|"Book"
block|,
literal|"Medium"
block|,
literal|"Demi"
block|,
literal|"Bold"
block|,
literal|"Heavy"
block|,
literal|"Black"
block|,
literal|"Extra Black"
block|}
index|[
name|index
index|]
return|;
block|}
specifier|private
name|String
name|getProportionValue
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"Any"
block|,
literal|"No fit"
block|,
literal|"Old Style"
block|,
literal|"Modern"
block|,
literal|"Even Width"
block|,
literal|"Extended"
block|,
literal|"Condensed"
block|,
literal|"Very Extended"
block|,
literal|"Very Condensed"
block|,
literal|"Monospaced"
block|}
index|[
name|index
index|]
return|;
block|}
specifier|private
name|String
name|getContrastValue
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"Any"
block|,
literal|"No Fit"
block|,
literal|"None"
block|,
literal|"Very Low"
block|,
literal|"Low"
block|,
literal|"Medium Low"
block|,
literal|"Medium"
block|,
literal|"Medium High"
block|,
literal|"High"
block|,
literal|"Very High"
block|}
index|[
name|index
index|]
return|;
block|}
specifier|private
name|String
name|getStrokeVariationValue
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"Any"
block|,
literal|"No Fit"
block|,
literal|"No Variation"
block|,
literal|"Gradual/Diagonal"
block|,
literal|"Gradual/Transitional"
block|,
literal|"Gradual/Vertical"
block|,
literal|"Gradual/Horizontal"
block|,
literal|"Rapid/Vertical"
block|,
literal|"Rapid/Horizontal"
block|,
literal|"Instant/Vertical"
block|,
literal|"Instant/Horizontal"
block|,         }
index|[
name|index
index|]
return|;
block|}
specifier|private
name|String
name|getArmStyleValue
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"Any"
block|,
literal|"No Fit"
block|,
literal|"Straight Arms/Horizontal"
block|,
literal|"Straight Arms/Wedge"
block|,
literal|"Straight Arms/Vertical"
block|,
literal|"Straight Arms/Single Serif"
block|,
literal|"Straight Arms/Double Serif"
block|,
literal|"Non-Straight/Horizontal"
block|,
literal|"Non-Straight/Wedge"
block|,
literal|"Non-Straight/Vertical"
block|,
literal|"Non-Straight/Single Serif"
block|,
literal|"Non-Straight/Double Serif"
block|,         }
index|[
name|index
index|]
return|;
block|}
specifier|private
name|String
name|getLetterformValue
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"Any"
block|,
literal|"No Fit"
block|,
literal|"Normal/Contact"
block|,
literal|"Normal/Weighted"
block|,
literal|"Normal/Boxed"
block|,
literal|"Normal/Flattened"
block|,
literal|"Normal/Rounded"
block|,
literal|"Normal/Off Center"
block|,
literal|"Normal/Square"
block|,
literal|"Oblique/Contact"
block|,
literal|"Oblique/Weighted"
block|,
literal|"Oblique/Boxed"
block|,
literal|"Oblique/Flattened"
block|,
literal|"Oblique/Rounded"
block|,
literal|"Oblique/Off Center"
block|,
literal|"Oblique/Square"
block|,         }
index|[
name|index
index|]
return|;
block|}
specifier|private
name|String
name|getMidlineValue
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"Any"
block|,
literal|"No Fit"
block|,
literal|"Standard/Trimmed"
block|,
literal|"Standard/Pointed"
block|,
literal|"Standard/Serifed"
block|,
literal|"High/Trimmed"
block|,
literal|"High/Pointed"
block|,
literal|"High/Serifed"
block|,
literal|"Constant/Trimmed"
block|,
literal|"Constant/Pointed"
block|,
literal|"Constant/Serifed"
block|,
literal|"Low/Trimmed"
block|,
literal|"Low/Pointed"
block|,
literal|"Low/Serifed"
block|}
index|[
name|index
index|]
return|;
block|}
specifier|private
name|String
name|getXHeightValue
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"Any"
block|,
literal|"No Fit"
block|,
literal|"Constant/Small"
block|,
literal|"Constant/Standard"
block|,
literal|"Constant/Large"
block|,
literal|"Ducking/Small"
block|,
literal|"Ducking/Standard"
block|,
literal|"Ducking/Large"
block|,         }
index|[
name|index
index|]
return|;
block|}
specifier|final
specifier|public
name|byte
index|[]
name|getPanoseBytes
parameter_list|(
name|COSDictionary
name|style
parameter_list|)
block|{
if|if
condition|(
name|style
operator|!=
literal|null
condition|)
block|{
name|COSString
name|panose
init|=
operator|(
name|COSString
operator|)
name|style
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|PANOSE
argument_list|)
decl_stmt|;
return|return
name|panose
operator|.
name|getBytes
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

