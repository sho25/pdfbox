begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPageContentStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDRectangle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|image
operator|.
name|PDImageXObject
import|;
end_import

begin_comment
comment|/**  * Creates a PDF document from images.  *  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|ImageToPDF
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ImageToPDF
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|PDRectangle
name|mediaBox
init|=
name|PDRectangle
operator|.
name|LETTER
decl_stmt|;
specifier|private
name|boolean
name|landscape
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|autoOrientation
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|resize
init|=
literal|false
decl_stmt|;
specifier|private
name|ImageToPDF
parameter_list|()
block|{     }
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Args: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
comment|// suppress the Dock icon on OS X
name|System
operator|.
name|setProperty
argument_list|(
literal|"apple.awt.UIElement"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|ImageToPDF
name|app
init|=
operator|new
name|ImageToPDF
argument_list|()
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|<=
literal|2
condition|)
block|{
name|app
operator|.
name|usage
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|imageFilenames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|pdfPath
init|=
name|args
index|[
name|args
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|pdfPath
operator|.
name|endsWith
argument_list|(
literal|".pdf"
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Last argument must be the destination .pdf file"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"-resize"
operator|.
name|equals
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
condition|)
block|{
comment|// will be modified to something more flexible
name|app
operator|.
name|resize
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-landscape"
operator|.
name|equals
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|app
operator|.
name|setLandscape
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-autoOrientation"
operator|.
name|equals
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|app
operator|.
name|setAutoOrientation
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-pageSize"
operator|.
name|equals
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|i
operator|++
expr_stmt|;
name|PDRectangle
name|rectangle
init|=
name|createRectangle
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|rectangle
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown argument: "
operator|+
name|args
index|[
name|i
index|]
argument_list|)
throw|;
block|}
name|app
operator|.
name|setMediaBox
argument_list|(
name|rectangle
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown argument: "
operator|+
name|args
index|[
name|i
index|]
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|imageFilenames
operator|.
name|add
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
try|try
init|(
name|PDDocument
name|doc
init|=
operator|new
name|PDDocument
argument_list|()
init|)
block|{
name|app
operator|.
name|createPDFFromImages
argument_list|(
name|doc
argument_list|,
name|imageFilenames
argument_list|)
expr_stmt|;
name|doc
operator|.
name|save
argument_list|(
name|pdfPath
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|createPDFFromImages
parameter_list|(
name|PDDocument
name|doc
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|imageFilenames
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|imageFileName
range|:
name|imageFilenames
control|)
block|{
name|PDImageXObject
name|pdImage
init|=
name|PDImageXObject
operator|.
name|createFromFile
argument_list|(
name|imageFileName
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|PDRectangle
name|actualMediaBox
init|=
name|mediaBox
decl_stmt|;
if|if
condition|(
operator|(
name|autoOrientation
operator|&&
name|pdImage
operator|.
name|getWidth
argument_list|()
operator|>
name|pdImage
operator|.
name|getHeight
argument_list|()
operator|)
operator|||
name|landscape
condition|)
block|{
name|actualMediaBox
operator|=
operator|new
name|PDRectangle
argument_list|(
name|mediaBox
operator|.
name|getHeight
argument_list|()
argument_list|,
name|mediaBox
operator|.
name|getWidth
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|PDPage
name|page
init|=
operator|new
name|PDPage
argument_list|(
name|actualMediaBox
argument_list|)
decl_stmt|;
name|doc
operator|.
name|addPage
argument_list|(
name|page
argument_list|)
expr_stmt|;
try|try
init|(
name|PDPageContentStream
name|contents
init|=
operator|new
name|PDPageContentStream
argument_list|(
name|doc
argument_list|,
name|page
argument_list|)
init|)
block|{
if|if
condition|(
name|resize
condition|)
block|{
name|contents
operator|.
name|drawImage
argument_list|(
name|pdImage
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|actualMediaBox
operator|.
name|getWidth
argument_list|()
argument_list|,
name|actualMediaBox
operator|.
name|getHeight
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|contents
operator|.
name|drawImage
argument_list|(
name|pdImage
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|pdImage
operator|.
name|getWidth
argument_list|()
argument_list|,
name|pdImage
operator|.
name|getHeight
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
specifier|static
name|PDRectangle
name|createRectangle
parameter_list|(
name|String
name|paperSize
parameter_list|)
block|{
if|if
condition|(
literal|"letter"
operator|.
name|equalsIgnoreCase
argument_list|(
name|paperSize
argument_list|)
condition|)
block|{
return|return
name|PDRectangle
operator|.
name|LETTER
return|;
block|}
elseif|else
if|if
condition|(
literal|"legal"
operator|.
name|equalsIgnoreCase
argument_list|(
name|paperSize
argument_list|)
condition|)
block|{
return|return
name|PDRectangle
operator|.
name|LEGAL
return|;
block|}
elseif|else
if|if
condition|(
literal|"A0"
operator|.
name|equalsIgnoreCase
argument_list|(
name|paperSize
argument_list|)
condition|)
block|{
return|return
name|PDRectangle
operator|.
name|A0
return|;
block|}
elseif|else
if|if
condition|(
literal|"A1"
operator|.
name|equalsIgnoreCase
argument_list|(
name|paperSize
argument_list|)
condition|)
block|{
return|return
name|PDRectangle
operator|.
name|A1
return|;
block|}
elseif|else
if|if
condition|(
literal|"A2"
operator|.
name|equalsIgnoreCase
argument_list|(
name|paperSize
argument_list|)
condition|)
block|{
return|return
name|PDRectangle
operator|.
name|A2
return|;
block|}
elseif|else
if|if
condition|(
literal|"A3"
operator|.
name|equalsIgnoreCase
argument_list|(
name|paperSize
argument_list|)
condition|)
block|{
return|return
name|PDRectangle
operator|.
name|A3
return|;
block|}
elseif|else
if|if
condition|(
literal|"A4"
operator|.
name|equalsIgnoreCase
argument_list|(
name|paperSize
argument_list|)
condition|)
block|{
return|return
name|PDRectangle
operator|.
name|A4
return|;
block|}
elseif|else
if|if
condition|(
literal|"A5"
operator|.
name|equalsIgnoreCase
argument_list|(
name|paperSize
argument_list|)
condition|)
block|{
return|return
name|PDRectangle
operator|.
name|A5
return|;
block|}
elseif|else
if|if
condition|(
literal|"A6"
operator|.
name|equalsIgnoreCase
argument_list|(
name|paperSize
argument_list|)
condition|)
block|{
return|return
name|PDRectangle
operator|.
name|A6
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Sets page size of produced PDF.      *      * @return returns the page size (media box)      */
specifier|public
name|PDRectangle
name|getMediaBox
parameter_list|()
block|{
return|return
name|mediaBox
return|;
block|}
comment|/**      * Sets page size of produced PDF.      *      * @param mediaBox      */
specifier|public
name|void
name|setMediaBox
parameter_list|(
name|PDRectangle
name|mediaBox
parameter_list|)
block|{
name|this
operator|.
name|mediaBox
operator|=
name|mediaBox
expr_stmt|;
block|}
comment|/**      * Tells the paper orientation.      *      * @return true for landscape orientation      */
specifier|public
name|boolean
name|isLandscape
parameter_list|()
block|{
return|return
name|landscape
return|;
block|}
comment|/**      * Sets paper orientation.      *      * @param landscape      */
specifier|public
name|void
name|setLandscape
parameter_list|(
name|boolean
name|landscape
parameter_list|)
block|{
name|this
operator|.
name|landscape
operator|=
name|landscape
expr_stmt|;
block|}
comment|/**      * Gets whether page orientation (portrait / landscape) should be decided automatically for each      * page depending on image proportion.      *      * @return true if auto, false if not.      */
specifier|public
name|boolean
name|isAutoOrientation
parameter_list|()
block|{
return|return
name|autoOrientation
return|;
block|}
comment|/**      * Sets whether page orientation (portrait / landscape) should be decided automatically for each      * page depending on image proportion.      *      * @param autoOrientation true if auto, false if not.      */
specifier|public
name|void
name|setAutoOrientation
parameter_list|(
name|boolean
name|autoOrientation
parameter_list|)
block|{
name|this
operator|.
name|autoOrientation
operator|=
name|autoOrientation
expr_stmt|;
block|}
comment|/**      * This will print out a message telling how to use this example.      */
specifier|private
name|void
name|usage
parameter_list|()
block|{
name|StringBuilder
name|message
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|message
operator|.
name|append
argument_list|(
literal|"Usage: jar -jar pdfbox-app-x.y.z.jar ImageToPDF [options]<image-file>..<image-file><output-file>\n"
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
literal|"\nOptions:\n"
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
literal|"  -resize              : resize to page size\n"
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
literal|"  -pageSize<pageSize> : Letter (default)\n"
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
literal|"                         Legal\n"
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
literal|"                         A0\n"
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
literal|"                         A1\n"
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
literal|"                         A2\n"
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
literal|"                         A3\n"
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
literal|"                         A4\n"
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
literal|"                         A5\n"
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
literal|"                         A6\n"
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
literal|"  -landscape           : sets orientation to landscape\n"
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
literal|"  -autoOrientation     : sets orientation depending of image proportion\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|message
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

