begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|tools
operator|.
name|pdfdebugger
operator|.
name|colorpane
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_comment
comment|/**  * @author Khyrul Bashar.  */
end_comment

begin_comment
comment|/**  * Class to represent Colorant in Indexed color.  */
end_comment

begin_class
specifier|public
class|class
name|IndexedColorant
block|{
specifier|private
name|int
name|index
decl_stmt|;
specifier|private
name|float
index|[]
name|rgbValues
decl_stmt|;
comment|/**      * Constructor.      */
specifier|public
name|IndexedColorant
parameter_list|()
block|{}
specifier|public
name|int
name|getIndex
parameter_list|()
block|{
return|return
name|index
return|;
block|}
specifier|public
name|void
name|setIndex
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
block|}
specifier|public
name|void
name|setRgbValues
parameter_list|(
name|float
index|[]
name|rgbValues
parameter_list|)
block|{
name|this
operator|.
name|rgbValues
operator|=
name|rgbValues
expr_stmt|;
block|}
specifier|public
name|Color
name|getColor
parameter_list|()
block|{
return|return
operator|new
name|Color
argument_list|(
name|rgbValues
index|[
literal|0
index|]
argument_list|,
name|rgbValues
index|[
literal|1
index|]
argument_list|,
name|rgbValues
index|[
literal|2
index|]
argument_list|)
return|;
block|}
specifier|public
name|String
name|getRGBValuesString
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|float
name|i
range|:
name|rgbValues
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
call|(
name|int
call|)
argument_list|(
name|i
operator|*
literal|255
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|deleteCharAt
argument_list|(
name|builder
operator|.
name|lastIndexOf
argument_list|(
literal|","
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

