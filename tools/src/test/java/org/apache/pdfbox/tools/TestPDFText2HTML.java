begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|edit
operator|.
name|PDPageContentStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDType1Font
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|PDFTextStripper
import|;
end_import

begin_class
specifier|public
class|class
name|TestPDFText2HTML
extends|extends
name|TestCase
block|{
specifier|private
name|PDDocument
name|createDocument
parameter_list|(
name|String
name|title
parameter_list|,
name|PDFont
name|font
parameter_list|,
name|String
name|text
parameter_list|)
throws|throws
name|IOException
block|{
name|PDDocument
name|doc
init|=
operator|new
name|PDDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|getDocumentInformation
argument_list|()
operator|.
name|setTitle
argument_list|(
name|title
argument_list|)
expr_stmt|;
name|PDPage
name|page
init|=
operator|new
name|PDPage
argument_list|()
decl_stmt|;
name|doc
operator|.
name|addPage
argument_list|(
name|page
argument_list|)
expr_stmt|;
name|PDPageContentStream
name|contentStream
init|=
operator|new
name|PDPageContentStream
argument_list|(
name|doc
argument_list|,
name|page
argument_list|)
decl_stmt|;
name|contentStream
operator|.
name|beginText
argument_list|()
expr_stmt|;
name|contentStream
operator|.
name|setFont
argument_list|(
name|font
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|newLineAtOffset
argument_list|(
literal|100
argument_list|,
literal|700
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|showText
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|contentStream
operator|.
name|endText
argument_list|()
expr_stmt|;
name|contentStream
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|doc
return|;
block|}
specifier|public
name|void
name|testEscapeTitle
parameter_list|()
throws|throws
name|IOException
block|{
name|PDFTextStripper
name|stripper
init|=
operator|new
name|PDFText2HTML
argument_list|()
decl_stmt|;
name|PDDocument
name|doc
init|=
name|createDocument
argument_list|(
literal|"<script>\u3042"
argument_list|,
name|PDType1Font
operator|.
name|HELVETICA
argument_list|,
literal|"<foo>"
argument_list|)
decl_stmt|;
name|String
name|text
init|=
name|stripper
operator|.
name|getText
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|Matcher
name|m
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"<title>(.*?)</title>"
argument_list|)
operator|.
name|matcher
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|m
operator|.
name|find
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"&lt;script&gt;&#12354;"
argument_list|,
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|text
operator|.
name|indexOf
argument_list|(
literal|"&lt;foo&gt;"
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testStyle
parameter_list|()
throws|throws
name|IOException
block|{
name|PDFTextStripper
name|stripper
init|=
operator|new
name|PDFText2HTML
argument_list|()
decl_stmt|;
name|PDDocument
name|doc
init|=
name|createDocument
argument_list|(
literal|"t"
argument_list|,
name|PDType1Font
operator|.
name|HELVETICA_BOLD
argument_list|,
literal|"<bold>"
argument_list|)
decl_stmt|;
name|String
name|text
init|=
name|stripper
operator|.
name|getText
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|Matcher
name|bodyMatcher
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"<p>(.*?)</p>"
argument_list|)
operator|.
name|matcher
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"body p exists"
argument_list|,
name|bodyMatcher
operator|.
name|find
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"body p"
argument_list|,
literal|"<b>&lt;bold&gt;</b>"
argument_list|,
name|bodyMatcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

