begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright (c) 2003-2006, www.pdfbox.org  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are met:  *  * 1. Redistributions of source code must retain the above copyright notice,  *    this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright notice,  *    this list of conditions and the following disclaimer in the documentation  *    and/or other materials provided with the distribution.  * 3. Neither the name of pdfbox; nor the names of its  *    contributors may be used to endorse or promote products derived from this  *    software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * http://www.pdfbox.org  *  */
end_comment

begin_package
package|package
name|test
operator|.
name|pdfbox
operator|.
name|encryption
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|exceptions
operator|.
name|CryptographyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|encryption
operator|.
name|AccessPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|encryption
operator|.
name|PublicKeyDecryptionMaterial
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|encryption
operator|.
name|PublicKeyProtectionPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|encryption
operator|.
name|PublicKeyRecipient
import|;
end_import

begin_comment
comment|/**  * Tests for public key encryption.  *   * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.3 $  */
end_comment

begin_class
specifier|public
class|class
name|TestPublicKeyEncryption
extends|extends
name|TestCase
block|{
specifier|private
name|AccessPermission
name|accessPermission
decl_stmt|;
specifier|private
name|AccessPermission
name|accessPermission2
decl_stmt|;
specifier|private
name|File
name|publicCert1
decl_stmt|;
specifier|private
name|File
name|privateCert1
decl_stmt|;
specifier|private
name|File
name|publicCert2
decl_stmt|;
specifier|private
name|File
name|privateCert2
decl_stmt|;
specifier|private
name|File
name|input
decl_stmt|;
specifier|private
name|File
name|output
decl_stmt|;
specifier|private
name|String
name|password1
init|=
literal|"test1"
decl_stmt|;
specifier|private
name|String
name|password2
init|=
literal|"test2"
decl_stmt|;
comment|/**      * Constructor.      *       * @param name The junit test class name.      */
specifier|public
name|TestPublicKeyEncryption
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|accessPermission
operator|=
operator|new
name|AccessPermission
argument_list|()
expr_stmt|;
name|accessPermission
operator|.
name|setCanAssembleDocument
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|accessPermission
operator|.
name|setCanExtractContent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|accessPermission
operator|.
name|setCanExtractForAccessibility
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|accessPermission
operator|.
name|setCanFillInForm
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|accessPermission
operator|.
name|setCanModify
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|accessPermission
operator|.
name|setCanModifyAnnotations
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|accessPermission
operator|.
name|setCanPrint
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|accessPermission
operator|.
name|setCanPrintDegraded
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|accessPermission2
operator|=
operator|new
name|AccessPermission
argument_list|()
expr_stmt|;
name|accessPermission2
operator|.
name|setCanAssembleDocument
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|accessPermission2
operator|.
name|setCanExtractContent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|accessPermission2
operator|.
name|setCanExtractForAccessibility
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|accessPermission2
operator|.
name|setCanFillInForm
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|accessPermission2
operator|.
name|setCanModify
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|accessPermission2
operator|.
name|setCanModifyAnnotations
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|accessPermission2
operator|.
name|setCanPrint
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// it is true now !
name|accessPermission2
operator|.
name|setCanPrintDegraded
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|publicCert1
operator|=
operator|new
name|File
argument_list|(
literal|"test/encryption/test1.der"
argument_list|)
expr_stmt|;
name|privateCert1
operator|=
operator|new
name|File
argument_list|(
literal|"test/encryption/test1.pfx"
argument_list|)
expr_stmt|;
name|publicCert2
operator|=
operator|new
name|File
argument_list|(
literal|"test/encryption/test2.der"
argument_list|)
expr_stmt|;
name|privateCert2
operator|=
operator|new
name|File
argument_list|(
literal|"test/encryption/test2.pfx"
argument_list|)
expr_stmt|;
name|input
operator|=
operator|new
name|File
argument_list|(
literal|"test/input/Exolab.pdf"
argument_list|)
expr_stmt|;
name|output
operator|=
operator|new
name|File
argument_list|(
literal|"test/encryption/output.pdf"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|publicCert1
operator|.
name|exists
argument_list|()
operator|&&
name|publicCert1
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|privateCert1
operator|.
name|exists
argument_list|()
operator|&&
name|privateCert1
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|publicCert2
operator|.
name|exists
argument_list|()
operator|&&
name|publicCert2
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|privateCert2
operator|.
name|exists
argument_list|()
operator|&&
name|privateCert2
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|input
operator|.
name|exists
argument_list|()
operator|&&
name|input
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the suite of test that this class holds.      *      * @return All of the tests that this class holds.      */
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
return|return
operator|new
name|TestSuite
argument_list|(
name|TestPublicKeyEncryption
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**      * Protect a document with certificate 1 and try to open it with certificate 2      * and catch the exception.      *       * @throws Exception If there is an error during the test.      */
specifier|public
name|void
name|testProtectionError
parameter_list|()
throws|throws
name|Exception
block|{
name|PDDocument
name|doc
init|=
name|PDDocument
operator|.
name|load
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|protect
argument_list|(
name|doc
argument_list|,
name|publicCert1
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|.
name|save
argument_list|(
name|output
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|.
name|close
argument_list|()
expr_stmt|;
name|PDDocument
name|doc2
init|=
name|PDDocument
operator|.
name|load
argument_list|(
name|output
argument_list|)
decl_stmt|;
name|Exception
name|e
init|=
literal|null
decl_stmt|;
try|try
block|{
name|open
argument_list|(
name|doc2
argument_list|,
name|privateCert2
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|password2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CryptographyException
name|ex
parameter_list|)
block|{
name|e
operator|=
name|ex
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Protect a document with the public certificate and try to open it with       * the private certificate.      *       * @throws Exception If there is an error during the test.      */
specifier|public
name|void
name|testProtection
parameter_list|()
throws|throws
name|Exception
block|{
name|PDDocument
name|doc
init|=
name|PDDocument
operator|.
name|load
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|protect
argument_list|(
name|doc
argument_list|,
name|publicCert1
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
comment|//Assert.assertTrue(doc.isEncrypted());
name|doc
operator|.
name|save
argument_list|(
name|output
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|.
name|close
argument_list|()
expr_stmt|;
name|PDDocument
name|doc2
init|=
name|PDDocument
operator|.
name|load
argument_list|(
name|output
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|doc2
argument_list|)
expr_stmt|;
name|open
argument_list|(
name|doc2
argument_list|,
name|privateCert1
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|password1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|doc2
operator|.
name|isEncrypted
argument_list|()
argument_list|)
expr_stmt|;
name|AccessPermission
name|currentAp
init|=
name|doc2
operator|.
name|getCurrentAccessPermission
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|currentAp
operator|.
name|canAssembleDocument
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|currentAp
operator|.
name|canExtractContent
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|currentAp
operator|.
name|canExtractForAccessibility
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|currentAp
operator|.
name|canFillInForm
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|currentAp
operator|.
name|canModify
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|currentAp
operator|.
name|canModifyAnnotations
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|currentAp
operator|.
name|canPrint
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|currentAp
operator|.
name|canPrintDegraded
argument_list|()
argument_list|)
expr_stmt|;
name|doc2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * Protect the document for 2 recipients and try to open it.      *       * @throws Exception If there is an error during the test.      */
specifier|public
name|void
name|testMultipleRecipients
parameter_list|()
throws|throws
name|Exception
block|{
name|CertificateFactory
name|cf
init|=
name|CertificateFactory
operator|.
name|getInstance
argument_list|(
literal|"X.509"
argument_list|)
decl_stmt|;
name|PDDocument
name|doc
init|=
name|PDDocument
operator|.
name|load
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|PublicKeyProtectionPolicy
name|ppp
init|=
operator|new
name|PublicKeyProtectionPolicy
argument_list|()
decl_stmt|;
name|PublicKeyRecipient
name|recip1
init|=
operator|new
name|PublicKeyRecipient
argument_list|()
decl_stmt|;
name|PublicKeyRecipient
name|recip2
init|=
operator|new
name|PublicKeyRecipient
argument_list|()
decl_stmt|;
name|recip1
operator|.
name|setPermission
argument_list|(
name|accessPermission
argument_list|)
expr_stmt|;
name|recip2
operator|.
name|setPermission
argument_list|(
name|accessPermission2
argument_list|)
expr_stmt|;
name|InputStream
name|inStream
init|=
operator|new
name|FileInputStream
argument_list|(
name|publicCert1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|cf
argument_list|)
expr_stmt|;
name|X509Certificate
name|certificate1
init|=
operator|(
name|X509Certificate
operator|)
name|cf
operator|.
name|generateCertificate
argument_list|(
name|inStream
argument_list|)
decl_stmt|;
name|inStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|InputStream
name|inStream2
init|=
operator|new
name|FileInputStream
argument_list|(
name|publicCert2
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|cf
argument_list|)
expr_stmt|;
name|X509Certificate
name|certificate2
init|=
operator|(
name|X509Certificate
operator|)
name|cf
operator|.
name|generateCertificate
argument_list|(
name|inStream2
argument_list|)
decl_stmt|;
name|inStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|recip1
operator|.
name|setX509
argument_list|(
name|certificate1
argument_list|)
expr_stmt|;
name|recip2
operator|.
name|setX509
argument_list|(
name|certificate2
argument_list|)
expr_stmt|;
name|ppp
operator|.
name|addRecipient
argument_list|(
name|recip1
argument_list|)
expr_stmt|;
name|ppp
operator|.
name|addRecipient
argument_list|(
name|recip2
argument_list|)
expr_stmt|;
name|doc
operator|.
name|protect
argument_list|(
name|ppp
argument_list|)
expr_stmt|;
name|doc
operator|.
name|save
argument_list|(
name|output
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|.
name|close
argument_list|()
expr_stmt|;
comment|/* open first time */
name|PDDocument
name|docOpen1
init|=
name|PDDocument
operator|.
name|load
argument_list|(
name|output
argument_list|)
decl_stmt|;
name|KeyStore
name|ks1
init|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
literal|"PKCS12"
argument_list|)
decl_stmt|;
name|ks1
operator|.
name|load
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|privateCert1
argument_list|)
argument_list|,
name|password1
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
name|PublicKeyDecryptionMaterial
name|pdm
init|=
operator|new
name|PublicKeyDecryptionMaterial
argument_list|(
name|ks1
argument_list|,
literal|null
argument_list|,
name|password1
argument_list|)
decl_stmt|;
name|docOpen1
operator|.
name|openProtection
argument_list|(
name|pdm
argument_list|)
expr_stmt|;
name|docOpen1
operator|.
name|close
argument_list|()
expr_stmt|;
comment|/* open second time */
name|PDDocument
name|docOpen2
init|=
name|PDDocument
operator|.
name|load
argument_list|(
name|output
argument_list|)
decl_stmt|;
name|KeyStore
name|ks2
init|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
literal|"PKCS12"
argument_list|)
decl_stmt|;
name|ks2
operator|.
name|load
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|privateCert2
argument_list|)
argument_list|,
name|password2
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
name|PublicKeyDecryptionMaterial
name|pdm2
init|=
operator|new
name|PublicKeyDecryptionMaterial
argument_list|(
name|ks2
argument_list|,
literal|null
argument_list|,
name|password2
argument_list|)
decl_stmt|;
name|docOpen2
operator|.
name|openProtection
argument_list|(
name|pdm2
argument_list|)
expr_stmt|;
name|docOpen2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|protect
parameter_list|(
name|PDDocument
name|doc
parameter_list|,
name|String
name|certPath
parameter_list|)
throws|throws
name|Exception
block|{
name|InputStream
name|inStream
init|=
operator|new
name|FileInputStream
argument_list|(
name|certPath
argument_list|)
decl_stmt|;
name|CertificateFactory
name|cf
init|=
name|CertificateFactory
operator|.
name|getInstance
argument_list|(
literal|"X.509"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|cf
argument_list|)
expr_stmt|;
name|X509Certificate
name|certificate
init|=
operator|(
name|X509Certificate
operator|)
name|cf
operator|.
name|generateCertificate
argument_list|(
name|inStream
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|certificate
argument_list|)
expr_stmt|;
name|inStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|PublicKeyProtectionPolicy
name|ppp
init|=
operator|new
name|PublicKeyProtectionPolicy
argument_list|()
decl_stmt|;
name|PublicKeyRecipient
name|recip
init|=
operator|new
name|PublicKeyRecipient
argument_list|()
decl_stmt|;
name|recip
operator|.
name|setPermission
argument_list|(
name|accessPermission
argument_list|)
expr_stmt|;
name|recip
operator|.
name|setX509
argument_list|(
name|certificate
argument_list|)
expr_stmt|;
name|ppp
operator|.
name|addRecipient
argument_list|(
name|recip
argument_list|)
expr_stmt|;
name|doc
operator|.
name|protect
argument_list|(
name|ppp
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|open
parameter_list|(
name|PDDocument
name|doc
parameter_list|,
name|String
name|certPath
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|Exception
block|{
name|KeyStore
name|ks
init|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
literal|"PKCS12"
argument_list|)
decl_stmt|;
name|ks
operator|.
name|load
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|certPath
argument_list|)
argument_list|,
name|password
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
name|PublicKeyDecryptionMaterial
name|pdm
init|=
operator|new
name|PublicKeyDecryptionMaterial
argument_list|(
name|ks
argument_list|,
literal|null
argument_list|,
name|password
argument_list|)
decl_stmt|;
name|doc
operator|.
name|openProtection
argument_list|(
name|pdm
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

