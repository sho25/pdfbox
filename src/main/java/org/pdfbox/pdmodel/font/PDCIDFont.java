begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Graphics
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSNumber
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDRectangle
import|;
end_import

begin_comment
comment|/**  * This is implementation for the CIDFontType0/CIDFontType2 Fonts.  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.11 $  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|PDCIDFont
extends|extends
name|PDFont
block|{
specifier|private
name|Map
name|widthCache
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|/**      * Constructor.      */
specifier|public
name|PDCIDFont
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**      * Constructor.      *      * @param fontDictionary The font dictionary according to the PDF specification.      */
specifier|public
name|PDCIDFont
parameter_list|(
name|COSDictionary
name|fontDictionary
parameter_list|)
block|{
name|super
argument_list|(
name|fontDictionary
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the font descriptor associated with this CID font.      *      * @return The font descriptor.      */
specifier|public
name|PDFontDescriptor
name|getFontDescriptor
parameter_list|()
block|{
name|PDFontDescriptor
name|desc
init|=
literal|null
decl_stmt|;
name|COSDictionary
name|dict
init|=
operator|(
name|COSDictionary
operator|)
name|font
operator|.
name|getDictionaryObject
argument_list|(
literal|"FontDescriptor"
argument_list|)
decl_stmt|;
if|if
condition|(
name|dict
operator|!=
literal|null
condition|)
block|{
name|desc
operator|=
operator|new
name|PDFontDescriptorDictionary
argument_list|(
name|dict
argument_list|)
expr_stmt|;
block|}
return|return
name|desc
return|;
block|}
comment|/**      * Set the font descriptor associated with this CID Font.      *      * @param desc The font descriptor.      */
specifier|public
name|void
name|setFontDescriptor
parameter_list|(
name|PDFontDescriptorDictionary
name|desc
parameter_list|)
block|{
name|font
operator|.
name|setItem
argument_list|(
literal|"FontDescriptor"
argument_list|,
name|desc
argument_list|)
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|void
name|drawString
parameter_list|(
name|String
name|string
parameter_list|,
name|Graphics
name|g
parameter_list|,
name|float
name|fontSize
parameter_list|,
name|float
name|xScale
parameter_list|,
name|float
name|yScale
parameter_list|,
name|float
name|x
parameter_list|,
name|float
name|y
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Not yet implemented"
argument_list|)
throw|;
block|}
comment|/**      * This will get the fonts bouding box.      *      * @return The fonts bouding box.      *      * @throws IOException If there is an error getting the font bounding box.      */
specifier|public
name|PDRectangle
name|getFontBoundingBox
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Not yet implemented"
argument_list|)
throw|;
block|}
comment|/**      * This will get the default width.  The default value for the default width is 1000.      *      * @return The default width for the glyphs in this font.      */
specifier|public
name|long
name|getDefaultWidth
parameter_list|()
block|{
name|long
name|dw
init|=
literal|1000
decl_stmt|;
name|COSNumber
name|number
init|=
operator|(
name|COSNumber
operator|)
name|font
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"DW"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|number
operator|!=
literal|null
condition|)
block|{
name|dw
operator|=
name|number
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
return|return
name|dw
return|;
block|}
comment|/**      * This will set the default width for the glyphs of this font.      *      * @param dw The default width.      */
specifier|public
name|void
name|setDefaultWidth
parameter_list|(
name|long
name|dw
parameter_list|)
block|{
name|font
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"DW"
argument_list|)
argument_list|,
operator|new
name|COSInteger
argument_list|(
name|dw
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the font width for a character.      *      * @param c The character code to get the width for.      * @param offset The offset into the array.      * @param length The length of the data.      *      * @return The width is in 1000 unit of text space, ie 333 or 777      *      * @throws IOException If an error occurs while parsing.      */
specifier|public
name|float
name|getFontWidth
parameter_list|(
name|byte
index|[]
name|c
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|float
name|retval
init|=
literal|0.0f
decl_stmt|;
name|int
name|code
init|=
name|getCodeFromArray
argument_list|(
name|c
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|Float
name|widthFloat
init|=
operator|(
name|Float
operator|)
name|widthCache
operator|.
name|get
argument_list|(
operator|new
name|Integer
argument_list|(
name|code
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|widthFloat
operator|==
literal|null
condition|)
block|{
name|COSArray
name|widths
init|=
operator|(
name|COSArray
operator|)
name|font
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"W"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|widths
operator|!=
literal|null
condition|)
block|{
name|boolean
name|foundWidth
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
operator|!
name|foundWidth
operator|&&
name|i
operator|<
name|widths
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|COSNumber
name|firstCode
init|=
operator|(
name|COSNumber
operator|)
name|widths
operator|.
name|getObject
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
name|COSBase
name|next
init|=
name|widths
operator|.
name|getObject
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|next
operator|instanceof
name|COSArray
condition|)
block|{
name|COSArray
name|array
init|=
operator|(
name|COSArray
operator|)
name|next
decl_stmt|;
if|if
condition|(
name|code
operator|>=
name|firstCode
operator|.
name|intValue
argument_list|()
operator|&&
name|code
operator|<
name|firstCode
operator|.
name|intValue
argument_list|()
operator|+
name|array
operator|.
name|size
argument_list|()
condition|)
block|{
name|COSNumber
name|rangeWidth
init|=
operator|(
name|COSNumber
operator|)
name|array
operator|.
name|get
argument_list|(
name|code
operator|-
name|firstCode
operator|.
name|intValue
argument_list|()
argument_list|)
decl_stmt|;
name|retval
operator|=
name|rangeWidth
operator|.
name|floatValue
argument_list|()
expr_stmt|;
name|foundWidth
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|COSNumber
name|secondCode
init|=
operator|(
name|COSNumber
operator|)
name|next
decl_stmt|;
name|i
operator|++
expr_stmt|;
name|COSNumber
name|rangeWidth
init|=
operator|(
name|COSNumber
operator|)
name|widths
operator|.
name|getObject
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|code
operator|>=
name|firstCode
operator|.
name|intValue
argument_list|()
operator|&&
name|code
operator|<=
name|secondCode
operator|.
name|intValue
argument_list|()
condition|)
block|{
name|retval
operator|=
name|rangeWidth
operator|.
name|floatValue
argument_list|()
expr_stmt|;
name|foundWidth
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
name|widthCache
operator|.
name|put
argument_list|(
operator|new
name|Integer
argument_list|(
name|code
argument_list|)
argument_list|,
operator|new
name|Float
argument_list|(
name|retval
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|retval
operator|=
name|widthFloat
operator|.
name|floatValue
argument_list|()
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * This will get the font height for a character.      *      * @param c The character code to get the height for.      * @param offset The offset into the array.      * @param length The length of the data.      *      * @return The width is in 1000 unit of text space, ie 333 or 777      *      * @throws IOException If an error occurs while parsing.      */
specifier|public
name|float
name|getFontHeight
parameter_list|(
name|byte
index|[]
name|c
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|float
name|retval
init|=
literal|0
decl_stmt|;
name|PDFontDescriptor
name|desc
init|=
name|getFontDescriptor
argument_list|()
decl_stmt|;
name|float
name|xHeight
init|=
name|desc
operator|.
name|getXHeight
argument_list|()
decl_stmt|;
name|float
name|capHeight
init|=
name|desc
operator|.
name|getCapHeight
argument_list|()
decl_stmt|;
if|if
condition|(
name|xHeight
operator|!=
literal|0f
operator|&&
name|capHeight
operator|!=
literal|0
condition|)
block|{
comment|//do an average of these two.  Can we do better???
name|retval
operator|=
operator|(
name|xHeight
operator|+
name|capHeight
operator|)
operator|/
literal|2f
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|xHeight
operator|!=
literal|0
condition|)
block|{
name|retval
operator|=
name|xHeight
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|capHeight
operator|!=
literal|0
condition|)
block|{
name|retval
operator|=
name|capHeight
expr_stmt|;
block|}
else|else
block|{
name|retval
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|retval
operator|==
literal|0
condition|)
block|{
name|retval
operator|=
name|desc
operator|.
name|getAscent
argument_list|()
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * This will get the average font width for all characters.      *      * @return The width is in 1000 unit of text space, ie 333 or 777      *      * @throws IOException If an error occurs while parsing.      */
specifier|public
name|float
name|getAverageFontWidth
parameter_list|()
throws|throws
name|IOException
block|{
name|float
name|totalWidths
init|=
literal|0.0f
decl_stmt|;
name|float
name|characterCount
init|=
literal|0.0f
decl_stmt|;
name|float
name|defaultWidth
init|=
name|getDefaultWidth
argument_list|()
decl_stmt|;
name|COSArray
name|widths
init|=
operator|(
name|COSArray
operator|)
name|font
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"W"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|widths
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|widths
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|COSNumber
name|firstCode
init|=
operator|(
name|COSNumber
operator|)
name|widths
operator|.
name|getObject
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
name|COSBase
name|next
init|=
name|widths
operator|.
name|getObject
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|next
operator|instanceof
name|COSArray
condition|)
block|{
name|COSArray
name|array
init|=
operator|(
name|COSArray
operator|)
name|next
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|array
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|COSNumber
name|width
init|=
operator|(
name|COSNumber
operator|)
name|array
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|totalWidths
operator|+=
name|width
operator|.
name|floatValue
argument_list|()
expr_stmt|;
name|characterCount
operator|+=
literal|1
expr_stmt|;
block|}
block|}
else|else
block|{
name|i
operator|++
expr_stmt|;
name|COSNumber
name|rangeWidth
init|=
operator|(
name|COSNumber
operator|)
name|widths
operator|.
name|getObject
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|rangeWidth
operator|.
name|floatValue
argument_list|()
operator|>
literal|0
condition|)
block|{
name|totalWidths
operator|+=
name|rangeWidth
operator|.
name|floatValue
argument_list|()
expr_stmt|;
name|characterCount
operator|+=
literal|1
expr_stmt|;
block|}
block|}
block|}
block|}
name|float
name|average
init|=
name|totalWidths
operator|/
name|characterCount
decl_stmt|;
if|if
condition|(
name|average
operator|<=
literal|0
condition|)
block|{
name|average
operator|=
name|defaultWidth
expr_stmt|;
block|}
return|return
name|average
return|;
block|}
block|}
end_class

end_unit

