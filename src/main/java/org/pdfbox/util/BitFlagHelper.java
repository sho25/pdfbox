begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|pdfbox
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_comment
comment|/**  * This class will be used for bit flag operations.  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.4 $  */
end_comment

begin_class
specifier|public
class|class
name|BitFlagHelper
block|{
specifier|private
name|BitFlagHelper
parameter_list|()
block|{
comment|//helper class should not be constructed
block|}
comment|/**      * Sets the given boolean value at bitPos in the flags.      *      * @param dic The dictionary to set the value into.      * @param field The name of the field to set the value into.      * @param bitFlag the bit position to set the value in.      * @param value the value the bit position should have.      */
specifier|public
specifier|static
specifier|final
name|void
name|setFlag
parameter_list|(
name|COSDictionary
name|dic
parameter_list|,
name|String
name|field
parameter_list|,
name|int
name|bitFlag
parameter_list|,
name|boolean
name|value
parameter_list|)
block|{
name|int
name|currentFlags
init|=
name|dic
operator|.
name|getInt
argument_list|(
name|field
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
condition|)
block|{
name|currentFlags
operator|=
name|currentFlags
operator||
name|bitFlag
expr_stmt|;
block|}
else|else
block|{
name|currentFlags
operator|=
name|currentFlags
operator|&=
operator|~
name|bitFlag
expr_stmt|;
block|}
name|dic
operator|.
name|setInt
argument_list|(
name|field
argument_list|,
name|currentFlags
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the boolean value from the flags at the given bit      * position.      *      * @param dic The dictionary to get the field from.      * @param field The name of the field to get the flag from.      * @param bitFlag the bitPosition to get the value from.      *      * @return true if the number at bitPos is '1'      */
specifier|public
specifier|static
specifier|final
name|boolean
name|getFlag
parameter_list|(
name|COSDictionary
name|dic
parameter_list|,
name|String
name|field
parameter_list|,
name|int
name|bitFlag
parameter_list|)
block|{
name|int
name|ff
init|=
name|dic
operator|.
name|getInt
argument_list|(
name|field
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
operator|(
name|ff
operator|&
name|bitFlag
operator|)
operator|==
name|bitFlag
return|;
block|}
block|}
end_class

end_unit

