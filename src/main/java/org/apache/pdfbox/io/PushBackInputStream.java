begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * A simple subclass that adds a few convience methods.  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.6 $  */
end_comment

begin_class
specifier|public
class|class
name|PushBackInputStream
extends|extends
name|java
operator|.
name|io
operator|.
name|PushbackInputStream
block|{
comment|/*      * The current position in the file.       */
specifier|private
name|int
name|offset
init|=
literal|0
decl_stmt|;
comment|/**      * Constructor.      *      * @param input The input stream.      * @param size The size of the push back buffer.      *      * @throws IOException If there is an error with the stream.      */
specifier|public
name|PushBackInputStream
parameter_list|(
name|InputStream
name|input
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|input
argument_list|,
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|input
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error: input was null"
argument_list|)
throw|;
block|}
block|}
comment|/**      * This will peek at the next byte.      *      * @return The next byte on the stream, leaving it as available to read.      *      * @throws IOException If there is an error reading the next byte.      */
specifier|public
name|int
name|peek
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|result
init|=
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|!=
operator|-
literal|1
condition|)
block|{
name|unread
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * Returns the current byte offset in the file      * @return the int byte offset      */
specifier|public
name|int
name|getOffset
parameter_list|()
block|{
return|return
name|offset
return|;
block|}
comment|/**      * {@inheritDoc}       */
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|retval
init|=
name|super
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|retval
operator|!=
operator|-
literal|1
condition|)
name|offset
operator|++
expr_stmt|;
return|return
name|retval
return|;
block|}
comment|/**      * {@inheritDoc}       */
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|this
operator|.
name|read
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**      * {@inheritDoc}       */
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|retval
init|=
name|super
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|retval
operator|!=
operator|-
literal|1
condition|)
name|offset
operator|+=
name|retval
expr_stmt|;
return|return
name|retval
return|;
block|}
comment|/**      * {@inheritDoc}       */
specifier|public
name|void
name|unread
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|offset
operator|--
expr_stmt|;
name|super
operator|.
name|unread
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}       */
specifier|public
name|void
name|unread
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|unread
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}       */
specifier|public
name|void
name|unread
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|len
operator|==
literal|0
condition|)
return|return;
name|offset
operator|-=
name|len
expr_stmt|;
name|super
operator|.
name|unread
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
comment|/**      * A simple test to see if we are at the end of the stream.      *      * @return true if we are at the end of the stream.      *      * @throws IOException If there is an error reading the next byte.      */
specifier|public
name|boolean
name|isEOF
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|peek
init|=
name|peek
argument_list|()
decl_stmt|;
return|return
name|peek
operator|==
operator|-
literal|1
return|;
block|}
comment|/**      * This is a method used to fix PDFBox issue 974661, the PDF parsing code needs      * to know if there is at least x amount of data left in the stream, but the available()      * method returns how much data will be available without blocking.  PDFBox is willing to      * block to read the data, so we will first fill the internal buffer.      *      * @throws IOException If there is an error filling the buffer.      */
specifier|public
name|void
name|fillBuffer
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|bufferLength
init|=
name|buf
operator|.
name|length
decl_stmt|;
name|byte
index|[]
name|tmpBuffer
init|=
operator|new
name|byte
index|[
name|bufferLength
index|]
decl_stmt|;
name|int
name|amountRead
init|=
literal|0
decl_stmt|;
name|int
name|totalAmountRead
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|amountRead
operator|!=
operator|-
literal|1
operator|&&
name|totalAmountRead
operator|<
name|bufferLength
condition|)
block|{
name|amountRead
operator|=
name|this
operator|.
name|read
argument_list|(
name|tmpBuffer
argument_list|,
name|totalAmountRead
argument_list|,
name|bufferLength
operator|-
name|totalAmountRead
argument_list|)
expr_stmt|;
if|if
condition|(
name|amountRead
operator|!=
operator|-
literal|1
condition|)
block|{
name|totalAmountRead
operator|+=
name|amountRead
expr_stmt|;
block|}
block|}
name|this
operator|.
name|unread
argument_list|(
name|tmpBuffer
argument_list|,
literal|0
argument_list|,
name|totalAmountRead
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

