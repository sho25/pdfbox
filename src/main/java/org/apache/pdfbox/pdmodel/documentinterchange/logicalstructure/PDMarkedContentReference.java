begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|documentinterchange
operator|.
name|logicalstructure
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|COSObjectable
import|;
end_import

begin_comment
comment|/**  * A marked-content reference.  *   * @author Koch  * @version $Revision: $  */
end_comment

begin_class
specifier|public
class|class
name|PDMarkedContentReference
implements|implements
name|COSObjectable
block|{
specifier|public
specifier|static
specifier|final
name|String
name|TYPE
init|=
literal|"MCR"
decl_stmt|;
specifier|private
name|COSDictionary
name|dictionary
decl_stmt|;
specifier|protected
name|COSDictionary
name|getCOSDictionary
parameter_list|()
block|{
return|return
name|this
operator|.
name|dictionary
return|;
block|}
comment|/**      * Default constructor      */
specifier|public
name|PDMarkedContentReference
parameter_list|()
block|{
name|this
operator|.
name|dictionary
operator|=
operator|new
name|COSDictionary
argument_list|()
expr_stmt|;
name|this
operator|.
name|dictionary
operator|.
name|setName
argument_list|(
name|COSName
operator|.
name|TYPE
argument_list|,
name|TYPE
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor for an existing marked content reference.      *       * @param pageDic the page dictionary      * @param mcid the marked content indentifier      */
specifier|public
name|PDMarkedContentReference
parameter_list|(
name|COSDictionary
name|dictionary
parameter_list|)
block|{
name|this
operator|.
name|dictionary
operator|=
name|dictionary
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|COSBase
name|getCOSObject
parameter_list|()
block|{
return|return
name|this
operator|.
name|dictionary
return|;
block|}
comment|/**      * Gets the page.      *       * @return the page      */
specifier|public
name|PDPage
name|getPage
parameter_list|()
block|{
name|COSDictionary
name|pg
init|=
operator|(
name|COSDictionary
operator|)
name|this
operator|.
name|getCOSDictionary
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
literal|"Pg"
argument_list|)
decl_stmt|;
if|if
condition|(
name|pg
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|PDPage
argument_list|(
name|pg
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Sets the page.      *       * @param page the page      */
specifier|public
name|void
name|setPage
parameter_list|(
name|PDPage
name|page
parameter_list|)
block|{
name|this
operator|.
name|getCOSDictionary
argument_list|()
operator|.
name|setItem
argument_list|(
literal|"Pg"
argument_list|,
name|page
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the marked content identifier.      *       * @return the marked content identifier      */
specifier|public
name|int
name|getMCID
parameter_list|()
block|{
return|return
name|this
operator|.
name|getCOSDictionary
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"MCID"
argument_list|)
return|;
block|}
comment|/**      * Sets the marked content identifier.      *       * @param mcid the marked content identifier      */
specifier|public
name|void
name|setMCID
parameter_list|(
name|int
name|mcid
parameter_list|)
block|{
name|this
operator|.
name|getCOSDictionary
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"MCID"
argument_list|,
name|mcid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"mcid="
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|getMCID
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

