begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|color
operator|.
name|ColorSpace
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|ColorModel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|function
operator|.
name|PDFunction
import|;
end_import

begin_comment
comment|/**  * This class represents a Separation color space.  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.5 $  */
end_comment

begin_class
specifier|public
class|class
name|PDSeparation
extends|extends
name|PDColorSpace
block|{
comment|/**      * The name of this color space.      */
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"Separation"
decl_stmt|;
comment|/**      * Constructor.      */
specifier|public
name|PDSeparation
parameter_list|()
block|{
name|array
operator|=
operator|new
name|COSArray
argument_list|()
expr_stmt|;
name|array
operator|.
name|add
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
name|array
operator|.
name|add
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor.      *      * @param separation The array containing all separation information.      */
specifier|public
name|PDSeparation
parameter_list|(
name|COSArray
name|separation
parameter_list|)
block|{
name|array
operator|=
name|separation
expr_stmt|;
block|}
comment|/**      * This will return the name of the color space.  For a PDSeparation object      * this will always return "Separation"      *      * @return The name of the color space.      */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|NAME
return|;
block|}
comment|/**      * This will get the number of components that this color space is made up of.      *      * @return The number of components in this color space.      *      * @throws IOException If there is an error getting the number of color components.      */
specifier|public
name|int
name|getNumberOfComponents
parameter_list|()
throws|throws
name|IOException
block|{
comment|//return 1;
return|return
name|array
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**      * Create a Java colorspace for this colorspace.      *      * @return A color space that can be used for Java AWT operations.      *      * @throws IOException If there is an error creating the color space.      */
specifier|public
name|ColorSpace
name|createColorSpace
parameter_list|()
throws|throws
name|IOException
block|{
comment|//throw new IOException( "Not implemented" );
try|try
block|{
comment|///dump some information to help figure these things out
comment|//logger().info( array.toString());
name|PDColorSpace
name|alt
init|=
name|getAlternateColorSpace
argument_list|()
decl_stmt|;
comment|//logger().info(alt.toString());
name|ColorSpace
name|CS
init|=
name|alt
operator|.
name|createColorSpace
argument_list|()
decl_stmt|;
comment|///dwilson 12/15/07
comment|//logger().info(CS.toString() + " reporting type " + CS.getType() + " and having component count of " + CS.getNumComponents());
return|return
name|CS
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|IOe
parameter_list|)
block|{
name|logger
argument_list|()
operator|.
name|severe
argument_list|(
name|IOe
operator|.
name|toString
argument_list|()
operator|+
literal|"\n at\n"
operator|+
name|FullStackTrace
argument_list|(
name|IOe
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|IOe
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
argument_list|()
operator|.
name|severe
argument_list|(
name|e
operator|.
name|toString
argument_list|()
operator|+
literal|"\n at\n"
operator|+
name|FullStackTrace
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to Create ColorSpace"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Create a Java color model for this colorspace.      *      * @param bpc The number of bits per component.      *      * @return A color model that can be used for Java AWT operations.      *      * @throws IOException If there is an error creating the color model.      */
specifier|public
name|ColorModel
name|createColorModel
parameter_list|(
name|int
name|bpc
parameter_list|)
throws|throws
name|IOException
block|{
name|logger
argument_list|()
operator|.
name|info
argument_list|(
literal|"About to create ColorModel for "
operator|+
name|getAlternateColorSpace
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|getAlternateColorSpace
argument_list|()
operator|.
name|createColorModel
argument_list|(
name|bpc
argument_list|)
return|;
block|}
comment|/**      * This will get the separation name.      *      * @return The name in the separation.      */
specifier|public
name|String
name|getColorantName
parameter_list|()
block|{
name|COSName
name|name
init|=
operator|(
name|COSName
operator|)
name|array
operator|.
name|getObject
argument_list|(
literal|1
argument_list|)
decl_stmt|;
return|return
name|name
operator|.
name|getName
argument_list|()
return|;
block|}
comment|/**      * This will set the separation name.      *      * @param name The separation name.      */
specifier|public
name|void
name|setColorantName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|array
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|COSName
operator|.
name|getPDFName
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the alternate color space for this separation.      *      * @return The alternate color space.      *      * @throws IOException If there is an error getting the alternate color space.      */
specifier|public
name|PDColorSpace
name|getAlternateColorSpace
parameter_list|()
throws|throws
name|IOException
block|{
name|COSBase
name|alternate
init|=
name|array
operator|.
name|getObject
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|PDColorSpace
name|cs
init|=
name|PDColorSpaceFactory
operator|.
name|createColorSpace
argument_list|(
name|alternate
argument_list|)
decl_stmt|;
comment|//logger().info("Returning " + cs.toString() + " for input " + alternate.toString());
return|return
name|cs
return|;
block|}
comment|/**      * This will set the alternate color space.      *      * @param cs The alternate color space.      */
specifier|public
name|void
name|setAlternateColorSpace
parameter_list|(
name|PDColorSpace
name|cs
parameter_list|)
block|{
name|COSBase
name|space
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cs
operator|!=
literal|null
condition|)
block|{
name|space
operator|=
name|cs
operator|.
name|getCOSObject
argument_list|()
expr_stmt|;
block|}
name|array
operator|.
name|set
argument_list|(
literal|2
argument_list|,
name|space
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the tint transform function.      *      * @return The tint transform function.      *      * @throws IOException If there is an error creating the PDFunction      */
specifier|public
name|PDFunction
name|getTintTransform
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|PDFunction
operator|.
name|create
argument_list|(
name|array
operator|.
name|getObject
argument_list|(
literal|3
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * This will set the tint transform function.      *      * @param tint The tint transform function.      */
specifier|public
name|void
name|setTintTransform
parameter_list|(
name|PDFunction
name|tint
parameter_list|)
block|{
name|array
operator|.
name|set
argument_list|(
literal|3
argument_list|,
name|tint
argument_list|)
expr_stmt|;
block|}
comment|/* 	Some of the key values are stored within the COSDictionary, item 3 in the array. 	I don't necessarily want to expose the entire dictionary publicly (except in toString()), 	but need access privately in order to expose the color values publicly.     */
specifier|private
name|COSDictionary
name|getDictionary
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|(
name|COSDictionary
operator|)
name|array
operator|.
name|getObject
argument_list|(
literal|3
argument_list|)
return|;
block|}
specifier|public
name|COSArray
name|getColorValues
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|(
name|COSArray
operator|)
name|getDictionary
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
literal|"C1"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

