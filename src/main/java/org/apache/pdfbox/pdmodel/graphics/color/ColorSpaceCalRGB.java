begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|color
operator|.
name|ColorSpace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDMatrix
import|;
end_import

begin_comment
comment|/**  * This class represents a CalRGB color space.  *  * In the first place this implementation is needed to support CalRGB.  * To keep it simple, the CalRGB colorspace is treated similar to a DeviceRGB colorspace.  * There is no conversion including the gamma, whitepoint, blackpoint or matrix values yet.  * This should be suitable for displaying and simple printings.  *    * @author<a href="mailto:andreas@lehmi.de">Andreas Lehmk√ºhler</a>  * @version $Revision: 1.0 $  */
end_comment

begin_class
specifier|public
class|class
name|ColorSpaceCalRGB
extends|extends
name|ColorSpace
block|{
specifier|private
name|PDGamma
name|gamma
init|=
literal|null
decl_stmt|;
specifier|private
name|PDTristimulus
name|whitepoint
init|=
literal|null
decl_stmt|;
specifier|private
name|PDTristimulus
name|blackpoint
init|=
literal|null
decl_stmt|;
specifier|private
name|PDMatrix
name|matrix
init|=
literal|null
decl_stmt|;
comment|/**      * ID for serialization.      */
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|6362864473145799405L
decl_stmt|;
comment|/**      *  Constructor.      */
specifier|public
name|ColorSpaceCalRGB
parameter_list|()
block|{
name|super
argument_list|(
name|ColorSpace
operator|.
name|TYPE_3CLR
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor.      * @param gammaValue Gamma      * @param whitept Whitepoint      * @param blackpt Blackpoint      * @param linearMatrix Matrix value      */
specifier|public
name|ColorSpaceCalRGB
parameter_list|(
name|PDGamma
name|gammaValue
parameter_list|,
name|PDTristimulus
name|whitept
parameter_list|,
name|PDTristimulus
name|blackpt
parameter_list|,
name|PDMatrix
name|linearMatrix
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|gamma
operator|=
name|gammaValue
expr_stmt|;
name|this
operator|.
name|whitepoint
operator|=
name|whitept
expr_stmt|;
name|this
operator|.
name|blackpoint
operator|=
name|blackpt
expr_stmt|;
name|this
operator|.
name|matrix
operator|=
name|linearMatrix
expr_stmt|;
block|}
comment|/**      *  Converts colorvalues from RGB-colorspace to CIEXYZ-colorspace.      *  @param rgbvalue RGB colorvalues to be converted.      *  @return Returns converted colorvalues.      */
specifier|private
name|float
index|[]
name|fromRGBtoCIEXYZ
parameter_list|(
name|float
index|[]
name|rgbvalue
parameter_list|)
block|{
name|ColorSpace
name|colorspaceRGB
init|=
name|ColorSpace
operator|.
name|getInstance
argument_list|(
name|CS_sRGB
argument_list|)
decl_stmt|;
return|return
name|colorspaceRGB
operator|.
name|toCIEXYZ
argument_list|(
name|rgbvalue
argument_list|)
return|;
block|}
comment|/**      *  Converts colorvalues from CIEXYZ-colorspace to RGB-colorspace.      *  @param rgbvalue CIEXYZ colorvalues to be converted.      *  @return Returns converted colorvalues.      */
specifier|private
name|float
index|[]
name|fromCIEXYZtoRGB
parameter_list|(
name|float
index|[]
name|xyzvalue
parameter_list|)
block|{
name|ColorSpace
name|colorspaceXYZ
init|=
name|ColorSpace
operator|.
name|getInstance
argument_list|(
name|CS_CIEXYZ
argument_list|)
decl_stmt|;
return|return
name|colorspaceXYZ
operator|.
name|toRGB
argument_list|(
name|xyzvalue
argument_list|)
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|float
index|[]
name|fromCIEXYZ
parameter_list|(
name|float
index|[]
name|colorvalue
parameter_list|)
block|{
if|if
condition|(
name|colorvalue
operator|!=
literal|null
operator|&&
name|colorvalue
operator|.
name|length
operator|==
literal|3
condition|)
block|{
comment|// We have to convert from XYV to RGB
return|return
name|fromCIEXYZtoRGB
argument_list|(
name|colorvalue
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|float
index|[]
name|fromRGB
parameter_list|(
name|float
index|[]
name|rgbvalue
parameter_list|)
block|{
if|if
condition|(
name|rgbvalue
operator|!=
literal|null
operator|&&
name|rgbvalue
operator|.
name|length
operator|==
literal|3
condition|)
block|{
return|return
name|rgbvalue
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|float
index|[]
name|toCIEXYZ
parameter_list|(
name|float
index|[]
name|colorvalue
parameter_list|)
block|{
if|if
condition|(
name|colorvalue
operator|!=
literal|null
operator|&&
name|colorvalue
operator|.
name|length
operator|==
literal|4
condition|)
block|{
comment|// We have to convert from RGB to XYV
return|return
name|fromRGBtoCIEXYZ
argument_list|(
name|toRGB
argument_list|(
name|colorvalue
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|float
index|[]
name|toRGB
parameter_list|(
name|float
index|[]
name|colorvalue
parameter_list|)
block|{
if|if
condition|(
name|colorvalue
operator|!=
literal|null
operator|&&
name|colorvalue
operator|.
name|length
operator|==
literal|3
condition|)
block|{
return|return
name|colorvalue
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

