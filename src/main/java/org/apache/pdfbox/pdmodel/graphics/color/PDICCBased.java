begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSFloat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSNumber
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|COSArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Transparency
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|color
operator|.
name|ColorSpace
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|color
operator|.
name|ICC_ColorSpace
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|color
operator|.
name|ICC_Profile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|ColorModel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|ComponentColorModel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|DataBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * This class represents a ICC profile color space.  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.6 $  */
end_comment

begin_class
specifier|public
class|class
name|PDICCBased
extends|extends
name|PDColorSpace
block|{
comment|/**      * The name of this color space.      */
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"ICCBased"
decl_stmt|;
comment|//private COSArray array;
specifier|private
name|PDStream
name|stream
decl_stmt|;
comment|/**      * Default constructor, creates empty stream.      *      * @param doc The document to store the icc data.      */
specifier|public
name|PDICCBased
parameter_list|(
name|PDDocument
name|doc
parameter_list|)
block|{
name|array
operator|=
operator|new
name|COSArray
argument_list|()
expr_stmt|;
name|array
operator|.
name|add
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
name|array
operator|.
name|add
argument_list|(
operator|new
name|PDStream
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor.      *      * @param iccArray The ICC stream object.      */
specifier|public
name|PDICCBased
parameter_list|(
name|COSArray
name|iccArray
parameter_list|)
block|{
name|array
operator|=
name|iccArray
expr_stmt|;
name|stream
operator|=
operator|new
name|PDStream
argument_list|(
operator|(
name|COSStream
operator|)
name|iccArray
operator|.
name|getObject
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will return the name of the color space.      *      * @return The name of the color space.      */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|NAME
return|;
block|}
comment|/**      * Convert this standard java object to a COS object.      *      * @return The cos object that matches this Java object.      */
specifier|public
name|COSBase
name|getCOSObject
parameter_list|()
block|{
return|return
name|array
return|;
block|}
comment|/**      * Get the pd stream for this icc color space.      *      * @return Get the stream for this icc based color space.      */
specifier|public
name|PDStream
name|getPDStream
parameter_list|()
block|{
return|return
name|stream
return|;
block|}
comment|/**      * Create a Java colorspace for this colorspace.      *      * @return A color space that can be used for Java AWT operations.      *      * @throws IOException If there is an error creating the color space.      */
specifier|public
name|ColorSpace
name|createColorSpace
parameter_list|()
throws|throws
name|IOException
block|{
name|InputStream
name|profile
init|=
literal|null
decl_stmt|;
name|ColorSpace
name|cSpace
init|=
literal|null
decl_stmt|;
try|try
block|{
name|profile
operator|=
name|stream
operator|.
name|createInputStream
argument_list|()
expr_stmt|;
name|ICC_Profile
name|iccProfile
init|=
name|ICC_Profile
operator|.
name|getInstance
argument_list|(
name|profile
argument_list|)
decl_stmt|;
name|cSpace
operator|=
operator|new
name|ICC_ColorSpace
argument_list|(
name|iccProfile
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|profile
operator|!=
literal|null
condition|)
block|{
name|profile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|cSpace
return|;
block|}
comment|/**      * Create a Java color model for this colorspace.      *      * @param bpc The number of bits per component.      *      * @return A color model that can be used for Java AWT operations.      *      * @throws IOException If there is an error creating the color model.      */
specifier|public
name|ColorModel
name|createColorModel
parameter_list|(
name|int
name|bpc
parameter_list|)
throws|throws
name|IOException
block|{
name|int
index|[]
name|nbBits
init|=
block|{
name|bpc
block|,
name|bpc
block|,
name|bpc
block|,
name|bpc
block|}
decl_stmt|;
comment|//added 4th bpc to handle CMYK
name|ComponentColorModel
name|componentColorModel
init|=
operator|new
name|ComponentColorModel
argument_list|(
name|createColorSpace
argument_list|()
argument_list|,
name|nbBits
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Transparency
operator|.
name|OPAQUE
argument_list|,
name|DataBuffer
operator|.
name|TYPE_BYTE
argument_list|)
decl_stmt|;
return|return
name|componentColorModel
return|;
block|}
comment|/**      * This will return the number of color components.  As of PDF 1.4 this will      * be 1,3,4.      *      * @return The number of components in this color space.      *      * @throws IOException If there is an error getting the number of color components.      */
specifier|public
name|int
name|getNumberOfComponents
parameter_list|()
throws|throws
name|IOException
block|{
name|COSNumber
name|n
init|=
operator|(
name|COSNumber
operator|)
name|stream
operator|.
name|getStream
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"N"
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|n
operator|.
name|intValue
argument_list|()
return|;
block|}
comment|/**      * This will set the number of color components.      *      * @param n The number of color components.      */
specifier|public
name|void
name|setNumberOfComponents
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|stream
operator|.
name|getStream
argument_list|()
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"N"
argument_list|)
argument_list|,
operator|new
name|COSInteger
argument_list|(
name|n
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will return a list of alternate color spaces(PDColorSpace) if the display application      * does not support this icc stream.      *      * @return A list of alternate color spaces.      *      * @throws IOException If there is an error getting the alternate color spaces.      */
specifier|public
name|List
name|getAlternateColorSpaces
parameter_list|()
throws|throws
name|IOException
block|{
name|COSBase
name|alternate
init|=
name|stream
operator|.
name|getStream
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"Alternate"
argument_list|)
argument_list|)
decl_stmt|;
name|COSArray
name|alternateArray
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|alternate
operator|==
literal|null
condition|)
block|{
name|alternateArray
operator|=
operator|new
name|COSArray
argument_list|()
expr_stmt|;
name|int
name|numComponents
init|=
name|getNumberOfComponents
argument_list|()
decl_stmt|;
name|String
name|csName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|numComponents
operator|==
literal|1
condition|)
block|{
name|csName
operator|=
name|PDDeviceGray
operator|.
name|NAME
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|numComponents
operator|==
literal|3
condition|)
block|{
name|csName
operator|=
name|PDDeviceRGB
operator|.
name|NAME
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|numComponents
operator|==
literal|4
condition|)
block|{
name|csName
operator|=
name|PDDeviceCMYK
operator|.
name|NAME
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown colorspace number of components:"
operator|+
name|numComponents
argument_list|)
throw|;
block|}
name|alternateArray
operator|.
name|add
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|csName
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|alternate
operator|instanceof
name|COSArray
condition|)
block|{
name|alternateArray
operator|=
operator|(
name|COSArray
operator|)
name|alternate
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|alternate
operator|instanceof
name|COSName
condition|)
block|{
name|alternateArray
operator|=
operator|new
name|COSArray
argument_list|()
expr_stmt|;
name|alternateArray
operator|.
name|add
argument_list|(
name|alternate
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error: expected COSArray or COSName and not "
operator|+
name|alternate
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|List
name|retval
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|alternateArray
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|retval
operator|.
name|add
argument_list|(
name|PDColorSpaceFactory
operator|.
name|createColorSpace
argument_list|(
name|alternateArray
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|COSArrayList
argument_list|(
name|retval
argument_list|,
name|alternateArray
argument_list|)
return|;
block|}
comment|/**      * This will set the list of alternate color spaces.  This should be a list      * of PDColorSpace objects.      *      * @param list The list of colorspace objects.      */
specifier|public
name|void
name|setAlternateColorSpaces
parameter_list|(
name|List
name|list
parameter_list|)
block|{
name|COSArray
name|altArray
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|list
operator|!=
literal|null
condition|)
block|{
name|altArray
operator|=
name|COSArrayList
operator|.
name|converterToCOSArray
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
name|stream
operator|.
name|getStream
argument_list|()
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"Alternate"
argument_list|)
argument_list|,
name|altArray
argument_list|)
expr_stmt|;
block|}
specifier|private
name|COSArray
name|getRangeArray
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|COSArray
name|rangeArray
init|=
operator|(
name|COSArray
operator|)
name|stream
operator|.
name|getStream
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"Range"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|rangeArray
operator|==
literal|null
condition|)
block|{
name|rangeArray
operator|=
operator|new
name|COSArray
argument_list|()
expr_stmt|;
name|stream
operator|.
name|getStream
argument_list|()
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"Range"
argument_list|)
argument_list|,
name|rangeArray
argument_list|)
expr_stmt|;
while|while
condition|(
name|rangeArray
operator|.
name|size
argument_list|()
operator|<
name|n
operator|*
literal|2
condition|)
block|{
name|rangeArray
operator|.
name|add
argument_list|(
operator|new
name|COSFloat
argument_list|(
operator|-
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|rangeArray
operator|.
name|add
argument_list|(
operator|new
name|COSFloat
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rangeArray
return|;
block|}
comment|/**      * This will get the range for a certain component number.  This is will never      * return null.  If it is not present then the range -100 to 100 will      * be returned.      *      * @param n The component number to get the range for.      *      * @return The range for this component.      */
specifier|public
name|PDRange
name|getRangeForComponent
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|COSArray
name|rangeArray
init|=
name|getRangeArray
argument_list|(
name|n
argument_list|)
decl_stmt|;
return|return
operator|new
name|PDRange
argument_list|(
name|rangeArray
argument_list|,
name|n
argument_list|)
return|;
block|}
comment|/**      * This will set the a range for this color space.      *      * @param range The new range for the a component.      * @param n The component to set the range for.      */
specifier|public
name|void
name|setRangeForComponent
parameter_list|(
name|PDRange
name|range
parameter_list|,
name|int
name|n
parameter_list|)
block|{
name|COSArray
name|rangeArray
init|=
name|getRangeArray
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|rangeArray
operator|.
name|set
argument_list|(
name|n
operator|*
literal|2
argument_list|,
operator|new
name|COSFloat
argument_list|(
name|range
operator|.
name|getMin
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rangeArray
operator|.
name|set
argument_list|(
name|n
operator|*
literal|2
operator|+
literal|1
argument_list|,
operator|new
name|COSFloat
argument_list|(
name|range
operator|.
name|getMax
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the metadata stream for this object.  Null if there is no      * metadata stream.      *      * @return The metadata stream, if it exists.      */
specifier|public
name|COSStream
name|getMetadata
parameter_list|()
block|{
return|return
operator|(
name|COSStream
operator|)
name|stream
operator|.
name|getStream
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"Metadata"
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * This will set the metadata stream that is associated with this color space.      *      * @param metadata The new metadata stream.      */
specifier|public
name|void
name|setMetadata
parameter_list|(
name|COSStream
name|metadata
parameter_list|)
block|{
name|stream
operator|.
name|getStream
argument_list|()
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"Metadata"
argument_list|)
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
comment|/* 	Need more info on the ICCBased ones ... Array contains very little. 	*/
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|RetVal
init|=
name|super
operator|.
name|toString
argument_list|()
operator|+
literal|"\n\t Number of Components: "
decl_stmt|;
try|try
block|{
name|RetVal
operator|=
name|RetVal
operator|+
name|getNumberOfComponents
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|IOe
parameter_list|)
block|{
name|RetVal
operator|=
name|RetVal
operator|+
name|IOe
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|RetVal
return|;
block|}
block|}
end_class

end_unit

