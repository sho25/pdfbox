begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSNumber
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSString
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|color
operator|.
name|ColorSpace
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|ColorModel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|IndexColorModel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * This class represents an Indexed color space.  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.4 $  */
end_comment

begin_class
specifier|public
class|class
name|PDIndexed
extends|extends
name|PDColorSpace
block|{
comment|/**      * The name of this color space.      */
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"Indexed"
decl_stmt|;
comment|/**      * The abbreviated name of this color space.      */
specifier|public
specifier|static
specifier|final
name|String
name|ABBREVIATED_NAME
init|=
literal|"I"
decl_stmt|;
specifier|private
name|COSArray
name|array
decl_stmt|;
comment|/**      * Constructor, default DeviceRGB, hival 255.      */
specifier|public
name|PDIndexed
parameter_list|()
block|{
name|array
operator|=
operator|new
name|COSArray
argument_list|()
expr_stmt|;
name|array
operator|.
name|add
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
name|array
operator|.
name|add
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|PDDeviceRGB
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
name|array
operator|.
name|add
argument_list|(
operator|new
name|COSInteger
argument_list|(
literal|255
argument_list|)
argument_list|)
expr_stmt|;
name|array
operator|.
name|add
argument_list|(
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSNull
operator|.
name|NULL
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor.      *      * @param indexedArray The array containing the indexed parameters      */
specifier|public
name|PDIndexed
parameter_list|(
name|COSArray
name|indexedArray
parameter_list|)
block|{
name|array
operator|=
name|indexedArray
expr_stmt|;
block|}
comment|/**      * This will return the number of color components.  This will return the      * number of color components in the base color.      *      * @return The number of components in this color space.      *      * @throws IOException If there is an error getting the number of color components.      */
specifier|public
name|int
name|getNumberOfComponents
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getBaseColorSpace
argument_list|()
operator|.
name|getNumberOfComponents
argument_list|()
return|;
block|}
comment|/**      * This will return the name of the color space.      *      * @return The name of the color space.      */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|NAME
return|;
block|}
comment|/**      * Create a Java colorspace for this colorspace.      *      * @return A color space that can be used for Java AWT operations.      *      * @throws IOException If there is an error creating the color space.      */
specifier|public
name|ColorSpace
name|createColorSpace
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Not implemented"
argument_list|)
throw|;
block|}
comment|/**      * Create a Java color model for this colorspace.      *      * @param bpc The number of bits per component.      *      * @return A color model that can be used for Java AWT operations.      *      * @throws IOException If there is an error creating the color model.      */
specifier|public
name|ColorModel
name|createColorModel
parameter_list|(
name|int
name|bpc
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|size
init|=
name|getHighValue
argument_list|()
decl_stmt|;
name|byte
index|[]
name|index
init|=
name|getLookupData
argument_list|()
decl_stmt|;
comment|//for (int i=0;i<index.length;i++) System.out.print(index[i]+" ");
name|ColorModel
name|cm
init|=
operator|new
name|IndexColorModel
argument_list|(
name|bpc
argument_list|,
name|size
operator|+
literal|1
argument_list|,
name|index
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|cm
return|;
block|}
comment|/**      * This will get the color space that acts as the index for this color space.      *      * @return The base color space.      *      * @throws IOException If there is error creating the base color space.      */
specifier|public
name|PDColorSpace
name|getBaseColorSpace
parameter_list|()
throws|throws
name|IOException
block|{
name|PDColorSpace
name|retval
init|=
literal|null
decl_stmt|;
name|COSBase
name|base
init|=
name|array
operator|.
name|getObject
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|base
operator|instanceof
name|COSName
condition|)
block|{
name|retval
operator|=
name|PDColorSpaceFactory
operator|.
name|createColorSpace
argument_list|(
name|base
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error:unknown base colorspace"
argument_list|)
throw|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * This will set the base color space.      *      * @param base The base color space to use as the index.      */
specifier|public
name|void
name|setBaseColorSpace
parameter_list|(
name|PDColorSpace
name|base
parameter_list|)
block|{
name|array
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|base
operator|.
name|getCOSObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the highest value for the lookup.      *      * @return The hival entry.      */
specifier|public
name|int
name|getHighValue
parameter_list|()
block|{
return|return
operator|(
operator|(
name|COSNumber
operator|)
name|array
operator|.
name|getObject
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
return|;
block|}
comment|/**      * This will set the highest value that is allowed.  This cannot be higher      * than 255.      *      * @param high The highest value for the lookup table.      */
specifier|public
name|void
name|setHighValue
parameter_list|(
name|int
name|high
parameter_list|)
block|{
name|array
operator|.
name|set
argument_list|(
literal|2
argument_list|,
operator|new
name|COSInteger
argument_list|(
name|high
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will perform a lookup into the color lookup table.      *      * @param componentNumber The component number, probably 1,2,3,3.      * @param lookupIndex The zero-based index into the table, should not exceed the high value.      *      * @return The value that was from the lookup table.      *      * @throws IOException If there is an error looking up the color.      */
specifier|public
name|int
name|lookupColor
parameter_list|(
name|int
name|componentNumber
parameter_list|,
name|int
name|lookupIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|PDColorSpace
name|baseColor
init|=
name|getBaseColorSpace
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|getLookupData
argument_list|()
decl_stmt|;
name|int
name|numberOfComponents
init|=
name|baseColor
operator|.
name|getNumberOfComponents
argument_list|()
decl_stmt|;
return|return
operator|(
name|data
index|[
name|componentNumber
operator|*
name|numberOfComponents
operator|+
name|lookupIndex
index|]
operator|+
literal|256
operator|)
operator|%
literal|256
return|;
block|}
specifier|private
name|byte
index|[]
name|getLookupData
parameter_list|()
throws|throws
name|IOException
block|{
name|COSBase
name|lookupTable
init|=
name|array
operator|.
name|getObject
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|lookupTable
operator|instanceof
name|COSString
condition|)
block|{
name|data
operator|=
operator|(
operator|(
name|COSString
operator|)
name|lookupTable
operator|)
operator|.
name|getBytes
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lookupTable
operator|instanceof
name|COSStream
condition|)
block|{
comment|//Data will be small so just load the whole thing into memory for
comment|//easier processing
name|COSStream
name|lookupStream
init|=
operator|(
name|COSStream
operator|)
name|lookupTable
decl_stmt|;
name|InputStream
name|input
init|=
name|lookupStream
operator|.
name|getUnfilteredStream
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|output
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|int
name|amountRead
decl_stmt|;
while|while
condition|(
operator|(
name|amountRead
operator|=
name|input
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|amountRead
argument_list|)
expr_stmt|;
block|}
name|data
operator|=
name|output
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lookupTable
operator|==
literal|null
condition|)
block|{
name|data
operator|=
operator|new
name|byte
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error: Unknown type for lookup table "
operator|+
name|lookupTable
argument_list|)
throw|;
block|}
return|return
name|data
return|;
block|}
comment|/**      * This will set a color in the color lookup table.      *      * @param componentNumber The component number, probably 1,2,3,3.      * @param lookupIndex The zero-based index into the table, should not exceed the high value.      * @param color The color that will go into the table.      *      * @throws IOException If there is an error looking up the color.      */
specifier|public
name|void
name|setLookupColor
parameter_list|(
name|int
name|componentNumber
parameter_list|,
name|int
name|lookupIndex
parameter_list|,
name|int
name|color
parameter_list|)
throws|throws
name|IOException
block|{
name|PDColorSpace
name|baseColor
init|=
name|getBaseColorSpace
argument_list|()
decl_stmt|;
name|int
name|numberOfComponents
init|=
name|baseColor
operator|.
name|getNumberOfComponents
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|getLookupData
argument_list|()
decl_stmt|;
name|data
index|[
name|componentNumber
operator|*
name|numberOfComponents
operator|+
name|lookupIndex
index|]
operator|=
operator|(
name|byte
operator|)
name|color
expr_stmt|;
name|COSString
name|string
init|=
operator|new
name|COSString
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|array
operator|.
name|set
argument_list|(
literal|3
argument_list|,
name|string
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

