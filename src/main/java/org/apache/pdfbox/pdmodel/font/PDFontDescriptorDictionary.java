begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|COSObjectable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDRectangle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDStream
import|;
end_import

begin_comment
comment|/**  * This class represents an implementation to the font descriptor that gets its  * information from a COS Dictionary.  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.4 $  */
end_comment

begin_class
specifier|public
class|class
name|PDFontDescriptorDictionary
extends|extends
name|PDFontDescriptor
implements|implements
name|COSObjectable
block|{
specifier|private
name|COSDictionary
name|dic
decl_stmt|;
comment|/**      * Constructor.      */
specifier|public
name|PDFontDescriptorDictionary
parameter_list|()
block|{
name|dic
operator|=
operator|new
name|COSDictionary
argument_list|()
expr_stmt|;
name|dic
operator|.
name|setName
argument_list|(
literal|"Type"
argument_list|,
literal|"FontDescriptor"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor.      *      * @param desc The wrapped COS Dictionary.      */
specifier|public
name|PDFontDescriptorDictionary
parameter_list|(
name|COSDictionary
name|desc
parameter_list|)
block|{
name|dic
operator|=
name|desc
expr_stmt|;
block|}
comment|/**      * This will get the dictionary for this object.      *      * @return The COS dictionary.      */
specifier|public
name|COSDictionary
name|getCOSDictionary
parameter_list|()
block|{
return|return
name|dic
return|;
block|}
comment|/**      * Convert this standard java object to a COS object.      *      * @return The cos object that matches this Java object.      */
specifier|public
name|COSBase
name|getCOSObject
parameter_list|()
block|{
return|return
name|dic
return|;
block|}
comment|/**      * Get the font name.      *      * @return The name of the font.      */
specifier|public
name|String
name|getFontName
parameter_list|()
block|{
name|String
name|retval
init|=
literal|null
decl_stmt|;
name|COSName
name|name
init|=
operator|(
name|COSName
operator|)
name|dic
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"FontName"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
name|name
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * This will set the font name.      *      * @param fontName The new name for the font.      */
specifier|public
name|void
name|setFontName
parameter_list|(
name|String
name|fontName
parameter_list|)
block|{
name|COSName
name|name
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|fontName
operator|!=
literal|null
condition|)
block|{
name|name
operator|=
name|COSName
operator|.
name|getPDFName
argument_list|(
name|fontName
argument_list|)
expr_stmt|;
block|}
name|dic
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"FontName"
argument_list|)
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**      * A string representing the preferred font family.      *      * @return The font family.      */
specifier|public
name|String
name|getFontFamily
parameter_list|()
block|{
name|String
name|retval
init|=
literal|null
decl_stmt|;
name|COSString
name|name
init|=
operator|(
name|COSString
operator|)
name|dic
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"FontFamily"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
name|name
operator|.
name|getString
argument_list|()
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * This will set the font family.      *      * @param fontFamily The font family.      */
specifier|public
name|void
name|setFontFamily
parameter_list|(
name|String
name|fontFamily
parameter_list|)
block|{
name|COSString
name|name
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|fontFamily
operator|!=
literal|null
condition|)
block|{
name|name
operator|=
operator|new
name|COSString
argument_list|(
name|fontFamily
argument_list|)
expr_stmt|;
block|}
name|dic
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"FontFamily"
argument_list|)
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**      * The weight of the font.  According to the PDF spec "possible values are      * 100, 200, 300, 400, 500, 600, 700, 800 or 900"  Where a higher number is      * more weight and appears to be more bold.      *      * @return The font weight.      */
specifier|public
name|float
name|getFontWeight
parameter_list|()
block|{
return|return
name|dic
operator|.
name|getFloat
argument_list|(
literal|"FontWeight"
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**      * Set the weight of the font.      *      * @param fontWeight The new weight of the font.      */
specifier|public
name|void
name|setFontWeight
parameter_list|(
name|float
name|fontWeight
parameter_list|)
block|{
name|dic
operator|.
name|setFloat
argument_list|(
literal|"FontWeight"
argument_list|,
name|fontWeight
argument_list|)
expr_stmt|;
block|}
comment|/**      * A string representing the preferred font stretch.      * According to the PDF Spec:      * The font stretch value; it must be one of the following (ordered from      * narrowest to widest): UltraCondensed, ExtraCondensed, Condensed, SemiCondensed,      * Normal, SemiExpanded, Expanded, ExtraExpanded or UltraExpanded.      *      * @return The stretch of the font.      */
specifier|public
name|String
name|getFontStretch
parameter_list|()
block|{
name|String
name|retval
init|=
literal|null
decl_stmt|;
name|COSName
name|name
init|=
operator|(
name|COSName
operator|)
name|dic
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"FontStretch"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
name|name
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * This will set the font stretch.      *      * @param fontStretch The new stretch for the font.      */
specifier|public
name|void
name|setFontStretch
parameter_list|(
name|String
name|fontStretch
parameter_list|)
block|{
name|COSName
name|name
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|fontStretch
operator|!=
literal|null
condition|)
block|{
name|name
operator|=
name|COSName
operator|.
name|getPDFName
argument_list|(
name|fontStretch
argument_list|)
expr_stmt|;
block|}
name|dic
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"FontStretch"
argument_list|)
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the font flags.      *      * @return The font flags.      */
specifier|public
name|int
name|getFlags
parameter_list|()
block|{
return|return
name|dic
operator|.
name|getInt
argument_list|(
literal|"Flags"
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**      * This will set the font flags.      *      * @param flags The new font flags.      */
specifier|public
name|void
name|setFlags
parameter_list|(
name|int
name|flags
parameter_list|)
block|{
name|dic
operator|.
name|setInt
argument_list|(
literal|"Flags"
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the fonts bouding box.      *      * @return The fonts bouding box.      */
specifier|public
name|PDRectangle
name|getFontBoundingBox
parameter_list|()
block|{
name|COSArray
name|rect
init|=
operator|(
name|COSArray
operator|)
name|dic
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"FontBBox"
argument_list|)
argument_list|)
decl_stmt|;
name|PDRectangle
name|retval
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|rect
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
operator|new
name|PDRectangle
argument_list|(
name|rect
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * Set the fonts bounding box.      *      * @param rect The new bouding box.      */
specifier|public
name|void
name|setFontBoundingBox
parameter_list|(
name|PDRectangle
name|rect
parameter_list|)
block|{
name|COSArray
name|array
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|rect
operator|!=
literal|null
condition|)
block|{
name|array
operator|=
name|rect
operator|.
name|getCOSArray
argument_list|()
expr_stmt|;
block|}
name|dic
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"FontBBox"
argument_list|)
argument_list|,
name|array
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the italic angle for the font.      *      * @return The italic angle.      */
specifier|public
name|float
name|getItalicAngle
parameter_list|()
block|{
return|return
name|dic
operator|.
name|getFloat
argument_list|(
literal|"ItalicAngle"
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**      * This will set the italic angle for the font.      *      * @param angle The new italic angle for the font.      */
specifier|public
name|void
name|setItalicAngle
parameter_list|(
name|float
name|angle
parameter_list|)
block|{
name|dic
operator|.
name|setFloat
argument_list|(
literal|"ItalicAngle"
argument_list|,
name|angle
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the ascent for the font.      *      * @return The ascent.      */
specifier|public
name|float
name|getAscent
parameter_list|()
block|{
return|return
name|dic
operator|.
name|getFloat
argument_list|(
literal|"Ascent"
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**      * This will set the ascent for the font.      *      * @param ascent The new ascent for the font.      */
specifier|public
name|void
name|setAscent
parameter_list|(
name|float
name|ascent
parameter_list|)
block|{
name|dic
operator|.
name|setFloat
argument_list|(
literal|"Ascent"
argument_list|,
name|ascent
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the descent for the font.      *      * @return The descent.      */
specifier|public
name|float
name|getDescent
parameter_list|()
block|{
return|return
name|dic
operator|.
name|getFloat
argument_list|(
literal|"Descent"
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**      * This will set the descent for the font.      *      * @param descent The new descent for the font.      */
specifier|public
name|void
name|setDescent
parameter_list|(
name|float
name|descent
parameter_list|)
block|{
name|dic
operator|.
name|setFloat
argument_list|(
literal|"Descent"
argument_list|,
name|descent
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the leading for the font.      *      * @return The leading.      */
specifier|public
name|float
name|getLeading
parameter_list|()
block|{
return|return
name|dic
operator|.
name|getFloat
argument_list|(
literal|"Leading"
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**      * This will set the leading for the font.      *      * @param leading The new leading for the font.      */
specifier|public
name|void
name|setLeading
parameter_list|(
name|float
name|leading
parameter_list|)
block|{
name|dic
operator|.
name|setFloat
argument_list|(
literal|"Leading"
argument_list|,
name|leading
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the CapHeight for the font.      *      * @return The cap height.      */
specifier|public
name|float
name|getCapHeight
parameter_list|()
block|{
return|return
name|dic
operator|.
name|getFloat
argument_list|(
literal|"CapHeight"
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**      * This will set the cap height for the font.      *      * @param capHeight The new cap height for the font.      */
specifier|public
name|void
name|setCapHeight
parameter_list|(
name|float
name|capHeight
parameter_list|)
block|{
name|dic
operator|.
name|setFloat
argument_list|(
literal|"CapHeight"
argument_list|,
name|capHeight
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the x height for the font.      *      * @return The x height.      */
specifier|public
name|float
name|getXHeight
parameter_list|()
block|{
return|return
name|dic
operator|.
name|getFloat
argument_list|(
literal|"XHeight"
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**      * This will set the x height for the font.      *      * @param xHeight The new x height for the font.      */
specifier|public
name|void
name|setXHeight
parameter_list|(
name|float
name|xHeight
parameter_list|)
block|{
name|dic
operator|.
name|setFloat
argument_list|(
literal|"XHeight"
argument_list|,
name|xHeight
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the stemV for the font.      *      * @return The stem v value.      */
specifier|public
name|float
name|getStemV
parameter_list|()
block|{
return|return
name|dic
operator|.
name|getFloat
argument_list|(
literal|"StemV"
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**      * This will set the stem V for the font.      *      * @param stemV The new stem v for the font.      */
specifier|public
name|void
name|setStemV
parameter_list|(
name|float
name|stemV
parameter_list|)
block|{
name|dic
operator|.
name|setFloat
argument_list|(
literal|"StemV"
argument_list|,
name|stemV
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the stemH for the font.      *      * @return The stem h value.      */
specifier|public
name|float
name|getStemH
parameter_list|()
block|{
return|return
name|dic
operator|.
name|getFloat
argument_list|(
literal|"StemH"
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**      * This will set the stem H for the font.      *      * @param stemH The new stem h for the font.      */
specifier|public
name|void
name|setStemH
parameter_list|(
name|float
name|stemH
parameter_list|)
block|{
name|dic
operator|.
name|setFloat
argument_list|(
literal|"StemH"
argument_list|,
name|stemH
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the average width for the font.      *      * @return The average width value.      */
specifier|public
name|float
name|getAverageWidth
parameter_list|()
block|{
return|return
name|dic
operator|.
name|getFloat
argument_list|(
literal|"AvgWidth"
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**      * This will set the average width for the font.      *      * @param averageWidth The new average width for the font.      */
specifier|public
name|void
name|setAverageWidth
parameter_list|(
name|float
name|averageWidth
parameter_list|)
block|{
name|dic
operator|.
name|setFloat
argument_list|(
literal|"AvgWidth"
argument_list|,
name|averageWidth
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the max width for the font.      *      * @return The max width value.      */
specifier|public
name|float
name|getMaxWidth
parameter_list|()
block|{
return|return
name|dic
operator|.
name|getFloat
argument_list|(
literal|"MaxWidth"
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**      * This will set the max width for the font.      *      * @param maxWidth The new max width for the font.      */
specifier|public
name|void
name|setMaxWidth
parameter_list|(
name|float
name|maxWidth
parameter_list|)
block|{
name|dic
operator|.
name|setFloat
argument_list|(
literal|"MaxWidth"
argument_list|,
name|maxWidth
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the missing width for the font.      *      * @return The missing width value.      */
specifier|public
name|float
name|getMissingWidth
parameter_list|()
block|{
return|return
name|dic
operator|.
name|getFloat
argument_list|(
literal|"MissingWidth"
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**      * This will set the missing width for the font.      *      * @param missingWidth The new missing width for the font.      */
specifier|public
name|void
name|setMissingWidth
parameter_list|(
name|float
name|missingWidth
parameter_list|)
block|{
name|dic
operator|.
name|setFloat
argument_list|(
literal|"MissingWidth"
argument_list|,
name|missingWidth
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the character set for the font.      *      * @return The character set value.      */
specifier|public
name|String
name|getCharSet
parameter_list|()
block|{
name|String
name|retval
init|=
literal|null
decl_stmt|;
name|COSString
name|name
init|=
operator|(
name|COSString
operator|)
name|dic
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"CharSet"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
name|name
operator|.
name|getString
argument_list|()
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * This will set the character set for the font.      *      * @param charSet The new character set for the font.      */
specifier|public
name|void
name|setCharacterSet
parameter_list|(
name|String
name|charSet
parameter_list|)
block|{
name|COSString
name|name
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|charSet
operator|!=
literal|null
condition|)
block|{
name|name
operator|=
operator|new
name|COSString
argument_list|(
name|charSet
argument_list|)
expr_stmt|;
block|}
name|dic
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"CharSet"
argument_list|)
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**      * A stream containing a Type 1 font program.      *      * @return A stream containing a Type 1 font program.      */
specifier|public
name|PDStream
name|getFontFile
parameter_list|()
block|{
name|PDStream
name|retval
init|=
literal|null
decl_stmt|;
name|COSStream
name|stream
init|=
operator|(
name|COSStream
operator|)
name|dic
operator|.
name|getDictionaryObject
argument_list|(
literal|"FontFile"
argument_list|)
decl_stmt|;
if|if
condition|(
name|stream
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
operator|new
name|PDStream
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * Set the type 1 font program.      *      * @param type1Stream The type 1 stream.      */
specifier|public
name|void
name|setFontFile
parameter_list|(
name|PDStream
name|type1Stream
parameter_list|)
block|{
name|dic
operator|.
name|setItem
argument_list|(
literal|"FontFile"
argument_list|,
name|type1Stream
argument_list|)
expr_stmt|;
block|}
comment|/**      * A stream containing a true type font program.      *      * @return A stream containing a true type font program.      */
specifier|public
name|PDStream
name|getFontFile2
parameter_list|()
block|{
name|PDStream
name|retval
init|=
literal|null
decl_stmt|;
name|COSStream
name|stream
init|=
operator|(
name|COSStream
operator|)
name|dic
operator|.
name|getDictionaryObject
argument_list|(
literal|"FontFile2"
argument_list|)
decl_stmt|;
if|if
condition|(
name|stream
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
operator|new
name|PDStream
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * Set the true type font program.      *      * @param ttfStream The true type stream.      */
specifier|public
name|void
name|setFontFile2
parameter_list|(
name|PDStream
name|ttfStream
parameter_list|)
block|{
name|dic
operator|.
name|setItem
argument_list|(
literal|"FontFile2"
argument_list|,
name|ttfStream
argument_list|)
expr_stmt|;
block|}
comment|/**      * A stream containing a font program that is not true type or type 1.      *      * @return A stream containing a font program.      */
specifier|public
name|PDStream
name|getFontFile3
parameter_list|()
block|{
name|PDStream
name|retval
init|=
literal|null
decl_stmt|;
name|COSStream
name|stream
init|=
operator|(
name|COSStream
operator|)
name|dic
operator|.
name|getDictionaryObject
argument_list|(
literal|"FontFile3"
argument_list|)
decl_stmt|;
if|if
condition|(
name|stream
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
operator|new
name|PDStream
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * Set a stream containing a font program that is not true type or type 1.      *      * @param stream The font program stream.      */
specifier|public
name|void
name|setFontFile3
parameter_list|(
name|PDStream
name|stream
parameter_list|)
block|{
name|dic
operator|.
name|setItem
argument_list|(
literal|"FontFile3"
argument_list|,
name|stream
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

