begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|ResourceLoader
import|;
end_import

begin_comment
comment|/**  *  This class is used as font manager.  *  @author<a href="mailto:andreas@lehmi.de">Andreas Lehmk√ºhler</a>  *  @version $Revision: 1.0 $  */
end_comment

begin_class
specifier|public
class|class
name|FontManager
block|{
comment|// HashMap with all known fonts
specifier|private
specifier|static
name|HashMap
name|envFonts
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|// the standard font
specifier|private
specifier|static
name|String
name|standardFont
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|Properties
name|fontMapping
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
static|static
block|{
try|try
block|{
name|ResourceLoader
operator|.
name|loadProperties
argument_list|(
literal|"Resources/FontMapping.properties"
argument_list|,
name|fontMapping
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
name|io
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error loading font mapping"
argument_list|)
throw|;
block|}
name|loadFonts
argument_list|()
expr_stmt|;
name|loadFontMapping
argument_list|()
expr_stmt|;
name|loadBasefontMapping
argument_list|()
expr_stmt|;
name|setStandardFont
argument_list|()
expr_stmt|;
block|}
specifier|private
name|FontManager
parameter_list|()
block|{     }
comment|/**      * Get the standard font from the environment, usually Arial or Times New Roman.       *      * @return The standard font       *       */
specifier|public
specifier|static
name|java
operator|.
name|awt
operator|.
name|Font
name|getStandardFont
parameter_list|()
block|{
if|if
condition|(
name|standardFont
operator|!=
literal|null
condition|)
block|{
return|return
name|getAwtFont
argument_list|(
name|standardFont
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Get the font for the given fontname.      *      * @param font The name of the font.      *      * @return The font we are looking for or a similar font or null if nothing is found.      *       */
specifier|public
specifier|static
name|java
operator|.
name|awt
operator|.
name|Font
name|getAwtFont
parameter_list|(
name|String
name|font
parameter_list|)
block|{
name|String
name|fontname
init|=
name|normalizeFontname
argument_list|(
name|font
argument_list|)
decl_stmt|;
if|if
condition|(
name|envFonts
operator|.
name|containsKey
argument_list|(
name|fontname
argument_list|)
condition|)
block|{
return|return
operator|(
name|java
operator|.
name|awt
operator|.
name|Font
operator|)
name|envFonts
operator|.
name|get
argument_list|(
name|fontname
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Load all available fonts from the environment.      */
specifier|private
specifier|static
name|void
name|loadFonts
parameter_list|()
block|{
name|java
operator|.
name|awt
operator|.
name|Font
index|[]
name|allFonts
init|=
name|java
operator|.
name|awt
operator|.
name|GraphicsEnvironment
operator|.
name|getLocalGraphicsEnvironment
argument_list|()
operator|.
name|getAllFonts
argument_list|()
decl_stmt|;
name|int
name|numberOfFonts
init|=
name|allFonts
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfFonts
condition|;
name|i
operator|++
control|)
block|{
name|java
operator|.
name|awt
operator|.
name|Font
name|font
init|=
name|allFonts
index|[
name|i
index|]
decl_stmt|;
name|String
name|family
init|=
name|normalizeFontname
argument_list|(
name|font
operator|.
name|getFamily
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|isBoldItalic
argument_list|(
name|font
argument_list|)
condition|)
block|{
name|envFonts
operator|.
name|put
argument_list|(
name|family
operator|+
literal|"bolditalic"
argument_list|,
name|font
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isBold
argument_list|(
name|font
argument_list|)
condition|)
block|{
name|envFonts
operator|.
name|put
argument_list|(
name|family
operator|+
literal|"bold"
argument_list|,
name|font
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isItalic
argument_list|(
name|font
argument_list|)
condition|)
block|{
name|envFonts
operator|.
name|put
argument_list|(
name|family
operator|+
literal|"italic"
argument_list|,
name|font
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|envFonts
operator|.
name|put
argument_list|(
name|family
argument_list|,
name|font
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|setStandardFont
parameter_list|()
block|{
comment|// One of the following fonts will be the standard-font
if|if
condition|(
name|envFonts
operator|.
name|containsKey
argument_list|(
literal|"arial"
argument_list|)
condition|)
block|{
name|standardFont
operator|=
literal|"arial"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|envFonts
operator|.
name|containsKey
argument_list|(
literal|"timesnewroman"
argument_list|)
condition|)
block|{
name|standardFont
operator|=
literal|"timesnewroman"
expr_stmt|;
block|}
block|}
comment|/**      * Normalize the fontname.      *      * @param fontname The name of the font.      *      * @return The normalized name of the font.      *       */
specifier|private
specifier|static
name|String
name|normalizeFontname
parameter_list|(
name|String
name|fontname
parameter_list|)
block|{
comment|// Terminate all whitespaces, commas and hyphens
name|String
name|normalizedFontname
init|=
name|fontname
operator|.
name|toLowerCase
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
literal|""
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|","
argument_list|,
literal|""
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"-"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
comment|// Terminate trailing characters up to the "+".
comment|// As far as I know, these characters are used in names of embedded fonts
comment|// If the embedded font can't be read, we'll try to find it here
if|if
condition|(
name|normalizedFontname
operator|.
name|indexOf
argument_list|(
literal|"+"
argument_list|)
operator|>
operator|-
literal|1
condition|)
block|{
name|normalizedFontname
operator|=
name|normalizedFontname
operator|.
name|substring
argument_list|(
name|normalizedFontname
operator|.
name|indexOf
argument_list|(
literal|"+"
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// normalize all kinds of fonttypes. There are several possible version which have to be normalized
comment|// e.g. Arial,Bold Arial-BoldMT Helevtica-oblique ...
name|boolean
name|isBold
init|=
name|normalizedFontname
operator|.
name|indexOf
argument_list|(
literal|"bold"
argument_list|)
operator|>
operator|-
literal|1
decl_stmt|;
name|boolean
name|isItalic
init|=
name|normalizedFontname
operator|.
name|indexOf
argument_list|(
literal|"italic"
argument_list|)
operator|>
operator|-
literal|1
operator|||
name|normalizedFontname
operator|.
name|indexOf
argument_list|(
literal|"oblique"
argument_list|)
operator|>
operator|-
literal|1
decl_stmt|;
name|normalizedFontname
operator|=
name|normalizedFontname
operator|.
name|toLowerCase
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"bold"
argument_list|,
literal|""
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"italic"
argument_list|,
literal|""
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"oblique"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|isBold
condition|)
block|{
name|normalizedFontname
operator|+=
literal|"bold"
expr_stmt|;
block|}
if|if
condition|(
name|isItalic
condition|)
block|{
name|normalizedFontname
operator|+=
literal|"italic"
expr_stmt|;
block|}
return|return
name|normalizedFontname
return|;
block|}
comment|/**      * Add a font-mapping.      *      * @param font The name of the font.      *      * @param mappedName The name of the mapped font.      *       */
specifier|private
specifier|static
name|boolean
name|addFontMapping
parameter_list|(
name|String
name|font
parameter_list|,
name|String
name|mappedName
parameter_list|)
block|{
name|String
name|fontname
init|=
name|normalizeFontname
argument_list|(
name|font
argument_list|)
decl_stmt|;
comment|// is there already a font mapping ?
if|if
condition|(
name|envFonts
operator|.
name|containsKey
argument_list|(
name|fontname
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|mappedFontname
init|=
name|normalizeFontname
argument_list|(
name|mappedName
argument_list|)
decl_stmt|;
comment|// is the mapped font available ?
if|if
condition|(
operator|!
name|envFonts
operator|.
name|containsKey
argument_list|(
name|mappedFontname
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|envFonts
operator|.
name|put
argument_list|(
name|fontname
argument_list|,
name|envFonts
operator|.
name|get
argument_list|(
name|mappedFontname
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**      * Load the mapping for the well knwon font-substitutions.      *      */
specifier|private
specifier|static
name|void
name|loadFontMapping
parameter_list|()
block|{
name|boolean
name|addedMapping
init|=
literal|true
decl_stmt|;
comment|// There could be some recursive mappings in the fontmapping, so that we have to
comment|// read the list until no more additional mapping is added to it
while|while
condition|(
name|addedMapping
condition|)
block|{
name|int
name|counter
init|=
literal|0
decl_stmt|;
name|Enumeration
name|keys
init|=
name|fontMapping
operator|.
name|keys
argument_list|()
decl_stmt|;
while|while
condition|(
name|keys
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|keys
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|addFontMapping
argument_list|(
name|key
argument_list|,
operator|(
name|String
operator|)
name|fontMapping
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
condition|)
block|{
name|counter
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|counter
operator|==
literal|0
condition|)
block|{
name|addedMapping
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Mapping for the basefonts.      */
specifier|private
specifier|static
name|void
name|loadBasefontMapping
parameter_list|()
block|{
name|addFontMapping
argument_list|(
literal|"Times-Roman"
argument_list|,
literal|"TimesNewRoman"
argument_list|)
expr_stmt|;
name|addFontMapping
argument_list|(
literal|"Times-Bold"
argument_list|,
literal|"TimesNewRoman,Bold"
argument_list|)
expr_stmt|;
name|addFontMapping
argument_list|(
literal|"Times-Italic"
argument_list|,
literal|"TimesNewRoman,Italic"
argument_list|)
expr_stmt|;
name|addFontMapping
argument_list|(
literal|"Times-BoldItalic"
argument_list|,
literal|"TimesNewRoman,Bold,Italic"
argument_list|)
expr_stmt|;
name|addFontMapping
argument_list|(
literal|"Helvetica-Oblique"
argument_list|,
literal|"Helvetica,Italic"
argument_list|)
expr_stmt|;
name|addFontMapping
argument_list|(
literal|"Helvetica-BoldOblique"
argument_list|,
literal|"Helvetica,Bold,Italic"
argument_list|)
expr_stmt|;
name|addFontMapping
argument_list|(
literal|"Courier-Oblique"
argument_list|,
literal|"Courier,Italic"
argument_list|)
expr_stmt|;
name|addFontMapping
argument_list|(
literal|"Courier-BoldOblique"
argument_list|,
literal|"Courier,Bold,Italic"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Try to determine if the font has both a BOLD and an ITALIC-type.      *      * @param name The font.      *      * @return font has BOLD and ITALIC-type or not      */
specifier|private
specifier|static
name|boolean
name|isBoldItalic
parameter_list|(
name|java
operator|.
name|awt
operator|.
name|Font
name|font
parameter_list|)
block|{
return|return
name|isBold
argument_list|(
name|font
argument_list|)
operator|&&
name|isItalic
argument_list|(
name|font
argument_list|)
return|;
block|}
comment|/**      * Try to determine if the font has a BOLD-type.      *      * @param name The font.      *      * @return font has BOLD-type or not      */
specifier|private
specifier|static
name|boolean
name|isBold
parameter_list|(
name|java
operator|.
name|awt
operator|.
name|Font
name|font
parameter_list|)
block|{
name|String
name|name
init|=
name|font
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|indexOf
argument_list|(
literal|"bold"
argument_list|)
operator|>
operator|-
literal|1
condition|)
block|{
return|return
literal|true
return|;
block|}
name|String
name|psname
init|=
name|font
operator|.
name|getPSName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|psname
operator|.
name|indexOf
argument_list|(
literal|"bold"
argument_list|)
operator|>
operator|-
literal|1
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Try to determine if the font has an ITALIC-type.      *      * @param name The font.      *      * @return font has ITALIC-type or not      */
specifier|private
specifier|static
name|boolean
name|isItalic
parameter_list|(
name|java
operator|.
name|awt
operator|.
name|Font
name|font
parameter_list|)
block|{
name|String
name|name
init|=
name|font
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
comment|// oblique is the same as italic
if|if
condition|(
name|name
operator|.
name|indexOf
argument_list|(
literal|"italic"
argument_list|)
operator|>
operator|-
literal|1
operator|||
name|name
operator|.
name|indexOf
argument_list|(
literal|"oblique"
argument_list|)
operator|>
operator|-
literal|1
condition|)
block|{
return|return
literal|true
return|;
block|}
name|String
name|psname
init|=
name|font
operator|.
name|getPSName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|psname
operator|.
name|indexOf
argument_list|(
literal|"italic"
argument_list|)
operator|>
operator|-
literal|1
operator|||
name|psname
operator|.
name|indexOf
argument_list|(
literal|"oblique"
argument_list|)
operator|>
operator|-
literal|1
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

