begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Graphics
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|AffineTransform
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDRectangle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * This is implementation of the Type0 Font.  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.9 $  */
end_comment

begin_class
specifier|public
class|class
name|PDType0Font
extends|extends
comment|/*PDFont following is a hack ...*/
name|PDType1Font
block|{
comment|/**      * Constructor.      */
specifier|public
name|PDType0Font
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|font
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|,
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"Type0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor.      *      * @param fontDictionary The font dictionary according to the PDF specification.      */
specifier|public
name|PDType0Font
parameter_list|(
name|COSDictionary
name|fontDictionary
parameter_list|)
block|{
name|super
argument_list|(
name|fontDictionary
argument_list|)
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|void
name|drawString
parameter_list|(
name|String
name|string
parameter_list|,
name|Graphics
name|g
parameter_list|,
name|float
name|fontSize
parameter_list|,
name|AffineTransform
name|at
parameter_list|,
name|float
name|x
parameter_list|,
name|float
name|y
parameter_list|)
throws|throws
name|IOException
block|{
comment|//throw new RuntimeException( "Not yet implemented" );
name|super
operator|.
name|drawString
argument_list|(
name|string
argument_list|,
name|g
argument_list|,
name|fontSize
argument_list|,
name|at
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|logger
argument_list|()
operator|.
name|info
argument_list|(
literal|"Called Type1Font.drawString since Type0 is not yet implemented"
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the fonts bouding box.      *      * @return The fonts bouding box.      *      * @throws IOException If there is an error getting the bounding box.      */
specifier|public
name|PDRectangle
name|getFontBoundingBox
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Not yet implemented"
argument_list|)
throw|;
block|}
comment|/**      * This will get the font width for a character.      *      * @param c The character code to get the width for.      * @param offset The offset into the array.      * @param length The length of the data.      *      * @return The width is in 1000 unit of text space, ie 333 or 777      *      * @throws IOException If an error occurs while parsing.      */
specifier|public
name|float
name|getFontWidth
parameter_list|(
name|byte
index|[]
name|c
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|COSArray
name|descendantFontArray
init|=
operator|(
name|COSArray
operator|)
name|font
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"DescendantFonts"
argument_list|)
argument_list|)
decl_stmt|;
name|COSDictionary
name|descendantFontDictionary
init|=
operator|(
name|COSDictionary
operator|)
name|descendantFontArray
operator|.
name|getObject
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|PDFont
name|descendentFont
init|=
name|PDFontFactory
operator|.
name|createFont
argument_list|(
name|descendantFontDictionary
argument_list|)
decl_stmt|;
return|return
name|descendentFont
operator|.
name|getFontWidth
argument_list|(
name|c
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
return|;
block|}
comment|/**      * This will get the font height for a character.      *      * @param c The character code to get the height for.      * @param offset The offset into the array.      * @param length The length of the data.      *      * @return The width is in 1000 unit of text space, ie 333 or 777      *      * @throws IOException If an error occurs while parsing.      */
specifier|public
name|float
name|getFontHeight
parameter_list|(
name|byte
index|[]
name|c
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|COSArray
name|descendantFontArray
init|=
operator|(
name|COSArray
operator|)
name|font
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"DescendantFonts"
argument_list|)
argument_list|)
decl_stmt|;
name|COSDictionary
name|descendantFontDictionary
init|=
operator|(
name|COSDictionary
operator|)
name|descendantFontArray
operator|.
name|getObject
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|PDFont
name|descendentFont
init|=
name|PDFontFactory
operator|.
name|createFont
argument_list|(
name|descendantFontDictionary
argument_list|)
decl_stmt|;
return|return
name|descendentFont
operator|.
name|getFontHeight
argument_list|(
name|c
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
return|;
block|}
comment|/**      * This will get the average font width for all characters.      *      * @return The width is in 1000 unit of text space, ie 333 or 777      *      * @throws IOException If an error occurs while parsing.      */
specifier|public
name|float
name|getAverageFontWidth
parameter_list|()
throws|throws
name|IOException
block|{
name|COSArray
name|descendantFontArray
init|=
operator|(
name|COSArray
operator|)
name|font
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"DescendantFonts"
argument_list|)
argument_list|)
decl_stmt|;
name|COSDictionary
name|descendantFontDictionary
init|=
operator|(
name|COSDictionary
operator|)
name|descendantFontArray
operator|.
name|getObject
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|PDFont
name|descendentFont
init|=
name|PDFontFactory
operator|.
name|createFont
argument_list|(
name|descendantFontDictionary
argument_list|)
decl_stmt|;
return|return
name|descendentFont
operator|.
name|getAverageFontWidth
argument_list|()
return|;
block|}
block|}
end_class

end_unit

