begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|encryption
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Security
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|jce
operator|.
name|provider
operator|.
name|BouncyCastleProvider
import|;
end_import

begin_comment
comment|/**  * This class manages security handlers for the application. It follows the singleton pattern.  * To be usable, security managers must be registered in it. Security managers are retrieved by  * the application when necessary.  *  * @author Benoit Guillon (benoit.guillon@snv.jussieu.fr)  *  * @version $Revision: 1.3 $  *  */
end_comment

begin_class
specifier|public
class|class
name|SecurityHandlersManager
block|{
comment|/**      * The unique instance of this manager.      */
specifier|private
specifier|static
name|SecurityHandlersManager
name|instance
decl_stmt|;
comment|/**      * hashtable used to index handlers regarding their name.      * Basically this will be used when opening an encrypted      * document to find the appropriate security handler to handle      * security features of the document.      */
specifier|private
name|Hashtable
name|handlerNames
init|=
literal|null
decl_stmt|;
comment|/**      * Hashtable used to index handlers regarding the class of      * protection policy they use.  Basically this will be used when      * encrypting a document.      */
specifier|private
name|Hashtable
name|handlerPolicyClasses
init|=
literal|null
decl_stmt|;
comment|/**      * private constructor.      */
specifier|private
name|SecurityHandlersManager
parameter_list|()
block|{
name|handlerNames
operator|=
operator|new
name|Hashtable
argument_list|()
expr_stmt|;
name|handlerPolicyClasses
operator|=
operator|new
name|Hashtable
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|registerHandler
argument_list|(
name|StandardSecurityHandler
operator|.
name|FILTER
argument_list|,
name|StandardSecurityHandler
operator|.
name|class
argument_list|,
name|StandardProtectionPolicy
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|registerHandler
argument_list|(
name|PublicKeySecurityHandler
operator|.
name|FILTER
argument_list|,
name|PublicKeySecurityHandler
operator|.
name|class
argument_list|,
name|PublicKeyProtectionPolicy
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"SecurityHandlersManager strange error with builtin handlers: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * register a security handler.      *      * If the security handler was already registered an exception is thrown.      * If another handler was previously registered for the same filter name or      * for the same policy name, an exception is thrown      *      * @param filterName The name of the filter.      * @param securityHandlerClass Security Handler class to register.      * @param protectionPolicyClass Protection Policy class to register.      *      * @throws BadSecurityHandlerException If there is an error registering the security handler.      */
specifier|public
name|void
name|registerHandler
parameter_list|(
name|String
name|filterName
parameter_list|,
name|Class
name|securityHandlerClass
parameter_list|,
name|Class
name|protectionPolicyClass
parameter_list|)
throws|throws
name|BadSecurityHandlerException
block|{
if|if
condition|(
name|handlerNames
operator|.
name|contains
argument_list|(
name|securityHandlerClass
argument_list|)
operator|||
name|handlerPolicyClasses
operator|.
name|contains
argument_list|(
name|securityHandlerClass
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|BadSecurityHandlerException
argument_list|(
literal|"the following security handler was already registered: "
operator|+
name|securityHandlerClass
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|SecurityHandler
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|securityHandlerClass
argument_list|)
condition|)
block|{
try|try
block|{
if|if
condition|(
name|handlerNames
operator|.
name|containsKey
argument_list|(
name|filterName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|BadSecurityHandlerException
argument_list|(
literal|"a security handler was already registered "
operator|+
literal|"for the filter name "
operator|+
name|filterName
argument_list|)
throw|;
block|}
if|if
condition|(
name|handlerPolicyClasses
operator|.
name|containsKey
argument_list|(
name|protectionPolicyClass
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|BadSecurityHandlerException
argument_list|(
literal|"a security handler was already registered "
operator|+
literal|"for the policy class "
operator|+
name|protectionPolicyClass
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|handlerNames
operator|.
name|put
argument_list|(
name|filterName
argument_list|,
name|securityHandlerClass
argument_list|)
expr_stmt|;
name|handlerPolicyClasses
operator|.
name|put
argument_list|(
name|protectionPolicyClass
argument_list|,
name|securityHandlerClass
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BadSecurityHandlerException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|BadSecurityHandlerException
argument_list|(
literal|"The class is not a super class of SecurityHandler"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Get the singleton instance.      *      * @return The SecurityHandlersManager.      */
specifier|public
specifier|static
name|SecurityHandlersManager
name|getInstance
parameter_list|()
block|{
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
name|instance
operator|=
operator|new
name|SecurityHandlersManager
argument_list|()
expr_stmt|;
block|}
name|Security
operator|.
name|addProvider
argument_list|(
operator|new
name|BouncyCastleProvider
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|instance
return|;
block|}
comment|/**      * Get the security handler for the protection policy.      *      * @param policy The policy to get the security handler for.      *      * @return The appropriate security handler.      *      * @throws BadSecurityHandlerException If it is unable to create a SecurityHandler.      */
specifier|public
name|SecurityHandler
name|getSecurityHandler
parameter_list|(
name|ProtectionPolicy
name|policy
parameter_list|)
throws|throws
name|BadSecurityHandlerException
block|{
name|Object
name|found
init|=
name|handlerPolicyClasses
operator|.
name|get
argument_list|(
name|policy
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|found
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadSecurityHandlerException
argument_list|(
literal|"Cannot find an appropriate security handler for "
operator|+
name|policy
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|Class
name|handlerclass
init|=
operator|(
name|Class
operator|)
name|found
decl_stmt|;
name|Class
index|[]
name|argsClasses
init|=
block|{
name|policy
operator|.
name|getClass
argument_list|()
block|}
decl_stmt|;
name|Object
index|[]
name|args
init|=
block|{
name|policy
block|}
decl_stmt|;
try|try
block|{
name|Constructor
name|c
init|=
name|handlerclass
operator|.
name|getDeclaredConstructor
argument_list|(
name|argsClasses
argument_list|)
decl_stmt|;
name|SecurityHandler
name|handler
init|=
operator|(
name|SecurityHandler
operator|)
name|c
operator|.
name|newInstance
argument_list|(
name|args
argument_list|)
decl_stmt|;
return|return
name|handler
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|BadSecurityHandlerException
argument_list|(
literal|"problem while trying to instanciate the security handler "
operator|+
name|handlerclass
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * Retrieve the appropriate SecurityHandler for a the given filter name.      * The filter name is an entry of the encryption dictionary of an encrypted document.      *      * @param filterName The filter name.      *      * @return The appropriate SecurityHandler if it exists.      *      * @throws BadSecurityHandlerException If the security handler does not exist.      */
specifier|public
name|SecurityHandler
name|getSecurityHandler
parameter_list|(
name|String
name|filterName
parameter_list|)
throws|throws
name|BadSecurityHandlerException
block|{
name|Object
name|found
init|=
name|handlerNames
operator|.
name|get
argument_list|(
name|filterName
argument_list|)
decl_stmt|;
if|if
condition|(
name|found
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadSecurityHandlerException
argument_list|(
literal|"Cannot find an appropriate security handler for "
operator|+
name|filterName
argument_list|)
throw|;
block|}
name|Class
name|handlerclass
init|=
operator|(
name|Class
operator|)
name|found
decl_stmt|;
name|Class
index|[]
name|argsClasses
init|=
block|{}
decl_stmt|;
name|Object
index|[]
name|args
init|=
block|{}
decl_stmt|;
try|try
block|{
name|Constructor
name|c
init|=
name|handlerclass
operator|.
name|getDeclaredConstructor
argument_list|(
name|argsClasses
argument_list|)
decl_stmt|;
name|SecurityHandler
name|handler
init|=
operator|(
name|SecurityHandler
operator|)
name|c
operator|.
name|newInstance
argument_list|(
name|args
argument_list|)
decl_stmt|;
return|return
name|handler
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|BadSecurityHandlerException
argument_list|(
literal|"problem while trying to instanciate the security handler "
operator|+
name|handlerclass
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

