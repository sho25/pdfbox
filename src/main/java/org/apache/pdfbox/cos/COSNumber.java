begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * This class represents an abstract number in a PDF document.  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.10 $  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|COSNumber
extends|extends
name|COSBase
block|{
comment|/**      * ZERO.     */
specifier|public
specifier|static
specifier|final
name|COSInteger
name|ZERO
init|=
operator|new
name|COSInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|/**      * ONE.     */
specifier|public
specifier|static
specifier|final
name|COSInteger
name|ONE
init|=
operator|new
name|COSInteger
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
name|COMMON_NUMBERS
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
static|static
block|{
name|COMMON_NUMBERS
operator|.
name|put
argument_list|(
literal|"0"
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
name|COMMON_NUMBERS
operator|.
name|put
argument_list|(
literal|"1"
argument_list|,
name|ONE
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the float value of this number.      *      * @return The float value of this object.      */
specifier|public
specifier|abstract
name|float
name|floatValue
parameter_list|()
function_decl|;
comment|/**      * This will get the double value of this number.      *      * @return The double value of this number.      */
specifier|public
specifier|abstract
name|double
name|doubleValue
parameter_list|()
function_decl|;
comment|/**      * This will get the integer value of this number.      *      * @return The integer value of this number.      */
specifier|public
specifier|abstract
name|int
name|intValue
parameter_list|()
function_decl|;
comment|/**      * This will get the long value of this number.      *      * @return The long value of this number.      */
specifier|public
specifier|abstract
name|long
name|longValue
parameter_list|()
function_decl|;
comment|/**      * This factory method will get the appropriate number object.      *      * @param number The string representation of the number.      *      * @return A number object, either float or int.      *      * @throws IOException If the string is not a number.      */
specifier|public
specifier|static
name|COSNumber
name|get
parameter_list|(
name|String
name|number
parameter_list|)
throws|throws
name|IOException
block|{
name|COSNumber
name|result
init|=
operator|(
name|COSNumber
operator|)
name|COMMON_NUMBERS
operator|.
name|get
argument_list|(
name|number
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|number
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|result
operator|=
operator|new
name|COSFloat
argument_list|(
name|number
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|new
name|COSInteger
argument_list|(
name|number
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

