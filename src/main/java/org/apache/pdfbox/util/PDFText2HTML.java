begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_comment
comment|/**  * Wrap stripped text in simple HTML, trying to form HTML paragraphs.  * Paragraphs broken by pages, columns, or figures are not mended.  *  *  * @author jjb - http://www.johnjbarton.com  * @version  $Revision: 1.3 $  */
end_comment

begin_class
specifier|public
class|class
name|PDFText2HTML
extends|extends
name|PDFTextStripper
block|{
specifier|private
specifier|static
specifier|final
name|int
name|INITIAL_PDF_TO_HTML_BYTES
init|=
literal|8192
decl_stmt|;
specifier|private
name|TextPosition
name|beginTitle
decl_stmt|;
specifier|private
name|TextPosition
name|afterEndTitle
decl_stmt|;
specifier|private
name|String
name|titleGuess
decl_stmt|;
specifier|private
name|boolean
name|suppressParagraphs
decl_stmt|;
specifier|private
name|boolean
name|onFirstPage
init|=
literal|true
decl_stmt|;
comment|/**      * Constructor.      *      * @throws IOException If there is an error during initialization.      */
specifier|public
name|PDFText2HTML
parameter_list|()
throws|throws
name|IOException
block|{
name|titleGuess
operator|=
literal|""
expr_stmt|;
name|beginTitle
operator|=
literal|null
expr_stmt|;
name|afterEndTitle
operator|=
literal|null
expr_stmt|;
name|suppressParagraphs
operator|=
literal|false
expr_stmt|;
block|}
comment|/**      * Write the header to the output document.      *      * @throws IOException If there is a problem writing out the header to the document.      */
specifier|protected
name|void
name|writeHeader
parameter_list|()
throws|throws
name|IOException
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|(
name|INITIAL_PDF_TO_HTML_BYTES
argument_list|)
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<html><head>"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<title>"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|getTitleGuess
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"</title>"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"</head>"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<body>\n"
argument_list|)
expr_stmt|;
name|super
operator|.
name|writeString
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * The guess to the document title.      *      * @return A string that is the title of this document.      */
specifier|protected
name|String
name|getTitleGuess
parameter_list|()
block|{
return|return
name|titleGuess
return|;
block|}
comment|/**      * @deprecated      * {@inheritDoc}      */
specifier|protected
name|void
name|flushText
parameter_list|()
throws|throws
name|IOException
block|{
name|writePage
argument_list|()
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|protected
name|void
name|writePage
parameter_list|()
throws|throws
name|IOException
block|{
name|Iterator
name|textIter
init|=
name|getCharactersByArticle
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|onFirstPage
condition|)
block|{
name|guessTitle
argument_list|(
name|textIter
argument_list|)
expr_stmt|;
name|writeHeader
argument_list|()
expr_stmt|;
name|onFirstPage
operator|=
literal|false
expr_stmt|;
block|}
name|super
operator|.
name|writePage
argument_list|()
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|void
name|endDocument
parameter_list|(
name|PDDocument
name|pdf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeString
argument_list|(
literal|"</body></html>"
argument_list|)
expr_stmt|;
block|}
comment|/**      * This method will attempt to guess the title of the document.      *      * @param textIter The characters on the first page.      * @return The text position that is guessed to be the title.      */
specifier|protected
name|TextPosition
name|guessTitle
parameter_list|(
name|Iterator
name|textIter
parameter_list|)
block|{
name|float
name|lastFontSize
init|=
operator|-
literal|1.0f
decl_stmt|;
name|int
name|stringsInFont
init|=
literal|0
decl_stmt|;
name|StringBuffer
name|titleText
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
while|while
condition|(
name|textIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Iterator
name|textByArticle
init|=
operator|(
operator|(
name|List
operator|)
name|textIter
operator|.
name|next
argument_list|()
operator|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|textByArticle
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|TextPosition
name|position
init|=
operator|(
name|TextPosition
operator|)
name|textByArticle
operator|.
name|next
argument_list|()
decl_stmt|;
name|float
name|currentFontSize
init|=
name|position
operator|.
name|getFontSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentFontSize
operator|!=
name|lastFontSize
condition|)
block|{
if|if
condition|(
name|beginTitle
operator|!=
literal|null
condition|)
block|{
comment|// font change in candidate title.
if|if
condition|(
name|stringsInFont
operator|==
literal|0
condition|)
block|{
name|beginTitle
operator|=
literal|null
expr_stmt|;
comment|// false alarm
name|titleText
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// had a significant font with some words: call it a title
name|titleGuess
operator|=
name|titleText
operator|.
name|toString
argument_list|()
expr_stmt|;
name|afterEndTitle
operator|=
name|position
expr_stmt|;
return|return
name|beginTitle
return|;
block|}
block|}
else|else
block|{
comment|// font change and begin == null
if|if
condition|(
name|currentFontSize
operator|>
literal|13.0f
condition|)
block|{
comment|// most body text is 12pt max I guess
name|beginTitle
operator|=
name|position
expr_stmt|;
block|}
block|}
name|lastFontSize
operator|=
name|currentFontSize
expr_stmt|;
name|stringsInFont
operator|=
literal|0
expr_stmt|;
block|}
name|stringsInFont
operator|++
expr_stmt|;
if|if
condition|(
name|beginTitle
operator|!=
literal|null
condition|)
block|{
name|titleText
operator|.
name|append
argument_list|(
name|position
operator|.
name|getCharacter
argument_list|()
operator|+
literal|" "
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|beginTitle
return|;
comment|// null
block|}
comment|/**      * Write out the paragraph separator.      *      * @throws IOException If there is an error writing to the stream.      */
specifier|protected
name|void
name|startParagraph
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|suppressParagraphs
condition|)
block|{
name|super
operator|.
name|writeString
argument_list|(
literal|"<p>"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Write out the paragraph separator.      *      * @throws IOException If there is an error writing to the stream.      */
specifier|protected
name|void
name|endParagraph
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|suppressParagraphs
condition|)
block|{
name|super
operator|.
name|writeString
argument_list|(
literal|"</p>"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Write a string to the output stream and escape some HTML characters      */
specifier|protected
name|void
name|writeString
parameter_list|(
name|String
name|chars
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|chars
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|chars
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|c
operator|<
literal|32
operator|)
operator|||
operator|(
name|c
operator|>
literal|126
operator|)
condition|)
block|{
name|int
name|charAsInt
init|=
name|c
decl_stmt|;
name|super
operator|.
name|writeString
argument_list|(
literal|"&#"
operator|+
name|charAsInt
operator|+
literal|";"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|34
case|:
name|super
operator|.
name|writeString
argument_list|(
literal|"&quot;"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|38
case|:
name|super
operator|.
name|writeString
argument_list|(
literal|"&amp;"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|60
case|:
name|super
operator|.
name|writeString
argument_list|(
literal|"&lt;"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|62
case|:
name|super
operator|.
name|writeString
argument_list|(
literal|"&gt;"
argument_list|)
expr_stmt|;
break|break;
default|default:
name|super
operator|.
name|writeString
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * {@inheritDoc}      */
specifier|protected
name|void
name|writeCharacters
parameter_list|(
name|TextPosition
name|position
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|position
operator|==
name|beginTitle
condition|)
block|{
name|super
operator|.
name|writeString
argument_list|(
literal|"<H1>"
argument_list|)
expr_stmt|;
name|suppressParagraphs
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|position
operator|==
name|afterEndTitle
condition|)
block|{
name|super
operator|.
name|writeString
argument_list|(
literal|"</H1>"
argument_list|)
expr_stmt|;
comment|// end title and start first paragraph
name|suppressParagraphs
operator|=
literal|false
expr_stmt|;
block|}
name|writeString
argument_list|(
name|position
operator|.
name|getCharacter
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return Returns the suppressParagraphs.      */
specifier|public
name|boolean
name|isSuppressParagraphs
parameter_list|()
block|{
return|return
name|suppressParagraphs
return|;
block|}
comment|/**      * @param shouldSuppressParagraphs The suppressParagraphs to set.      */
specifier|public
name|void
name|setSuppressParagraphs
parameter_list|(
name|boolean
name|shouldSuppressParagraphs
parameter_list|)
block|{
name|this
operator|.
name|suppressParagraphs
operator|=
name|shouldSuppressParagraphs
expr_stmt|;
block|}
block|}
end_class

end_unit

