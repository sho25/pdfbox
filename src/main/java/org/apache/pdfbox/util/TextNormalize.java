begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
package|;
end_package

begin_comment
comment|/**  * This class allows a caller to normalize text in various ways.  * It will load the ICU4J jar file if it is defined on the classpath.  *   */
end_comment

begin_class
specifier|public
class|class
name|TextNormalize
block|{
specifier|private
name|ICU4JImpl
name|icu4j
init|=
literal|null
decl_stmt|;
specifier|public
name|TextNormalize
parameter_list|()
block|{
name|findICU4J
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|findICU4J
parameter_list|()
block|{
comment|// see if we can load the icu4j classes from the classpath
try|try
block|{
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
literal|"com.ibm.icu.text.Bidi"
argument_list|)
expr_stmt|;
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
literal|"com.ibm.icu.text.Normalizer"
argument_list|)
expr_stmt|;
name|icu4j
operator|=
operator|new
name|ICU4JImpl
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|icu4j
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * Takes a line of text in presentation order and converts it to logical order.      * For most text other than Arabic and Hebrew, the presentation and logical      * orders are the same. However, for Arabic and Hebrew, they are different and      * if the text involves both RTL and LTR text then the Unicode BIDI algorithm      * must be used to determine how to map between them.        *       * @param a_str Presentation form of line to convert (i.e. left most char is first char)      * @param a_isRtlDominant true if the PAGE has a dominant right to left ordering      * @return Logical form of string (or original string if ICU4J library is not on classpath)      */
specifier|public
name|String
name|makeLineLogicalOrder
parameter_list|(
name|String
name|a_str
parameter_list|,
name|boolean
name|a_isRtlDominant
parameter_list|)
block|{
if|if
condition|(
name|icu4j
operator|!=
literal|null
condition|)
block|{
return|return
name|icu4j
operator|.
name|makeLineLogicalOrder
argument_list|(
name|a_str
argument_list|,
name|a_isRtlDominant
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|a_str
return|;
block|}
block|}
comment|/**      * Normalize the presentation forms of characters in the string.      * For example, convert the single "fi" ligature to "f" and "i".       *       * @param a_str String to normalize      * @return Normalized string (or original string if ICU4J library is not on classpath)      */
specifier|public
name|String
name|normalizePres
parameter_list|(
name|String
name|a_str
parameter_list|)
block|{
if|if
condition|(
name|icu4j
operator|!=
literal|null
condition|)
block|{
return|return
name|icu4j
operator|.
name|normalizePres
argument_list|(
name|a_str
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|a_str
return|;
block|}
block|}
block|}
end_class

end_unit

