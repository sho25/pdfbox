begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|pagedrawer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Graphics2D
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|AffineTransform
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|BufferedImage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdfviewer
operator|.
name|PageDrawer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|xobject
operator|.
name|PDInlinedImage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|ImageParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|Matrix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|PDFOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|OperatorProcessor
import|;
end_import

begin_comment
comment|/**  * Implementation of content stream operator for page drawer.  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.2 $  */
end_comment

begin_class
specifier|public
class|class
name|BeginInlineImage
extends|extends
name|OperatorProcessor
block|{
comment|/**      * process : BI : begin inline image.      * @param operator The operator that is being executed.      * @param arguments List      * @throws IOException If there is an error displaying the inline image.      */
specifier|public
name|void
name|process
parameter_list|(
name|PDFOperator
name|operator
parameter_list|,
name|List
name|arguments
parameter_list|)
throws|throws
name|IOException
block|{
name|PageDrawer
name|drawer
init|=
operator|(
name|PageDrawer
operator|)
name|context
decl_stmt|;
name|Graphics2D
name|graphics
init|=
name|drawer
operator|.
name|getGraphics
argument_list|()
decl_stmt|;
comment|//begin inline image object
name|ImageParameters
name|params
init|=
name|operator
operator|.
name|getImageParameters
argument_list|()
decl_stmt|;
name|PDInlinedImage
name|image
init|=
operator|new
name|PDInlinedImage
argument_list|()
decl_stmt|;
name|image
operator|.
name|setImageParameters
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|image
operator|.
name|setImageData
argument_list|(
name|operator
operator|.
name|getImageData
argument_list|()
argument_list|)
expr_stmt|;
name|BufferedImage
name|awtImage
init|=
name|image
operator|.
name|createImage
argument_list|()
decl_stmt|;
name|Matrix
name|ctm
init|=
name|drawer
operator|.
name|getGraphicsState
argument_list|()
operator|.
name|getCurrentTransformationMatrix
argument_list|()
decl_stmt|;
name|int
name|width
init|=
name|awtImage
operator|.
name|getWidth
argument_list|()
decl_stmt|;
name|int
name|height
init|=
name|awtImage
operator|.
name|getHeight
argument_list|()
decl_stmt|;
name|AffineTransform
name|at
init|=
operator|new
name|AffineTransform
argument_list|(
name|ctm
operator|.
name|getValue
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|/
name|width
argument_list|,
name|ctm
operator|.
name|getValue
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
name|ctm
operator|.
name|getValue
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|,
name|ctm
operator|.
name|getValue
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
operator|/
name|height
argument_list|,
name|ctm
operator|.
name|getValue
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
argument_list|,
name|ctm
operator|.
name|getValue
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
comment|//at.setToRotation((double)page.getRotation());
comment|// The transformation should be done
comment|// 1 - Translation
comment|// 2 - Rotation
comment|// 3 - Scale or Skew
comment|//AffineTransform at = new AffineTransform();
comment|// Translation
comment|//at = new AffineTransform();
comment|//at.setToTranslation((double)ctm.getValue(0,0),
comment|//                    (double)ctm.getValue(0,1));
comment|// Rotation
comment|//AffineTransform toAdd = new AffineTransform();
comment|//toAdd.setToRotation(1.5705);
comment|//toAdd.setToRotation(ctm.getValue(2,0)*(Math.PI/180));
comment|//at.concatenate(toAdd);
comment|// Scale / Skew?
comment|//toAdd.setToScale(width, height);
comment|//at.concatenate(toAdd);
comment|//at.setToScale( width, height );
name|graphics
operator|.
name|drawImage
argument_list|(
name|awtImage
argument_list|,
name|at
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|//graphics.drawImage( awtImage,0,0, width,height,null);
block|}
block|}
end_class

end_unit

