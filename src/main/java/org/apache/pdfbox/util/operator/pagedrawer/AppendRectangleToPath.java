begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|pagedrawer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|Point2D
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|Rectangle2D
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSNumber
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdfviewer
operator|.
name|PageDrawer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|PDFOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|OperatorProcessor
import|;
end_import

begin_comment
comment|/**  * Implementation of content stream operator for page drawer.  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.3 $  */
end_comment

begin_class
specifier|public
class|class
name|AppendRectangleToPath
extends|extends
name|OperatorProcessor
block|{
comment|/**      * process : re : append rectangle to path.      * @param operator The operator that is being executed.      * @param arguments List      */
specifier|public
name|void
name|process
parameter_list|(
name|PDFOperator
name|operator
parameter_list|,
name|List
name|arguments
parameter_list|)
block|{
name|PageDrawer
name|drawer
init|=
operator|(
name|PageDrawer
operator|)
name|context
decl_stmt|;
name|COSNumber
name|x
init|=
operator|(
name|COSNumber
operator|)
name|arguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|COSNumber
name|y
init|=
operator|(
name|COSNumber
operator|)
name|arguments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|COSNumber
name|w
init|=
operator|(
name|COSNumber
operator|)
name|arguments
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|COSNumber
name|h
init|=
operator|(
name|COSNumber
operator|)
name|arguments
operator|.
name|get
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|double
name|x1
init|=
name|x
operator|.
name|floatValue
argument_list|()
decl_stmt|;
name|double
name|y1
init|=
name|y
operator|.
name|floatValue
argument_list|()
decl_stmt|;
comment|// create a pair of coordinates for the transformation
name|double
name|x2
init|=
name|w
operator|.
name|floatValue
argument_list|()
operator|+
name|x1
decl_stmt|;
name|double
name|y2
init|=
name|h
operator|.
name|floatValue
argument_list|()
operator|+
name|y1
decl_stmt|;
name|Point2D
name|startCoords
init|=
name|drawer
operator|.
name|transformedPoint
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|)
decl_stmt|;
name|Point2D
name|endCoords
init|=
name|drawer
operator|.
name|transformedPoint
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|)
decl_stmt|;
name|double
name|width
init|=
name|endCoords
operator|.
name|getX
argument_list|()
operator|-
name|startCoords
operator|.
name|getX
argument_list|()
decl_stmt|;
name|double
name|height
init|=
name|endCoords
operator|.
name|getY
argument_list|()
operator|-
name|startCoords
operator|.
name|getY
argument_list|()
decl_stmt|;
name|double
name|xStart
init|=
name|startCoords
operator|.
name|getX
argument_list|()
decl_stmt|;
name|double
name|yStart
init|=
name|startCoords
operator|.
name|getY
argument_list|()
decl_stmt|;
comment|// we have to calculate the width and height from the two pairs of coordinates
comment|// if the endCoords are above the startCoords we have to switch them
if|if
condition|(
name|width
operator|<
literal|0
condition|)
block|{
name|xStart
operator|+=
name|width
expr_stmt|;
name|width
operator|=
operator|-
name|width
expr_stmt|;
block|}
if|if
condition|(
name|height
operator|<
literal|0
condition|)
block|{
name|yStart
operator|+=
name|height
expr_stmt|;
name|height
operator|=
operator|-
name|height
expr_stmt|;
block|}
name|Rectangle2D
name|rect
init|=
operator|new
name|Rectangle2D
operator|.
name|Double
argument_list|(
name|xStart
argument_list|,
name|yStart
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
decl_stmt|;
name|drawer
operator|.
name|getLinePath
argument_list|()
operator|.
name|append
argument_list|(
name|rect
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

