begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdfparser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSStream
import|;
end_import

begin_comment
comment|/**  * This will parse a PDF 1.5 object stream and extract all of the objects from the stream.  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.6 $  */
end_comment

begin_class
specifier|public
class|class
name|PDFObjectStreamParser
extends|extends
name|BaseParser
block|{
specifier|private
name|List
name|streamObjects
init|=
literal|null
decl_stmt|;
specifier|private
name|List
name|objectNumbers
init|=
literal|null
decl_stmt|;
specifier|private
name|COSStream
name|stream
decl_stmt|;
comment|/**      * Constructor.      *      * @param strm The stream to parse.      * @param doc The document for the current parsing.      *      * @throws IOException If there is an error initializing the stream.      */
specifier|public
name|PDFObjectStreamParser
parameter_list|(
name|COSStream
name|strm
parameter_list|,
name|COSDocument
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|strm
operator|.
name|getUnfilteredStream
argument_list|()
argument_list|)
expr_stmt|;
name|setDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|stream
operator|=
name|strm
expr_stmt|;
block|}
comment|/**      * This will parse the tokens in the stream.  This will close the      * stream when it is finished parsing.      *      * @throws IOException If there is an error while parsing the stream.      */
specifier|public
name|void
name|parse
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
comment|//need to first parse the header.
name|int
name|numberOfObjects
init|=
name|stream
operator|.
name|getInt
argument_list|(
literal|"N"
argument_list|)
decl_stmt|;
name|objectNumbers
operator|=
operator|new
name|ArrayList
argument_list|(
name|numberOfObjects
argument_list|)
expr_stmt|;
name|streamObjects
operator|=
operator|new
name|ArrayList
argument_list|(
name|numberOfObjects
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfObjects
condition|;
name|i
operator|++
control|)
block|{
name|int
name|objectNumber
init|=
name|readInt
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
name|readInt
argument_list|()
decl_stmt|;
name|objectNumbers
operator|.
name|add
argument_list|(
operator|new
name|Integer
argument_list|(
name|objectNumber
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|COSObject
name|object
init|=
literal|null
decl_stmt|;
name|COSBase
name|cosObject
init|=
literal|null
decl_stmt|;
name|int
name|objectCounter
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|cosObject
operator|=
name|parseDirObject
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|object
operator|=
operator|new
name|COSObject
argument_list|(
name|cosObject
argument_list|)
expr_stmt|;
name|object
operator|.
name|setGenerationNumber
argument_list|(
name|COSInteger
operator|.
name|ZERO
argument_list|)
expr_stmt|;
name|COSInteger
name|objNum
init|=
operator|new
name|COSInteger
argument_list|(
operator|(
operator|(
name|Integer
operator|)
name|objectNumbers
operator|.
name|get
argument_list|(
name|objectCounter
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
decl_stmt|;
name|object
operator|.
name|setObjectNumber
argument_list|(
name|objNum
argument_list|)
expr_stmt|;
name|streamObjects
operator|.
name|add
argument_list|(
name|object
argument_list|)
expr_stmt|;
if|if
condition|(
name|logger
argument_list|()
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
argument_list|()
operator|.
name|debug
argument_list|(
literal|"parsed="
operator|+
name|object
argument_list|)
expr_stmt|;
block|}
name|objectCounter
operator|++
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|pdfSource
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * This will get the objects that were parsed from the stream.      *      * @return All of the objects in the stream.      */
specifier|public
name|List
name|getObjects
parameter_list|()
block|{
return|return
name|streamObjects
return|;
block|}
block|}
end_class

end_unit

