begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|encoding
operator|.
name|conversion
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fontbox
operator|.
name|cmap
operator|.
name|CMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_comment
comment|/**  *  CJKConverter converts encodings defined in CJKEncodings.  *  *  @author  Pin Xue (http://www.pinxue.net), Holly Lee (holly.lee (at) gmail.com)  *  @version $Revision: 1.0 $  */
end_comment

begin_class
specifier|public
class|class
name|CJKConverter
implements|implements
name|EncodingConverter
block|{
comment|// The encoding
specifier|private
name|String
name|encodingName
init|=
literal|null
decl_stmt|;
comment|// The java charset name
specifier|private
name|String
name|charsetName
init|=
literal|null
decl_stmt|;
comment|/**      *  Constructs a CJKConverter from a PDF encoding name.      *        *  @param encoding the encoding to be used      */
specifier|public
name|CJKConverter
parameter_list|(
name|String
name|encoding
parameter_list|)
block|{
name|encodingName
operator|=
name|encoding
expr_stmt|;
name|charsetName
operator|=
name|CJKEncodings
operator|.
name|getCharset
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
block|}
comment|/**     *  Convert a string. It occurs when a cmap lookup returned     *  converted bytes successfully, but we still need to convert its     *  encoding. The parameter s is constructs as one byte or a UTF-16BE     *  encoded string.     *     *  Note: pdfbox set string to UTF-16BE charset before calling into     *  this.     *       *  {@inheritDoc}     */
specifier|public
name|String
name|convertString
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|s
return|;
block|}
if|if
condition|(
name|charsetName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"UTF-16BE"
argument_list|)
condition|)
block|{
return|return
name|s
return|;
block|}
try|try
block|{
return|return
operator|new
name|String
argument_list|(
name|s
operator|.
name|getBytes
argument_list|(
literal|"UTF-16BE"
argument_list|)
argument_list|,
name|charsetName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|uee
parameter_list|)
block|{
return|return
name|s
return|;
block|}
block|}
comment|/**     *  Convert bytes to a string. We just convert bytes within     *  coderange defined in CMap.     *     *  {@inheritDoc}     */
specifier|public
name|String
name|convertBytes
parameter_list|(
name|byte
index|[]
name|c
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|,
name|CMap
name|cmap
parameter_list|)
block|{
if|if
condition|(
name|cmap
operator|!=
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
name|cmap
operator|.
name|isInCodeSpaceRanges
argument_list|(
name|c
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
condition|)
block|{
return|return
operator|new
name|String
argument_list|(
name|c
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|charsetName
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|uee
parameter_list|)
block|{
return|return
operator|new
name|String
argument_list|(
name|c
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
return|;
block|}
block|}
comment|// No cmap?
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

