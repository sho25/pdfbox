begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *   *      http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|pdfbox
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  * An interface to allow PDF files to be stored completely in memory.  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.2 $  */
end_comment

begin_class
specifier|public
class|class
name|RandomAccessBuffer
implements|implements
name|RandomAccess
block|{
specifier|private
specifier|static
specifier|final
name|int
name|EXTRA_SPACE
init|=
literal|16384
decl_stmt|;
comment|// 16kb
specifier|private
name|byte
index|[]
name|buffer
decl_stmt|;
specifier|private
name|long
name|pointer
decl_stmt|;
specifier|private
name|long
name|size
decl_stmt|;
comment|/**      * Default constructor.      */
specifier|public
name|RandomAccessBuffer
parameter_list|()
block|{
name|buffer
operator|=
operator|new
name|byte
index|[
name|EXTRA_SPACE
index|]
expr_stmt|;
name|pointer
operator|=
literal|0
expr_stmt|;
name|size
operator|=
name|EXTRA_SPACE
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|buffer
operator|=
literal|null
expr_stmt|;
name|pointer
operator|=
literal|0
expr_stmt|;
name|size
operator|=
literal|0
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|void
name|seek
parameter_list|(
name|long
name|position
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|pointer
operator|=
name|position
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|pointer
operator|>=
name|this
operator|.
name|size
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|int
name|result
init|=
name|buffer
index|[
operator|(
name|int
operator|)
name|pointer
index|]
decl_stmt|;
name|pointer
operator|++
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|pointer
operator|>=
name|this
operator|.
name|size
condition|)
block|{
return|return
literal|0
return|;
block|}
name|int
name|maxLength
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|length
argument_list|,
name|this
operator|.
name|size
operator|-
name|pointer
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buffer
argument_list|,
operator|(
name|int
operator|)
name|pointer
argument_list|,
name|b
argument_list|,
name|offset
argument_list|,
name|maxLength
argument_list|)
expr_stmt|;
name|pointer
operator|+=
name|maxLength
expr_stmt|;
return|return
name|maxLength
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|long
name|length
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|size
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|write
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
name|b
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|pointer
operator|+
name|length
operator|>=
name|buffer
operator|.
name|length
condition|)
block|{
comment|// expand buffer
name|byte
index|[]
name|temp
init|=
operator|new
name|byte
index|[
name|buffer
operator|.
name|length
operator|+
name|length
operator|+
name|EXTRA_SPACE
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|temp
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|temp
argument_list|,
literal|0
argument_list|,
operator|(
name|int
operator|)
name|this
operator|.
name|size
argument_list|)
expr_stmt|;
name|buffer
operator|=
name|temp
expr_stmt|;
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|b
argument_list|,
name|offset
argument_list|,
name|buffer
argument_list|,
operator|(
name|int
operator|)
name|pointer
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|pointer
operator|+=
name|length
expr_stmt|;
if|if
condition|(
name|pointer
operator|>
name|this
operator|.
name|size
condition|)
block|{
name|this
operator|.
name|size
operator|=
name|pointer
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

