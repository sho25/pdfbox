begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *   *      http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|pdfbox
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilterInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * This class represents an ASCII85 stream.  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.6 $  */
end_comment

begin_class
specifier|public
class|class
name|ASCII85InputStream
extends|extends
name|FilterInputStream
block|{
specifier|private
name|int
name|index
decl_stmt|;
specifier|private
name|int
name|n
decl_stmt|;
specifier|private
name|boolean
name|eof
decl_stmt|;
specifier|private
name|byte
index|[]
name|ascii
decl_stmt|;
specifier|private
name|byte
index|[]
name|b
decl_stmt|;
comment|/**      * Constructor.      *      * @param is The input stream to actually read from.      */
specifier|public
name|ASCII85InputStream
parameter_list|(
name|InputStream
name|is
parameter_list|)
block|{
name|super
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|index
operator|=
literal|0
expr_stmt|;
name|n
operator|=
literal|0
expr_stmt|;
name|eof
operator|=
literal|false
expr_stmt|;
name|ascii
operator|=
operator|new
name|byte
index|[
literal|5
index|]
expr_stmt|;
name|b
operator|=
operator|new
name|byte
index|[
literal|4
index|]
expr_stmt|;
block|}
comment|/**      * This will read the next byte from the stream.      *      * @return The next byte read from the stream.      *      * @throws IOException If there is an error reading from the wrapped stream.      */
specifier|public
specifier|final
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|index
operator|>=
name|n
condition|)
block|{
if|if
condition|(
name|eof
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|index
operator|=
literal|0
expr_stmt|;
name|int
name|k
decl_stmt|;
name|byte
name|z
decl_stmt|;
do|do
block|{
name|int
name|zz
init|=
operator|(
name|byte
operator|)
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|zz
operator|==
operator|-
literal|1
condition|)
block|{
name|eof
operator|=
literal|true
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|z
operator|=
operator|(
name|byte
operator|)
name|zz
expr_stmt|;
block|}
do|while
condition|(
name|z
operator|==
literal|'\n'
operator|||
name|z
operator|==
literal|'\r'
operator|||
name|z
operator|==
literal|' '
condition|)
do|;
if|if
condition|(
name|z
operator|==
literal|'~'
operator|||
name|z
operator|==
literal|'x'
condition|)
block|{
name|eof
operator|=
literal|true
expr_stmt|;
name|ascii
operator|=
name|b
operator|=
literal|null
expr_stmt|;
name|n
operator|=
literal|0
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|z
operator|==
literal|'z'
condition|)
block|{
name|b
index|[
literal|0
index|]
operator|=
name|b
index|[
literal|1
index|]
operator|=
name|b
index|[
literal|2
index|]
operator|=
name|b
index|[
literal|3
index|]
operator|=
literal|0
expr_stmt|;
name|n
operator|=
literal|4
expr_stmt|;
block|}
else|else
block|{
name|ascii
index|[
literal|0
index|]
operator|=
name|z
expr_stmt|;
comment|// may be EOF here....
for|for
control|(
name|k
operator|=
literal|1
init|;
name|k
operator|<
literal|5
condition|;
operator|++
name|k
control|)
block|{
do|do
block|{
name|int
name|zz
init|=
operator|(
name|byte
operator|)
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|zz
operator|==
operator|-
literal|1
condition|)
block|{
name|eof
operator|=
literal|true
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|z
operator|=
operator|(
name|byte
operator|)
name|zz
expr_stmt|;
block|}
do|while
condition|(
name|z
operator|==
literal|'\n'
operator|||
name|z
operator|==
literal|'\r'
operator|||
name|z
operator|==
literal|' '
condition|)
do|;
name|ascii
index|[
name|k
index|]
operator|=
name|z
expr_stmt|;
if|if
condition|(
name|z
operator|==
literal|'~'
operator|||
name|z
operator|==
literal|'x'
condition|)
block|{
break|break;
block|}
block|}
name|n
operator|=
name|k
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|n
operator|==
literal|0
condition|)
block|{
name|eof
operator|=
literal|true
expr_stmt|;
name|ascii
operator|=
literal|null
expr_stmt|;
name|b
operator|=
literal|null
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|k
operator|<
literal|5
condition|)
block|{
for|for
control|(
operator|++
name|k
init|;
name|k
operator|<
literal|5
condition|;
operator|++
name|k
control|)
block|{
name|ascii
index|[
name|k
index|]
operator|=
literal|0x21
expr_stmt|;
block|}
name|eof
operator|=
literal|true
expr_stmt|;
block|}
comment|// decode stream
name|long
name|t
init|=
literal|0
decl_stmt|;
for|for
control|(
name|k
operator|=
literal|0
init|;
name|k
operator|<
literal|5
condition|;
operator|++
name|k
control|)
block|{
name|z
operator|=
call|(
name|byte
call|)
argument_list|(
name|ascii
index|[
name|k
index|]
operator|-
literal|0x21
argument_list|)
expr_stmt|;
if|if
condition|(
name|z
argument_list|<
literal|0
operator|||
name|z
argument_list|>
literal|93
condition|)
block|{
name|n
operator|=
literal|0
expr_stmt|;
name|eof
operator|=
literal|true
expr_stmt|;
name|ascii
operator|=
literal|null
expr_stmt|;
name|b
operator|=
literal|null
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid data in Ascii85 stream"
argument_list|)
throw|;
block|}
name|t
operator|=
operator|(
name|t
operator|*
literal|85L
operator|)
operator|+
name|z
expr_stmt|;
block|}
for|for
control|(
name|k
operator|=
literal|3
init|;
name|k
operator|>=
literal|0
condition|;
operator|--
name|k
control|)
block|{
name|b
index|[
name|k
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|t
operator|&
literal|0xFFL
argument_list|)
expr_stmt|;
name|t
operator|>>>=
literal|8
expr_stmt|;
block|}
block|}
block|}
return|return
name|b
index|[
name|index
operator|++
index|]
operator|&
literal|0xFF
return|;
block|}
comment|/**      * This will read a chunk of data.      *      * @param data The buffer to write data to.      * @param offset The offset into the data stream.      * @param len The number of byte to attempt to read.      *      * @return The number of bytes actually read.      *      * @throws IOException If there is an error reading data from the underlying stream.      */
specifier|public
specifier|final
name|int
name|read
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|eof
operator|&&
name|index
operator|>=
name|n
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|index
operator|<
name|n
condition|)
block|{
name|data
index|[
name|i
operator|+
name|offset
index|]
operator|=
name|b
index|[
name|index
operator|++
index|]
expr_stmt|;
block|}
else|else
block|{
name|int
name|t
init|=
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|==
operator|-
literal|1
condition|)
block|{
return|return
name|i
return|;
block|}
name|data
index|[
name|i
operator|+
name|offset
index|]
operator|=
operator|(
name|byte
operator|)
name|t
expr_stmt|;
block|}
block|}
return|return
name|len
return|;
block|}
comment|/**      * This will close the underlying stream and release any resources.      *      * @throws IOException If there is an error closing the underlying stream.      */
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|ascii
operator|=
literal|null
expr_stmt|;
name|eof
operator|=
literal|true
expr_stmt|;
name|b
operator|=
literal|null
expr_stmt|;
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * non supported interface methods.      *      * @return False always.      */
specifier|public
name|boolean
name|markSupported
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * Unsupported.      *      * @param nValue ignored.      *      * @return Always zero.      */
specifier|public
name|long
name|skip
parameter_list|(
name|long
name|nValue
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
comment|/**      * Unsupported.      *      * @return Always zero.      */
specifier|public
name|int
name|available
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
comment|/**      * Unsupported.      *      * @param readlimit ignored.      */
specifier|public
name|void
name|mark
parameter_list|(
name|int
name|readlimit
parameter_list|)
block|{     }
comment|/**      * Unsupported.      *      * @throws IOException telling that this is an unsupported action.      */
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Reset is not supported"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

