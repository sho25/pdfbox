begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *   *      http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|pdfbox
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * This is an n-bit output stream.  This means that you write data in n-bit chunks.  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.4 $  */
end_comment

begin_class
specifier|public
class|class
name|NBitOutputStream
block|{
specifier|private
name|int
name|bitsInChunk
decl_stmt|;
specifier|private
name|OutputStream
name|out
decl_stmt|;
specifier|private
name|int
name|currentByte
decl_stmt|;
specifier|private
name|int
name|positionInCurrentByte
decl_stmt|;
comment|/**      * Constructor.      *      * @param os The output stream to write to.      */
specifier|public
name|NBitOutputStream
parameter_list|(
name|OutputStream
name|os
parameter_list|)
block|{
name|out
operator|=
name|os
expr_stmt|;
name|currentByte
operator|=
literal|0
expr_stmt|;
name|positionInCurrentByte
operator|=
literal|7
expr_stmt|;
block|}
comment|/**      * This will write the next n-bits to the stream.      *      * @param chunk The next chunk of data to write.      *      * @throws IOException If there is an error writing the chunk.      */
specifier|public
name|void
name|write
parameter_list|(
name|long
name|chunk
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|bitToWrite
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
operator|(
name|bitsInChunk
operator|-
literal|1
operator|)
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|bitToWrite
operator|=
operator|(
name|chunk
operator|>>
name|i
operator|)
operator|&
literal|0x1
expr_stmt|;
name|bitToWrite
operator|<<=
name|positionInCurrentByte
expr_stmt|;
name|currentByte
operator||=
name|bitToWrite
expr_stmt|;
name|positionInCurrentByte
operator|--
expr_stmt|;
if|if
condition|(
name|positionInCurrentByte
operator|<
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|currentByte
argument_list|)
expr_stmt|;
name|currentByte
operator|=
literal|0
expr_stmt|;
name|positionInCurrentByte
operator|=
literal|7
expr_stmt|;
block|}
block|}
block|}
comment|/**      * This will close the stream.      *      * @throws IOException if there is an error closing the stream.      */
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|positionInCurrentByte
operator|<
literal|7
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|currentByte
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Getter for property bitsToRead.      * @return Value of property bitsToRead.      */
specifier|public
name|int
name|getBitsInChunk
parameter_list|()
block|{
return|return
name|bitsInChunk
return|;
block|}
comment|/** Setter for property bitsToRead.      * @param bitsInChunkValue New value of property bitsToRead.      */
specifier|public
name|void
name|setBitsInChunk
parameter_list|(
name|int
name|bitsInChunkValue
parameter_list|)
block|{
name|bitsInChunk
operator|=
name|bitsInChunkValue
expr_stmt|;
block|}
block|}
end_class

end_unit

