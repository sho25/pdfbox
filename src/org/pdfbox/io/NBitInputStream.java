begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**   * Copyright (c) 2003, www.pdfbox.org  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are met:  *  * 1. Redistributions of source code must retain the above copyright notice,  *    this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright notice,  *    this list of conditions and the following disclaimer in the documentation  *    and/or other materials provided with the distribution.  * 3. Neither the name of pdfbox; nor the names of its  *    contributors may be used to endorse or promote products derived from this  *    software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * http://www.pdfbox.org  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|pdfbox
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * This is an n-bit input stream.  This means that you can read chunks of data  * as any number of bits, not just 8 bits like the regular input stream.  Just set the  * number of bits that you would like to read on each call.  The default is 8.  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.4 $  */
end_comment

begin_class
specifier|public
class|class
name|NBitInputStream
block|{
specifier|private
name|int
name|bitsInChunk
decl_stmt|;
specifier|private
name|InputStream
name|in
decl_stmt|;
specifier|private
name|int
name|currentByte
decl_stmt|;
specifier|private
name|int
name|bitsLeftInCurrentByte
decl_stmt|;
comment|/**      * Constructor.      *      * @param is The input stream to read from.      */
specifier|public
name|NBitInputStream
parameter_list|(
name|InputStream
name|is
parameter_list|)
block|{
name|in
operator|=
name|is
expr_stmt|;
name|bitsLeftInCurrentByte
operator|=
literal|0
expr_stmt|;
name|bitsInChunk
operator|=
literal|8
expr_stmt|;
block|}
comment|/**      * This will unread some data.      *      * @param data The data to put back into the stream.      */
specifier|public
name|void
name|unread
parameter_list|(
name|long
name|data
parameter_list|)
block|{
name|data
operator|<<=
name|bitsLeftInCurrentByte
expr_stmt|;
name|currentByte
operator||=
name|data
expr_stmt|;
name|bitsLeftInCurrentByte
operator|+=
name|bitsInChunk
expr_stmt|;
block|}
comment|/**      * This will read the next n bits from the stream and return the unsigned      * value of  those bits.      *      * @return The next n bits from the stream.      *      * @throws IOException If there is an error reading from the underlying stream.      */
specifier|public
name|long
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|retval
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bitsInChunk
operator|&&
name|retval
operator|!=
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|bitsLeftInCurrentByte
operator|==
literal|0
condition|)
block|{
name|currentByte
operator|=
name|in
operator|.
name|read
argument_list|()
expr_stmt|;
name|bitsLeftInCurrentByte
operator|=
literal|8
expr_stmt|;
block|}
if|if
condition|(
name|currentByte
operator|==
operator|-
literal|1
condition|)
block|{
name|retval
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|retval
operator|<<=
literal|1
expr_stmt|;
name|retval
operator||=
operator|(
operator|(
name|currentByte
operator|>>
operator|(
name|bitsLeftInCurrentByte
operator|-
literal|1
operator|)
operator|)
operator|&
literal|0x1
operator|)
expr_stmt|;
name|bitsLeftInCurrentByte
operator|--
expr_stmt|;
block|}
block|}
return|return
name|retval
return|;
block|}
comment|/** Getter for property bitsToRead.      * @return Value of property bitsToRead.      */
specifier|public
name|int
name|getBitsInChunk
parameter_list|()
block|{
return|return
name|bitsInChunk
return|;
block|}
comment|/** Setter for property bitsToRead.      * @param bitsInChunkValue New value of property bitsToRead.      */
specifier|public
name|void
name|setBitsInChunk
parameter_list|(
name|int
name|bitsInChunkValue
parameter_list|)
block|{
name|bitsInChunk
operator|=
name|bitsInChunkValue
expr_stmt|;
block|}
block|}
end_class

end_unit

