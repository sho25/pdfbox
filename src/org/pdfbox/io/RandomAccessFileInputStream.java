begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *   *      http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|pdfbox
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * This class allows a section of a RandomAccessFile to be accessed as an  * input stream.  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.5 $  */
end_comment

begin_class
specifier|public
class|class
name|RandomAccessFileInputStream
extends|extends
name|InputStream
block|{
specifier|private
name|RandomAccess
name|file
decl_stmt|;
specifier|private
name|long
name|currentPosition
decl_stmt|;
specifier|private
name|long
name|endPosition
decl_stmt|;
comment|/**      * Constructor.      *      * @param raFile The file to read the data from.      * @param startPosition The position in the file that this stream starts.      * @param length The length of the input stream.      */
specifier|public
name|RandomAccessFileInputStream
parameter_list|(
name|RandomAccess
name|raFile
parameter_list|,
name|long
name|startPosition
parameter_list|,
name|long
name|length
parameter_list|)
block|{
name|file
operator|=
name|raFile
expr_stmt|;
name|currentPosition
operator|=
name|startPosition
expr_stmt|;
name|endPosition
operator|=
name|currentPosition
operator|+
name|length
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|int
name|available
parameter_list|()
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|endPosition
operator|-
name|currentPosition
argument_list|)
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|void
name|close
parameter_list|()
block|{
comment|//do nothing because we want to leave the random access file open.
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|file
init|)
block|{
name|int
name|retval
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|currentPosition
operator|<
name|endPosition
condition|)
block|{
name|file
operator|.
name|seek
argument_list|(
name|currentPosition
argument_list|)
expr_stmt|;
name|currentPosition
operator|++
expr_stmt|;
name|retval
operator|=
name|file
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
comment|//only allow a read of the amount available.
if|if
condition|(
name|length
operator|>
name|available
argument_list|()
condition|)
block|{
name|length
operator|=
name|available
argument_list|()
expr_stmt|;
block|}
name|int
name|amountRead
init|=
operator|-
literal|1
decl_stmt|;
comment|//only read if there are bytes actually available, otherwise
comment|//return -1 if the EOF has been reached.
if|if
condition|(
name|available
argument_list|()
operator|>
literal|0
condition|)
block|{
synchronized|synchronized
init|(
name|file
init|)
block|{
name|file
operator|.
name|seek
argument_list|(
name|currentPosition
argument_list|)
expr_stmt|;
name|amountRead
operator|=
name|file
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
block|}
comment|//update the current cursor position.
if|if
condition|(
name|amountRead
operator|>
literal|0
condition|)
block|{
name|currentPosition
operator|+=
name|amountRead
expr_stmt|;
block|}
return|return
name|amountRead
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|long
name|skip
parameter_list|(
name|long
name|amountToSkip
parameter_list|)
block|{
name|long
name|amountSkipped
init|=
name|Math
operator|.
name|min
argument_list|(
name|amountToSkip
argument_list|,
name|available
argument_list|()
argument_list|)
decl_stmt|;
name|currentPosition
operator|+=
name|amountSkipped
expr_stmt|;
return|return
name|amountSkipped
return|;
block|}
block|}
end_class

end_unit

