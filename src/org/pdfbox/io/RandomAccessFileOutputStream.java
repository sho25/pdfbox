begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright (c) 2003-2006, www.pdfbox.org  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are met:  *  * 1. Redistributions of source code must retain the above copyright notice,  *    this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright notice,  *    this list of conditions and the following disclaimer in the documentation  *    and/or other materials provided with the distribution.  * 3. Neither the name of pdfbox; nor the names of its  *    contributors may be used to endorse or promote products derived from this  *    software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * http://www.pdfbox.org  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|pdfbox
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSNumber
import|;
end_import

begin_comment
comment|/**  * This will write to a RandomAccessFile in the filesystem and keep track  * of the position it is writing to and the length of the stream.  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.6 $  */
end_comment

begin_class
specifier|public
class|class
name|RandomAccessFileOutputStream
extends|extends
name|OutputStream
block|{
specifier|private
name|RandomAccess
name|file
decl_stmt|;
specifier|private
name|long
name|position
decl_stmt|;
specifier|private
name|long
name|lengthWritten
init|=
literal|0
decl_stmt|;
specifier|private
name|COSBase
name|expectedLength
init|=
literal|null
decl_stmt|;
comment|/**      * Constructor to create an output stream that will write to the end of a      * random access file.      *      * @param raf The file to write to.      *      * @throws IOException If there is a problem accessing the raf.      */
specifier|public
name|RandomAccessFileOutputStream
parameter_list|(
name|RandomAccess
name|raf
parameter_list|)
throws|throws
name|IOException
block|{
name|file
operator|=
name|raf
expr_stmt|;
comment|//first get the position that we will be writing to
name|position
operator|=
name|raf
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
comment|/**      * This will get the position in the RAF that the stream was written      * to.      *      * @return The position in the raf where the file can be obtained.      */
specifier|public
name|long
name|getPosition
parameter_list|()
block|{
return|return
name|position
return|;
block|}
comment|/**      * Get the amount of data that was actually written to the stream, in theory this      * should be the same as the length specified but in some cases it doesn't match.      *       * @return The number of bytes actually written to this stream.      */
specifier|public
name|long
name|getLengthWritten
parameter_list|()
block|{
return|return
name|lengthWritten
return|;
block|}
comment|/**      * The number of bytes written to the stream.      *      * @return The number of bytes read to the stream.      */
specifier|public
name|long
name|getLength
parameter_list|()
block|{
name|long
name|length
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|expectedLength
operator|instanceof
name|COSNumber
condition|)
block|{
name|length
operator|=
operator|(
operator|(
name|COSNumber
operator|)
name|expectedLength
operator|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|expectedLength
operator|instanceof
name|COSObject
operator|&&
operator|(
operator|(
name|COSObject
operator|)
name|expectedLength
operator|)
operator|.
name|getObject
argument_list|()
operator|instanceof
name|COSNumber
condition|)
block|{
name|length
operator|=
operator|(
call|(
name|COSNumber
call|)
argument_list|(
operator|(
name|COSObject
operator|)
name|expectedLength
argument_list|)
operator|.
name|getObject
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|length
operator|==
operator|-
literal|1
condition|)
block|{
name|length
operator|=
name|lengthWritten
expr_stmt|;
block|}
return|return
name|length
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|file
operator|.
name|seek
argument_list|(
name|position
operator|+
name|lengthWritten
argument_list|)
expr_stmt|;
name|lengthWritten
operator|+=
name|length
expr_stmt|;
name|file
operator|.
name|write
argument_list|(
name|b
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|file
operator|.
name|seek
argument_list|(
name|position
operator|+
name|lengthWritten
argument_list|)
expr_stmt|;
name|lengthWritten
operator|++
expr_stmt|;
name|file
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the length that the PDF document specified this stream      * should be.  This may not match the number of bytes read.      *      * @return The expected length.      */
specifier|public
name|COSBase
name|getExpectedLength
parameter_list|()
block|{
return|return
name|expectedLength
return|;
block|}
comment|/**      * This will set the expected length of this stream.      *      * @param value The expected value.      */
specifier|public
name|void
name|setExpectedLength
parameter_list|(
name|COSBase
name|value
parameter_list|)
block|{
name|expectedLength
operator|=
name|value
expr_stmt|;
block|}
block|}
end_class

end_unit

