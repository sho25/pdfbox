begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright (c) 2003-2006, www.pdfbox.org  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are met:  *  * 1. Redistributions of source code must retain the above copyright notice,  *    this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright notice,  *    this list of conditions and the following disclaimer in the documentation  *    and/or other materials provided with the distribution.  * 3. Neither the name of pdfbox; nor the names of its  *    contributors may be used to endorse or promote products derived from this  *    software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * http://www.pdfbox.org  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|pdfbox
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSNumber
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|exceptions
operator|.
name|COSVisitorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocumentCatalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocumentInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocumentNameDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|COSArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|COSObjectable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|documentnavigation
operator|.
name|outline
operator|.
name|PDDocumentOutline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|documentnavigation
operator|.
name|outline
operator|.
name|PDOutlineItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|form
operator|.
name|PDAcroForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|form
operator|.
name|PDField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|form
operator|.
name|PDFieldFactory
import|;
end_import

begin_comment
comment|/**  * This class will take a list of pdf documents and merge them, saving the result   * in a new document.   *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.3 $  */
end_comment

begin_class
specifier|public
class|class
name|PDFMergerUtility
block|{
specifier|private
name|List
name|sources
decl_stmt|;
specifier|private
name|String
name|destinationFileName
decl_stmt|;
comment|/**      * Instantiate a new PDFMergerUtility.      */
specifier|public
name|PDFMergerUtility
parameter_list|()
block|{
name|sources
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
block|}
comment|/**      * Get the name of the destination file.      * @return Returns the destination.      */
specifier|public
name|String
name|getDestinationFileName
parameter_list|()
block|{
return|return
name|destinationFileName
return|;
block|}
comment|/**      * Set the name of the destination file.      * @param destination      *            The destination to set.      */
specifier|public
name|void
name|setDestinationFileName
parameter_list|(
name|String
name|destination
parameter_list|)
block|{
name|this
operator|.
name|destinationFileName
operator|=
name|destination
expr_stmt|;
block|}
comment|/**      * Add a source file to the list of files to merge.      *       * @param source Full path and file name of source document.      */
specifier|public
name|void
name|addSource
parameter_list|(
name|String
name|source
parameter_list|)
block|{
name|sources
operator|.
name|add
argument_list|(
operator|new
name|File
argument_list|(
name|source
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add a source file to the list of files to mere.      *       * @param source File representing source document      */
specifier|public
name|void
name|addSource
parameter_list|(
name|File
name|source
parameter_list|)
block|{
name|sources
operator|.
name|add
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
comment|/**      * Merge the list of source documents, saving the result in the destination file.      *      * @throws IOException If there is an error saving the document.      * @throws COSVisitorException If an error occurs while saving the destination file.      */
specifier|public
name|void
name|mergeDocuments
parameter_list|()
throws|throws
name|IOException
throws|,
name|COSVisitorException
block|{
name|PDDocument
name|destination
init|=
literal|null
decl_stmt|;
name|File
name|sourceFile
decl_stmt|;
name|PDDocument
name|source
decl_stmt|;
if|if
condition|(
name|sources
operator|!=
literal|null
operator|&&
name|sources
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|Iterator
name|sit
init|=
name|sources
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|sourceFile
operator|=
operator|(
name|File
operator|)
name|sit
operator|.
name|next
argument_list|()
expr_stmt|;
name|destination
operator|=
name|PDDocument
operator|.
name|load
argument_list|(
name|sourceFile
argument_list|)
expr_stmt|;
while|while
condition|(
name|sit
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|sourceFile
operator|=
operator|(
name|File
operator|)
name|sit
operator|.
name|next
argument_list|()
expr_stmt|;
name|source
operator|=
name|PDDocument
operator|.
name|load
argument_list|(
name|sourceFile
argument_list|)
expr_stmt|;
try|try
block|{
name|appendDocument
argument_list|(
name|destination
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|source
operator|!=
literal|null
condition|)
block|{
name|source
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|destination
operator|.
name|save
argument_list|(
name|destinationFileName
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|destination
operator|!=
literal|null
condition|)
block|{
name|destination
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * append all pages from source to destination.      *      * @param destination the document to receive the pages      * @param source the document originating the new pages      *      * @throws IOException If there is an error accessing data from either document.      */
specifier|public
name|void
name|appendDocument
parameter_list|(
name|PDDocument
name|destination
parameter_list|,
name|PDDocument
name|source
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|destination
operator|.
name|isEncrypted
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error: destination PDF is encrypted, can't append encrypted PDF documents."
argument_list|)
throw|;
block|}
if|if
condition|(
name|source
operator|.
name|isEncrypted
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error: source PDF is encrypted, can't append encrypted PDF documents."
argument_list|)
throw|;
block|}
name|PDDocumentInformation
name|destInfo
init|=
name|destination
operator|.
name|getDocumentInformation
argument_list|()
decl_stmt|;
name|PDDocumentInformation
name|srcInfo
init|=
name|source
operator|.
name|getDocumentInformation
argument_list|()
decl_stmt|;
name|destInfo
operator|.
name|getDictionary
argument_list|()
operator|.
name|mergeInto
argument_list|(
name|srcInfo
operator|.
name|getDictionary
argument_list|()
argument_list|)
expr_stmt|;
name|PDDocumentCatalog
name|destCatalog
init|=
name|destination
operator|.
name|getDocumentCatalog
argument_list|()
decl_stmt|;
name|PDDocumentCatalog
name|srcCatalog
init|=
name|source
operator|.
name|getDocumentCatalog
argument_list|()
decl_stmt|;
if|if
condition|(
name|destCatalog
operator|.
name|getOpenAction
argument_list|()
operator|==
literal|null
condition|)
block|{
name|destCatalog
operator|.
name|setOpenAction
argument_list|(
name|srcCatalog
operator|.
name|getOpenAction
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|PDAcroForm
name|destAcroForm
init|=
name|destCatalog
operator|.
name|getAcroForm
argument_list|()
decl_stmt|;
name|PDAcroForm
name|srcAcroForm
init|=
name|srcCatalog
operator|.
name|getAcroForm
argument_list|()
decl_stmt|;
if|if
condition|(
name|destAcroForm
operator|==
literal|null
condition|)
block|{
name|cloneForNewDocument
argument_list|(
name|destination
argument_list|,
name|srcAcroForm
argument_list|)
expr_stmt|;
name|destCatalog
operator|.
name|setAcroForm
argument_list|(
name|srcAcroForm
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|srcAcroForm
operator|!=
literal|null
condition|)
block|{
name|mergeAcroForm
argument_list|(
name|destination
argument_list|,
name|destAcroForm
argument_list|,
name|srcAcroForm
argument_list|)
expr_stmt|;
block|}
block|}
name|COSArray
name|destThreads
init|=
operator|(
name|COSArray
operator|)
name|destCatalog
operator|.
name|getCOSDictionary
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"Threads"
argument_list|)
argument_list|)
decl_stmt|;
name|COSArray
name|srcThreads
init|=
operator|(
name|COSArray
operator|)
name|cloneForNewDocument
argument_list|(
name|destination
argument_list|,
name|destCatalog
operator|.
name|getCOSDictionary
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"Threads"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|destThreads
operator|==
literal|null
condition|)
block|{
name|destCatalog
operator|.
name|getCOSDictionary
argument_list|()
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"Threads"
argument_list|)
argument_list|,
name|srcThreads
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|destThreads
operator|.
name|addAll
argument_list|(
name|srcThreads
argument_list|)
expr_stmt|;
block|}
name|COSName
name|names
init|=
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"Names"
argument_list|)
decl_stmt|;
name|PDDocumentNameDictionary
name|destNames
init|=
name|destCatalog
operator|.
name|getNames
argument_list|()
decl_stmt|;
name|PDDocumentNameDictionary
name|srcNames
init|=
name|srcCatalog
operator|.
name|getNames
argument_list|()
decl_stmt|;
if|if
condition|(
name|srcNames
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|destNames
operator|==
literal|null
condition|)
block|{
name|destCatalog
operator|.
name|getCOSDictionary
argument_list|()
operator|.
name|setItem
argument_list|(
name|names
argument_list|,
name|cloneForNewDocument
argument_list|(
name|destination
argument_list|,
name|srcNames
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//warning, potential for collision here!!
name|destNames
operator|.
name|getCOSDictionary
argument_list|()
operator|.
name|mergeInto
argument_list|(
operator|(
name|COSDictionary
operator|)
name|cloneForNewDocument
argument_list|(
name|destination
argument_list|,
name|srcNames
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|PDDocumentOutline
name|destOutline
init|=
name|destCatalog
operator|.
name|getDocumentOutline
argument_list|()
decl_stmt|;
name|PDDocumentOutline
name|srcOutline
init|=
name|srcCatalog
operator|.
name|getDocumentOutline
argument_list|()
decl_stmt|;
if|if
condition|(
name|srcOutline
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|destOutline
operator|==
literal|null
condition|)
block|{
name|PDDocumentOutline
name|cloned
init|=
operator|new
name|PDDocumentOutline
argument_list|(
operator|(
name|COSDictionary
operator|)
name|cloneForNewDocument
argument_list|(
name|destination
argument_list|,
name|srcOutline
argument_list|)
argument_list|)
decl_stmt|;
name|destCatalog
operator|.
name|setDocumentOutline
argument_list|(
name|cloned
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PDOutlineItem
name|first
init|=
name|srcOutline
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
name|PDOutlineItem
name|clonedFirst
init|=
operator|new
name|PDOutlineItem
argument_list|(
operator|(
name|COSDictionary
operator|)
name|cloneForNewDocument
argument_list|(
name|destination
argument_list|,
name|first
argument_list|)
argument_list|)
decl_stmt|;
name|destOutline
operator|.
name|appendChild
argument_list|(
name|clonedFirst
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|destPageMode
init|=
name|destCatalog
operator|.
name|getPageMode
argument_list|()
decl_stmt|;
name|String
name|srcPageMode
init|=
name|srcCatalog
operator|.
name|getPageMode
argument_list|()
decl_stmt|;
if|if
condition|(
name|destPageMode
operator|==
literal|null
condition|)
block|{
name|destCatalog
operator|.
name|setPageMode
argument_list|(
name|srcPageMode
argument_list|)
expr_stmt|;
block|}
name|COSName
name|pageLabels
init|=
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"PageLabels"
argument_list|)
decl_stmt|;
name|COSDictionary
name|destLabels
init|=
operator|(
name|COSDictionary
operator|)
name|destCatalog
operator|.
name|getCOSDictionary
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|pageLabels
argument_list|)
decl_stmt|;
name|COSDictionary
name|srcLabels
init|=
operator|(
name|COSDictionary
operator|)
name|srcCatalog
operator|.
name|getCOSDictionary
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|pageLabels
argument_list|)
decl_stmt|;
if|if
condition|(
name|srcLabels
operator|!=
literal|null
condition|)
block|{
name|int
name|destPageCount
init|=
name|destination
operator|.
name|getNumberOfPages
argument_list|()
decl_stmt|;
name|COSArray
name|destNums
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|destLabels
operator|==
literal|null
condition|)
block|{
name|destLabels
operator|=
operator|new
name|COSDictionary
argument_list|()
expr_stmt|;
name|destNums
operator|=
operator|new
name|COSArray
argument_list|()
expr_stmt|;
name|destLabels
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"Nums"
argument_list|)
argument_list|,
name|destNums
argument_list|)
expr_stmt|;
name|destCatalog
operator|.
name|getCOSDictionary
argument_list|()
operator|.
name|setItem
argument_list|(
name|pageLabels
argument_list|,
name|destLabels
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|destNums
operator|=
operator|(
name|COSArray
operator|)
name|destLabels
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"Nums"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|COSArray
name|srcNums
init|=
operator|(
name|COSArray
operator|)
name|srcLabels
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"Nums"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|srcNums
operator|.
name|size
argument_list|()
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|COSNumber
name|labelIndex
init|=
operator|(
name|COSNumber
operator|)
name|srcNums
operator|.
name|getObject
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|long
name|labelIndexValue
init|=
name|labelIndex
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|destNums
operator|.
name|add
argument_list|(
operator|new
name|COSInteger
argument_list|(
name|labelIndexValue
operator|+
name|destPageCount
argument_list|)
argument_list|)
expr_stmt|;
name|destNums
operator|.
name|add
argument_list|(
name|cloneForNewDocument
argument_list|(
name|destination
argument_list|,
name|srcNums
operator|.
name|getObject
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|COSName
name|metadata
init|=
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"Metadata"
argument_list|)
decl_stmt|;
name|COSStream
name|destMetadata
init|=
operator|(
name|COSStream
operator|)
name|destCatalog
operator|.
name|getCOSDictionary
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|metadata
argument_list|)
decl_stmt|;
name|COSStream
name|srcMetadata
init|=
operator|(
name|COSStream
operator|)
name|srcCatalog
operator|.
name|getCOSDictionary
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|metadata
argument_list|)
decl_stmt|;
if|if
condition|(
name|destMetadata
operator|==
literal|null
operator|&&
name|srcMetadata
operator|!=
literal|null
condition|)
block|{
name|PDStream
name|newStream
init|=
operator|new
name|PDStream
argument_list|(
name|destination
argument_list|,
name|srcMetadata
operator|.
name|getUnfilteredStream
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|newStream
operator|.
name|getStream
argument_list|()
operator|.
name|mergeInto
argument_list|(
name|srcMetadata
argument_list|)
expr_stmt|;
name|newStream
operator|.
name|addCompression
argument_list|()
expr_stmt|;
name|destCatalog
operator|.
name|getCOSDictionary
argument_list|()
operator|.
name|setItem
argument_list|(
name|metadata
argument_list|,
name|newStream
argument_list|)
expr_stmt|;
block|}
comment|//finally append the pages
name|List
name|pages
init|=
name|source
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|getAllPages
argument_list|()
decl_stmt|;
name|Iterator
name|pageIter
init|=
name|pages
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|pageIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|PDPage
name|page
init|=
operator|(
name|PDPage
operator|)
name|pageIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|PDPage
name|newPage
init|=
operator|new
name|PDPage
argument_list|(
operator|(
name|COSDictionary
operator|)
name|cloneForNewDocument
argument_list|(
name|destination
argument_list|,
name|page
operator|.
name|getCOSDictionary
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|destination
operator|.
name|addPage
argument_list|(
name|newPage
argument_list|)
expr_stmt|;
block|}
block|}
name|Map
name|clonedVersion
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|private
name|COSBase
name|cloneForNewDocument
parameter_list|(
name|PDDocument
name|destination
parameter_list|,
name|Object
name|base
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|base
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|COSBase
name|retval
init|=
operator|(
name|COSBase
operator|)
name|clonedVersion
operator|.
name|get
argument_list|(
name|base
argument_list|)
decl_stmt|;
if|if
condition|(
name|retval
operator|!=
literal|null
condition|)
block|{
comment|//we are done, it has already been converted.
block|}
elseif|else
if|if
condition|(
name|base
operator|instanceof
name|List
condition|)
block|{
name|COSArray
name|array
init|=
operator|new
name|COSArray
argument_list|()
decl_stmt|;
name|List
name|list
init|=
operator|(
name|List
operator|)
name|base
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|array
operator|.
name|add
argument_list|(
name|cloneForNewDocument
argument_list|(
name|destination
argument_list|,
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|retval
operator|=
name|array
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|base
operator|instanceof
name|COSObjectable
operator|&&
operator|!
operator|(
name|base
operator|instanceof
name|COSBase
operator|)
condition|)
block|{
name|retval
operator|=
name|cloneForNewDocument
argument_list|(
name|destination
argument_list|,
operator|(
operator|(
name|COSObjectable
operator|)
name|base
operator|)
operator|.
name|getCOSObject
argument_list|()
argument_list|)
expr_stmt|;
name|clonedVersion
operator|.
name|put
argument_list|(
name|base
argument_list|,
name|retval
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|base
operator|instanceof
name|COSObject
condition|)
block|{
name|COSObject
name|object
init|=
operator|(
name|COSObject
operator|)
name|base
decl_stmt|;
name|retval
operator|=
name|cloneForNewDocument
argument_list|(
name|destination
argument_list|,
name|object
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
name|clonedVersion
operator|.
name|put
argument_list|(
name|base
argument_list|,
name|retval
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|base
operator|instanceof
name|COSArray
condition|)
block|{
name|COSArray
name|newArray
init|=
operator|new
name|COSArray
argument_list|()
decl_stmt|;
name|COSArray
name|array
init|=
operator|(
name|COSArray
operator|)
name|base
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|newArray
operator|.
name|add
argument_list|(
name|cloneForNewDocument
argument_list|(
name|destination
argument_list|,
name|array
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|retval
operator|=
name|newArray
expr_stmt|;
name|clonedVersion
operator|.
name|put
argument_list|(
name|base
argument_list|,
name|retval
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|base
operator|instanceof
name|COSStream
condition|)
block|{
name|COSStream
name|originalStream
init|=
operator|(
name|COSStream
operator|)
name|base
decl_stmt|;
name|List
name|keys
init|=
name|originalStream
operator|.
name|keyList
argument_list|()
decl_stmt|;
name|PDStream
name|stream
init|=
operator|new
name|PDStream
argument_list|(
name|destination
argument_list|,
name|originalStream
operator|.
name|getFilteredStream
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|clonedVersion
operator|.
name|put
argument_list|(
name|base
argument_list|,
name|stream
operator|.
name|getStream
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|COSName
name|key
init|=
operator|(
name|COSName
operator|)
name|keys
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|stream
operator|.
name|getStream
argument_list|()
operator|.
name|setItem
argument_list|(
name|key
argument_list|,
name|cloneForNewDocument
argument_list|(
name|destination
argument_list|,
name|originalStream
operator|.
name|getItem
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|retval
operator|=
name|stream
operator|.
name|getStream
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|base
operator|instanceof
name|COSDictionary
condition|)
block|{
name|COSDictionary
name|dic
init|=
operator|(
name|COSDictionary
operator|)
name|base
decl_stmt|;
name|List
name|keys
init|=
name|dic
operator|.
name|keyList
argument_list|()
decl_stmt|;
name|retval
operator|=
operator|new
name|COSDictionary
argument_list|()
expr_stmt|;
name|clonedVersion
operator|.
name|put
argument_list|(
name|base
argument_list|,
name|retval
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|COSName
name|key
init|=
operator|(
name|COSName
operator|)
name|keys
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
operator|(
operator|(
name|COSDictionary
operator|)
name|retval
operator|)
operator|.
name|setItem
argument_list|(
name|key
argument_list|,
name|cloneForNewDocument
argument_list|(
name|destination
argument_list|,
name|dic
operator|.
name|getItem
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|retval
operator|=
operator|(
name|COSBase
operator|)
name|base
expr_stmt|;
block|}
name|clonedVersion
operator|.
name|put
argument_list|(
name|base
argument_list|,
name|retval
argument_list|)
expr_stmt|;
return|return
name|retval
return|;
block|}
specifier|private
name|int
name|nextFieldNum
init|=
literal|1
decl_stmt|;
comment|/**      * Merge the contents of the source form into the destination form       * for the destination file.      *       * @param destination the destination document      * @param destAcroForm the destination form      * @param srcAcroForm the source form      * @throws IOException If an error occurs while adding the field.      */
specifier|private
name|void
name|mergeAcroForm
parameter_list|(
name|PDDocument
name|destination
parameter_list|,
name|PDAcroForm
name|destAcroForm
parameter_list|,
name|PDAcroForm
name|srcAcroForm
parameter_list|)
throws|throws
name|IOException
block|{
name|List
name|destFields
init|=
name|destAcroForm
operator|.
name|getFields
argument_list|()
decl_stmt|;
name|List
name|srcFields
init|=
name|srcAcroForm
operator|.
name|getFields
argument_list|()
decl_stmt|;
if|if
condition|(
name|srcFields
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|destFields
operator|==
literal|null
condition|)
block|{
name|destFields
operator|=
operator|new
name|COSArrayList
argument_list|()
expr_stmt|;
name|destAcroForm
operator|.
name|setFields
argument_list|(
name|destFields
argument_list|)
expr_stmt|;
block|}
name|Iterator
name|srcFieldsIterator
init|=
name|srcFields
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|srcFieldsIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|PDField
name|srcField
init|=
operator|(
name|PDField
operator|)
name|srcFieldsIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|PDField
name|destField
init|=
name|PDFieldFactory
operator|.
name|createField
argument_list|(
name|destAcroForm
argument_list|,
operator|(
name|COSDictionary
operator|)
name|cloneForNewDocument
argument_list|(
name|destination
argument_list|,
name|srcField
operator|.
name|getDictionary
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// if the form already has a field with this name then we need to rename this field
comment|// to prevent merge conflicts.
if|if
condition|(
name|destAcroForm
operator|.
name|getField
argument_list|(
name|destField
operator|.
name|getFullyQualifiedName
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|destField
operator|.
name|setPartialName
argument_list|(
literal|"dummyFieldName"
operator|+
operator|(
name|nextFieldNum
operator|++
operator|)
argument_list|)
expr_stmt|;
block|}
name|destFields
operator|.
name|add
argument_list|(
name|destField
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

