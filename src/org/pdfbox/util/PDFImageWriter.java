begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|pdfbox
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|BufferedImage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|IIOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|IIOImage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|ImageIO
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|ImageWriteParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|ImageWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|stream
operator|.
name|ImageOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|exceptions
operator|.
name|InvalidPasswordException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPage
import|;
end_import

begin_comment
comment|/**  * This class will take a pdf document and strip out all of the text and ignore the  * formatting and such.  Please note; it is up to clients of this class to verify that  * a specific user has the correct permissions to extract text from the  * PDF document.  *  *Patterned after PDFTextStripper  *  * @author<a href="mailto:DanielWilson@Users.SourceForge.net">Daniel Wilson</a>  * @version $Revision: 1.1 $  */
end_comment

begin_class
specifier|public
class|class
name|PDFImageWriter
extends|extends
name|PDFStreamEngine
block|{
comment|/**      * Instantiate a new PDFImageWriter object.      * @throws IOException If there is an error loading the properties.      */
specifier|public
name|PDFImageWriter
parameter_list|()
throws|throws
name|IOException
block|{
name|super
argument_list|()
expr_stmt|;
comment|// ResourceLoader.loadProperties( "Resources/PDFImageWriter.properties", true ) );
block|}
comment|/**      * Instantiate a new PDFImageWriter object.  Loading all of the operator mappings      * from the properties object that is passed in.      *      * @param props The properties containing the mapping of operators to PDFOperator      * classes.      *      * @throws IOException If there is an error reading the properties.      */
specifier|public
name|PDFImageWriter
parameter_list|(
name|Properties
name|props
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|props
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|WriteImage
parameter_list|(
name|PDDocument
name|document
parameter_list|,
name|String
name|imageType
parameter_list|,
name|String
name|password
parameter_list|,
name|int
name|startPage
parameter_list|,
name|int
name|endPage
parameter_list|,
name|String
name|outputPrefix
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|bSuccess
init|=
literal|true
decl_stmt|;
name|List
name|pages
init|=
name|document
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|getAllPages
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|startPage
operator|-
literal|1
init|;
name|i
operator|<
name|endPage
operator|&&
name|i
operator|<
name|pages
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ImageOutputStream
name|output
init|=
literal|null
decl_stmt|;
name|ImageWriter
name|imageWriter
init|=
literal|null
decl_stmt|;
try|try
block|{
name|PDPage
name|page
init|=
operator|(
name|PDPage
operator|)
name|pages
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|BufferedImage
name|image
init|=
name|page
operator|.
name|convertToImage
argument_list|()
decl_stmt|;
name|String
name|fileName
init|=
name|outputPrefix
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|"."
operator|+
name|imageType
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Writing:"
operator|+
name|fileName
argument_list|)
expr_stmt|;
name|output
operator|=
name|ImageIO
operator|.
name|createImageOutputStream
argument_list|(
operator|new
name|File
argument_list|(
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|foundWriter
init|=
literal|false
decl_stmt|;
name|Iterator
name|writerIter
init|=
name|ImageIO
operator|.
name|getImageWritersByFormatName
argument_list|(
name|imageType
argument_list|)
decl_stmt|;
while|while
condition|(
name|writerIter
operator|.
name|hasNext
argument_list|()
operator|&&
operator|!
name|foundWriter
condition|)
block|{
try|try
block|{
name|imageWriter
operator|=
operator|(
name|ImageWriter
operator|)
name|writerIter
operator|.
name|next
argument_list|()
expr_stmt|;
name|ImageWriteParam
name|writerParams
init|=
name|imageWriter
operator|.
name|getDefaultWriteParam
argument_list|()
decl_stmt|;
if|if
condition|(
name|writerParams
operator|.
name|canWriteCompressed
argument_list|()
condition|)
block|{
name|writerParams
operator|.
name|setCompressionMode
argument_list|(
name|ImageWriteParam
operator|.
name|MODE_EXPLICIT
argument_list|)
expr_stmt|;
name|writerParams
operator|.
name|setCompressionQuality
argument_list|(
literal|1.0f
argument_list|)
expr_stmt|;
block|}
name|imageWriter
operator|.
name|setOutput
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|imageWriter
operator|.
name|write
argument_list|(
literal|null
argument_list|,
operator|new
name|IIOImage
argument_list|(
name|image
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|writerParams
argument_list|)
expr_stmt|;
name|foundWriter
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IIOException
name|io
parameter_list|)
block|{
comment|//ignore exception
block|}
finally|finally
block|{
if|if
condition|(
name|imageWriter
operator|!=
literal|null
condition|)
block|{
name|imageWriter
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|foundWriter
condition|)
block|{
name|bSuccess
operator|=
literal|false
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error: no writer found for image type '"
operator|+
name|imageType
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|output
operator|!=
literal|null
condition|)
block|{
name|output
operator|.
name|flush
argument_list|()
expr_stmt|;
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|//}
return|return
name|bSuccess
return|;
block|}
block|}
end_class

end_unit

