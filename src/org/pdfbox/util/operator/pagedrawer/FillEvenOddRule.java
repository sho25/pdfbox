begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *   *      http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|pagedrawer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Graphics2D
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|RenderingHints
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|GeneralPath
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdfviewer
operator|.
name|PageDrawer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|PDFOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|operator
operator|.
name|OperatorProcessor
import|;
end_import

begin_comment
comment|/**  * Implementation of content stream operator for page drawer.  *   * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.5 $  */
end_comment

begin_class
specifier|public
class|class
name|FillEvenOddRule
extends|extends
name|OperatorProcessor
block|{
comment|/**      * process : f* : fill path using even odd rule.      * @param operator The operator that is being executed.      * @param arguments List      *       * @throws IOException if there is an error during execution.      */
specifier|public
name|void
name|process
parameter_list|(
name|PDFOperator
name|operator
parameter_list|,
name|List
name|arguments
parameter_list|)
throws|throws
name|IOException
block|{
comment|//      NOTE:changes here should probably also be made to FillNonZeroRule
name|PageDrawer
name|drawer
init|=
operator|(
name|PageDrawer
operator|)
name|context
decl_stmt|;
name|Graphics2D
name|graphics
init|=
name|drawer
operator|.
name|getGraphics
argument_list|()
decl_stmt|;
comment|//linePath.closePath();
name|graphics
operator|.
name|setColor
argument_list|(
name|drawer
operator|.
name|getGraphicsState
argument_list|()
operator|.
name|getNonStrokingColorSpace
argument_list|()
operator|.
name|createColor
argument_list|()
argument_list|)
expr_stmt|;
name|drawer
operator|.
name|getLinePath
argument_list|()
operator|.
name|setWindingRule
argument_list|(
name|GeneralPath
operator|.
name|WIND_EVEN_ODD
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|setRenderingHint
argument_list|(
name|RenderingHints
operator|.
name|KEY_ANTIALIASING
argument_list|,
name|RenderingHints
operator|.
name|VALUE_ANTIALIAS_OFF
argument_list|)
expr_stmt|;
name|List
name|subPaths
init|=
name|drawer
operator|.
name|getLineSubPaths
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subPaths
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|GeneralPath
name|subPath
init|=
operator|(
name|GeneralPath
operator|)
name|subPaths
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|subPath
operator|.
name|closePath
argument_list|()
expr_stmt|;
name|graphics
operator|.
name|fill
argument_list|(
name|subPath
argument_list|)
expr_stmt|;
block|}
comment|//else
comment|//{
name|graphics
operator|.
name|fill
argument_list|(
name|drawer
operator|.
name|getLinePath
argument_list|()
argument_list|)
expr_stmt|;
comment|//}
name|drawer
operator|.
name|getLinePath
argument_list|()
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

