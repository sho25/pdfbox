begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *   *      http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|pdfbox
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPage
import|;
end_import

begin_comment
comment|/**  * This class is a comparator for TextPosition operators.  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.7 $  */
end_comment

begin_class
specifier|public
class|class
name|TextPositionComparator
implements|implements
name|Comparator
block|{
specifier|private
name|PDPage
name|thePage
init|=
literal|null
decl_stmt|;
comment|/**      * Constuctor, comparison of TextPosition depends on the rotation      * of the page.      * @param page The page that the text position is on.      */
specifier|public
name|TextPositionComparator
parameter_list|(
name|PDPage
name|page
parameter_list|)
block|{
name|thePage
operator|=
name|page
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
name|int
name|retval
init|=
literal|0
decl_stmt|;
name|TextPosition
name|pos1
init|=
operator|(
name|TextPosition
operator|)
name|o1
decl_stmt|;
name|TextPosition
name|pos2
init|=
operator|(
name|TextPosition
operator|)
name|o2
decl_stmt|;
name|int
name|rotation
init|=
name|thePage
operator|.
name|findRotation
argument_list|()
decl_stmt|;
name|float
name|x1
init|=
literal|0
decl_stmt|;
name|float
name|x2
init|=
literal|0
decl_stmt|;
name|float
name|pos1YBottom
init|=
literal|0
decl_stmt|;
name|float
name|pos2YBottom
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|rotation
operator|==
literal|0
condition|)
block|{
name|x1
operator|=
name|pos1
operator|.
name|getX
argument_list|()
expr_stmt|;
name|x2
operator|=
name|pos2
operator|.
name|getX
argument_list|()
expr_stmt|;
name|pos1YBottom
operator|=
name|pos1
operator|.
name|getY
argument_list|()
expr_stmt|;
name|pos2YBottom
operator|=
name|pos2
operator|.
name|getY
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rotation
operator|==
literal|90
condition|)
block|{
name|x1
operator|=
name|pos1
operator|.
name|getY
argument_list|()
expr_stmt|;
name|x2
operator|=
name|pos2
operator|.
name|getX
argument_list|()
expr_stmt|;
name|pos1YBottom
operator|=
name|pos1
operator|.
name|getX
argument_list|()
expr_stmt|;
name|pos2YBottom
operator|=
name|pos2
operator|.
name|getY
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rotation
operator|==
literal|180
condition|)
block|{
name|x1
operator|=
operator|-
name|pos1
operator|.
name|getX
argument_list|()
expr_stmt|;
name|x2
operator|=
operator|-
name|pos2
operator|.
name|getX
argument_list|()
expr_stmt|;
name|pos1YBottom
operator|=
operator|-
name|pos1
operator|.
name|getY
argument_list|()
expr_stmt|;
name|pos2YBottom
operator|=
operator|-
name|pos2
operator|.
name|getY
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rotation
operator|==
literal|270
condition|)
block|{
name|x1
operator|=
operator|-
name|pos1
operator|.
name|getY
argument_list|()
expr_stmt|;
name|x2
operator|=
operator|-
name|pos2
operator|.
name|getY
argument_list|()
expr_stmt|;
name|pos1YBottom
operator|=
operator|-
name|pos1
operator|.
name|getX
argument_list|()
expr_stmt|;
name|pos2YBottom
operator|=
operator|-
name|pos2
operator|.
name|getX
argument_list|()
expr_stmt|;
block|}
name|float
name|pos1YTop
init|=
name|pos1YBottom
operator|-
name|pos1
operator|.
name|getHeight
argument_list|()
decl_stmt|;
name|float
name|pos2YTop
init|=
name|pos2YBottom
operator|-
name|pos2
operator|.
name|getHeight
argument_list|()
decl_stmt|;
name|float
name|yDifference
init|=
name|Math
operator|.
name|abs
argument_list|(
name|pos1YBottom
operator|-
name|pos2YBottom
argument_list|)
decl_stmt|;
comment|//we will do a simple tolerance comparison.
if|if
condition|(
name|yDifference
operator|<
literal|.1
operator|||
operator|(
name|pos2YBottom
operator|>=
name|pos1YTop
operator|&&
name|pos2YBottom
operator|<=
name|pos1YBottom
operator|)
operator|||
operator|(
name|pos1YBottom
operator|>=
name|pos2YTop
operator|&&
name|pos1YBottom
operator|<=
name|pos2YBottom
operator|)
condition|)
block|{
if|if
condition|(
name|x1
operator|<
name|x2
condition|)
block|{
name|retval
operator|=
operator|-
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|x1
operator|>
name|x2
condition|)
block|{
name|retval
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|retval
operator|=
literal|0
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|pos1YBottom
operator|<
name|pos2YBottom
condition|)
block|{
name|retval
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
return|return
literal|1
return|;
block|}
return|return
name|retval
return|;
block|}
block|}
end_class

end_unit

