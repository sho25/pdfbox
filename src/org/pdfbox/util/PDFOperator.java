begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright (c) 2003-2004, www.pdfbox.org  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are met:  *  * 1. Redistributions of source code must retain the above copyright notice,  *    this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright notice,  *    this list of conditions and the following disclaimer in the documentation  *    and/or other materials provided with the distribution.  * 3. Neither the name of pdfbox; nor the names of its  *    contributors may be used to endorse or promote products derived from this  *    software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * http://www.pdfbox.org  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|pdfbox
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * This class represents an Operator in the content stream.  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.14 $  */
end_comment

begin_class
specifier|public
class|class
name|PDFOperator
block|{
specifier|private
name|String
name|theOperator
decl_stmt|;
specifier|private
name|byte
index|[]
name|imageData
decl_stmt|;
specifier|private
name|ImageParameters
name|imageParameters
decl_stmt|;
specifier|private
specifier|static
name|Map
name|operators
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|HashMap
argument_list|()
argument_list|)
decl_stmt|;
comment|/**      * Constructor.      *      * @param aOperator The operator that this object will represent.      */
specifier|private
name|PDFOperator
parameter_list|(
name|String
name|aOperator
parameter_list|)
block|{
name|theOperator
operator|=
name|aOperator
expr_stmt|;
if|if
condition|(
name|aOperator
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Operators are not allowed to start with / '"
operator|+
name|aOperator
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
comment|/**      * This is used to create/cache operators in the system.      *      * @param operator The operator for the system.      *      * @return The operator that matches the operator keyword.      */
specifier|public
specifier|static
name|PDFOperator
name|getOperator
parameter_list|(
name|String
name|operator
parameter_list|)
block|{
name|PDFOperator
name|operation
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|operator
operator|.
name|equals
argument_list|(
literal|"ID"
argument_list|)
operator|||
name|operator
operator|.
name|equals
argument_list|(
literal|"BI"
argument_list|)
condition|)
block|{
comment|//we can't cache the ID operators.
name|operation
operator|=
operator|new
name|PDFOperator
argument_list|(
name|operator
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|operation
operator|=
operator|(
name|PDFOperator
operator|)
name|operators
operator|.
name|get
argument_list|(
name|operator
argument_list|)
expr_stmt|;
if|if
condition|(
name|operation
operator|==
literal|null
condition|)
block|{
name|operation
operator|=
operator|new
name|PDFOperator
argument_list|(
name|operator
argument_list|)
expr_stmt|;
name|operators
operator|.
name|put
argument_list|(
name|operator
argument_list|,
name|operation
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|operation
return|;
block|}
comment|/**      * This will get the operation that this operator represents.      *      * @return The string representation of the operation.      */
specifier|public
name|String
name|getOperation
parameter_list|()
block|{
return|return
name|theOperator
return|;
block|}
comment|/**      * This will print a string rep of this class.      *      * @return A string rep of this class.      */
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"PDFOperator{"
operator|+
name|theOperator
operator|+
literal|"}"
return|;
block|}
comment|/**      * This is the special case for the ID operator where there are just random      * bytes inlined the stream.      *      * @return Value of property imageData.      */
specifier|public
name|byte
index|[]
name|getImageData
parameter_list|()
block|{
return|return
name|this
operator|.
name|imageData
return|;
block|}
comment|/**      * This will set the image data, this is only used for the ID operator.      *      * @param imageDataArray New value of property imageData.      */
specifier|public
name|void
name|setImageData
parameter_list|(
name|byte
index|[]
name|imageDataArray
parameter_list|)
block|{
name|imageData
operator|=
name|imageDataArray
expr_stmt|;
block|}
comment|/**      * This will get the image parameters, this is only valid for BI operators.      *      * @return The image parameters.      */
specifier|public
name|ImageParameters
name|getImageParameters
parameter_list|()
block|{
return|return
name|imageParameters
return|;
block|}
comment|/**      * This will set the image parameters, this is only valid for BI operators.      *      * @param params The image parameters.      */
specifier|public
name|void
name|setImageParameters
parameter_list|(
name|ImageParameters
name|params
parameter_list|)
block|{
name|imageParameters
operator|=
name|params
expr_stmt|;
block|}
block|}
end_class

end_unit

