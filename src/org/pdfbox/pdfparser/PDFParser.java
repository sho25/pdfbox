begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *   *      http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|pdfbox
operator|.
name|pdfparser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|exceptions
operator|.
name|WrappedIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|io
operator|.
name|RandomAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|fdf
operator|.
name|FDFDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|persistence
operator|.
name|util
operator|.
name|COSObjectKey
import|;
end_import

begin_comment
comment|/**  * This class will handle the parsing of the PDF document.  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.53 $  */
end_comment

begin_class
specifier|public
class|class
name|PDFParser
extends|extends
name|BaseParser
block|{
specifier|private
specifier|static
specifier|final
name|int
name|SPACE_BYTE
init|=
literal|32
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PDF_HEADER
init|=
literal|"%PDF-"
decl_stmt|;
specifier|private
name|COSDocument
name|document
decl_stmt|;
comment|/**      * Temp file directory.      */
specifier|private
name|File
name|tempDirectory
init|=
literal|null
decl_stmt|;
specifier|private
name|RandomAccess
name|raf
init|=
literal|null
decl_stmt|;
comment|/**      * Constructor.      *      * @param input The input stream that contains the PDF document.      *      * @throws IOException If there is an error initializing the stream.      */
specifier|public
name|PDFParser
parameter_list|(
name|InputStream
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|input
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor to allow control over RandomAccessFile.      * @param input The input stream that contains the PDF document.      * @param rafi The RandomAccessFile to be used in internal COSDocument      *      * @throws IOException If there is an error initializing the stream.      */
specifier|public
name|PDFParser
parameter_list|(
name|InputStream
name|input
parameter_list|,
name|RandomAccess
name|rafi
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|this
operator|.
name|raf
operator|=
name|rafi
expr_stmt|;
block|}
comment|/**      * This is the directory where pdfbox will create a temporary file      * for storing pdf document stream in.  By default this directory will      * be the value of the system property java.io.tmpdir.      *      * @param tmpDir The directory to create scratch files needed to store      *        pdf document streams.      */
specifier|public
name|void
name|setTempDirectory
parameter_list|(
name|File
name|tmpDir
parameter_list|)
block|{
name|tempDirectory
operator|=
name|tmpDir
expr_stmt|;
block|}
comment|/**      * This will prase the stream and create the PDF document.  This will close      * the stream when it is done parsing.      *      * @throws IOException If there is an error reading from the stream.      */
specifier|public
name|void
name|parse
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
name|raf
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|tempDirectory
operator|!=
literal|null
condition|)
block|{
name|document
operator|=
operator|new
name|COSDocument
argument_list|(
name|tempDirectory
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|document
operator|=
operator|new
name|COSDocument
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|document
operator|=
operator|new
name|COSDocument
argument_list|(
name|raf
argument_list|)
expr_stmt|;
block|}
name|setDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|String
name|header
init|=
name|readLine
argument_list|()
decl_stmt|;
name|document
operator|.
name|setHeaderString
argument_list|(
name|header
argument_list|)
expr_stmt|;
if|if
condition|(
name|header
operator|.
name|length
argument_list|()
operator|<
name|PDF_HEADER
operator|.
name|length
argument_list|()
operator|+
literal|1
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error: Header is corrupt '"
operator|+
name|header
operator|+
literal|"'"
argument_list|)
throw|;
block|}
comment|//sometimes there are some garbage bytes in the header before the header
comment|//actually starts, so lets try to find the header first.
name|int
name|headerStart
init|=
name|header
operator|.
name|indexOf
argument_list|(
name|PDF_HEADER
argument_list|)
decl_stmt|;
comment|//greater than zero because if it is zero then
comment|//there is no point of trimming
if|if
condition|(
name|headerStart
operator|>
literal|0
condition|)
block|{
comment|//trim off any leading characters
name|header
operator|=
name|header
operator|.
name|substring
argument_list|(
name|headerStart
argument_list|,
name|header
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|float
name|pdfVersion
init|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|header
operator|.
name|substring
argument_list|(
name|PDF_HEADER
operator|.
name|length
argument_list|()
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|header
operator|.
name|length
argument_list|()
argument_list|,
name|PDF_HEADER
operator|.
name|length
argument_list|()
operator|+
literal|3
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|document
operator|.
name|setVersion
argument_list|(
name|pdfVersion
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error getting pdf version:"
operator|+
name|e
argument_list|)
throw|;
block|}
name|skipHeaderFillBytes
argument_list|()
expr_stmt|;
name|Object
name|nextObject
decl_stmt|;
name|boolean
name|wasLastParsedObjectAnXref
init|=
literal|false
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|(
name|nextObject
operator|=
name|parseObject
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|nextObject
operator|instanceof
name|PDFXref
condition|)
block|{
name|PDFXref
name|xref
init|=
operator|(
name|PDFXref
operator|)
name|nextObject
decl_stmt|;
name|addXref
argument_list|(
name|xref
argument_list|)
expr_stmt|;
name|wasLastParsedObjectAnXref
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|wasLastParsedObjectAnXref
operator|=
literal|false
expr_stmt|;
block|}
name|skipSpaces
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|document
operator|.
name|getTrailer
argument_list|()
operator|==
literal|null
condition|)
block|{
name|COSDictionary
name|trailer
init|=
operator|new
name|COSDictionary
argument_list|()
decl_stmt|;
name|Iterator
name|xrefIter
init|=
name|document
operator|.
name|getObjectsByType
argument_list|(
literal|"XRef"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|xrefIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|COSStream
name|next
init|=
call|(
name|COSStream
call|)
argument_list|(
operator|(
name|COSObject
operator|)
name|xrefIter
operator|.
name|next
argument_list|()
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|trailer
operator|.
name|addAll
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
name|document
operator|.
name|setTrailer
argument_list|(
name|trailer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|document
operator|.
name|isEncrypted
argument_list|()
condition|)
block|{
name|document
operator|.
name|dereferenceObjectStreams
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|wasLastParsedObjectAnXref
condition|)
block|{
comment|//Then we assume that there is just random garbage after
comment|//the xref, not sure why the PDF spec allows this but it does.
block|}
else|else
block|{
comment|//some other error so just pass it along
throw|throw
name|e
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|//so if the PDF is corrupt then close the document and clear
comment|//all resources to it
if|if
condition|(
name|document
operator|!=
literal|null
condition|)
block|{
name|document
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|t
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|t
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|WrappedIOException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|pdfSource
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * This will skip a header's binary fill bytes.  This is in accordance to      * PDF Specification 1.5 pg 68 section 3.4.1 "Syntax.File Structure.File Header"      *      * @throws IOException If there is an error reading from the stream.     */
specifier|protected
name|void
name|skipHeaderFillBytes
parameter_list|()
throws|throws
name|IOException
block|{
name|skipSpaces
argument_list|()
expr_stmt|;
name|int
name|c
init|=
name|pdfSource
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Character
operator|.
name|isDigit
argument_list|(
operator|(
name|char
operator|)
name|c
argument_list|)
condition|)
block|{
comment|// Fill bytes conform with PDF reference (but without comment sign)
comment|// => skip until EOL
name|readLine
argument_list|()
expr_stmt|;
block|}
comment|// else: no fill bytes
block|}
comment|/**      * This will get the document that was parsed.  parse() must be called before this is called.      * When you are done with this document you must call close() on it to release      * resources.      *      * @return The document that was parsed.      *      * @throws IOException If there is an error getting the document.      */
specifier|public
name|COSDocument
name|getDocument
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|document
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"You must call parse() before calling getDocument()"
argument_list|)
throw|;
block|}
return|return
name|document
return|;
block|}
comment|/**      * This will get the PD document that was parsed.  When you are done with      * this document you must call close() on it to release resources.      *      * @return The document at the PD layer.      *      * @throws IOException If there is an error getting the document.      */
specifier|public
name|PDDocument
name|getPDDocument
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|PDDocument
argument_list|(
name|getDocument
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * This will get the FDF document that was parsed.  When you are done with      * this document you must call close() on it to release resources.      *      * @return The document at the PD layer.      *      * @throws IOException If there is an error getting the document.      */
specifier|public
name|FDFDocument
name|getFDFDocument
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|FDFDocument
argument_list|(
name|getDocument
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * This will parse a document object from the stream.      *      * @return The parsed object.      *      * @throws IOException If an IO error occurs.      */
specifier|private
name|Object
name|parseObject
parameter_list|()
throws|throws
name|IOException
block|{
name|Object
name|object
init|=
literal|null
decl_stmt|;
name|skipSpaces
argument_list|()
expr_stmt|;
name|char
name|peekedChar
init|=
operator|(
name|char
operator|)
name|pdfSource
operator|.
name|peek
argument_list|()
decl_stmt|;
while|while
condition|(
name|peekedChar
operator|==
literal|'e'
condition|)
block|{
comment|//there are times when there are multiple endobj, so lets
comment|//just read them and move on.
name|readString
argument_list|()
expr_stmt|;
name|skipSpaces
argument_list|()
expr_stmt|;
name|peekedChar
operator|=
operator|(
name|char
operator|)
name|pdfSource
operator|.
name|peek
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|pdfSource
operator|.
name|isEOF
argument_list|()
condition|)
block|{
comment|//"Skipping because of EOF" );
comment|//end of file we will return a null object and call it a day.
block|}
elseif|else
if|if
condition|(
name|peekedChar
operator|==
literal|'x'
operator|||
name|peekedChar
operator|==
literal|'t'
operator|||
name|peekedChar
operator|==
literal|'s'
condition|)
block|{
comment|//System.out.println( "parseObject() parsing xref" );
comment|//FDF documents do not always have the xref
if|if
condition|(
name|peekedChar
operator|==
literal|'x'
operator|||
name|peekedChar
operator|==
literal|'t'
condition|)
block|{
name|object
operator|=
name|parseXrefSection
argument_list|()
expr_stmt|;
block|}
comment|//if peeked char is xref or startxref
if|if
condition|(
name|peekedChar
operator|==
literal|'x'
operator|||
name|peekedChar
operator|==
literal|'s'
condition|)
block|{
name|skipSpaces
argument_list|()
expr_stmt|;
while|while
condition|(
name|pdfSource
operator|.
name|peek
argument_list|()
operator|==
literal|'x'
condition|)
block|{
name|parseXrefSection
argument_list|()
expr_stmt|;
block|}
name|String
name|startxref
init|=
name|readString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|startxref
operator|.
name|equals
argument_list|(
literal|"startxref"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"expected='startxref' actual='"
operator|+
name|startxref
operator|+
literal|"' "
operator|+
name|pdfSource
argument_list|)
throw|;
block|}
name|skipSpaces
argument_list|()
expr_stmt|;
comment|//read some integer that is in the stream but PDFBox doesn't use
name|readInt
argument_list|()
expr_stmt|;
block|}
comment|//This MUST be readLine because readString strips out comments
comment|//and it will think that %% is a comment in from of the EOF
name|String
name|eof
init|=
name|readExpectedString
argument_list|(
literal|"%%EOF"
argument_list|)
decl_stmt|;
if|if
condition|(
name|eof
operator|.
name|indexOf
argument_list|(
literal|"%%EOF"
argument_list|)
operator|==
operator|-
literal|1
operator|&&
operator|!
name|pdfSource
operator|.
name|isEOF
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"expected='%%EOF' actual='"
operator|+
name|eof
operator|+
literal|"' next="
operator|+
name|readString
argument_list|()
operator|+
literal|" next="
operator|+
name|readString
argument_list|()
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
operator|!
name|pdfSource
operator|.
name|isEOF
argument_list|()
condition|)
block|{
comment|//we might really be at the end of the file, there might just be some crap at the
comment|//end of the file.
name|pdfSource
operator|.
name|fillBuffer
argument_list|()
expr_stmt|;
if|if
condition|(
name|pdfSource
operator|.
name|available
argument_list|()
operator|<
literal|1000
condition|)
block|{
comment|//We need to determine if we are at the end of the file.
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
literal|1000
index|]
decl_stmt|;
name|int
name|amountRead
init|=
name|pdfSource
operator|.
name|read
argument_list|(
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|amountRead
operator|!=
operator|-
literal|1
condition|)
block|{
name|pdfSource
operator|.
name|unread
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|amountRead
argument_list|)
expr_stmt|;
block|}
name|boolean
name|atEndOfFile
init|=
literal|true
decl_stmt|;
comment|//we assume yes unless we find another.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|amountRead
operator|-
literal|3
operator|&&
name|atEndOfFile
condition|;
name|i
operator|++
control|)
block|{
name|atEndOfFile
operator|=
operator|!
operator|(
name|data
index|[
name|i
index|]
operator|==
literal|'E'
operator|&&
name|data
index|[
name|i
operator|+
literal|1
index|]
operator|==
literal|'O'
operator|&&
name|data
index|[
name|i
operator|+
literal|2
index|]
operator|==
literal|'F'
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|atEndOfFile
condition|)
block|{
while|while
condition|(
name|pdfSource
operator|.
name|read
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
comment|//read until done.
block|}
block|}
block|}
block|}
block|}
else|else
block|{
name|int
name|number
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|genNum
init|=
operator|-
literal|1
decl_stmt|;
name|String
name|objectKey
init|=
literal|null
decl_stmt|;
name|boolean
name|missingObjectNumber
init|=
literal|false
decl_stmt|;
try|try
block|{
name|char
name|peeked
init|=
operator|(
name|char
operator|)
name|pdfSource
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|peeked
operator|==
literal|'<'
condition|)
block|{
name|missingObjectNumber
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|number
operator|=
name|readInt
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//ok for some reason "GNU Ghostscript 5.10" puts two endobj
comment|//statements after an object, of course this is nonsense
comment|//but because we want to support as many PDFs as possible
comment|//we will simply try again
name|number
operator|=
name|readInt
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|missingObjectNumber
condition|)
block|{
name|skipSpaces
argument_list|()
expr_stmt|;
name|genNum
operator|=
name|readInt
argument_list|()
expr_stmt|;
name|objectKey
operator|=
name|readString
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|//System.out.println( "parseObject() num=" + number +
comment|//" genNumber=" + genNum + " key='" + objectKey + "'" );
if|if
condition|(
operator|!
name|objectKey
operator|.
name|equals
argument_list|(
literal|"obj"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"expected='obj' actual='"
operator|+
name|objectKey
operator|+
literal|"' "
operator|+
name|pdfSource
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|number
operator|=
operator|-
literal|1
expr_stmt|;
name|genNum
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|skipSpaces
argument_list|()
expr_stmt|;
name|COSBase
name|pb
init|=
name|parseDirObject
argument_list|()
decl_stmt|;
name|String
name|endObjectKey
init|=
name|readString
argument_list|()
decl_stmt|;
if|if
condition|(
name|endObjectKey
operator|.
name|equals
argument_list|(
literal|"stream"
argument_list|)
condition|)
block|{
name|pdfSource
operator|.
name|unread
argument_list|(
name|endObjectKey
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|pdfSource
operator|.
name|unread
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
if|if
condition|(
name|pb
operator|instanceof
name|COSDictionary
condition|)
block|{
name|pb
operator|=
name|parseCOSStream
argument_list|(
operator|(
name|COSDictionary
operator|)
name|pb
argument_list|,
name|getDocument
argument_list|()
operator|.
name|getScratchFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// this is not legal
comment|// the combination of a dict and the stream/endstream forms a complete stream object
throw|throw
operator|new
name|IOException
argument_list|(
literal|"stream not preceded by dictionary"
argument_list|)
throw|;
block|}
name|endObjectKey
operator|=
name|readString
argument_list|()
expr_stmt|;
block|}
name|COSObjectKey
name|key
init|=
operator|new
name|COSObjectKey
argument_list|(
name|number
argument_list|,
name|genNum
argument_list|)
decl_stmt|;
name|COSObject
name|pdfObject
init|=
name|document
operator|.
name|getObjectFromPool
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|object
operator|=
name|pdfObject
expr_stmt|;
name|pdfObject
operator|.
name|setObject
argument_list|(
name|pb
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|endObjectKey
operator|.
name|equals
argument_list|(
literal|"endobj"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|pdfSource
operator|.
name|isEOF
argument_list|()
condition|)
block|{
try|try
block|{
comment|//It is possible that the endobj  is missing, there
comment|//are several PDFs out there that do that so skip it and move on.
name|Float
operator|.
name|parseFloat
argument_list|(
name|endObjectKey
argument_list|)
expr_stmt|;
name|pdfSource
operator|.
name|unread
argument_list|(
name|SPACE_BYTE
argument_list|)
expr_stmt|;
name|pdfSource
operator|.
name|unread
argument_list|(
name|endObjectKey
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|//we will try again incase there was some garbage which
comment|//some writers will leave behind.
name|String
name|secondEndObjectKey
init|=
name|readString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|secondEndObjectKey
operator|.
name|equals
argument_list|(
literal|"endobj"
argument_list|)
condition|)
block|{
if|if
condition|(
name|isClosing
argument_list|()
condition|)
block|{
comment|//found a case with 17506.pdf object 41 that was like this
comment|//41 0 obj [/Pattern /DeviceGray] ] endobj
comment|//notice the second array close, here we are reading it
comment|//and ignoring and attempting to continue
name|pdfSource
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
name|skipSpaces
argument_list|()
expr_stmt|;
name|String
name|thirdPossibleEndObj
init|=
name|readString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|thirdPossibleEndObj
operator|.
name|equals
argument_list|(
literal|"endobj"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"expected='endobj' firstReadAttempt='"
operator|+
name|endObjectKey
operator|+
literal|"' "
operator|+
literal|"secondReadAttempt='"
operator|+
name|secondEndObjectKey
operator|+
literal|"' "
operator|+
name|pdfSource
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
name|skipSpaces
argument_list|()
expr_stmt|;
block|}
comment|//System.out.println( "parsed=" + object );
comment|//logger().fine( "parsed=" + object );
return|return
name|object
return|;
block|}
comment|/**      * This will parse the xref table and trailers from the stream.      *      * @return a new PDFXref      *      * @throws IOException If an IO error occurs.      */
specifier|protected
name|PDFXref
name|parseXrefSection
parameter_list|()
throws|throws
name|IOException
block|{
name|int
index|[]
name|params
init|=
operator|new
name|int
index|[
literal|2
index|]
decl_stmt|;
name|parseXrefTable
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|parseTrailer
argument_list|()
expr_stmt|;
return|return
operator|new
name|PDFXref
argument_list|(
name|params
index|[
literal|0
index|]
argument_list|,
name|params
index|[
literal|1
index|]
argument_list|)
return|;
block|}
comment|/**      * This will parse the xref table from the stream.      *      * It stores the starting object number and the count      *       * @param params The start and count parameters      *      * @throws IOException If an IO error occurs.      */
specifier|protected
name|void
name|parseXrefTable
parameter_list|(
name|int
index|[]
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|nextLine
init|=
literal|null
decl_stmt|;
name|nextLine
operator|=
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
name|nextLine
operator|.
name|equals
argument_list|(
literal|"xref"
argument_list|)
condition|)
block|{
name|params
index|[
literal|0
index|]
operator|=
name|readInt
argument_list|()
expr_stmt|;
name|params
index|[
literal|1
index|]
operator|=
name|readInt
argument_list|()
expr_stmt|;
name|nextLine
operator|=
name|readString
argument_list|()
expr_stmt|;
block|}
name|skipSpaces
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|nextLine
operator|.
name|equals
argument_list|(
literal|"trailer"
argument_list|)
operator|&&
operator|!
name|pdfSource
operator|.
name|isEOF
argument_list|()
operator|&&
operator|!
name|isEndOfName
argument_list|(
operator|(
name|char
operator|)
name|pdfSource
operator|.
name|peek
argument_list|()
argument_list|)
condition|)
block|{
comment|//skip past all the xref entries.
name|nextLine
operator|=
name|readString
argument_list|()
expr_stmt|;
name|skipSpaces
argument_list|()
expr_stmt|;
block|}
name|skipSpaces
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|parseTrailer
parameter_list|()
throws|throws
name|IOException
block|{
name|COSDictionary
name|parsedTrailer
init|=
name|parseCOSDictionary
argument_list|()
decl_stmt|;
name|COSDictionary
name|docTrailer
init|=
name|document
operator|.
name|getTrailer
argument_list|()
decl_stmt|;
if|if
condition|(
name|docTrailer
operator|==
literal|null
condition|)
block|{
name|document
operator|.
name|setTrailer
argument_list|(
name|parsedTrailer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|docTrailer
operator|.
name|addAll
argument_list|(
name|parsedTrailer
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

