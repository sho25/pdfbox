begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|pdfbox
operator|.
name|pdfparser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSNumber
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|io
operator|.
name|RandomAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|PDFOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|ImageParameters
import|;
end_import

begin_comment
comment|/**  * This will parse a PDF byte stream and extract operands and such.  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.32 $  */
end_comment

begin_class
specifier|public
class|class
name|PDFStreamParser
extends|extends
name|BaseParser
block|{
specifier|private
name|List
name|streamObjects
init|=
operator|new
name|ArrayList
argument_list|(
literal|100
argument_list|)
decl_stmt|;
specifier|private
name|RandomAccess
name|file
decl_stmt|;
specifier|private
name|PDFOperator
name|lastBIToken
init|=
literal|null
decl_stmt|;
comment|/**      * Constructor that takes a stream to parse.      *      * @param stream The stream to read data from.      * @param raf The random access file.      *      * @throws IOException If there is an error reading from the stream.      */
specifier|public
name|PDFStreamParser
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|RandomAccess
name|raf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|file
operator|=
name|raf
expr_stmt|;
block|}
comment|/**      * Constructor.      *      * @param stream The stream to parse.      *      * @throws IOException If there is an error initializing the stream.      */
specifier|public
name|PDFStreamParser
parameter_list|(
name|PDStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|stream
operator|.
name|createInputStream
argument_list|()
argument_list|,
name|stream
operator|.
name|getStream
argument_list|()
operator|.
name|getScratchFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor.      *      * @param stream The stream to parse.      *      * @throws IOException If there is an error initializing the stream.      */
specifier|public
name|PDFStreamParser
parameter_list|(
name|COSStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|stream
operator|.
name|getUnfilteredStream
argument_list|()
argument_list|,
name|stream
operator|.
name|getScratchFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will parse the tokens in the stream.  This will close the      * stream when it is finished parsing.      *      * @throws IOException If there is an error while parsing the stream.      */
specifier|public
name|void
name|parse
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|Object
name|token
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parseNextToken
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|streamObjects
operator|.
name|add
argument_list|(
name|token
argument_list|)
expr_stmt|;
comment|//logger().fine( "parsed=" + token );
block|}
block|}
finally|finally
block|{
name|pdfSource
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * This will get the tokens that were parsed from the stream.      *      * @return All of the tokens in the stream.      */
specifier|public
name|List
name|getTokens
parameter_list|()
block|{
return|return
name|streamObjects
return|;
block|}
comment|/**      * This will parse the next token in the stream.      *      * @return The next token in the stream or null if there are no more tokens in the stream.      *      * @throws IOException If an io error occurs while parsing the stream.      */
specifier|private
name|Object
name|parseNextToken
parameter_list|()
throws|throws
name|IOException
block|{
name|Object
name|retval
init|=
literal|null
decl_stmt|;
name|skipSpaces
argument_list|()
expr_stmt|;
name|int
name|nextByte
init|=
name|pdfSource
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|byte
operator|)
name|nextByte
operator|)
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
name|char
name|c
init|=
operator|(
name|char
operator|)
name|nextByte
decl_stmt|;
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'<'
case|:
block|{
name|int
name|leftBracket
init|=
name|pdfSource
operator|.
name|read
argument_list|()
decl_stmt|;
comment|//pull off first left bracket
name|c
operator|=
operator|(
name|char
operator|)
name|pdfSource
operator|.
name|peek
argument_list|()
expr_stmt|;
comment|//check for second left bracket
name|pdfSource
operator|.
name|unread
argument_list|(
name|leftBracket
argument_list|)
expr_stmt|;
comment|//put back first bracket
if|if
condition|(
name|c
operator|==
literal|'<'
condition|)
block|{
name|COSDictionary
name|pod
init|=
name|parseCOSDictionary
argument_list|()
decl_stmt|;
name|skipSpaces
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|char
operator|)
name|pdfSource
operator|.
name|peek
argument_list|()
operator|==
literal|'s'
condition|)
block|{
name|retval
operator|=
name|parseCOSStream
argument_list|(
name|pod
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|retval
operator|=
name|pod
expr_stmt|;
block|}
block|}
else|else
block|{
name|retval
operator|=
name|parseCOSString
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
case|case
literal|'['
case|:
comment|// array
block|{
name|retval
operator|=
name|parseCOSArray
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
literal|'('
case|:
comment|// string
name|retval
operator|=
name|parseCOSString
argument_list|()
expr_stmt|;
break|break;
case|case
literal|'/'
case|:
comment|// name
name|retval
operator|=
name|parseCOSName
argument_list|()
expr_stmt|;
break|break;
case|case
literal|'n'
case|:
comment|// null
block|{
name|String
name|nullString
init|=
name|readString
argument_list|()
decl_stmt|;
if|if
condition|(
name|nullString
operator|.
name|equals
argument_list|(
literal|"null"
argument_list|)
condition|)
block|{
name|retval
operator|=
name|COSNull
operator|.
name|NULL
expr_stmt|;
block|}
else|else
block|{
name|retval
operator|=
name|PDFOperator
operator|.
name|getOperator
argument_list|(
name|nullString
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
literal|'t'
case|:
case|case
literal|'f'
case|:
block|{
name|String
name|next
init|=
name|readString
argument_list|()
decl_stmt|;
if|if
condition|(
name|next
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
condition|)
block|{
name|retval
operator|=
name|COSBoolean
operator|.
name|TRUE
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
name|next
operator|.
name|equals
argument_list|(
literal|"false"
argument_list|)
condition|)
block|{
name|retval
operator|=
name|COSBoolean
operator|.
name|FALSE
expr_stmt|;
block|}
else|else
block|{
name|retval
operator|=
name|PDFOperator
operator|.
name|getOperator
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
literal|'R'
case|:
block|{
name|String
name|line
init|=
name|readString
argument_list|()
decl_stmt|;
if|if
condition|(
name|line
operator|.
name|equals
argument_list|(
literal|"R"
argument_list|)
condition|)
block|{
name|retval
operator|=
operator|new
name|COSObject
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|retval
operator|=
name|PDFOperator
operator|.
name|getOperator
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
literal|'0'
case|:
case|case
literal|'1'
case|:
case|case
literal|'2'
case|:
case|case
literal|'3'
case|:
case|case
literal|'4'
case|:
case|case
literal|'5'
case|:
case|case
literal|'6'
case|:
case|case
literal|'7'
case|:
case|case
literal|'8'
case|:
case|case
literal|'9'
case|:
case|case
literal|'-'
case|:
case|case
literal|'+'
case|:
case|case
literal|'.'
case|:
block|{
if|if
condition|(
name|Character
operator|.
name|isDigit
argument_list|(
name|c
argument_list|)
operator|||
name|c
operator|==
literal|'-'
operator|||
name|c
operator|==
literal|'+'
operator|||
name|c
operator|==
literal|'.'
condition|)
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
while|while
condition|(
name|Character
operator|.
name|isDigit
argument_list|(
operator|(
name|c
operator|=
operator|(
name|char
operator|)
name|pdfSource
operator|.
name|peek
argument_list|()
operator|)
argument_list|)
operator|||
name|c
operator|==
literal|'-'
operator|||
name|c
operator|==
literal|'+'
operator|||
name|c
operator|==
literal|'.'
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|pdfSource
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
name|retval
operator|=
name|COSNumber
operator|.
name|get
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown dir object c='"
operator|+
name|c
operator|+
literal|"' peek='"
operator|+
operator|(
name|char
operator|)
name|pdfSource
operator|.
name|peek
argument_list|()
operator|+
literal|"' "
operator|+
name|pdfSource
argument_list|)
throw|;
block|}
break|break;
block|}
case|case
literal|'B'
case|:
block|{
name|String
name|next
init|=
name|readString
argument_list|()
decl_stmt|;
name|retval
operator|=
name|PDFOperator
operator|.
name|getOperator
argument_list|(
name|next
argument_list|)
expr_stmt|;
if|if
condition|(
name|next
operator|.
name|equals
argument_list|(
literal|"BI"
argument_list|)
condition|)
block|{
name|lastBIToken
operator|=
operator|(
name|PDFOperator
operator|)
name|retval
expr_stmt|;
name|COSDictionary
name|imageParams
init|=
operator|new
name|COSDictionary
argument_list|()
decl_stmt|;
name|lastBIToken
operator|.
name|setImageParameters
argument_list|(
operator|new
name|ImageParameters
argument_list|(
name|imageParams
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|nextToken
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|nextToken
operator|=
name|parseNextToken
argument_list|()
operator|)
operator|instanceof
name|COSName
condition|)
block|{
name|Object
name|value
init|=
name|parseNextToken
argument_list|()
decl_stmt|;
name|imageParams
operator|.
name|setItem
argument_list|(
operator|(
name|COSName
operator|)
name|nextToken
argument_list|,
operator|(
name|COSBase
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
comment|//final token will be the image data, maybe??
name|PDFOperator
name|imageData
init|=
operator|(
name|PDFOperator
operator|)
name|nextToken
decl_stmt|;
name|lastBIToken
operator|.
name|setImageData
argument_list|(
name|imageData
operator|.
name|getImageData
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
literal|'I'
case|:
block|{
comment|//ImageParameters imageParams = lastBIToken.getImageParameters();
comment|//int expectedBytes = (int)Math.ceil(imageParams.getHeight() * imageParams.getWidth() *
comment|//                    (imageParams.getBitsPerComponent()/8) );
comment|//Special case for ID operator
name|String
name|id
init|=
literal|""
operator|+
operator|(
name|char
operator|)
name|pdfSource
operator|.
name|read
argument_list|()
operator|+
operator|(
name|char
operator|)
name|pdfSource
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|id
operator|.
name|equals
argument_list|(
literal|"ID"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error: Expected operator 'ID' actual='"
operator|+
name|id
operator|+
literal|"'"
argument_list|)
throw|;
block|}
name|ByteArrayOutputStream
name|imageData
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
comment|//boolean foundEnd = false;
if|if
condition|(
name|this
operator|.
name|isWhitespace
argument_list|()
condition|)
block|{
comment|//pull off the whitespace character
name|pdfSource
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
name|int
name|twoBytesAgo
init|=
literal|0
decl_stmt|;
name|int
name|lastByte
init|=
name|pdfSource
operator|.
name|read
argument_list|()
decl_stmt|;
name|int
name|currentByte
init|=
name|pdfSource
operator|.
name|read
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
comment|//PDF spec is kinda unclear about this.  Should a whitespace
comment|//always appear before EI? Not sure, I found a PDF
comment|//(UnderstandingWebSphereClassLoaders.pdf) which has EI as part
comment|//of the image data and will stop parsing prematurely if there is
comment|//not a check for<whitespace>EI<whitespace>.
while|while
condition|(
operator|!
operator|(
name|isWhitespace
argument_list|(
name|twoBytesAgo
argument_list|)
operator|&&
name|lastByte
operator|==
literal|'E'
operator|&&
name|currentByte
operator|==
literal|'I'
operator|&&
name|isWhitespace
argument_list|()
comment|//&&
comment|//amyuni2_05d__pdf1_3_acro4x.pdf has image data that
comment|//is compressed, so expectedBytes is useless here.
comment|//count>= expectedBytes
operator|)
operator|&&
operator|!
name|pdfSource
operator|.
name|isEOF
argument_list|()
condition|)
block|{
name|imageData
operator|.
name|write
argument_list|(
name|lastByte
argument_list|)
expr_stmt|;
name|twoBytesAgo
operator|=
name|lastByte
expr_stmt|;
name|lastByte
operator|=
name|currentByte
expr_stmt|;
name|currentByte
operator|=
name|pdfSource
operator|.
name|read
argument_list|()
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|pdfSource
operator|.
name|unread
argument_list|(
literal|'I'
argument_list|)
expr_stmt|;
comment|//unread the EI operator
name|pdfSource
operator|.
name|unread
argument_list|(
literal|'E'
argument_list|)
expr_stmt|;
name|retval
operator|=
name|PDFOperator
operator|.
name|getOperator
argument_list|(
literal|"ID"
argument_list|)
expr_stmt|;
operator|(
operator|(
name|PDFOperator
operator|)
name|retval
operator|)
operator|.
name|setImageData
argument_list|(
name|imageData
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|']'
case|:
block|{
comment|// some ']' around without its previous '['
comment|// this means a PDF is somewhat corrupt but we will continue to parse.
name|pdfSource
operator|.
name|read
argument_list|()
expr_stmt|;
name|retval
operator|=
name|COSNull
operator|.
name|NULL
expr_stmt|;
comment|// must be a better solution than null...
break|break;
block|}
default|default:
block|{
comment|//we must be an operator
name|String
name|operator
init|=
name|readOperator
argument_list|()
decl_stmt|;
if|if
condition|(
name|operator
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|//we have a corrupt stream, stop reading here
name|retval
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|retval
operator|=
name|PDFOperator
operator|.
name|getOperator
argument_list|(
name|operator
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|retval
return|;
block|}
comment|/**      * This will read an operator from the stream.      *      * @return The operator that was read from the stream.      *      * @throws IOException If there is an error reading from the stream.      */
specifier|protected
name|String
name|readOperator
parameter_list|()
throws|throws
name|IOException
block|{
name|skipSpaces
argument_list|()
expr_stmt|;
comment|//average string size is around 2 and the normal string buffer size is
comment|//about 16 so lets save some space.
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|(
literal|4
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|isWhitespace
argument_list|()
operator|&&
operator|!
name|isClosing
argument_list|()
operator|&&
operator|!
name|pdfSource
operator|.
name|isEOF
argument_list|()
operator|&&
name|pdfSource
operator|.
name|peek
argument_list|()
operator|!=
operator|(
name|int
operator|)
literal|'['
operator|&&
name|pdfSource
operator|.
name|peek
argument_list|()
operator|!=
operator|(
name|int
operator|)
literal|'<'
operator|&&
name|pdfSource
operator|.
name|peek
argument_list|()
operator|!=
operator|(
name|int
operator|)
literal|'('
operator|&&
name|pdfSource
operator|.
name|peek
argument_list|()
operator|!=
operator|(
name|int
operator|)
literal|'/'
operator|&&
operator|(
name|pdfSource
operator|.
name|peek
argument_list|()
argument_list|<
operator|(
name|int
operator|)
literal|'0'
operator|||
name|pdfSource
operator|.
name|peek
operator|(
operator|)
argument_list|>
argument_list|(
name|int
argument_list|)
literal|'9'
operator|)
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|pdfSource
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

