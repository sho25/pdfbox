begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright (c) 2004, www.pdfbox.org  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are met:  *  * 1. Redistributions of source code must retain the above copyright notice,  *    this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright notice,  *    this list of conditions and the following disclaimer in the documentation  *    and/or other materials provided with the distribution.  * 3. Neither the name of pdfbox; nor the names of its  *    contributors may be used to endorse or promote products derived from this  *    software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * http://www.pdfbox.org  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|pdfbox
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_comment
comment|/**  * This is a filter for the RunLength Decoder.  *   * From the PDF Reference   *<pre>  * The RunLengthDecode filter decodes data that has been encoded in a simple  * byte-oriented format based on run length. The encoded data is a sequence of  * runs, where each run consists of a length byte followed by 1 to 128 bytes of data. If  * the length byte is in the range 0 to 127, the following length + 1 (1 to 128) bytes  * are copied literally during decompression. If length is in the range 129 to 255, the  * following single byte is to be copied 257 ? length (2 to 128) times during decompression.  * A length value of 128 denotes EOD.  *   * The compression achieved by run-length encoding depends on the input data. In  * the best case (all zeros), a compression of approximately 64:1 is achieved for long  * files. The worst case (the hexadecimal sequence 00 alternating with FF) results in  * an expansion of 127:128.  *</pre>  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.6 $  */
end_comment

begin_class
specifier|public
class|class
name|RunLengthDecodeFilter
implements|implements
name|Filter
block|{
specifier|private
specifier|static
specifier|final
name|int
name|RUN_LENGTH_EOD
init|=
literal|128
decl_stmt|;
comment|/**      * Constructor.      */
specifier|public
name|RunLengthDecodeFilter
parameter_list|()
block|{
comment|//default constructor
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|void
name|decode
parameter_list|(
name|InputStream
name|compressedData
parameter_list|,
name|OutputStream
name|result
parameter_list|,
name|COSDictionary
name|options
parameter_list|,
name|int
name|filterIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|dupAmount
init|=
operator|-
literal|1
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|128
index|]
decl_stmt|;
while|while
condition|(
operator|(
name|dupAmount
operator|=
name|compressedData
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
operator|&&
name|dupAmount
operator|!=
name|RUN_LENGTH_EOD
condition|)
block|{
if|if
condition|(
name|dupAmount
operator|<=
literal|127
condition|)
block|{
name|int
name|amountToCopy
init|=
name|dupAmount
operator|+
literal|1
decl_stmt|;
name|int
name|compressedRead
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|amountToCopy
operator|>
literal|0
condition|)
block|{
name|compressedRead
operator|=
name|compressedData
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|amountToCopy
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|compressedRead
argument_list|)
expr_stmt|;
name|amountToCopy
operator|-=
name|compressedRead
expr_stmt|;
block|}
block|}
else|else
block|{
name|int
name|dupByte
init|=
name|compressedData
operator|.
name|read
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|257
operator|-
name|dupAmount
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|.
name|write
argument_list|(
name|dupByte
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|void
name|encode
parameter_list|(
name|InputStream
name|rawData
parameter_list|,
name|OutputStream
name|result
parameter_list|,
name|COSDictionary
name|options
parameter_list|,
name|int
name|filterIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Warning: RunLengthDecodeFilter.encode is not implemented yet, skipping this stream."
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

