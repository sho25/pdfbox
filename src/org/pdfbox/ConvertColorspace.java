begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *   *      http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|pdfbox
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSFloat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSNumber
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|exceptions
operator|.
name|InvalidPasswordException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdfparser
operator|.
name|PDFStreamParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdfwriter
operator|.
name|ContentStreamWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|PDFOperator
import|;
end_import

begin_comment
comment|/**  * This is the main program that simply parses the pdf document and replace   * change a PDF to use a specific colorspace.  *  * @author<a href="ben@benlitchfield.com">Ben Litchfield</a>  * @author Pierre-Yves Landur√© (pierre-yves@landure.org)  * @version $Revision: 1.5 $  */
end_comment

begin_class
specifier|public
class|class
name|ConvertColorspace
block|{
specifier|private
specifier|static
specifier|final
name|String
name|PASSWORD
init|=
literal|"-password"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CONVERSION
init|=
literal|"-equiv"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEST_COLORSPACE
init|=
literal|"-toColorspace"
decl_stmt|;
comment|/**      * private constructor.     */
specifier|private
name|ConvertColorspace
parameter_list|()
block|{
comment|//static class
block|}
comment|/**      * The method that replace RGB colors by CMYK ones.      *      * @param inputFile input file name.      * @param colorEquivalents a dictionnary for the color equivalents.      * @param destColorspace The destination colorspace, currently CMYK is supported.      *      * @throws IOException If there is an error parsing the document.      */
specifier|private
name|void
name|replaceColors
parameter_list|(
name|PDDocument
name|inputFile
parameter_list|,
name|Hashtable
name|colorEquivalents
parameter_list|,
name|String
name|destColorspace
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|destColorspace
operator|.
name|equals
argument_list|(
literal|"CMYK"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error: Unknown colorspace "
operator|+
name|destColorspace
argument_list|)
throw|;
block|}
name|List
name|pagesList
init|=
name|inputFile
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|getAllPages
argument_list|()
decl_stmt|;
name|PDPage
name|currentPage
init|=
literal|null
decl_stmt|;
name|PDFStreamParser
name|parser
init|=
literal|null
decl_stmt|;
name|List
name|pageTokens
init|=
literal|null
decl_stmt|;
name|List
name|editedPageTokens
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|pageCounter
init|=
literal|0
init|;
name|pageCounter
operator|<
name|pagesList
operator|.
name|size
argument_list|()
condition|;
name|pageCounter
operator|++
control|)
comment|// For each document page
block|{
name|currentPage
operator|=
operator|(
name|PDPage
operator|)
name|pagesList
operator|.
name|get
argument_list|(
name|pageCounter
argument_list|)
expr_stmt|;
name|parser
operator|=
operator|new
name|PDFStreamParser
argument_list|(
name|currentPage
operator|.
name|getContents
argument_list|()
operator|.
name|getStream
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|parse
argument_list|()
expr_stmt|;
name|pageTokens
operator|=
name|parser
operator|.
name|getTokens
argument_list|()
expr_stmt|;
name|editedPageTokens
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|counter
init|=
literal|0
init|;
name|counter
operator|<
name|pageTokens
operator|.
name|size
argument_list|()
condition|;
name|counter
operator|++
control|)
comment|// For each page token
block|{
name|Object
name|token
init|=
name|pageTokens
operator|.
name|get
argument_list|(
name|counter
argument_list|)
decl_stmt|;
if|if
condition|(
name|token
operator|instanceof
name|PDFOperator
condition|)
comment|// Test if PDFOperator
block|{
name|PDFOperator
name|tokenOperator
init|=
operator|(
name|PDFOperator
operator|)
name|token
decl_stmt|;
if|if
condition|(
name|tokenOperator
operator|.
name|getOperation
argument_list|()
operator|.
name|equals
argument_list|(
literal|"rg"
argument_list|)
condition|)
comment|// Test if "rg" Operator.
block|{
if|if
condition|(
name|destColorspace
operator|.
name|equals
argument_list|(
literal|"CMYK"
argument_list|)
condition|)
block|{
name|replaceRGBTokensWithCMYKTokens
argument_list|(
name|editedPageTokens
argument_list|,
name|pageTokens
argument_list|,
name|counter
argument_list|,
name|colorEquivalents
argument_list|)
expr_stmt|;
name|editedPageTokens
operator|.
name|add
argument_list|(
name|PDFOperator
operator|.
name|getOperator
argument_list|(
literal|"k"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|tokenOperator
operator|.
name|getOperation
argument_list|()
operator|.
name|equals
argument_list|(
literal|"RG"
argument_list|)
condition|)
comment|// Test if "rg" Operator.
block|{
if|if
condition|(
name|destColorspace
operator|.
name|equals
argument_list|(
literal|"CMYK"
argument_list|)
condition|)
block|{
name|replaceRGBTokensWithCMYKTokens
argument_list|(
name|editedPageTokens
argument_list|,
name|pageTokens
argument_list|,
name|counter
argument_list|,
name|colorEquivalents
argument_list|)
expr_stmt|;
name|editedPageTokens
operator|.
name|add
argument_list|(
name|PDFOperator
operator|.
name|getOperator
argument_list|(
literal|"K"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|tokenOperator
operator|.
name|getOperation
argument_list|()
operator|.
name|equals
argument_list|(
literal|"g"
argument_list|)
condition|)
comment|// Test if "rg" Operator.
block|{
if|if
condition|(
name|destColorspace
operator|.
name|equals
argument_list|(
literal|"CMYK"
argument_list|)
condition|)
block|{
name|replaceGrayTokensWithCMYKTokens
argument_list|(
name|editedPageTokens
argument_list|,
name|pageTokens
argument_list|,
name|counter
argument_list|,
name|colorEquivalents
argument_list|)
expr_stmt|;
name|editedPageTokens
operator|.
name|add
argument_list|(
name|PDFOperator
operator|.
name|getOperator
argument_list|(
literal|"k"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|tokenOperator
operator|.
name|getOperation
argument_list|()
operator|.
name|equals
argument_list|(
literal|"G"
argument_list|)
condition|)
comment|// Test if "rg" Operator.
block|{
if|if
condition|(
name|destColorspace
operator|.
name|equals
argument_list|(
literal|"CMYK"
argument_list|)
condition|)
block|{
name|replaceGrayTokensWithCMYKTokens
argument_list|(
name|editedPageTokens
argument_list|,
name|pageTokens
argument_list|,
name|counter
argument_list|,
name|colorEquivalents
argument_list|)
expr_stmt|;
name|editedPageTokens
operator|.
name|add
argument_list|(
name|PDFOperator
operator|.
name|getOperator
argument_list|(
literal|"K"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|editedPageTokens
operator|.
name|add
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
block|}
else|else
comment|// Test if PDFOperator
block|{
name|editedPageTokens
operator|.
name|add
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
block|}
comment|// For each page token
comment|// We replace original page content by the edited one.
name|PDStream
name|updatedPageContents
init|=
operator|new
name|PDStream
argument_list|(
name|inputFile
argument_list|)
decl_stmt|;
name|ContentStreamWriter
name|contentWriter
init|=
operator|new
name|ContentStreamWriter
argument_list|(
name|updatedPageContents
operator|.
name|createOutputStream
argument_list|()
argument_list|)
decl_stmt|;
name|contentWriter
operator|.
name|writeTokens
argument_list|(
name|editedPageTokens
argument_list|)
expr_stmt|;
name|currentPage
operator|.
name|setContents
argument_list|(
name|updatedPageContents
argument_list|)
expr_stmt|;
block|}
comment|// For each document page
block|}
specifier|private
name|void
name|replaceRGBTokensWithCMYKTokens
parameter_list|(
name|List
name|editedPageTokens
parameter_list|,
name|List
name|pageTokens
parameter_list|,
name|int
name|counter
parameter_list|,
name|Hashtable
name|colorEquivalents
parameter_list|)
block|{
comment|//      Get current RGB color.
name|float
name|red
init|=
operator|(
operator|(
name|COSNumber
operator|)
name|pageTokens
operator|.
name|get
argument_list|(
name|counter
operator|-
literal|3
argument_list|)
operator|)
operator|.
name|floatValue
argument_list|()
decl_stmt|;
name|float
name|green
init|=
operator|(
operator|(
name|COSNumber
operator|)
name|pageTokens
operator|.
name|get
argument_list|(
name|counter
operator|-
literal|2
argument_list|)
operator|)
operator|.
name|floatValue
argument_list|()
decl_stmt|;
name|float
name|blue
init|=
operator|(
operator|(
name|COSNumber
operator|)
name|pageTokens
operator|.
name|get
argument_list|(
name|counter
operator|-
literal|1
argument_list|)
operator|)
operator|.
name|floatValue
argument_list|()
decl_stmt|;
name|int
name|intRed
init|=
name|Math
operator|.
name|round
argument_list|(
name|red
operator|*
literal|255.0f
argument_list|)
decl_stmt|;
name|int
name|intGreen
init|=
name|Math
operator|.
name|round
argument_list|(
name|green
operator|*
literal|255.0f
argument_list|)
decl_stmt|;
name|int
name|intBlue
init|=
name|Math
operator|.
name|round
argument_list|(
name|blue
operator|*
literal|255.0f
argument_list|)
decl_stmt|;
name|ColorSpaceInstance
name|rgbColor
init|=
operator|new
name|ColorSpaceInstance
argument_list|()
decl_stmt|;
name|rgbColor
operator|.
name|colorspace
operator|=
literal|"RGB"
expr_stmt|;
name|rgbColor
operator|.
name|colorspaceValues
operator|=
operator|new
name|int
index|[]
block|{
name|intRed
block|,
name|intGreen
block|,
name|intBlue
block|}
expr_stmt|;
name|ColorSpaceInstance
name|cmykColor
init|=
operator|(
name|ColorSpaceInstance
operator|)
name|colorEquivalents
operator|.
name|get
argument_list|(
name|rgbColor
argument_list|)
decl_stmt|;
name|float
index|[]
name|cmyk
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cmykColor
operator|!=
literal|null
condition|)
block|{
name|cmyk
operator|=
operator|new
name|float
index|[]
block|{
name|cmykColor
operator|.
name|colorspaceValues
index|[
literal|0
index|]
operator|/
literal|100.0f
block|,
name|cmykColor
operator|.
name|colorspaceValues
index|[
literal|1
index|]
operator|/
literal|100.0f
block|,
name|cmykColor
operator|.
name|colorspaceValues
index|[
literal|2
index|]
operator|/
literal|100.0f
block|,
name|cmykColor
operator|.
name|colorspaceValues
index|[
literal|3
index|]
operator|/
literal|100.0f
block|}
expr_stmt|;
block|}
else|else
block|{
name|cmyk
operator|=
name|convertRGBToCMYK
argument_list|(
name|red
argument_list|,
name|green
argument_list|,
name|blue
argument_list|)
expr_stmt|;
block|}
comment|//remove the RGB components that are already part of the editedPageTokens list
name|editedPageTokens
operator|.
name|remove
argument_list|(
name|editedPageTokens
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|editedPageTokens
operator|.
name|remove
argument_list|(
name|editedPageTokens
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|editedPageTokens
operator|.
name|remove
argument_list|(
name|editedPageTokens
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// Add the new CMYK color
name|editedPageTokens
operator|.
name|add
argument_list|(
operator|new
name|COSFloat
argument_list|(
name|cmyk
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|editedPageTokens
operator|.
name|add
argument_list|(
operator|new
name|COSFloat
argument_list|(
name|cmyk
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|editedPageTokens
operator|.
name|add
argument_list|(
operator|new
name|COSFloat
argument_list|(
name|cmyk
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|editedPageTokens
operator|.
name|add
argument_list|(
operator|new
name|COSFloat
argument_list|(
name|cmyk
index|[
literal|3
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|replaceGrayTokensWithCMYKTokens
parameter_list|(
name|List
name|editedPageTokens
parameter_list|,
name|List
name|pageTokens
parameter_list|,
name|int
name|counter
parameter_list|,
name|Hashtable
name|colorEquivalents
parameter_list|)
block|{
comment|//      Get current RGB color.
name|float
name|gray
init|=
operator|(
operator|(
name|COSNumber
operator|)
name|pageTokens
operator|.
name|get
argument_list|(
name|counter
operator|-
literal|1
argument_list|)
operator|)
operator|.
name|floatValue
argument_list|()
decl_stmt|;
name|ColorSpaceInstance
name|grayColor
init|=
operator|new
name|ColorSpaceInstance
argument_list|()
decl_stmt|;
name|grayColor
operator|.
name|colorspace
operator|=
literal|"Grayscale"
expr_stmt|;
name|grayColor
operator|.
name|colorspaceValues
operator|=
operator|new
name|int
index|[]
block|{
name|Math
operator|.
name|round
argument_list|(
name|gray
operator|*
literal|100
argument_list|)
block|}
expr_stmt|;
name|ColorSpaceInstance
name|cmykColor
init|=
operator|(
name|ColorSpaceInstance
operator|)
name|colorEquivalents
operator|.
name|get
argument_list|(
name|grayColor
argument_list|)
decl_stmt|;
name|float
index|[]
name|cmyk
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cmykColor
operator|!=
literal|null
condition|)
block|{
name|cmyk
operator|=
operator|new
name|float
index|[]
block|{
name|cmykColor
operator|.
name|colorspaceValues
index|[
literal|0
index|]
operator|/
literal|100.0f
block|,
name|cmykColor
operator|.
name|colorspaceValues
index|[
literal|1
index|]
operator|/
literal|100.0f
block|,
name|cmykColor
operator|.
name|colorspaceValues
index|[
literal|2
index|]
operator|/
literal|100.0f
block|,
name|cmykColor
operator|.
name|colorspaceValues
index|[
literal|3
index|]
operator|/
literal|100.0f
block|}
expr_stmt|;
block|}
else|else
block|{
name|cmyk
operator|=
operator|new
name|float
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
name|gray
block|}
expr_stmt|;
block|}
comment|//remove the Gray components that are already part of the editedPageTokens list
name|editedPageTokens
operator|.
name|remove
argument_list|(
name|editedPageTokens
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// Add the new CMYK color
name|editedPageTokens
operator|.
name|add
argument_list|(
operator|new
name|COSFloat
argument_list|(
name|cmyk
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|editedPageTokens
operator|.
name|add
argument_list|(
operator|new
name|COSFloat
argument_list|(
name|cmyk
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|editedPageTokens
operator|.
name|add
argument_list|(
operator|new
name|COSFloat
argument_list|(
name|cmyk
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|editedPageTokens
operator|.
name|add
argument_list|(
operator|new
name|COSFloat
argument_list|(
name|cmyk
index|[
literal|3
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|float
index|[]
name|convertRGBToCMYK
parameter_list|(
name|float
name|red
parameter_list|,
name|float
name|green
parameter_list|,
name|float
name|blue
parameter_list|)
block|{
comment|//
comment|// RGB->CMYK from From
comment|// http://en.wikipedia.org/wiki/Talk:CMYK_color_model
comment|//
name|float
name|c
init|=
literal|1.0f
operator|-
name|red
decl_stmt|;
name|float
name|m
init|=
literal|1.0f
operator|-
name|green
decl_stmt|;
name|float
name|y
init|=
literal|1.0f
operator|-
name|blue
decl_stmt|;
name|float
name|k
init|=
literal|1.0f
decl_stmt|;
name|k
operator|=
name|Math
operator|.
name|min
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|c
argument_list|,
name|k
argument_list|)
argument_list|,
name|m
argument_list|)
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|c
operator|=
operator|(
name|c
operator|-
name|k
operator|)
operator|/
operator|(
literal|1
operator|-
name|k
operator|)
expr_stmt|;
name|m
operator|=
operator|(
name|m
operator|-
name|k
operator|)
operator|/
operator|(
literal|1
operator|-
name|k
operator|)
expr_stmt|;
name|y
operator|=
operator|(
name|y
operator|-
name|k
operator|)
operator|/
operator|(
literal|1
operator|-
name|k
operator|)
expr_stmt|;
return|return
operator|new
name|float
index|[]
block|{
name|c
block|,
name|m
block|,
name|y
block|,
name|k
block|}
return|;
block|}
specifier|private
specifier|static
name|int
index|[]
name|stringToIntArray
parameter_list|(
name|String
name|string
parameter_list|)
block|{
name|String
index|[]
name|ints
init|=
name|string
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|int
index|[]
name|retval
init|=
operator|new
name|int
index|[
name|ints
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ints
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|retval
index|[
name|i
index|]
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|ints
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * Infamous main method.      *      * @param args Command line arguments, should be one and a reference to a file.      *      * @throws Exception If there is an error parsing the document.      */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|password
init|=
literal|""
decl_stmt|;
name|String
name|inputFile
init|=
literal|null
decl_stmt|;
name|String
name|outputFile
init|=
literal|null
decl_stmt|;
name|String
name|destColorspace
init|=
literal|"CMYK"
decl_stmt|;
name|Pattern
name|colorEquivalentPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(.*):\\((.*)\\)"
operator|+
literal|"=(.*):\\((.*)\\)$"
argument_list|)
decl_stmt|;
name|Matcher
name|colorEquivalentMatcher
init|=
literal|null
decl_stmt|;
comment|//key= value=java.awt.Color
name|Hashtable
name|colorEquivalents
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|PASSWORD
argument_list|)
condition|)
block|{
name|i
operator|++
expr_stmt|;
if|if
condition|(
name|i
operator|>=
name|args
operator|.
name|length
condition|)
block|{
name|usage
argument_list|()
expr_stmt|;
block|}
name|password
operator|=
name|args
index|[
name|i
index|]
expr_stmt|;
block|}
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|DEST_COLORSPACE
argument_list|)
condition|)
block|{
name|i
operator|++
expr_stmt|;
if|if
condition|(
name|i
operator|>=
name|args
operator|.
name|length
condition|)
block|{
name|usage
argument_list|()
expr_stmt|;
block|}
name|destColorspace
operator|=
name|args
index|[
name|i
index|]
expr_stmt|;
block|}
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|CONVERSION
argument_list|)
condition|)
block|{
name|i
operator|++
expr_stmt|;
if|if
condition|(
name|i
operator|>=
name|args
operator|.
name|length
condition|)
block|{
name|usage
argument_list|()
expr_stmt|;
block|}
name|colorEquivalentMatcher
operator|=
name|colorEquivalentPattern
operator|.
name|matcher
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|colorEquivalentMatcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|usage
argument_list|()
expr_stmt|;
block|}
name|String
name|srcColorSpace
init|=
name|colorEquivalentMatcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|srcColorvalues
init|=
name|colorEquivalentMatcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|String
name|destColorSpace
init|=
name|colorEquivalentMatcher
operator|.
name|group
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|String
name|destColorvalues
init|=
name|colorEquivalentMatcher
operator|.
name|group
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|ConvertColorspace
operator|.
name|ColorSpaceInstance
name|source
init|=
operator|new
name|ColorSpaceInstance
argument_list|()
decl_stmt|;
name|source
operator|.
name|colorspace
operator|=
name|srcColorSpace
expr_stmt|;
name|source
operator|.
name|colorspaceValues
operator|=
name|stringToIntArray
argument_list|(
name|srcColorvalues
argument_list|)
expr_stmt|;
name|ColorSpaceInstance
name|dest
init|=
operator|new
name|ColorSpaceInstance
argument_list|()
decl_stmt|;
name|dest
operator|.
name|colorspace
operator|=
name|destColorSpace
expr_stmt|;
name|dest
operator|.
name|colorspaceValues
operator|=
name|stringToIntArray
argument_list|(
name|destColorvalues
argument_list|)
expr_stmt|;
name|colorEquivalents
operator|.
name|put
argument_list|(
name|source
argument_list|,
name|dest
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|inputFile
operator|==
literal|null
condition|)
block|{
name|inputFile
operator|=
name|args
index|[
name|i
index|]
expr_stmt|;
block|}
else|else
block|{
name|outputFile
operator|=
name|args
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|inputFile
operator|==
literal|null
condition|)
block|{
name|usage
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|outputFile
operator|==
literal|null
operator|||
name|outputFile
operator|.
name|equals
argument_list|(
name|inputFile
argument_list|)
condition|)
block|{
name|usage
argument_list|()
expr_stmt|;
block|}
name|PDDocument
name|doc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|doc
operator|=
name|PDDocument
operator|.
name|load
argument_list|(
name|inputFile
argument_list|)
expr_stmt|;
if|if
condition|(
name|doc
operator|.
name|isEncrypted
argument_list|()
condition|)
block|{
try|try
block|{
name|doc
operator|.
name|decrypt
argument_list|(
name|password
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidPasswordException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|password
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
comment|//they supplied the wrong password
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error: The supplied password is incorrect."
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//they didn't suppply a password and the default of "" was wrong.
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error: The document is encrypted."
argument_list|)
expr_stmt|;
name|usage
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|ConvertColorspace
name|converter
init|=
operator|new
name|ConvertColorspace
argument_list|()
decl_stmt|;
name|converter
operator|.
name|replaceColors
argument_list|(
name|doc
argument_list|,
name|colorEquivalents
argument_list|,
name|destColorspace
argument_list|)
expr_stmt|;
name|doc
operator|.
name|save
argument_list|(
name|outputFile
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
block|{
name|doc
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * This will print the usage requirements and exit.      */
specifier|private
specifier|static
name|void
name|usage
parameter_list|()
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java org.pdfbox.ConvertColorspace [OPTIONS]<PDF Input file> "
operator|+
literal|"<PDF Output File>\n"
operator|+
literal|"  -password<password>                Password to decrypt document\n"
operator|+
literal|"  -equiv<color equivalent>            Color equivalent to use for conversion.\n"
operator|+
literal|"  -destColorspace<color equivalent>   The destination colorspace, CMYK is the only '"
operator|+
literal|"supported colorspace."
operator|+
literal|"  \n"
operator|+
literal|" The equiv format is :<source colorspace>:(colorspace value)=<dest colorspace>:(colorspace value)"
operator|+
literal|" This option can be used as many times as necessary\n"
operator|+
literal|" The supported equiv colorspaces are RGB and CMYK.\n"
operator|+
literal|" RGB color values are integers between 0 and 255"
operator|+
literal|" CMYK color values are integer between 0 and 100.\n"
operator|+
literal|" Example: java org.pdfbox.ConvertColorspace -equiv RGB:(255,0,0)=CMYK(0,99,100,0) input.pdf output.pdf\n"
operator|+
literal|"<PDF Input file>             The PDF document to use\n"
operator|+
literal|"<PDF Output file>            The PDF file to write the result to. Must be different of input file\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**      *       *      */
specifier|private
specifier|static
class|class
name|ColorSpaceInstance
block|{
specifier|private
name|String
name|colorspace
init|=
literal|null
decl_stmt|;
specifier|private
name|int
index|[]
name|colorspaceValues
init|=
literal|null
decl_stmt|;
comment|/**          * {@inheritDoc}          */
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|code
init|=
name|colorspace
operator|.
name|hashCode
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|colorspaceValues
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|code
operator|+=
name|colorspaceValues
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
name|code
return|;
block|}
comment|/**          * {@inheritDoc}          */
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|boolean
name|retval
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|ColorSpaceInstance
condition|)
block|{
name|ColorSpaceInstance
name|other
init|=
operator|(
name|ColorSpaceInstance
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|colorspace
operator|.
name|equals
argument_list|(
name|other
operator|.
name|colorspace
argument_list|)
operator|&&
name|colorspaceValues
operator|.
name|length
operator|==
name|other
operator|.
name|colorspaceValues
operator|.
name|length
condition|)
block|{
name|retval
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|colorspaceValues
operator|.
name|length
operator|&&
name|retval
condition|;
name|i
operator|++
control|)
block|{
name|retval
operator|=
name|retval
operator|&&
name|colorspaceValues
index|[
name|i
index|]
operator|==
name|other
operator|.
name|colorspaceValues
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
block|}
return|return
name|retval
return|;
block|}
block|}
block|}
end_class

end_unit

