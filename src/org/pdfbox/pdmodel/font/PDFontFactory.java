begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright (c) 2003, www.pdfbox.org  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are met:  *  * 1. Redistributions of source code must retain the above copyright notice,  *    this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright notice,  *    this list of conditions and the following disclaimer in the documentation  *    and/or other materials provided with the distribution.  * 3. Neither the name of pdfbox; nor the names of its  *    contributors may be used to endorse or promote products derived from this  *    software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * http://www.pdfbox.org  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_comment
comment|/**  * This will create the correct type of font based on information in the dictionary.  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.6 $  */
end_comment

begin_class
specifier|public
class|class
name|PDFontFactory
block|{
comment|/**      * private constructor, should only use static methods in this class.      */
specifier|private
name|PDFontFactory
parameter_list|()
block|{     }
comment|/**      * Create a font from the dictionary.  Use the fontCache to get the existing      * object instead of creating it.      *       * @param dic The font dictionary.      * @param fontCache The font cache.      * @return The PDModel object for the cos dictionary.      * @throws IOException If there is an error creating the font.      */
specifier|public
specifier|static
name|PDFont
name|createFont
parameter_list|(
name|COSDictionary
name|dic
parameter_list|,
name|Map
name|fontCache
parameter_list|)
throws|throws
name|IOException
block|{
name|PDFont
name|font
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|fontCache
operator|!=
literal|null
condition|)
block|{
name|font
operator|=
operator|(
name|PDFont
operator|)
name|fontCache
operator|.
name|get
argument_list|(
name|dic
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|font
operator|==
literal|null
condition|)
block|{
name|font
operator|=
name|createFont
argument_list|(
name|dic
argument_list|)
expr_stmt|;
if|if
condition|(
name|fontCache
operator|!=
literal|null
condition|)
block|{
name|fontCache
operator|.
name|put
argument_list|(
name|dic
argument_list|,
name|font
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|font
return|;
block|}
comment|/**      * This will create the correct font based on information in the dictionary.      *      * @param dic The populated dictionary.      *      * @return The corrent implementation for the font.      *      * @throws IOException If the dictionary is not valid.      */
specifier|public
specifier|static
name|PDFont
name|createFont
parameter_list|(
name|COSDictionary
name|dic
parameter_list|)
throws|throws
name|IOException
block|{
name|PDFont
name|retval
init|=
literal|null
decl_stmt|;
name|COSName
name|type
init|=
operator|(
name|COSName
operator|)
name|dic
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|type
operator|.
name|equals
argument_list|(
name|COSName
operator|.
name|FONT
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot create font if /Type is not /Font.  Actual="
operator|+
name|type
argument_list|)
throw|;
block|}
name|COSName
name|subType
init|=
operator|(
name|COSName
operator|)
name|dic
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|subType
operator|.
name|equals
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"Type1"
argument_list|)
argument_list|)
condition|)
block|{
name|retval
operator|=
operator|new
name|PDType1Font
argument_list|(
name|dic
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|subType
operator|.
name|equals
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"MMType1"
argument_list|)
argument_list|)
condition|)
block|{
name|retval
operator|=
operator|new
name|PDMMType1Font
argument_list|(
name|dic
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|subType
operator|.
name|equals
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"TrueType"
argument_list|)
argument_list|)
condition|)
block|{
name|retval
operator|=
operator|new
name|PDTrueTypeFont
argument_list|(
name|dic
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|subType
operator|.
name|equals
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"Type3"
argument_list|)
argument_list|)
condition|)
block|{
name|retval
operator|=
operator|new
name|PDType3Font
argument_list|(
name|dic
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|subType
operator|.
name|equals
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"Type0"
argument_list|)
argument_list|)
condition|)
block|{
name|retval
operator|=
operator|new
name|PDType0Font
argument_list|(
name|dic
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|subType
operator|.
name|equals
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"CIDFontType0"
argument_list|)
argument_list|)
condition|)
block|{
name|retval
operator|=
operator|new
name|PDCIDFontType0Font
argument_list|(
name|dic
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|subType
operator|.
name|equals
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"CIDFontType2"
argument_list|)
argument_list|)
condition|)
block|{
name|retval
operator|=
operator|new
name|PDCIDFontType2Font
argument_list|(
name|dic
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown font subtype="
operator|+
name|subType
argument_list|)
throw|;
block|}
return|return
name|retval
return|;
block|}
block|}
end_class

end_unit

