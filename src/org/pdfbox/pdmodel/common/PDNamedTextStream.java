begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *   *      http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
package|;
end_package

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_comment
comment|/**  * A named text stream is a combination of a name and a PDTextStream object.  This  * is used in name trees.  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.3 $  */
end_comment

begin_class
specifier|public
class|class
name|PDNamedTextStream
implements|implements
name|DualCOSObjectable
block|{
specifier|private
name|COSName
name|streamName
decl_stmt|;
specifier|private
name|PDTextStream
name|stream
decl_stmt|;
comment|/**      * Constructor.      */
specifier|public
name|PDNamedTextStream
parameter_list|()
block|{
comment|//default constructor
block|}
comment|/**      * Constructor.      *      * @param name The name of the stream.      * @param str The stream.      */
specifier|public
name|PDNamedTextStream
parameter_list|(
name|COSName
name|name
parameter_list|,
name|COSBase
name|str
parameter_list|)
block|{
name|streamName
operator|=
name|name
expr_stmt|;
name|stream
operator|=
name|PDTextStream
operator|.
name|createTextStream
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
comment|/**      * The name of the named text stream.      *      * @return The stream name.      */
specifier|public
name|String
name|getName
parameter_list|()
block|{
name|String
name|name
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|streamName
operator|!=
literal|null
condition|)
block|{
name|name
operator|=
name|streamName
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
return|return
name|name
return|;
block|}
comment|/**      * This will set the name of the named text stream.      *      * @param name The name of the named text stream.      */
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|streamName
operator|=
name|COSName
operator|.
name|getPDFName
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the stream.      *      * @return The stream associated with this name.      */
specifier|public
name|PDTextStream
name|getStream
parameter_list|()
block|{
return|return
name|stream
return|;
block|}
comment|/**      * This will set the stream.      *      * @param str The stream associated with this name.      */
specifier|public
name|void
name|setStream
parameter_list|(
name|PDTextStream
name|str
parameter_list|)
block|{
name|stream
operator|=
name|str
expr_stmt|;
block|}
comment|/**      * Convert this standard java object to a COS object.      *      * @return The cos object that matches this Java object.      */
specifier|public
name|COSBase
name|getFirstCOSObject
parameter_list|()
block|{
return|return
name|streamName
return|;
block|}
comment|/**      * Convert this standard java object to a COS object.      *      * @return The cos object that matches this Java object.      */
specifier|public
name|COSBase
name|getSecondCOSObject
parameter_list|()
block|{
name|COSBase
name|retval
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|stream
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
name|stream
operator|.
name|getCOSObject
argument_list|()
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
block|}
end_class

end_unit

