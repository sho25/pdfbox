begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *   *      http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|function
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSFloat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|COSArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDStream
import|;
end_import

begin_comment
comment|/**  * This class represents a type 0 function in a PDF document.  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.2 $  */
end_comment

begin_class
specifier|public
class|class
name|PDFunctionType0
extends|extends
name|PDStreamFunction
block|{
comment|/**      * Constructor to create a new blank type 0 function.      *       * @param doc The document that the function will be part of.      */
specifier|protected
name|PDFunctionType0
parameter_list|(
name|PDDocument
name|doc
parameter_list|)
block|{
name|super
argument_list|(
name|doc
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor.      *      * @param functionDictionary The prepopulated function dictionary.      */
specifier|public
name|PDFunctionType0
parameter_list|(
name|PDStream
name|functionDictionary
parameter_list|)
block|{
name|super
argument_list|(
name|functionDictionary
argument_list|)
expr_stmt|;
block|}
comment|/**      * The "Size" entry, which is the number of samples in       * each input dimension of the sample table.      *       * @return A List of java.lang.Integer objects.      */
specifier|public
name|List
name|getNumberOfSamples
parameter_list|()
block|{
name|List
name|retval
init|=
literal|null
decl_stmt|;
name|COSArray
name|size
init|=
operator|(
name|COSArray
operator|)
name|getCOSStream
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
literal|"Size"
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
name|COSArrayList
operator|.
name|convertIntegerCOSArrayToList
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * Set the samples data, the "Size" entry in the type 0 function.      *       * @param samples The samples data.      */
specifier|public
name|void
name|setNumberOfSamples
parameter_list|(
name|List
name|samples
parameter_list|)
block|{
name|getCOSStream
argument_list|()
operator|.
name|setItem
argument_list|(
literal|"Size"
argument_list|,
name|COSArrayList
operator|.
name|converterToCOSArray
argument_list|(
name|samples
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the number of bits that the output value will take up.  Valid values      * are 1,2,4,8,12,16,24,32.      *       * @return Number of bits for each output value.      */
specifier|public
name|int
name|getBitsPerSample
parameter_list|()
block|{
return|return
name|getCOSStream
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"BitsPerSample"
argument_list|)
return|;
block|}
comment|/**      * Set the number of bits that the output value will take up.  Valid values      * are 1,2,4,8,12,16,24,32.      *       * @param bps The number of bits for each output value.      */
specifier|public
name|void
name|setBitsPerSample
parameter_list|(
name|int
name|bps
parameter_list|)
block|{
name|getCOSStream
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"BitsPerSample"
argument_list|,
name|bps
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the encode for the input parameter.      *       * @param paramNum The function parameter number.      *       * @return The encode parameter range or null if none is set.      */
specifier|public
name|PDRange
name|getEncodeForParameter
parameter_list|(
name|int
name|paramNum
parameter_list|)
block|{
name|PDRange
name|retval
init|=
literal|null
decl_stmt|;
name|COSArray
name|encode
init|=
operator|(
name|COSArray
operator|)
name|getCOSStream
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
literal|"Encode"
argument_list|)
decl_stmt|;
if|if
condition|(
name|encode
operator|!=
literal|null
operator|&&
name|encode
operator|.
name|size
argument_list|()
operator|>=
name|paramNum
operator|*
literal|2
operator|+
literal|1
condition|)
block|{
name|retval
operator|=
operator|new
name|PDRange
argument_list|(
name|encode
argument_list|,
name|paramNum
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * Set the encode range for the param number.      *       * @param paramNum The parameter number to set then encode values.      *       * @param range The range value to set.      */
specifier|public
name|void
name|setEncodeForParameter
parameter_list|(
name|int
name|paramNum
parameter_list|,
name|PDRange
name|range
parameter_list|)
block|{
name|COSArray
name|encode
init|=
operator|(
name|COSArray
operator|)
name|getCOSStream
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
literal|"Encode"
argument_list|)
decl_stmt|;
if|if
condition|(
name|encode
operator|==
literal|null
condition|)
block|{
name|encode
operator|=
operator|new
name|COSArray
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|encode
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
name|paramNum
operator|*
literal|2
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|encode
operator|.
name|add
argument_list|(
name|COSNull
operator|.
name|NULL
argument_list|)
expr_stmt|;
block|}
name|encode
operator|.
name|set
argument_list|(
name|paramNum
operator|*
literal|2
argument_list|,
operator|new
name|COSFloat
argument_list|(
name|range
operator|.
name|getMin
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|encode
operator|.
name|set
argument_list|(
name|paramNum
operator|*
literal|2
operator|+
literal|1
argument_list|,
operator|new
name|COSFloat
argument_list|(
name|range
operator|.
name|getMax
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the decode for the input parameter.      *       * @param paramNum The function parameter number.      *       * @return The decode parameter range or null if none is set.      */
specifier|public
name|PDRange
name|getDecodeForParameter
parameter_list|(
name|int
name|paramNum
parameter_list|)
block|{
name|PDRange
name|retval
init|=
literal|null
decl_stmt|;
name|COSArray
name|encode
init|=
operator|(
name|COSArray
operator|)
name|getCOSStream
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
literal|"Decode"
argument_list|)
decl_stmt|;
if|if
condition|(
name|encode
operator|!=
literal|null
operator|&&
name|encode
operator|.
name|size
argument_list|()
operator|>=
name|paramNum
operator|*
literal|2
operator|+
literal|1
condition|)
block|{
name|retval
operator|=
operator|new
name|PDRange
argument_list|(
name|encode
argument_list|,
name|paramNum
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * Set the decode range for the param number.      *       * @param paramNum The parameter number to set then decode values.      *       * @param range The range value to set.      */
specifier|public
name|void
name|setDecodeForParameter
parameter_list|(
name|int
name|paramNum
parameter_list|,
name|PDRange
name|range
parameter_list|)
block|{
name|COSArray
name|encode
init|=
operator|(
name|COSArray
operator|)
name|getCOSStream
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
literal|"Decode"
argument_list|)
decl_stmt|;
if|if
condition|(
name|encode
operator|==
literal|null
condition|)
block|{
name|encode
operator|=
operator|new
name|COSArray
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|encode
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
name|paramNum
operator|*
literal|2
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|encode
operator|.
name|add
argument_list|(
name|COSNull
operator|.
name|NULL
argument_list|)
expr_stmt|;
block|}
name|encode
operator|.
name|set
argument_list|(
name|paramNum
operator|*
literal|2
argument_list|,
operator|new
name|COSFloat
argument_list|(
name|range
operator|.
name|getMin
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|encode
operator|.
name|set
argument_list|(
name|paramNum
operator|*
literal|2
operator|+
literal|1
argument_list|,
operator|new
name|COSFloat
argument_list|(
name|range
operator|.
name|getMax
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

