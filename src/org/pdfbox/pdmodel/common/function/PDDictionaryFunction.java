begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright (c) 2006, www.pdfbox.org  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are met:  *  * 1. Redistributions of source code must retain the above copyright notice,  *    this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright notice,  *    this list of conditions and the following disclaimer in the documentation  *    and/or other materials provided with the distribution.  * 3. Neither the name of pdfbox; nor the names of its  *    contributors may be used to endorse or promote products derived from this  *    software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * http://www.pdfbox.org  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|function
package|;
end_package

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSFloat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDRange
import|;
end_import

begin_comment
comment|/**  * This class represents a function in a PDF document.  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.3 $  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|PDDictionaryFunction
extends|extends
name|PDFunction
block|{
specifier|private
name|COSDictionary
name|function
init|=
literal|null
decl_stmt|;
comment|/**      * Constructor to create a new blank function, should only be called by       * subclasses.      *       *  @param functionType An integer describing the function type, only 0,2,3,4      *  are defined by the PDF sepc.      */
specifier|protected
name|PDDictionaryFunction
parameter_list|(
name|int
name|functionType
parameter_list|)
block|{
name|function
operator|=
operator|new
name|COSDictionary
argument_list|()
expr_stmt|;
name|function
operator|.
name|setInt
argument_list|(
literal|"FunctionType"
argument_list|,
name|functionType
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor.      *      * @param functionDictionary The prepopulated function dictionary.      */
specifier|public
name|PDDictionaryFunction
parameter_list|(
name|COSDictionary
name|functionDictionary
parameter_list|)
block|{
name|function
operator|=
name|functionDictionary
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|COSBase
name|getCOSObject
parameter_list|()
block|{
return|return
name|function
return|;
block|}
comment|/**      * Get the underlying cos dictionary.      *       * @return The underlying cos dictionary.      */
specifier|public
name|COSDictionary
name|getCOSDictionary
parameter_list|()
block|{
return|return
name|function
return|;
block|}
specifier|private
name|COSArray
name|getRangeArray
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|int
name|n
parameter_list|)
block|{
name|COSArray
name|rangeArray
init|=
operator|(
name|COSArray
operator|)
name|function
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"Range"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|rangeArray
operator|==
literal|null
condition|)
block|{
name|rangeArray
operator|=
operator|new
name|COSArray
argument_list|()
expr_stmt|;
name|function
operator|.
name|setItem
argument_list|(
name|fieldName
argument_list|,
name|rangeArray
argument_list|)
expr_stmt|;
while|while
condition|(
name|rangeArray
operator|.
name|size
argument_list|()
operator|<
name|n
operator|*
literal|2
condition|)
block|{
name|rangeArray
operator|.
name|add
argument_list|(
operator|new
name|COSFloat
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|rangeArray
operator|.
name|add
argument_list|(
operator|new
name|COSFloat
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rangeArray
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|int
name|getNumberOfOutputParameters
parameter_list|()
block|{
name|COSArray
name|array
init|=
name|getRangeArray
argument_list|(
literal|"Range"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
name|array
operator|.
name|size
argument_list|()
operator|/
literal|2
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|PDRange
name|getRangeForOutput
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|COSArray
name|rangeArray
init|=
name|getRangeArray
argument_list|(
literal|"Range"
argument_list|,
name|n
argument_list|)
decl_stmt|;
return|return
operator|new
name|PDRange
argument_list|(
name|rangeArray
argument_list|,
name|n
argument_list|)
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|void
name|setRangeForOutput
parameter_list|(
name|PDRange
name|range
parameter_list|,
name|int
name|n
parameter_list|)
block|{
name|COSArray
name|rangeArray
init|=
name|getRangeArray
argument_list|(
literal|"Range"
argument_list|,
name|n
argument_list|)
decl_stmt|;
name|rangeArray
operator|.
name|set
argument_list|(
name|n
operator|*
literal|2
argument_list|,
operator|new
name|COSFloat
argument_list|(
name|range
operator|.
name|getMin
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rangeArray
operator|.
name|set
argument_list|(
name|n
operator|*
literal|2
operator|+
literal|1
argument_list|,
operator|new
name|COSFloat
argument_list|(
name|range
operator|.
name|getMax
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|int
name|getNumberOfInputParameters
parameter_list|()
block|{
name|COSArray
name|array
init|=
name|getRangeArray
argument_list|(
literal|"Domain"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
name|array
operator|.
name|size
argument_list|()
operator|/
literal|2
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|PDRange
name|getDomainForInput
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|COSArray
name|rangeArray
init|=
name|getRangeArray
argument_list|(
literal|"Domain"
argument_list|,
name|n
argument_list|)
decl_stmt|;
return|return
operator|new
name|PDRange
argument_list|(
name|rangeArray
argument_list|,
name|n
argument_list|)
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|void
name|setDomainForInput
parameter_list|(
name|PDRange
name|range
parameter_list|,
name|int
name|n
parameter_list|)
block|{
name|COSArray
name|rangeArray
init|=
name|getRangeArray
argument_list|(
literal|"Domain"
argument_list|,
name|n
argument_list|)
decl_stmt|;
name|rangeArray
operator|.
name|set
argument_list|(
name|n
operator|*
literal|2
argument_list|,
operator|new
name|COSFloat
argument_list|(
name|range
operator|.
name|getMin
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rangeArray
operator|.
name|set
argument_list|(
name|n
operator|*
literal|2
operator|+
literal|1
argument_list|,
operator|new
name|COSFloat
argument_list|(
name|range
operator|.
name|getMax
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

