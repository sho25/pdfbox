begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright (c) 2005, www.pdfbox.org  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are met:  *  * 1. Redistributions of source code must retain the above copyright notice,  *    this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright notice,  *    this list of conditions and the following disclaimer in the documentation  *    and/or other materials provided with the distribution.  * 3. Neither the name of pdfbox; nor the names of its  *    contributors may be used to endorse or promote products derived from this  *    software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * http://www.pdfbox.org  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jempbox
operator|.
name|xmp
operator|.
name|XMPMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_comment
comment|/**  * This class represents metadata for various objects in a PDF document.  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.3 $  */
end_comment

begin_class
specifier|public
class|class
name|PDMetadata
extends|extends
name|PDStream
block|{
comment|/**      * This will create a new PDMetadata object.      *       * @param document The document that the stream will be part of.      */
specifier|public
name|PDMetadata
parameter_list|(
name|PDDocument
name|document
parameter_list|)
block|{
name|super
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|getStream
argument_list|()
operator|.
name|setName
argument_list|(
literal|"Type"
argument_list|,
literal|"Metadata"
argument_list|)
expr_stmt|;
name|getStream
argument_list|()
operator|.
name|setName
argument_list|(
literal|"Subtype"
argument_list|,
literal|"XML"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor.  Reads all data from the input stream and embeds it into the      * document, this will close the InputStream.      *      * @param doc The document that will hold the stream.      * @param str The stream parameter.      * @param filtered True if the stream already has a filter applied.      * @throws IOException If there is an error creating the stream in the document.      */
specifier|public
name|PDMetadata
parameter_list|(
name|PDDocument
name|doc
parameter_list|,
name|InputStream
name|str
parameter_list|,
name|boolean
name|filtered
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|doc
argument_list|,
name|str
argument_list|,
name|filtered
argument_list|)
expr_stmt|;
name|getStream
argument_list|()
operator|.
name|setName
argument_list|(
literal|"Type"
argument_list|,
literal|"Metadata"
argument_list|)
expr_stmt|;
name|getStream
argument_list|()
operator|.
name|setName
argument_list|(
literal|"Subtype"
argument_list|,
literal|"XML"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor.      *      * @param str The stream parameter.      */
specifier|public
name|PDMetadata
parameter_list|(
name|COSStream
name|str
parameter_list|)
block|{
name|super
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
comment|/**      * Extract the XMP metadata and create and build an in memory object.      * To persist changes back to the PDF you must call importXMPMetadata.      *       * @return A parsed XMP object.      *       * @throws IOException If there is an error parsing the XMP data.      */
specifier|public
name|XMPMetadata
name|exportXMPMetadata
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|XMPMetadata
operator|.
name|load
argument_list|(
name|createInputStream
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Import an XMP stream into the PDF document.      *       * @param xmp The XMP data.      *        * @throws IOException If there is an error generating the XML document.      * @throws TransformerException If there is an error generating the XML document.      */
specifier|public
name|void
name|importXMPMetadata
parameter_list|(
name|XMPMetadata
name|xmp
parameter_list|)
throws|throws
name|IOException
throws|,
name|TransformerException
block|{
name|xmp
operator|.
name|save
argument_list|(
name|createOutputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

