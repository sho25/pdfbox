begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright (c) 2004-2005, www.pdfbox.org  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are met:  *  * 1. Redistributions of source code must retain the above copyright notice,  *    this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright notice,  *    this list of conditions and the following disclaimer in the documentation  *    and/or other materials provided with the distribution.  * 3. Neither the name of pdfbox; nor the names of its  *    contributors may be used to endorse or promote products derived from this  *    software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * http://www.pdfbox.org  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
package|;
end_package

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_comment
comment|/**  * A PDStream represents a stream in a PDF document.  Streams are tied to a single  * PDF document.  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.3 $  */
end_comment

begin_class
specifier|public
class|class
name|PDObjectStream
extends|extends
name|PDStream
block|{
comment|/**      * Constructor.      *      * @param str The stream parameter.      */
specifier|public
name|PDObjectStream
parameter_list|(
name|COSStream
name|str
parameter_list|)
block|{
name|super
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will create a new PDStream object.      *       * @param document The document that the stream will be part of.      * @return A new stream object.      */
specifier|public
specifier|static
name|PDObjectStream
name|createStream
parameter_list|(
name|PDDocument
name|document
parameter_list|)
block|{
name|COSStream
name|cosStream
init|=
operator|new
name|COSStream
argument_list|(
name|document
operator|.
name|getDocument
argument_list|()
operator|.
name|getScratchFile
argument_list|()
argument_list|)
decl_stmt|;
name|PDObjectStream
name|strm
init|=
operator|new
name|PDObjectStream
argument_list|(
name|cosStream
argument_list|)
decl_stmt|;
name|strm
operator|.
name|getStream
argument_list|()
operator|.
name|setName
argument_list|(
literal|"Type"
argument_list|,
literal|"ObjStm"
argument_list|)
expr_stmt|;
return|return
name|strm
return|;
block|}
comment|/**      * Get the type of this object, should always return "ObjStm".      *       * @return The type of this object.      */
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|getStream
argument_list|()
operator|.
name|getNameAsString
argument_list|(
literal|"Type"
argument_list|)
return|;
block|}
comment|/**      * Get the number of compressed object.      *       * @return The number of compressed objects.      */
specifier|public
name|int
name|getNumberOfObjects
parameter_list|()
block|{
return|return
name|getStream
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"N"
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**      * Set the number of objects.      *       * @param n The new number of objects.      */
specifier|public
name|void
name|setNumberOfObjects
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|getStream
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"N"
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
comment|/**      * The byte offset (in the decoded stream) of the first compressed object.      *       * @return The byte offset to the first object.      */
specifier|public
name|int
name|getFirstByteOffset
parameter_list|()
block|{
return|return
name|getStream
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"First"
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**      * The byte offset (in the decoded stream) of the first compressed object.      *       * @param n The byte offset to the first object.      */
specifier|public
name|void
name|setFirstByteOffset
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|getStream
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"First"
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
comment|/**      * A reference to an object stream, of which the current object stream is       * considered an extension.      *       * @return The object that this stream is an extension.      */
specifier|public
name|PDObjectStream
name|getExtends
parameter_list|()
block|{
name|PDObjectStream
name|retval
init|=
literal|null
decl_stmt|;
name|COSStream
name|stream
init|=
operator|(
name|COSStream
operator|)
name|getStream
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
literal|"Extends"
argument_list|)
decl_stmt|;
if|if
condition|(
name|stream
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
operator|new
name|PDObjectStream
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * A reference to an object stream, of which the current object stream is      * considered an extension.      *       * @param stream The object stream extension.      */
specifier|public
name|void
name|setExtends
parameter_list|(
name|PDObjectStream
name|stream
parameter_list|)
block|{
name|getStream
argument_list|()
operator|.
name|setItem
argument_list|(
literal|"Extends"
argument_list|,
name|stream
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

