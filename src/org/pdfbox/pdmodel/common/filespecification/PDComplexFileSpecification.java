begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *   *      http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|filespecification
package|;
end_package

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSStream
import|;
end_import

begin_comment
comment|/**  * This represents a file specification.  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.4 $  */
end_comment

begin_class
specifier|public
class|class
name|PDComplexFileSpecification
extends|extends
name|PDFileSpecification
block|{
specifier|private
name|COSDictionary
name|fs
decl_stmt|;
comment|/**      * Default Constructor.      */
specifier|public
name|PDComplexFileSpecification
parameter_list|()
block|{
name|fs
operator|=
operator|new
name|COSDictionary
argument_list|()
expr_stmt|;
name|fs
operator|.
name|setName
argument_list|(
literal|"Type"
argument_list|,
literal|"Filespec"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor.      *      * @param dict The dictionary that fulfils this file specification.      */
specifier|public
name|PDComplexFileSpecification
parameter_list|(
name|COSDictionary
name|dict
parameter_list|)
block|{
name|fs
operator|=
name|dict
expr_stmt|;
block|}
comment|/**      * Convert this standard java object to a COS object.      *      * @return The cos object that matches this Java object.      */
specifier|public
name|COSBase
name|getCOSObject
parameter_list|()
block|{
return|return
name|fs
return|;
block|}
comment|/**      * Convert this standard java object to a COS object.      *      * @return The cos object that matches this Java object.      */
specifier|public
name|COSDictionary
name|getCOSDictionary
parameter_list|()
block|{
return|return
name|fs
return|;
block|}
comment|/**      * This will get the file name.      *      * @return The file name.      */
specifier|public
name|String
name|getFile
parameter_list|()
block|{
return|return
name|fs
operator|.
name|getString
argument_list|(
literal|"F"
argument_list|)
return|;
block|}
comment|/**      * This will set the file name.      *      * @param file The name of the file.      */
specifier|public
name|void
name|setFile
parameter_list|(
name|String
name|file
parameter_list|)
block|{
name|fs
operator|.
name|setString
argument_list|(
literal|"F"
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the name representing a Dos file.      *      * @return The file name.      */
specifier|public
name|String
name|getFileDos
parameter_list|()
block|{
return|return
name|fs
operator|.
name|getString
argument_list|(
literal|"DOS"
argument_list|)
return|;
block|}
comment|/**      * This will set name representing a dos file.      *      * @param file The name of the file.      */
specifier|public
name|void
name|setFileDos
parameter_list|(
name|String
name|file
parameter_list|)
block|{
name|fs
operator|.
name|setString
argument_list|(
literal|"DOS"
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the name representing a Mac file.      *      * @return The file name.      */
specifier|public
name|String
name|getFileMac
parameter_list|()
block|{
return|return
name|fs
operator|.
name|getString
argument_list|(
literal|"Mac"
argument_list|)
return|;
block|}
comment|/**      * This will set name representing a Mac file.      *      * @param file The name of the file.      */
specifier|public
name|void
name|setFileMac
parameter_list|(
name|String
name|file
parameter_list|)
block|{
name|fs
operator|.
name|setString
argument_list|(
literal|"Mac"
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the name representing a Unix file.      *      * @return The file name.      */
specifier|public
name|String
name|getFileUnix
parameter_list|()
block|{
return|return
name|fs
operator|.
name|getString
argument_list|(
literal|"Unix"
argument_list|)
return|;
block|}
comment|/**      * This will set name representing a Unix file.      *      * @param file The name of the file.      */
specifier|public
name|void
name|setFileUnix
parameter_list|(
name|String
name|file
parameter_list|)
block|{
name|fs
operator|.
name|setString
argument_list|(
literal|"Unix"
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tell if the underlying file is volatile and should not be cached by the      * reader application.  Default: false      *       * @param fileIsVolatile The new value for the volatility of the file.      */
specifier|public
name|void
name|setVolatile
parameter_list|(
name|boolean
name|fileIsVolatile
parameter_list|)
block|{
name|fs
operator|.
name|setBoolean
argument_list|(
literal|"V"
argument_list|,
name|fileIsVolatile
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get if the file is volatile.  Default: false      *       * @return True if the file is volatile attribute is set.      */
specifier|public
name|boolean
name|isVolatile
parameter_list|()
block|{
return|return
name|fs
operator|.
name|getBoolean
argument_list|(
literal|"V"
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Get the embedded file.      *       * @return The embedded file for this file spec.      */
specifier|public
name|PDEmbeddedFile
name|getEmbeddedFile
parameter_list|()
block|{
name|PDEmbeddedFile
name|file
init|=
literal|null
decl_stmt|;
name|COSStream
name|stream
init|=
operator|(
name|COSStream
operator|)
name|fs
operator|.
name|getObjectFromPath
argument_list|(
literal|"EF/F"
argument_list|)
decl_stmt|;
if|if
condition|(
name|stream
operator|!=
literal|null
condition|)
block|{
name|file
operator|=
operator|new
name|PDEmbeddedFile
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
return|return
name|file
return|;
block|}
comment|/**      * Set the embedded file for this spec.      *       * @param file The file to be embedded.      */
specifier|public
name|void
name|setEmbeddedFile
parameter_list|(
name|PDEmbeddedFile
name|file
parameter_list|)
block|{
name|COSDictionary
name|ef
init|=
operator|(
name|COSDictionary
operator|)
name|fs
operator|.
name|getDictionaryObject
argument_list|(
literal|"EF"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ef
operator|==
literal|null
operator|&&
name|file
operator|!=
literal|null
condition|)
block|{
name|ef
operator|=
operator|new
name|COSDictionary
argument_list|()
expr_stmt|;
name|fs
operator|.
name|setItem
argument_list|(
literal|"EF"
argument_list|,
name|ef
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ef
operator|!=
literal|null
condition|)
block|{
name|ef
operator|.
name|setItem
argument_list|(
literal|"F"
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Get the embedded dos file.      *       * @return The embedded file for this file spec.      */
specifier|public
name|PDEmbeddedFile
name|getEmbeddedFileDos
parameter_list|()
block|{
name|PDEmbeddedFile
name|file
init|=
literal|null
decl_stmt|;
name|COSStream
name|stream
init|=
operator|(
name|COSStream
operator|)
name|fs
operator|.
name|getObjectFromPath
argument_list|(
literal|"EF/DOS"
argument_list|)
decl_stmt|;
if|if
condition|(
name|stream
operator|!=
literal|null
condition|)
block|{
name|file
operator|=
operator|new
name|PDEmbeddedFile
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
return|return
name|file
return|;
block|}
comment|/**      * Set the embedded dos file for this spec.      *       * @param file The dos file to be embedded.      */
specifier|public
name|void
name|setEmbeddedFileDos
parameter_list|(
name|PDEmbeddedFile
name|file
parameter_list|)
block|{
name|COSDictionary
name|ef
init|=
operator|(
name|COSDictionary
operator|)
name|fs
operator|.
name|getDictionaryObject
argument_list|(
literal|"DOS"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ef
operator|==
literal|null
operator|&&
name|file
operator|!=
literal|null
condition|)
block|{
name|ef
operator|=
operator|new
name|COSDictionary
argument_list|()
expr_stmt|;
name|fs
operator|.
name|setItem
argument_list|(
literal|"EF"
argument_list|,
name|ef
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ef
operator|!=
literal|null
condition|)
block|{
name|ef
operator|.
name|setItem
argument_list|(
literal|"DOS"
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Get the embedded Mac file.      *       * @return The embedded file for this file spec.      */
specifier|public
name|PDEmbeddedFile
name|getEmbeddedFileMac
parameter_list|()
block|{
name|PDEmbeddedFile
name|file
init|=
literal|null
decl_stmt|;
name|COSStream
name|stream
init|=
operator|(
name|COSStream
operator|)
name|fs
operator|.
name|getObjectFromPath
argument_list|(
literal|"EF/Mac"
argument_list|)
decl_stmt|;
if|if
condition|(
name|stream
operator|!=
literal|null
condition|)
block|{
name|file
operator|=
operator|new
name|PDEmbeddedFile
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
return|return
name|file
return|;
block|}
comment|/**      * Set the embedded Mac file for this spec.      *       * @param file The Mac file to be embedded.      */
specifier|public
name|void
name|setEmbeddedFileMac
parameter_list|(
name|PDEmbeddedFile
name|file
parameter_list|)
block|{
name|COSDictionary
name|ef
init|=
operator|(
name|COSDictionary
operator|)
name|fs
operator|.
name|getDictionaryObject
argument_list|(
literal|"Mac"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ef
operator|==
literal|null
operator|&&
name|file
operator|!=
literal|null
condition|)
block|{
name|ef
operator|=
operator|new
name|COSDictionary
argument_list|()
expr_stmt|;
name|fs
operator|.
name|setItem
argument_list|(
literal|"EF"
argument_list|,
name|ef
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ef
operator|!=
literal|null
condition|)
block|{
name|ef
operator|.
name|setItem
argument_list|(
literal|"Mac"
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Get the embedded Unix file.      *       * @return The embedded file for this file spec.      */
specifier|public
name|PDEmbeddedFile
name|getEmbeddedFileUnix
parameter_list|()
block|{
name|PDEmbeddedFile
name|file
init|=
literal|null
decl_stmt|;
name|COSStream
name|stream
init|=
operator|(
name|COSStream
operator|)
name|fs
operator|.
name|getObjectFromPath
argument_list|(
literal|"EF/Unix"
argument_list|)
decl_stmt|;
if|if
condition|(
name|stream
operator|!=
literal|null
condition|)
block|{
name|file
operator|=
operator|new
name|PDEmbeddedFile
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
return|return
name|file
return|;
block|}
comment|/**      * Set the embedded Unix file for this spec.      *       * @param file The Unix file to be embedded.      */
specifier|public
name|void
name|setEmbeddedFileUnix
parameter_list|(
name|PDEmbeddedFile
name|file
parameter_list|)
block|{
name|COSDictionary
name|ef
init|=
operator|(
name|COSDictionary
operator|)
name|fs
operator|.
name|getDictionaryObject
argument_list|(
literal|"Unix"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ef
operator|==
literal|null
operator|&&
name|file
operator|!=
literal|null
condition|)
block|{
name|ef
operator|=
operator|new
name|COSDictionary
argument_list|()
expr_stmt|;
name|fs
operator|.
name|setItem
argument_list|(
literal|"EF"
argument_list|,
name|ef
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ef
operator|!=
literal|null
condition|)
block|{
name|ef
operator|.
name|setItem
argument_list|(
literal|"Unix"
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

