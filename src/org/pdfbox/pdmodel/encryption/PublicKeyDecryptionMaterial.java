begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright (c) 2003-2005, www.pdfbox.org  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are met:  *  * 1. Redistributions of source code must retain the above copyright notice,  *    this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright notice,  *    this list of conditions and the following disclaimer in the documentation  *    and/or other materials provided with the distribution.  * 3. Neither the name of pdfbox; nor the names of its  *    contributors may be used to endorse or promote products derived from this  *    software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * http://www.pdfbox.org  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|encryption
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStoreException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|UnrecoverableKeyException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_comment
comment|/**  * This class holds necessary information to decrypt a PDF document   * protected by the public key security handler.  *   * To decrypt such a document, we need:  *<ul>  *<li>a valid X509 certificate which correspond to one of the recipient of the document</li>  *<li>the private key corresponding to this certificate  *<li>the password to decrypt the private key if necessary</li>   *</ul>  *   * Objects of this class can be used with the<code>openProtection</code> method of<code>PDDocument</code>.  *   * The following example shows how to decrypt a document using a PKCS#12 certificate   * (typically files with a pfx extension).  *    *<pre>  * PDDocument doc = PDDocument.load(document_path);  * KeyStore ks = KeyStore.getInstance("PKCS12");  * ks.load(new FileInputStream(certificate_path), password.toCharArray());  * PublicKeyDecryptionMaterial dm = new PublicKeyDecryptionMaterial(ks, null, password);  * doc.openProtection(dm);  *</pre>  *   * In this code sample certificate_path contains the path to the PKCS#12 certificate.    *   * @see org.pdfbox.pdmodel.PDDocument#openProtection(DecryptionMaterial)  *   * @author Benoit Guillon (benoit.guillon@snv.jussieu.fr)  * @version $Revision: 1.2 $  */
end_comment

begin_class
specifier|public
class|class
name|PublicKeyDecryptionMaterial
extends|extends
name|DecryptionMaterial
block|{
specifier|private
name|String
name|password
init|=
literal|null
decl_stmt|;
specifier|private
name|KeyStore
name|keyStore
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|alias
init|=
literal|null
decl_stmt|;
comment|/**      * Create a new public key decryption material.      *       * @param keystore The keystore were the private key and the certificate are      * @param a The alias of the private key and the certificate.        *   If the keystore contains only 1 entry, this parameter can be left null.        * @param pwd The password to extract the private key from the keystore.       */
specifier|public
name|PublicKeyDecryptionMaterial
parameter_list|(
name|KeyStore
name|keystore
parameter_list|,
name|String
name|a
parameter_list|,
name|String
name|pwd
parameter_list|)
block|{
name|keyStore
operator|=
name|keystore
expr_stmt|;
name|alias
operator|=
name|a
expr_stmt|;
name|password
operator|=
name|pwd
expr_stmt|;
block|}
comment|/**      * Returns the certificate contained in the keystore.      *       * @return The certificate that will be used to try to open the document.      *       * @throws KeyStoreException If there is an error accessing the certificate.      */
specifier|public
name|X509Certificate
name|getCertificate
parameter_list|()
throws|throws
name|KeyStoreException
block|{
if|if
condition|(
name|keyStore
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|Enumeration
name|aliases
init|=
name|keyStore
operator|.
name|aliases
argument_list|()
decl_stmt|;
name|String
name|keyStoreAlias
init|=
operator|(
name|String
operator|)
name|aliases
operator|.
name|nextElement
argument_list|()
decl_stmt|;
return|return
operator|(
name|X509Certificate
operator|)
name|keyStore
operator|.
name|getCertificate
argument_list|(
name|keyStoreAlias
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|keyStore
operator|.
name|containsAlias
argument_list|(
name|alias
argument_list|)
condition|)
block|{
return|return
operator|(
name|X509Certificate
operator|)
name|keyStore
operator|.
name|getCertificate
argument_list|(
name|alias
argument_list|)
return|;
block|}
throw|throw
operator|new
name|KeyStoreException
argument_list|(
literal|"the keystore does not contain the given alias"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns the password given by the user and that will be used       * to open the private key.      *       * @return The password.      */
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
name|password
return|;
block|}
comment|/**      * returns The private key that will be used to open the document protection.      * @return The private key.      * @throws KeyStoreException If there is an error accessing the key.      */
specifier|public
name|Key
name|getPrivateKey
parameter_list|()
throws|throws
name|KeyStoreException
block|{
try|try
block|{
if|if
condition|(
name|keyStore
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|Enumeration
name|aliases
init|=
name|keyStore
operator|.
name|aliases
argument_list|()
decl_stmt|;
name|String
name|keyStoreAlias
init|=
operator|(
name|String
operator|)
name|aliases
operator|.
name|nextElement
argument_list|()
decl_stmt|;
return|return
name|keyStore
operator|.
name|getKey
argument_list|(
name|keyStoreAlias
argument_list|,
name|password
operator|.
name|toCharArray
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|keyStore
operator|.
name|containsAlias
argument_list|(
name|alias
argument_list|)
condition|)
block|{
return|return
name|keyStore
operator|.
name|getKey
argument_list|(
name|alias
argument_list|,
name|password
operator|.
name|toCharArray
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|KeyStoreException
argument_list|(
literal|"the keystore does not contain the given alias"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|UnrecoverableKeyException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|KeyStoreException
argument_list|(
literal|"the private key is not recoverable"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|KeyStoreException
argument_list|(
literal|"the algorithm necessary to recover the key is not available"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

