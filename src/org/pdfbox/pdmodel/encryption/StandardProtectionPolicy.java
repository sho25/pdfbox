begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright (c) 2003-2006, www.pdfbox.org  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are met:  *  * 1. Redistributions of source code must retain the above copyright notice,  *    this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright notice,  *    this list of conditions and the following disclaimer in the documentation  *    and/or other materials provided with the distribution.  * 3. Neither the name of pdfbox; nor the names of its  *    contributors may be used to endorse or promote products derived from this  *    software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * http://www.pdfbox.org  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|encryption
package|;
end_package

begin_comment
comment|/**  * This class represents the protection policy to add to a document  * for password-based protection.  *   * The following example shows how to protect a PDF document with password.   * In this example, the document will be protected so that someone opening  * the document with the user password<code>user_pwd</code> will not be  * able to modify the document.  *   *<pre>  * AccessPermission ap = new AccessPermission();  * ap.setCanModify(false);  * StandardProtectionPolicy policy = new StandardProtectionPolicy(owner_pwd, user_pwd, ap);  * doc.protect(policy);      *</pre>  *   * @author Benoit Guillon (benoit.guillon@snv.jussieu.fr)  * @version $Revision: 1.3 $  */
end_comment

begin_class
specifier|public
class|class
name|StandardProtectionPolicy
extends|extends
name|ProtectionPolicy
block|{
specifier|private
name|AccessPermission
name|permissions
decl_stmt|;
specifier|private
name|String
name|ownerPassword
init|=
literal|""
decl_stmt|;
specifier|private
name|String
name|userPassword
init|=
literal|""
decl_stmt|;
comment|/**      * Creates an new instance of the standard protection policy       * in order to protect a PDF document with passwords.      *       * @param ownerPass The owner's password.      * @param userPass The users's password.      * @param perms The access permissions given to the user.       */
specifier|public
name|StandardProtectionPolicy
parameter_list|(
name|String
name|ownerPass
parameter_list|,
name|String
name|userPass
parameter_list|,
name|AccessPermission
name|perms
parameter_list|)
block|{
name|this
operator|.
name|permissions
operator|=
name|perms
expr_stmt|;
name|this
operator|.
name|userPassword
operator|=
name|userPass
expr_stmt|;
name|this
operator|.
name|ownerPassword
operator|=
name|ownerPass
expr_stmt|;
block|}
comment|/**      * Getter of the property<tt>permissions</tt>.      *       * @return Returns the permissions.      */
specifier|public
name|AccessPermission
name|getPermissions
parameter_list|()
block|{
return|return
name|permissions
return|;
block|}
comment|/**      * Setter of the property<tt>permissions</tt>.      *       * @param perms The permissions to set.      */
specifier|public
name|void
name|setPermissions
parameter_list|(
name|AccessPermission
name|perms
parameter_list|)
block|{
name|this
operator|.
name|permissions
operator|=
name|perms
expr_stmt|;
block|}
comment|/**      * Getter of the property<tt>ownerPassword</tt>.      *       * @return Returns the ownerPassword.      */
specifier|public
name|String
name|getOwnerPassword
parameter_list|()
block|{
return|return
name|ownerPassword
return|;
block|}
comment|/**      * Setter of the property<tt>ownerPassword</tt>.      *       * @param ownerPass The ownerPassword to set.      */
specifier|public
name|void
name|setOwnerPassword
parameter_list|(
name|String
name|ownerPass
parameter_list|)
block|{
name|this
operator|.
name|ownerPassword
operator|=
name|ownerPass
expr_stmt|;
block|}
comment|/**      * Getter of the property<tt>userPassword</tt>.      *       * @return Returns the userPassword.      */
specifier|public
name|String
name|getUserPassword
parameter_list|()
block|{
return|return
name|userPassword
return|;
block|}
comment|/**      * Setter of the property<tt>userPassword</tt>.      *       * @param userPass The userPassword to set.      */
specifier|public
name|void
name|setUserPassword
parameter_list|(
name|String
name|userPass
parameter_list|)
block|{
name|this
operator|.
name|userPassword
operator|=
name|userPass
expr_stmt|;
block|}
block|}
end_class

end_unit

