begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *   *      http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|encryption
package|;
end_package

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSNumber
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSString
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * This class holds information that is related to the standard PDF encryption.  *  * See PDF Reference 1.4 section "3.5 Encryption"  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.7 $  * @deprecated Made deprecated by the new security layer of PDFBox. Use SecurityHandlers instead.  */
end_comment

begin_class
specifier|public
class|class
name|PDStandardEncryption
extends|extends
name|PDEncryptionDictionary
block|{
comment|/**      * The 'Filter' name for this security handler.      */
specifier|public
specifier|static
specifier|final
name|String
name|FILTER_NAME
init|=
literal|"Standard"
decl_stmt|;
comment|/**      * The default revision of one is not specified.      */
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_REVISION
init|=
literal|3
decl_stmt|;
comment|/**      * Encryption revision 2.      */
specifier|public
specifier|static
specifier|final
name|int
name|REVISION2
init|=
literal|2
decl_stmt|;
comment|/**      * Encryption revision 3.      */
specifier|public
specifier|static
specifier|final
name|int
name|REVISION3
init|=
literal|3
decl_stmt|;
comment|/**      * Encryption revision 4.      */
specifier|public
specifier|static
specifier|final
name|int
name|REVISION4
init|=
literal|4
decl_stmt|;
comment|/**      * The default set of permissions which is to allow all.      */
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_PERMISSIONS
init|=
literal|0xFFFFFFFF
operator|^
literal|3
decl_stmt|;
comment|//bits 0& 1 need to be zero
specifier|private
specifier|static
specifier|final
name|int
name|PRINT_BIT
init|=
literal|3
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MODIFICATION_BIT
init|=
literal|4
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|EXTRACT_BIT
init|=
literal|5
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MODIFY_ANNOTATIONS_BIT
init|=
literal|6
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|FILL_IN_FORM_BIT
init|=
literal|9
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|EXTRACT_FOR_ACCESSIBILITY_BIT
init|=
literal|10
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|ASSEMBLE_DOCUMENT_BIT
init|=
literal|11
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEGRADED_PRINT_BIT
init|=
literal|12
decl_stmt|;
comment|/**      * Default constructor that uses Version 2, Revision 3, 40 bit encryption,      * all permissions allowed.      */
specifier|public
name|PDStandardEncryption
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|encryptionDictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|FILTER
argument_list|,
name|COSName
operator|.
name|getPDFName
argument_list|(
name|FILTER_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|setVersion
argument_list|(
name|PDEncryptionDictionary
operator|.
name|VERSION1_40_BIT_ALGORITHM
argument_list|)
expr_stmt|;
name|setRevision
argument_list|(
name|PDStandardEncryption
operator|.
name|REVISION2
argument_list|)
expr_stmt|;
name|setPermissions
argument_list|(
name|DEFAULT_PERMISSIONS
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor from existing dictionary.      *      * @param dict The existing encryption dictionary.      */
specifier|public
name|PDStandardEncryption
parameter_list|(
name|COSDictionary
name|dict
parameter_list|)
block|{
name|super
argument_list|(
name|dict
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will return the R entry of the encryption dictionary.<br /><br />      * See PDF Reference 1.4 Table 3.14.      *      * @return The encryption revision to use.      */
specifier|public
name|int
name|getRevision
parameter_list|()
block|{
name|int
name|revision
init|=
name|DEFAULT_VERSION
decl_stmt|;
name|COSNumber
name|cosRevision
init|=
operator|(
name|COSNumber
operator|)
name|encryptionDictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"R"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cosRevision
operator|!=
literal|null
condition|)
block|{
name|revision
operator|=
name|cosRevision
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
return|return
name|revision
return|;
block|}
comment|/**      * This will set the R entry of the encryption dictionary.<br /><br />      * See PDF Reference 1.4 Table 3.14.<br /><br/>      *      *<b>Note: This value is used to decrypt the pdf document.  If you change this when      * the document is encrypted then decryption will fail!.</b>      *      * @param revision The new encryption version.      */
specifier|public
name|void
name|setRevision
parameter_list|(
name|int
name|revision
parameter_list|)
block|{
name|encryptionDictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"R"
argument_list|)
argument_list|,
operator|new
name|COSInteger
argument_list|(
name|revision
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the O entry in the standard encryption dictionary.      *      * @return A 32 byte array or null if there is no owner key.      */
specifier|public
name|byte
index|[]
name|getOwnerKey
parameter_list|()
block|{
name|byte
index|[]
name|o
init|=
literal|null
decl_stmt|;
name|COSString
name|owner
init|=
operator|(
name|COSString
operator|)
name|encryptionDictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"O"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|owner
operator|!=
literal|null
condition|)
block|{
name|o
operator|=
name|owner
operator|.
name|getBytes
argument_list|()
expr_stmt|;
block|}
return|return
name|o
return|;
block|}
comment|/**      * This will set the O entry in the standard encryption dictionary.      *      * @param o A 32 byte array or null if there is no owner key.      *      * @throws IOException If there is an error setting the data.      */
specifier|public
name|void
name|setOwnerKey
parameter_list|(
name|byte
index|[]
name|o
parameter_list|)
throws|throws
name|IOException
block|{
name|COSString
name|owner
init|=
operator|new
name|COSString
argument_list|()
decl_stmt|;
name|owner
operator|.
name|append
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|encryptionDictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"O"
argument_list|)
argument_list|,
name|owner
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the U entry in the standard encryption dictionary.      *      * @return A 32 byte array or null if there is no user key.      */
specifier|public
name|byte
index|[]
name|getUserKey
parameter_list|()
block|{
name|byte
index|[]
name|u
init|=
literal|null
decl_stmt|;
name|COSString
name|user
init|=
operator|(
name|COSString
operator|)
name|encryptionDictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"U"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|!=
literal|null
condition|)
block|{
name|u
operator|=
name|user
operator|.
name|getBytes
argument_list|()
expr_stmt|;
block|}
return|return
name|u
return|;
block|}
comment|/**      * This will set the U entry in the standard encryption dictionary.      *      * @param u A 32 byte array.      *      * @throws IOException If there is an error setting the data.      */
specifier|public
name|void
name|setUserKey
parameter_list|(
name|byte
index|[]
name|u
parameter_list|)
throws|throws
name|IOException
block|{
name|COSString
name|user
init|=
operator|new
name|COSString
argument_list|()
decl_stmt|;
name|user
operator|.
name|append
argument_list|(
name|u
argument_list|)
expr_stmt|;
name|encryptionDictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"U"
argument_list|)
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the permissions bit mask.      *      * @return The permissions bit mask.      */
specifier|public
name|int
name|getPermissions
parameter_list|()
block|{
name|int
name|permissions
init|=
literal|0
decl_stmt|;
name|COSInteger
name|p
init|=
operator|(
name|COSInteger
operator|)
name|encryptionDictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"P"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|permissions
operator|=
name|p
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
return|return
name|permissions
return|;
block|}
comment|/**      * This will set the permissions bit mask.      *      * @param p The new permissions bit mask      */
specifier|public
name|void
name|setPermissions
parameter_list|(
name|int
name|p
parameter_list|)
block|{
name|encryptionDictionary
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"P"
argument_list|)
argument_list|,
operator|new
name|COSInteger
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|isPermissionBitOn
parameter_list|(
name|int
name|bit
parameter_list|)
block|{
return|return
operator|(
name|getPermissions
argument_list|()
operator|&
operator|(
literal|1
operator|<<
operator|(
name|bit
operator|-
literal|1
operator|)
operator|)
operator|)
operator|!=
literal|0
return|;
block|}
specifier|private
name|boolean
name|setPermissionBit
parameter_list|(
name|int
name|bit
parameter_list|,
name|boolean
name|value
parameter_list|)
block|{
name|int
name|permissions
init|=
name|getPermissions
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
condition|)
block|{
name|permissions
operator|=
name|permissions
operator||
operator|(
literal|1
operator|<<
operator|(
name|bit
operator|-
literal|1
operator|)
operator|)
expr_stmt|;
block|}
else|else
block|{
name|permissions
operator|=
name|permissions
operator|&
operator|(
literal|0xFFFFFFFF
operator|^
operator|(
literal|1
operator|<<
operator|(
name|bit
operator|-
literal|1
operator|)
operator|)
operator|)
expr_stmt|;
block|}
name|setPermissions
argument_list|(
name|permissions
argument_list|)
expr_stmt|;
return|return
operator|(
name|getPermissions
argument_list|()
operator|&
operator|(
literal|1
operator|<<
operator|(
name|bit
operator|-
literal|1
operator|)
operator|)
operator|)
operator|!=
literal|0
return|;
block|}
comment|/**      * This will tell if the user can print.      *      * @return true If supplied with the user password they are allowed to print.      */
specifier|public
name|boolean
name|canPrint
parameter_list|()
block|{
return|return
name|isPermissionBitOn
argument_list|(
name|PRINT_BIT
argument_list|)
return|;
block|}
comment|/**      * Set if the user can print.      *      * @param allowPrinting A boolean determining if the user can print.      */
specifier|public
name|void
name|setCanPrint
parameter_list|(
name|boolean
name|allowPrinting
parameter_list|)
block|{
name|setPermissionBit
argument_list|(
name|PRINT_BIT
argument_list|,
name|allowPrinting
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will tell if the user can modify contents of the document.      *      * @return true If supplied with the user password they are allowed to modify the document      */
specifier|public
name|boolean
name|canModify
parameter_list|()
block|{
return|return
name|isPermissionBitOn
argument_list|(
name|MODIFICATION_BIT
argument_list|)
return|;
block|}
comment|/**      * Set if the user can modify the document.      *      * @param allowModifications A boolean determining if the user can modify the document.      */
specifier|public
name|void
name|setCanModify
parameter_list|(
name|boolean
name|allowModifications
parameter_list|)
block|{
name|setPermissionBit
argument_list|(
name|MODIFICATION_BIT
argument_list|,
name|allowModifications
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will tell if the user can extract text and images from the PDF document.      *      * @return true If supplied with the user password they are allowed to extract content      *              from the PDF document      */
specifier|public
name|boolean
name|canExtractContent
parameter_list|()
block|{
return|return
name|isPermissionBitOn
argument_list|(
name|EXTRACT_BIT
argument_list|)
return|;
block|}
comment|/**      * Set if the user can extract content from the document.      *      * @param allowExtraction A boolean determining if the user can extract content      *                        from the document.      */
specifier|public
name|void
name|setCanExtractContent
parameter_list|(
name|boolean
name|allowExtraction
parameter_list|)
block|{
name|setPermissionBit
argument_list|(
name|EXTRACT_BIT
argument_list|,
name|allowExtraction
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will tell if the user can add/modify text annotations, fill in interactive forms fields.      *      * @return true If supplied with the user password they are allowed to modify annotations.      */
specifier|public
name|boolean
name|canModifyAnnotations
parameter_list|()
block|{
return|return
name|isPermissionBitOn
argument_list|(
name|MODIFY_ANNOTATIONS_BIT
argument_list|)
return|;
block|}
comment|/**      * Set if the user can modify annotations.      *      * @param allowAnnotationModification A boolean determining if the user can modify annotations.      */
specifier|public
name|void
name|setCanModifyAnnotations
parameter_list|(
name|boolean
name|allowAnnotationModification
parameter_list|)
block|{
name|setPermissionBit
argument_list|(
name|MODIFY_ANNOTATIONS_BIT
argument_list|,
name|allowAnnotationModification
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will tell if the user can fill in interactive forms.      *      * @return true If supplied with the user password they are allowed to fill in form fields.      */
specifier|public
name|boolean
name|canFillInForm
parameter_list|()
block|{
return|return
name|isPermissionBitOn
argument_list|(
name|FILL_IN_FORM_BIT
argument_list|)
return|;
block|}
comment|/**      * Set if the user can fill in interactive forms.      *      * @param allowFillingInForm A boolean determining if the user can fill in interactive forms.      */
specifier|public
name|void
name|setCanFillInForm
parameter_list|(
name|boolean
name|allowFillingInForm
parameter_list|)
block|{
name|setPermissionBit
argument_list|(
name|FILL_IN_FORM_BIT
argument_list|,
name|allowFillingInForm
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will tell if the user can extract text and images from the PDF document      * for accessibility purposes.      *      * @return true If supplied with the user password they are allowed to extract content      *              from the PDF document      */
specifier|public
name|boolean
name|canExtractForAccessibility
parameter_list|()
block|{
return|return
name|isPermissionBitOn
argument_list|(
name|EXTRACT_FOR_ACCESSIBILITY_BIT
argument_list|)
return|;
block|}
comment|/**      * Set if the user can extract content from the document for accessibility purposes.      *      * @param allowExtraction A boolean determining if the user can extract content      *                        from the document.      */
specifier|public
name|void
name|setCanExtractForAccessibility
parameter_list|(
name|boolean
name|allowExtraction
parameter_list|)
block|{
name|setPermissionBit
argument_list|(
name|EXTRACT_FOR_ACCESSIBILITY_BIT
argument_list|,
name|allowExtraction
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will tell if the user can insert/rotate/delete pages.      *      * @return true If supplied with the user password they are allowed to extract content      *              from the PDF document      */
specifier|public
name|boolean
name|canAssembleDocument
parameter_list|()
block|{
return|return
name|isPermissionBitOn
argument_list|(
name|ASSEMBLE_DOCUMENT_BIT
argument_list|)
return|;
block|}
comment|/**      * Set if the user can insert/rotate/delete pages.      *      * @param allowAssembly A boolean determining if the user can assemble the document.      */
specifier|public
name|void
name|setCanAssembleDocument
parameter_list|(
name|boolean
name|allowAssembly
parameter_list|)
block|{
name|setPermissionBit
argument_list|(
name|ASSEMBLE_DOCUMENT_BIT
argument_list|,
name|allowAssembly
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will tell if the user can print the document in a degraded format.      *      * @return true If supplied with the user password they are allowed to print the      *              document in a degraded format.      */
specifier|public
name|boolean
name|canPrintDegraded
parameter_list|()
block|{
return|return
name|isPermissionBitOn
argument_list|(
name|DEGRADED_PRINT_BIT
argument_list|)
return|;
block|}
comment|/**      * Set if the user can print the document in a degraded format.      *      * @param allowAssembly A boolean determining if the user can print the      *        document in a degraded format.      */
specifier|public
name|void
name|setCanPrintDegraded
parameter_list|(
name|boolean
name|allowAssembly
parameter_list|)
block|{
name|setPermissionBit
argument_list|(
name|DEGRADED_PRINT_BIT
argument_list|,
name|allowAssembly
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

