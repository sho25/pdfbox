begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *   *      http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|encryption
package|;
end_package

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * This class will handle loading of the different security handlers.  *  * See PDF Reference 1.4 section "3.5 Encryption"  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.7 $  * @deprecated Made deprecated by the new security layer of PDFBox. Use SecurityHandlers instead.   */
end_comment

begin_class
specifier|public
class|class
name|PDEncryptionManager
block|{
specifier|private
specifier|static
name|Map
name|handlerMap
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|HashMap
argument_list|()
argument_list|)
decl_stmt|;
static|static
block|{
name|registerSecurityHandler
argument_list|(
name|PDStandardEncryption
operator|.
name|FILTER_NAME
argument_list|,
name|PDStandardEncryption
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|private
name|PDEncryptionManager
parameter_list|()
block|{     }
comment|/**      * This will allow the user to register new security handlers when unencrypting a      * document.      *      * @param filterName As described in the encryption dictionary.      * @param handlerClass A subclass of PDEncryptionDictionary that has a constructor that takes      *        a COSDictionary.      */
specifier|public
specifier|static
name|void
name|registerSecurityHandler
parameter_list|(
name|String
name|filterName
parameter_list|,
name|Class
name|handlerClass
parameter_list|)
block|{
name|handlerMap
operator|.
name|put
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|filterName
argument_list|)
argument_list|,
name|handlerClass
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the correct security handler for the encryption dictionary.      *      * @param dictionary The encryption dictionary.      *      * @return An implementation of PDEncryptionDictionary(PDStandardEncryption for most cases).      *      * @throws IOException If a security handler could not be found.      */
specifier|public
specifier|static
name|PDEncryptionDictionary
name|getEncryptionDictionary
parameter_list|(
name|COSDictionary
name|dictionary
parameter_list|)
throws|throws
name|IOException
block|{
name|Object
name|retval
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|dictionary
operator|!=
literal|null
condition|)
block|{
name|COSName
name|filter
init|=
operator|(
name|COSName
operator|)
name|dictionary
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|FILTER
argument_list|)
decl_stmt|;
name|Class
name|handlerClass
init|=
operator|(
name|Class
operator|)
name|handlerMap
operator|.
name|get
argument_list|(
name|filter
argument_list|)
decl_stmt|;
if|if
condition|(
name|handlerClass
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No handler for security handler '"
operator|+
name|filter
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|)
throw|;
block|}
else|else
block|{
try|try
block|{
name|Constructor
name|ctor
init|=
name|handlerClass
operator|.
name|getConstructor
argument_list|(
operator|new
name|Class
index|[]
block|{
name|COSDictionary
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|retval
operator|=
name|ctor
operator|.
name|newInstance
argument_list|(
operator|new
name|Object
index|[]
block|{
name|dictionary
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
return|return
operator|(
name|PDEncryptionDictionary
operator|)
name|retval
return|;
block|}
block|}
end_class

end_unit

