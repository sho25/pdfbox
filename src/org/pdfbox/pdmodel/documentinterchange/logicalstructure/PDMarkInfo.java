begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright (c) 2005, www.pdfbox.org  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are met:  *  * 1. Redistributions of source code must retain the above copyright notice,  *    this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright notice,  *    this list of conditions and the following disclaimer in the documentation  *    and/or other materials provided with the distribution.  * 3. Neither the name of pdfbox; nor the names of its  *    contributors may be used to endorse or promote products derived from this  *    software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * http://www.pdfbox.org  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|documentinterchange
operator|.
name|logicalstructure
package|;
end_package

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|COSObjectable
import|;
end_import

begin_comment
comment|/**  * The MarkInfo provides additional information relevant to specialized  * uses of structured documents.  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.4 $  */
end_comment

begin_class
specifier|public
class|class
name|PDMarkInfo
implements|implements
name|COSObjectable
block|{
specifier|private
name|COSDictionary
name|dictionary
decl_stmt|;
comment|/**      * Default Constructor.      *      */
specifier|public
name|PDMarkInfo
parameter_list|()
block|{
name|dictionary
operator|=
operator|new
name|COSDictionary
argument_list|()
expr_stmt|;
block|}
comment|/**      * Constructor for an existing MarkInfo element.      *       * @param dic The existing dictionary.      */
specifier|public
name|PDMarkInfo
parameter_list|(
name|COSDictionary
name|dic
parameter_list|)
block|{
name|dictionary
operator|=
name|dic
expr_stmt|;
block|}
comment|/**      * Convert this standard java object to a COS object.      *      * @return The cos object that matches this Java object.      */
specifier|public
name|COSBase
name|getCOSObject
parameter_list|()
block|{
return|return
name|dictionary
return|;
block|}
comment|/**      * Convert this standard java object to a COS object.      *      * @return The cos object that matches this Java object.      */
specifier|public
name|COSDictionary
name|getDictionary
parameter_list|()
block|{
return|return
name|dictionary
return|;
block|}
comment|/**      * Tells if this is a tagged PDF.      *       * @return true If this is a tagged PDF.      */
specifier|public
name|boolean
name|isMarked
parameter_list|()
block|{
return|return
name|dictionary
operator|.
name|getBoolean
argument_list|(
literal|"Marked"
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Set if this is a tagged PDF.      *       * @param value The new marked value.      */
specifier|public
name|void
name|setMarked
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|dictionary
operator|.
name|setBoolean
argument_list|(
literal|"Marked"
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tells if structure elements use user properties.      *       * @return A boolean telling if the structure elements use user properties.      */
specifier|public
name|boolean
name|usesUserProperties
parameter_list|()
block|{
return|return
name|dictionary
operator|.
name|getBoolean
argument_list|(
literal|"UserProperties"
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Set if the structure elements contain user properties.      *       * @param userProps The new value for this property.      */
specifier|public
name|void
name|setUserProperties
parameter_list|(
name|boolean
name|userProps
parameter_list|)
block|{
name|dictionary
operator|.
name|setBoolean
argument_list|(
literal|"UserProperties"
argument_list|,
name|userProps
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tells if this PDF contain 'suspect' tags.  See PDF Reference 1.6       * section 10.6 "Logical Structure" for more information about this property.      *        * @return true if the suspect flag has been set.      */
specifier|public
name|boolean
name|isSuspect
parameter_list|()
block|{
return|return
name|dictionary
operator|.
name|getBoolean
argument_list|(
literal|"Suspects"
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Set the value of the suspects property.  See PDF Reference 1.6       * section 10.6 "Logical Structure" for more information about this       * property.      *       * @param suspect The new "Suspects" value.      */
specifier|public
name|void
name|setSuspect
parameter_list|(
name|boolean
name|suspect
parameter_list|)
block|{
name|dictionary
operator|.
name|setBoolean
argument_list|(
literal|"Suspects"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

