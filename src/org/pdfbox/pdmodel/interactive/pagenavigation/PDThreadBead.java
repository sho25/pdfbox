begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright (c) 2005, www.pdfbox.org  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are met:  *  * 1. Redistributions of source code must retain the above copyright notice,  *    this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright notice,  *    this list of conditions and the following disclaimer in the documentation  *    and/or other materials provided with the distribution.  * 3. Neither the name of pdfbox; nor the names of its  *    contributors may be used to endorse or promote products derived from this  *    software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * http://www.pdfbox.org  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|pagenavigation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|COSObjectable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDRectangle
import|;
end_import

begin_comment
comment|/**  * This a single bead in a thread in a PDF document.  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.4 $  */
end_comment

begin_class
specifier|public
class|class
name|PDThreadBead
implements|implements
name|COSObjectable
block|{
specifier|private
name|COSDictionary
name|bead
decl_stmt|;
comment|/**      * Constructor that is used for a preexisting dictionary.      *      * @param b The underlying dictionary.      */
specifier|public
name|PDThreadBead
parameter_list|(
name|COSDictionary
name|b
parameter_list|)
block|{
name|bead
operator|=
name|b
expr_stmt|;
block|}
comment|/**      * Default constructor.      *       */
specifier|public
name|PDThreadBead
parameter_list|()
block|{
name|bead
operator|=
operator|new
name|COSDictionary
argument_list|()
expr_stmt|;
name|bead
operator|.
name|setName
argument_list|(
literal|"Type"
argument_list|,
literal|"Bead"
argument_list|)
expr_stmt|;
name|setNextBead
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|setPreviousBead
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the underlying dictionary that this object wraps.      *      * @return The underlying info dictionary.      */
specifier|public
name|COSDictionary
name|getDictionary
parameter_list|()
block|{
return|return
name|bead
return|;
block|}
comment|/**      * Convert this standard java object to a COS object.      *      * @return The cos object that matches this Java object.      */
specifier|public
name|COSBase
name|getCOSObject
parameter_list|()
block|{
return|return
name|bead
return|;
block|}
comment|/**      * This will get the thread that this bead is part of.  This is only required      * for the first bead in a thread, so other beads 'may' return null.      *       * @return The thread that this bead is part of.      */
specifier|public
name|PDThread
name|getThread
parameter_list|()
block|{
name|PDThread
name|retval
init|=
literal|null
decl_stmt|;
name|COSDictionary
name|dic
init|=
operator|(
name|COSDictionary
operator|)
name|bead
operator|.
name|getDictionaryObject
argument_list|(
literal|"T"
argument_list|)
decl_stmt|;
if|if
condition|(
name|dic
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
operator|new
name|PDThread
argument_list|(
name|dic
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * Set the thread that this bead is part of.  This is only required for the      * first bead in a thread.  Note: This property is set for you by the PDThread.setFirstBead() method.      *       * @param thread The thread that this bead is part of.      */
specifier|public
name|void
name|setThread
parameter_list|(
name|PDThread
name|thread
parameter_list|)
block|{
name|bead
operator|.
name|setItem
argument_list|(
literal|"T"
argument_list|,
name|thread
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the next bead.  If this bead is the last bead in the list then this      * will return the first bead.       *       * @return The next bead in the list or the first bead if this is the last bead.      */
specifier|public
name|PDThreadBead
name|getNextBead
parameter_list|()
block|{
return|return
operator|new
name|PDThreadBead
argument_list|(
operator|(
name|COSDictionary
operator|)
name|bead
operator|.
name|getDictionaryObject
argument_list|(
literal|"N"
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Set the next bead in the thread.      *       * @param next The next bead.      */
specifier|protected
name|void
name|setNextBead
parameter_list|(
name|PDThreadBead
name|next
parameter_list|)
block|{
name|bead
operator|.
name|setItem
argument_list|(
literal|"N"
argument_list|,
name|next
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the previous bead.  If this bead is the first bead in the list then this      * will return the last bead.       *       * @return The previous bead in the list or the last bead if this is the first bead.      */
specifier|public
name|PDThreadBead
name|getPreviousBead
parameter_list|()
block|{
return|return
operator|new
name|PDThreadBead
argument_list|(
operator|(
name|COSDictionary
operator|)
name|bead
operator|.
name|getDictionaryObject
argument_list|(
literal|"V"
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Set the previous bead in the thread.      *       * @param previous The previous bead.      */
specifier|protected
name|void
name|setPreviousBead
parameter_list|(
name|PDThreadBead
name|previous
parameter_list|)
block|{
name|bead
operator|.
name|setItem
argument_list|(
literal|"V"
argument_list|,
name|previous
argument_list|)
expr_stmt|;
block|}
comment|/**      * Append a bead after this bead.  This will correctly set the next/previous beads in the      * linked list.      *       * @param append The bead to insert.      */
specifier|public
name|void
name|appendBead
parameter_list|(
name|PDThreadBead
name|append
parameter_list|)
block|{
name|PDThreadBead
name|nextBead
init|=
name|getNextBead
argument_list|()
decl_stmt|;
name|nextBead
operator|.
name|setPreviousBead
argument_list|(
name|append
argument_list|)
expr_stmt|;
name|append
operator|.
name|setNextBead
argument_list|(
name|nextBead
argument_list|)
expr_stmt|;
name|setNextBead
argument_list|(
name|append
argument_list|)
expr_stmt|;
name|append
operator|.
name|setPreviousBead
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the page that this bead is part of.      *       * @return The page that this bead is part of.      */
specifier|public
name|PDPage
name|getPage
parameter_list|()
block|{
name|PDPage
name|page
init|=
literal|null
decl_stmt|;
name|COSDictionary
name|dic
init|=
operator|(
name|COSDictionary
operator|)
name|bead
operator|.
name|getDictionaryObject
argument_list|(
literal|"P"
argument_list|)
decl_stmt|;
if|if
condition|(
name|dic
operator|!=
literal|null
condition|)
block|{
name|page
operator|=
operator|new
name|PDPage
argument_list|(
name|dic
argument_list|)
expr_stmt|;
block|}
return|return
name|page
return|;
block|}
comment|/**      * Set the page that this bead is part of.  This is a required property and must be      * set when creating a new bead.  The PDPage object also has a list of beads in the natural      * reading order.  It is recommended that you add this object to that list as well.      *       * @param page The page that this bead is on.      */
specifier|public
name|void
name|setPage
parameter_list|(
name|PDPage
name|page
parameter_list|)
block|{
name|bead
operator|.
name|setItem
argument_list|(
literal|"P"
argument_list|,
name|page
argument_list|)
expr_stmt|;
block|}
comment|/**      * The rectangle on the page that this bead is part of.      *       * @return The part of the page that this bead covers.      */
specifier|public
name|PDRectangle
name|getRectangle
parameter_list|()
block|{
name|PDRectangle
name|rect
init|=
literal|null
decl_stmt|;
name|COSArray
name|array
init|=
operator|(
name|COSArray
operator|)
name|bead
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|R
argument_list|)
decl_stmt|;
if|if
condition|(
name|array
operator|!=
literal|null
condition|)
block|{
name|rect
operator|=
operator|new
name|PDRectangle
argument_list|(
name|array
argument_list|)
expr_stmt|;
block|}
return|return
name|rect
return|;
block|}
comment|/**      * Set the rectangle on the page that this bead covers.      *       * @param rect The portion of the page that this bead covers.      */
specifier|public
name|void
name|setRectangle
parameter_list|(
name|PDRectangle
name|rect
parameter_list|)
block|{
name|bead
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|R
argument_list|,
name|rect
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

