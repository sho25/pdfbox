begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright (c) 2004-2005, www.pdfbox.org  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are met:  *  * 1. Redistributions of source code must retain the above copyright notice,  *    this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright notice,  *    this list of conditions and the following disclaimer in the documentation  *    and/or other materials provided with the distribution.  * 3. Neither the name of pdfbox; nor the names of its  *    contributors may be used to endorse or promote products derived from this  *    software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * http://www.pdfbox.org  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|documentnavigation
operator|.
name|destination
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDDestinationOrAction
import|;
end_import

begin_comment
comment|/**  * This represents a destination in a PDF document.  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.6 $  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|PDDestination
implements|implements
name|PDDestinationOrAction
block|{
comment|/**      * This will create a new destination depending on the type of COSBase      * that is passed in.      *       * @param base The base level object.      *       * @return A new destination.      *       * @throws IOException If the base cannot be converted to a Destination.      */
specifier|public
specifier|static
name|PDDestination
name|create
parameter_list|(
name|COSBase
name|base
parameter_list|)
throws|throws
name|IOException
block|{
name|PDDestination
name|retval
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|base
operator|==
literal|null
condition|)
block|{
comment|//this is ok, just return null.
block|}
elseif|else
if|if
condition|(
name|base
operator|instanceof
name|COSArray
operator|&&
operator|(
operator|(
name|COSArray
operator|)
name|base
operator|)
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|COSArray
name|array
init|=
operator|(
name|COSArray
operator|)
name|base
decl_stmt|;
name|COSName
name|type
init|=
operator|(
name|COSName
operator|)
name|array
operator|.
name|getObject
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|typeString
init|=
name|type
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|typeString
operator|.
name|equals
argument_list|(
name|PDPageFitDestination
operator|.
name|TYPE
argument_list|)
operator|||
name|typeString
operator|.
name|equals
argument_list|(
name|PDPageFitDestination
operator|.
name|TYPE_BOUNDED
argument_list|)
condition|)
block|{
name|retval
operator|=
operator|new
name|PDPageFitDestination
argument_list|(
name|array
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|typeString
operator|.
name|equals
argument_list|(
name|PDPageFitHeightDestination
operator|.
name|TYPE
argument_list|)
operator|||
name|typeString
operator|.
name|equals
argument_list|(
name|PDPageFitHeightDestination
operator|.
name|TYPE_BOUNDED
argument_list|)
condition|)
block|{
name|retval
operator|=
operator|new
name|PDPageFitHeightDestination
argument_list|(
name|array
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|typeString
operator|.
name|equals
argument_list|(
name|PDPageFitRectangleDestination
operator|.
name|TYPE
argument_list|)
condition|)
block|{
name|retval
operator|=
operator|new
name|PDPageFitRectangleDestination
argument_list|(
name|array
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|typeString
operator|.
name|equals
argument_list|(
name|PDPageFitWidthDestination
operator|.
name|TYPE
argument_list|)
operator|||
name|typeString
operator|.
name|equals
argument_list|(
name|PDPageFitWidthDestination
operator|.
name|TYPE_BOUNDED
argument_list|)
condition|)
block|{
name|retval
operator|=
operator|new
name|PDPageFitWidthDestination
argument_list|(
name|array
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|typeString
operator|.
name|equals
argument_list|(
name|PDPageXYZDestination
operator|.
name|TYPE
argument_list|)
condition|)
block|{
name|retval
operator|=
operator|new
name|PDPageXYZDestination
argument_list|(
name|array
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown destination type:"
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|base
operator|instanceof
name|COSString
condition|)
block|{
name|retval
operator|=
operator|new
name|PDNamedDestination
argument_list|(
operator|(
name|COSString
operator|)
name|base
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|base
operator|instanceof
name|COSName
condition|)
block|{
name|retval
operator|=
operator|new
name|PDNamedDestination
argument_list|(
operator|(
name|COSName
operator|)
name|base
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error: can't convert to Destination "
operator|+
name|base
argument_list|)
throw|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * Return a string representation of this class.      *       * @return A human readable string.      */
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|super
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

