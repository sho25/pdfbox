begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright (c) 2005, www.pdfbox.org  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are met:  *  * 1. Redistributions of source code must retain the above copyright notice,  *    this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright notice,  *    this list of conditions and the following disclaimer in the documentation  *    and/or other materials provided with the distribution.  * 3. Neither the name of pdfbox; nor the names of its  *    contributors may be used to endorse or promote products derived from this  *    software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * http://www.pdfbox.org  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|documentnavigation
operator|.
name|destination
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSString
import|;
end_import

begin_comment
comment|/**  * This represents a destination to a page by referencing it with a name.  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.3 $  */
end_comment

begin_class
specifier|public
class|class
name|PDNamedDestination
extends|extends
name|PDDestination
block|{
specifier|private
name|COSBase
name|namedDestination
decl_stmt|;
comment|/**      * Constructor.      *       * @param dest The named destination.      */
specifier|public
name|PDNamedDestination
parameter_list|(
name|COSString
name|dest
parameter_list|)
block|{
name|namedDestination
operator|=
name|dest
expr_stmt|;
block|}
comment|/**      * Constructor.      *       * @param dest The named destination.      */
specifier|public
name|PDNamedDestination
parameter_list|(
name|COSName
name|dest
parameter_list|)
block|{
name|namedDestination
operator|=
name|dest
expr_stmt|;
block|}
comment|/**      * Default constructor.      */
specifier|public
name|PDNamedDestination
parameter_list|()
block|{
comment|//default, so do nothing
block|}
comment|/**      * Default constructor.      *       * @param dest The named destination.      */
specifier|public
name|PDNamedDestination
parameter_list|(
name|String
name|dest
parameter_list|)
block|{
name|namedDestination
operator|=
operator|new
name|COSString
argument_list|(
name|dest
argument_list|)
expr_stmt|;
block|}
comment|/**      * Convert this standard java object to a COS object.      *      * @return The cos object that matches this Java object.      */
specifier|public
name|COSBase
name|getCOSObject
parameter_list|()
block|{
return|return
name|namedDestination
return|;
block|}
comment|/**      * This will get the name of the destination.      *       * @return The name of the destination.      */
specifier|public
name|String
name|getNamedDestination
parameter_list|()
block|{
name|String
name|retval
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|namedDestination
operator|instanceof
name|COSString
condition|)
block|{
name|retval
operator|=
operator|(
operator|(
name|COSString
operator|)
name|namedDestination
operator|)
operator|.
name|getString
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|namedDestination
operator|instanceof
name|COSName
condition|)
block|{
name|retval
operator|=
operator|(
operator|(
name|COSName
operator|)
name|namedDestination
operator|)
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * Set the named destination.      *       * @param dest The new named destination.      *       * @throws IOException If there is an error setting the named destination.      */
specifier|public
name|void
name|setNamedDestination
parameter_list|(
name|String
name|dest
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|namedDestination
operator|instanceof
name|COSString
condition|)
block|{
name|COSString
name|string
init|=
operator|(
operator|(
name|COSString
operator|)
name|namedDestination
operator|)
decl_stmt|;
name|string
operator|.
name|reset
argument_list|()
expr_stmt|;
name|string
operator|.
name|append
argument_list|(
name|dest
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dest
operator|==
literal|null
condition|)
block|{
name|namedDestination
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|namedDestination
operator|=
operator|new
name|COSString
argument_list|(
name|dest
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

