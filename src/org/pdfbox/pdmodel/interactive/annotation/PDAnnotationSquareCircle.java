begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright (c) 2005, www.pdfbox.org  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are met:  *  * 1. Redistributions of source code must retain the above copyright notice,  *    this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright notice,  *    this list of conditions and the following disclaimer in the documentation  *    and/or other materials provided with the distribution.  * 3. Neither the name of pdfbox; nor the names of its  *    contributors may be used to endorse or promote products derived from this  *    software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * http://www.pdfbox.org  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDGamma
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDRectangle
import|;
end_import

begin_comment
comment|/**  * This is the class that represents a rectangular or eliptical annotation  * Introduced in PDF 1.3 specification .  *   * @author Paul King  * @version $Revision: 1.1 $  */
end_comment

begin_class
specifier|public
class|class
name|PDAnnotationSquareCircle
extends|extends
name|PDAnnotationMarkup
block|{
comment|/**      * Constant for a Rectangular type of annotation.      */
specifier|public
specifier|static
specifier|final
name|String
name|SUB_TYPE_SQUARE
init|=
literal|"Square"
decl_stmt|;
comment|/**      * Constant for an Eliptical type of annotation.      */
specifier|public
specifier|static
specifier|final
name|String
name|SUB_TYPE_CIRCLE
init|=
literal|"Circle"
decl_stmt|;
specifier|private
name|PDAnnotationSquareCircle
parameter_list|()
block|{
comment|// Must be constructed with a subType or dictionary parameter
block|}
comment|/**      * Creates a Circle or Square annotation of the specified sub type.      *       * @param subType the subtype the annotation represents.          */
specifier|public
name|PDAnnotationSquareCircle
parameter_list|(
name|String
name|subType
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|setSubtype
argument_list|(
name|subType
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a Line annotation from a COSDictionary, expected to be a correct      * object definition.      *       * @param field      *            the PDF objet to represent as a field.      */
specifier|public
name|PDAnnotationSquareCircle
parameter_list|(
name|COSDictionary
name|field
parameter_list|)
block|{
name|super
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will set interior colour of the drawn area      * Colour is in DeviceRGB colourspace.      *       * @param ic      *            colour in the DeviceRGB colourspace.      *       */
specifier|public
name|void
name|setInteriorColour
parameter_list|(
name|PDGamma
name|ic
parameter_list|)
block|{
name|getDictionary
argument_list|()
operator|.
name|setItem
argument_list|(
literal|"IC"
argument_list|,
name|ic
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will retrieve the interior colour of the drawn area      * Colour is in DeviceRGB colourspace.      *       *       * @return PDGamma object representing the colour.      *       */
specifier|public
name|PDGamma
name|getInteriorColour
parameter_list|()
block|{
name|COSArray
name|ic
init|=
operator|(
name|COSArray
operator|)
name|getDictionary
argument_list|()
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"IC"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ic
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|PDGamma
argument_list|(
name|ic
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * This will set the border effect dictionary, specifying effects to be applied      * when drawing the line.      *       * @param be The border effect dictionary to set.      *       */
specifier|public
name|void
name|setBorderEffect
parameter_list|(
name|PDBorderEffectDictionary
name|be
parameter_list|)
block|{
name|getDictionary
argument_list|()
operator|.
name|setItem
argument_list|(
literal|"BE"
argument_list|,
name|be
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will retrieve the border effect dictionary, specifying effects to be      * applied used in drawing the line.      *       * @return The border effect dictionary      */
specifier|public
name|PDBorderEffectDictionary
name|getBorderEffect
parameter_list|()
block|{
name|COSDictionary
name|be
init|=
operator|(
name|COSDictionary
operator|)
name|getDictionary
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
literal|"BE"
argument_list|)
decl_stmt|;
if|if
condition|(
name|be
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|PDBorderEffectDictionary
argument_list|(
name|be
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * This will set the rectangle difference rectangle. Giving the difference      * between the annotations rectangle and where the drawing occurs.          * (To take account of any effects applied through the BE entry forexample)      *       * @param rd the rectangle difference      *       */
specifier|public
name|void
name|setRectDifference
parameter_list|(
name|PDRectangle
name|rd
parameter_list|)
block|{
name|getDictionary
argument_list|()
operator|.
name|setItem
argument_list|(
literal|"RD"
argument_list|,
name|rd
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the rectangle difference rectangle. Giving the difference      * between the annotations rectangle and where the drawing occurs.          * (To take account of any effects applied through the BE entry forexample)      *       * @return the rectangle difference      */
specifier|public
name|PDRectangle
name|getRectDifference
parameter_list|()
block|{
name|COSArray
name|rd
init|=
operator|(
name|COSArray
operator|)
name|getDictionary
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
literal|"RD"
argument_list|)
decl_stmt|;
if|if
condition|(
name|rd
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|PDRectangle
argument_list|(
name|rd
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * This will set the sub type (and hence appearance, AP taking precedence) For      * this annotation. See the SUB_TYPE_XXX constants for valid values.      *       * @param subType The subtype of the annotation      */
specifier|public
name|void
name|setSubtype
parameter_list|(
name|String
name|subType
parameter_list|)
block|{
name|getDictionary
argument_list|()
operator|.
name|setName
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|,
name|subType
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will retrieve the sub type (and hence appearance, AP taking precedence)      * For this annotation.       *       * @return The subtype of this annotation, see the SUB_TYPE_XXX constants.      */
specifier|public
name|String
name|getSubtype
parameter_list|()
block|{
return|return
name|getDictionary
argument_list|()
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|)
return|;
block|}
block|}
end_class

end_unit

