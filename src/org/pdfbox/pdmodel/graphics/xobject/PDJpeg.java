begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *   *      http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|xobject
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|BufferedImage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|ImageIO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDDeviceRGB
import|;
end_import

begin_comment
comment|/**  * An image class for JPegs.   *   * @author mathiak  * @version $Revision: 1.5 $  */
end_comment

begin_class
specifier|public
class|class
name|PDJpeg
extends|extends
name|PDXObjectImage
block|{
specifier|private
specifier|static
specifier|final
name|List
name|DCT_FILTERS
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
static|static
block|{
name|DCT_FILTERS
operator|.
name|add
argument_list|(
name|COSName
operator|.
name|DCT_DECODE
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|DCT_FILTERS
operator|.
name|add
argument_list|(
name|COSName
operator|.
name|DCT_DECODE_ABBREVIATION
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Standard constructor.      *       * @param jpeg The COSStream from which to extract the JPeg      */
specifier|public
name|PDJpeg
parameter_list|(
name|PDStream
name|jpeg
parameter_list|)
block|{
name|super
argument_list|(
name|jpeg
argument_list|,
literal|"jpg"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Construct from a stream.      *       * @param doc The document to create the image as part of.      * @param is The stream that contains the jpeg data.      * @throws IOException If there is an error reading the jpeg data.      */
specifier|public
name|PDJpeg
parameter_list|(
name|PDDocument
name|doc
parameter_list|,
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
operator|new
name|PDStream
argument_list|(
name|doc
argument_list|,
name|is
argument_list|,
literal|true
argument_list|)
argument_list|,
literal|"jpg"
argument_list|)
expr_stmt|;
name|COSDictionary
name|dic
init|=
name|getCOSStream
argument_list|()
decl_stmt|;
name|dic
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|FILTER
argument_list|,
name|COSName
operator|.
name|DCT_DECODE
argument_list|)
expr_stmt|;
name|dic
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|,
name|COSName
operator|.
name|IMAGE
argument_list|)
expr_stmt|;
name|dic
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|TYPE
argument_list|,
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"XObject"
argument_list|)
argument_list|)
expr_stmt|;
name|BufferedImage
name|image
init|=
name|getRGBImage
argument_list|()
decl_stmt|;
name|setBitsPerComponent
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|setColorSpace
argument_list|(
name|PDDeviceRGB
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|setHeight
argument_list|(
name|image
operator|.
name|getHeight
argument_list|()
argument_list|)
expr_stmt|;
name|setWidth
argument_list|(
name|image
operator|.
name|getWidth
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Construct from a buffered image.      *       * @param doc The document to create the image as part of.      * @param bi The image to convert to a jpeg      * @throws IOException If there is an error processing the jpeg data.      */
specifier|public
name|PDJpeg
parameter_list|(
name|PDDocument
name|doc
parameter_list|,
name|BufferedImage
name|bi
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
operator|new
name|PDStream
argument_list|(
name|doc
argument_list|)
argument_list|,
literal|"jpg"
argument_list|)
expr_stmt|;
name|java
operator|.
name|io
operator|.
name|OutputStream
name|os
init|=
name|getCOSStream
argument_list|()
operator|.
name|createFilteredStream
argument_list|()
decl_stmt|;
try|try
block|{
name|ImageIO
operator|.
name|write
argument_list|(
name|bi
argument_list|,
literal|"jpeg"
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|COSDictionary
name|dic
init|=
name|getCOSStream
argument_list|()
decl_stmt|;
name|dic
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|FILTER
argument_list|,
name|COSName
operator|.
name|DCT_DECODE
argument_list|)
expr_stmt|;
name|dic
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|SUBTYPE
argument_list|,
name|COSName
operator|.
name|IMAGE
argument_list|)
expr_stmt|;
name|dic
operator|.
name|setItem
argument_list|(
name|COSName
operator|.
name|TYPE
argument_list|,
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"XObject"
argument_list|)
argument_list|)
expr_stmt|;
name|setBitsPerComponent
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|setColorSpace
argument_list|(
name|PDDeviceRGB
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|setHeight
argument_list|(
name|bi
operator|.
name|getHeight
argument_list|()
argument_list|)
expr_stmt|;
name|setWidth
argument_list|(
name|bi
operator|.
name|getWidth
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Returns an image of the JPeg, or null if JPegs are not supported. (They should be. )      * {@inheritDoc}      */
specifier|public
name|BufferedImage
name|getRGBImage
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|ImageIO
operator|.
name|read
argument_list|(
name|getPDStream
argument_list|()
operator|.
name|getPartiallyFilteredStream
argument_list|(
name|DCT_FILTERS
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * This writes the JPeg to out.       * {@inheritDoc}      */
specifier|public
name|void
name|write2OutputStream
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|data
init|=
name|getPDStream
argument_list|()
operator|.
name|getPartiallyFilteredStream
argument_list|(
name|DCT_FILTERS
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|int
name|amountRead
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
operator|(
name|amountRead
operator|=
name|data
operator|.
name|read
argument_list|(
name|buf
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|amountRead
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

