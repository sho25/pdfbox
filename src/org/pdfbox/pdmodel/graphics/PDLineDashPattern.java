begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright (c) 2003-2006, www.pdfbox.org  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are met:  *  * 1. Redistributions of source code must retain the above copyright notice,  *    this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright notice,  *    this list of conditions and the following disclaimer in the documentation  *    and/or other materials provided with the distribution.  * 3. Neither the name of pdfbox; nor the names of its  *    contributors may be used to endorse or promote products derived from this  *    software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * http://www.pdfbox.org  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
package|;
end_package

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSNumber
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|COSArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|COSObjectable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * This class represents the line dash pattern for a graphics state.  See PDF  * Reference 1.5 section 4.3.2  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.7 $  */
end_comment

begin_class
specifier|public
class|class
name|PDLineDashPattern
implements|implements
name|COSObjectable
implements|,
name|Cloneable
block|{
specifier|private
name|COSArray
name|lineDashPattern
init|=
literal|null
decl_stmt|;
comment|/**      * Creates a blank line dash pattern.  With no dashes and a phase of 0.      */
specifier|public
name|PDLineDashPattern
parameter_list|()
block|{
name|lineDashPattern
operator|=
operator|new
name|COSArray
argument_list|()
expr_stmt|;
name|lineDashPattern
operator|.
name|add
argument_list|(
operator|new
name|COSArray
argument_list|()
argument_list|)
expr_stmt|;
name|lineDashPattern
operator|.
name|add
argument_list|(
operator|new
name|COSInteger
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs a line dash pattern from an existing array.      *      * @param ldp The existing line dash pattern.      */
specifier|public
name|PDLineDashPattern
parameter_list|(
name|COSArray
name|ldp
parameter_list|)
block|{
name|lineDashPattern
operator|=
name|ldp
expr_stmt|;
block|}
comment|/**      * Constructs a line dash pattern from an existing array.      *      * @param ldp The existing line dash pattern.      * @param phase The phase for the line dash pattern.      */
specifier|public
name|PDLineDashPattern
parameter_list|(
name|COSArray
name|ldp
parameter_list|,
name|int
name|phase
parameter_list|)
block|{
name|lineDashPattern
operator|=
operator|new
name|COSArray
argument_list|()
expr_stmt|;
name|lineDashPattern
operator|.
name|add
argument_list|(
name|ldp
argument_list|)
expr_stmt|;
name|lineDashPattern
operator|.
name|add
argument_list|(
operator|new
name|COSInteger
argument_list|(
name|phase
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|Object
name|clone
parameter_list|()
block|{
name|COSArray
name|dash
init|=
name|getCOSDashPattern
argument_list|()
decl_stmt|;
name|COSArray
name|copy
init|=
operator|new
name|COSArray
argument_list|()
decl_stmt|;
name|copy
operator|.
name|addAll
argument_list|(
name|dash
argument_list|)
expr_stmt|;
name|PDLineDashPattern
name|pattern
init|=
operator|new
name|PDLineDashPattern
argument_list|(
name|copy
argument_list|,
name|getPhaseStart
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|pattern
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|COSBase
name|getCOSObject
parameter_list|()
block|{
return|return
name|lineDashPattern
return|;
block|}
comment|/**      * This will get the line dash pattern phase.  The dash phase specifies the      * distance into the dash pattern at which to start the dash.      *      * @return The line dash pattern phase.      */
specifier|public
name|int
name|getPhaseStart
parameter_list|()
block|{
name|COSNumber
name|phase
init|=
operator|(
name|COSNumber
operator|)
name|lineDashPattern
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
return|return
name|phase
operator|.
name|intValue
argument_list|()
return|;
block|}
comment|/**      * This will set the line dash pattern phase.      *      * @param phase The new line dash patter phase.      */
specifier|public
name|void
name|setPhaseStart
parameter_list|(
name|int
name|phase
parameter_list|)
block|{
name|lineDashPattern
operator|.
name|set
argument_list|(
literal|1
argument_list|,
operator|new
name|COSInteger
argument_list|(
name|phase
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will return a list of java.lang.Integer objects that represent the line      * dash pattern appearance.      *      * @return The line dash pattern.      */
specifier|public
name|List
name|getDashPattern
parameter_list|()
block|{
name|COSArray
name|dashPatterns
init|=
operator|(
name|COSArray
operator|)
name|lineDashPattern
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
return|return
name|COSArrayList
operator|.
name|convertIntegerCOSArrayToList
argument_list|(
name|dashPatterns
argument_list|)
return|;
block|}
comment|/**      * Get the line dash pattern as a COS object.      *       * @return The cos array line dash pattern.      */
specifier|public
name|COSArray
name|getCOSDashPattern
parameter_list|()
block|{
return|return
operator|(
name|COSArray
operator|)
name|lineDashPattern
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|/**      * This will replace the existing line dash pattern.      *      * @param dashPattern A list of java.lang.Integer objects.      */
specifier|public
name|void
name|setDashPattern
parameter_list|(
name|List
name|dashPattern
parameter_list|)
block|{
name|lineDashPattern
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|COSArrayList
operator|.
name|converterToCOSArray
argument_list|(
name|dashPattern
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

