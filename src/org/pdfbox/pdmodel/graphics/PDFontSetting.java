begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright (c) 2003-2006, www.pdfbox.org  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are met:  *  * 1. Redistributions of source code must retain the above copyright notice,  *    this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright notice,  *    this list of conditions and the following disclaimer in the documentation  *    and/or other materials provided with the distribution.  * 3. Neither the name of pdfbox; nor the names of its  *    contributors may be used to endorse or promote products derived from this  *    software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * http://www.pdfbox.org  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
package|;
end_package

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSFloat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSNumber
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|COSObjectable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDFontFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * This class represents a font setting used for the graphics state.  A font setting is a font and a  * font size.  Maybe there is a better name for this?  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.4 $  */
end_comment

begin_class
specifier|public
class|class
name|PDFontSetting
implements|implements
name|COSObjectable
block|{
specifier|private
name|COSArray
name|fontSetting
init|=
literal|null
decl_stmt|;
comment|/**      * Creates a blank font setting, font will be null, size will be 1.      */
specifier|public
name|PDFontSetting
parameter_list|()
block|{
name|fontSetting
operator|=
operator|new
name|COSArray
argument_list|()
expr_stmt|;
name|fontSetting
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fontSetting
operator|.
name|add
argument_list|(
operator|new
name|COSFloat
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs a font setting from an existing array.      *      * @param fs The new font setting value.      */
specifier|public
name|PDFontSetting
parameter_list|(
name|COSArray
name|fs
parameter_list|)
block|{
name|fontSetting
operator|=
name|fs
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|COSBase
name|getCOSObject
parameter_list|()
block|{
return|return
name|fontSetting
return|;
block|}
comment|/**      * This will get the font for this font setting.      *      * @return The font for this setting of null if one was not found.      *      * @throws IOException If there is an error getting the font.      */
specifier|public
name|PDFont
name|getFont
parameter_list|()
throws|throws
name|IOException
block|{
name|PDFont
name|retval
init|=
literal|null
decl_stmt|;
name|COSBase
name|font
init|=
name|fontSetting
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|font
operator|instanceof
name|COSDictionary
condition|)
block|{
name|retval
operator|=
name|PDFontFactory
operator|.
name|createFont
argument_list|(
operator|(
name|COSDictionary
operator|)
name|font
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * This will set the font for this font setting.      *      * @param font The new font.      */
specifier|public
name|void
name|setFont
parameter_list|(
name|PDFont
name|font
parameter_list|)
block|{
name|fontSetting
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|font
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the size of the font.      *      * @return The size of the font.      */
specifier|public
name|float
name|getFontSize
parameter_list|()
block|{
name|COSNumber
name|size
init|=
operator|(
name|COSNumber
operator|)
name|fontSetting
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
return|return
name|size
operator|.
name|floatValue
argument_list|()
return|;
block|}
comment|/**      * This will set the size of the font.      *      * @param size The new size of the font.      */
specifier|public
name|void
name|setFontSize
parameter_list|(
name|float
name|size
parameter_list|)
block|{
name|fontSetting
operator|.
name|set
argument_list|(
literal|1
argument_list|,
operator|new
name|COSFloat
argument_list|(
name|size
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

