begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright (c) 2004, www.pdfbox.org  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are met:  *  * 1. Redistributions of source code must retain the above copyright notice,  *    this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright notice,  *    this list of conditions and the following disclaimer in the documentation  *    and/or other materials provided with the distribution.  * 3. Neither the name of pdfbox; nor the names of its  *    contributors may be used to endorse or promote products derived from this  *    software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * http://www.pdfbox.org  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|color
operator|.
name|ColorSpace
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|ColorModel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|COSArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|function
operator|.
name|PDFunction
import|;
end_import

begin_comment
comment|/**  * This class represents a DeviceN color space.  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.4 $  */
end_comment

begin_class
specifier|public
class|class
name|PDDeviceN
extends|extends
name|PDColorSpace
block|{
comment|/**      * The name of this color space.      */
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"DeviceN"
decl_stmt|;
specifier|private
name|COSArray
name|array
decl_stmt|;
comment|/**      * Constructor.      */
specifier|public
name|PDDeviceN
parameter_list|()
block|{
name|array
operator|=
operator|new
name|COSArray
argument_list|()
expr_stmt|;
name|array
operator|.
name|add
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
name|array
operator|.
name|add
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor.      *      * @param separation The array containing all separation information.      */
specifier|public
name|PDDeviceN
parameter_list|(
name|COSArray
name|separation
parameter_list|)
block|{
name|array
operator|=
name|separation
expr_stmt|;
block|}
comment|/**      * This will return the name of the color space.  For a PDSeparation object      * this will always return "Separation"      *      * @return The name of the color space.      */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|NAME
return|;
block|}
comment|/**      * This will get the number of components that this color space is made up of.      *      * @return The number of components in this color space.      *      * @throws IOException If there is an error getting the number of color components.      */
specifier|public
name|int
name|getNumberOfComponents
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getColorantNames
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**      * Create a Java colorspace for this colorspace.      *      * @return A color space that can be used for Java AWT operations.      *      * @throws IOException If there is an error creating the color space.      */
specifier|public
name|ColorSpace
name|createColorSpace
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Not implemented"
argument_list|)
throw|;
block|}
comment|/**      * Create a Java color model for this colorspace.      *      * @param bpc The number of bits per component.      *       * @return A color model that can be used for Java AWT operations.      *      * @throws IOException If there is an error creating the color model.      */
specifier|public
name|ColorModel
name|createColorModel
parameter_list|(
name|int
name|bpc
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Not implemented"
argument_list|)
throw|;
block|}
comment|/**      * This will get the colorant names.  A list of string objects.      *      * @return A list of colorants      */
specifier|public
name|List
name|getColorantNames
parameter_list|()
block|{
name|COSArray
name|names
init|=
operator|(
name|COSArray
operator|)
name|array
operator|.
name|getObject
argument_list|(
literal|1
argument_list|)
decl_stmt|;
return|return
name|COSArrayList
operator|.
name|convertCOSNameCOSArrayToList
argument_list|(
name|names
argument_list|)
return|;
block|}
comment|/**      * This will set the list of colorants.      *      * @param names The list of colorant names.      */
specifier|public
name|void
name|setColorantNames
parameter_list|(
name|List
name|names
parameter_list|)
block|{
name|COSArray
name|namesArray
init|=
name|COSArrayList
operator|.
name|convertStringListToCOSNameCOSArray
argument_list|(
name|names
argument_list|)
decl_stmt|;
name|array
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|namesArray
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the alternate color space for this separation.      *      * @return The alternate color space.      *      * @throws IOException If there is an error getting the alternate color space.      */
specifier|public
name|PDColorSpace
name|getAlternateColorSpace
parameter_list|()
throws|throws
name|IOException
block|{
name|COSBase
name|alternate
init|=
name|array
operator|.
name|getObject
argument_list|(
literal|2
argument_list|)
decl_stmt|;
return|return
name|PDColorSpaceFactory
operator|.
name|createColorSpace
argument_list|(
name|alternate
argument_list|)
return|;
block|}
comment|/**      * This will set the alternate color space.      *      * @param cs The alternate color space.      */
specifier|public
name|void
name|setAlternateColorSpace
parameter_list|(
name|PDColorSpace
name|cs
parameter_list|)
block|{
name|COSBase
name|space
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cs
operator|!=
literal|null
condition|)
block|{
name|space
operator|=
name|cs
operator|.
name|getCOSObject
argument_list|()
expr_stmt|;
block|}
name|array
operator|.
name|set
argument_list|(
literal|2
argument_list|,
name|space
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the tint transform function.        *      * @return The tint transform function.      *       * @throws IOException if there is an error creating the function.      */
specifier|public
name|PDFunction
name|getTintTransform
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|PDFunction
operator|.
name|create
argument_list|(
name|array
operator|.
name|getObject
argument_list|(
literal|3
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * This will set the tint transform function.        *      * @param tint The tint transform function.      */
specifier|public
name|void
name|setTintTransform
parameter_list|(
name|PDFunction
name|tint
parameter_list|)
block|{
name|array
operator|.
name|set
argument_list|(
literal|3
argument_list|,
name|tint
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the attributes that are associated with the deviceN      * color space.      *      * @return The DeviceN attributes.      */
specifier|public
name|PDDeviceNAttributes
name|getAttributes
parameter_list|()
block|{
name|PDDeviceNAttributes
name|retval
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|array
operator|.
name|size
argument_list|()
operator|<
literal|5
condition|)
block|{
name|retval
operator|=
operator|new
name|PDDeviceNAttributes
argument_list|()
expr_stmt|;
name|setAttributes
argument_list|(
name|retval
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * This will set the color space attributes.  If null is passed in then      * all attribute will be removed.      *      * @param attributes The color space attributes.      */
specifier|public
name|void
name|setAttributes
parameter_list|(
name|PDDeviceNAttributes
name|attributes
parameter_list|)
block|{
if|if
condition|(
name|attributes
operator|==
literal|null
condition|)
block|{
name|array
operator|.
name|remove
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//make sure array is large enough
while|while
condition|(
name|array
operator|.
name|size
argument_list|()
operator|<
literal|5
condition|)
block|{
name|array
operator|.
name|add
argument_list|(
name|COSNull
operator|.
name|NULL
argument_list|)
expr_stmt|;
block|}
name|array
operator|.
name|set
argument_list|(
literal|4
argument_list|,
name|attributes
operator|.
name|getCOSDictionary
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

