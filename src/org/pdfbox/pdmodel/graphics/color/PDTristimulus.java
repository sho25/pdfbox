begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright (c) 2004, www.pdfbox.org  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are met:  *  * 1. Redistributions of source code must retain the above copyright notice,  *    this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright notice,  *    this list of conditions and the following disclaimer in the documentation  *    and/or other materials provided with the distribution.  * 3. Neither the name of pdfbox; nor the names of its  *    contributors may be used to endorse or promote products derived from this  *    software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * http://www.pdfbox.org  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
package|;
end_package

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSFloat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSNumber
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|COSObjectable
import|;
end_import

begin_comment
comment|/**  * A tristimulus, or collection of three floating point parameters used for  * color operations.  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.2 $  */
end_comment

begin_class
specifier|public
class|class
name|PDTristimulus
implements|implements
name|COSObjectable
block|{
specifier|private
name|COSArray
name|values
init|=
literal|null
decl_stmt|;
comment|/**      * Constructor.  Defaults all values to 0, 0, 0.      */
specifier|public
name|PDTristimulus
parameter_list|()
block|{
name|values
operator|=
operator|new
name|COSArray
argument_list|()
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
operator|new
name|COSFloat
argument_list|(
literal|0.0f
argument_list|)
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
operator|new
name|COSFloat
argument_list|(
literal|0.0f
argument_list|)
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
operator|new
name|COSFloat
argument_list|(
literal|0.0f
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor from COS object.      *      * @param array The array containing the XYZ values.      */
specifier|public
name|PDTristimulus
parameter_list|(
name|COSArray
name|array
parameter_list|)
block|{
name|values
operator|=
name|array
expr_stmt|;
block|}
comment|/**      * Constructor from COS object.      *      * @param array The array containing the XYZ values.      */
specifier|public
name|PDTristimulus
parameter_list|(
name|float
index|[]
name|array
parameter_list|)
block|{
name|values
operator|=
operator|new
name|COSArray
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|length
operator|&&
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|values
operator|.
name|add
argument_list|(
operator|new
name|COSFloat
argument_list|(
name|array
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Convert this standard java object to a COS object.      *      * @return The cos object that matches this Java object.      */
specifier|public
name|COSBase
name|getCOSObject
parameter_list|()
block|{
return|return
name|values
return|;
block|}
comment|/**      * This will get the x value of the tristimulus.      *      * @return The X value.      */
specifier|public
name|float
name|getX
parameter_list|()
block|{
return|return
operator|(
operator|(
name|COSNumber
operator|)
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|floatValue
argument_list|()
return|;
block|}
comment|/**      * This will set the x value of the tristimulus.      *      * @param x The x value for the tristimulus.      */
specifier|public
name|void
name|setX
parameter_list|(
name|float
name|x
parameter_list|)
block|{
name|values
operator|.
name|set
argument_list|(
literal|0
argument_list|,
operator|new
name|COSFloat
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the y value of the tristimulus.      *      * @return The Y value.      */
specifier|public
name|float
name|getY
parameter_list|()
block|{
return|return
operator|(
operator|(
name|COSNumber
operator|)
name|values
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|floatValue
argument_list|()
return|;
block|}
comment|/**      * This will set the y value of the tristimulus.      *      * @param y The y value for the tristimulus.      */
specifier|public
name|void
name|setY
parameter_list|(
name|float
name|y
parameter_list|)
block|{
name|values
operator|.
name|set
argument_list|(
literal|1
argument_list|,
operator|new
name|COSFloat
argument_list|(
name|y
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the z value of the tristimulus.      *      * @return The Z value.      */
specifier|public
name|float
name|getZ
parameter_list|()
block|{
return|return
operator|(
operator|(
name|COSNumber
operator|)
name|values
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|floatValue
argument_list|()
return|;
block|}
comment|/**      * This will set the z value of the tristimulus.      *      * @param z The z value for the tristimulus.      */
specifier|public
name|void
name|setZ
parameter_list|(
name|float
name|z
parameter_list|)
block|{
name|values
operator|.
name|set
argument_list|(
literal|2
argument_list|,
operator|new
name|COSFloat
argument_list|(
name|z
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

