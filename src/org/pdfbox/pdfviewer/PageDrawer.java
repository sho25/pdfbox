begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *   *      http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|pdfbox
operator|.
name|pdfviewer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Dimension
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Graphics
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Graphics2D
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|RenderingHints
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|geom
operator|.
name|GeneralPath
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDRectangle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAppearanceDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAppearanceStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|text
operator|.
name|PDTextState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|PDFStreamEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|ResourceLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|TextPosition
import|;
end_import

begin_comment
comment|/**  * This will paint a page in a PDF document to a graphics context.  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.22 $  */
end_comment

begin_class
specifier|public
class|class
name|PageDrawer
extends|extends
name|PDFStreamEngine
block|{
specifier|private
name|Graphics2D
name|graphics
decl_stmt|;
specifier|private
name|Dimension
name|pageSize
decl_stmt|;
specifier|private
name|PDPage
name|page
decl_stmt|;
specifier|private
name|List
name|lineSubPaths
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|private
name|GeneralPath
name|linePath
init|=
operator|new
name|GeneralPath
argument_list|()
decl_stmt|;
comment|/**      * Default constructor, loads properties from file.      *       * @throws IOException If there is an error loading properties from the file.      */
specifier|public
name|PageDrawer
parameter_list|()
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|ResourceLoader
operator|.
name|loadProperties
argument_list|(
literal|"Resources/PageDrawer.properties"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will draw the page to the requested context.      *      * @param g The graphics context to draw onto.      * @param p The page to draw.      * @param pageDimension The size of the page to draw.      *      * @throws IOException If there is an IO error while drawing the page.      */
specifier|public
name|void
name|drawPage
parameter_list|(
name|Graphics
name|g
parameter_list|,
name|PDPage
name|p
parameter_list|,
name|Dimension
name|pageDimension
parameter_list|)
throws|throws
name|IOException
block|{
name|graphics
operator|=
operator|(
name|Graphics2D
operator|)
name|g
expr_stmt|;
name|page
operator|=
name|p
expr_stmt|;
name|pageSize
operator|=
name|pageDimension
expr_stmt|;
name|graphics
operator|.
name|setRenderingHint
argument_list|(
name|RenderingHints
operator|.
name|KEY_ANTIALIASING
argument_list|,
name|RenderingHints
operator|.
name|VALUE_ANTIALIAS_ON
argument_list|)
expr_stmt|;
name|PDResources
name|resources
init|=
name|page
operator|.
name|findResources
argument_list|()
decl_stmt|;
name|processStream
argument_list|(
name|page
argument_list|,
name|resources
argument_list|,
name|page
operator|.
name|getContents
argument_list|()
operator|.
name|getStream
argument_list|()
argument_list|)
expr_stmt|;
name|List
name|annotations
init|=
name|page
operator|.
name|getAnnotations
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|annotations
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|PDAnnotation
name|annot
init|=
operator|(
name|PDAnnotation
operator|)
name|annotations
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|PDRectangle
name|rect
init|=
name|annot
operator|.
name|getRectangle
argument_list|()
decl_stmt|;
name|String
name|appearanceName
init|=
name|annot
operator|.
name|getAppearanceStream
argument_list|()
decl_stmt|;
name|PDAppearanceDictionary
name|appearDictionary
init|=
name|annot
operator|.
name|getAppearance
argument_list|()
decl_stmt|;
if|if
condition|(
name|appearDictionary
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|appearanceName
operator|==
literal|null
condition|)
block|{
name|appearanceName
operator|=
literal|"default"
expr_stmt|;
block|}
name|Map
name|appearanceMap
init|=
name|appearDictionary
operator|.
name|getNormalAppearance
argument_list|()
decl_stmt|;
name|PDAppearanceStream
name|appearance
init|=
operator|(
name|PDAppearanceStream
operator|)
name|appearanceMap
operator|.
name|get
argument_list|(
name|appearanceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|appearance
operator|!=
literal|null
condition|)
block|{
name|g
operator|.
name|translate
argument_list|(
operator|(
name|int
operator|)
name|rect
operator|.
name|getLowerLeftX
argument_list|()
argument_list|,
operator|(
name|int
operator|)
operator|-
name|rect
operator|.
name|getLowerLeftY
argument_list|()
argument_list|)
expr_stmt|;
comment|//g.translate( 20, -20 );
name|processSubStream
argument_list|(
name|page
argument_list|,
name|appearance
operator|.
name|getResources
argument_list|()
argument_list|,
name|appearance
operator|.
name|getStream
argument_list|()
argument_list|)
expr_stmt|;
name|g
operator|.
name|translate
argument_list|(
operator|(
name|int
operator|)
operator|-
name|rect
operator|.
name|getLowerLeftX
argument_list|()
argument_list|,
operator|(
name|int
operator|)
operator|+
name|rect
operator|.
name|getLowerLeftY
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Transformations should be done in order
comment|// 1 - Translate
comment|// 2 - Rotate
comment|// 3 - Scale
comment|// Refer to PDFReference p176 (or 188 in xpdf)
comment|//AffineTransform transform = graphics.getTransform();
comment|//transform.setToTranslate( 0, page.findMediaBox().getHeight()/2 );
comment|//transform.setToRotation((double)p.getRotation());
comment|//transform.setTransform( 1, 0, 0, 1, 0, 0 );
comment|//transform.setToScale( 1, 1 );
comment|//AffineTransform rotation = graphics.getTransform();
comment|//rotation.rotate( (page.findRotation() * Math.PI) / 180d );
comment|//graphics.setTransform( rotation );
block|}
comment|/**      * You should override this method if you want to perform an action when a      * string is being shown.      *      * @param text The string to display.      */
specifier|protected
name|void
name|showCharacter
parameter_list|(
name|TextPosition
name|text
parameter_list|)
block|{
comment|//should use colorspaces for the font color but for now assume that
comment|//the font color is black
try|try
block|{
if|if
condition|(
name|this
operator|.
name|getGraphicsState
argument_list|()
operator|.
name|getTextState
argument_list|()
operator|.
name|getRenderingMode
argument_list|()
operator|==
name|PDTextState
operator|.
name|RENDERING_MODE_FILL_TEXT
condition|)
block|{
name|graphics
operator|.
name|setColor
argument_list|(
name|this
operator|.
name|getGraphicsState
argument_list|()
operator|.
name|getNonStrokingColorSpace
argument_list|()
operator|.
name|createColor
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|getGraphicsState
argument_list|()
operator|.
name|getTextState
argument_list|()
operator|.
name|getRenderingMode
argument_list|()
operator|==
name|PDTextState
operator|.
name|RENDERING_MODE_STROKE_TEXT
condition|)
block|{
name|graphics
operator|.
name|setColor
argument_list|(
name|this
operator|.
name|getGraphicsState
argument_list|()
operator|.
name|getStrokingColorSpace
argument_list|()
operator|.
name|createColor
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//need to implement....
block|}
name|PDFont
name|font
init|=
name|text
operator|.
name|getFont
argument_list|()
decl_stmt|;
name|font
operator|.
name|drawString
argument_list|(
name|text
operator|.
name|getCharacter
argument_list|()
argument_list|,
name|graphics
argument_list|,
name|text
operator|.
name|getFontSize
argument_list|()
argument_list|,
name|text
operator|.
name|getXScale
argument_list|()
argument_list|,
name|text
operator|.
name|getYScale
argument_list|()
argument_list|,
name|text
operator|.
name|getX
argument_list|()
argument_list|,
name|text
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
name|io
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Get the graphics that we are currently drawing on.      *       * @return The graphics we are drawing on.      */
specifier|public
name|Graphics2D
name|getGraphics
parameter_list|()
block|{
return|return
name|graphics
return|;
block|}
comment|/**      * Get the page that is currently being drawn.      *       * @return The page that is being drawn.      */
specifier|public
name|PDPage
name|getPage
parameter_list|()
block|{
return|return
name|page
return|;
block|}
comment|/**      * Get the size of the page that is currently being drawn.      *       * @return The size of the page that is being drawn.      */
specifier|public
name|Dimension
name|getPageSize
parameter_list|()
block|{
return|return
name|pageSize
return|;
block|}
comment|/**      * Fix the y coordinate based on page rotation.      *       * @param x The x coordinate.      * @param y The y coordinate.      * @return The updated y coordinate.      */
specifier|public
name|double
name|fixY
parameter_list|(
name|double
name|x
parameter_list|,
name|double
name|y
parameter_list|)
block|{
name|double
name|retval
init|=
name|y
decl_stmt|;
name|int
name|rotation
init|=
name|page
operator|.
name|findRotation
argument_list|()
decl_stmt|;
if|if
condition|(
name|rotation
operator|==
literal|0
condition|)
block|{
name|retval
operator|=
name|pageSize
operator|.
name|getHeight
argument_list|()
operator|-
name|y
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rotation
operator|==
literal|90
condition|)
block|{
name|retval
operator|=
name|y
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * Get the current line path to be drawn.      *       * @return The current line path to be drawn.      */
specifier|public
name|GeneralPath
name|getLinePath
parameter_list|()
block|{
return|return
name|linePath
return|;
block|}
comment|/**      * Set the line path to draw.      *       * @param newLinePath Set the line path to draw.      */
specifier|public
name|void
name|setLinePath
parameter_list|(
name|GeneralPath
name|newLinePath
parameter_list|)
block|{
name|linePath
operator|=
name|newLinePath
expr_stmt|;
block|}
comment|/**      * Get the current list of line paths to be drawn.      *       * @return The current list of line paths to be drawn.      */
specifier|public
name|List
name|getLineSubPaths
parameter_list|()
block|{
return|return
name|lineSubPaths
return|;
block|}
comment|/**      * Set the list of line paths to draw.      *       * @param newLineSubPaths Set the list of line paths to draw.      */
specifier|public
name|void
name|setLineSubPaths
parameter_list|(
name|List
name|newLineSubPaths
parameter_list|)
block|{
name|lineSubPaths
operator|=
name|newLineSubPaths
expr_stmt|;
block|}
block|}
end_class

end_unit

