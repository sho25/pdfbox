begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *   *      http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|pdfbox
operator|.
name|exceptions
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Implementation of base object to help with error-handling.  *   * @author<a href="mailto:DanielWilson@users.sourceforge.net">Daniel Wilson</a>  * @version $Revision: 1.1 $  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|LoggingObject
block|{
specifier|private
specifier|static
name|Logger
name|logger_
decl_stmt|;
comment|//dwilson 3/15/07
specifier|protected
name|Logger
name|logger
parameter_list|()
throws|throws
name|IOException
comment|//dwilson 3/15/07
block|{
comment|//I would like to just bury any error here ... but unfortunately an error would result in a Null Reference Exception
comment|//Therefore, I might as well throw the original error.
comment|//http://www.rgagnon.com/javadetails/java-0501.html
if|if
condition|(
name|logger_
operator|==
literal|null
condition|)
block|{
name|FileHandler
name|fh
init|=
operator|new
name|FileHandler
argument_list|(
literal|"PDFBox.log"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|fh
operator|.
name|setFormatter
argument_list|(
operator|new
name|SimpleFormatter
argument_list|()
argument_list|)
expr_stmt|;
name|logger_
operator|=
name|Logger
operator|.
name|getLogger
argument_list|(
literal|"TestLog"
argument_list|)
expr_stmt|;
name|logger_
operator|.
name|addHandler
argument_list|(
name|fh
argument_list|)
expr_stmt|;
comment|/*Set the log level here.             The lower your logging level, the more stuff will be logged.             Options are:                 * OFF -- log nothing                 * SEVERE (highest value)                 * WARNING                 * INFO                 * CONFIG                 * FINE                 * FINER                 * FINEST (lowest value)              http://java.sun.com/j2se/1.4.2/docs/api/java/util/logging/Level.html                          I recommend INFO for debug builds and either SEVERE or OFF for production builds.             */
name|logger_
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|OFF
argument_list|)
expr_stmt|;
block|}
return|return
name|logger_
return|;
block|}
specifier|protected
specifier|static
name|String
name|FullStackTrace
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|String
name|sRet
decl_stmt|;
name|int
name|i
decl_stmt|;
name|StackTraceElement
index|[]
name|L
decl_stmt|;
name|sRet
operator|=
operator|new
name|String
argument_list|()
expr_stmt|;
name|L
operator|=
name|e
operator|.
name|getStackTrace
argument_list|()
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|L
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sRet
operator|=
name|sRet
operator|+
operator|(
name|L
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
operator|)
operator|+
literal|"\n"
expr_stmt|;
block|}
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sRet
operator|=
name|sRet
operator|+
literal|"Caused By \n\t"
operator|+
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
expr_stmt|;
name|sRet
operator|=
name|sRet
operator|+
name|FullStackTrace
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sRet
return|;
block|}
block|}
end_class

end_unit

