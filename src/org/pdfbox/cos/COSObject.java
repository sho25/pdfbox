begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright (c) 2003-2006, www.pdfbox.org  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are met:  *  * 1. Redistributions of source code must retain the above copyright notice,  *    this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright notice,  *    this list of conditions and the following disclaimer in the documentation  *    and/or other materials provided with the distribution.  * 3. Neither the name of pdfbox; nor the names of its  *    contributors may be used to endorse or promote products derived from this  *    software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * http://www.pdfbox.org  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|pdfbox
operator|.
name|cos
package|;
end_package

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|exceptions
operator|.
name|COSVisitorException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * This class represents a PDF object.  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.37 $  */
end_comment

begin_class
specifier|public
class|class
name|COSObject
extends|extends
name|COSBase
block|{
specifier|private
name|COSBase
name|baseObject
decl_stmt|;
specifier|private
name|COSInteger
name|objectNumber
decl_stmt|;
specifier|private
name|COSInteger
name|generationNumber
decl_stmt|;
comment|/**      * Constructor.      *      * @param object The object that this encapsulates.      *      * @throws IOException If there is an error with the object passed in.      */
specifier|public
name|COSObject
parameter_list|(
name|COSBase
name|object
parameter_list|)
throws|throws
name|IOException
block|{
name|setObject
argument_list|(
name|object
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get the dictionary object in this object that has the name key and      * if it is a pdfobjref then it will dereference that and return it.      *      * @param key The key to the value that we are searching for.      *      * @return The pdf object that matches the key.      */
specifier|public
name|COSBase
name|getDictionaryObject
parameter_list|(
name|COSName
name|key
parameter_list|)
block|{
name|COSBase
name|retval
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|baseObject
operator|instanceof
name|COSDictionary
condition|)
block|{
name|retval
operator|=
operator|(
operator|(
name|COSDictionary
operator|)
name|baseObject
operator|)
operator|.
name|getDictionaryObject
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * This will get the dictionary object in this object that has the name key.      *      * @param key The key to the value that we are searching for.      *      * @return The pdf object that matches the key.      */
specifier|public
name|COSBase
name|getItem
parameter_list|(
name|COSName
name|key
parameter_list|)
block|{
name|COSBase
name|retval
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|baseObject
operator|instanceof
name|COSDictionary
condition|)
block|{
name|retval
operator|=
operator|(
operator|(
name|COSDictionary
operator|)
name|baseObject
operator|)
operator|.
name|getItem
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * This will get the object that this object encapsulates.      *      * @return The encapsulated object.      */
specifier|public
name|COSBase
name|getObject
parameter_list|()
block|{
return|return
name|baseObject
return|;
block|}
comment|/**      * This will set the object that this object encapsulates.      *      * @param object The new object to encapsulate.      *      * @throws IOException If there is an error setting the updated object.      */
specifier|public
name|void
name|setObject
parameter_list|(
name|COSBase
name|object
parameter_list|)
throws|throws
name|IOException
block|{
name|baseObject
operator|=
name|object
expr_stmt|;
comment|/*if( baseObject == null )         {             baseObject = object;         }         else         {             //This is for when an object appears twice in the             //pdf file we really want to replace it such that             //object references still work correctly.             //see owcp-as-received.pdf for an example             if( baseObject instanceof COSDictionary )             {                 COSDictionary dic = (COSDictionary)baseObject;                 COSDictionary dicObject = (COSDictionary)object;                 dic.clear();                 dic.addAll( dicObject );             }             else if( baseObject instanceof COSArray )             {                 COSArray array = (COSArray)baseObject;                 COSArray arrObject = (COSArray)object;                 array.clear();                 for( int i=0; i<arrObject.size(); i++ )                 {                     array.add( arrObject.get( i ) );                 }             }             else if( baseObject instanceof COSStream )             {                 COSStream oldStream = (COSStream)baseObject;                 System.out.println( "object:" +  object.getClass().getName() );                 COSStream newStream = (COSStream)object;                 oldStream.replaceWithStream( newStream );             }             else if( baseObject instanceof COSInteger )             {                 COSInteger oldInt = (COSInteger)baseObject;                 COSInteger newInt = (COSInteger)object;                 oldInt.setValue( newInt.longValue() );             }             else if( baseObject == null )             {                 baseObject = object;             }             else             {                 throw new IOException( "Unknown object substitution type:" + baseObject );             }         }*/
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"COSObject{"
operator|+
operator|(
name|objectNumber
operator|==
literal|null
condition|?
literal|"unknown"
else|:
literal|""
operator|+
name|objectNumber
operator|.
name|intValue
argument_list|()
operator|)
operator|+
literal|", "
operator|+
operator|(
name|generationNumber
operator|==
literal|null
condition|?
literal|"unknown"
else|:
literal|""
operator|+
name|generationNumber
operator|.
name|intValue
argument_list|()
operator|)
operator|+
literal|"}"
return|;
block|}
comment|/** Getter for property objectNumber.      * @return Value of property objectNumber.      */
specifier|public
name|COSInteger
name|getObjectNumber
parameter_list|()
block|{
return|return
name|objectNumber
return|;
block|}
comment|/** Setter for property objectNumber.      * @param objectNum New value of property objectNumber.      */
specifier|public
name|void
name|setObjectNumber
parameter_list|(
name|COSInteger
name|objectNum
parameter_list|)
block|{
name|objectNumber
operator|=
name|objectNum
expr_stmt|;
block|}
comment|/** Getter for property generationNumber.      * @return Value of property generationNumber.      */
specifier|public
name|COSInteger
name|getGenerationNumber
parameter_list|()
block|{
return|return
name|generationNumber
return|;
block|}
comment|/** Setter for property generationNumber.      * @param generationNumberValue New value of property generationNumber.      */
specifier|public
name|void
name|setGenerationNumber
parameter_list|(
name|COSInteger
name|generationNumberValue
parameter_list|)
block|{
name|generationNumber
operator|=
name|generationNumberValue
expr_stmt|;
block|}
comment|/**      * visitor pattern double dispatch method.      *      * @param visitor The object to notify when visiting this object.      * @return any object, depending on the visitor implementation, or null      * @throws COSVisitorException If an error occurs while visiting this object.      */
specifier|public
name|Object
name|accept
parameter_list|(
name|ICOSVisitor
name|visitor
parameter_list|)
throws|throws
name|COSVisitorException
block|{
return|return
name|getObject
argument_list|()
operator|!=
literal|null
condition|?
name|getObject
argument_list|()
operator|.
name|accept
argument_list|(
name|visitor
argument_list|)
else|:
name|COSNull
operator|.
name|NULL
operator|.
name|accept
argument_list|(
name|visitor
argument_list|)
return|;
block|}
block|}
end_class

end_unit

