begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright (c) 2003, www.pdfbox.org  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are met:  *  * 1. Redistributions of source code must retain the above copyright notice,  *    this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright notice,  *    this list of conditions and the following disclaimer in the documentation  *    and/or other materials provided with the distribution.  * 3. Neither the name of pdfbox; nor the names of its  *    contributors may be used to endorse or promote products derived from this  *    software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * http://www.pdfbox.org  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|pdfbox
operator|.
name|cos
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|exceptions
operator|.
name|COSVisitorException
import|;
end_import

begin_comment
comment|/**  * This class represents a boolean value in the PDF document.  *  * @author<a href="ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.14 $  */
end_comment

begin_class
specifier|public
class|class
name|COSBoolean
extends|extends
name|COSBase
block|{
comment|/**      * The true boolean token.      */
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|TRUE_BYTES
init|=
operator|new
name|byte
index|[]
block|{
literal|116
block|,
literal|114
block|,
literal|117
block|,
literal|101
block|}
decl_stmt|;
comment|//"true".getBytes( "ISO-8859-1" );
comment|/**      * The false boolean token.      */
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|FALSE_BYTES
init|=
operator|new
name|byte
index|[]
block|{
literal|102
block|,
literal|97
block|,
literal|108
block|,
literal|115
block|,
literal|101
block|}
decl_stmt|;
comment|//"false".getBytes( "ISO-8859-1" );
comment|/**      * The PDF true value.      */
specifier|public
specifier|static
specifier|final
name|COSBoolean
name|TRUE
init|=
operator|new
name|COSBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
comment|/**      * The PDF false value.      */
specifier|public
specifier|static
specifier|final
name|COSBoolean
name|FALSE
init|=
operator|new
name|COSBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|value
decl_stmt|;
comment|/**      * Constructor.      *      * @param aValue The boolean value.      */
specifier|private
name|COSBoolean
parameter_list|(
name|boolean
name|aValue
parameter_list|)
block|{
name|value
operator|=
name|aValue
expr_stmt|;
block|}
comment|/**      * This will get the value that this object wraps.      *      * @return The boolean value of this object.      */
specifier|public
name|boolean
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
comment|/**      * This will get the value that this object wraps.      *      * @return The boolean value of this object.      */
specifier|public
name|Boolean
name|getValueAsObject
parameter_list|()
block|{
return|return
operator|(
name|value
condition|?
name|Boolean
operator|.
name|TRUE
else|:
name|Boolean
operator|.
name|FALSE
operator|)
return|;
block|}
comment|/**      * This will get the boolean value.      *      * @param value Parameter telling which boolean value to get.      *      * @return The single boolean instance that matches the parameter.      */
specifier|public
specifier|static
name|COSBoolean
name|getBoolean
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
return|return
operator|(
name|value
condition|?
name|TRUE
else|:
name|FALSE
operator|)
return|;
block|}
comment|/**      * This will get the boolean value.      *      * @param value Parameter telling which boolean value to get.      *      * @return The single boolean instance that matches the parameter.      */
specifier|public
specifier|static
name|COSBoolean
name|getBoolean
parameter_list|(
name|Boolean
name|value
parameter_list|)
block|{
return|return
name|getBoolean
argument_list|(
name|value
operator|.
name|booleanValue
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * visitor pattern double dispatch method.      *      * @param visitor The object to notify when visiting this object.      * @return any object, depending on the visitor implementation, or null      * @throws COSVisitorException If an error occurs while visiting this object.      */
specifier|public
name|Object
name|accept
parameter_list|(
name|ICOSVisitor
name|visitor
parameter_list|)
throws|throws
name|COSVisitorException
block|{
return|return
name|visitor
operator|.
name|visitFromBoolean
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**      * Return a string representation of this object.      *      * @return The string value of this object.      */
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
return|;
block|}
comment|/**      * This will write this object out to a PDF stream.      *       * @param output The stream to write this object out to.      *       * @throws IOException If an error occurs while writing out this object.      */
specifier|public
name|void
name|writePDF
parameter_list|(
name|OutputStream
name|output
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|value
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
name|TRUE_BYTES
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|output
operator|.
name|write
argument_list|(
name|FALSE_BYTES
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

