begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright (c) 2003-2006, www.pdfbox.org  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are met:  *  * 1. Redistributions of source code must retain the above copyright notice,  *    this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright notice,  *    this list of conditions and the following disclaimer in the documentation  *    and/or other materials provided with the distribution.  * 3. Neither the name of pdfbox; nor the names of its  *    contributors may be used to endorse or promote products derived from this  *    software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * http://www.pdfbox.org  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|pdfbox
operator|.
name|cos
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|filter
operator|.
name|FilterManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdfparser
operator|.
name|PDFStreamParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|exceptions
operator|.
name|COSVisitorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|io
operator|.
name|RandomAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|io
operator|.
name|RandomAccessFileInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|io
operator|.
name|RandomAccessFileOutputStream
import|;
end_import

begin_comment
comment|/**  * This class represents a stream object in a PDF document.  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.41 $  */
end_comment

begin_class
specifier|public
class|class
name|COSStream
extends|extends
name|COSDictionary
block|{
specifier|private
specifier|static
specifier|final
name|int
name|BUFFER_SIZE
init|=
literal|16384
decl_stmt|;
specifier|private
name|RandomAccess
name|file
decl_stmt|;
comment|/**      * The stream with all of the filters applied.      */
specifier|private
name|RandomAccessFileOutputStream
name|filteredStream
decl_stmt|;
comment|/**      * The stream with no filters, this contains the useful data.      */
specifier|private
name|RandomAccessFileOutputStream
name|unFilteredStream
decl_stmt|;
comment|/**      * Constructor.  Creates a new stream with an empty dictionary.      *      * @param storage The intermediate storage for the stream.      */
specifier|public
name|COSStream
parameter_list|(
name|RandomAccess
name|storage
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|file
operator|=
name|storage
expr_stmt|;
block|}
comment|/**      * Constructor.      *      * @param dictionary The dictionary that is associated with this stream.      * @param storage The intermediate storage for the stream.      */
specifier|public
name|COSStream
parameter_list|(
name|COSDictionary
name|dictionary
parameter_list|,
name|RandomAccess
name|storage
parameter_list|)
block|{
name|super
argument_list|(
name|dictionary
argument_list|)
expr_stmt|;
name|file
operator|=
name|storage
expr_stmt|;
block|}
comment|/**      * This will replace this object with the data from the new object.  This      * is used to easily maintain referential integrity when changing references      * to new objects.      *      * @param stream The stream that have the new values in it.      */
specifier|public
name|void
name|replaceWithStream
parameter_list|(
name|COSStream
name|stream
parameter_list|)
block|{
name|this
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|addAll
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|file
operator|=
name|stream
operator|.
name|file
expr_stmt|;
name|filteredStream
operator|=
name|stream
operator|.
name|filteredStream
expr_stmt|;
name|unFilteredStream
operator|=
name|stream
operator|.
name|unFilteredStream
expr_stmt|;
block|}
comment|/**      * This will get the scratch file associated with this stream.      *      * @return The scratch file where this stream is being stored.      */
specifier|public
name|RandomAccess
name|getScratchFile
parameter_list|()
block|{
return|return
name|file
return|;
block|}
comment|/**      * This will get all the tokens in the stream.      *      * @return All of the tokens in the stream.      *      * @throws IOException If there is an error parsing the stream.      */
specifier|public
name|List
name|getStreamTokens
parameter_list|()
throws|throws
name|IOException
block|{
name|PDFStreamParser
name|parser
init|=
operator|new
name|PDFStreamParser
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|()
expr_stmt|;
return|return
name|parser
operator|.
name|getTokens
argument_list|()
return|;
block|}
comment|/**      * This will get the stream with all of the filters applied.      *      * @return the bytes of the physical (endoced) stream      *      * @throws IOException when encoding/decoding causes an exception      */
specifier|public
name|InputStream
name|getFilteredStream
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|filteredStream
operator|==
literal|null
condition|)
block|{
name|doEncode
argument_list|()
expr_stmt|;
block|}
name|long
name|position
init|=
name|filteredStream
operator|.
name|getPosition
argument_list|()
decl_stmt|;
name|long
name|length
init|=
name|filteredStream
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|RandomAccessFileInputStream
name|input
init|=
operator|new
name|RandomAccessFileInputStream
argument_list|(
name|file
argument_list|,
name|position
argument_list|,
name|length
argument_list|)
decl_stmt|;
return|return
operator|new
name|BufferedInputStream
argument_list|(
name|input
argument_list|,
name|BUFFER_SIZE
argument_list|)
return|;
block|}
comment|/**      * This will get the logical content stream with none of the filters.      *      * @return the bytes of the logical (decoded) stream      *      * @throws IOException when encoding/decoding causes an exception      */
specifier|public
name|InputStream
name|getUnfilteredStream
parameter_list|()
throws|throws
name|IOException
block|{
name|InputStream
name|retval
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|unFilteredStream
operator|==
literal|null
condition|)
block|{
name|doDecode
argument_list|()
expr_stmt|;
block|}
comment|//if unFilteredStream is still null then this stream has not been
comment|//created yet, so we should return null.
if|if
condition|(
name|unFilteredStream
operator|!=
literal|null
condition|)
block|{
name|long
name|position
init|=
name|unFilteredStream
operator|.
name|getPosition
argument_list|()
decl_stmt|;
name|long
name|length
init|=
name|unFilteredStream
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|RandomAccessFileInputStream
name|input
init|=
operator|new
name|RandomAccessFileInputStream
argument_list|(
name|file
argument_list|,
name|position
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|retval
operator|=
operator|new
name|BufferedInputStream
argument_list|(
name|input
argument_list|,
name|BUFFER_SIZE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// We should check if the COSStream contains data, maybe it
comment|// has been created with a RandomAccessFile - which is not
comment|// necessary empty.
comment|// In this case, the creation was been done as an input, this should
comment|// be the unfiltered file, since no filter has been applied yet.
comment|//            if ( (file != null)&&
comment|//                    (file.length()> 0) )
comment|//            {
comment|//                retval = new RandomAccessFileInputStream( file,
comment|//                                                          0,
comment|//                                                          file.length() );
comment|//            }
comment|//            else
comment|//            {
comment|//if there is no stream data then simply return an empty stream.
name|retval
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|//            }
block|}
return|return
name|retval
return|;
block|}
comment|/**      * visitor pattern double dispatch method.      *      * @param visitor The object to notify when visiting this object.      * @return any object, depending on the visitor implementation, or null      * @throws COSVisitorException If an error occurs while visiting this object.      */
specifier|public
name|Object
name|accept
parameter_list|(
name|ICOSVisitor
name|visitor
parameter_list|)
throws|throws
name|COSVisitorException
block|{
return|return
name|visitor
operator|.
name|visitFromStream
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**      * This will decode the physical byte stream applying all of the filters to the stream.      *      * @throws IOException If there is an error applying a filter to the stream.      */
specifier|private
name|void
name|doDecode
parameter_list|()
throws|throws
name|IOException
block|{
comment|// FIXME: We shouldn't keep the same reference?
name|unFilteredStream
operator|=
name|filteredStream
expr_stmt|;
name|COSBase
name|filters
init|=
name|getFilters
argument_list|()
decl_stmt|;
if|if
condition|(
name|filters
operator|==
literal|null
condition|)
block|{
comment|//then do nothing
block|}
elseif|else
if|if
condition|(
name|filters
operator|instanceof
name|COSName
condition|)
block|{
name|doDecode
argument_list|(
operator|(
name|COSName
operator|)
name|filters
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|filters
operator|instanceof
name|COSArray
condition|)
block|{
name|COSArray
name|filterArray
init|=
operator|(
name|COSArray
operator|)
name|filters
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|filterArray
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|COSName
name|filterName
init|=
operator|(
name|COSName
operator|)
name|filterArray
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|doDecode
argument_list|(
name|filterName
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error: Unknown filter type:"
operator|+
name|filters
argument_list|)
throw|;
block|}
block|}
comment|/**      * This will decode applying a single filter on the stream.      *      * @param filterName The name of the filter.      * @param filterIndex The index of the current filter.      *      * @throws IOException If there is an error parsing the stream.      */
specifier|private
name|void
name|doDecode
parameter_list|(
name|COSName
name|filterName
parameter_list|,
name|int
name|filterIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|FilterManager
name|manager
init|=
name|getFilterManager
argument_list|()
decl_stmt|;
name|Filter
name|filter
init|=
name|manager
operator|.
name|getFilter
argument_list|(
name|filterName
argument_list|)
decl_stmt|;
name|InputStream
name|input
decl_stmt|;
name|boolean
name|done
init|=
literal|false
decl_stmt|;
name|IOException
name|exception
init|=
literal|null
decl_stmt|;
name|long
name|position
init|=
name|unFilteredStream
operator|.
name|getPosition
argument_list|()
decl_stmt|;
name|long
name|length
init|=
name|unFilteredStream
operator|.
name|getLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|length
operator|==
literal|0
condition|)
block|{
comment|//if the length is zero then don't bother trying to decode
comment|//some filters don't work when attempting to decode
comment|//with a zero length stream.  See zlib_error_01.pdf
name|unFilteredStream
operator|=
operator|new
name|RandomAccessFileOutputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|done
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|//ok this is a simple hack, sometimes we read a couple extra
comment|//bytes that shouldn't be there, so we encounter an error we will just
comment|//try again with one less byte.
for|for
control|(
name|int
name|tryCount
init|=
literal|0
init|;
operator|!
name|done
operator|&&
name|tryCount
operator|<
literal|5
condition|;
name|tryCount
operator|++
control|)
block|{
try|try
block|{
name|input
operator|=
operator|new
name|BufferedInputStream
argument_list|(
operator|new
name|RandomAccessFileInputStream
argument_list|(
name|file
argument_list|,
name|position
argument_list|,
name|length
argument_list|)
argument_list|,
name|BUFFER_SIZE
argument_list|)
expr_stmt|;
name|unFilteredStream
operator|=
operator|new
name|RandomAccessFileOutputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|filter
operator|.
name|decode
argument_list|(
name|input
argument_list|,
name|unFilteredStream
argument_list|,
name|this
argument_list|,
name|filterIndex
argument_list|)
expr_stmt|;
name|done
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
name|length
operator|--
expr_stmt|;
name|exception
operator|=
name|io
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|done
condition|)
block|{
comment|//if no good stream was found then lets try again but with the
comment|//length of data that was actually read and not length
comment|//defined in the dictionary
name|length
operator|=
name|unFilteredStream
operator|.
name|getLengthWritten
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|tryCount
init|=
literal|0
init|;
operator|!
name|done
operator|&&
name|tryCount
operator|<
literal|5
condition|;
name|tryCount
operator|++
control|)
block|{
try|try
block|{
name|input
operator|=
operator|new
name|BufferedInputStream
argument_list|(
operator|new
name|RandomAccessFileInputStream
argument_list|(
name|file
argument_list|,
name|position
argument_list|,
name|length
argument_list|)
argument_list|,
name|BUFFER_SIZE
argument_list|)
expr_stmt|;
name|unFilteredStream
operator|=
operator|new
name|RandomAccessFileOutputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|filter
operator|.
name|decode
argument_list|(
name|input
argument_list|,
name|unFilteredStream
argument_list|,
name|this
argument_list|,
name|filterIndex
argument_list|)
expr_stmt|;
name|done
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
name|length
operator|--
expr_stmt|;
name|exception
operator|=
name|io
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|done
condition|)
block|{
throw|throw
name|exception
throw|;
block|}
block|}
comment|/**      * This will encode the logical byte stream applying all of the filters to the stream.      *      * @throws IOException If there is an error applying a filter to the stream.      */
specifier|private
name|void
name|doEncode
parameter_list|()
throws|throws
name|IOException
block|{
name|filteredStream
operator|=
name|unFilteredStream
expr_stmt|;
name|COSBase
name|filters
init|=
name|getFilters
argument_list|()
decl_stmt|;
if|if
condition|(
name|filters
operator|==
literal|null
condition|)
block|{
comment|//there is no filter to apply
block|}
elseif|else
if|if
condition|(
name|filters
operator|instanceof
name|COSName
condition|)
block|{
name|doEncode
argument_list|(
operator|(
name|COSName
operator|)
name|filters
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|filters
operator|instanceof
name|COSArray
condition|)
block|{
comment|// apply filters in reverse order
name|COSArray
name|filterArray
init|=
operator|(
name|COSArray
operator|)
name|filters
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|filterArray
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|COSName
name|filterName
init|=
operator|(
name|COSName
operator|)
name|filterArray
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|doEncode
argument_list|(
name|filterName
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * This will encode applying a single filter on the stream.      *      * @param filterName The name of the filter.      * @param filterIndex The index to the filter.      *      * @throws IOException If there is an error parsing the stream.      */
specifier|private
name|void
name|doEncode
parameter_list|(
name|COSName
name|filterName
parameter_list|,
name|int
name|filterIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|FilterManager
name|manager
init|=
name|getFilterManager
argument_list|()
decl_stmt|;
name|Filter
name|filter
init|=
name|manager
operator|.
name|getFilter
argument_list|(
name|filterName
argument_list|)
decl_stmt|;
name|InputStream
name|input
decl_stmt|;
name|input
operator|=
operator|new
name|BufferedInputStream
argument_list|(
operator|new
name|RandomAccessFileInputStream
argument_list|(
name|file
argument_list|,
name|filteredStream
operator|.
name|getPosition
argument_list|()
argument_list|,
name|filteredStream
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|,
name|BUFFER_SIZE
argument_list|)
expr_stmt|;
name|filteredStream
operator|=
operator|new
name|RandomAccessFileOutputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|filter
operator|.
name|encode
argument_list|(
name|input
argument_list|,
name|filteredStream
argument_list|,
name|this
argument_list|,
name|filterIndex
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will return the filters to apply to the byte stream.      * The method will return      * - null if no filters are to be applied      * - a COSName if one filter is to be applied      * - a COSArray containing COSNames if multiple filters are to be applied      *      * @return the COSBase object representing the filters      */
specifier|public
name|COSBase
name|getFilters
parameter_list|()
block|{
return|return
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|FILTER
argument_list|)
return|;
block|}
comment|/**      * This will create a new stream for which filtered byte should be      * written to.  You probably don't want this but want to use the      * createUnfilteredStream, which is used to write raw bytes to.      *      * @return A stream that can be written to.      *      * @throws IOException If there is an error creating the stream.      */
specifier|public
name|OutputStream
name|createFilteredStream
parameter_list|()
throws|throws
name|IOException
block|{
name|filteredStream
operator|=
operator|new
name|RandomAccessFileOutputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|unFilteredStream
operator|=
literal|null
expr_stmt|;
return|return
operator|new
name|BufferedOutputStream
argument_list|(
name|filteredStream
argument_list|,
name|BUFFER_SIZE
argument_list|)
return|;
block|}
comment|/**      * This will create a new stream for which filtered byte should be      * written to.  You probably don't want this but want to use the      * createUnfilteredStream, which is used to write raw bytes to.      *      * @param expectedLength An entry where a length is expected.      *      * @return A stream that can be written to.      *      * @throws IOException If there is an error creating the stream.      */
specifier|public
name|OutputStream
name|createFilteredStream
parameter_list|(
name|COSBase
name|expectedLength
parameter_list|)
throws|throws
name|IOException
block|{
name|filteredStream
operator|=
operator|new
name|RandomAccessFileOutputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|filteredStream
operator|.
name|setExpectedLength
argument_list|(
name|expectedLength
argument_list|)
expr_stmt|;
name|unFilteredStream
operator|=
literal|null
expr_stmt|;
return|return
operator|new
name|BufferedOutputStream
argument_list|(
name|filteredStream
argument_list|,
name|BUFFER_SIZE
argument_list|)
return|;
block|}
comment|/**      * set the filters to be applied to the stream.      *      * @param filters The filters to set on this stream.      *      * @throws IOException If there is an error clearing the old filters.      */
specifier|public
name|void
name|setFilters
parameter_list|(
name|COSBase
name|filters
parameter_list|)
throws|throws
name|IOException
block|{
name|setItem
argument_list|(
name|COSName
operator|.
name|FILTER
argument_list|,
name|filters
argument_list|)
expr_stmt|;
comment|// kill cached filtered streams
name|filteredStream
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * This will create an output stream that can be written to.      *      * @return An output stream which raw data bytes should be written to.      *      * @throws IOException If there is an error creating the stream.      */
specifier|public
name|OutputStream
name|createUnfilteredStream
parameter_list|()
throws|throws
name|IOException
block|{
name|unFilteredStream
operator|=
operator|new
name|RandomAccessFileOutputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|filteredStream
operator|=
literal|null
expr_stmt|;
return|return
operator|new
name|BufferedOutputStream
argument_list|(
name|unFilteredStream
argument_list|,
name|BUFFER_SIZE
argument_list|)
return|;
block|}
block|}
end_class

end_unit

