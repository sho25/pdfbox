begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright (c) 2003-2006, www.pdfbox.org  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are met:  *  * 1. Redistributions of source code must retain the above copyright notice,  *    this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright notice,  *    this list of conditions and the following disclaimer in the documentation  *    and/or other materials provided with the distribution.  * 3. Neither the name of pdfbox; nor the names of its  *    contributors may be used to endorse or promote products derived from this  *    software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * http://www.pdfbox.org  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|pdfbox
operator|.
name|cos
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|exceptions
operator|.
name|COSVisitorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|COSObjectable
import|;
end_import

begin_comment
comment|/**  * An array of PDFBase objects as part of the PDF document.  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.24 $  */
end_comment

begin_class
specifier|public
class|class
name|COSArray
extends|extends
name|COSBase
block|{
specifier|private
name|List
name|objects
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
comment|/**      * Constructor.      */
specifier|public
name|COSArray
parameter_list|()
block|{
comment|//default constructor
block|}
comment|/**      * This will add an object to the array.      *      * @param object The object to add to the array.      */
specifier|public
name|void
name|add
parameter_list|(
name|COSBase
name|object
parameter_list|)
block|{
name|objects
operator|.
name|add
argument_list|(
name|object
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will add an object to the array.      *      * @param object The object to add to the array.      */
specifier|public
name|void
name|add
parameter_list|(
name|COSObjectable
name|object
parameter_list|)
block|{
name|objects
operator|.
name|add
argument_list|(
name|object
operator|.
name|getCOSObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add the specified object at the ith location and push the rest to the      * right.      *      * @param i The index to add at.      * @param object The object to add at that index.      */
specifier|public
name|void
name|add
parameter_list|(
name|int
name|i
parameter_list|,
name|COSBase
name|object
parameter_list|)
block|{
name|objects
operator|.
name|add
argument_list|(
name|i
argument_list|,
name|object
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will remove all of the objects in the collection.      */
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|objects
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**      * This will remove all of the objects in the collection.      *      * @param objectsList The list of objects to remove from the collection.      */
specifier|public
name|void
name|removeAll
parameter_list|(
name|Collection
name|objectsList
parameter_list|)
block|{
name|objects
operator|.
name|removeAll
argument_list|(
name|objectsList
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will retain all of the objects in the collection.      *      * @param objectsList The list of objects to retain from the collection.      */
specifier|public
name|void
name|retainAll
parameter_list|(
name|Collection
name|objectsList
parameter_list|)
block|{
name|objects
operator|.
name|retainAll
argument_list|(
name|objectsList
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will add an object to the array.      *      * @param objectsList The object to add to the array.      */
specifier|public
name|void
name|addAll
parameter_list|(
name|Collection
name|objectsList
parameter_list|)
block|{
name|objects
operator|.
name|addAll
argument_list|(
name|objectsList
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will add all objects to this array.      *      * @param objectList The objects to add.      */
specifier|public
name|void
name|addAll
parameter_list|(
name|COSArray
name|objectList
parameter_list|)
block|{
if|if
condition|(
name|objectList
operator|!=
literal|null
condition|)
block|{
name|objects
operator|.
name|addAll
argument_list|(
name|objectList
operator|.
name|objects
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Add the specified object at the ith location and push the rest to the      * right.      *      * @param i The index to add at.      * @param objectList The object to add at that index.      */
specifier|public
name|void
name|addAll
parameter_list|(
name|int
name|i
parameter_list|,
name|Collection
name|objectList
parameter_list|)
block|{
name|objects
operator|.
name|addAll
argument_list|(
name|i
argument_list|,
name|objectList
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will set an object at a specific index.      *      * @param index zero based index into array.      * @param object The object to set.      */
specifier|public
name|void
name|set
parameter_list|(
name|int
name|index
parameter_list|,
name|COSBase
name|object
parameter_list|)
block|{
name|objects
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|object
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will set an object at a specific index.      *      * @param index zero based index into array.      * @param intVal The object to set.      */
specifier|public
name|void
name|set
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|intVal
parameter_list|)
block|{
name|objects
operator|.
name|set
argument_list|(
name|index
argument_list|,
operator|new
name|COSInteger
argument_list|(
name|intVal
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will set an object at a specific index.      *      * @param index zero based index into array.      * @param object The object to set.      */
specifier|public
name|void
name|set
parameter_list|(
name|int
name|index
parameter_list|,
name|COSObjectable
name|object
parameter_list|)
block|{
name|COSBase
name|base
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|object
operator|!=
literal|null
condition|)
block|{
name|base
operator|=
name|object
operator|.
name|getCOSObject
argument_list|()
expr_stmt|;
block|}
name|objects
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|base
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will get an object from the array.  This will dereference the object.      * If the object is COSNull then null will be returned.      *      * @param index The index into the array to get the object.      *      * @return The object at the requested index.      */
specifier|public
name|COSBase
name|getObject
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Object
name|obj
init|=
name|objects
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|COSObject
condition|)
block|{
name|obj
operator|=
operator|(
operator|(
name|COSObject
operator|)
name|obj
operator|)
operator|.
name|getObject
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|COSNull
condition|)
block|{
name|obj
operator|=
literal|null
expr_stmt|;
block|}
return|return
operator|(
name|COSBase
operator|)
name|obj
return|;
block|}
comment|/**      * This will get an object from the array.  This will NOT derefernce      * the COS object.      *      * @param index The index into the array to get the object.      *      * @return The object at the requested index.      */
specifier|public
name|COSBase
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
operator|(
name|COSBase
operator|)
name|objects
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
comment|/**      * Get the value of the array as an integer.      *       * @param index The index into the list.      *       * @return The value at that index or -1 if it is null.      */
specifier|public
name|int
name|getInt
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|getInt
argument_list|(
name|index
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/**      * Get the value of the array as an integer, return the default if it does      * not exist.      *       * @param index The value of the array.      * @param defaultValue The value to return if the value is null.      * @return The value at the index or the defaultValue.      */
specifier|public
name|int
name|getInt
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|defaultValue
parameter_list|)
block|{
name|int
name|retval
init|=
name|defaultValue
decl_stmt|;
if|if
condition|(
name|defaultValue
operator|<
name|size
argument_list|()
condition|)
block|{
name|COSNumber
name|number
init|=
operator|(
name|COSNumber
operator|)
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|number
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
name|number
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|retval
return|;
block|}
comment|/**      * Set the value in the array as an integer.      *       * @param index The index into the array.      * @param value The value to set.      */
specifier|public
name|void
name|setInt
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|value
parameter_list|)
block|{
name|set
argument_list|(
name|index
argument_list|,
operator|new
name|COSInteger
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the value in the array as a name.      * @param index The index into the array.      * @param name The name to set in the array.      */
specifier|public
name|void
name|setName
parameter_list|(
name|int
name|index
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|set
argument_list|(
name|index
argument_list|,
name|COSName
operator|.
name|getPDFName
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the value of the array as a string.      *       * @param index The index into the array.      * @return The name converted to a string or null if it does not exist.      */
specifier|public
name|String
name|getName
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|getName
argument_list|(
name|index
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Get an entry in the array that is expected to be a COSName.      * @param index The index into the array.      * @param defaultValue The value to return if it is null.      * @return The value at the index or defaultValue if none is found.      */
specifier|public
name|String
name|getName
parameter_list|(
name|int
name|index
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
name|String
name|retval
init|=
name|defaultValue
decl_stmt|;
if|if
condition|(
name|index
operator|<
name|size
argument_list|()
condition|)
block|{
name|COSName
name|name
init|=
operator|(
name|COSName
operator|)
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
name|name
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|retval
return|;
block|}
comment|/**      * Set the value in the array as a string.      * @param index The index into the array.      * @param string The string to set in the array.      */
specifier|public
name|void
name|setString
parameter_list|(
name|int
name|index
parameter_list|,
name|String
name|string
parameter_list|)
block|{
name|set
argument_list|(
name|index
argument_list|,
operator|new
name|COSString
argument_list|(
name|string
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the value of the array as a string.      *       * @param index The index into the array.      * @return The string or null if it does not exist.      */
specifier|public
name|String
name|getString
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|getString
argument_list|(
name|index
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Get an entry in the array that is expected to be a COSName.      * @param index The index into the array.      * @param defaultValue The value to return if it is null.      * @return The value at the index or defaultValue if none is found.      */
specifier|public
name|String
name|getString
parameter_list|(
name|int
name|index
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
name|String
name|retval
init|=
name|defaultValue
decl_stmt|;
if|if
condition|(
name|index
operator|<
name|size
argument_list|()
condition|)
block|{
name|COSString
name|string
init|=
operator|(
name|COSString
operator|)
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|string
operator|!=
literal|null
condition|)
block|{
name|retval
operator|=
name|string
operator|.
name|getString
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|retval
return|;
block|}
comment|/**      * This will get the size of this array.      *      * @return The number of elements in the array.      */
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|objects
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**      * This will remove an element from the array.      *      * @param i The index of the object to remove.      *      * @return The object that was removed.      */
specifier|public
name|COSBase
name|remove
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
operator|(
name|COSBase
operator|)
name|objects
operator|.
name|remove
argument_list|(
name|i
argument_list|)
return|;
block|}
comment|/**      * This will remove an element from the array.      *      * @param o The object to remove.      *      * @return The object that was removed.      */
specifier|public
name|boolean
name|remove
parameter_list|(
name|COSBase
name|o
parameter_list|)
block|{
return|return
name|objects
operator|.
name|remove
argument_list|(
name|o
argument_list|)
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"COSArray{"
operator|+
name|objects
operator|+
literal|"}"
return|;
block|}
comment|/**      * Get access to the list.      *      * @return an iterator over the array elements      */
specifier|public
name|Iterator
name|iterator
parameter_list|()
block|{
return|return
name|objects
operator|.
name|iterator
argument_list|()
return|;
block|}
comment|/**      * This will return the index of the entry or -1 if it is not found.      *      * @param object The object to search for.      * @return The index of the object or -1.      */
specifier|public
name|int
name|indexOf
parameter_list|(
name|COSBase
name|object
parameter_list|)
block|{
name|int
name|retval
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|retval
operator|<
literal|0
operator|&&
name|i
operator|<
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|object
argument_list|)
condition|)
block|{
name|retval
operator|=
name|i
expr_stmt|;
block|}
block|}
return|return
name|retval
return|;
block|}
comment|/**      * This will add null values until the size of the array is at least       * as large as the parameter.  If the array is already larger than the      * parameter then nothing is done.      *       * @param size The desired size of the array.      */
specifier|public
name|void
name|growToSize
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|growToSize
argument_list|(
name|size
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will add the object until the size of the array is at least       * as large as the parameter.  If the array is already larger than the      * parameter then nothing is done.      *       * @param size The desired size of the array.      * @param object The object to fill the array with.      */
specifier|public
name|void
name|growToSize
parameter_list|(
name|int
name|size
parameter_list|,
name|COSBase
name|object
parameter_list|)
block|{
while|while
condition|(
name|size
argument_list|()
operator|<
name|size
condition|)
block|{
name|add
argument_list|(
name|object
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * visitor pattern double dispatch method.      *      * @param visitor The object to notify when visiting this object.      * @return any object, depending on the visitor implementation, or null      * @throws COSVisitorException If an error occurs while visiting this object.      */
specifier|public
name|Object
name|accept
parameter_list|(
name|ICOSVisitor
name|visitor
parameter_list|)
throws|throws
name|COSVisitorException
block|{
return|return
name|visitor
operator|.
name|visitFromArray
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**      * This will take an COSArray of numbers and convert it to a float[].      *       * @return This COSArray as an array of float numbers.      */
specifier|public
name|float
index|[]
name|toFloatArray
parameter_list|()
block|{
name|float
index|[]
name|retval
init|=
operator|new
name|float
index|[
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|retval
index|[
name|i
index|]
operator|=
operator|(
operator|(
name|COSNumber
operator|)
name|getObject
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|floatValue
argument_list|()
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * Clear the current contents of the COSArray and set it with the float[].      *       * @param value The new value of the float array.      */
specifier|public
name|void
name|setFloatArray
parameter_list|(
name|float
index|[]
name|value
parameter_list|)
block|{
name|this
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|value
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|add
argument_list|(
operator|new
name|COSFloat
argument_list|(
name|value
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

