begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *   *      http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|pdfbox
operator|.
name|encryption
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|exceptions
operator|.
name|CryptographyException
import|;
end_import

begin_comment
comment|/**  * This class will deal with PDF encryption algorithms.  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.15 $  *   * @deprecated use the new security layer instead  *   * @see org.pdfbox.pdmodel.encryption.StandardSecurityHandler  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|PDFEncryption
block|{
specifier|private
name|ARCFour
name|rc4
init|=
operator|new
name|ARCFour
argument_list|()
decl_stmt|;
comment|/**      * The encryption padding defined in the PDF 1.4 Spec algorithm 3.2.      */
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|ENCRYPT_PADDING
init|=
block|{
operator|(
name|byte
operator|)
literal|0x28
block|,
operator|(
name|byte
operator|)
literal|0xBF
block|,
operator|(
name|byte
operator|)
literal|0x4E
block|,
operator|(
name|byte
operator|)
literal|0x5E
block|,
operator|(
name|byte
operator|)
literal|0x4E
block|,
operator|(
name|byte
operator|)
literal|0x75
block|,
operator|(
name|byte
operator|)
literal|0x8A
block|,
operator|(
name|byte
operator|)
literal|0x41
block|,
operator|(
name|byte
operator|)
literal|0x64
block|,
operator|(
name|byte
operator|)
literal|0x00
block|,
operator|(
name|byte
operator|)
literal|0x4E
block|,
operator|(
name|byte
operator|)
literal|0x56
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|,
operator|(
name|byte
operator|)
literal|0xFA
block|,
operator|(
name|byte
operator|)
literal|0x01
block|,
operator|(
name|byte
operator|)
literal|0x08
block|,
operator|(
name|byte
operator|)
literal|0x2E
block|,
operator|(
name|byte
operator|)
literal|0x2E
block|,
operator|(
name|byte
operator|)
literal|0x00
block|,
operator|(
name|byte
operator|)
literal|0xB6
block|,
operator|(
name|byte
operator|)
literal|0xD0
block|,
operator|(
name|byte
operator|)
literal|0x68
block|,
operator|(
name|byte
operator|)
literal|0x3E
block|,
operator|(
name|byte
operator|)
literal|0x80
block|,
operator|(
name|byte
operator|)
literal|0x2F
block|,
operator|(
name|byte
operator|)
literal|0x0C
block|,
operator|(
name|byte
operator|)
literal|0xA9
block|,
operator|(
name|byte
operator|)
literal|0xFE
block|,
operator|(
name|byte
operator|)
literal|0x64
block|,
operator|(
name|byte
operator|)
literal|0x53
block|,
operator|(
name|byte
operator|)
literal|0x69
block|,
operator|(
name|byte
operator|)
literal|0x7A
block|}
decl_stmt|;
comment|/**      * This will encrypt a piece of data.      *      * @param objectNumber The id for the object.      * @param genNumber The generation id for the object.      * @param key The key used to encrypt the data.      * @param data The data to encrypt/decrypt.      * @param output The stream to write to.      *      * @throws CryptographyException If there is an error encrypting the data.      * @throws IOException If there is an io error.      */
specifier|public
specifier|final
name|void
name|encryptData
parameter_list|(
name|long
name|objectNumber
parameter_list|,
name|long
name|genNumber
parameter_list|,
name|byte
index|[]
name|key
parameter_list|,
name|InputStream
name|data
parameter_list|,
name|OutputStream
name|output
parameter_list|)
throws|throws
name|CryptographyException
throws|,
name|IOException
block|{
name|byte
index|[]
name|newKey
init|=
operator|new
name|byte
index|[
name|key
operator|.
name|length
operator|+
literal|5
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|key
argument_list|,
literal|0
argument_list|,
name|newKey
argument_list|,
literal|0
argument_list|,
name|key
operator|.
name|length
argument_list|)
expr_stmt|;
comment|//PDF 1.4 reference pg 73
comment|//step 1
comment|//we have the reference
comment|//step 2
name|newKey
index|[
name|newKey
operator|.
name|length
operator|-
literal|5
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|objectNumber
operator|&
literal|0xff
argument_list|)
expr_stmt|;
name|newKey
index|[
name|newKey
operator|.
name|length
operator|-
literal|4
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|objectNumber
operator|>>
literal|8
operator|)
operator|&
literal|0xff
argument_list|)
expr_stmt|;
name|newKey
index|[
name|newKey
operator|.
name|length
operator|-
literal|3
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|objectNumber
operator|>>
literal|16
operator|)
operator|&
literal|0xff
argument_list|)
expr_stmt|;
name|newKey
index|[
name|newKey
operator|.
name|length
operator|-
literal|2
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|genNumber
operator|&
literal|0xff
argument_list|)
expr_stmt|;
name|newKey
index|[
name|newKey
operator|.
name|length
operator|-
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|genNumber
operator|>>
literal|8
operator|)
operator|&
literal|0xff
argument_list|)
expr_stmt|;
comment|//step 3
name|byte
index|[]
name|digestedKey
init|=
literal|null
decl_stmt|;
try|try
block|{
name|MessageDigest
name|md
init|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"MD5"
argument_list|)
decl_stmt|;
name|digestedKey
operator|=
name|md
operator|.
name|digest
argument_list|(
name|newKey
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CryptographyException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|//step 4
name|int
name|length
init|=
name|Math
operator|.
name|min
argument_list|(
name|newKey
operator|.
name|length
argument_list|,
literal|16
argument_list|)
decl_stmt|;
name|byte
index|[]
name|finalKey
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|digestedKey
argument_list|,
literal|0
argument_list|,
name|finalKey
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|rc4
operator|.
name|setKey
argument_list|(
name|finalKey
argument_list|)
expr_stmt|;
name|rc4
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|output
argument_list|)
expr_stmt|;
name|output
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
comment|/**      * This will get the user password from the owner password and the documents o value.      *      * @param ownerPassword The plaintext owner password.      * @param o The document's o entry.      * @param revision The document revision number.      * @param length The length of the encryption.      *      * @return The plaintext padded user password.      *      * @throws CryptographyException If there is an error getting the user password.      * @throws IOException If there is an error reading data.      */
specifier|public
specifier|final
name|byte
index|[]
name|getUserPassword
parameter_list|(
name|byte
index|[]
name|ownerPassword
parameter_list|,
name|byte
index|[]
name|o
parameter_list|,
name|int
name|revision
parameter_list|,
name|long
name|length
parameter_list|)
throws|throws
name|CryptographyException
throws|,
name|IOException
block|{
try|try
block|{
name|ByteArrayOutputStream
name|result
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
comment|//3.3 STEP 1
name|byte
index|[]
name|ownerPadded
init|=
name|truncateOrPad
argument_list|(
name|ownerPassword
argument_list|)
decl_stmt|;
comment|//3.3 STEP 2
name|MessageDigest
name|md
init|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"MD5"
argument_list|)
decl_stmt|;
name|md
operator|.
name|update
argument_list|(
name|ownerPadded
argument_list|)
expr_stmt|;
name|byte
index|[]
name|digest
init|=
name|md
operator|.
name|digest
argument_list|()
decl_stmt|;
comment|//3.3 STEP 3
if|if
condition|(
name|revision
operator|==
literal|3
operator|||
name|revision
operator|==
literal|4
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|50
condition|;
name|i
operator|++
control|)
block|{
name|md
operator|.
name|reset
argument_list|()
expr_stmt|;
name|md
operator|.
name|update
argument_list|(
name|digest
argument_list|)
expr_stmt|;
name|digest
operator|=
name|md
operator|.
name|digest
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|revision
operator|==
literal|2
operator|&&
name|length
operator|!=
literal|5
condition|)
block|{
throw|throw
operator|new
name|CryptographyException
argument_list|(
literal|"Error: Expected length=5 actual="
operator|+
name|length
argument_list|)
throw|;
block|}
comment|//3.3 STEP 4
name|byte
index|[]
name|rc4Key
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|digest
argument_list|,
literal|0
argument_list|,
name|rc4Key
argument_list|,
literal|0
argument_list|,
operator|(
name|int
operator|)
name|length
argument_list|)
expr_stmt|;
comment|//3.7 step 2
if|if
condition|(
name|revision
operator|==
literal|2
condition|)
block|{
name|rc4
operator|.
name|setKey
argument_list|(
name|rc4Key
argument_list|)
expr_stmt|;
name|rc4
operator|.
name|write
argument_list|(
name|o
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|revision
operator|==
literal|3
operator|||
name|revision
operator|==
literal|4
condition|)
block|{
comment|/**                 byte[] iterationKey = new byte[ rc4Key.length ];                 byte[] dataToEncrypt = o;                 for( int i=19; i>=0; i-- )                 {                     System.arraycopy( rc4Key, 0, iterationKey, 0, rc4Key.length );                     for( int j=0; j< iterationKey.length; j++ )                     {                         iterationKey[j] = (byte)(iterationKey[j] ^ (byte)i);                     }                     rc4.setKey( iterationKey );                     rc4.write( dataToEncrypt, result );                     dataToEncrypt = result.toByteArray();                     result.reset();                 }                 result.write( dataToEncrypt, 0, dataToEncrypt.length );                 */
name|byte
index|[]
name|iterationKey
init|=
operator|new
name|byte
index|[
name|rc4Key
operator|.
name|length
index|]
decl_stmt|;
name|byte
index|[]
name|otemp
init|=
operator|new
name|byte
index|[
name|o
operator|.
name|length
index|]
decl_stmt|;
comment|//sm
name|System
operator|.
name|arraycopy
argument_list|(
name|o
argument_list|,
literal|0
argument_list|,
name|otemp
argument_list|,
literal|0
argument_list|,
name|o
operator|.
name|length
argument_list|)
expr_stmt|;
comment|//sm
name|rc4
operator|.
name|write
argument_list|(
name|o
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|//sm
for|for
control|(
name|int
name|i
init|=
literal|19
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|rc4Key
argument_list|,
literal|0
argument_list|,
name|iterationKey
argument_list|,
literal|0
argument_list|,
name|rc4Key
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|iterationKey
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|iterationKey
index|[
name|j
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|iterationKey
index|[
name|j
index|]
operator|^
operator|(
name|byte
operator|)
name|i
argument_list|)
expr_stmt|;
block|}
name|rc4
operator|.
name|setKey
argument_list|(
name|iterationKey
argument_list|)
expr_stmt|;
name|result
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|//sm
name|rc4
operator|.
name|write
argument_list|(
name|otemp
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|//sm
name|otemp
operator|=
name|result
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
comment|//sm
block|}
block|}
return|return
name|result
operator|.
name|toByteArray
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CryptographyException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * This will tell if this is the owner password or not.      *      * @param ownerPassword The plaintext owner password.      * @param u The U value from the PDF Document.      * @param o The owner password hash.      * @param permissions The document permissions.      * @param id The document id.      * @param revision The revision of the encryption.      * @param length The length of the encryption key.      *      * @return true if the owner password matches the one from the document.      *      * @throws CryptographyException If there is an error while executing crypt functions.      * @throws IOException If there is an error while checking owner password.      */
specifier|public
specifier|final
name|boolean
name|isOwnerPassword
parameter_list|(
name|byte
index|[]
name|ownerPassword
parameter_list|,
name|byte
index|[]
name|u
parameter_list|,
name|byte
index|[]
name|o
parameter_list|,
name|int
name|permissions
parameter_list|,
name|byte
index|[]
name|id
parameter_list|,
name|int
name|revision
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|CryptographyException
throws|,
name|IOException
block|{
name|byte
index|[]
name|userPassword
init|=
name|getUserPassword
argument_list|(
name|ownerPassword
argument_list|,
name|o
argument_list|,
name|revision
argument_list|,
name|length
argument_list|)
decl_stmt|;
return|return
name|isUserPassword
argument_list|(
name|userPassword
argument_list|,
name|u
argument_list|,
name|o
argument_list|,
name|permissions
argument_list|,
name|id
argument_list|,
name|revision
argument_list|,
name|length
argument_list|)
return|;
block|}
comment|/**      * This will tell if this is a valid user password.      *      * Algorithm 3.6 pg 80      *      * @param password The password to test.      * @param u The U value from the PDF Document.      * @param o The owner password hash.      * @param permissions The document permissions.      * @param id The document id.      * @param revision The revision of the encryption.      * @param length The length of the encryption key.      *      * @return true If this is the correct user password.      *      * @throws CryptographyException If there is an error computing the value.      * @throws IOException If there is an IO error while computing the owners password.      */
specifier|public
specifier|final
name|boolean
name|isUserPassword
parameter_list|(
name|byte
index|[]
name|password
parameter_list|,
name|byte
index|[]
name|u
parameter_list|,
name|byte
index|[]
name|o
parameter_list|,
name|int
name|permissions
parameter_list|,
name|byte
index|[]
name|id
parameter_list|,
name|int
name|revision
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|CryptographyException
throws|,
name|IOException
block|{
name|boolean
name|matches
init|=
literal|false
decl_stmt|;
comment|//STEP 1
name|byte
index|[]
name|computedValue
init|=
name|computeUserPassword
argument_list|(
name|password
argument_list|,
name|o
argument_list|,
name|permissions
argument_list|,
name|id
argument_list|,
name|revision
argument_list|,
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|revision
operator|==
literal|2
condition|)
block|{
comment|//STEP 2
name|matches
operator|=
name|arraysEqual
argument_list|(
name|u
argument_list|,
name|computedValue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|revision
operator|==
literal|3
operator|||
name|revision
operator|==
literal|4
condition|)
block|{
comment|//STEP 2
name|matches
operator|=
name|arraysEqual
argument_list|(
name|u
argument_list|,
name|computedValue
argument_list|,
literal|16
argument_list|)
expr_stmt|;
block|}
return|return
name|matches
return|;
block|}
comment|/**      * This will compare two byte[] for equality for count number of bytes.      *      * @param first The first byte array.      * @param second The second byte array.      * @param count The number of bytes to compare.      *      * @return true If the arrays contain the exact same data.      */
specifier|private
specifier|final
name|boolean
name|arraysEqual
parameter_list|(
name|byte
index|[]
name|first
parameter_list|,
name|byte
index|[]
name|second
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|boolean
name|equal
init|=
name|first
operator|.
name|length
operator|>=
name|count
operator|&&
name|second
operator|.
name|length
operator|>=
name|count
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
operator|&&
name|equal
condition|;
name|i
operator|++
control|)
block|{
name|equal
operator|=
name|first
index|[
name|i
index|]
operator|==
name|second
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
name|equal
return|;
block|}
comment|/**      * This will compare two byte[] for equality.      *      * @param first The first byte array.      * @param second The second byte array.      *      * @return true If the arrays contain the exact same data.      */
specifier|private
specifier|final
name|boolean
name|arraysEqual
parameter_list|(
name|byte
index|[]
name|first
parameter_list|,
name|byte
index|[]
name|second
parameter_list|)
block|{
name|boolean
name|equal
init|=
name|first
operator|.
name|length
operator|==
name|second
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|first
operator|.
name|length
operator|&&
name|equal
condition|;
name|i
operator|++
control|)
block|{
name|equal
operator|=
name|first
index|[
name|i
index|]
operator|==
name|second
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
name|equal
return|;
block|}
comment|/**      * This will compute the user password hash.      *      * @param password The plain text password.      * @param o The owner password hash.      * @param permissions The document permissions.      * @param id The document id.      * @param revision The revision of the encryption.      * @param length The length of the encryption key.      *      * @return The user password.      *      * @throws CryptographyException If there is an error computing the user password.      * @throws IOException If there is an IO error.      */
specifier|public
specifier|final
name|byte
index|[]
name|computeUserPassword
parameter_list|(
name|byte
index|[]
name|password
parameter_list|,
name|byte
index|[]
name|o
parameter_list|,
name|int
name|permissions
parameter_list|,
name|byte
index|[]
name|id
parameter_list|,
name|int
name|revision
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|CryptographyException
throws|,
name|IOException
block|{
name|ByteArrayOutputStream
name|result
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
comment|//STEP 1
name|byte
index|[]
name|encryptionKey
init|=
name|computeEncryptedKey
argument_list|(
name|password
argument_list|,
name|o
argument_list|,
name|permissions
argument_list|,
name|id
argument_list|,
name|revision
argument_list|,
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|revision
operator|==
literal|2
condition|)
block|{
comment|//STEP 2
name|rc4
operator|.
name|setKey
argument_list|(
name|encryptionKey
argument_list|)
expr_stmt|;
name|rc4
operator|.
name|write
argument_list|(
name|ENCRYPT_PADDING
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|revision
operator|==
literal|3
operator|||
name|revision
operator|==
literal|4
condition|)
block|{
try|try
block|{
comment|//STEP 2
name|MessageDigest
name|md
init|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"MD5"
argument_list|)
decl_stmt|;
comment|//md.update( truncateOrPad( password ) );
name|md
operator|.
name|update
argument_list|(
name|ENCRYPT_PADDING
argument_list|)
expr_stmt|;
comment|//STEP 3
name|md
operator|.
name|update
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|md
operator|.
name|digest
argument_list|()
argument_list|)
expr_stmt|;
comment|//STEP 4 and 5
name|byte
index|[]
name|iterationKey
init|=
operator|new
name|byte
index|[
name|encryptionKey
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|encryptionKey
argument_list|,
literal|0
argument_list|,
name|iterationKey
argument_list|,
literal|0
argument_list|,
name|iterationKey
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|iterationKey
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|iterationKey
index|[
name|j
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|iterationKey
index|[
name|j
index|]
operator|^
name|i
argument_list|)
expr_stmt|;
block|}
name|rc4
operator|.
name|setKey
argument_list|(
name|iterationKey
argument_list|)
expr_stmt|;
name|ByteArrayInputStream
name|input
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|result
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|.
name|reset
argument_list|()
expr_stmt|;
name|rc4
operator|.
name|write
argument_list|(
name|input
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
comment|//step 6
name|byte
index|[]
name|finalResult
init|=
operator|new
name|byte
index|[
literal|32
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|result
operator|.
name|toByteArray
argument_list|()
argument_list|,
literal|0
argument_list|,
name|finalResult
argument_list|,
literal|0
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|ENCRYPT_PADDING
argument_list|,
literal|0
argument_list|,
name|finalResult
argument_list|,
literal|16
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|result
operator|.
name|reset
argument_list|()
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|finalResult
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CryptographyException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|result
operator|.
name|toByteArray
argument_list|()
return|;
block|}
comment|/**      * This will compute the encrypted key.      *      * @param password The password used to compute the encrypted key.      * @param o The owner password hash.      * @param permissions The permissions for the document.      * @param id The document id.      * @param revision The security revision.      * @param length The length of the encryption key.      *      * @return The encryption key.      *      * @throws CryptographyException If there is an error computing the key.      */
specifier|public
specifier|final
name|byte
index|[]
name|computeEncryptedKey
parameter_list|(
name|byte
index|[]
name|password
parameter_list|,
name|byte
index|[]
name|o
parameter_list|,
name|int
name|permissions
parameter_list|,
name|byte
index|[]
name|id
parameter_list|,
name|int
name|revision
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|CryptographyException
block|{
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
try|try
block|{
comment|//PDFReference 1.4 pg 78
comment|//step1
name|byte
index|[]
name|padded
init|=
name|truncateOrPad
argument_list|(
name|password
argument_list|)
decl_stmt|;
comment|//step 2
name|MessageDigest
name|md
init|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"MD5"
argument_list|)
decl_stmt|;
name|md
operator|.
name|update
argument_list|(
name|padded
argument_list|)
expr_stmt|;
comment|//step 3
name|md
operator|.
name|update
argument_list|(
name|o
argument_list|)
expr_stmt|;
comment|//step 4
name|byte
name|zero
init|=
call|(
name|byte
call|)
argument_list|(
name|permissions
operator|>>>
literal|0
argument_list|)
decl_stmt|;
name|byte
name|one
init|=
call|(
name|byte
call|)
argument_list|(
name|permissions
operator|>>>
literal|8
argument_list|)
decl_stmt|;
name|byte
name|two
init|=
call|(
name|byte
call|)
argument_list|(
name|permissions
operator|>>>
literal|16
argument_list|)
decl_stmt|;
name|byte
name|three
init|=
call|(
name|byte
call|)
argument_list|(
name|permissions
operator|>>>
literal|24
argument_list|)
decl_stmt|;
name|md
operator|.
name|update
argument_list|(
name|zero
argument_list|)
expr_stmt|;
name|md
operator|.
name|update
argument_list|(
name|one
argument_list|)
expr_stmt|;
name|md
operator|.
name|update
argument_list|(
name|two
argument_list|)
expr_stmt|;
name|md
operator|.
name|update
argument_list|(
name|three
argument_list|)
expr_stmt|;
comment|//step 5
name|md
operator|.
name|update
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|byte
index|[]
name|digest
init|=
name|md
operator|.
name|digest
argument_list|()
decl_stmt|;
comment|//step 6
if|if
condition|(
name|revision
operator|==
literal|3
operator|||
name|revision
operator|==
literal|4
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|50
condition|;
name|i
operator|++
control|)
block|{
name|md
operator|.
name|reset
argument_list|()
expr_stmt|;
name|md
operator|.
name|update
argument_list|(
name|digest
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|digest
operator|=
name|md
operator|.
name|digest
argument_list|()
expr_stmt|;
block|}
block|}
comment|//step 7
if|if
condition|(
name|revision
operator|==
literal|2
operator|&&
name|length
operator|!=
literal|5
condition|)
block|{
throw|throw
operator|new
name|CryptographyException
argument_list|(
literal|"Error: length should be 5 when revision is two actual="
operator|+
name|length
argument_list|)
throw|;
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|digest
argument_list|,
literal|0
argument_list|,
name|result
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CryptographyException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * This algorithm is taked from PDF Reference 1.4 Algorithm 3.3 Page 79.      *      * @param ownerPassword The plain owner password.      * @param userPassword The plain user password.      * @param revision The version of the security.      * @param length The length of the document.      *      * @return The computed owner password.      *      * @throws CryptographyException If there is an error computing O.      * @throws IOException If there is an error computing O.      */
specifier|public
specifier|final
name|byte
index|[]
name|computeOwnerPassword
parameter_list|(
name|byte
index|[]
name|ownerPassword
parameter_list|,
name|byte
index|[]
name|userPassword
parameter_list|,
name|int
name|revision
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|CryptographyException
throws|,
name|IOException
block|{
try|try
block|{
comment|//STEP 1
name|byte
index|[]
name|ownerPadded
init|=
name|truncateOrPad
argument_list|(
name|ownerPassword
argument_list|)
decl_stmt|;
comment|//STEP 2
name|MessageDigest
name|md
init|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"MD5"
argument_list|)
decl_stmt|;
name|md
operator|.
name|update
argument_list|(
name|ownerPadded
argument_list|)
expr_stmt|;
name|byte
index|[]
name|digest
init|=
name|md
operator|.
name|digest
argument_list|()
decl_stmt|;
comment|//STEP 3
if|if
condition|(
name|revision
operator|==
literal|3
operator|||
name|revision
operator|==
literal|4
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|50
condition|;
name|i
operator|++
control|)
block|{
name|md
operator|.
name|reset
argument_list|()
expr_stmt|;
name|md
operator|.
name|update
argument_list|(
name|digest
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|digest
operator|=
name|md
operator|.
name|digest
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|revision
operator|==
literal|2
operator|&&
name|length
operator|!=
literal|5
condition|)
block|{
throw|throw
operator|new
name|CryptographyException
argument_list|(
literal|"Error: Expected length=5 actual="
operator|+
name|length
argument_list|)
throw|;
block|}
comment|//STEP 4
name|byte
index|[]
name|rc4Key
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|digest
argument_list|,
literal|0
argument_list|,
name|rc4Key
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
comment|//STEP 5
name|byte
index|[]
name|paddedUser
init|=
name|truncateOrPad
argument_list|(
name|userPassword
argument_list|)
decl_stmt|;
comment|//STEP 6
name|rc4
operator|.
name|setKey
argument_list|(
name|rc4Key
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|crypted
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|rc4
operator|.
name|write
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|paddedUser
argument_list|)
argument_list|,
name|crypted
argument_list|)
expr_stmt|;
comment|//STEP 7
if|if
condition|(
name|revision
operator|==
literal|3
operator|||
name|revision
operator|==
literal|4
condition|)
block|{
name|byte
index|[]
name|iterationKey
init|=
operator|new
name|byte
index|[
name|rc4Key
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|rc4Key
argument_list|,
literal|0
argument_list|,
name|iterationKey
argument_list|,
literal|0
argument_list|,
name|rc4Key
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|iterationKey
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|iterationKey
index|[
name|j
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|iterationKey
index|[
name|j
index|]
operator|^
operator|(
name|byte
operator|)
name|i
argument_list|)
expr_stmt|;
block|}
name|rc4
operator|.
name|setKey
argument_list|(
name|iterationKey
argument_list|)
expr_stmt|;
name|ByteArrayInputStream
name|input
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|crypted
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|crypted
operator|.
name|reset
argument_list|()
expr_stmt|;
name|rc4
operator|.
name|write
argument_list|(
name|input
argument_list|,
name|crypted
argument_list|)
expr_stmt|;
block|}
block|}
comment|//STEP 8
return|return
name|crypted
operator|.
name|toByteArray
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CryptographyException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * This will take the password and truncate or pad it as necessary.      *      * @param password The password to pad or truncate.      *      * @return The padded or truncated password.      */
specifier|private
specifier|final
name|byte
index|[]
name|truncateOrPad
parameter_list|(
name|byte
index|[]
name|password
parameter_list|)
block|{
name|byte
index|[]
name|padded
init|=
operator|new
name|byte
index|[
name|ENCRYPT_PADDING
operator|.
name|length
index|]
decl_stmt|;
name|int
name|bytesBeforePad
init|=
name|Math
operator|.
name|min
argument_list|(
name|password
operator|.
name|length
argument_list|,
name|padded
operator|.
name|length
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|password
argument_list|,
literal|0
argument_list|,
name|padded
argument_list|,
literal|0
argument_list|,
name|bytesBeforePad
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|ENCRYPT_PADDING
argument_list|,
literal|0
argument_list|,
name|padded
argument_list|,
name|bytesBeforePad
argument_list|,
name|ENCRYPT_PADDING
operator|.
name|length
operator|-
name|bytesBeforePad
argument_list|)
expr_stmt|;
return|return
name|padded
return|;
block|}
block|}
end_class

end_unit

