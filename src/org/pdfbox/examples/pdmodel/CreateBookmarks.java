begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *   *      http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|pdfbox
operator|.
name|examples
operator|.
name|pdmodel
package|;
end_package

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|documentnavigation
operator|.
name|destination
operator|.
name|PDPageFitWidthDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|documentnavigation
operator|.
name|outline
operator|.
name|PDDocumentOutline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|documentnavigation
operator|.
name|outline
operator|.
name|PDOutlineItem
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * This is an example on how to add bookmarks to a PDF document.  It simply  * adds 1 bookmark for every page.  *  * Usage: java org.pdfbox.examples.pdmodel.CreateBookmarks&lt;input-pdf&gt;&lt;output-pdf&gt;  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.2 $  */
end_comment

begin_class
specifier|public
class|class
name|CreateBookmarks
block|{
specifier|private
name|CreateBookmarks
parameter_list|()
block|{
comment|//utility class
block|}
comment|/**      * This will print the documents data.      *      * @param args The command line arguments.      *      * @throws Exception If there is an error parsing the document.      */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
name|usage
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|PDDocument
name|document
init|=
literal|null
decl_stmt|;
try|try
block|{
name|document
operator|=
name|PDDocument
operator|.
name|load
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|document
operator|.
name|isEncrypted
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error: Cannot add bookmarks to encrypted document."
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|PDDocumentOutline
name|outline
init|=
operator|new
name|PDDocumentOutline
argument_list|()
decl_stmt|;
name|document
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|setDocumentOutline
argument_list|(
name|outline
argument_list|)
expr_stmt|;
name|PDOutlineItem
name|pagesOutline
init|=
operator|new
name|PDOutlineItem
argument_list|()
decl_stmt|;
name|pagesOutline
operator|.
name|setTitle
argument_list|(
literal|"All Pages"
argument_list|)
expr_stmt|;
name|outline
operator|.
name|appendChild
argument_list|(
name|pagesOutline
argument_list|)
expr_stmt|;
name|List
name|pages
init|=
name|document
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|getAllPages
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pages
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|PDPage
name|page
init|=
operator|(
name|PDPage
operator|)
name|pages
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|PDPageFitWidthDestination
name|dest
init|=
operator|new
name|PDPageFitWidthDestination
argument_list|()
decl_stmt|;
name|dest
operator|.
name|setPage
argument_list|(
name|page
argument_list|)
expr_stmt|;
name|PDOutlineItem
name|bookmark
init|=
operator|new
name|PDOutlineItem
argument_list|()
decl_stmt|;
name|bookmark
operator|.
name|setDestination
argument_list|(
name|dest
argument_list|)
expr_stmt|;
name|bookmark
operator|.
name|setTitle
argument_list|(
literal|"Page "
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
name|pagesOutline
operator|.
name|appendChild
argument_list|(
name|bookmark
argument_list|)
expr_stmt|;
block|}
name|pagesOutline
operator|.
name|openNode
argument_list|()
expr_stmt|;
name|outline
operator|.
name|openNode
argument_list|()
expr_stmt|;
name|document
operator|.
name|save
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|document
operator|!=
literal|null
condition|)
block|{
name|document
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * This will print the usage for this document.      */
specifier|private
specifier|static
name|void
name|usage
parameter_list|()
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java org.pdfbox.examples.pdmodel.CreateBookmarks<input-pdf><output-pdf>"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

