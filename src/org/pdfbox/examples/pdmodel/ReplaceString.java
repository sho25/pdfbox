begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright (c) 2005, www.pdfbox.org  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are met:  *  * 1. Redistributions of source code must retain the above copyright notice,  *    this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright notice,  *    this list of conditions and the following disclaimer in the documentation  *    and/or other materials provided with the distribution.  * 3. Neither the name of pdfbox; nor the names of its  *    contributors may be used to endorse or promote products derived from this  *    software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * http://www.pdfbox.org  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|pdfbox
operator|.
name|examples
operator|.
name|pdmodel
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|exceptions
operator|.
name|COSVisitorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdfparser
operator|.
name|PDFStreamParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdfwriter
operator|.
name|ContentStreamWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|PDFOperator
import|;
end_import

begin_comment
comment|/**  * This is an example that will replace a string in a PDF with a new one.  *  * The example is taken from the pdf file format specification.  *  * @author<a href="mailto:ben@benlitchfield.com">Ben Litchfield</a>  * @version $Revision: 1.3 $  */
end_comment

begin_class
specifier|public
class|class
name|ReplaceString
block|{
comment|/**      * Constructor.      */
specifier|public
name|ReplaceString
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**      * Locate a string in a PDF and replace it with a new string.      *      * @param inputFile The PDF to open.      * @param outputFile The PDF to write to.      * @param strToFind The string to find in the PDF document.      * @param message The message to write in the file.      *      * @throws IOException If there is an error writing the data.      * @throws COSVisitorException If there is an error writing the PDF.      */
specifier|public
name|void
name|doIt
parameter_list|(
name|String
name|inputFile
parameter_list|,
name|String
name|outputFile
parameter_list|,
name|String
name|strToFind
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|IOException
throws|,
name|COSVisitorException
block|{
comment|// the document
name|PDDocument
name|doc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|doc
operator|=
name|PDDocument
operator|.
name|load
argument_list|(
name|inputFile
argument_list|)
expr_stmt|;
name|List
name|pages
init|=
name|doc
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|getAllPages
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pages
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|PDPage
name|page
init|=
operator|(
name|PDPage
operator|)
name|pages
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|PDStream
name|contents
init|=
name|page
operator|.
name|getContents
argument_list|()
decl_stmt|;
name|PDFStreamParser
name|parser
init|=
operator|new
name|PDFStreamParser
argument_list|(
name|contents
operator|.
name|getStream
argument_list|()
argument_list|)
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|()
expr_stmt|;
name|List
name|tokens
init|=
name|parser
operator|.
name|getTokens
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|tokens
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Object
name|next
init|=
name|tokens
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|next
operator|instanceof
name|PDFOperator
condition|)
block|{
name|PDFOperator
name|op
init|=
operator|(
name|PDFOperator
operator|)
name|next
decl_stmt|;
comment|//Tj and TJ are the two operators that display
comment|//strings in a PDF
if|if
condition|(
name|op
operator|.
name|getOperation
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Tj"
argument_list|)
condition|)
block|{
comment|//Tj takes one operator and that is the string
comment|//to display so lets update that operator
name|COSString
name|previous
init|=
operator|(
name|COSString
operator|)
name|tokens
operator|.
name|get
argument_list|(
name|j
operator|-
literal|1
argument_list|)
decl_stmt|;
name|String
name|string
init|=
name|previous
operator|.
name|getString
argument_list|()
decl_stmt|;
name|string
operator|=
name|string
operator|.
name|replaceFirst
argument_list|(
name|strToFind
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|previous
operator|.
name|reset
argument_list|()
expr_stmt|;
name|previous
operator|.
name|append
argument_list|(
name|string
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|op
operator|.
name|getOperation
argument_list|()
operator|.
name|equals
argument_list|(
literal|"TJ"
argument_list|)
condition|)
block|{
name|COSArray
name|previous
init|=
operator|(
name|COSArray
operator|)
name|tokens
operator|.
name|get
argument_list|(
name|j
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|previous
operator|.
name|size
argument_list|()
condition|;
name|k
operator|++
control|)
block|{
name|Object
name|arrElement
init|=
name|previous
operator|.
name|getObject
argument_list|(
name|k
argument_list|)
decl_stmt|;
if|if
condition|(
name|arrElement
operator|instanceof
name|COSString
condition|)
block|{
name|COSString
name|cosString
init|=
operator|(
name|COSString
operator|)
name|arrElement
decl_stmt|;
name|String
name|string
init|=
name|cosString
operator|.
name|getString
argument_list|()
decl_stmt|;
name|string
operator|=
name|string
operator|.
name|replaceFirst
argument_list|(
name|strToFind
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|cosString
operator|.
name|reset
argument_list|()
expr_stmt|;
name|cosString
operator|.
name|append
argument_list|(
name|string
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|//now that the tokens are updated we will replace the
comment|//page content stream.
name|PDStream
name|updatedStream
init|=
operator|new
name|PDStream
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|OutputStream
name|out
init|=
name|updatedStream
operator|.
name|createOutputStream
argument_list|()
decl_stmt|;
name|ContentStreamWriter
name|tokenWriter
init|=
operator|new
name|ContentStreamWriter
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|tokenWriter
operator|.
name|writeTokens
argument_list|(
name|tokens
argument_list|)
expr_stmt|;
name|page
operator|.
name|setContents
argument_list|(
name|updatedStream
argument_list|)
expr_stmt|;
block|}
name|doc
operator|.
name|save
argument_list|(
name|outputFile
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
block|{
name|doc
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * This will open a PDF and replace a string if it finds it.      *<br />      * see usage() for commandline      *      * @param args Command line arguments.      */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|ReplaceString
name|app
init|=
operator|new
name|ReplaceString
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|4
condition|)
block|{
name|app
operator|.
name|usage
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|app
operator|.
name|doIt
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|,
name|args
index|[
literal|1
index|]
argument_list|,
name|args
index|[
literal|2
index|]
argument_list|,
name|args
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * This will print out a message telling how to use this example.      */
specifier|private
name|void
name|usage
parameter_list|()
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"usage: "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"<input-file><output-file><search-string><Message>"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

